# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023.
# Olexandr Konovalov, 2023.
# Sofiia Matios, 2023.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 20:18:53+0000\n"
"PO-Revision-Date: 2023-02-12 20:20+0000\n"
"Last-Translator: Sofiia Matios, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: git-novice/404.md:1
msgid ""
"---\n"
"layout: base\n"
"root: .\n"
"permalink: 404.html\n"
"title: \"Page not found\"\n"
"---"
msgstr ""
"---\n"
"layout: base\n"
"root: .\n"
"permalink: 404.html\n"
"title: \"Сторінку не знайдено\"\n"
"---"

# header
#: git-novice/404.md:8
msgid "# Oops! We can't find that page."
msgstr "# Ой! Ми не можемо знайти цю сторінку."

#: git-novice/404.md:9
msgid "{: style=\"text-align: center;\"}"
msgstr "{: style=\"text-align: center;\"}"

# blockquote, which can be cascaded
#: git-novice/404.md:11
msgid "> ## Our apologies!"
msgstr "> ## Наші вибачення!"

#: git-novice/404.md:12
msgid ""
">\n"
"> We can't seem to find the page you're looking for.\n"
"> Try going back to the <a href=\"javascript:history.back()\">previous page</a> or\n"
"> navigate to any other page using the navigation bar above\n"
"> {%- if site.kind == \"lesson\" -%} or the schedule below {%- endif -%}.\n"
"> If you got here by clicking on a link in the\n"
"> {%- if site.kind == \"lesson\" -%} lesson {%- else -%} workshop {%- endif -%},\n"
"> please report this link to the\n"
"> {%- if site.kind == \"lesson\" -%} lesson developers {%- else -%} workshop organizers {%- endif -%}."
msgstr ""
">\n"
"> Ми не можемо знайти сторінку, яку ви шукаєте.\n"
"> Спробуйте повернутися до <a href=\"javascript:history.back()\">попередньої сторінки</a> або\n"
"> перейти на будь-яку іншу сторінку за допомогою навігаційної панелі вище\n"
"> {%- if site.kind == \"lesson\" -%} або нижче {%- endif -%}.\n"
"> Якщо ви потрапили сюди, натиснувши на посилання в\n"
"> {%- if site.kind == \"lesson\" -%} уроці {%- else -%} семінарі {%- endif -%},\n"
"> будь-ласка, повідомте про це посилання\n"
"> {%- if site.kind == \"lesson\" -%} розробників уроків {%- else -%} організаторів семінарів {%- endif -%}."

# SC/DC Template label
#: git-novice/404.md:21
msgid "{: .caution}"
msgstr "{: .caution}"

#: git-novice/404.md:23
msgid ""
"{% if site.kind == \"lesson\" %}\n"
"  {% include syllabus.html %}\n"
"{% endif%}"
msgstr ""
"{% if site.kind == \"lesson\" %}\n"
"  {% include syllabus.html %}\n"
"{% endif%}"

# Front Matter
#: git-novice/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Кодекс Поведінки Учасника Проєкту\"\n"
"---"

#: git-novice/CODE_OF_CONDUCT.md:5
msgid ""
"As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""
"Як учасники та супровідники цього проєкту,\n"
"ми зобов'язуємося дотримуватися [Кодексу поведінки Carpentry][coc]."

#: git-novice/CODE_OF_CONDUCT.md:8
msgid ""
"Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""
"Про випадки образливої, агресивної або іншої неприйнятної поведінки\n"
"можна повідомити, дотримуючись наших [інструкцій щодо звітування][coc-reporting]."

#: git-novice/CODE_OF_CONDUCT.md:11
msgid ""
"[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/incident-reporting.html"
msgstr ""
"[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/incident-reporting.html"

# header
#: git-novice/CONTRIBUTING.md:1
msgid "# Contributing"
msgstr "# Внески до проєкту"

#: git-novice/CONTRIBUTING.md:3
msgid ""
"[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""
"[Software Carpentry][swc-site] та [Data Carpentry][dc-site] є проєктами з відкритим вихідним кодом,\n"
"і ми вітаємо будь-які внески:\n"
"нові уроки,\n"
"виправлення наявного матеріалу,\n"
"повідомлення про помилки,\n"
"та рецензування запропонованих змін - все це вітається."

# header
#: git-novice/CONTRIBUTING.md:10
msgid "## Contributor Agreement"
msgstr "## Угода Про Участь у Проєкті"

#: git-novice/CONTRIBUTING.md:12
msgid ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html)."
msgstr ""
"Роблячи свій внесок,\n"
"ви погоджуєтеся, що ми можемо розповсюджувати вашу роботу на умовах [нашої ліцензії] (LICENSE.md).\n"
"В обмін на це,\n"
"ми розглянемо ваші зауваження та/або оцінимо вашу пропозицію щодо змін настільки швидко, наскільки це буде можливо,\n"
"і допоможемо вам стати членом нашої спільноти.\n"
"Кожен, хто бере участь у [Software Carpentry][swc-site] та [Data Carpentry][dc-site]\n"
"погоджується дотримуватися нашого [кодексу поведінки](https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html)."

# header
#: git-novice/CONTRIBUTING.md:20
msgid "## How to Contribute"
msgstr "## Як зробити внесок"

#: git-novice/CONTRIBUTING.md:22
msgid ""
"The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""
"Найпростіший спосіб почати - це подати заявку про проблему,\n"
"щоб повідомити нам про орфографічну помилку,\n"
"певне некоректне формулювання\n"
"або фактичну помилку.\n"
"Це хороший спосіб заявити про себе\n"
"і познайомитися з деякими членами нашої спільноти."

# ordered list
#: git-novice/CONTRIBUTING.md:29
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr "1.  Якщо у вас немає облікового запису [GitHub][github],"

#: git-novice/CONTRIBUTING.md:30
msgid ""
"    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""
"    ви можете [надіслати нам коментарі електронною поштою][contact].\n"
"    Однак,\n"
"    ми зможемо відповісти швидше, якщо ви скористаєтеся одним з інших способів, описаних нижче."

# ordered list
#: git-novice/CONTRIBUTING.md:34
msgid "2.  If you have a [GitHub][github] account,"
msgstr "2.  Якщо у вас є обліковий запис [GitHub][github],"

#: git-novice/CONTRIBUTING.md:35
msgid ""
"    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue][new-issue].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""
"    або ви хочете [створити його][github-join],\n"
"    але не знаєте, як користуватися Git'ом,\n"
"    ви можете повідомити про проблеми або запропонуіати покращення, [створивши запит][new-issue].\n"
"    Це дозволяє нам призначити цей запит комусь\n"
"    і відповісти на нього в потоковому обговоренні."

# ordered list
#: git-novice/CONTRIBUTING.md:41
msgid "3.  If you are comfortable with Git,"
msgstr "3.  Якщо вам зручно працювати з Git'ом,"

#: git-novice/CONTRIBUTING.md:42
msgid ""
"    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""
"    і ви хотіли б додати або змінити матеріал,\n"
"    ви можете подати запит на зміни (англ. pull request, PR).\n"
"    Інструкції, як це зробити, [наведені нижче](#використання-github)."

# header
#: git-novice/CONTRIBUTING.md:46
msgid "## Where to Contribute"
msgstr "## Де робити внески"

# ordered list
#: git-novice/CONTRIBUTING.md:48
msgid "1.  If you wish to change this lesson,"
msgstr "1.  Якщо ви хочете змінити цей урок,"

#: git-novice/CONTRIBUTING.md:49
msgid ""
"    please work in <https://github.com/swcarpentry/git-novice>,\n"
"    which can be viewed at <https://swcarpentry.github.io/git-novice>."
msgstr ""
"    будь-ласка, працюйте в <https://github.com/swcarpentry/git-novice>,\n"
"    який можна переглянути на <https://swcarpentry.github.io/git-novice>."

# ordered list
#: git-novice/CONTRIBUTING.md:52
msgid "2.  If you wish to change the example lesson,"
msgstr "2.  Якщо ви бажаєте змінити шаблон уроку,"

#: git-novice/CONTRIBUTING.md:53
msgid ""
"    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""
"    будь-ласка, працюйте в <https://github.com/carpentries/lesson-example>,\n"
"    який документує формат наших уроків,\n"
"    і з яким можна ознайомитись за посиланням <https://carpentries.github.io/lesson-example>."

# ordered list
#: git-novice/CONTRIBUTING.md:57
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""
"3.  Якщо ви бажаєте змінити шаблон, який використовується для веб-сайтів "
"семінарів,"

#: git-novice/CONTRIBUTING.md:58
msgid ""
"    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-template>\n"
"    provide more background on our design choices."
msgstr ""
"    будь-ласка, працюйте в  <https://github.com/carpentries/workshop-template>.\n"
"    На головній сторінці цього репозиторію пояснюється, як налаштувати веб-сайти семінарів,\n"
"    а додаткові сторінки у <https://carpentries.github.io/workshop-template>\n"
"    надають більше інформації про наш вибір дизайну."

# ordered list
#: git-novice/CONTRIBUTING.md:63
msgid "4.  If you wish to change CSS style files, tools,"
msgstr "4.  Якщо ви хочете змінити файли стилів CSS, інструменти,"

#: git-novice/CONTRIBUTING.md:64
msgid ""
"    or HTML boilerplate for lessons or workshops stored in `_includes` or `_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""
"    або HTML-шаблон для уроків чи семінарів, що зберігаються в `_includes` або `_layouts`,\n"
"    будь ласка, працюйте в  <https://github.com/carpentries/styles>."

# header
#: git-novice/CONTRIBUTING.md:67
msgid "## What to Contribute"
msgstr "## Які внески робити"

#: git-novice/CONTRIBUTING.md:69
msgid ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][new-issue]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""
"Існує багато способів зробити свій внесок,\n"
"від написання нових вправ та покращення тих, що вже існують,\n"
"до оновлення або додавання документації\n"
"та подання [звітів про помилки][new-issue]\n"
"про речі, які не працюють, незрозумілі або відсутні.\n"
"Якщо ви шукаєте ідеї,\n"
"будь ласка, перегляньте [перелік проблем для цього репозиторію][issues],\n"
"або перелік проблем для проєктів [Data Carpentry][dc-issues]\n"
"та [Software Carpentry][swc-issues]."

#: git-novice/CONTRIBUTING.md:79
msgid ""
"Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""
"Також вітаються коментарі щодо проблем та рецензування запитів на зміни:\n"
"разом ми розумніші, ніж поодинці.\n"
"Особливо цінні відгуки від початковців і новоприбулих:\n"
"людям, які користуються цими уроками вже деякий час, легко\n"
"забути, наскільки непроникним може бути деякий матеріал,\n"
"тому свіжий погляд завжди вітається."

# header
#: git-novice/CONTRIBUTING.md:86
msgid "## What *Not* to Contribute"
msgstr "## Які внески *не слід* робити"

#: git-novice/CONTRIBUTING.md:88
msgid ""
"Our lessons already contain more material than we can cover in a typical workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""
"Наші уроки вже містять більше матеріалу, ніж ми можемо охопити на типовому семінарі,\n"
"тому ми зазвичай *не* шукаємо більше понять чи інструментів, щоб додати до уроків.\n"
"Як правило,\n"
"якщо ви хочете представити нову ідею,\n"
"ви повинні (а) оцінити, скільки часу знадобиться на викладання\n"
"і (б) пояснити, що ви вилучите, щоб звільнити місце для цього.\n"
"Перше заохочує авторів бути чесними щодо вимог;\n"
"друге - добре подумати про пріоритети."

#: git-novice/CONTRIBUTING.md:97
msgid ""
"We are also not looking for exercises or other material that only run on one platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""
"Ми також не шукаємо завдання чи інші матеріали, які працюють лише на одній платформі.\n"
"На наших семінарах зазвичай присутні користувачі Windows, macOS та Linux;\n"
"для того, щоб бути корисними,\n"
"наші уроки повинні однаково добре працювати на всіх трьох платформах."

# header
#: git-novice/CONTRIBUTING.md:102
msgid "## Using GitHub"
msgstr "## Використання GitHub"

#: git-novice/CONTRIBUTING.md:104
msgid ""
"If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""
"Якщо ви вирішили зробити свій внесок через GitHub,\n"
"вам варто ознайомитися зі статтею\n"
"[Як зробити внесок у проєкт з відкритим вихідним кодом на GitHub][how-contribute].\n"
"Якщо коротко:"

# ordered list
#: git-novice/CONTRIBUTING.md:109
msgid ""
"1.  The published copy of the lesson is in the `gh-pages` branch of the "
"repository"
msgstr ""
"1.  Опублікована копія уроку знаходиться у гілці `gh-pages` репозиторію"

#: git-novice/CONTRIBUTING.md:110
msgid ""
"    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your `gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""
"    (для того, щоб GitHub автоматично згенерував урок).\n"
"    Будь ласка, створюйте всі гілки звідти,\n"
"    і об'єднайте гілку `gh-pages` [головного репозиторію][repo] з вашою гілкою `gh-pages`\n"
"    перед початком роботи.\n"
"    Будь ласка, *не* працюйте безпосередньо у вашій гілці `gh-pages`,\n"
"   оскільки це може ускладнити вашу роботу над іншими внесками."

# ordered list
#: git-novice/CONTRIBUTING.md:117
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""
"2.  Ми використовуємо [GitHub flow][github-flow] для керування змінами:"

#: git-novice/CONTRIBUTING.md:118
msgid ""
"    1.  Create a new branch in your desktop copy of this repository for each significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository][repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""
"    1.  Створіть нову гілку у вашій десктопній копії цього сховища для кожної суттєвої змінної.\n"
"   2. Внесіть зміни для цієї гілки.\n"
"   3. Натисніть цю гілку для відгалуження цього сховища на GitHub.\n"
"   4. Надішліть запит на приєднання цієї гілки до [master repository][repo].\n"
"   5. Якщо ви отримали зворотній зв'язок,\n"
"   зробіть зміни на вашому робочому столі і натисніть на гілку на GitHub:\n"
"   запит на приєднання оновиться автоматично. "

#: git-novice/CONTRIBUTING.md:126
msgid ""
"Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""
"За кожний урок відповідають два супровідника, які переглядають проблеми і задовільняють запити на зміни\n"
"або заохочують до цього інших.\n"
"Супровідники є волонтерами спільноти,\n"
"і мають вирішальне слово щодо того, що буде додано до уроку."

# header
#: git-novice/CONTRIBUTING.md:131
msgid "## Other Resources"
msgstr "## Інші ресурси"

#: git-novice/CONTRIBUTING.md:133
msgid ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""
"Загальне обговорення [Software Carpentry][swc-site] та [Data Carpentry][dc-site]\n"
"відбувається у [дискусійному списку розсилки][discuss-list],\n"
"до якого може приєднатися кожен охочий.\n"
"Ви також можете [зв'язатися з нами електронною поштою][contact]."

#: git-novice/CONTRIBUTING.md:138
msgid ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"

# Front Matter
#: git-novice/LICENSE.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Ліцензії\"\n"
"---"

# header
#: git-novice/LICENSE.md:5
msgid "## Instructional Material"
msgstr "## Навчальні матеріали"

#: git-novice/LICENSE.md:7
msgid ""
"All Software Carpentry, Data Carpentry, and Library Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""
"Усі навчальні матеріали Software Carpentry, Data Carpentry та Library Carpentry\n"
"доступні на умовах [Creative Commons Attribution\n"
"ліцензії][cc-by-human]. Нижче наведено придатний для читання людиною короткий виклад\n"
"(а не заміна) [повного юридичного тексту ліцензії CC BY\n"
" 4.0][cc-by-legal]."

#: git-novice/LICENSE.md:13
msgid "You are free:"
msgstr "Ви можете вільно:"

# unordered list
#: git-novice/LICENSE.md:15
msgid ""
"* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""
"* **Поширювати**---копіювати і розповсюджувати матеріал у будь-якому вигляді"
" чи форматі"

# unordered list
#: git-novice/LICENSE.md:16
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""
"* **Змінювати**---реміксувати, трансформувати, і брати матеріал за основу"

#: git-novice/LICENSE.md:18
msgid "for any purpose, even commercially."
msgstr "для будь-яких цілей, навіть комерційних."

#: git-novice/LICENSE.md:20
msgid ""
"The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""
"Ліцензіар не може відкликати ці дозволи поки ви дотримуєтесь\n"
"умов ліцензії."

#: git-novice/LICENSE.md:23
msgid "Under the following terms:"
msgstr "На наступних умовах:"

# unordered list
#: git-novice/LICENSE.md:25
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr "* **Зазначення Авторства**---Ви маєте вказати автора (зазначивши, що"

#: git-novice/LICENSE.md:26
msgid ""
"  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  https://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""
"  ваша робота є похідною від роботи, захищеної авторським правом © Software\n"
"  Carpentry, та, де це можливо, зробити посилання на\n"
"  http://software-carpentry.org/), розмістити [посилання на\n"
"  ліцензію][cc-by-human] і вказати чи було внесено зміни. Ви можете зробити\n"
"  це у будь-який розумний спосіб, але так, щоб не створювати враження стосовно того,\n"
"  що ліцензіар підтримує чи схвалює вас або ваше використання твору."

#: git-novice/LICENSE.md:33
msgid ""
"**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""
"**Без додаткових обмежень**---Ви не можете висувати додаткові умови або\n"
"застосовувати технологічні засоби захисту, що обмежують права інших\n"
"на дії, дозволені ліцензією. З розумінням того, що:"

#: git-novice/LICENSE.md:37
msgid "Notices:"
msgstr "Примітки:"

# unordered list
#: git-novice/LICENSE.md:39
msgid "* You do not have to comply with the license for elements of the"
msgstr "* Ви можете не дотримуватись умов ліцензії в частині,"

#: git-novice/LICENSE.md:40
msgid ""
"  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""
"  що стосується частин матеріалу, котрі знаходяться у суспільному надбанні, або коли ваше використання дозволене\n"
"  застосовними виключеннями та обмеженнями авторського права.\n"
"* Не надається жодних гарантій. Ліцензія може не надавати всіх\n"
"  необхідних дозволів, необхідних для вашого використання матеріалу. Наприклад, інші\n"
"  права, такі як право на зображення особи, на приватне життя або особисті немайнові права можуть обмежувати ваші\n"
"  можливості використовувати матеріал."

# header
#: git-novice/LICENSE.md:47
msgid "## Software"
msgstr "## Програмне забезпечення"

#: git-novice/LICENSE.md:49
msgid ""
"Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""
"Якщо не зазначено інше, приклади програм та інше програмне забезпечення\n"
"надані Software Carpentry та Data Carpentry, доступні відповідно до\n"
"[OSI][osi]-затвердженої\n"
"[ліцензії MIT][mit-license]."

#: git-novice/LICENSE.md:54
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""
"Дозвіл надається безкоштовно будь-якій особі, яка отримує\n"
"копію цього програмного забезпечення та пов'язаних з ним файлів документації\n"
"(\"Програмне забезпечення\"), мати справу з Програмним забезпеченням без обмежень, включаючи\n"
"відсутність обмежень прав на використання, копіювання, модифікацію, об'єднання, публікацію,\n"
"розповсюдження, субліцензування та/або продаж копії Програмного забезпечення, а також\n"
"дозволяти особам, яким надається Програмне забезпечення, робити це, відповідно до\n"
"наступних умов:"

#: git-novice/LICENSE.md:62
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""
"Наведене вище повідомлення про авторські права і це повідомлення про дозвіл повинні бути\n"
"включені до всіх копій або значних частин Програми."

#: git-novice/LICENSE.md:65
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""
"ПРОГРАМНЕ ЗАБЕЗПЕЧЕННЯ НАДАЄТЬСЯ \"ЯК Є\", БЕЗ БУДЬ-ЯКИХ ГАРАНТІЙ,\n"
"ЯВНИХ АБО НЕЯВНИХ, ВКЛЮЧАЮЧИ, АЛЕ НЕ ОБМЕЖУЮЧИСЬ ГАРАНТІЯМИ\n"
"ПРИДАТНОСТІ ДЛЯ ПРОДАЖУ, ПРИДАТНОСТІ ДЛЯ ПЕВНОЇ МЕТИ ТА\n"
"НЕПОРУШЕННЯ АВТОРСЬКИХ ПРАВ. ЗА ЖОДНИХ ОБСТАВИН АВТОРИ АБО ВЛАСНИКИ АВТОРСЬКИХ ПРАВ\n"
"НЕ НЕСУТЬ ВІДПОВІДАЛЬНОСТІ ЗА БУДЬ-ЯКІ ПРЕТЕНЗІЇ, ЗБИТКИ АБО ІНШУ ВІДПОВІДАЛЬНІСТЬ, ЧИ ТО В РАМКАХ,\n"
"ДОГОВОРУ, ДЕЛІКТУ АБО ІНШИМ ЧИНОМ, ЩО ВИНИКАЮТЬ З, ВНАСЛІДОК АБО У ЗВ'ЯЗКУ З\n"
"ПРОГРАМНИМ ЗАБЕЗПЕЧЕННЯМ, ЙОГО ВИКОРИСТАННЯМ АБО ІНШИМИ ОПЕРАЦІЯМИ З ПРОГРАМНИМ ЗАБЕЗПЕЧЕННЯМ."

# header
#: git-novice/LICENSE.md:73
msgid "## Trademark"
msgstr "## Торговельна марка"

#: git-novice/LICENSE.md:75
msgid ""
"\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""
"«Software Carpentry» та «Data Carpentry» та їхні відповідні логотипи\n"
"є зареєстрованими торговими марками [Community Initiatives][CI]."

#: git-novice/LICENSE.md:78
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"

#: git-novice/README.md:1
msgid ""
"[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git-E01563.svg)](https://swcarpentry.slack.com/messages/C91JS49HD) "
msgstr ""
"[![Створіть з нами обліковий запис Slack](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git-E01563.svg)](https://swcarpentry.slack.com/messages/C91JS49HD) "

#: git-novice/README.md:4
msgid ""
"git-novice\n"
"=========="
msgstr ""
"git-novice\n"
"=========="

#: git-novice/README.md:7
msgid ""
"An introduction to version control for novices using Git.\n"
"Please see <https://swcarpentry.github.io/git-novice/> for a rendered version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""
"Вступ до управління версіями для новачків за допомогою Git.\n"
"Будь ласка, перегляньте <https://swcarpentry.github.io/git-novice/> для візуалізованої версії цього матеріалу,\n"
"[шаблон уроку документації][lesson-example]\n"
"для інструкцій з форматування, побудови та подачі матеріалу,\n"
"або запустіть `make` у цому репозиторії для списку корисних команд."

#: git-novice/README.md:13
msgid "Maintainers:"
msgstr "Супроводжувачі:"

# unordered list
#: git-novice/README.md:15
msgid "* [Nima Hejazi][hejazi_nima]: [@nhejazi](https://github.com/nhejazi)"
msgstr "* [Nima Hejazi][hejazi_nima]: [@nhejazi](https://github.com/nhejazi)"

# unordered list
#: git-novice/README.md:16
msgid "* [Kat Koziar][koziar_kat]: [@kekoziar](https://github.com/kekoziar)"
msgstr "* [Kat Koziar][koziar_kat]: [@kekoziar](https://github.com/kekoziar)"

# unordered list
#: git-novice/README.md:17
msgid "* [Madicken Munk][munk_madicken]: [@munkm](https://github.com/munkm)"
msgstr "* [Madicken Munk][munk_madicken]: [@munkm](https://github.com/munkm)"

#: git-novice/README.md:19
msgid ""
"Alumni maintainers:\n"
"* [Ivan Gonzalez][gonzalez_ivan]: [@iglpdc](https://github.com/iglpdc)\n"
"* [Daisie Huang][huang_daisie]: [@daisieh](https://github.com/daisieh)"
msgstr ""
"Супроводжувачі-випускники:\n"
"* [Ivan Gonzalez][gonzalez_ivan]: [@iglpdc](https://github.com/iglpdc)\n"
"* [Daisie Huang][huang_daisie]: [@daisieh](https://github.com/daisieh)"

#: git-novice/README.md:23
msgid ""
"[gonzalez_ivan]: https://carpentries.org/instructors/#iglpdc\n"
"[hejazi_nima]: https://carpentries.org/instructors/#nhejazi\n"
"[huang_daisie]: https://software-carpentry.org/team/#huang_daisie\n"
"[koziar_kat]: https://carpentries.org/instructors/#kekoziar\n"
"[munk_madicken]: https://carpentries.org/instructors/#munkm\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example"
msgstr ""
"[gonzalez_ivan]: https://carpentries.org/instructors/#iglpdc\n"
"[hejazi_nima]: https://carpentries.org/instructors/#nhejazi\n"
"[huang_daisie]: https://software-carpentry.org/team/#huang_daisie\n"
"[koziar_kat]: https://carpentries.org/instructors/#kekoziar\n"
"[munk_madicken]: https://carpentries.org/instructors/#munkm\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example"

# Front Matter
#: git-novice/_episodes/01-basics.md:1
msgid ""
"---\n"
"title: Automated Version Control\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What is version control and why should I use it?\"\n"
"objectives:\n"
"- \"Understand the benefits of an automated version control system.\"\n"
"- \"Understand the basics of how automated version control systems work.\"\n"
"keypoints:\n"
"- \"Version control is like an unlimited 'undo'.\"\n"
"- \"Version control also allows many people to work in parallel.\"\n"
"---"
msgstr ""
"---\n"
"title: Автоматизоване управління версіями\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"Що таке контроль версій і чому ми маємо його використовувати?\"\n"
"objectives:\n"
"- \"Зрозуміти переваги автоматизованої системи управління версіями.\"\n"
"- \"Зрозуміти основи роботи автоматизованих систем управління версіями.\"\n"
"keypoints:\n"
"- \"Контроль версій схожий на необмежене 'скасування' (undo).\"\n"
"- \"Контроль версій також дозволяє багатьом людям працювати паралельно.\"\n"
"---"

#: git-novice/_episodes/01-basics.md:15
msgid ""
"We'll start by exploring how version control can be used\n"
"to keep track of what one person did and when.\n"
"Even if you aren't collaborating with other people,\n"
"automated version control is much better than this situation:"
msgstr ""
"Ми почнемо з розгляду того, як контроль версій може бути використаний\n"
"для відстеження того, що і коли зробив один користувач.\n"
"Навіть якщо ви не співпрацюєте з іншими людьми,\n"
"автоматизований контроль версій набагато краще, ніж ця ситуація:"

#: git-novice/_episodes/01-basics.md:20
msgid ""
"![\"Piled Higher and Deeper\" by Jorge Cham, "
"http://www.phdcomics.com]({{ site.baseurl }}/fig/phd101212s.png)"
msgstr ""
"![\"Piled Higher and Deeper\", Jorge Cham, "
"http://www.phdcomics.com]({{ site.baseurl }}/fig/phd101212s.png)"

#: git-novice/_episodes/01-basics.md:22
msgid "\"Piled Higher and Deeper\" by Jorge Cham, http://www.phdcomics.com"
msgstr "\"Piled Higher and Deeper\",  Jorge Cham, http://www.phdcomics.com"

#: git-novice/_episodes/01-basics.md:24
msgid ""
"We've all been in this situation before: it seems unnecessary to have\n"
"multiple nearly-identical versions of the same document. Some word\n"
"processors let us deal with this a little better, such as Microsoft\n"
"Word's \n"
"[Track Changes](https://support.office.com/en-us/article/Track-changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), \n"
"Google Docs' [version history](https://support.google.com/docs/answer/190843?hl=en), or \n"
"LibreOffice's [Recording and Displaying Changes](https://help.libreoffice.org/Common/Recording_and_Displaying_Changes)."
msgstr ""
"Ми всі були в цій ситуації раніше: здається непотрібним мати кілька\n"
"майже ідентичних версій одного документа. Деякі\n"
"текстові процесори дозволяють нам впоратися з цим трохи краще, наприклад, Microsoft \n"
"Word може \n"
"[відстежувати зміни](https://support.office.com/en-us/article/Track-changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), \n"
"Google Docs підтримує [історію версій](https://support.google.com/docs/answer/190843?hl=en), а \n"
"LibreOffice - [запис та відображення змін](https://help.libreoffice.org/Common/Recording_and_Displaying_Changes)."

#: git-novice/_episodes/01-basics.md:32
msgid ""
"Version control systems start with a base version of the document and\n"
"then record changes you make each step of the way. You can\n"
"think of it as a recording of your progress: you can rewind to start at the base\n"
"document and play back each change you made, eventually arriving at your\n"
"more recent version."
msgstr ""
"Системи управління версіями починають з зберігання базової (тобто початкової) версії документа, а\n"
"потім записують зміни, які ви робите на кожному етапі редагування. Ви можете\n"
"думати про це як про запис вашого прогресу: ви можете перемотати його назад, щоб почати з базової версії\n"
"документу та відтворити кожну внесену вами зміну, в кінцевому підсумку \n"
"прийшовши до вашої більш пізньої версії."

#: git-novice/_episodes/01-basics.md:38
msgid "![Changes Are Saved Sequentially]({{ site.baseurl }}/fig/play-changes.svg)"
msgstr "![Зміни зберігаються послідовно]({{ site.baseurl }}/fig/play-changes.svg)"

#: git-novice/_episodes/01-basics.md:40
msgid ""
"Once you think of changes as separate from the document itself, you\n"
"can then think about \"playing back\" different sets of changes on the base document, ultimately\n"
"resulting in different versions of that document. For example, two users can make independent\n"
"sets of changes on the same document. "
msgstr ""
"Якщо ви будете розглядати зміни, як щось окреме від самого документу, ви\n"
"можете уявити собі процес «відтворення» різних наборів змін на базовому документі, який, зрештою, \n"
"призведе до різних версій цього документа. Наприклад, два користувача можуть робити незалежні\n"
"набори змін у одному документі."

#: git-novice/_episodes/01-basics.md:45
msgid "![Different Versions Can be Saved]({{ site.baseurl }}/fig/versions.svg)"
msgstr "![Різні версії можуть бути збережені]({{ site.baseurl }}/fig/versions.svg)"

#: git-novice/_episodes/01-basics.md:47
msgid ""
"Unless multiple users make changes to the same section of the document - a conflict - you can \n"
"incorporate two sets of changes into the same base document."
msgstr ""
"Якщо немає конфліктів, тобто немає ситуації, коли декілька користувачів вносять зміни до одного й того ж розділу документа, то буде можливо \n"
"включити два набори змін до одного базового документа."

#: git-novice/_episodes/01-basics.md:50
msgid "![Multiple Versions Can be Merged]({{ site.baseurl }}/fig/merge.svg)"
msgstr "![Різні версії можуть бути об'єднані]({{ site.baseurl }}/fig/merge.svg)"

#: git-novice/_episodes/01-basics.md:52
msgid ""
"A version control system is a tool that keeps track of these changes for us,\n"
"effectively creating different versions of our files. It allows us to decide\n"
"which changes will be made to the next version (each record of these changes is\n"
"called a [commit]({{ page.root }}{% link reference.md %}#commit)), and keeps useful metadata\n"
"about them. The complete history of commits for a particular project and their\n"
"metadata make up a [repository]({{ page.root }}{% link reference.md %}#repository).\n"
"Repositories can be kept in sync across different computers, facilitating\n"
"collaboration among different people."
msgstr ""
"Система управління версіями - це інструмент, який відстежує ці зміни для нас, \n"
"по суті створюючи різні версії наших файлів. Це дозволяє нам вирішити,\n"
"які зміни будуть внесені до наступної версії (кожен запис цих змін\n"
"називається [коміт]({{ page.root }}{% link reference.md %}#commit)), і зберігає корисні метадані\n"
"про зміни. Повна історія комітів для конкретного проєкту та їх\n"
"метадані складають [репозиторій]({{ page.root }}{% link reference.md %}#repository).\n"
"Репозиторії, які знаходяться на різних комп'ютерах, можуть бути синхронізовані, що сприяє\n"
"співпраці між різними людьми."

# blockquote, which can be cascaded
#: git-novice/_episodes/01-basics.md:61
msgid "> ## The Long History of Version Control Systems"
msgstr "> ## Давня Історія Систем Управління Версіями"

#: git-novice/_episodes/01-basics.md:62
msgid ""
">\n"
"> Automated version control systems are nothing new.\n"
"> Tools like [RCS](https://en.wikipedia.org/wiki/Revision_Control_System), [CVS](https://en.wikipedia.org/wiki/Concurrent_Versions_System), or [Subversion](https://en.wikipedia.org/wiki/Apache_Subversion) have been around since the early 1980s and are used by \n"
"> many large companies.\n"
"> However, many of these are now considered legacy systems (i.e., outdated) due to various \n"
"> limitations in their capabilities.\n"
"> More modern systems, such as Git and [Mercurial](https://swcarpentry.github.io/hg-novice/),\n"
"> are *distributed*, meaning that they do not need a centralized server to host the repository.\n"
"> These modern systems also include powerful merging tools that make it possible for \n"
"> multiple authors to work on\n"
"> the same files concurrently."
msgstr ""
">\n"
"> Автоматизовані системи управління версіями не є чимось новим.\n"
"> Інструменти, такі як [RCS](https://en.wikipedia.org/wiki/Revision_Control_System), [CVS](https://en.wikipedia.org/wiki/Concurrent_Versions_System), або [Subversion](https://en.wikipedia.org/wiki/Apache_Subversion) існують з початку 1980-х років і використовуються \n"
"> багатьма великими компаніями.\n"
"> Однак багато з них зараз вважаються застарілими системами через різні \n"
"> обмеження у своїх можливостях.\n"
"> Більш сучасні системи, такі як Git та [Mercurial](https://swcarpentry.github.io/hg-novice/),\n"
"> є *розподіленими*, що означає, що їм не потрібен централізований сервер для розміщення репозиторію.\n"
"> Ці сучасні системи також включають потужні інструменти злиття змін (merging), які дозволяють багатьом \n"
"> авторам працювати над одними й тими ж файлами\n"
"> одночасно."

# SC/DC Template label
#: git-novice/_episodes/01-basics.md:73 git-novice/_episodes/02-setup.md:45
#: git-novice/_episodes/02-setup.md:76 git-novice/_episodes/02-setup.md:105
#: git-novice/_episodes/02-setup.md:134 git-novice/_episodes/02-setup.md:168
#: git-novice/_episodes/02-setup.md:190 git-novice/_episodes/04-changes.md:204
#: git-novice/_episodes/04-changes.md:355
#: git-novice/_episodes/04-changes.md:494
#: git-novice/_episodes/04-changes.md:509
#: git-novice/_episodes/04-changes.md:562
#: git-novice/_episodes/04-changes.md:610
#: git-novice/_episodes/05-history.md:305
#: git-novice/_episodes/05-history.md:338 git-novice/_episodes/07-github.md:89
#: git-novice/_episodes/07-github.md:137 git-novice/_episodes/07-github.md:145
#: git-novice/_episodes/07-github.md:336 git-novice/_episodes/07-github.md:359
#: git-novice/_episodes/07-github.md:372 git-novice/_episodes/07-github.md:426
#: git-novice/_episodes/08-collab.md:26 git-novice/_episodes/08-collab.md:145
#: git-novice/_episodes/08-collab.md:188 git-novice/_episodes/10-open.md:101
#: git-novice/_episodes/13-hosting.md:70
#: git-novice/_episodes/14-supplemental-rstudio.md:69
#: git-novice/_episodes/14-supplemental-rstudio.md:115
#: git-novice/_episodes/14-supplemental-rstudio.md:133
#: git-novice/_extras/discuss.md:114
msgid "{: .callout}"
msgstr "{: .callout}"

# blockquote, which can be cascaded
#: git-novice/_episodes/01-basics.md:75
msgid "> ## Paper Writing"
msgstr "> ## Написання Статті"

#: git-novice/_episodes/01-basics.md:76
msgid ""
">\n"
"> *   Imagine you drafted an excellent paragraph for a paper you are writing, but later ruin \n"
">     it. How would you retrieve the *excellent* version of your conclusion? Is it even possible?\n"
">\n"
"> *   Imagine you have 5 co-authors. How would you manage the changes and comments \n"
">     they make to your paper?  If you use LibreOffice Writer or Microsoft Word, what happens if \n"
">     you accept changes made using the `Track Changes` option? Do you have a \n"
">     history of those changes?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > *   Recovering the excellent version is only possible if you created a copy\n"
"> >     of the old version of the paper. The danger of losing good versions\n"
"> >     often leads to the problematic workflow illustrated in the PhD Comics\n"
"> >     cartoon at the top of this page.\n"
"> >     \n"
"> > *   Collaborative writing with traditional word processors is cumbersome.\n"
"> >     Either every collaborator has to work on a document sequentially\n"
"> >     (slowing down the process of writing), or you have to send out a\n"
"> >     version to all collaborators and manually merge their comments into\n"
"> >     your document. The 'track changes' or 'record changes' option can\n"
"> >     highlight changes for you and simplifies merging, but as soon as you\n"
"> >     accept changes you will lose their history. You will then no longer\n"
"> >     know who suggested that change, why it was suggested, or when it was\n"
"> >     merged into the rest of the document. Even online word processors like\n"
"> >     Google Docs or Microsoft Office Online do not fully resolve these\n"
"> >     problems."
msgstr ""
">\n"
"> *   Уявіть, що ви склали чудовий абзац для статті, яку ви пишете, але пізніше ви зіпсували \n"
">    його. Як би ви отримали попередню *чудову* версію вашого висновку? Чи можливо це взагалі?\n"
">\n"
"> *   Уявіть, що у вас є 5 співавторів. Як би ви відстежували зміни та коментарі, \n"
">     які вони вносять до вашої статті? Якщо ви використовуєте LibreOffice Writer або Microsoft Word, що станеться, якщо \n"
">     ви приймете зміни, внесені за допомогою опції `Відстежувати зміни` (\"Track Changes\")? Чи будете ви мати \n"
">     історію цих змін?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > *   Відновити чудову версію можливо тільки якщо ви створили копію\n"
"> >     старої версії статті. Небезпека втрати хороших версій часто\n"
"> >     призводить до проблемного робочого процесу, проілюстрованого у коміксі з PhD Comics\n"
"> >     на початку цієї сторінки.\n"
"> >     \n"
"> > *   Спільна робота над документами за допомогою традиційних текстових процесорів є громіздкою.\n"
"> >     Або кожен співробітник повинен працювати над документом послідовно\n"
"> >     (сповільнюючи процес написання), або ви повинні відправляти \n"
"> >     нову версію всім співробітникам і вручну додавати їх коментарі\n"
"> >     у документ. Режими 'відстеження змін' ('track changes') або 'запису змін' ('record changes') можуть \n"
"> >     зробити зміни більш помітними та спростити їх додавання, але як тільки ви\n"
"> >     погоджуєтесь прийняти зміни, ви втрачаєте їх історію. Після цього ви більше не будете знати хто\n"
"> >     запропонував цю зміну, чому вона була запропонована, або коли вона була\n"
"> >     додана до документу. Навіть текстові онлайн-процесори, такі як\n"
"> >     Google Docs або Microsoft Office Online, не вирішують повністю ці\n"
"> >     проблеми."

# SC/DC Template label
#: git-novice/_episodes/01-basics.md:103 git-novice/_episodes/03-create.md:167
#: git-novice/_episodes/03-create.md:202
#: git-novice/_episodes/04-changes.md:632
#: git-novice/_episodes/04-changes.md:665
#: git-novice/_episodes/04-changes.md:728
#: git-novice/_episodes/04-changes.md:781
#: git-novice/_episodes/05-history.md:388
#: git-novice/_episodes/05-history.md:424
#: git-novice/_episodes/05-history.md:481
#: git-novice/_episodes/06-ignore.md:179 git-novice/_episodes/06-ignore.md:203
#: git-novice/_episodes/06-ignore.md:236 git-novice/_episodes/06-ignore.md:260
#: git-novice/_episodes/06-ignore.md:289 git-novice/_episodes/06-ignore.md:309
#: git-novice/_episodes/06-ignore.md:329 git-novice/_episodes/07-github.md:416
#: git-novice/_episodes/07-github.md:440 git-novice/_episodes/07-github.md:452
#: git-novice/_episodes/07-github.md:501 git-novice/_episodes/08-collab.md:209
#: git-novice/_episodes/09-conflict.md:506
#: git-novice/_episodes/09-conflict.md:547
#: git-novice/_episodes/14-supplemental-rstudio.md:150
#: git-novice/_extras/discuss.md:504
msgid "> {: .solution}"
msgstr "> {: .solution}"

# SC/DC Template label
#: git-novice/_episodes/01-basics.md:104 git-novice/_episodes/03-create.md:168
#: git-novice/_episodes/03-create.md:203
#: git-novice/_episodes/04-changes.md:633
#: git-novice/_episodes/04-changes.md:666
#: git-novice/_episodes/04-changes.md:729
#: git-novice/_episodes/04-changes.md:782
#: git-novice/_episodes/05-history.md:389
#: git-novice/_episodes/05-history.md:425
#: git-novice/_episodes/05-history.md:482
#: git-novice/_episodes/05-history.md:492
#: git-novice/_episodes/05-history.md:500
#: git-novice/_episodes/05-history.md:541
#: git-novice/_episodes/06-ignore.md:180 git-novice/_episodes/06-ignore.md:204
#: git-novice/_episodes/06-ignore.md:237 git-novice/_episodes/06-ignore.md:261
#: git-novice/_episodes/06-ignore.md:290 git-novice/_episodes/06-ignore.md:310
#: git-novice/_episodes/06-ignore.md:330 git-novice/_episodes/07-github.md:417
#: git-novice/_episodes/07-github.md:441 git-novice/_episodes/07-github.md:453
#: git-novice/_episodes/07-github.md:502 git-novice/_episodes/08-collab.md:193
#: git-novice/_episodes/08-collab.md:210 git-novice/_episodes/08-collab.md:221
#: git-novice/_episodes/08-collab.md:228
#: git-novice/_episodes/09-conflict.md:337
#: git-novice/_episodes/09-conflict.md:507
#: git-novice/_episodes/09-conflict.md:548 git-novice/_episodes/10-open.md:109
#: git-novice/_episodes/10-open.md:121 git-novice/_episodes/10-open.md:133
#: git-novice/_episodes/11-licensing.md:66
#: git-novice/_episodes/11-licensing.md:79
#: git-novice/_episodes/13-hosting.md:78 git-novice/_episodes/13-hosting.md:85
#: git-novice/_episodes/14-supplemental-rstudio.md:151
#: git-novice/_extras/discuss.md:505
msgid "{: .challenge}"
msgstr "{: .challenge}"

# Front Matter
#: git-novice/_episodes/02-setup.md:1
msgid ""
"---\n"
"title: Setting Up Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I get set up to use Git?\"\n"
"objectives:\n"
"- \"Configure `git` the first time it is used on a computer.\"\n"
"- \"Understand the meaning of the `--global` configuration flag.\"\n"
"keypoints:\n"
"-   \"Use `git config` with the `--global` option to configure a user name, email address, editor, and other preferences once per machine.\"\n"
"---"
msgstr ""
"---\n"
"title: Налаштування Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"Як налаштувати Git для використання?\"\n"
"objectives:\n"
"- \"Налаштування `git` під час його першого використання на комп'ютері.\"\n"
"- \"Розуміння значення конфігураційного параметра `--global`.\"\n"
"keypoints:\n"
"-   \"Користування `git config` з параметром ` -- global` для налаштування імені користувача, адреси електронної пошти, редактора та інших параметрів раз на комп'ютер.\"\n"
"---"

#: git-novice/_episodes/02-setup.md:14
msgid ""
"When we use Git on a new computer for the first time,\n"
"we need to configure a few things. Below are a few examples\n"
"of configurations we will set as we get started with Git:"
msgstr ""
"Коли ми користуємося Git на новому комп'ютері вперше,\n"
"нам потрібно налаштувати декілька речей. Нижче наведено кілька прикладів\n"
"з налаштувань, які ми встановимо, коли почнемо працювати з Git:"

# unordered list
#: git-novice/_episodes/02-setup.md:18
msgid "*   our name and email address,"
msgstr "*   ваше ім'я та адреса електронної пошти,"

# unordered list
#: git-novice/_episodes/02-setup.md:19
msgid "*   what our preferred text editor is,"
msgstr "*   ваш основний текстовий редактор,"

# unordered list
#: git-novice/_episodes/02-setup.md:20
msgid ""
"*   and that we want to use these settings globally (i.e. for every "
"project)."
msgstr ""
"*   і що ми хочемо використовувати ці параметри глобально (тобто для кожного"
" проєкту)."

#: git-novice/_episodes/02-setup.md:22
msgid ""
"On a command line, Git commands are written as `git verb options`,\n"
"where `verb` is what we actually want to do and `options` is additional optional information which may be needed for the `verb`. So here is how\n"
"Dracula sets up his new laptop:"
msgstr ""
"В командному рядку (command line), команди Git виглядають як `git verb options`,\n"
"де `verb` - це те що ми фактично хочемо зробити, та `options` - це додаткова інформація, яка може бути потрібна для `verb`. Ось як\n"
"Dracula налаштовує свій новий ноутбук:"

# code block
#: git-novice/_episodes/02-setup.md:26
msgid ""
"~~~\n"
"$ git config --global user.name \"Vlad Dracula\"\n"
"$ git config --global user.email \"vlad@tran.sylvan.ia\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global user.name \"Vlad Dracula\"\n"
"$ git config --global user.email \"vlad@tran.sylvan.ia\"\n"
"~~~"

#: git-novice/_episodes/02-setup.md:30 git-novice/_episodes/02-setup.md:114
#: git-novice/_episodes/02-setup.md:144 git-novice/_episodes/03-create.md:44
#: git-novice/_episodes/03-create.md:53 git-novice/_episodes/03-create.md:68
#: git-novice/_episodes/03-create.md:76 git-novice/_episodes/04-changes.md:27
#: git-novice/_episodes/04-changes.md:38 git-novice/_episodes/04-changes.md:53
#: git-novice/_episodes/04-changes.md:66 git-novice/_episodes/04-changes.md:79
#: git-novice/_episodes/04-changes.md:102
#: git-novice/_episodes/04-changes.md:109
#: git-novice/_episodes/04-changes.md:132
#: git-novice/_episodes/04-changes.md:162
#: git-novice/_episodes/04-changes.md:177
#: git-novice/_episodes/04-changes.md:214
#: git-novice/_episodes/04-changes.md:228
#: git-novice/_episodes/04-changes.md:256
#: git-novice/_episodes/04-changes.md:290
#: git-novice/_episodes/04-changes.md:312
#: git-novice/_episodes/04-changes.md:369
#: git-novice/_episodes/04-changes.md:381
#: git-novice/_episodes/04-changes.md:405
#: git-novice/_episodes/04-changes.md:417
#: git-novice/_episodes/04-changes.md:439
#: git-novice/_episodes/04-changes.md:452
#: git-novice/_episodes/04-changes.md:465
#: git-novice/_episodes/05-history.md:31 git-novice/_episodes/05-history.md:46
#: git-novice/_episodes/05-history.md:70 git-novice/_episodes/05-history.md:79
#: git-novice/_episodes/05-history.md:101
#: git-novice/_episodes/05-history.md:142
#: git-novice/_episodes/05-history.md:164
#: git-novice/_episodes/05-history.md:191
#: git-novice/_episodes/05-history.md:212
#: git-novice/_episodes/05-history.md:232
#: git-novice/_episodes/05-history.md:237
#: git-novice/_episodes/05-history.md:247
#: git-novice/_episodes/05-history.md:266 git-novice/_episodes/06-ignore.md:23
#: git-novice/_episodes/06-ignore.md:30 git-novice/_episodes/06-ignore.md:57
#: git-novice/_episodes/06-ignore.md:76 git-novice/_episodes/06-ignore.md:100
#: git-novice/_episodes/06-ignore.md:113 git-novice/_episodes/06-ignore.md:130
#: git-novice/_episodes/07-github.md:58 git-novice/_episodes/07-github.md:99
#: git-novice/_episodes/07-github.md:113 git-novice/_episodes/07-github.md:152
#: git-novice/_episodes/07-github.md:172 git-novice/_episodes/07-github.md:228
#: git-novice/_episodes/07-github.md:244 git-novice/_episodes/07-github.md:265
#: git-novice/_episodes/07-github.md:298 git-novice/_episodes/07-github.md:379
#: git-novice/_episodes/08-collab.md:50 git-novice/_episodes/08-collab.md:69
#: git-novice/_episodes/08-collab.md:80 git-novice/_episodes/08-collab.md:93
#: git-novice/_episodes/08-collab.md:152
#: git-novice/_episodes/09-conflict.md:29
#: git-novice/_episodes/09-conflict.md:44
#: git-novice/_episodes/09-conflict.md:60
#: git-novice/_episodes/09-conflict.md:71
#: git-novice/_episodes/09-conflict.md:94
#: git-novice/_episodes/09-conflict.md:110
#: git-novice/_episodes/09-conflict.md:123
#: git-novice/_episodes/09-conflict.md:148
#: git-novice/_episodes/09-conflict.md:175
#: git-novice/_episodes/09-conflict.md:205
#: git-novice/_episodes/09-conflict.md:223
#: git-novice/_episodes/09-conflict.md:240
#: git-novice/_episodes/09-conflict.md:252
#: git-novice/_episodes/09-conflict.md:274
#: git-novice/_episodes/09-conflict.md:297 git-novice/_extras/discuss.md:23
#: git-novice/_extras/discuss.md:47 git-novice/_extras/discuss.md:57
#: git-novice/_extras/discuss.md:64 git-novice/_extras/discuss.md:71
#: git-novice/_extras/discuss.md:90 git-novice/_extras/discuss.md:100
#: git-novice/_extras/discuss.md:148 git-novice/_extras/discuss.md:166
#: git-novice/_extras/discuss.md:182 git-novice/_extras/discuss.md:232
#: git-novice/_extras/discuss.md:241 git-novice/_extras/discuss.md:256
#: git-novice/_extras/discuss.md:276 git-novice/_extras/discuss.md:290
#: git-novice/_extras/discuss.md:298 git-novice/_extras/discuss.md:321
#: git-novice/_extras/discuss.md:339 git-novice/_extras/discuss.md:350
#: git-novice/_extras/discuss.md:358 git-novice/_extras/discuss.md:369
#: git-novice/_extras/discuss.md:384 git-novice/_extras/discuss.md:399
#: git-novice/_extras/discuss.md:407 git-novice/_extras/discuss.md:435
#: git-novice/_extras/discuss.md:455 git-novice/setup.md:15
msgid "{: .language-bash}"
msgstr "{: .language-bash}"

#: git-novice/_episodes/02-setup.md:32
msgid ""
"Please use your own name and email address instead of Dracula's. This user name and email will be associated with your subsequent Git activity,\n"
"which means that any changes pushed to\n"
"[GitHub](https://github.com/),\n"
"[BitBucket](https://bitbucket.org/),\n"
"[GitLab](https://gitlab.com/) or\n"
"another Git host server\n"
"after this lesson will include this information."
msgstr ""
"Будь ласка, використовуйте своє власне ім'я та електронну пошту замість \"Dracula\". Ці ім'я користувача та електронна пошта будуть асоційовані з вашою подальшою діяльністю Git,\n"
"а це означає, що будь-які зміни надіслані в\n"
"[GitHub](https://github.com/),\n"
"[BitBucket](https://bitbucket.org/),\n"
"[GitLab](https://gitlab.com/) або\n"
"інший Git хост-сервер\n"
"після цього уроку будуть містити цю інформацію."

#: git-novice/_episodes/02-setup.md:40
msgid ""
"For this lesson, we will be interacting with [GitHub](https://github.com/) "
"and so the email address used should be the same as the one used when "
"setting up your GitHub account. If you are concerned about privacy, please "
"review [GitHub's instructions for keeping your email address private][git-"
"privacy]. "
msgstr ""
"В цьому уроці ми будемо працювати з [GitHub](https://github.com/), тож "
"використовувана електронна пошта повинна бути такою ж, як і та, яка "
"використовується для налаштування вашого GitHub акаунту. Якщо вас турбує "
"конфіденційнйсть вашої електронної адреси, будь ласка перегляньте [GitHub's "
"instructions for keeping your email address private][git-privacy]. "

#: git-novice/_episodes/02-setup.md:42
msgid ""
">## Keeping your email private\n"
">\n"
">If you elect to use a private email address with GitHub, then use that same email address for the `user.email` value, e.g. `username@users.noreply.github.com` replacing `username` with your GitHub one."
msgstr ""
">## Збереження конфіденційності вашої електронної адреси\n"
">\n"
">Якщо ви вирішили приховати власну електронну адресу на GitHub, тоді використовуйте для `user.email` електронну адресу у вигляді `username@users.noreply.github.com` замінивши `username` вашим ім'ям користувача GitHub."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:48
msgid "> ## Line Endings"
msgstr "> ## Закінчення рядків"

#: git-novice/_episodes/02-setup.md:49
msgid ""
">\n"
"> As with other keys, when you hit <kbd>Enter</kbd> or <kbd>↵</kbd> or on Macs, <kbd>Return</kbd> on your keyboard,\n"
"> your computer encodes this input as a character.\n"
"> Different operating systems use different character(s) to represent the end of a line.\n"
"> (You may also hear these referred to as newlines or line breaks.)\n"
"> Because Git uses these characters to compare files,\n"
"> it may cause unexpected issues when editing a file on different machines. \n"
"> Though it is beyond the scope of this lesson, you can read more about this issue \n"
"> [in the Pro Git book](https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_autocrlf).\n"
">\n"
"> You can change the way Git recognizes and encodes line endings\n"
"> using the `core.autocrlf` command to `git config`.\n"
"> The following settings are recommended:\n"
">\n"
"> On macOS and Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> And on Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf false\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Як і з іншими ключами, коли ви вводите <kbd>Enter</kbd> або <kbd> "
"</kbd>, або <kbd>Return</kbd> на Macs на вашій клавіатурі,\n"
"> ваш комп'ютер кодує це як символ.\n"
"> Різні операційні системи використовують різні символ(и) для репрезентації кінця рядку.\n"
"> (Ви також можете почути про це як \"нові рядки\" або \"розриви рядків\".)\n"
"> Тому що Git використовує ці символи для порівняння файлів,\n"
"> це може спричинити несподівані проблеми під час редагування файлу на різних машинах.\n"
"> Хоча це поза межами цього уроку, ви можете більше прочитати про це питання \n"
"> [у посібнику \"Pro Git\"](https://www.git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_autocrlf).\n"
">\n"
"> Ви можете змінити спосіб розпізнавання закінчень рядків в Git\n"
"> використовуючи `core.autocrlf` команду до `git config`.\n"
"> Рекомендовані такі параметри:\n"
">\n"
"> Для macOS та Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Для Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf false\n"
"> ~~~\n"
"> {: .language-bash}"

#: git-novice/_episodes/02-setup.md:78
msgid ""
"Dracula also has to set his favorite text editor, following this table:"
msgstr ""
"Dracula також повинен налаштувати його улюблений текстовий редактор, як "
"наведено в таблиці нижче:"

#: git-novice/_episodes/02-setup.md:80
msgid ""
"| Editor             | Configuration command                            |\n"
"|:-------------------|:-------------------------------------------------|\n"
"| Atom | `$ git config --global core.editor \"atom --wait\"`|\n"
"| nano               | `$ git config --global core.editor \"nano -w\"`    |\n"
"| BBEdit (Mac, with command line tools) | `$ git config --global core.editor \"bbedit -w\"`    |\n"
"| Sublime Text (Mac) | `$ git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"` |\n"
"| Sublime Text (Win, 32-bit install) | `$ git config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Sublime Text (Win, 64-bit install) | `$ git config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Notepad (Win)    | `$ git config --global core.editor \"c:/Windows/System32/notepad.exe\"`|\n"
"| Notepad++ (Win, 32-bit install)    | `$ git config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"`|\n"
"| Notepad++ (Win, 64-bit install)    | `$ git config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"`|\n"
"| Kate (Linux)       | `$ git config --global core.editor \"kate\"`       |\n"
"| Gedit (Linux)      | `$ git config --global core.editor \"gedit --wait --new-window\"`   |\n"
"| Scratch (Linux)       | `$ git config --global core.editor \"scratch-text-editor\"`  |\n"
"| Emacs              | `$ git config --global core.editor \"emacs\"`   |\n"
"| Vim                | `$ git config --global core.editor \"vim\"`   |\n"
"| VS Code                | `$ git config --global core.editor \"code --wait\"`   |"
msgstr ""
"| Редактор             | Команда для налаштування                            |\n"
"|:-------------------|:-------------------------------------------------|\n"
"| Atom | `$ git config --global core.editor \"atom --wait\"`|\n"
"| nano               | `$ git config --global core.editor \"nano -w\"`    |\n"
"| BBEdit (Mac, with command line tools) | `$ git config --global core.editor \"bbedit -w\"`    |\n"
"| Sublime Text (Mac) | `$ git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"` |\n"
"| Sublime Text (Win, 32-bit install) | `$ git config --global core.editor \"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Sublime Text (Win, 64-bit install) | `$ git config --global core.editor \"'c:/program files/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Notepad (Win)    | `$ git config --global core.editor \"c:/Windows/System32/notepad.exe\"`|\n"
"| Notepad++ (Win, 32-bit install)    | `$ git config --global core.editor \"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"`|\n"
"| Notepad++ (Win, 64-bit install)    | `$ git config --global core.editor \"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"`|\n"
"| Kate (Linux)       | `$ git config --global core.editor \"kate\"`       |\n"
"| Gedit (Linux)      | `$ git config --global core.editor \"gedit --wait --new-window\"`   |\n"
"| Scratch (Linux)       | `$ git config --global core.editor \"scratch-text-editor\"`  |\n"
"| Emacs              | `$ git config --global core.editor \"emacs\"`   |\n"
"| Vim                | `$ git config --global core.editor \"vim\"`   |\n"
"| VS Code                | `$ git config --global core.editor \"code --wait\"`   |"

#: git-novice/_episodes/02-setup.md:98
msgid ""
"It is possible to reconfigure the text editor for Git whenever you want to "
"change it."
msgstr ""
"Ви можете переналаштувати текстовий редактор для Git у будь-який момент."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:100
msgid "> ## Exiting Vim"
msgstr "> ## Вихід з Vim"

#: git-novice/_episodes/02-setup.md:101
msgid ""
">\n"
"> Note that Vim is the default editor for many programs. If you haven't used Vim before and wish to exit a session without saving\n"
"your changes, press <kbd>Esc</kbd> then type `:q!` and hit <kbd>Enter</kbd> or <kbd>↵</kbd> or on Macs, <kbd>Return</kbd>.\n"
"> If you want to save your changes and quit, press <kbd>Esc</kbd> then type `:wq` and hit <kbd>Enter</kbd> or <kbd>↵</kbd> or on Macs, <kbd>Return</kbd>."
msgstr ""
">\n"
"> Зауважте, що Vim є стандартним редактором для багатьох програм. Якщо ви до цього не користувалися Vim і хочете вийти з сесії не зберігаючи ваших змін,\n"
"натисніть <kbd>Esc</kbd> потім надрукуйте `:q!` та натисніть <kbd>Enter</kbd> або <kbd> "
"</kbd>, або <kbd>Return</kbd> на Macs.\n"
"> Якщо ви хочете зберегти свої зміни та вийти, натисніть<kbd>Esc</kbd> потім надрукуйте `:wq` та натисніть <kbd>Enter</kbd> або <kbd> "
"</kbd>, або <kbd>Return</kbd> на Macs."

#: git-novice/_episodes/02-setup.md:107
msgid ""
"Git (2.28+) allows configuration of the name of the branch created when you\n"
"initialize any new repository.  Dracula decides to use that feature to set it to `main` so \n"
"it matches the cloud service he will eventually use. "
msgstr ""
"Git (2.28+) надає вам змогу обрати назву гілки, яку буде створено під час\n"
"ініціалізації будь-якої нової репозиторії.  Dracula вирішив використати цю можливість, щоб назвати її `main`, щоб це відповідало хмарному сервісу, який він в кінцевому підсумку використовуватиме."

# code block
#: git-novice/_episodes/02-setup.md:111
msgid ""
"~~~\n"
"$ git config --global init.defaultBranch main\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global init.defaultBranch main\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:116
msgid "> ## Default Git branch naming"
msgstr "> ## Найменування гілки Git за замовчуванням"

#: git-novice/_episodes/02-setup.md:117
msgid ""
">\n"
"> Source file changes are associated with a \"branch.\" \n"
"> For new learners in this lesson, it's enough to know that branches exist, and this lesson uses one branch.  \n"
"> By default, Git will create a branch called `master` \n"
"> when you create a new repository with `git init` (as explained in the next Episode). This term evokes \n"
"> the racist practice of human slavery and the \n"
"> [software development community](https://github.com/github/renaming)  has moved to adopt \n"
"> more inclusive language. \n"
"> \n"
"> In 2020, most Git code hosting services transitioned to using `main` as the default \n"
"> branch. As an example, any new repository that is opened in GitHub and GitLab default \n"
"> to `main`.  However, Git has not yet made the same change.  As a result, local repositories \n"
"> must be manually configured have the same main branch name as most cloud services.  \n"
"> \n"
"> For versions of Git prior to 2.28, the change can be made on an individual repository level.  The \n"
"> command for this is in the next episode.  Note that if this value is unset in your local Git \n"
"> configuration, the `init.defaultBranch` value defaults to `master`."
msgstr ""
">\n"
"> Зміни у змісті репозиторію пов’язані з \"гілкою\".\n"
"> Для початківців у цьому уроці буде достатньо знати, що гілки існують, і що в цьому уроці використовується тільки одна гілка.  \n"
"> За замовчуванням, Git створить гілку під назвою `master` \n"
"> коли ви створюєте нову репозиторію за допомогою `git init` (пояснено в наступному Епізоді). Цей термін нагадує про \n"
"> расистську практику людського рабства, тому у \n"
"> [спільноті розробників програмного забезпечення](https://github.com/github/renaming)  вирішили використовувати \n"
"> більш інклюзивну мову. \n"
"> \n"
"> В 2020, більшість сервісів хостингу коду Git перейшли до використання `main` як стандартної \n"
"> гілки. Наприклад, будь-яка нова репозиторія створена у GitHub та GitLab за замовчуванням буде мати назву\n"
"> `main`.  Однак в Git такої ж зміни ще не було застосовано. В результаті локальні репозиторії \n"
"> повинні бути налаштовані вручну, мати ту саму назву головної гілки як і більшість хмарних сервісів.  \n"
"> \n"
"> Для версій Git до 2.28, зміну можна зробити на індивідуальному рівні репозиторії. \n"
"> Команду для цього можна знайти в наступному епізоді. Зауважте, якщо це значення не встановлено у вашій локальній системі Git, \n"
"> то `init.defaultBranch` за замовчуванням буде `master`."

#: git-novice/_episodes/02-setup.md:136
msgid ""
"The five commands we just ran above only need to be run once: the flag `--global` tells Git\n"
"to use the settings for every project, in your user account, on this computer."
msgstr ""
"П'ять команд, які ми щойно запускаємо вище, потрібно запускати лише один раз: параметр `--global` каже Git\n"
"використовувати ці налаштування для кожного проєкту у вашому обліковому записі користувача на цьому комп'ютері."

#: git-novice/_episodes/02-setup.md:139
msgid "You can check your settings at any time:"
msgstr "Ви можете перевірити ваші налаштування у будь-яку мить:"

# code block
#: git-novice/_episodes/02-setup.md:141
msgid ""
"~~~\n"
"$ git config --list\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --list\n"
"~~~"

#: git-novice/_episodes/02-setup.md:146
msgid ""
"You can change your configuration as many times as you want: use the\n"
"same commands to choose another editor or update your email address."
msgstr ""
"Ви можете змінити ваші налаштування стільки разів, скільки забажаєте: використовуйте\n"
"ті ж самі команди, щоб обрати інший текстовий редактор або оновити вашу електронну адресу."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:149 git-novice/_episodes/07-github.md:316
msgid "> ## Proxy"
msgstr "> ## Проксі-сервер"

#: git-novice/_episodes/02-setup.md:150
msgid ""
">\n"
"> In some networks you need to use a\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). If this is the case, you\n"
"> may also need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> To disable the proxy, use\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> В деяких мережах потрібно використовувати\n"
"> [проксі-сервер](https://en.wikipedia.org/wiki/Proxy_server). Якщо це так, \n"
"> вам також може знадобитися повідомити про це Git:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Щоб вимкнути проксі, скористайтеся\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:170
msgid "> ## Git Help and Manual"
msgstr "> ## Довідка про Git та посібник користувача"

#: git-novice/_episodes/02-setup.md:171
msgid ""
">\n"
"> Always remember that if you forget the subcommands or options of a `git` command, you can access the\n"
"> relevant list of options typing `git <command> -h` or access the corresponding Git manual by typing\n"
"> `git <command> --help`, e.g.:\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> While viewing the manual, remember the `:` is a prompt waiting for commands and you can press <kbd>Q</kbd> to exit the manual.\n"
">\n"
"> More generally, you can get the list of available `git` commands and further resources of the Git manual typing:\n"
">\n"
"> ~~~\n"
"> $ git help\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Завжди пам'ятайте: якщо ви забули підкоманди або параметри команди `git`, ви можете отримати \n"
"> відповідний список параметрів, надрукувавши `git <command> -h` або подивитись у документації Git, ввівши\n"
"> `git <command> --help`, e.g.:\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Під час перегляду документації запам’ ятайте, що `:`  — це підказка, яка очікує на команди, і ви можете натиснути кнопку <kbd>Q</kbd> щоб вийти з посібника.\n"
">\n"
"> Більш загально можна отримати список доступних `git` команд і подальші ресурси за допомогою цієї команди:\n"
">\n"
"> ~~~\n"
"> $ git help\n"
"> ~~~\n"
"> {: .language-bash}"

#: git-novice/_episodes/02-setup.md:192
msgid ""
"[git-privacy]: https://help.github.com/articles/keeping-your-email-address-"
"private/"
msgstr ""
"[git-privacy]: https://help.github.com/articles/keeping-your-email-address-"
"private/"

# Front Matter
#: git-novice/_episodes/03-create.md:1
msgid ""
"---\n"
"title: Creating a Repository\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where does Git store information?\"\n"
"objectives:\n"
"- \"Create a local Git repository.\"\n"
"- \"Describe the purpose of the `.git` directory.\"\n"
"keypoints:\n"
"- \"`git init` initializes a repository.\"\n"
"- \"Git stores all of its repository data in the `.git` directory.\"\n"
"---"
msgstr ""
"---\n"
"title: Створення Репозиторію\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Де Git зберігає інформацію?\"\n"
"objectives:\n"
"- \"Створення локального Git репозиторію.\"\n"
"- \"Опис призначення директорію `.git`.\"\n"
"keypoints:\n"
"- \"`git init` ініціалізує репозиторій.\"\n"
"- \"Git зберігає всі свої репозиторії в `.git` директорії.\"\n"
"---"

#: git-novice/_episodes/03-create.md:15
msgid ""
"Once Git is configured,\n"
"we can start using it."
msgstr ""
"Як тільки Git налаштовано,\n"
"ми можемо почати ним користуватися."

#: git-novice/_episodes/03-create.md:18
msgid ""
"We will continue with the story of Wolfman and Dracula who are investigating if it\n"
"is possible to send a planetary lander to Mars. "
msgstr ""
"Ми продовжимо історію, у якій Wolfman та Dracula досліджують,\n"
"чи можливо відправити планетарний апарат на Марс."

#: git-novice/_episodes/03-create.md:21
msgid ""
"![motivatingexample]({{ site.baseurl }}/fig/motivatingexample.png)\n"
"[Werewolf vs dracula](https://www.deviantart.com/b-maze/art/Werewolf-vs-Dracula-124893530)\n"
"by [b-maze](https://www.deviantart.com/b-maze) / [Deviant Art](https://www.deviantart.com/).\n"
"[Mars](https://en.wikipedia.org/wiki/File:OSIRIS_Mars_true_color.jpg) by European Space Agency /\n"
"[CC-BY-SA 3.0 IGO](https://creativecommons.org/licenses/by/3.0/deed.en).\n"
"[Pluto](https://commons.wikimedia.org/wiki/File:PIA19873-Pluto-NewHorizons-FlyingPastImage-20150714-transparent.png) /\n"
"Courtesy NASA/JPL-Caltech.\n"
"[Mummy](https://commons.wikimedia.org/wiki/File:Mummy_icon_-_Noun_Project_4070.svg)\n"
"&copy; Gilad Fried / [The Noun Project](https://thenounproject.com/) /\n"
"[CC BY 3.0](https://creativecommons.org/licenses/by/3.0/deed.en).\n"
"[Moon](https://commons.wikimedia.org/wiki/File:Lune_ico.png)\n"
"&copy; Luc Viatour / [https://lucnix.be](https://lucnix.be/) /\n"
"[CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/deed.en)."
msgstr ""
"![motivatingexample]({{ site.baseurl }}/fig/motivatingexample.png)\n"
"[Werewolf vs dracula](https://www.deviantart.com/b-maze/art/Werewolf-vs-Dracula-124893530)\n"
"by [b-maze](https://www.deviantart.com/b-maze) / [Deviant Art](https://www.deviantart.com/).\n"
"[Mars](https://en.wikipedia.org/wiki/File:OSIRIS_Mars_true_color.jpg) by European Space Agency /\n"
"[CC-BY-SA 3.0 IGO](https://creativecommons.org/licenses/by/3.0/deed.en).\n"
"[Pluto](https://commons.wikimedia.org/wiki/File:PIA19873-Pluto-NewHorizons-FlyingPastImage-20150714-transparent.png) /\n"
"Courtesy NASA/JPL-Caltech.\n"
"[Mummy](https://commons.wikimedia.org/wiki/File:Mummy_icon_-_Noun_Project_4070.svg)\n"
"&copy; Gilad Fried / [The Noun Project](https://thenounproject.com/) /\n"
"[CC BY 3.0](https://creativecommons.org/licenses/by/3.0/deed.en).\n"
"[Moon](https://commons.wikimedia.org/wiki/File:Lune_ico.png)\n"
"&copy; Luc Viatour / [https://lucnix.be](https://lucnix.be/) /\n"
"[CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/deed.en)."

#: git-novice/_episodes/03-create.md:37
msgid ""
"First, let's create a new directory in the `Desktop` folder for our work and"
" then change the current working directory to the newly created one:"
msgstr ""
"Перш за все, давайте створимо нову директорію в папці \"Desktop\" (або "
"\"Робочий стіл\", залежно від локалізації) для нашої роботи і потім змінимо "
"поточну робочу директорію на щойно новостворену:"

# code block
#: git-novice/_episodes/03-create.md:39
msgid ""
"~~~\n"
"$ cd ~/Desktop\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ~/Desktop\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"

#: git-novice/_episodes/03-create.md:46
msgid ""
"Then we tell Git to make `planets` a [repository]({{ page.root }}{% link reference.md %}#repository)\n"
"-- a place where Git can store versions of our files:"
msgstr ""
"Потім ми накажемо Git створити [репозиторій]({{ page.root }}{% link reference.md %}#repository) `planets` \n"
"-- місце, де Git зможе зберігати версії наших файлів:"

# code block
#: git-novice/_episodes/03-create.md:50
msgid ""
"~~~\n"
"$ git init\n"
"~~~"
msgstr ""
"~~~\n"
"$ git init\n"
"~~~"

#: git-novice/_episodes/03-create.md:55
msgid ""
"It is important to note that `git init` will create a repository that\n"
"can include subdirectories and their files---there is no need to create\n"
"separate repositories nested within the `planets` repository, whether\n"
"subdirectories are present from the beginning or added later. Also, note\n"
"that the creation of the `planets` directory and its initialization as a\n"
"repository are completely separate processes."
msgstr ""
"Важливо пам`ятати, що `git init` створить репозиторій,\n"
"який може включати підкаталоги та їх файли---немає потреби створювати\n"
"окремі репозиторії вміщені в репозиторії  `planets`, незалежно від того\n"
"чи були піддиректорії присутні від початку або були додані пізніше. Крім того, зверніть увагу,\n"
"що створення директорії  `planets` та її ініціалізація як\n"
"репозиторію є повністю окремими процесами."

#: git-novice/_episodes/03-create.md:62
msgid ""
"If we use `ls` to show the directory's contents,\n"
"it appears that nothing has changed:"
msgstr ""
"Якщо ми використовуємо `ls`, щоб показати зміст директорії,\n"
"то здається, що нічого не змінилося:"

# code block
#: git-novice/_episodes/03-create.md:65 git-novice/_episodes/04-changes.md:50
msgid ""
"~~~\n"
"$ ls\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls\n"
"~~~"

#: git-novice/_episodes/03-create.md:70
msgid ""
"But if we add the `-a` flag to show everything,\n"
"we can see that Git has created a hidden directory within `planets` called `.git`:"
msgstr ""
"Але якщо ми додамо опцію `-a`, щоб показати усе -\n"
"ми побачимо, що Git створив у директорії `planets` приховану директорію під назвою `.git`:"

# code block
#: git-novice/_episodes/03-create.md:73
msgid ""
"~~~\n"
"$ ls -a\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -a\n"
"~~~"

# code block
#: git-novice/_episodes/03-create.md:78
msgid ""
"~~~\n"
".\t..\t.git\n"
"~~~"
msgstr ""
"~~~\n"
".\t..\t.git\n"
"~~~"

# SC/DC Template label
#: git-novice/_episodes/03-create.md:81 git-novice/_episodes/03-create.md:100
#: git-novice/_episodes/03-create.md:117 git-novice/_episodes/04-changes.md:45
#: git-novice/_episodes/04-changes.md:58 git-novice/_episodes/04-changes.md:71
#: git-novice/_episodes/04-changes.md:93
#: git-novice/_episodes/04-changes.md:122
#: git-novice/_episodes/04-changes.md:139
#: git-novice/_episodes/04-changes.md:168
#: git-novice/_episodes/04-changes.md:186
#: git-novice/_episodes/04-changes.md:220
#: git-novice/_episodes/04-changes.md:240
#: git-novice/_episodes/04-changes.md:267
#: git-novice/_episodes/04-changes.md:302
#: git-novice/_episodes/04-changes.md:318
#: git-novice/_episodes/04-changes.md:376
#: git-novice/_episodes/04-changes.md:393
#: git-novice/_episodes/04-changes.md:429
#: git-novice/_episodes/04-changes.md:445
#: git-novice/_episodes/04-changes.md:458
#: git-novice/_episodes/04-changes.md:486
#: git-novice/_episodes/05-history.md:39 git-novice/_episodes/05-history.md:59
#: git-novice/_episodes/05-history.md:92
#: git-novice/_episodes/05-history.md:118
#: git-novice/_episodes/05-history.md:155
#: git-novice/_episodes/05-history.md:177
#: git-novice/_episodes/05-history.md:203
#: git-novice/_episodes/05-history.md:219
#: git-novice/_episodes/05-history.md:242
#: git-novice/_episodes/05-history.md:257 git-novice/_episodes/06-ignore.md:44
#: git-novice/_episodes/06-ignore.md:63 git-novice/_episodes/06-ignore.md:87
#: git-novice/_episodes/06-ignore.md:106 git-novice/_episodes/06-ignore.md:120
#: git-novice/_episodes/06-ignore.md:144 git-novice/_episodes/07-github.md:119
#: git-novice/_episodes/07-github.md:161 git-novice/_episodes/07-github.md:181
#: git-novice/_episodes/07-github.md:189 git-novice/_episodes/07-github.md:196
#: git-novice/_episodes/07-github.md:218 git-novice/_episodes/07-github.md:236
#: git-novice/_episodes/07-github.md:256 git-novice/_episodes/07-github.md:270
#: git-novice/_episodes/07-github.md:286 git-novice/_episodes/07-github.md:314
#: git-novice/_episodes/07-github.md:386 git-novice/_episodes/08-collab.md:74
#: git-novice/_episodes/08-collab.md:86 git-novice/_episodes/08-collab.md:105
#: git-novice/_episodes/08-collab.md:169
#: git-novice/_episodes/09-conflict.md:36
#: git-novice/_episodes/09-conflict.md:52
#: git-novice/_episodes/09-conflict.md:66
#: git-novice/_episodes/09-conflict.md:84
#: git-novice/_episodes/09-conflict.md:102
#: git-novice/_episodes/09-conflict.md:116
#: git-novice/_episodes/09-conflict.md:135
#: git-novice/_episodes/09-conflict.md:163
#: git-novice/_episodes/09-conflict.md:187
#: git-novice/_episodes/09-conflict.md:213
#: git-novice/_episodes/09-conflict.md:235
#: git-novice/_episodes/09-conflict.md:245
#: git-novice/_episodes/09-conflict.md:265
#: git-novice/_episodes/09-conflict.md:290
#: git-novice/_episodes/09-conflict.md:305 git-novice/_extras/discuss.md:34
#: git-novice/_extras/discuss.md:156 git-novice/_extras/discuss.md:174
#: git-novice/_extras/discuss.md:189 git-novice/_extras/discuss.md:202
#: git-novice/_extras/discuss.md:247 git-novice/_extras/discuss.md:266
#: git-novice/_extras/discuss.md:310 git-novice/_extras/discuss.md:331
#: git-novice/_extras/discuss.md:378 git-novice/_extras/discuss.md:424
#: git-novice/_extras/discuss.md:445
msgid "{: .output}"
msgstr "{: .output}"

#: git-novice/_episodes/03-create.md:83
msgid ""
"Git uses this special subdirectory to store all the information about the project, \n"
"including the tracked files and sub-directories located within the project's directory.\n"
"If we ever delete the `.git` subdirectory,\n"
"we will lose the project's history."
msgstr ""
"Git використовує цей спеціальний підкаталог для зберігання всієї інформації про проект, \n"
"у тому числі про файли, що відстежуються, і про піддиректорії, які містяться у директорії проєкту.\n"
"Якщо ми колись видалимо піддиректорію `.git`,\n"
"ми втратимо усю історію проєкту."

#: git-novice/_episodes/03-create.md:88
msgid ""
"Next, we will change the default branch to be called `main`.\n"
"This might be the default branch depending on your settings and version\n"
"of git.\n"
"See the [setup episode]({{ page.root }}{% link _episodes/02-setup.md %}) for more information on this change."
msgstr ""
"Далі, ми вкажемо, що гілка, яка використовується за замовчуванням, має назву `main` \n"
"(залежно від ваших налаштувань і версії\n"
"git, вона може вже мати цю назву).\n"
"Перейдіть на [епізод налаштування]({{ page.root }}{% link _episodes/02-setup.md %}), щоб дізнатися більше про цю зміну."

# code block
#: git-novice/_episodes/03-create.md:93
msgid ""
"~~~\n"
"$ git checkout -b main\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout -b main\n"
"~~~"

#: git-novice/_episodes/03-create.md:96
msgid ""
"{: .language-bash}\n"
"~~~\n"
"Switched to a new branch 'main'\n"
"~~~"
msgstr ""
"{: .language-bash}\n"
"~~~\n"
"Switched to a new branch 'main'\n"
"~~~"

#: git-novice/_episodes/03-create.md:103
msgid ""
"We can check that everything is set up correctly\n"
"by asking Git to tell us the status of our project:"
msgstr ""
"Ми можемо перевірити, що все налаштовано правильно,\n"
"запитавши Git про стан нашого проєкту:"

# code block
#: git-novice/_episodes/03-create.md:106 git-novice/_episodes/04-changes.md:76
#: git-novice/_episodes/04-changes.md:106
#: git-novice/_episodes/04-changes.md:159
#: git-novice/_episodes/04-changes.md:225
#: git-novice/_episodes/04-changes.md:449
#: git-novice/_episodes/05-history.md:188
#: git-novice/_episodes/05-history.md:244 git-novice/_episodes/06-ignore.md:27
#: git-novice/_episodes/06-ignore.md:73
msgid ""
"~~~\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git status\n"
"~~~"

#: git-novice/_episodes/03-create.md:109
msgid ""
"{: .language-bash}\n"
"~~~\n"
"On branch main"
msgstr ""
"{: .language-bash}\n"
"~~~\n"
"On branch main"

#: git-novice/_episodes/03-create.md:113
msgid "No commits yet"
msgstr "No commits yet"

#: git-novice/_episodes/03-create.md:115
msgid ""
"nothing to commit (create/copy files and use \"git add\" to track)\n"
"~~~"
msgstr ""
"nothing to commit (create/copy files and use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/03-create.md:119
msgid ""
"If you are using a different version of `git`, the exact\n"
"wording of the output might be slightly different."
msgstr ""
"Якщо ви користуєтеся іншою версією `git`, точний\n"
"вигляд результату цієї команди може бути трохи іншим."

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:122
msgid "> ## Places to Create Git Repositories"
msgstr "> ## Де створювати репозиторії Git "

#: git-novice/_episodes/03-create.md:123
msgid ""
">\n"
"> Along with tracking information about planets (the project we have already created), \n"
"> Dracula would also like to track information about moons.\n"
"> Despite Wolfman's concerns, Dracula creates a `moons` project inside his `planets` \n"
"> project with the following sequence of commands:\n"
">\n"
"> ~~~\n"
"> $ cd ~/Desktop   # return to Desktop directory\n"
"> $ cd planets     # go into planets directory, which is already a Git repository\n"
"> $ ls -a          # ensure the .git subdirectory is still present in the planets directory\n"
"> $ mkdir moons    # make a subdirectory planets/moons\n"
"> $ cd moons       # go into moons subdirectory\n"
"> $ git init       # make the moons subdirectory a Git repository\n"
"> $ ls -a          # ensure the .git subdirectory is present indicating we have created a new Git repository\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Is the `git init` command, run inside the `moons` subdirectory, required for \n"
"> tracking files stored in the `moons` subdirectory?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > No. Dracula does not need to make the `moons` subdirectory a Git repository \n"
"> > because the `planets` repository can track any files, sub-directories, and \n"
"> > subdirectory files under the `planets` directory.  Thus, in order to track \n"
"> > all information about moons, Dracula only needed to add the `moons` subdirectory\n"
"> > to the `planets` directory.\n"
"> > \n"
"> > Additionally, Git repositories can interfere with each other if they are \"nested\":\n"
"> > the outer repository will try to version-control\n"
"> > the inner repository. Therefore, it's best to create each new Git\n"
"> > repository in a separate directory. To be sure that there is no conflicting\n"
"> > repository in the directory, check the output of `git status`. If it looks\n"
"> > like the following, you are good to go to create a new repository as shown\n"
"> > above:\n"
"> >\n"
"> > ~~~\n"
"> > $ git status\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > fatal: Not a git repository (or any of the parent directories): .git\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Одночасно з відстеженням інформації про планети (проєкт, який ми вже створили), \n"
"> Dracula також хотів би відстежувати інформацію про супутники.\n"
"> Незважаючи на занепокоєння Wolfman, Dracula створює проєкт `moons` всередині `planets` \n"
"> проєкту за допомогою наступної послідовності команд:\n"
">\n"
"> ~~~\n"
"> $ cd ~/Desktop   # поверніться до директорії \"Робочий стіл\"\n"
"> $ cd planets     # перейдіть до директорії planets, яка вже знаходиться в репозиторії Git\n"
"> $ ls -a          # переконайтеся, що .git піддиректорія все ще присутня у директорії planets\n"
"> $ mkdir moons    # створіть піддиректорію planets/moons\n"
"> $ cd moons       # перейдіть до піддиректорії moons\n"
"> $ git init       # зробіть піддиректорію moons Git репозиторієм\n"
"> $ ls -a          # переконайтеся, що .git піддиректорія присутня - вказуючи, що ми створили новий репозиторій Git\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Чи є команда `git init`, запущена всередині піддиректорії `moons` , необхідною для \n"
"> відстежування файлів, що зберігаються всередині піддиректорії `moons`?\n"
"> \n"
"> > ## Відповідь\n"
"> >\n"
"> > Ні. Dracula не має необхідності робити піддиректорію `moons`  репозиторієм Git\n"
"> > тому що репозиторій `planets` може відстежувати будь-які файли, піддиректорії, та \n"
"> > файли піддиректорій вкладені (на будь-якому рівні) у директорію `planets`.  Таким чином, для того, щоб відстежувати \n"
"> > всю інформацію про супутники, Dracula повинен був лише додати піддиректорію `moons`\n"
"> > до директорії `planets`.\n"
"> > \n"
"> > Крім того, репозиторії Git можуть заважати один одному, якщо вони \"вкладені\":\n"
"> > зовнішній репозиторій намагатиметься відсліідковувати зміни \n"
"> > у внутрішньому репозиторії. Тому кожного разу найкраще створювати новий репозиторій Git\n"
"> > в окремій директорії. Щоб переконатися, що директорія не є репозиторієм,\n"
"> > перевірте результат команди `git status`. Якщо вона виглядає\n"
"> > наступним чином, ви можете перейти до створення нового репозиторію, як це показано\n"
"> > вище:\n"
"> >\n"
"> > ~~~\n"
"> > $ git status\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > fatal: Not a git repository (or any of the parent directories): .git\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:169
msgid "> ## Correcting `git init` Mistakes"
msgstr "> ## Виправлення помилок `git init`"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:170
msgid ""
"> Wolfman explains to Dracula how a nested repository is redundant and may "
"cause confusion"
msgstr ""
"> Wolfman пояснив Dracula як вкладений репозиторій є зайвим і може викликати"
" плутанину"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:171
msgid ""
"> down the road. Dracula would like to remove the nested repository. How can"
" Dracula undo "
msgstr ""
"> в майбутньому. Dracula хотів би вилучити вкладений репозиторій. Як Дракула"
" може скасувати"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:172
msgid "> his last `git init` in the `moons` subdirectory?"
msgstr "> свою останню команду `git init` всередині піддиректорії `moons`?"

#: git-novice/_episodes/03-create.md:173
msgid ""
">\n"
"> > ## Solution -- USE WITH CAUTION!\n"
"> >\n"
"> > ### Background\n"
"> > Removing files from a Git repository needs to be done with caution. But we have not learned \n"
"> > yet how to tell Git to track a particular file; we will learn this in the next episode. Files \n"
"> > that are not tracked by Git can easily be removed like any other \"ordinary\" files with\n"
"> > ~~~\n"
"> > $ rm filename\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Similarly a directory can be removed using `rm -r dirname` or `rm -rf dirname`.\n"
"> > If the files or folder being removed in this fashion are tracked by Git, then their removal \n"
"> > becomes another change that we will need to track, as we will see in the next episode.\n"
"> >\n"
"> > ### Solution\n"
"> > Git keeps all of its files in the `.git` directory.\n"
"> > To recover from this little mistake, Dracula can just remove the `.git`\n"
"> > folder in the moons subdirectory by running the following command from inside the `planets` directory:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > But be careful! Running this command in the wrong directory will remove\n"
"> > the entire Git history of a project you might want to keep.\n"
"> > Therefore, always check your current directory using the command `pwd`."
msgstr ""
">\n"
"> > ## Відповідь -- КОРИСТУЙТЕСЯ З ОБЕРЕЖНІСТЮ!\n"
"> >\n"
"> > ### Контекст\n"
"> > Видалення файлів з репозиторія Git слід виконувати з обережністю. Проте, ми ще не навчилися \n"
"> > як відстежувати певний файл в Git; про це ми дізнаємося в наступному епізоді. Файли, \n"
"> > які не відстежуються Git, можна легко видалити, як і будь-які інші «звичайні» файли:\n"
"> > ~~~\n"
"> > $ rm filename\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Аналогічно, директорію можна вилучити за допомогою `rm -r dirname` або `rm -rf dirname`.\n"
"> > Якщо файли або папки, які треба вдалити, відстежуються Git, то їх видалення \n"
"> > стає ще однією зміною, яку нам потрібно буде відстежити (це ми побачимо в наступному епізоді).\n"
"> >\n"
"> > ### Відповідь\n"
"> > Git зберігає всі свої файли в директорії `.git`.\n"
"> > Щоб виправити цю маленьку помилку, Dracula може просто видалити директорію `.git`\n"
"> > в піддиректорії moons запустивши наступну команду всередині директорії `planets`:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Але будьте обережними! Виконання цієї команди у неправильній директорії призведе до видалення\n"
"> > всієї історії змін проєкту, який ви хотіли б зберегти.\n"
" .\n"
"> > Тому завжди перевіряйте поточну директорію за допомогою команди `pwd`."

# Front Matter
#: git-novice/_episodes/04-changes.md:1
msgid ""
"---\n"
"title: Tracking Changes\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I record changes in Git?\"\n"
"- \"How do I check the status of my version control repository?\"\n"
"- \"How do I record notes about what changes I made and why?\"\n"
"objectives:\n"
"- \"Go through the modify-add-commit cycle for one or more files.\"\n"
"- \"Explain where information is stored at each stage of that cycle.\"\n"
"- \"Distinguish between descriptive and non-descriptive commit messages.\"\n"
"keypoints:\n"
"- \"`git status` shows the status of a repository.\"\n"
"- \"Files can be stored in a project's working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\"\n"
"- \"`git add` puts files in the staging area.\"\n"
"- \"`git commit` saves the staged content as a new commit in the local repository.\"\n"
"- \"Write a commit message that accurately describes your changes.\"\n"
"---"
msgstr ""
"---\n"
"title: Відстеження змін\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"Як записати зміни в Git?\"\n"
"- \"Як перевірити стан контролю версій свого репозиторію?\"\n"
"- \"Як записати нотатки про те, які зміни було внесено і чому?\"\n"
"objectives:\n"
"- \"Пройти цикл зміни-додавання-коміту для одного або декількох файлів.\"\n"
"- \"Пояснити де зберігається інформація на кожному етапі цього циклу.\"\n"
"- \"Пояснити різницю між інформативними та неінформативними повідомленнями комітів.\"\n"
"keypoints:\n"
"- \"`git status` показує стан репозиторію.\"\n"
"- \"Файли можуть зберігатися в робочій директорії проєкту (яку бачать користувачі), зоні стейджингу (де будується наступний коміт) і локальному репозиторії (де коміти постійно зберігаються).\"\n"
"- \"`git add` додає файли до зони стейджингу.\"\n"
"- \"`git commit` зберігає все, що міститься у зоні стейджингу, як новий коміт у локальному репозиторії.\"\n"
"- \"Складайте повідомлення коміту так, щоб воно акуратно описувало ваші зміни.\"\n"
"---"

#: git-novice/_episodes/04-changes.md:21
msgid ""
"First let's make sure we're still in the right directory.\n"
"You should be in the `planets` directory."
msgstr ""
"Спочатку переконайтеся, що ми все ще в правильній директорії.\n"
"Ви повинні знаходитися у директорії `planets`."

# code block
#: git-novice/_episodes/04-changes.md:24
msgid ""
"~~~\n"
"$ cd ~/Desktop/planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ~/Desktop/planets\n"
"~~~"

#: git-novice/_episodes/04-changes.md:29
msgid ""
"Let's create a file called `mars.txt` that contains some notes\n"
"about the Red Planet's suitability as a base.\n"
"We'll use `nano` to edit the file;\n"
"you can use whatever editor you like.\n"
"In particular, this does not have to be the `core.editor` you set globally earlier. But remember, the bash command to create or edit a new file will depend on the editor you choose (it might not be `nano`). For a refresher on text editors, check out [\"Which Editor?\"](https://swcarpentry.github.io/shell-novice/03-create/) in [The Unix Shell](https://swcarpentry.github.io/shell-novice/) lesson."
msgstr ""
"Давайте створимо файл під назвою `mars.txt`, який буде містити деякі нотатки\n"
"про придатність Червоної Планети як бази.\n"
"Ми будемо використовувати редактор `nano` для редагування файлу;\n"
"ви можете використовувати будь-який редактор, який вам подобається.\n"
"Зокрема, це не обовʼязково повинен бути `core.editor`, який ви вказали глобально. Але пам'ятайте, що команда bash для створення або редагування нового файлу буде залежати від редактора, який ви оберете (це може бути не  `nano`). Для довідки щодо текстових редакторів, дивіться [\"Which Editor?\"](https://swcarpentry.github.io/shell-novice/03-create/) в уроці [The Unix Shell](https://swcarpentry.github.io/shell-novice/)."

# code block
#: git-novice/_episodes/04-changes.md:35
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:40
msgid "Type the text below into the `mars.txt` file:"
msgstr "Надрукуйте нижче наведений текст у файлі `mars.txt`:"

# code block
#: git-novice/_episodes/04-changes.md:42 git-novice/_episodes/04-changes.md:68
#: git-novice/_episodes/05-history.md:239 git-novice/_extras/discuss.md:153
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"

#: git-novice/_episodes/04-changes.md:47
msgid ""
"Let's first verify that the file was properly created by running the list "
"command (`ls`):"
msgstr ""
"Давайте спочатку перевіримо, що файл був правильно створений, запустивши "
"команду `ls`:"

# code block
#: git-novice/_episodes/04-changes.md:55
msgid ""
"~~~\n"
"mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:61
msgid "`mars.txt` contains a single line, which we can see by running:"
msgstr ""
"`mars.txt` містить тільки один рядок, який ми можемо побачити, запустивши:"

# code block
#: git-novice/_episodes/04-changes.md:63
#: git-novice/_episodes/05-history.md:234
#: git-novice/_episodes/09-conflict.md:26
#: git-novice/_episodes/09-conflict.md:172
#: git-novice/_episodes/09-conflict.md:202
#: git-novice/_episodes/09-conflict.md:294
msgid ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:73
msgid ""
"If we check the status of our project again,\n"
"Git tells us that it's noticed the new file:"
msgstr ""
"Якщо ми знову перевіримо статус нашого проєкту,\n"
"Git повідомляє нам, що він помітив новий файл:"

# code block
#: git-novice/_episodes/04-changes.md:81
msgid ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:95
msgid ""
"The \"untracked files\" message means that there's a file in the directory\n"
"that Git isn't keeping track of.\n"
"We can tell Git to track a file using `git add`:"
msgstr ""
"Повідомлення \"untracked files\" означає, що в директорії існує файл, який\n"
"Git не відстежує.\n"
"Ми можемо повідомити Git, що цей файл треба відстежувати за допомогою команди `git add`:"

# code block
#: git-novice/_episodes/04-changes.md:99
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:104
msgid "and then check that the right thing happened:"
msgstr "та згодом переконатися, що все виглядає правильно:"

# code block
#: git-novice/_episodes/04-changes.md:111
msgid ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"

#: git-novice/_episodes/04-changes.md:124
msgid ""
"Git now knows that it's supposed to keep track of `mars.txt`,\n"
"but it hasn't recorded these changes as a commit yet.\n"
"To get it to do that,\n"
"we need to run one more command:"
msgstr ""
"Git тепер знає, що він повинен стежити за файлом \"mars.txt', але він ще не зафіксував зміни у цьому файлі.\n"
"Щоб зробити це,\n"
"нам потрібно запустити ще одну команду:"

# code block
#: git-novice/_episodes/04-changes.md:129
msgid ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:134
msgid ""
"~~~\n"
"[main (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"[main (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:141
msgid ""
"When we run `git commit`,\n"
"Git takes everything we have told it to save by using `git add`\n"
"and stores a copy permanently inside the special `.git` directory.\n"
"This permanent copy is called a [commit]({{ page.root }}{% link reference.md %}#commit)\n"
"(or [revision]({{ page.root }}{% link reference.md %}#revision)) and its short identifier is `f22b25e`. Your commit may have another identifier."
msgstr ""
"Коли ми запускаємо `git commit`,\n"
"Git бере все, що ми раніше запросили його зберегти, використовуючи `git add`,\n"
"та зберігає постійну копію цих змін у спеціальній директорії `.git`.\n"
"Ця постійна копія називається [коміт]({{ page.root }}{% link reference.md %}#commit) (commit)\n"
"(або [revision]({{ page.root }}{% link reference.md %}#revision)). У цьому прикладі коміт має скорочений ідентифікатор `f22b25e`. Ваш коміт може мати інший ідентифікатор."

#: git-novice/_episodes/04-changes.md:147
msgid ""
"We use the `-m` flag (for \"message\")\n"
"to record a short, descriptive, and specific comment that will help us remember later on what we did and why.\n"
"If we just run `git commit` without the `-m` option,\n"
"Git will launch `nano` (or whatever other editor we configured as `core.editor`)\n"
"so that we can write a longer message."
msgstr ""
"Ми використовуємо команду `-m` (від \"message\")\n"
"щоб надати короткий, інформативний та конкретний коментар, який допоможе нам згадати пізніше про те, що ми зробили і чому.\n"
"Якщо ми просто запустимо `git commit` без опції `-m`,\n"
"Git запустить `nano` (або будь-який інший редактор, який ми вказали як `core.editor`),\n"
"щоб ми могли написати довше повідомлення."

#: git-novice/_episodes/04-changes.md:153
msgid ""
"[Good commit messages][commit-messages] start with a brief (<50 characters) statement about the\n"
"changes made in the commit. Generally, the message should complete the sentence \"If applied, this commit will\" <commit message here>.\n"
"If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be."
msgstr ""
"[Гарні повідомлення комітів][commit-messages] починаються з короткого (< 50 символів) твердження про зміни, внесені в коміт. Загалом, повідомлення має завершити речення \"If applied, this commit will\" <commit message here>.\n"
"Якщо ви хочете вдатися більше в деталі, додайте порожній рядок між першим рядком та вашими додатковими нотатками. Використовуйте додаткові нотатки, щоб пояснити, чому ви внесли зміни та/або яким буде їх вплив."

#: git-novice/_episodes/04-changes.md:157
msgid "If we run `git status` now:"
msgstr "Якщо ми тепер запустимо `git status`:"

# code block
#: git-novice/_episodes/04-changes.md:164
#: git-novice/_episodes/04-changes.md:454
#: git-novice/_episodes/06-ignore.md:102 git-novice/_extras/discuss.md:243
msgid ""
"~~~\n"
"On branch main\n"
"nothing to commit, working tree clean\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"nothing to commit, working tree clean\n"
"~~~"

#: git-novice/_episodes/04-changes.md:170
msgid ""
"it tells us everything is up to date.\n"
"If we want to know what we've done recently,\n"
"we can ask Git to show us the project's history using `git log`:"
msgstr ""
"Git говорить нам, що поточний стан файлів відповідає їх стану, який збережений у репозиторїї.\n"
"Якщо ми хочемо знати, що саме ми зробили нещодавно - \n"
"ми можемо попросити Git показати нам історію проєкту, використовуючи `git log`:"

# code block
#: git-novice/_episodes/04-changes.md:174
#: git-novice/_episodes/04-changes.md:462
msgid ""
"~~~\n"
"$ git log\n"
"~~~"
msgstr ""
"~~~\n"
"$ git log\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:179
msgid ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"

#: git-novice/_episodes/04-changes.md:188
msgid ""
"`git log` lists all commits  made to a repository in reverse chronological order.\n"
"The listing for each commit includes\n"
"the commit's full identifier\n"
"(which starts with the same characters as\n"
"the short identifier printed by the `git commit` command earlier),\n"
"the commit's author,\n"
"when it was created,\n"
"and the log message Git was given when the commit was created."
msgstr ""
"`git log` виводить перелік усіх комітів, які були внесені до репозиторію, у зворотному хронологічному порядку.\n"
"Для кожного коміту буде надруковано повний ідентифікатор коміту\n"
"(який починається з тих же символів, що і\n"
"скорочений ідентифікатор, попередньо надрукований командою `git commit`),\n"
"автор коміту,\n"
"дата його створення,\n"
"і повідомлення Git, яке було додано під час запису коміту."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:197
msgid "> ## Where Are My Changes?"
msgstr "> ## Де зберігаються мої зміни?"

#: git-novice/_episodes/04-changes.md:198
msgid ""
">\n"
"> If we run `ls` at this point, we will still see just one file called `mars.txt`.\n"
"> That's because Git saves information about files' history\n"
"> in the special `.git` directory mentioned earlier\n"
"> so that our filesystem doesn't become cluttered\n"
"> (and so that we can't accidentally edit or delete an old version)."
msgstr ""
">\n"
"> Якщо ми в цей момент запустимо `ls`, ми все одно побачимо лише один файл, який називається `mars.txt`.\n"
"> Це відбувається тому, що Git зберігає інформацію про історію файлів\n"
"> у спеціальній директорії `.git`, згаданій раніше,\n"
"> щоб наша файлова система не засмічувалася\n"
"> (і щоб ми випадково не могли змінити або видалити стару версію)."

#: git-novice/_episodes/04-changes.md:206
msgid ""
"Now suppose Dracula adds more information to the file.\n"
"(Again, we'll edit with `nano` and then `cat` the file to show its contents;\n"
"you may use a different editor, and don't need to `cat`.)"
msgstr ""
"Тепер уявімо, що Dracula додає нову інформацію до файлу.\n"
"(Знову ж таки, ми будемо редагувати його за допомогою `nano`, і потім перевіряти його зміст за допомогою `cat`;\n"
"ви можете користуватися іншим редактором, та можете не використовувати `cat`.)"

# code block
#: git-novice/_episodes/04-changes.md:210
#: git-novice/_episodes/04-changes.md:365
#: git-novice/_episodes/05-history.md:27
#: git-novice/_episodes/09-conflict.md:40
#: git-novice/_episodes/09-conflict.md:90
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:216 git-novice/_extras/discuss.md:170
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"~~~"

#: git-novice/_episodes/04-changes.md:222
msgid ""
"When we run `git status` now,\n"
"it tells us that a file it already knows about has been modified:"
msgstr ""
"Тепер, коли ми запускаємо `git status`,\n"
"Git повідомляє нам, що файл, про який він вже знає, був змінений:"

# code block
#: git-novice/_episodes/04-changes.md:230
#: git-novice/_episodes/04-changes.md:292
msgid ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_episodes/04-changes.md:242
msgid ""
"The last line is the key phrase:\n"
"\"no changes added to commit\".\n"
"We have changed this file,\n"
"but we haven't told Git we will want to save those changes\n"
"(which we do with `git add`)\n"
"nor have we saved them (which we do with `git commit`).\n"
"So let's do that now. It is good practice to always review\n"
"our changes before saving them. We do this using `git diff`.\n"
"This shows us the differences between the current state\n"
"of the file and the most recently saved version:"
msgstr ""
"Ключова фраза - це останній рядок:\n"
"\"no changes added to commit\".\n"
"Ми змінили цей файл,\n"
"але ми не сказали Git, що ми маємо намір зберегти ці зміни у майбутньому\n"
"(за допомогою `git add`)\n"
"або, що ми хочемо зберегти їх зараз (за допомогою `git commit`).\n"
"Давайте зробимо це зараз. Хорошою практикою є перегляд\n"
"наших змін кожного разу перед їх збереженням. Ми робимо це за допомогою `git diff`.\n"
"Це показує нам відмінності між поточним станом\n"
"файлу і останньою збереженою версією:"

# code block
#: git-novice/_episodes/04-changes.md:253
#: git-novice/_episodes/04-changes.md:378 git-novice/_extras/discuss.md:179
msgid ""
"~~~\n"
"$ git diff\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:258 git-novice/_extras/discuss.md:193
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"~~~"

#: git-novice/_episodes/04-changes.md:269
msgid ""
"The output is cryptic because\n"
"it is actually a series of commands for tools like editors and `patch`\n"
"telling them how to reconstruct one file given the other.\n"
"If we break it down into pieces:"
msgstr ""
"Результат цієї команди важко зрозуміти, тому що \n"
"це насправді серія команд для таких інструментів, як редактори або `patch`,\n"
"яка вказує як змінити один файл за допомогою іншого.\n"
"Якщо розділити цей результат на фрагменти:"

# ordered list
#: git-novice/_episodes/04-changes.md:274
msgid ""
"1.  The first line tells us that Git is producing output similar to the Unix"
" `diff` command"
msgstr ""
"1.  Перший рядок вказує нам на те, що результат цієї команди у Git подібен "
"до Unix команди `diff`,"

#: git-novice/_episodes/04-changes.md:275
msgid ""
"    comparing the old and new versions of the file.\n"
"2.  The second line tells exactly which versions of the file\n"
"    Git is comparing;\n"
"    `df0654a` and `315bf3a` are unique computer-generated labels for those versions.\n"
"3.  The third and fourth lines once again show the name of the file being changed.\n"
"4.  The remaining lines are the most interesting, they show us the actual differences\n"
"    and the lines on which they occur.\n"
"    In particular,\n"
"    the `+` marker in the first column shows where we added a line."
msgstr ""
"    яка порівнює стару та нову версії файлу.\n"
"2.  Другий рядок повідомляє які саме версії файлу\n"
"    Git порівнює;\n"
"    `df0654a` та `315bf3a` є унікальними ідентифікаторами цих версій.\n"
"3.  Третій та четвертий рядки ще раз показують назву файлу, що змінюється.\n"
"4.  Решта рядків найцікавіші, вони показують нам фактичні відмінності\n"
"    і рядки, у яких вони відбуваються.\n"
"    Зокрема,\n"
"    значок `+` в першому стовпці вказує де ми додали рядок."

#: git-novice/_episodes/04-changes.md:285
msgid "After reviewing our change, it's time to commit it:"
msgstr "Після того, як ми переглянули наші зміни, прийшов час зберегти їх:"

# code block
#: git-novice/_episodes/04-changes.md:287
msgid ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"

#: git-novice/_episodes/04-changes.md:304
msgid ""
"Whoops:\n"
"Git won't commit because we didn't use `git add` first.\n"
"Let's fix that:"
msgstr ""
"Але це не спрацює:\n"
"Git не буде додавати зміни, тому що ми не використали спочатку `git add`.\n"
"Давайте виправимо це:"

# code block
#: git-novice/_episodes/04-changes.md:308
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:314
msgid ""
"~~~\n"
"[main 34961b1] Add concerns about effects of Mars' moons on Wolfman\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 34961b1] Add concerns about effects of Mars' moons on Wolfman\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:320
msgid ""
"Git insists that we add files to the set we want to commit\n"
"before actually committing anything. This allows us to commit our\n"
"changes in stages and capture changes in logical portions rather than\n"
"only large batches.\n"
"For example,\n"
"suppose we're adding a few citations to relevant research to our thesis.\n"
"We might want to commit those additions,\n"
"and the corresponding bibliography entries,\n"
"but *not* commit some of our work drafting the conclusion\n"
"(which we haven't finished yet)."
msgstr ""
"Git наполягає, щоб ми додали файли до набору змін, які ми хочемо записати,\n"
"перед тим як ми зробимо коміт. Це дозволяє зберігати зміни поступово та \n"
"обʼєднувати їх у логічні блоки, аніж у \n"
"великі набори змін.\n"
"Наприклад,\n"
"припустимо, ми робимо коміт кількох цитат відповідних досліджень у нашій дисертації.\n"
"Можливо, ми бажаємо зберегти ці зміни,\n"
"та відповідні записи у бібліографії,\n"
"але *не* зберігати деякі інші зміни в нашій роботі\n"
"(наприклад, висновок, який ми ще не закінчили)."

#: git-novice/_episodes/04-changes.md:331
msgid ""
"To allow for this,\n"
"Git has a special *staging area*\n"
"where it keeps track of things that have been added to\n"
"the current [changeset]({{ page.root }}{% link reference.md %}#changeset)\n"
"but not yet committed."
msgstr ""
"Щоб це було можливо зробити,\n"
"Git має спеціальну *зону стейджингу* *staging area*\n"
"де він відстежує речі, які були додані\n"
"до поточного [набору змін]({{ page.root }}{% link reference.md %}#changeset)\n"
"проте, ще не були збережені."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:337
msgid "> ## Staging Area"
msgstr "> ## Зона стейджингу"

#: git-novice/_episodes/04-changes.md:338
msgid ""
">\n"
"> If you think of Git as taking snapshots of changes over the life of a project,\n"
"> `git add` specifies *what* will go in a snapshot\n"
"> (putting things in the staging area),\n"
"> and `git commit` then *actually takes* the snapshot, and\n"
"> makes a permanent record of it (as a commit).\n"
"> If you don't have anything staged when you type `git commit`,\n"
"> Git will prompt you to use `git commit -a` or `git commit --all`,\n"
"> which is kind of like gathering *everyone* to take a group photo!\n"
"> However, it's almost always better to\n"
"> explicitly add things to the staging area, because you might\n"
"> commit changes you forgot you made. (Going back to the group photo simile,\n"
"> you might get an extra with incomplete makeup walking on\n"
"> the stage for the picture because you used `-a`!)\n"
"> Try to stage things manually,\n"
"> or you might find yourself searching for \"git undo commit\" more\n"
"> than you would like!"
msgstr ""
">\n"
"> Якщо ви будете уявляти, ніби Git робить знімки змін протягом життя проєкту, то\n"
"> `git add` вказує *що* буде на знімку\n"
"> (додаючи речі в зоні стейждингу),\n"
"> а `git commit` після того *насправді робить* знімок, та\n"
"> назавжди зберігає його (як коміт).\n"
"> Якщо у зоні стейджингу нічого немає, то коли ви введете `git commit`,\n"
"> Git запропонує вам використати `git commit -a` або `git commit --all`,\n"
"> який ніби збирає разом *всіх*, щоб зробити групове фото!\n"
"> Однак майже завжди краще\n"
"> явним чином додати речі до зони стейджингу, тому без цього ви можете\n"
"> випадково зберегти інші зміни, про які ви забули. (Повертаючись до порівняння з груповим фото,\n"
"> якщо ви використали команду \"-а\",\n"
"> до вашої фотографії може потрапити зайва людина!)\n"
"> Тому додавайте речі в зону стейджингу власноруч -\n"
"> у іншому випадку вам може знадобитися шукати допомоги з \"git undo commit\" частіше, ніж\n"
"> вам хотілося б!"

#: git-novice/_episodes/04-changes.md:357
msgid "![The Git Staging Area]({{ site.baseurl }}/fig/git-staging-area.svg)"
msgstr "![Зона стейджингу Git]({{ site.baseurl }}/fig/git-staging-area.svg)"

#: git-novice/_episodes/04-changes.md:359
msgid ""
"Let's watch as our changes to a file move from our editor\n"
"to the staging area\n"
"and into long-term storage.\n"
"First,\n"
"we'll add another line to the file:"
msgstr ""
"Давайте подивимося, як наші зміни у файлі проходять шлях від текстового редактора\n"
"до зони стейджингу\n"
"і далі у довгострокове зберігання.\n"
"Спочатку,\n"
"ми додамо новий рядок у наш файл:"

# code block
#: git-novice/_episodes/04-changes.md:371
#: git-novice/_episodes/05-history.md:214
#: git-novice/_episodes/09-conflict.md:31
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:383
#: git-novice/_episodes/04-changes.md:419
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"

#: git-novice/_episodes/04-changes.md:395
msgid ""
"So far, so good:\n"
"we've added one line to the end of the file\n"
"(shown with a `+` in the first column).\n"
"Now let's put that change in the staging area\n"
"and see what `git diff` reports:"
msgstr ""
"Поки що все добре:\n"
"ми додали один рядок в кінці файлу\n"
"(що зазначає `+` у першій колонці).\n"
"Тепер давайте помістимо цю зміну у зону стейджингу\n"
"та подивимося що після цього звітує `git diff`:"

# code block
#: git-novice/_episodes/04-changes.md:401
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"

#: git-novice/_episodes/04-changes.md:407
msgid ""
"There is no output:\n"
"as far as Git can tell,\n"
"there's no difference between what it's been asked to save permanently\n"
"and what's currently in the directory.\n"
"However,\n"
"if we do this:"
msgstr ""
"Результату немає:\n"
"це виглядає ніби для Git\n"
"немає різниці між тим, що вже було збережено назавжди\n"
"і тим, що зараз міститься у робочій директорії.\n"
"Проте,\n"
"якщо ми зробимо наступне:"

# code block
#: git-novice/_episodes/04-changes.md:414
msgid ""
"~~~\n"
"$ git diff --staged\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff --staged\n"
"~~~"

#: git-novice/_episodes/04-changes.md:431
msgid ""
"it shows us the difference between\n"
"the last committed change\n"
"and what's in the staging area.\n"
"Let's save our changes:"
msgstr ""
"то ми побачимо різницю між\n"
"останніми збереженими змінами\n"
"і тими, які знаходяться в зоні стейджингу.\n"
"Давайте збережемо наші зміни:"

# code block
#: git-novice/_episodes/04-changes.md:436
msgid ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:441
msgid ""
"~~~\n"
"[main 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:447
msgid "check our status:"
msgstr "перевіримо наш статус:"

#: git-novice/_episodes/04-changes.md:460
msgid "and look at the history of what we've done so far:"
msgstr "і подивимося на історію попередніх змін:"

# code block
#: git-novice/_episodes/04-changes.md:467
msgid ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on Wolfman\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on Wolfman\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:488
msgid "> ## Word-based diffing"
msgstr "> ##  Порівняння з підсвіткою змінених слів у рядках"

#: git-novice/_episodes/04-changes.md:489
msgid ""
">\n"
"> Sometimes, e.g. in the case of the text documents a line-wise\n"
"> diff is too coarse. That is where the `--color-words` option of\n"
"> `git diff` comes in very useful as it highlights the changed\n"
"> words using colors."
msgstr ""
">\n"
"> Інколи, наприклад, у випадку текстових документів, результат\n"
"> `diff` дуже важко зрозуміти. Саме тут `--color-words` опція для\n"
"> `git diff` є надзвичайно зручною, бо вона виділяє кольором змінені слова."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:496
msgid "> ## Paging the Log"
msgstr "## Перегляд історії змін за сторінками "

#: git-novice/_episodes/04-changes.md:497
msgid ""
">\n"
"> When the output of `git log` is too long to fit in your screen,\n"
"> `git` uses a program to split it into pages of the size of your screen.\n"
"> When this \"pager\" is called, you will notice that the last line in your\n"
"> screen is a `:`, instead of your usual prompt.\n"
">\n"
"> *   To get out of the pager, press <kbd>Q</kbd>.\n"
"> *   To move to the next page, press <kbd>Spacebar</kbd>.\n"
"> *   To search for `some_word` in all pages,\n"
">     press <kbd>/</kbd>\n"
">     and type `some_word`.\n"
">     Navigate through matches pressing <kbd>N</kbd>."
msgstr ""
"Коли розмір результату `git log` перевищує розмір вашого екрану,\n"
" `git` використовує спеціальну програму \"пейджер\", щоб поділити результат між сторінками.\n"
"Після виклику \"пейджера\", ви помітите, що останній рядок вашого результату закінчується на `:`, замість звичайного закінчення.\n"
"\n"
"Натисніть <kbd>Q</kbd>, щоб вийти з пейджеру.\n"
"Натисніть <kbd>пробіл</kbd>, щоб перейти на наступну сторінку.\n"
"Натисніть <kbd>/</kbd> та напишіть бажане слово задля пошуку його на усіх сторінках.\n"
"Натисніть <kbd>N</kbd>, для навігації між результатами пошуку."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:511
msgid "> ## Limit Log Size"
msgstr "## Обмеження розміру відображеної історії змін"

#: git-novice/_episodes/04-changes.md:512
msgid ""
">\n"
"> To avoid having `git log` cover your entire terminal screen, you can limit the\n"
"> number of commits that Git lists by using `-N`, where `N` is the number of\n"
"> commits that you want to view. For example, if you only want information from\n"
"> the last commit you can use:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"
msgstr ""
">\n"
">Щоб запобігти випадку, коли `git log` повністю займає ваш термінал,\n"
"> ви можете обмежувати кількість комітів які відображує Git, використовуючи опцію `-N`, де `N` - кількість\n"
"> комітів які би ви бажали бачити на екрані. Наприклад, якщо ви бажаєте побачити лише останній коміт,\n"
"> використовуйте команду\n"
" ~~~\n"
"$ git log -1\n"
"{: .language-bash}\n"
" ~~~\n"
" commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date: Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
"> Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"

# SC/DC Template label
#: git-novice/_episodes/04-changes.md:530
#: git-novice/_episodes/04-changes.md:544
#: git-novice/_episodes/04-changes.md:561
#: git-novice/_episodes/05-history.md:330 git-novice/_extras/discuss.md:488
msgid "> {: .output}"
msgstr "> {: .output}"

#: git-novice/_episodes/04-changes.md:531
msgid ""
">\n"
"> You can also reduce the quantity of information using the\n"
"> `--oneline` option:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Ви також можете зменшити кількість інформації, використовуючи\n"
"> опцію `--oneline`:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> f22b25e Start notes on Mars as a base\n"
"> ~~~"

#: git-novice/_episodes/04-changes.md:545
msgid ""
">\n"
"> You can also combine the `--oneline` option with others. One useful\n"
"> combination adds `--graph` to display the commit history as a text-based\n"
"> graph and to indicate which commits are associated with the\n"
"> current `HEAD`, the current branch `main`, or\n"
"> [other Git references][git-references]:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Ви також можете комбінувати опцію `--oneline` з іншими опціями. Одна корисна\n"
"> комбінація додає `--graph` для графічного відображення історії комітів за допомогою\n"
"> псевдографіки, вказуючи при цьому які коміти пов`язані з\n"
"> поточним `HEAD`, поточним бранчем `main`, або\n"
"> [іншими обʼєктами у Git репозиторії][git-references]:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:564
msgid "> ## Directories"
msgstr "> ## Директорії"

#: git-novice/_episodes/04-changes.md:565
msgid ""
">\n"
"> Two important facts you should know about directories in Git.\n"
">\n"
"> 1. Git does not track directories on their own, only files within them.\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ mkdir spaceships\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Note, our newly created empty directory `spaceships` does not appear in\n"
">    the list of untracked files even if we explicitly add it (_via_ `git add`) to our\n"
">    repository. This is the reason why you will sometimes see `.gitkeep` files\n"
">    in otherwise empty directories. Unlike `.gitignore`, these files are not special\n"
">    and their sole purpose is to populate a directory so that Git adds it to\n"
">    the repository. In fact, you can name such files anything you like.\n"
">\n"
"> 2. If you create a directory in your Git repository and populate it with files,\n"
">    you can add all files in the directory at once by:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ touch spaceships/apollo-11 spaceships/sputnik-1\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Before moving on, we will commit these changes.\n"
">\n"
">    ~~~\n"
">    $ git commit -m \"Add some initial thoughts on spaceships\"\n"
">    ~~~\n"
">    {: .language-bash}"
msgstr ""
">\n"
"> Дві важливі речі, які ви повинні знати про директорії в Git.\n"
">\n"
"> 1. Git не відстежує директорії самостійно, тільки файли всередині них.\n"
">    Спробуйте власноруч:\n"
">\n"
">    ~~~\n"
">    $ mkdir spaceships\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Зауважте, наша новостворена порожня директорія `spaceships` не з`являється в\n"
">   списку невідстежуваних файлів, навіть якщо ми конкретно додамо їх (_через_ `git add`) до нашого\n"
">    репозиторію. Ось чому ви іноді бачите файли `.gitkeep` \n"
">    в інших порожніх директоріях. На відміну від `.gitignore`, ці файли не є особливими\n"
">   і їх єдиною метою є заповнити директорію, щоб Git додав її до\n"
">    репозиторію. Насправді, ви можете назвати такі файли до вашої довподоби.\n"
">\n"
"> 2. Якщо ви створюєте директорію у вашому репозиторії Git і заповнюєте її файлами,\n"
">    ви можете додати всі файли в директорії одразу:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Спробуйте власноруч:\n"
">\n"
">    ~~~\n"
">    $ touch spaceships/apollo-11 spaceships/sputnik-1\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Перш ніж рухатися далі, ми збережемо ці зміни.\n"
">\n"
">    ~~~\n"
">    $ git commit -m \"Add some initial thoughts on spaceships\"\n"
">    ~~~\n"
">    {: .language-bash}"

#: git-novice/_episodes/04-changes.md:612
msgid ""
"To recap, when we want to add changes to our repository,\n"
"we first need to add the changed files to the staging area\n"
"(`git add`) and then commit the staged changes to the\n"
"repository (`git commit`):"
msgstr ""
"Для повторення: коли ми хочемо додати зміни до нашого репозиторію,\n"
"спочатку нам потрібно додати змінені файли в зону стейджингу\n"
"(`git add`) а потім зберегти заплановані зміни до\n"
"репозиторію (`git commit`):"

#: git-novice/_episodes/04-changes.md:617
msgid "![The Git Commit Workflow]({{ site.baseurl }}/fig/git-committing.svg)"
msgstr "![Процес запису комітів у Git]({{ site.baseurl }}/fig/git-committing.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:619
msgid "> ## Choosing a Commit Message"
msgstr "> ## Вибір повідомлення коміту"

#: git-novice/_episodes/04-changes.md:620
msgid ""
">\n"
"> Which of the following commit messages would be most appropriate for the\n"
"> last commit made to `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solution\n"
"> > Answer 1 is not descriptive enough, and the purpose of the commit is unclear;\n"
"> > and answer 2 is redundant to using \"git diff\" to see what changed in this commit;\n"
"> > but answer 3 is good: short, descriptive, and imperative."
msgstr ""
">\n"
"> Які з наступних повідомлень коміту будуть найбільш оптимальними для\n"
"> останнього коміту в `mars.txt`?\n"
">\n"
"> 1. \"Зміни\"\n"
"> 2. \"Додано рядок 'But the Mummy will appreciate the lack of humidity' до mars.txt\"\n"
"> 3. \"Обговорення впливу клімату на Марсі на Mummy\"\n"
">\n"
"> > ## Відповідь\n"
"> > Відповідь 1 є недостатньо детальною, а мета коміту неясна;\n"
"> > відповідь 2 дублює результат команди \"git diff\" яка відобразить зміни зроблені у цьому коміті;\n"
"> > 3 відповідь - оптимальна: коротка, інформативна, та імперативна."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:635
msgid "> ## Committing Changes to Git"
msgstr "> ## Збереження змін у Git"

#: git-novice/_episodes/04-changes.md:636
msgid ""
">\n"
"> Which command(s) below would save the changes of `myfile.txt`\n"
"> to my local Git repository?\n"
">\n"
"> 1. ~~~\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 2. ~~~\n"
">    $ git init myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 3. ~~~\n"
">    $ git add myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 4. ~~~\n"
">    $ git commit -m myfile.txt \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Would only create a commit if files have already been staged.\n"
"> > 2. Would try to create a new repository.\n"
"> > 3. Is correct: first add the file to the staging area, then commit.\n"
"> > 4. Would try to commit a file \"my recent changes\" with the message myfile.txt."
msgstr ""
">\n"
"> Яка(які) з наведених нижче команд збережуть зміни у файлі `myfile.txt`\n"
"> до мого локального Git репозиторію?\n"
">\n"
"> 1. ~~~\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 2. ~~~\n"
">    $ git init myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 3. ~~~\n"
">    $ git add myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 4. ~~~\n"
">    $ git commit -m myfile.txt \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > 1. Створить коміт, лише якщо файли вже були у зоні стейджінгу.\n"
"> > 2. Намагатиметься створити новий репозиторій.\n"
"> > 3. Правильна відповідь: спочатку додайте файл до зони стейджингу, потм зробіть коміт.\n"
"> > 4. Спробує записати коміт файлу з назвою \"my recent changes\" з повідомленням myfile.txt."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:668
msgid "> ## Committing Multiple Files"
msgstr "> ## Коміт декількох файлів"

#: git-novice/_episodes/04-changes.md:669
msgid ""
">\n"
"> The staging area can hold changes from any number of files\n"
"> that you want to commit as a single snapshot.\n"
">\n"
"> 1. Add some text to `mars.txt` noting your decision\n"
"> to consider Venus as a base\n"
"> 2. Create a new file `venus.txt` with your initial thoughts\n"
"> about Venus as a base for you and your friends\n"
"> 3. Add changes from both files to the staging area,\n"
"> and commit those changes.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The output below from `cat mars.txt` reflects only content added during \n"
"> > this exercise. Your output may vary.\n"
"> > \n"
"> > First we make our changes to the `mars.txt` and `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Now you can add both files to the staging area. We can do that in one line:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Or with multiple commands:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Now the files are ready to commit. You can check that using `git status`. If you are ready to commit use:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [main cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Зона стейджингу може зберігати зміни у будь-якій кількості файлів,\n"
"> які ви хочете записати у один коміт.\n"
">\n"
"> 1. Додайте текст до `mars.txt` про те, що ви вирішили \n"
"> розглянути побудову бази на Венері\n"
"> 2. Створіть новий файл `venus.txt` з вашими думками\n"
"> стосовно Венери як бази для вас та ваших друзів\n"
"> 3. Додайте зміни у обох файлах до зони стейджінгу,\n"
"> та зробіть коміт цих змін.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Результат нижче з файлу `cat mars.txt` відображає тільки контент доданий під час \n"
"> > цієї вправи. Ваш результат може виглядати іншим чином.\n"
"> > \n"
"> > Спочатку ми робимо зміни у файлі `mars.txt` та `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Тепер ви можете додати обидва файли до зони стейджингу. Ми можемо зробити це однією командою:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Або за допомогою декількох команд:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Тепер файли готові для коміту. Ви можете перевірити це за допомогою `git status`. Якщо ви готові зробити коміт, використовуйте\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [main cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:731
msgid "> ## `bio` Repository"
msgstr "> ## Репозиторій `bio`"

#: git-novice/_episodes/04-changes.md:732
msgid ""
">\n"
"> * Create a new Git repository on your computer called `bio`.\n"
"> * Write a three-line biography for yourself in a file called `me.txt`,\n"
"> commit your changes\n"
"> * Modify one line, add a fourth line\n"
"> * Display the differences\n"
"> between its updated state and its original state.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If needed, move out of the `planets` folder:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create a new folder called `bio` and 'move' into it:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Initialise git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create your biography file `me.txt` using `nano` or another text editor.\n"
"> > Once in place, add and commit it to the repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Add biography file\" \n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modify the file as described (modify one line, add a fourth line).\n"
"> > To display the differences\n"
"> > between its updated state and its original state, use `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> * Створіть новий репозиторій Git на вашому комп`ютері під назвою `bio`.\n"
"> * Напишіть три рядки своєї біографії у файлі під назвою `me.txt`,\n"
"> та зробіть коміт цих змін\n"
"> * Змініть один з рядків, додайте четвертий рядок\n"
"> * Покажіть відмінності\n"
"> між оновленим файлом та його попередньою версією.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Якщо необхідно, вийдіть з папки `planets`:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Створіть нову папку  `bio` та перейдіть до неї:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Iніціалізуйте репозиторій Git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Створіть файл `me.txt` з вашою біографією, використовуючи `nano` або інший текстовий редактор.\n"
"> > Коли будете готові, додайте його до зони стейджингу та запишіть коміт до репозиторію:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Add biography file\" \n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Змініть файл як описано (змініть один рядок, додайте четвертий рядок).\n"
"> > Для того щоб показати зміни\n"
"> > між оновленим файлом та його попередньою версією, використайте `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}"

#: git-novice/_episodes/04-changes.md:784
msgid ""
"[commit-messages]: https://chris.beams.io/posts/git-commit/\n"
"[git-references]: https://git-scm.com/book/en/v2/Git-Internals-Git-References"
msgstr ""
"[commit-messages]: https://chris.beams.io/posts/git-commit/\n"
"[git-references]: https://git-scm.com/book/en/v2/Git-Internals-Git-References"

#: git-novice/_episodes/04-changes.md:787
msgid "{% include links.md %}"
msgstr "{% include links.md %}"

# Front Matter
#: git-novice/_episodes/05-history.md:1
msgid ""
"---\n"
"title: Exploring History\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I identify old versions of files?\"\n"
"- \"How do I review my changes?\"\n"
"- \"How can I recover old versions of files?\"\n"
"objectives:\n"
"- \"Explain what the HEAD of a repository is and how to use it.\"\n"
"- \"Identify and use Git commit numbers.\"\n"
"- \"Compare various versions of tracked files.\"\n"
"- \"Restore old versions of files.\"\n"
"keypoints:\n"
"- \"`git diff` displays differences between commits.\"\n"
"- \"`git checkout` recovers old versions of files.\"\n"
"---"
msgstr ""
"---\n"
"title: Перегляд історії\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"Як визначити старі версії файлів?\"\n"
"- \"Як переглянути свої зміни?\"\n"
"- \"Як відновити старі версії файлів?\"\n"
"objectives:\n"
"- \"Пояснення що таке HEAD репозиторію та як його використовувати.\"\n"
"- \"Визначення та використання відносних номерів комітів Git.\"\n"
"- \"Порівняння різних версій відслідковуваних файлів.\"\n"
"- \"Відновлення старих версій файлів.\"\n"
"keypoints:\n"
"- \"`git diff` відображає відмінності між файлами.\"\n"
"- \"`git checkout` відновлює старі версії файлів.\"\n"
"---"

#: git-novice/_episodes/05-history.md:19
msgid ""
"As we saw in the previous episode, we can refer to commits by their\n"
"identifiers.  You can refer to the _most recent commit_ of the working\n"
"directory by using the identifier `HEAD`."
msgstr ""
"Як ми побачили у попередньому епізоді, ми можемо посилатися на коміти за їх\n"
"ідентифікаторами. Ви можете звернутися до _останнього коміту_ робочої\n"
"директорії, використовуючи ідентифікатор `HEAD`."

#: git-novice/_episodes/05-history.md:23
msgid ""
"We've been adding one line at a time to `mars.txt`, so it's easy to track our\n"
"progress by looking, so let's do that using our `HEAD`s.  Before we start,\n"
"let's make a change to `mars.txt`, adding yet another line."
msgstr ""
"Кожного разу ми додавали тільки один рядок до `mars.txt`, тож нам буде легко відслідкувати досягнутий\n"
"прогрес. Отже, давайте зробимо це, використовуючи `HEAD`.  Перш ніж ми почнемо,\n"
"давайте внесемо зміни до `mars.txt`, додавши ще один рядок."

# code block
#: git-novice/_episodes/05-history.md:33
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"An ill-considered change\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"An ill-considered change\n"
"~~~"

#: git-novice/_episodes/05-history.md:41
msgid "Now, let's see what we get."
msgstr "Тепер давайте подивимося на наш результат."

# code block
#: git-novice/_episodes/05-history.md:43
msgid ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:48
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
" But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change.\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
" But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change.\n"
"~~~"

#: git-novice/_episodes/05-history.md:61
msgid ""
"which is the same as what you would get if you leave out `HEAD` (try it).  The\n"
"real goodness in all this is when you can refer to previous commits.  We do\n"
"that by adding `~1` \n"
"(where \"~\" is \"tilde\", pronounced [**til**-d*uh*]) \n"
"to refer to the commit one before `HEAD`."
msgstr ""
"Він такий ж самий, який би ви отримали без використання `HEAD` (спробуйте).  Справжня\n"
"перевага від цього відчувається коли ви можете посилатися на попередні коміти.  Ми можемо\n"
"робити це, додаючи `~1` \n"
"(де \"~\" - це тільда), \n"
"щоб звернутися до коміту зробленому безпосередньо перед `HEAD`."

# code block
#: git-novice/_episodes/05-history.md:67
msgid ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:72
msgid ""
"If we want to see the differences between older commits we can use `git diff`\n"
"again, but with the notation `HEAD~1`, `HEAD~2`, and so on, to refer to them:"
msgstr ""
"Якщо ми хочемо побачити різницю між старішими комітами, ми можемо знову використати `git diff`,\n"
"проте, з нотацією `HEAD~1`, `HEAD~2`, і так далі, щоб звернутися до них:"

# code block
#: git-novice/_episodes/05-history.md:76
msgid ""
"~~~\n"
"$ git diff HEAD~3 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD~3 mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:81
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"

#: git-novice/_episodes/05-history.md:94
msgid ""
"We could also use `git show` which shows us what changes we made at an older commit as \n"
"well as the commit message, rather than the _differences_ between a commit and our \n"
"working directory that we see by using `git diff`."
msgstr ""
"Ми також можемо використати команду `git show`, яка показує які зміни ми внесли у будь-якому попередньо зробленому коміті, а також і повідомлення коміту, на відміну від команди `git diff` \n"
"яка покаже _різницю_ між комітом та нашою \n"
"робочою директорією."

# code block
#: git-novice/_episodes/05-history.md:98
msgid ""
"~~~\n"
"$ git show HEAD~3 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git show HEAD~3 mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:103
msgid ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"

#: git-novice/_episodes/05-history.md:120
msgid ""
"In this way,\n"
"we can build up a chain of commits.\n"
"The most recent end of the chain is referred to as `HEAD`;\n"
"we can refer to previous commits using the `~` notation,\n"
"so `HEAD~1`\n"
"means \"the previous commit\",\n"
"while `HEAD~123` goes back 123 commits from where we are now."
msgstr ""
"Таким чином,\n"
"ми можемо створити послідовність комітів.\n"
"Найпізніший кінець послідовності позначається як `HEAD`;\n"
"ми можемо посилатися на попередні коміти, використовуючи позначення `~`,\n"
"тож `HEAD~1`\n"
"означає \"попередній коміт\",\n"
"а `HEAD~123` повертається на 123 коміти назад від точки, де ми зараз знаходимось."

#: git-novice/_episodes/05-history.md:128
msgid ""
"We can also refer to commits using\n"
"those long strings of digits and letters\n"
"that `git log` displays.\n"
"These are unique IDs for the changes,\n"
"and \"unique\" really does mean unique:\n"
"every change to any set of files on any computer\n"
"has a unique 40-character identifier.\n"
"Our first commit was given the ID\n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"so let's try this:"
msgstr ""
"Ми також можемо вказувати на коміти, використовуючи\n"
"ті довгі рядки цифр і букв,\n"
"які показує `git log`.\n"
"Це унікальні ідентифікатори змін,\n"
"де \"унікальні\" дійсно означає унікальні:\n"
"кожна зміна будь-якого набору файлів на будь-якому комп`ютері\n"
"має унікальний 40-символьний ідентифікатор.\n"
"Наш перший коміт отримав ідентифікатор \n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"тож давайте спробуємо наступне:"

# code block
#: git-novice/_episodes/05-history.md:139
msgid ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:144
#: git-novice/_episodes/05-history.md:166
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"

#: git-novice/_episodes/05-history.md:157
msgid ""
"That's the right answer,\n"
"but typing out random 40-character strings is annoying,\n"
"so Git lets us use just the first few characters (typically seven for normal size projects):"
msgstr ""
"Це правильна відповідь,\n"
"проте, введення випадкових 40-символьних рядків незручно,\n"
"тож Git дозволяє нам використовувати тільки перші кілька символів (як правило, сім для проєктів нормального розміру):"

# code block
#: git-novice/_episodes/05-history.md:161
msgid ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:179
msgid ""
"All right! So\n"
"we can save changes to files and see what we've changed. Now, how\n"
"can we restore older versions of things?\n"
"Let's suppose we change our mind about the last update to\n"
"`mars.txt` (the \"ill-considered change\")."
msgstr ""
"Дуже добре! Тож\n"
"ми можемо зберегти зміни в файли і подивитися, що ми змінили. Тепер, як\n"
"ми можемо відновити старіші версії речей?\n"
"Припустимо, що ми передумали щодо останнього оновлення файлу\n"
"`mars.txt` (рядок \"ill-considered change\")."

#: git-novice/_episodes/05-history.md:185
msgid ""
"`git status` now tells us that the file has been changed,\n"
"but those changes haven't been staged:"
msgstr ""
"`git status` тепер каже нам, що файл був змінений,\n"
"але ці зміни не були додані до зони стейджингу:"

# code block
#: git-novice/_episodes/05-history.md:193
msgid ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_episodes/05-history.md:205
msgid ""
"We can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"Ми можемо повернути усе як було\n"
"за допомогою `git checkout`:"

# code block
#: git-novice/_episodes/05-history.md:208
msgid ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:221
msgid ""
"As you might guess from its name,\n"
"`git checkout` checks out (i.e., restores) an old version of a file.\n"
"In this case,\n"
"we're telling Git that we want to recover the version of the file recorded in `HEAD`,\n"
"which is the last saved commit.\n"
"If we want to go back even further,\n"
"we can use a commit identifier instead:"
msgstr ""
"Як ви можете здогадатися з назви цієї команди,\n"
"`git checkout` знаходить (тобто відновлює) стару версію файлу.\n"
"В цьому випадку,\n"
"ми кажемо Git що ми бажаємо відновити версію файлу, записану в `HEAD`\n"
"(тобто у останньому зробленому коміті).\n"
"Якщо ми хочемо повернутися ще раніше,\n"
"замість цього ми можемо використовувати ідентифікатор коміту:"

# code block
#: git-novice/_episodes/05-history.md:229 git-novice/_extras/discuss.md:61
msgid ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:249
msgid ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"~~~"

#: git-novice/_episodes/05-history.md:259
msgid ""
"Notice that the changes are currently in the staging area.\n"
"Again, we can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"Звернуть увагу, що в даний момент зміни знаходяться в зоні стейджінгу.\n"
"Знову ж таки, ми можемо повернути речі назад, так як вони були,\n"
"використовуючи `git checkout`:"

# code block
#: git-novice/_episodes/05-history.md:263
msgid ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:268
msgid "> ## Don't Lose Your HEAD"
msgstr "> ## Не Загубіть Ваш HEAD"

#: git-novice/_episodes/05-history.md:269
msgid ""
">\n"
"> Above we used\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> to revert `mars.txt` to its state after the commit `f22b25e`. But be careful! \n"
"> The command `checkout` has other important functionalities and Git will misunderstand\n"
"> your intentions if you are not accurate with the typing. For example, \n"
"> if you forget `mars.txt` in the previous command.\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> Note: checking out 'f22b25e'.\n"
">\n"
"> You are in 'detached HEAD' state. You can look around, make experimental\n"
"> changes and commit them, and you can discard any commits you make in this\n"
"> state without impacting any branches by performing another checkout.\n"
">\n"
"> If you want to create a new branch to retain commits you create, you may\n"
"> do so (now or later) by using -b with the checkout command again. Example:\n"
">\n"
">  git checkout -b <new-branch-name>\n"
">\n"
"> HEAD is now at f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Вище ми використовували\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> щоб повернути `mars.txt`до свого стану після комміту `f22b25e`. Проте, будьте обережні! \n"
"> Команда `checkout` має інші важливі вараінти використання, та Git не зрозуміє\n"
"> ваших намірів, якщо ви будете неточно вводити команди. Наприклад, \n"
"> якщо ви забудете `mars.txt` у попередній команді.\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> Note: checking out 'f22b25e'.\n"
">\n"
"> You are in 'detached HEAD' state. You can look around, make experimental\n"
"> changes and commit them, and you can discard any commits you make in this\n"
"> state without impacting any branches by performing another checkout.\n"
">\n"
"> If you want to create a new branch to retain commits you create, you may\n"
"> do so (now or later) by using -b with the checkout command again. Example:\n"
">\n"
"> git checkout -b 1\n"
">\n"
"> HEAD is now at f22b25e Start notes on Mars as a base\n"
"> ~~~"

# SC/DC Template label
#: git-novice/_episodes/05-history.md:300
msgid "> {: .error}"
msgstr "> {: .error}"

#: git-novice/_episodes/05-history.md:301
msgid ""
">\n"
"> The \"detached HEAD\" is like \"look, but don't touch\" here,\n"
"> so you shouldn't make any changes in this state.\n"
"> After investigating your repo's past state, reattach your `HEAD` with `git checkout main`."
msgstr ""
">\n"
"> Таким чином, стан\"detached HEAD\" - це наче \"дивися, але не чіпай\",\n"
"> так що ви не маєте робити ніяких змін в цьому стані.\n"
"> Після дослідження попереднього стану вашого репозиторію, \"прикріпіть\" `HEAD` за допомогою команди `git checkout main`."

#: git-novice/_episodes/05-history.md:307
msgid ""
"It's important to remember that\n"
"we must use the commit number that identifies the state of the repository\n"
"*before* the change we're trying to undo.\n"
"A common mistake is to use the number of\n"
"the commit in which we made the change we're trying to discard.\n"
"In the example below, we want to retrieve the state from before the most\n"
"recent commit (`HEAD~1`), which is commit `f22b25e`:"
msgstr ""
"Важливо пам`ятати , що\n"
"ми повинні використовувати номер коміту, який ідентифікує стан репозиторію\n"
"*перед* зміною, яку ми намагаємося скасувати.\n"
"Поширена помилка - використовувати номер коміту,\n"
"в якому ми зробили зміни, які намагаємося скасувати.\n"
"У наведеному нижче прикладі ми хочемо отримати стан перед самим\n"
"нещодавнім комітом (`HEAD~1`), тобто коміт `f22b25e`:"

#: git-novice/_episodes/05-history.md:315
msgid "![Git Checkout]({{ site.baseurl }}/fig/git-checkout.svg)"
msgstr "![Git Checkout]({{ site.baseurl }}/fig/git-checkout.svg)"

#: git-novice/_episodes/05-history.md:317
msgid ""
"So, to put it all together,\n"
"here's how Git works in cartoon form:"
msgstr ""
"Отже, якщо скласти це все разом,\n"
"то Git працює як зображено у цьому коміксі:"

#: git-novice/_episodes/05-history.md:320
msgid ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266]({{ site.baseurl }}/fig/git_staging.svg)"
msgstr ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266]({{ site.baseurl }}/fig/git_staging.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:322
msgid "> ## Simplifying the Common Case"
msgstr "> ## Спрощення типової ситуації"

#: git-novice/_episodes/05-history.md:323
msgid ""
">\n"
"> If you read the output of `git status` carefully,\n"
"> you'll see that it includes this hint:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"> ~~~"
msgstr ""
">\n"
"> Якщо уважно прочитати результат команди `git status`,\n"
"> ви побачите, що він включає в себе цю підказку:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:331
msgid ""
">\n"
"> As it says,\n"
"> `git checkout` without a version identifier restores files to the state saved in `HEAD`.\n"
"> The double dash `--` is needed to separate the names of the files being recovered\n"
"> from the command itself:\n"
"> without it,\n"
"> Git would try to use the name of the file as the commit identifier."
msgstr ""
">\n"
"> Як сказано раніше,\n"
"> `git checkout` без ідентифікатора версії відновлює файли до стану, збереженого в `HEAD`.\n"
"> Подвійне тире `--` необхідне щоб відділити імена файлів, які відновлюються,\n"
"> від самої команди:\n"
"> без подвійного тире\n"
"> Git буде намагатися використати назву файлу як ідентифікатор коміту."

#: git-novice/_episodes/05-history.md:340
msgid ""
"The fact that files can be reverted one by one\n"
"tends to change the way people organize their work.\n"
"If everything is in one large document,\n"
"it's hard (but not impossible) to undo changes to the introduction\n"
"without also undoing changes made later to the conclusion.\n"
"If the introduction and conclusion are stored in separate files,\n"
"on the other hand,\n"
"moving backward and forward in time becomes much easier."
msgstr ""
"Той факт, що файли можна відновлювати окремо,\n"
"сприяє змінам в організації роботи.\n"
"Якщо все знаходиться в одному величезному документі,\n"
"буде важко (але не неможливо) скасувати зміни у вступі\n"
"без скасування також змін, внесених пізніше до висновку.\n"
"З іншого боку,\n"
"якщо вступ і висновок зберігаються в окремих файлах,\n"
"рухатися вперед і назад в часі стає набагато легше."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:349
msgid "> ## Recovering Older Versions of a File"
msgstr "> ## Відновлення старих версій файлу"

#: git-novice/_episodes/05-history.md:350
msgid ""
">\n"
"> Jennifer has made changes to the Python script that she has been working on for weeks, and the\n"
"> modifications she made this morning \"broke\" the script and it no longer runs. She has spent\n"
"> ~ 1hr trying to fix it, with no luck...\n"
">\n"
"> Luckily, she has been keeping track of her project's versions using Git! Which commands below will\n"
"> let her recover the last committed version of her Python script called\n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Both 2 and 4\n"
">\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answer is (5)-Both 2 and 4. \n"
"> > \n"
"> > The `checkout` command restores files from the repository, overwriting the files in your working \n"
"> > directory. Answers 2 and 4 both restore the *latest* version *in the repository* of the file \n"
"> > `data_cruncher.py`. Answer 2 uses `HEAD` to indicate the *latest*, whereas answer 4 uses the \n"
"> > unique ID of the last commit, which is what `HEAD` means. \n"
"> > \n"
"> > Answer 3 gets the version of `data_cruncher.py` from the commit *before* `HEAD`, which is NOT \n"
"> > what we wanted.\n"
"> > \n"
"> > Answer 1 can be dangerous! Without a filename, `git checkout` will restore **all files** \n"
"> > in the current directory (and all directories below it) to their state at the commit specified. \n"
"> > This command will restore `data_cruncher.py` to the latest commit version, but it will also \n"
"> > restore *any other files that are changed* to that version, erasing any changes you may \n"
"> > have made to those files!\n"
"> > As discussed above, you are left in a *detached* `HEAD` state, and you don't want to be there."
msgstr ""
">\n"
"> Дженніфер зробила цього ранку деякі зміни у скрипті Python, над яким вона до цього працювала тижнями, та\n"
">  \"зламала\" його - він більше на запускається. Вона витратила\n"
"> майже одну годину, намагаючись виправити його, але безуспішно...\n"
">\n"
"> На щастя, вона використовує Git для відстеження змін у свому проєкті! Які з наведених нижче команд допоможуть\n"
"> їй відновити останню збережену у Git версію її скрипту, який називається\n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Обидві відповіді 2 та 4\n"
">\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Відповідь (5) - Обидві відповіді 2 та 4. \n"
"> > \n"
"> > Команда `checkout` відновлює файли з репозиторію, перезаписуючи файли у вашій робочій \n"
"> > директорії. Відповіді 2 та 4 обидві відновлюють *останню* версію * в репозиторії * файлу\n"
"> > `data_cruncher.py`. Відповідь 2 використовує `HEAD` щоб вказати *останній* коміт, тоді як відповідь 4 використовує \n"
"> > унікальний ID останнього коміту, що саме і означає `HEAD`. \n"
"> > \n"
"> > Відповідь 3 замінить `data_cruncher.py` його версією з коміту *перед* `HEAD`, що НЕ є\n"
"> > тим, що ми хотіли.\n"
"> > \n"
"> > Відповідь 1 може бути небезпечною! Без назви файлу, `git checkout` відновить **всі файли** \n"
"> > у поточній директорії (і її піддиректоріях) до їх стану згідно із вказаним комітом. \n"
"> > Ця команда відновить `data_cruncher.py` до його останньої збереженої версії, але вона також \n"
"> > відновить *всі інші файли, які було змінено* на цю ж версію, стираючи будь-які зміни, які ви могли\n"
"> > внести до цих файлів!"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:391
msgid "> ## Reverting a Commit"
msgstr "> ## Скасування коміту"

#: git-novice/_episodes/05-history.md:392
msgid ""
">\n"
"> Jennifer is collaborating with colleagues on her Python script.  She\n"
"> realizes her last commit to the project's repository contained an error, and \n"
"> wants to undo it.  Jennifer wants to undo correctly so everyone in the project's\n"
"> repository gets the correct change. The command `git revert [erroneous commit ID]` will create a \n"
"> new commit that reverses the erroneous commit.  \n"
">    \n"
"> The command `git revert` is\n"
"> different from `git checkout [commit ID]` because `git checkout` returns the\n"
"> files not yet committed within the local repository to a previous state, whereas `git revert`\n"
"> reverses changes committed to the local and project repositories.   \n"
">   \n"
"> Below are the right steps and explanations for Jennifer to use `git revert`,\n"
"> what is the missing command?  \n"
"> 1. `________ # Look at the git history of the project to find the commit ID`\n"
">\n"
"> 2. Copy the ID (the first few characters of the ID, e.g. 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Type in the new commit message.\n"
">\n"
"> 5. Save and close\n"
"> \n"
"> \n"
"> > ## Solution\n"
"> > \n"
"> > The command `git log` lists project history with commit IDs.  \n"
"> > \n"
"> > The command `git show HEAD` shows changes made at the latest commit, and lists\n"
"> > the commit ID; however, Jennifer should double-check it is the correct commit, and no one\n"
"> > else has committed changes to the repository."
msgstr ""
">\n"
"> Дженніфер співпрацює з колегами над її скриптом Python. Вона\n"
"> зрозуміла, що її останній коміт до репозиторію проєкту містив помилку, і \n"
"> хоче його скасувати. Дженніфер хоче скасувати його правильним чином, щоб всі користувачі репозиторію цього проєкту\n"
"> отримали правильні зміни. Команда `git revert [erroneous commit ID]` створить \n"
"> новий коміт, який скасує помилковий коміт\n"
">    \n"
"> Команда `git revert`\n"
"> відрізняється від `git checkout [commit ID]`, оскільки `git checkout` повертає\n"
"> файли, зміни у яких ще не ввійшли до нового коміту у локальному репозиторїї, до їх попереднього стану, тоді як `git revert`\n"
"> скасовує зміни, які вже внесені до локальних та віддалених репозиторіїв.\n"
">   \n"
"> Нижче наведені правильні кроки і пояснення для Дженніфер щодо користування `git revert`.\n"
"> Яка команда відсутня?  \n"
"> 1. `________ # Подивіться на історію змін, щоб знайти ідентифікатор коміту`\n"
">\n"
"> 2. Скопіюйте цей ID (перші кілька символів ID, наприклад 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Введіть нове повідомлення коміту.\n"
">\n"
"> 5. Збережіть його та закрийте редактор.\n"
"> \n"
"> \n"
"> > ## Відповідь\n"
"> > \n"
"> > Команда `git log` відображає історію проєкту з ідентифікаторами комітів.  \n"
"> > \n"
"> > Команда `git show HEAD` покаже зміни, зроблені у останньому коміті, і відобразить\n"
"> > його ID; однак Дженніфер повинна перевірити, що це правильний коміт, і більше ніхто\n"
"> > не вніс змін до репозиторію."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:427
msgid "> ## Understanding Workflow and History"
msgstr "> ## Розуміння послідовності дій та історії"

#: git-novice/_episodes/05-history.md:428
msgid ""
">\n"
"> What is the output of the last command in\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #this will print the contents of venus.txt to the screen\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. ~~~\n"
">    Venus is too hot to be suitable as a base\n"
">    ~~~"
msgstr ""
">\n"
"> Який результат останньої команди в цій послідовності\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #this will print the contents of venus.txt to the screen\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. ~~~\n"
">    Venus is too hot to be suitable as a base\n"
">    ~~~"

# SC/DC Template label
#: git-novice/_episodes/05-history.md:445
#: git-novice/_episodes/05-history.md:449
#: git-novice/_episodes/05-history.md:454
#: git-novice/_episodes/05-history.md:458
msgid ">    {: .output}"
msgstr ">    {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:446
msgid "> 2. ~~~"
msgstr "> 2. ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:447
#: git-novice/_episodes/05-history.md:451
msgid ">    Venus is beautiful and full of love"
msgstr ">    Venus is beautiful and full of love"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:448
#: git-novice/_episodes/05-history.md:453
#: git-novice/_episodes/05-history.md:457
msgid ">    ~~~"
msgstr ">    ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:450
msgid "> 3. ~~~"
msgstr "> 3. ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:452
msgid ">    Venus is too hot to be suitable as a base"
msgstr ">    Venus is too hot to be suitable as a base"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:455
msgid "> 4. ~~~"
msgstr "> 4. ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:456
msgid ""
">    Error because you have changed venus.txt without committing the changes"
msgstr ""
">    Помилка, тому що ви змінили venus.txt, але після цього не зберегли ці "
"зміни у коміті"

#: git-novice/_episodes/05-history.md:459
msgid ""
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answer is 2. \n"
"> > \n"
"> > The command `git add venus.txt` places the current version of `venus.txt` into the staging area. \n"
"> > The changes to the file from the second `echo` command are only applied to the working copy, \n"
"> > not the version in the staging area.\n"
"> > \n"
"> > So, when `git commit -m \"Comment on Venus as an unsuitable base\"` is executed, \n"
"> > the version of `venus.txt` committed to the repository is the one from the staging area and\n"
"> > has only one line.\n"
"> >  \n"
"> >  At this time, the working copy still has the second line (and \n"
"> >  `git status` will show that the file is modified). However, `git checkout HEAD venus.txt` \n"
"> >  replaces the working copy with the most recently committed version of `venus.txt`.\n"
"> >  \n"
"> >  So, `cat venus.txt` will output \n"
"> >  ~~~\n"
"> >  Venus is beautiful and full of love.\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Правильною є відповідь 2. \n"
"> > \n"
"> > Команда `git add venus.txt` розміщує поточну версію 'venus.txt' в зоні стейджингу. \n"
"> > Зміни до файлу з другої команди `echo` будуть зроблені лише у робочій копії цього файлу, \n"
"> > але не у його версії в зоні стейджингу.\n"
"> > \n"
"> > Тож, коли виконується команда `git commit -m \"Comment on Venus as an unsuitable base\"`, \n"
"> > версія `venus.txt`, яка буде збережена у коміті, буде з зони стейджингу та\n"
"> > буде мати тільки один рядок.\n"
"> >  \n"
"> >  На цей час робоча копія файлу ще має другий рядок (і тому \n"
"> >  `git status` покаже, що файл змінено). Однак `git checkout HEAD venus.txt` \n"
"> >  замінить робочу копію останньою збереженою версією `venus.txt`.\n"
"> >  \n"
"> >  Тож, `cat venus.txt` покаже \n"
"> >  ~~~\n"
"> >  Venus is beautiful and full of love.\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:484
msgid "> ## Checking Understanding of `git diff`"
msgstr "> ## Перевірка розуміння `git diff`"

#: git-novice/_episodes/05-history.md:485
msgid ""
">\n"
"> Consider this command: `git diff HEAD~9 mars.txt`. What do you predict this command\n"
"> will do if you execute it? What happens when you do execute it? Why?\n"
">\n"
"> Try another command, `git diff [ID] mars.txt`, where [ID] is replaced with\n"
"> the unique identifier for your most recent commit. What do you think will happen,\n"
"> and what does happen?"
msgstr ""
">\n"
"> Подивіться на цю команду: `git diff HEAD~9 mars.txt`. Як ви думаєте,\n"
"> що робить ця команда? Що відбувається, коли ви запускаєте її? Чому?\n"
">\n"
"> Спробуйте іншу команду, `git diff [ID] mars.txt`, де [ID] замінюється на\n"
"> унікальний ідентифікатор вашого останнього коміту. Як ви думаєте, що вона зробить?\n"
"> Запустіть її та перевіірте, чи це так."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:494
msgid "> ## Getting Rid of Staged Changes"
msgstr "> ## Скасування змін у зоні стейджингу"

#: git-novice/_episodes/05-history.md:495
msgid ""
">\n"
"> `git checkout` can be used to restore a previous commit when unstaged changes have\n"
"> been made, but will it also work for changes that have been staged but not committed?\n"
"> Make a change to `mars.txt`, add that change, and use `git checkout` to see if\n"
"> you can remove your change."
msgstr ""
">\n"
"> Команда `git checkout` може бути використана для відновлення попереднього коміту, коли зміни\n"
"> були зроблені, але ще не додані до зони стейджингу).\n"
"> Чи спрацює вона і для змін, які були додані до зони стейджингу, але не ще збережені у коміті?\n"
"> Зробіть зміни у `mars.txt`, додайте їх до зони стейджингу з `git add`, та використайте `git checkout` щоб побачити чи\n"
"> можете ви скасувати свої зміни."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:502
msgid "> ## Explore and Summarize Histories"
msgstr "> ## Перегляд історії"

#: git-novice/_episodes/05-history.md:503
msgid ""
">\n"
"> Exploring history is an important part of Git, and often it is a challenge to find\n"
"> the right commit ID, especially if the commit is from several months ago.\n"
">\n"
"> Imagine the `planets` project has more than 50 files.\n"
"> You would like to find a commit that modifies some specific text in `mars.txt`.\n"
"> When you type `git log`, a very long list appeared.\n"
"> How can you narrow down the search?\n"
">\n"
"> Recall that the `git diff` command allows us to explore one specific file,\n"
"> e.g., `git diff mars.txt`. We can apply a similar idea here.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Unfortunately some of these commit messages are very ambiguous, e.g., `update files`.\n"
"> How can you search through these files?\n"
">\n"
"> Both `git diff` and `git log` are very useful and they summarize a different part of the history \n"
"> for you.\n"
"> Is it possible to combine both? Let's try the following:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> You should get a long list of output, and you should be able to see both commit messages and \n"
"> the difference between each commit.\n"
">\n"
"> Question: What does the following command do?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~9 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Перегляд історії є важливою частиною роботи з Git, але часто нелегко знайти\n"
"> правильний ID коміту, особливо якщо коміт був зроблений декілька місяців тому.\n"
">\n"
"> Уявіть, що проект `planets` має більш ніж 50 файлів.\n"
"> Ви хотіли б знайти коміт, який змінює певний текст у `mars.txt`.\n"
"> Коли ви вводите `git log`, з'являється дуже довгий список.\n"
"> Як можна звузити пошук?\n"
">\n"
"> Нагадаємо, що команда `git diff` може використовуватись для одного конкретного файлу,\n"
"> наприклад, `git diff mars.txt`. Подібну ідею ми можемо застосувати тут.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> На жаль, деякі з цих повідомлень комітів дуже неоднозначні, наприклад, `update files`.\n"
"> Як же перевірити усі ці версії файлу?\n"
">\n"
"> Обидві `git diff` та `git log` дуже корисні для отримання звітів про різні деталі історії проекту.\n"
"> Чи можна об'єднати їх результат у одну команду? Спробуємо наступне:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Ви повинні отримати довгий список, у якому ви побачите s повідомлення коміту, і зроблені зміни.\n"
">\n"
"> Питання: Що робить наступна команда?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~9 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"

# Front Matter
#: git-novice/_episodes/06-ignore.md:1
msgid ""
"---\n"
"title: Ignoring Things\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I tell Git to ignore files I don't want to track?\"\n"
"objectives:\n"
"- \"Configure Git to ignore specific files.\"\n"
"- \"Explain why ignoring files can be useful.\"\n"
"keypoints:\n"
"- \"The `.gitignore` file tells Git what files to ignore.\"\n"
"---"
msgstr ""
"---\n"
"title: Ігнорування файлів\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"Як зробити щоб Git ігнорував файли, які я не хочу відстежувати?\"\n"
"objectives:\n"
"- \"Налаштувати Git для ігнорування певних файлів.\"\n"
"- \"Зрозуміти чому ігнорування файлів може бути корисним.\"\n"
"keypoints:\n"
"- \"Файл `.gitignore` інформує Git про те, які файли треба ігнорувати.\"\n"
"---"

#: git-novice/_episodes/06-ignore.md:14
msgid ""
"What if we have files that we do not want Git to track for us,\n"
"like backup files created by our editor\n"
"or intermediate files created during data analysis?\n"
"Let's create a few dummy files:"
msgstr ""
"Що робити, якщо у нас є файли, які ми не хочемо відстежувати у Git,\n"
"наприклад, резервні файли, створені нашим редактором\n"
"або проміжні файли, створені під час аналізу даних?\n"
"Давайте створимо кілька фіктивних файлів:"

# code block
#: git-novice/_episodes/06-ignore.md:19
msgid ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:25
msgid "and see what Git says:"
msgstr "і подивимося що скаже Git:"

# code block
#: git-novice/_episodes/06-ignore.md:32
msgid ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:46
msgid ""
"Putting these files under version control would be a waste of disk space.\n"
"What's worse,\n"
"having them all listed could distract us from changes that actually matter,\n"
"so let's tell Git to ignore them."
msgstr ""
"Відстеження цих файлів за допомогою контролю версій буде марною тратою дискового простору.\n"
"Що гірше,\n"
"висвітлення змін в них, під час перегляду історії або статусу проєкту може відвернути нас від змін, які насправді мають значення,\n"
"тож давайте скажемо Git, що їх треба ігнорувати."

#: git-novice/_episodes/06-ignore.md:51
msgid ""
"We do this by creating a file in the root directory of our project called "
"`.gitignore`:"
msgstr ""
"Ми можемо зробити це, створюючи у кореневій директорії нашого проєкту файл "
"під назвою `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:53
msgid ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:59
msgid ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"
msgstr ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:65
msgid ""
"These patterns tell Git to ignore any file whose name ends in `.dat`\n"
"and everything in the `results` directory.\n"
"(If any of these files were already being tracked,\n"
"Git would continue to track them.)"
msgstr ""
"Цей синтакс наказує Git ігнорувати будь-який файл, ім'я якого закінчується на `.dat`\n"
"та все, що знаходиться у директорії `results`.\n"
"(Якщо будь-які з цих файлів вже відстежуються,\n"
"Git продовжить їх відстежувати.)"

#: git-novice/_episodes/06-ignore.md:70
msgid ""
"Once we have created this file,\n"
"the output of `git status` is much cleaner:"
msgstr ""
"Як тільки ми створили цей файл,\n"
"результат `git status` стає набагато зрозумілішим:"

# code block
#: git-novice/_episodes/06-ignore.md:78
msgid ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:89
msgid ""
"The only thing Git notices now is the newly-created `.gitignore` file.\n"
"You might think we wouldn't want to track it,\n"
"but everyone we're sharing our repository with will probably want to ignore\n"
"the same things that we're ignoring.\n"
"Let's add and commit `.gitignore`:"
msgstr ""
"Єдина річ, яку Git помічає зараз - це новостворений файл `.gitignore`.\n"
"Ви можете подумати, що ми не хотіли б відстежувати його,\n"
"але всі, з ким ми ділимося нашим репозиторієм, ймовірно, захочуть ігнорувати\n"
"те ж саме, що ми ігноруємо.\n"
"Давайте додамо до репозиторію та зробимо коміт файлу `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:95
msgid ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:108
msgid ""
"As a bonus, using `.gitignore` helps us avoid accidentally adding files to "
"the repository that we don't want to track:"
msgstr ""
"Як бонус, використання `.gitignore` допомагає нам уникнути випадкового "
"додавання до репозиторію файлів, які ми не хочемо відстежувати:"

# code block
#: git-novice/_episodes/06-ignore.md:110
msgid ""
"~~~\n"
"$ git add a.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add a.dat\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:115
msgid ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"
msgstr ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:122
msgid ""
"If we really want to override our ignore settings,\n"
"we can use `git add -f` to force Git to add something. For example,\n"
"`git add -f a.dat`.\n"
"We can also always see the status of ignored files if we want:"
msgstr ""
"Якщо ми дійсно хочемо змінити наші налаштування ігнорування,\n"
"ми можемо використати `git add -f`, щоб змусити Git додати щось. Наприклад,\n"
"`git add -f a.dat`.\n"
"Ми також завжди можемо бачити статус ігнорованих файлів, якщо хочемо:"

# code block
#: git-novice/_episodes/06-ignore.md:127
msgid ""
"~~~\n"
"$ git status --ignored\n"
"~~~"
msgstr ""
"~~~\n"
"$ git status --ignored\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:132
msgid ""
"~~~\n"
"On branch main\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working tree clean\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working tree clean\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:146
msgid "> ## Ignoring Nested Files"
msgstr "> ## Ігнорування файлів у піддиректоріях"

#: git-novice/_episodes/06-ignore.md:147
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore only `results/plots` and not `results/data`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If you only want to ignore the contents of\n"
"> > `results/plots`, you can change your `.gitignore` to ignore\n"
"> > only the `/plots/` subfolder by adding the following line to\n"
"> > your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > results/plots/\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > This line will ensure only the contents of `results/plots` is ignored, and\n"
"> > not the contents of `results/data`.\n"
"> >\n"
"> > As with most programming issues, there\n"
"> > are a few alternative ways that one may ensure this ignore rule is followed.\n"
"> > The \"Ignoring Nested Files: Variation\" exercise has a slightly\n"
"> > different directory structure\n"
"> > that presents an alternative solution.\n"
"> > Further, the discussion page has more detail on ignore rules."
msgstr ""
">\n"
"> Враховуючи структуру директорій, яка виглядає як:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> як зробити так, щоб Git ігнорував тільки `results/plots`, а не `results/data`?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Якщо ви тільки хочете ігнорувати вміст\n"
"> > `results/plots`, ви можете зробити це\n"
"> > шляхом додавання наступного рядка до\n"
"> > вашого .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > results/plots/\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Цей рядок забезпечить ігнорування лише вмісту `results/plots`, але \n"
"> > не вмісту `results/data`.\n"
"> >\n"
"> > Як і в більшості питань програмування,\n"
"> > є ще кілька альтернативних способів, які можуть забезпечити виконання цього правила ігнорування.\n"
"> > Вправа «Варіант ігнорування вкладених файлів» має трохи\n"
"> > іншу структуру директорій,\n"
"> > та пояснює альтернативне рішення.\n"
"> > Крім того, сторінка обговорення має більш детальну інформацію про правила ігнорування."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:182
msgid "> ## Including Specific Files"
msgstr "> ## Додавання конкретних файлів"

#: git-novice/_episodes/06-ignore.md:183
msgid ""
">\n"
"> How would you ignore all `.dat` files in your root directory except for\n"
"> `final.dat`?\n"
"> Hint: Find out what `!` (the exclamation point operator) does\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > You would add the following two lines to your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat           # ignore all data files\n"
"> > !final.dat      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The exclamation point operator will include a previously excluded entry.\n"
"> >\n"
"> > Note also that because you've previously committed `.dat` files in this\n"
"> > lesson they will not be ignored with this new rule. Only future additions\n"
"> > of `.dat` files added to the root directory will be ignored."
msgstr ""
">\n"
"> Як ігнорувати всі файли `.dat` у кореневій директорії, за вийнятком\n"
"> `final.dat`?\n"
"> Підказка: Дізнайтеся, що робить «!» (оператор знаку оклику)\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Треба додати наступні два рядки до вашого файлу `.gitignore`:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat           # ignore all data files\n"
"> > !final.dat      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Оператор знаку оклику призведе до включення раніше виключеного запису.\n"
"> >\n"
"> > Зверніть увагу також на те, що, оскільки ви раніше вже зберегли файли `.dat` у комітах зроблених в цьому\n"
"> > уроці, вони не будуть проігноровані з цим новим правилом. Тільки майбутні додавання \n"
"> > `.dat` файлів до кореневої директорії будуть проігноровані."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:206
msgid "> ## Ignoring Nested Files: Variation"
msgstr "> ## Варіант ігнорування вкладених файлів"

#: git-novice/_episodes/06-ignore.md:207
msgid ""
">\n"
"> Given a directory structure that looks similar to the earlier Nested Files\n"
"> exercise, but with a slightly different directory structure:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/images\n"
"> results/plots\n"
"> results/analysis\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore all of the contents in the results folder, but not `results/data`?\n"
">\n"
"> Hint: think a bit about how you created an exception with the `!` operator\n"
"> before.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If you want to ignore the contents of\n"
"> > `results/` but not those of `results/data/`, you can change your `.gitignore` to ignore\n"
"> > the contents of results folder, but create an exception for the contents of the\n"
"> > `results/data` subfolder. Your .gitignore would look like this:\n"
"> >\n"
"> > ~~~\n"
"> > results/*               # ignore everything in results folder\n"
"> > !results/data/          # do not ignore results/data/ contents\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Нехай ми маємо структуру каталогів, яка схожа на попередню вправу \"Ігнорування файлів у піддиректоріях\",\n"
"> проте, з трішки іншою структурою директорій:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/images\n"
"> results/plots\n"
"> results/analysis\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Як би ви проігнорували весь вміст у папці `results`, окрім `results/data`?\n"
">\n"
"> Підказка: подумайте трохи про те, як ви попередньо створили виняток\n"
"> за допомогою оператору `!`.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Якщо ви хочете ігнорувати вміст\n"
"> > `results/` але не `results/data/`, ви можете змінити ваш`.gitignore`, щоб ігнорувати\n"
"> > вміст папки `results`, але створити виняток для вмісту\n"
"> > підпапки `results/data`. Ваш `.gitignore` буде виглядати так:\n"
"> >\n"
"> > ~~~\n"
"> > results/*               # ignore everything in results folder\n"
"> > !results/data/          # do not ignore results/data/ contents\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:239
msgid "> ## Ignoring all data Files in a Directory"
msgstr "> ## Ігнорування всіх Файлів даних у Директорії"

#: git-novice/_episodes/06-ignore.md:240
msgid ""
">\n"
"> Assuming you have an empty .gitignore file, and given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.dat\n"
"> results/data/position/gps/b.dat\n"
"> results/data/position/gps/c.dat\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What's the shortest `.gitignore` rule you could write to ignore all `.dat`\n"
"> files in `result/data/position/gps`? Do not ignore the `info.txt`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Appending `results/data/position/gps/*.dat` will match every file in `results/data/position/gps`\n"
"> > that ends with `.dat`.\n"
"> > The file `results/data/position/gps/info.txt` will not be ignored."
msgstr ""
">\n"
"> Припустимо, що у вас порожній .gitignore файл, і дано структуру каталогів, яка виглядає як:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.dat\n"
"> results/data/position/gps/b.dat\n"
"> results/data/position/gps/c.dat\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Яке найкоротше правило `.gitignore` ви можете написати, щоб ігнорувати файли `.dat`\n"
"> в `result/data/position/gps`? Не ігноруйте `info.txt`.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Додавання `results/data/position/gps/*.dat` буде відповідати кожному з файлів у `results/data/position/gps`,\n"
"> > які закінчуються на `.dat`.\n"
"> > Файл `results/data/position/gps/info.txt` не буде проігноровано."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:263
msgid "> ## Ignoring all data Files in the repository"
msgstr "> ## Ігнорування всіх файлів з даними у репозиторії"

#: git-novice/_episodes/06-ignore.md:264
msgid ""
">\n"
"> Let us assume you have many `.dat` files in different subdirectories of your repository.\n"
"> For example, you might have:\n"
"> \n"
"> ~~~\n"
"> results/a.dat\n"
"> data/experiment_1/b.dat\n"
"> data/experiment_2/c.dat\n"
"> data/experiment_2/variation_1/d.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> How do you ignore all the `.dat` files, without explicitly listing the names of the corresponding folders?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > In the `.gitignore` file, write:\n"
"> > \n"
"> > ~~~\n"
"> > **/*.dat               \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > This will ignore all the `.dat` files, regardless of their position in the directory tree. \n"
"> > You can still include some specific exception with the exclamation point operator."
msgstr ""
">\n"
"> Припустимо, що у вас є багато файлів «.dat» в різних піддиректоріях вашого репозиторію.\n"
"> Наприклад, у вас є:\n"
"> \n"
"> ~~~\n"
"> results/a.dat\n"
"> data/experiment_1/b.dat\n"
"> data/experiment_2/c.dat\n"
"> data/experiment_2/variation_1/d.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> Як ігнорувати всі файли «.dat», не вказуючи явно імена усіх відповідних папок?\n"
"> \n"
"> > ## Відповідь\n"
"> >\n"
"> > У файлі `.gitignore` напишіть:\n"
"> > \n"
"> > ~~~\n"
"> > **/*.dat               \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Це ігноруватиме всі файли `.dat`, незалежно від їх позиції у дереві директорій. \n"
"> > Ви все ще можете робити певні винятки з цього правила за допомогою знаку оклику."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:292
msgid "> ## The Order of Rules"
msgstr "> ## Порядок застосування правил"

#: git-novice/_episodes/06-ignore.md:293
msgid ""
">\n"
"> Given a `.gitignore` file with the following contents:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> !*.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What will be the result?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The `!` modifier will negate an entry from a previously defined ignore pattern.\n"
"> > Because the `!*.dat` entry negates all of the previous `.dat` files in the `.gitignore`,\n"
"> > none of them will be ignored, and all `.dat` files will be tracked."
msgstr ""
">\n"
"> Нехай дано файл `.gitignore` з наступним вмістом:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> !*.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Яким буде результат?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Модифікатор `!` скасує запис з раніше визначеного шаблону ігнорування.\n"
"> > Оскільки запис `! *.dat` скасовує всі попередні файли `.dat` в `.gitignore`,\n"
"> > жоден з них не буде проігноровано, і всі файли `.dat` будуть відслідковуватися."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:312
msgid "> ## Log Files"
msgstr "> ## Log-файли "

#: git-novice/_episodes/06-ignore.md:313
msgid ""
">\n"
"> You wrote a script that creates many intermediate log-files of the form `log_01`, `log_02`, `log_03`, etc.\n"
"> You want to keep them but you do not want to track them through `git`.\n"
">\n"
"> 1. Write **one** `.gitignore` entry that excludes files of the form `log_01`, `log_02`, etc.\n"
">\n"
"> 2. Test your \"ignore pattern\" by creating some dummy files of the form `log_01`, etc.\n"
">\n"
"> 3. You find that the file `log_01` is very important after all, add it to the tracked files without changing the `.gitignore` again.\n"
">\n"
"> 4. Discuss with your neighbor what other types of files could reside in your directory that you do not want to track and thus would exclude via `.gitignore`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. append either `log_*`  or  `log*`  as a new entry in your .gitignore\n"
"> > 3. track `log_01` using   `git add -f log_01`"
msgstr ""
">\n"
"> Ви написали скрипт, який створює багато проміжних log-файлів з назвами `log_01`, `log_02`, `log_03`, т.д.\n"
"> Ви хочете зберегти їх, але ви не хочете відстежувати їх через `git`.\n"
">\n"
"> 1. Напишіть **один** `.gitignore` запис, що виключає файли форми `log_01`, `log_02`, т.д.\n"
">\n"
"> 2. Перевірте свій \"шаблон ігнорування\", створивши деякі фіктивні файли з назвою `log_01`, т.д.\n"
">\n"
"> 3. Уявіть, що файл `log_01` дуже важливий, та додайте його до вдслідковуваних файлів, не змінюючи `.gitignore`.\n"
">\n"
"> 4. Обговоріть з сусідом, які інші типи файлів можуть перебувати у вашому проєкті, які ви не бажаєте відслідковувати і тому бажаєте проігнорувати їх з `.gitignore`.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > 1. додайте або `log_*`  або  `log*`  як новий запис у вашому `.gitignore`\n"
"> > 3. відстежте `log_01`, використовуючи `git add -f log_01`"

# Front Matter
#: git-novice/_episodes/07-github.md:1
msgid ""
"---\n"
"title: Remotes in GitHub\n"
"teaching: 45\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I share my changes with others on the web?\"\n"
"objectives:\n"
"- \"Explain what remote repositories are and why they are useful.\"\n"
"- \"Push to or pull from a remote repository.\"\n"
"keypoints:\n"
"- \"A local Git repository can be connected to one or more remote repositories.\"\n"
"- \"Use the SSH protocol to connect to remote repositories.\"\n"
"- \"`git push` copies changes from a local repository to a remote repository.\"\n"
"- \"`git pull` copies changes from a remote repository to a local repository.\"\n"
"---"
msgstr ""
"---\n"
"title: Віддалені сховища в GitHub\n"
"teaching: 45\n"
"exercises: 0\n"
"questions:\n"
"- \"Як поділитися своїми змінами з іншими в мережі?\"\n"
"objectives:\n"
"- \"Пояснення, що таке віддалені репозиторії і чому вони корисні.\"\n"
"- \"Відправляти зміни до віддаленого репозиторію або отрмимувати зміни з нього.\"\n"
"keypoints:\n"
"- \"Локальний репозиторій Git можна підключити до одного або декількох віддалених репозиторіїв.\"\n"
"- \"Використання протоколу SSH для підключення до віддалених репозиторіїв.\"\n"
"- \"`git push` копіює зміни з локального репозиторію до віддаленого репозиторію.\"\n"
"- \"`git pull` копіює зміни з віддаленого репозиторію в локальний репозиторій.\"\n"
"---"

#: git-novice/_episodes/07-github.md:17
msgid ""
"Version control really comes into its own when we begin to collaborate with\n"
"other people.  We already have most of the machinery we need to do this; the\n"
"only thing missing is to copy changes from one repository to another."
msgstr ""
"Контроль версій дійсно вступає в свою силу, коли ми починаємо співпрацювати з\n"
"іншими людьми. У нас вже є велика частина техніки, яка нам потрібна для цього;\n"
"єдине, чого не вистачає - копіювати зміни з одного репозиторію в інший."

#: git-novice/_episodes/07-github.md:21
msgid ""
"Systems like Git allow us to move work between any two repositories.  In\n"
"practice, though, it's easiest to use one copy as a central hub, and to keep it\n"
"on the web rather than on someone's laptop.  Most programmers use hosting\n"
"services like [GitHub](https://github.com), [Bitbucket](https://bitbucket.org) or\n"
"[GitLab](https://gitlab.com/) to hold those main copies; we'll explore the pros\n"
"and cons of this in a later episode."
msgstr ""
"Такі системи, як Git, дозволяють переміщати роботу між будь-якими двома репозиторіями.\n"
"Однак, практично найпростіше використовувати одну копію в якості центрального вузла, і зберегти його\n"
"в мережі, аніж на чиємусь ноутбуці. Багато програмістів використовують хостинг сервіси, такі як\n"
"[GitHub](https://github.com), [Bitbucket](https://bitbucket.org) або\n"
"[GitLab](https://gitlab.com/) щоб зберігати основні копії; ми вивчимо плюси\n"
"та мінуси цього в іншому епізоді."

#: git-novice/_episodes/07-github.md:28
msgid ""
"Let's start by sharing the changes we've made to our current project with the\n"
"world. To this end we are going to create a *remote* repository that will be linked to our *local* repository."
msgstr ""
"Почнемо з обміну змінами, які ми внесли до нашого поточного проєкту зі\n"
"світом. З цією метою ми збираємося створити *віддалений* репозиторій, який буде пов'язаний з нашим *локальним* репозиторієм."

# header
#: git-novice/_episodes/07-github.md:31
msgid "## 1. Create a remote repository"
msgstr "## 1. Створіть віддалений репозиторій"

#: git-novice/_episodes/07-github.md:32
msgid ""
"Log in to [GitHub](https://github.com), then click on the icon in the top right corner to\n"
"create a new repository called `planets`:"
msgstr ""
"Увійдіть до [GitHub](https://github.com), потім натисніть на значок у верхньому правому куті, щоб\n"
"створити новий репозиторій під назвою `planets`:"

#: git-novice/_episodes/07-github.md:35
msgid ""
"![Creating a Repository on GitHub (Step 1)]({{ site.baseurl }}/fig/github-create-"
"repo-01.png)"
msgstr ""
"![Створення репозиторію у GitHub (Крок 1)]({{ site.baseurl }}/fig/github-create-repo-01.png)"

#: git-novice/_episodes/07-github.md:37
msgid "Name your repository \"planets\" and then click \"Create Repository\"."
msgstr ""
"Назвіть ваш репозиторій \"planets\" і потім натисніть на \"Create "
"Repository\"."

#: git-novice/_episodes/07-github.md:39
msgid ""
"Note: Since this repository will be connected to a local repository, it needs to be empty. Leave \n"
"\"Initialize this repository with a README\" unchecked, and keep \"None\" as options for both \"Add \n"
".gitignore\" and \"Add a license.\" See the \"GitHub License and README files\" exercise below for a full \n"
"explanation of why the repository needs to be empty."
msgstr ""
"Зауважте: Оскільки цей репозиторій буде підʼєднано до локального репозиторію, він має бути порожнім. Залиште \n"
"\"Initialize this repository with a README\" непозначеним, та залиште \"None\" як опції для обох \"Add \n"
".gitignore\" та \"Add a license.\" Ознайомтеся із вправою \"GitHub License and README files\" нижче для повного\n"
"пояснення чому репозиторій повинен бути порожнім."

#: git-novice/_episodes/07-github.md:44
msgid ""
"![Creating a Repository on GitHub (Step 2)]({{ site.baseurl }}/fig/github-create-"
"repo-02.png)"
msgstr ""
"![Створення репозиторію у GitHub (Крок 2)]({{ site.baseurl }}/fig/github-create-repo-02.png)"

#: git-novice/_episodes/07-github.md:46
msgid ""
"As soon as the repository is created, GitHub displays a page with a URL and some\n"
"information on how to configure your local repository:"
msgstr ""
"Як тільки репозиторій створено, GitHub відображає сторінку з URL і певною\n"
"інформацією про те, як налаштувати локальний репозиторій:"

#: git-novice/_episodes/07-github.md:49
msgid ""
"![Creating a Repository on GitHub (Step 3)]({{ site.baseurl }}/fig/github-create-"
"repo-03.png)"
msgstr ""
"![Створення репозиторію у GitHub (Крок 3)]({{ site.baseurl }}/fig/github-create-repo-03.png)"

#: git-novice/_episodes/07-github.md:51
msgid "This effectively does the following on GitHub's servers:"
msgstr "Це ефективно робить наступне на серверах GitHub:"

# code block
#: git-novice/_episodes/07-github.md:53
msgid ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"$ git init\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"$ git init\n"
"~~~"

#: git-novice/_episodes/07-github.md:60
msgid ""
"If you remember back to the earlier [episode](../04-changes/) where we added and\n"
"committed our earlier work on `mars.txt`, we had a diagram of the local repository\n"
"which looked like this:"
msgstr ""
"Якщо ви пам'ятаєте, у одному з попередніх [епізодів](../04-changes/), де ми додавали та\n"
"зберігали нашу попередню роботу над `mars.txt`, в нас була діаграма, яка зображувала локальний репозиторій,\n"
"та виглядала так:"

#: git-novice/_episodes/07-github.md:64
msgid ""
"![The Local Repository with Git Staging Area]({{ site.baseurl }}/fig/git-staging-area.svg)"
msgstr ""
"![Локальний репозиторій із зоною стейджингу]({{ site.baseurl }}/fig/git-staging-area.svg)"

#: git-novice/_episodes/07-github.md:66
msgid "Now that we have two repositories, we need a diagram like this:"
msgstr "Тепер, коли ми маємо два репозиторії, нам потрібна така діаграма:"

#: git-novice/_episodes/07-github.md:68
msgid ""
"![Freshly-Made GitHub Repository]({{ site.baseurl }}/fig/git-freshly-made-github-repo.svg)"
msgstr ""
"![Freshly-Made GitHub Repository]({{ site.baseurl }}/fig/git-freshly-made-github-repo.svg)"

#: git-novice/_episodes/07-github.md:70
msgid ""
"Note that our local repository still contains our earlier work on `mars.txt`, but the\n"
"remote repository on GitHub appears empty as it doesn't contain any files yet."
msgstr ""
"Зауважте, що наш локальний репозиторій все ще містить нашу попередню роботу над `mars.txt`, але\n"
"віддалений репозиторій на GitHub зображується порожнім, оскільки він ще не містить жодних файлів."

# header
#: git-novice/_episodes/07-github.md:73
msgid "## 2. Connect local to remote repository"
msgstr "## 2. Підʼєднання локального репозиторію до віддаленого"

#: git-novice/_episodes/07-github.md:74
msgid ""
"Now we connect the two repositories.  We do this by making the\n"
"GitHub repository a [remote]({{ page.root}}{% link reference.md %}#remote) for the local repository.\n"
"The home page of the repository on GitHub includes the URL string we need to\n"
"identify it:"
msgstr ""
"Тепер підключаємо два сховища. Ми можемо це зробити за допомогою\n"
"GitHub репозиторію [remote]({{ page.root}}{% link reference.md %}#remote) для локального репозиторію.\n"
"Домашня сторінка репозиторію на GitHub включає рядок URL, який нам потрібен\n"
"щоб ідентифікувати його:"

#: git-novice/_episodes/07-github.md:79
msgid ""
"![Where to Find Repository URL on GitHub]({{ site.baseurl }}/fig/github-find-repo-"
"string.png)"
msgstr ""
"![Where to Find Repository URL on GitHub]({{ site.baseurl }}/fig/github-find-repo-"
"string.png)"

#: git-novice/_episodes/07-github.md:81
msgid ""
"Click on the 'SSH' link to change the [protocol]({{ page.root }}{% link "
"reference.md %}#protocol) from HTTPS to SSH."
msgstr ""
"Натисніть на посилання 'SSH', щоб змінити [protocol]({{ page.root }}{% link "
"reference.md %}#protocol) від HTTPS до SSH."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:83
msgid "> ## HTTPS vs. SSH"
msgstr "> ## HTTPS в порівнянні з SSH"

#: git-novice/_episodes/07-github.md:84
msgid ""
">\n"
"> We use SSH here because, while it requires some additional configuration, it is a \n"
"> security protocol widely used by many applications.  The steps below describe SSH at a \n"
"> minimum level for GitHub. A supplemental episode to this lesson discusses advanced setup \n"
"> and concepts of SSH and key pairs, and other material supplemental to git related SSH. "
msgstr ""
">\n"
"> Ми тут використовуємо SSH тому що, поки він вимагає додаткову конфігурацію, це \n"
"> протокол безпеки, який широко використовується багатьма програмами.  Кроки нижче описують SSH на \n"
"> мінімальному рівні GitHub. Додатковий епізод до цього уроку обговорює розширені налаштування \n"
"> і концепції SSH і пари ключів, а також інші матеріали, що доповнюють git пов'язані SSH. "

#: git-novice/_episodes/07-github.md:91
msgid ""
"![Changing the Repository URL on GitHub]({{ site.baseurl }}/fig/github-change-repo-"
"string.png)"
msgstr ""
"![Changing the Repository URL on GitHub]({{ site.baseurl }}/fig/github-change-repo-"
"string.png)"

#: git-novice/_episodes/07-github.md:93
msgid ""
"Copy that URL from the browser, go into the local `planets` repository, and run\n"
"this command:"
msgstr ""
"Скопіюйте цю URL-адресу з браузера, зайдіть в локальне сховище `planets` репозиторію, та запустіть\n"
"цю команду:"

# code block
#: git-novice/_episodes/07-github.md:96
msgid ""
"~~~\n"
"$ git remote add origin git@github.com:vlad/planets.git\n"
"~~~"
msgstr ""
"~~~\n"
"$ git remote add origin git@github.com:vlad/planets.git\n"
"~~~"

#: git-novice/_episodes/07-github.md:101
msgid ""
"Make sure to use the URL for your repository rather than Vlad's: the only\n"
"difference should be your username instead of `vlad`."
msgstr ""
"Переконайтеся, що використовуєте URL-адресу для вашого сховища, а нет Vlad's: єдиною\n"
"відмінністю має бути ваше ім'я користувача замість `vlad`."

#: git-novice/_episodes/07-github.md:104
msgid ""
"`origin` is a local name used to refer to the remote repository. It could be called\n"
"anything, but `origin` is a convention that is often used by default in git\n"
"and GitHub, so it's helpful to stick with this unless there's a reason not to."
msgstr ""
"`origin` - локальна назва, що використовується для позначення віддаленого репозиторію. Його модна було б назвати\n"
"як завгодно, але `origin` - це конвенція, яка часто використовується за замовчуванням в git\n"
"та GitHub, так що корисно дотримуватися цього, якщо немає особливої причини змінювати."

#: git-novice/_episodes/07-github.md:108
msgid "We can check that the command has worked by running `git remote -v`:"
msgstr ""
"Ми можемо перевірити, що команда працювала, запустивши `git remote -v`:"

# code block
#: git-novice/_episodes/07-github.md:110
msgid ""
"~~~\n"
"$ git remote -v\n"
"~~~"
msgstr ""
"~~~\n"
"$ git remote -v\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:115
msgid ""
"~~~\n"
"origin   git@github.com:vlad/planets.git (fetch)\n"
"origin   git@github.com:vlad/planets.git (push)\n"
"~~~"
msgstr ""
"~~~\n"
"origin   git@github.com:vlad/planets.git (fetch)\n"
"origin   git@github.com:vlad/planets.git (push)\n"
"~~~"

#: git-novice/_episodes/07-github.md:121
msgid ""
"We'll discuss remotes in more detail in the next episode, while\n"
"talking about how they might be used for collaboration."
msgstr ""
"Більш детально ми обговоримо віддалені файли в наступному епізоді, поки поговоримо про те,\n"
"як вони можуть бути використані для співпраці."

# header
#: git-novice/_episodes/07-github.md:124
msgid "## 3. SSH Background and Setup"
msgstr "## 3. SSH Фон та Налаштування"

#: git-novice/_episodes/07-github.md:125
msgid ""
"Before Dracula can connect to a remote repository, he needs to set up a way "
"for his computer to authenticate with GitHub so it knows it’s him trying to "
"connect to his remote repository. "
msgstr ""
"Перед тим, як Dracula може під`єднатися до віддаленого репозиторію, йому "
"потрібно налаштувати спосіб автентифікації свого комп'ютера за допомогою "
"GitHub, щоб він знав, що це він намагається під`єднатися до його віддаленого"
" репозиторію. "

#: git-novice/_episodes/07-github.md:127
msgid ""
"We are going to set up the method that is commonly used by many different "
"services to authenticate access on the command line.  This method is called "
"Secure Shell Protocol (SSH).  SSH is a cryptographic network protocol that "
"allows secure communication between computers using an otherwise insecure "
"network.  "
msgstr ""
"Ми збираємося налаштувати метод, який зазвичай використовується багатьма "
"різними службами для автентифікації доступу в командному рядку. Цей метод "
"називається Secure Shell Protocol (SSH).  SSH це протокол криптографічної "
"мережі, який дозволяє безпечний зв'язок між комп'ютерами за допомогою "
"використання іншої небезпечної мережі.  "

#: git-novice/_episodes/07-github.md:129
msgid ""
"SSH uses what is called a key pair. This is two keys that work together to "
"validate access. One key is publicly known and called the public key, and "
"the other key called the private key is kept private. Very descriptive "
"names."
msgstr ""
"SSH використовує те, що називається ключовою парою. Це два ключі, які "
"працюють разом для перевірки доступу. Один ключ публічно відомий і "
"називається відкритим ключем, а інший - приватним ключем. Дуже описові "
"назви."

#: git-novice/_episodes/07-github.md:131
msgid ""
"You can think of the public key as a padlock, and only you have the key (the"
" private key) to open it. You use the public key where you want a secure "
"method of communication, such as your GitHub account.  You give this "
"padlock, or public key, to GitHub and say “lock the communications to my "
"account with this so that only computers that have my private key can unlock"
" communications and send git commands as my GitHub account.”  "
msgstr ""
"Ви можете думати про відкритий ключ як замок, і тільки у вас є ключ "
"(приватний ключ), щоб відчинити його. Ви використовуєте відкритий ключ, де "
"ви хочете безпечний спосіб зв'язку, наприклад, ваш GitHub акаунт.  Ви даєте "
"цей висячий замок або відкритий ключ GitHub і говорите: \"Заблокувати "
"повідомлення до мого облікового запису, так що тільки комп'ютери, які мають "
"мій закритий ключ можуть розблокувати зв'язок і відправити git команди, як "
"мій GitHub акаунт.”  "

#: git-novice/_episodes/07-github.md:133
msgid ""
"What we will do now is the minimum required to set up the SSH keys and add "
"the public key to a GitHub account."
msgstr ""
"Те, що ми будемо робити зараз, це мінімум, необхідний для налаштування SSH-"
"ключів і додавання відкритого ключа до GitHub акаунту."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:135
msgid "> ## Advanced SSH"
msgstr "> ## Розширений SSH"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:136
msgid ""
"> A supplemental episode in this lesson discusses SSH and key pairs in more "
"depth and detail. "
msgstr ""
"> Додатковий епізод в цьому уроці обговорює SSH і ключові пари більш глибоко"
" і детально. "

#: git-novice/_episodes/07-github.md:139
msgid ""
"The first thing we are going to do is check if this has already been done on"
" the computer you’re on.  Because generally speaking, this setup only needs "
"to happen once and then you can forget about it. "
msgstr ""
"Перше, що ми збираємося зробити, це перевірити, чи це вже зроблено на "
"комп'ютері, на якому ви працюєте зараз.  Тому що взагалі кажучи, ця "
"установка повинна відбутися тільки один раз, і тоді ви можете забути про це."
" "

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:141
msgid "> ## Keeping your keys secure"
msgstr "> ## Дотримання ключів захищеними"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:142
msgid ""
"> You shouldn't really forget about your SSH keys, since they keep your "
"account secure. It’s good "
msgstr ""
"> Ви не повинні забувати про ваші SSH ключі, так як вони тримають ваш "
"обліковий запис в безпеці. Це хороша"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:143
msgid ""
">  practice to audit your secure shell keys every so often. Especially if "
"you are using multiple "
msgstr ""
">  практика перевіряти захищені ключі shell. Особливо, якщо ви "
"використовуєте кілька"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:144
msgid ">  computers to access your account."
msgstr ">  комп'ютерів для доступу до облікового запису."

#: git-novice/_episodes/07-github.md:147
msgid ""
"We will run the list command to check what key pairs already exist on your "
"computer."
msgstr ""
"Ми запустимо команду списку (list - ls), щоб перевірити, які пари ключів вже"
" існують на вашому комп'ютері."

# code block
#: git-novice/_episodes/07-github.md:149 git-novice/_episodes/07-github.md:225
msgid ""
"~~~\n"
"ls -al ~/.ssh\n"
"~~~"
msgstr ""
"~~~\n"
"ls -al ~/.ssh\n"
"~~~"

#: git-novice/_episodes/07-github.md:154
msgid ""
"Your output is going to look a little different depending on whether or not "
"SSH has ever been set up on the computer you are using. "
msgstr ""
"Ваш результат буде виглядати трохи інакше в залежності від того, чи був "
"коли-небудь SSH встановлений на комп'ютері, який ви використовуєте чи ні."

#: git-novice/_episodes/07-github.md:156
msgid "Dracula has not set up SSH on his computer, so his output is "
msgstr ""
"Dracula не налаштував SSH на його комп`ютері, тож його результат виглядає "
"так"

# code block
#: git-novice/_episodes/07-github.md:158
msgid ""
"~~~\n"
"ls: cannot access '/c/Users/Vlad Dracula/.ssh': No such file or directory\n"
"~~~"
msgstr ""
"~~~\n"
"ls: cannot access '/c/Users/Vlad Dracula/.ssh': No such file or directory\n"
"~~~"

#: git-novice/_episodes/07-github.md:163
msgid ""
"If SSH has been set up on the computer you're using, the public and private key pairs will be listed. The file names are either `id_ed25519`/`id_ed25519.pub` or `id_rsa`/`id_rsa.pub` depending on how the key pairs were set up.  \n"
"Since they don’t exist on Dracula’s computer, he uses this command to create them. "
msgstr ""
"Якщо SSH було встановлено на комп'ютері, який ви використовуєте, пари відкритих і приватних ключів будуть перераховані. Назви файлів будуть або `id_ed25519`/`id_ed25519.pub`, або `id_rsa`/`id_rsa.pub` залежно від того, як були створені пари ключів.  \n"
"Так як вони не існують на комп`ютері Dracula, він використовує цюкоманду, щоб створити їх. "

# header
#: git-novice/_episodes/07-github.md:166
msgid "### 3.1 Create an SSH key pair"
msgstr "### 3.1 Створення пари ключів SSH"

#: git-novice/_episodes/07-github.md:167
msgid ""
"To create an SSH key pair Vlad uses this command, where the `-t` option "
"specifies which type of algorithm to use and `-C` attaches a comment to the "
"key (here, Vlad's email):  "
msgstr ""
"Для створення пари ключів SSH Vlad використовує цю команду, де параметр `-t`"
" визначає який тип алгоритму використати, та `-C` прикріплює коментар до "
"ключа (тут електронна пошта Vlad):  "

# code block
#: git-novice/_episodes/07-github.md:169
msgid ""
"~~~\n"
"$ ssh-keygen -t ed25519 -C \"vlad@tran.sylvan.ia\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ ssh-keygen -t ed25519 -C \"vlad@tran.sylvan.ia\"\n"
"~~~"

#: git-novice/_episodes/07-github.md:174
msgid ""
"If you are using a legacy system that doesn't support the Ed25519 algorithm, use:\n"
"`$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"`"
msgstr ""
"Якщо ви використовуєте застарілу систему, яка не підтримує Ed25519 алгоритм, використовуйте:\n"
"`$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"`"

# code block
#: git-novice/_episodes/07-github.md:177
msgid ""
"~~~\n"
"Generating public/private ed25519 key pair.\n"
"Enter file in which to save the key (/c/Users/Vlad Dracula/.ssh/id_ed25519):\n"
"~~~"
msgstr ""
"~~~\n"
"Generating public/private ed25519 key pair.\n"
"Enter file in which to save the key (/c/Users/Vlad Dracula/.ssh/id_ed25519):\n"
"~~~"

#: git-novice/_episodes/07-github.md:183
msgid "We want to use the default file, so just press <kbd>Enter</kbd>."
msgstr ""
"Ми хочемо використовувати типовий файл, тому просто натисніть "
"<kbd>Enter</kbd>."

# code block
#: git-novice/_episodes/07-github.md:185
msgid ""
"~~~\n"
"Created directory '/c/Users/Vlad Dracula/.ssh'.\n"
"Enter passphrase (empty for no passphrase):\n"
"~~~"
msgstr ""
"~~~\n"
"Created directory '/c/Users/Vlad Dracula/.ssh'.\n"
"Enter passphrase (empty for no passphrase):\n"
"~~~"

#: git-novice/_episodes/07-github.md:191
msgid ""
"Now, it is prompting Dracula for a passphrase.  Since he is using his lab’s "
"laptop that other people sometimes have access to, he wants to create a "
"passphrase.  Be sure to use something memorable or save your passphrase "
"somewhere, as there is no \"reset my password\" option. "
msgstr ""
"Тепер це спонукає Dracula до пароля.  Оскільки він використовує ноутбук "
"своєї лабораторії, до якого іноді мають доступ інші люди, він хоче свторити "
"пароль.  Обов'язково використовуйте щось що запам'ятовується або збережіть "
"пароль десь, оскільки немає опції «скинути мій пароль». "

# code block
#: git-novice/_episodes/07-github.md:193
msgid ""
"~~~\n"
"Enter same passphrase again:\n"
"~~~"
msgstr ""
"~~~\n"
"Enter same passphrase again:\n"
"~~~"

#: git-novice/_episodes/07-github.md:198
msgid ""
"After entering the same passphrase a second time, we receive the "
"confirmation"
msgstr "Після введення того ж пароля вдруге ми отримуємо підтвердження"

# code block
#: git-novice/_episodes/07-github.md:200
msgid ""
"~~~\n"
"Your identification has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519\n"
"Your public key has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519.pub\n"
"The key fingerprint is:\n"
"SHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o vlad@tran.sylvan.ia\n"
"The key's randomart image is:\n"
"+--[ED25519 256]--+\n"
"|^B== o.          |\n"
"|%*=.*.+          |\n"
"|+=.E =.+         |\n"
"| .=.+.o..        |\n"
"|....  . S        |\n"
"|.+ o             |\n"
"|+ =              |\n"
"|.o.o             |\n"
"|oo+.             |\n"
"+----[SHA256]-----+\n"
"~~~"
msgstr ""
"~~~\n"
"Your identification has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519\n"
"Your public key has been saved in /c/Users/Vlad Dracula/.ssh/id_ed25519.pub\n"
"The key fingerprint is:\n"
"SHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o vlad@tran.sylvan.ia\n"
"The key's randomart image is:\n"
"+--[ED25519 256]--+\n"
"|^B== o.          |\n"
"|%*=.*.+          |\n"
"|+=.E =.+         |\n"
"| .=.+.o..        |\n"
"|....  . S        |\n"
"|.+ o             |\n"
"|+ =              |\n"
"|.o.o             |\n"
"|oo+.             |\n"
"+----[SHA256]-----+\n"
"~~~"

#: git-novice/_episodes/07-github.md:220
msgid ""
"The \"identification\" is actually the private key. You should never share it.  The public key is appropriately named.  The \"key fingerprint\" \n"
"is a shorter version of a public key."
msgstr ""
"\"identification\" насправді є приватним ключем. Ви ніколи не повинні ділитися ним. Відкритий ключ названий відповідним чином. \"key fingerprint\" \n"
"є коротшою версією відкритого ключа."

#: git-novice/_episodes/07-github.md:223
msgid ""
"Now that we have generated the SSH keys, we will find the SSH files when we "
"check."
msgstr ""
"Тепер, коли ми створили ключі SSH, ми знайдемо файли SSH при перевірці."

# code block
#: git-novice/_episodes/07-github.md:230
msgid ""
"~~~\n"
"drwxr-xr-x 1 Vlad Dracula 197121   0 Jul 16 14:48 ./\n"
"drwxr-xr-x 1 Vlad Dracula 197121   0 Jul 16 14:48 ../\n"
"-rw-r--r-- 1 Vlad Dracula 197121 419 Jul 16 14:48 id_ed25519\n"
"-rw-r--r-- 1 Vlad Dracula 197121 106 Jul 16 14:48 id_ed25519.pub\n"
"~~~"
msgstr ""
"~~~\n"
"drwxr-xr-x 1 Vlad Dracula 197121   0 Jul 16 14:48 ./\n"
"drwxr-xr-x 1 Vlad Dracula 197121   0 Jul 16 14:48 ../\n"
"-rw-r--r-- 1 Vlad Dracula 197121 419 Jul 16 14:48 id_ed25519\n"
"-rw-r--r-- 1 Vlad Dracula 197121 106 Jul 16 14:48 id_ed25519.pub\n"
"~~~"

# header
#: git-novice/_episodes/07-github.md:238
msgid "### 3.2 Copy the public key to GitHub"
msgstr "### 3.2 Копіювання відкритого ключа на GitHub"

#: git-novice/_episodes/07-github.md:239
msgid ""
"Now we have a SSH key pair and we can run this command to check if GitHub "
"can read our authentication.  "
msgstr ""
"Тепер у нас є пара ключів SSH, і ми можемо запустити цю команду, щоб "
"перевірити, чи може GitHub читати нашу автентифікацію.  "

# code block
#: git-novice/_episodes/07-github.md:241
msgid ""
"~~~\n"
"ssh -T git@github.com\n"
"~~~"
msgstr ""
"~~~\n"
"ssh -T git@github.com\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:247
msgid ""
"~~~\n"
"The authenticity of host 'github.com (192.30.255.112)' can't be established.\n"
"RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\n"
"This key is not known by any other names\n"
"Are you sure you want to continue connecting (yes/no/[fingerprint])? y\n"
"Please type 'yes', 'no' or the fingerprint: yes\n"
"Warning: Permanently added 'github.com' (RSA) to the list of known hosts.\n"
"git@github.com: Permission denied (publickey).\n"
"~~~"
msgstr ""
"~~~\n"
"The authenticity of host 'github.com (192.30.255.112)' can't be established.\n"
"RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\n"
"This key is not known by any other names\n"
"Are you sure you want to continue connecting (yes/no/[fingerprint])? y\n"
"Please type 'yes', 'no' or the fingerprint: yes\n"
"Warning: Permanently added 'github.com' (RSA) to the list of known hosts.\n"
"git@github.com: Permission denied (publickey).\n"
"~~~"

#: git-novice/_episodes/07-github.md:258
msgid "Right, we forgot that we need to give GitHub our public key!  "
msgstr "Так, ми забули, що нам потрібно надати GitHub наш відкритий ключ!  "

#: git-novice/_episodes/07-github.md:260
msgid ""
"First, we need to copy the public key.  Be sure to include the `.pub` at the"
" end, otherwise you’re looking at the private key. "
msgstr ""
"По-перше, нам потрібно скопіювати відкритий ключ.  Не забудьте включити "
"«.pub» в кінці, в іншому випадку ви дивитеся на приватний ключ. "

# code block
#: git-novice/_episodes/07-github.md:262
msgid ""
"~~~\n"
"cat ~/.ssh/id_ed25519.pub\n"
"~~~"
msgstr ""
"~~~\n"
"cat ~/.ssh/id_ed25519.pub\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:267
msgid ""
"~~~\n"
"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI vlad@tran.sylvan.ia\n"
"~~~"
msgstr ""
"~~~\n"
"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI vlad@tran.sylvan.ia\n"
"~~~"

#: git-novice/_episodes/07-github.md:272
msgid ""
"Now, going to GitHub.com, click on your profile icon in the top right corner to get the drop-down menu.  Click \"Settings,\" then on the \n"
"settings page, click \"SSH and GPG keys,\" on the left side \"Account settings\" menu.  Click the \"New SSH key\" button on the right side. Now, \n"
"you can add the title (Dracula uses the title \"Vlad's Lab Laptop\" so he can remember where the original key pair\n"
"files are located), paste your SSH key into the field, and click the \"Add SSH key\" to complete the setup."
msgstr ""
"Тепер, перейшовши в GitHub.com, натисніть на значок профілю в правому верхньому куті, щоб отримати спадне меню.  Натисніть \"Settings,\" потім на \n"
"сторінці налаштувань, натисніть \"SSH and GPG keys,\" ліворуч меню \"Account settings\".  Натисніть \"New SSH key\" кнопку з правого боку. Тепер, \n"
"ви можете додати заголовок (Dracula використовує заголовок \"Vlad's Lab Laptop\", таким чином, він запам`ятає де розташовані оригінальні ключові пари файлів),\n"
"вставте SSH ключ в поле, і натисніть кнопку \"Add SSH key\", щоб завершити налаштування."

#: git-novice/_episodes/07-github.md:277
msgid ""
"Now that we’ve set that up, let’s check our authentication again from the command line. \n"
"~~~\n"
"$ ssh -T git@github.com\n"
"~~~\n"
"{: .language-bash}"
msgstr ""
"Тепер, коли ми встановили це, давайте перевіримо нашу аутентифікацію знову з командного рядка. \n"
"~~~\n"
"$ ssh -T git@github.com\n"
"~~~\n"
"{: .language-bash}"

# code block
#: git-novice/_episodes/07-github.md:283
msgid ""
"~~~\n"
"Hi Vlad! You've successfully authenticated, but GitHub does not provide shell access.\n"
"~~~"
msgstr ""
"~~~\n"
"Hi Vlad! You've successfully authenticated, but GitHub does not provide shell access.\n"
"~~~"

#: git-novice/_episodes/07-github.md:288
msgid ""
"Good! This output confirms that the SSH key works as intended. We are now "
"ready to push our work to the remote repository."
msgstr ""
"Добре! Цей результат підтверджує, що ключ SSH працює за призначенням. Тепер "
"ми готові завантажити нашу роботу до віддаленого репозиторію."

# header
#: git-novice/_episodes/07-github.md:290
msgid "## 4. Push local changes to a remote"
msgstr "## 4. Завантаження локальних змін на віддалений репозиторій"

#: git-novice/_episodes/07-github.md:292
msgid ""
"Now that authentication is setup, we can return to the remote.  This command will push the changes from\n"
"our local repository to the repository on GitHub:"
msgstr ""
"Тепер, коли аутентифікація налаштована, ми можемо повернутися до віддаленого репозиторію.  Ця команда завантажить зміни з\n"
"нашого локального репозиторію до репозиторію на GitHub:"

# code block
#: git-novice/_episodes/07-github.md:295 git-novice/_episodes/08-collab.md:90
#: git-novice/_episodes/09-conflict.md:68
#: git-novice/_episodes/09-conflict.md:120
#: git-novice/_episodes/09-conflict.md:249
msgid ""
"~~~\n"
"$ git push origin main\n"
"~~~"
msgstr ""
"~~~\n"
"$ git push origin main\n"
"~~~"

#: git-novice/_episodes/07-github.md:300
msgid ""
"Since Dracula set up a passphrase, it will prompt him for it.  If you completed advanced settings for your authentication, it \n"
"will not prompt for a passphrase. "
msgstr ""
"Оскільки Dracula встановив парольну фразу, вона підкаже йому про це.  Якщо ви виконали додаткові налаштування для автентифікації, команда \n"
"не запитає пароль. "

# code block
#: git-novice/_episodes/07-github.md:303
msgid ""
"~~~\n"
"Enumerating objects: 16, done.\n"
"Counting objects: 100% (16/16), done.\n"
"Delta compression using up to 8 threads.\n"
"Compressing objects: 100% (11/11), done.\n"
"Writing objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\n"
"Total 16 (delta 2), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (2/2), done.\n"
"To https://github.com/vlad/planets.git\n"
" * [new branch]      main -> main\n"
"~~~"
msgstr ""
"~~~\n"
"Enumerating objects: 16, done.\n"
"Counting objects: 100% (16/16), done.\n"
"Delta compression using up to 8 threads.\n"
"Compressing objects: 100% (11/11), done.\n"
"Writing objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\n"
"Total 16 (delta 2), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (2/2), done.\n"
"To https://github.com/vlad/planets.git\n"
" * [new branch]      main -> main\n"
"~~~"

#: git-novice/_episodes/07-github.md:317
msgid ""
">\n"
"> If the network you are connected to uses a proxy, there is a chance that your\n"
"> last command failed with \"Could not resolve hostname\" as the error message. To\n"
"> solve this issue, you need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy https://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you connect to another network that doesn't use a proxy, you will need to\n"
"> tell Git to disable the proxy using:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Якщо мережа, до якої ви підключені, використовує проксі, є шанс, що ваша\n"
"> остання команда зазнала невдачі з \"Could not resolve hostname\" як повідомлення про помилку. Щоб\n"
"> вирішити це питання, потрібно розповісти Git про проксі:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy https://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Коли ви підключаєтеся до іншої мережі, яка не використовує проксі, вам потрібно буде\n"
"> сказати Git відключити проксі за допомогою:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:338
msgid "> ## Password Managers"
msgstr "> ## Менеджери паролів"

#: git-novice/_episodes/07-github.md:339
msgid ""
">\n"
"> If your operating system has a password manager configured, `git push` will\n"
"> try to use it when it needs your username and password.  For example, this\n"
"> is the default behavior for Git Bash on Windows. If you want to type your\n"
"> username and password at the terminal instead of using a password manager,\n"
"> type:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> in the terminal, before you run `git push`.  Despite the name, [Git uses\n"
"> `SSH_ASKPASS` for all credential\n"
"> entry](https://git-scm.com/docs/gitcredentials#_requesting_credentials), so\n"
"> you may want to unset `SSH_ASKPASS` whether you are using Git via SSH or\n"
"> https.\n"
">\n"
"> You may also want to add `unset SSH_ASKPASS` at the end of your `~/.bashrc`\n"
"> to make Git default to using the terminal for usernames and passwords."
msgstr ""
">\n"
"> Якщо у вашій операційній системі налаштовано менеджер паролів, `git push`\n"
"> спробує використати його, коли йому потріне ім`я користувача і пароль.  Наприклад, це\n"
"> є типовою поведінкою для Git Bash на Windows. Якщо ви хочете ввести своє ім`я користувача\n"
"> та пароль в терміналі замість використання менеджера паролів,\n"
"> введіть:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> в терміналі, перед `git push`.  Незважаючи на ім`я, [Git використовує\n"
"> `SSH_ASKPASS` для всіх облікових\n"
"> записів](https://git-scm.com/docs/gitcredentials#_requesting_credentials), тож\n"
"> ви можете скасувати `SSH_ASKPASS` незважаючи на те, чи ви використовуєте Git через SSH або\n"
"> https.\n"
">\n"
"> Ви також можете додати `unset SSH_ASKPASS` в кінці вашого `~/.bashrc`\n"
"> щоб зробити Git типовим для використання термінала для імен користувачів та паролів."

#: git-novice/_episodes/07-github.md:361
msgid "Our local and remote repositories are now in this state:"
msgstr "Наші локальні та віддалені сховища зараз у такому стані:"

#: git-novice/_episodes/07-github.md:363
msgid ""
"![GitHub Repository After First Push]({{ site.baseurl }}/fig/github-repo-after-first-"
"push.svg)"
msgstr ""
"![GitHub Repository After First Push]({{ site.baseurl }}/fig/github-repo-after-first-"
"push.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:365
msgid "> ## The '-u' Flag"
msgstr "> ## Опція '-u'"

#: git-novice/_episodes/07-github.md:366
msgid ""
">\n"
"> You may see a `-u` option used with `git push` in some documentation.  This\n"
"> option is synonymous with the `--set-upstream-to` option for the `git branch`\n"
"> command, and is used to associate the current branch with a remote branch so\n"
"> that the `git pull` command can be used without any arguments. To do this,\n"
"> simply use `git push -u origin main` once the remote has been set up."
msgstr ""
">\n"
"> Ви можете побачити опцію «-u», який використовується з «git push» у деякій документації.  Ця\n"
"> опція є синонімом опції `--set-upstream-to` для команди `git branch`\n"
">  і використовується для зв`язку поточної гілки з віддаленою гілкою так, що\n"
"> команда `git pull` може будти використана без будь-яких аргументів. Щоб зробити це,\n"
"> просто використайте `git push -u origin main` після налаштування пульта дистанційного керування."

#: git-novice/_episodes/07-github.md:374
msgid ""
"We can pull changes from the remote repository to the local one as well:"
msgstr "Ми також можемо переносити зміни з віддаленого сховища на локальний:"

# code block
#: git-novice/_episodes/07-github.md:376 git-novice/_episodes/08-collab.md:149
#: git-novice/_episodes/09-conflict.md:145
#: git-novice/_episodes/09-conflict.md:271
msgid ""
"~~~\n"
"$ git pull origin main\n"
"~~~"
msgstr ""
"~~~\n"
"$ git pull origin main\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:381
msgid ""
"~~~\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"Already up-to-date.\n"
"~~~"
msgstr ""
"~~~\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"Already up-to-date.\n"
"~~~"

#: git-novice/_episodes/07-github.md:388
msgid ""
"Pulling has no effect in this case because the two repositories are already\n"
"synchronized.  If someone else had pushed some changes to the repository on\n"
"GitHub, though, this command would download them to our local repository."
msgstr ""
"Перетягування не має ніякого ефекту в цьому випадку, тому що два сховища вже\n"
"синхронізовані.  Якщо хтось ще завантажив якісь зміни до репозиторію на\n"
"GitHub, хоч ця команда завантажить їх у наш локальний репозиторій."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:392
msgid "> ## GitHub GUI"
msgstr "> ## GitHub GUI"

#: git-novice/_episodes/07-github.md:393
msgid ""
">\n"
"> Browse to your `planets` repository on GitHub.\n"
"> Under the Code tab, find and click on the text that says \"XX commits\" (where \"XX\" is some number).\n"
"> Hover over, and click on, the three buttons to the right of each commit.\n"
"> What information can you gather/explore from these buttons?\n"
"> How would you get that same information in the shell?\n"
">\n"
"> > ## Solution\n"
"> > The left-most button (with the picture of a clipboard) copies the full identifier of the commit \n"
"> > to the clipboard. In the shell, ```git log``` will show you the full commit identifier for each \n"
"> > commit.\n"
"> >\n"
"> > When you click on the middle button, you'll see all of the changes that were made in that \n"
"> > particular commit. Green shaded lines indicate additions and red ones removals. In the shell we \n"
"> > can do the same thing with ```git diff```. In particular, ```git diff ID1..ID2``` where ID1 and \n"
"> > ID2 are commit identifiers (e.g. ```git diff a3bf1e5..041e637```) will show the differences \n"
"> > between those two commits.\n"
"> >\n"
"> > The right-most button lets you view all of the files in the repository at the time of that \n"
"> > commit. To do this in the shell, we'd need to checkout the repository at that particular time. \n"
"> > We can do this with ```git checkout ID``` where ID is the identifier of the commit we want to \n"
"> > look at. If we do this, we need to remember to put the repository back to the right state \n"
"> > afterwards!"
msgstr ""
">\n"
"> Перегляньте ваш репозиторій `planets` на GitHub.\n"
"> Під вкладкою Code, знайдіть та натисніть на текст, який говорить \"XX commits\" (де \"XX\" це якесь число).\n"
"> Наведіть курсор і натисніть на три кнопки праворуч від кожного коміту.\n"
"> Яку інформацію ви можете зібрати/вивчити з цих кнопок?\n"
"> Як би ви отримали ту саму інформацію в shell?\n"
">\n"
"> > ## Відповідь\n"
"> > Ліва кнопка (з зображенням буфера обміну) копіює повний ідентифікатор коміту \n"
"> > в буфер обміну. В shell, ```git log``` покаже вам повний ідентифікатор коміту для кожного \n"
"> > коміту.\n"
"> >\n"
"> > Коли ви натиснете на середню кнопку, ви побачите всі зміни, які були зроблені в цьому \n"
"> > конкретному коміті. Зелені затінені лінії вказують на додавання та видалення червоних. В shell ми \n"
"> > можемо зробити ту саму річ з ```git diff```. А саме, ```git diff ID1..ID2```, де ID1 та \n"
"> > ID2 ідентифікатори комітів (наприклад, ```git diff a3bf1e5..041e637```) покаже відмінності \n"
"> > між двома комітами.\n"
"> >\n"
"> > Найправіша кнопка дозволяє переглядати всі файли в сховищі під час цього\n"
"> > коміту. Для того, щоб зробити це в shell, нам потрібно було б перевірити репозиторій в той конкретний час. \n"
"> > Ми можемо зробити це за допомогою ```git checkout ID```, де ID - ідентифікатор коміту, на який ми хочемо подивитися. \n"
"> > Якщо ми зробимо це, нам потрібно пам`ятати про повернення репозиторію в потрібний стан\n"
"> > після цього! "

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:419
msgid "> ## Uploading files directly in GitHub browser"
msgstr "> ## Завантаження файлів безпосередньо в браузері GitHub"

#: git-novice/_episodes/07-github.md:420
msgid ""
">\n"
"> Github also allows you to skip the command line and upload files directly to \n"
"> your repository without having to leave the browser. There are two options. \n"
"> First you can click the \"Upload files\" button in the toolbar at the top of the\n"
"> file tree. Or, you can drag and drop files from your desktop onto the file \n"
"> tree. You can read more about this [on this GitHub page](https://help.github.com/articles/adding-a-file-to-a-repository/)"
msgstr ""
">\n"
"> Github також дозволяє нам пропустити командний рядок ізавантажити файли безпосередньо до \n"
"> вашого репозиторію без необхідності залишати браузер. Є два варіанти. \n"
"> Перший - ви можете натиснути кнопку \"Upload files\" на панелі інструментів у верхній частині\n"
"> дерева файлів. Або, можна перетягувати файли з робочого стору до дерева файлівю \n"
"> Ви можете більше прочитати про це [на цій GitHub сторінці](https://help.github.com/articles/adding-a-file-to-a-repository/)"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:428
msgid "> ## GitHub Timestamp"
msgstr "> ## Часова Мітка GitHub"

#: git-novice/_episodes/07-github.md:429
msgid ""
">\n"
"> Create a remote repository on GitHub. Push the contents of your local\n"
"> repository to the remote. Make changes to your local repository and push these\n"
"> changes. Go to the repo you just created on GitHub and check the\n"
"> [timestamps]({{ page.root }}{% link reference.md %}#timestamp) of the files. How does GitHub\n"
"> record times, and why?\n"
">\n"
"> > ## Solution\n"
"> > GitHub displays timestamps in a human readable relative format (i.e. \"22 hours ago\" or \"three \n"
"> > weeks ago\"). However, if you hover over the timestamp, you can see the exact time at which the \n"
"> > last change to the file occurred."
msgstr ""
">\n"
"> Створіть віддалений репозиторій на GitHub. Відправте  вміст вашого локального сховища\n"
"> до віддаленого. Внесіть зміни до вашого локального сховища та відправте ці зміни.\n"
"> Перейдіть до щойно створеного на GitHub репо і перевірте\n"
"> [часові мітки]({{ page.root }}{% link reference.md %}#timestamp) файлів. Як GitHub\n"
"> записує час і чому?\n"
">\n"
"> > ## Відповідь\n"
"> > GitHub відображає мітки часу у відносному форматі, що читається людиною (наприклад, \"22 години назад\" або \"три \n"
"> > тижні тому\"). Однак, якщо ви наведете курсор на мітку часу, ви можете побачити точний час, в який\n"
"> > остання зміна файлу відбулася. "

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:443
msgid "> ## Push vs. Commit"
msgstr "> ## Відправлення змін vs. Коміт"

#: git-novice/_episodes/07-github.md:444
msgid ""
">\n"
"> In this episode, we introduced the \"git push\" command.\n"
"> How is \"git push\" different from \"git commit\"?\n"
">\n"
"> > ## Solution\n"
"> > When we push changes, we're interacting with a remote repository to update it with the changes \n"
"> > we've made locally (often this corresponds to sharing the changes we've made with others). \n"
"> > Commit only updates your local repository."
msgstr ""
">\n"
"> В цьому епізоді, ми познайомилися з командою \"git push\".\n"
"> Як \"git push\" відрізняється \"git commit\"?\n"
">\n"
"> > ## Відповідь\n"
"> > Коли ми відправляємо зміни, ми взаємодіємо з віддаленим репозиторієм, щоб оновити його зі змінами, \n"
"> > ми зробили локально (часто це відповідає обміну змінами, які ми зробили з іншими). \n"
"> > Commit оновлює лише локальний репозиторій."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:455
msgid "> ## GitHub License and README files"
msgstr "> ## GitHub Ліцензія та файли README"

#: git-novice/_episodes/07-github.md:456
msgid ""
">\n"
"> In this episode we learned about creating a remote repository on GitHub, but when you initialized \n"
"> your GitHub repo, you didn't add a README.md or a license file. If you had, what do you think \n"
"> would have happened when you tried to link your local and remote repositories?\n"
">\n"
"> > ## Solution\n"
"> > In this case, we'd see a merge conflict due to unrelated histories. When GitHub creates a \n"
"> > README.md file, it performs a commit in the remote repository. When you try to pull the remote \n"
"> > repository to your local repository, Git detects that they have histories that do not share a \n"
"> > common origin and refuses to merge.\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > warning: no common commits\n"
"> > remote: Enumerating objects: 3, done.\n"
"> > remote: Counting objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> >  * [new branch]      main     -> origin/main\n"
"> > fatal: refusing to merge unrelated histories\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > You can force git to merge the two repositories with the option `--allow-unrelated-histories`. \n"
"> > Be careful when you use this option and carefully examine the contents of local and remote \n"
"> > repositories before merging.\n"
"> > ~~~\n"
"> > $ git pull --allow-unrelated-histories origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > From https://github.com/vlad/planets\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> > Merge made by the 'recursive' strategy.\n"
"> > README.md | 1 +\n"
"> > 1 file changed, 1 insertion(+)\n"
"> > create mode 100644 README.md\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> У цьому епізоді ми дізналися про створення віддаленого репозиторію на GitHub, але коли ми ініціалізували наш \n"
"> GitHub репо, ми не додали README.md або файл ліцензії. Якщо б ми це зробили, що, на вашу думку, \n"
"> сталося б, коли ми намагалися зв`язати локальні та віддалені репозиторії?\n"
">\n"
"> > ## Відповідь\n"
"> > У цьому випадку ми побачимо конфлікт злиття через неспоріднені історії. Коли GitHub створює \n"
"> > README.md файл, він виконує коміт у віддаленому репозиторії. Коли ви намагаєтеся витягнути віддалений \n"
"> > репозиторій до вашого локального репозиторію, Git виявляє, що у них є історії, які не мають спільного\n"
"> > походження і відмовляється від злиття..\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > warning: no common commits\n"
"> > remote: Enumerating objects: 3, done.\n"
"> > remote: Counting objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> >  * [new branch]      main     -> origin/main\n"
"> > fatal: refusing to merge unrelated histories\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ви можете змусити git об'єднати два сховища з опцією `--allow-unrelated-histories`. \n"
"> > Будьте обережні, коли ви використовуєте цей параметр і уважно вивчіть вміст локальних і віддалених \n"
"> > репозиторіїв перед об'єднанням..\n"
"> > ~~~\n"
"> > $ git pull --allow-unrelated-histories origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > From https://github.com/vlad/planets\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> > Merge made by the 'recursive' strategy.\n"
"> > README.md | 1 +\n"
"> > 1 file changed, 1 insertion(+)\n"
"> > create mode 100644 README.md\n"
"> > ~~~\n"
"> > {: .output}"

# Front Matter
#: git-novice/_episodes/08-collab.md:1
msgid ""
"---\n"
"title: Collaborating\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use version control to collaborate with other people?\"\n"
"objectives:\n"
"- \"Clone a remote repository.\"\n"
"- \"Collaborate by pushing to a common repository.\"\n"
"- \"Describe the basic collaborative workflow.\"\n"
"keypoints:\n"
"- \"`git clone` copies a remote repository to create a local repository with a remote called `origin` automatically set up.\"\n"
"---"
msgstr ""
"---\n"
"title: Співпраця\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"Як я можу використовувати контроль версій для співпраці з іншими людьми?\"\n"
"objectives:\n"
"- \"Клонування віддаленого сховища.\"\n"
"- \"Співпрацювати, відправляюючи зміни до загального репозиторію.\"\n"
"- \"Опишіть базовий спільний робочий процес.\"\n"
"keypoints:\n"
"- \"`git clone` копіює віддалений репозиторій для створення локального репозиторію за допомогою автоматичного налаштування віддаленого «origin».\"\n"
"---"

#: git-novice/_episodes/08-collab.md:15
msgid ""
"For the next step, get into pairs.  One person will be the \"Owner\" and the other\n"
"will be the \"Collaborator\". The goal is that the Collaborator add changes into\n"
"the Owner's repository. We will switch roles at the end, so both persons will\n"
"play Owner and Collaborator."
msgstr ""
"На наступний крок поділіться на пари.  Одна людина буде «Власником», а інша\n"
"буде «Співавтор». Мета полягає в тому, щоб Співавтор додав зміни в репозиторій\n"
"Власника. Ми поміняємося ролями в кінці так, щоб обидві людини будуть\n"
"грати Власника та Співавтора."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:20
msgid "> ## Practicing By Yourself"
msgstr "> ## Самостійна Практика"

#: git-novice/_episodes/08-collab.md:21
msgid ""
">\n"
"> If you're working through this lesson on your own, you can carry on by opening\n"
"> a second terminal window.\n"
"> This window will represent your partner, working on another computer. You\n"
"> won't need to give anyone access on GitHub, because both 'partners' are you."
msgstr ""
">\n"
"> Якщо ви працюєте над цим уроком самостійно, ви можете продовжити, відкривши\n"
"> друге вікно терміналу.\n"
"> Це вікно буде представляти вашого партнера, який працює на іншому комп'ютері. Вам\n"
"> не потрібно буде надавати нікому доступ до GitHub, тому що обидва «партнери» - це ви."

#: git-novice/_episodes/08-collab.md:28
msgid ""
"The Owner needs to give the Collaborator access. On GitHub, click the \"Settings\"\n"
"button on the right, select \"Collaborators\", click \"Add people\", and\n"
"then enter your partner's username."
msgstr ""
"Власник повинен надати співробітнику доступ. В GitHub, праворуч натисніть кнопку \"Settings\",\n"
"виберіть \"Collaborators\", натисніть \"Add people\", та\n"
"потім введіть ім`я вашого партнера."

#: git-novice/_episodes/08-collab.md:32
msgid "![Adding Collaborators on GitHub]({{ site.baseurl }}/fig/github-add-collaborators.png)"
msgstr ""
"![Adding Collaborators on GitHub]({{ site.baseurl }}/fig/github-add-collaborators.png)"

#: git-novice/_episodes/08-collab.md:34
msgid ""
"To accept access to the Owner's repo, the Collaborator\n"
"needs to go to [https://github.com/notifications](https://github.com/notifications) \n"
"or check for email notification. Once there she can accept access to the Owner's repo."
msgstr ""
"Щоб прийняти доступ до репо Власника, Співробітнику\n"
"потрібно перейти до [https://github.com/notifications](https://github.com/notifications) \n"
"або перевірити або перевірити наявність сповіщення електронною поштою. Після цього вона може прийняти доступ до репо власника."

#: git-novice/_episodes/08-collab.md:38
msgid ""
"Next, the Collaborator needs to download a copy of the Owner's repository to her\n"
"machine. This is called \"cloning a repo\". "
msgstr ""
"Далі, Колаборант повинен завантажити копію репозиторію Власника на його\n"
"комп`ютер. Це називається \"клонування репо\". "

#: git-novice/_episodes/08-collab.md:41
msgid ""
"The Collaborator doesn't want to overwrite her own version of `planets.git`, so \n"
"needs to clone the Owner's repository to a different location than her own \n"
"repository with the same name."
msgstr ""
"Колаборант не хоче перезаписувати власну версію `planets.git`, тому \n"
"потрібно клонувати сховище Власника в інше місце, ніж його власний \n"
"репозиторій з такою ж назвою."

#: git-novice/_episodes/08-collab.md:45
msgid ""
"To clone the Owner's repo into her `Desktop` folder, the Collaborator "
"enters:"
msgstr "Щоб клонувати репо Власника в папку `Desktop`, Колаборант вводить:"

# code block
#: git-novice/_episodes/08-collab.md:47
msgid ""
"~~~\n"
"$ git clone git@github.com:vlad/planets.git ~/Desktop/vlad-planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ git clone git@github.com:vlad/planets.git ~/Desktop/vlad-planets\n"
"~~~"

#: git-novice/_episodes/08-collab.md:52
msgid "Replace 'vlad' with the Owner's username."
msgstr "Замініть 'vlad' на ім`я користувача Власника."

#: git-novice/_episodes/08-collab.md:54
msgid ""
"If you choose to clone without the clone path\n"
"(`~/Desktop/vlad-planets`) specified at the end,\n"
"you will clone inside your own planets folder!\n"
"Make sure to navigate to the `Desktop` folder first."
msgstr ""
"Якщо ви вирішите клонувати без шляху клонування\n"
"(`~/Desktop/vlad-planets`) вказаного в кінці,\n"
"ви будете клонувати всередині вашої власної папки планет!\n"
"Переконайтеся, що спочатку ви перейшли до папки `Desktop`."

#: git-novice/_episodes/08-collab.md:59
msgid "![After Creating Clone of Repository]({{ site.baseurl }}/fig/github-collaboration.svg)"
msgstr "![Після створення клону репозиторію]({{ site.baseurl }}/fig/github-collaboration.svg)"

#: git-novice/_episodes/08-collab.md:61
msgid ""
"The Collaborator can now make a change in her clone of the Owner's repository,\n"
"exactly the same way as we've been doing before:"
msgstr ""
"Колаборант тепер може змінити свій клон репозиторію Власника\n"
"точно так само, як ми робили раніше:"

# code block
#: git-novice/_episodes/08-collab.md:64
msgid ""
"~~~\n"
"$ cd ~/Desktop/vlad-planets\n"
"$ nano pluto.txt\n"
"$ cat pluto.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ~/Desktop/vlad-planets\n"
"$ nano pluto.txt\n"
"$ cat pluto.txt\n"
"~~~"

# code block
#: git-novice/_episodes/08-collab.md:71
msgid ""
"~~~\n"
"It is so a planet!\n"
"~~~"
msgstr ""
"~~~\n"
"It is so a planet!\n"
"~~~"

# code block
#: git-novice/_episodes/08-collab.md:76
msgid ""
"~~~\n"
"$ git add pluto.txt\n"
"$ git commit -m \"Add notes about Pluto\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add pluto.txt\n"
"$ git commit -m \"Add notes about Pluto\"\n"
"~~~"

# code block
#: git-novice/_episodes/08-collab.md:82
msgid ""
"~~~\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"
msgstr ""
"~~~\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"

#: git-novice/_episodes/08-collab.md:88
msgid "Then push the change to the *Owner's repository* on GitHub:"
msgstr "Далі відправте зміни до *репозиторію Власника* на GitHub:"

# code block
#: git-novice/_episodes/08-collab.md:95
msgid ""
"~~~\n"
"Enumerating objects: 4, done.\n"
"Counting objects: 4, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (2/2), done.\n"
"Writing objects: 100% (3/3), 306 bytes, done.\n"
"Total 3 (delta 0), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets.git\n"
"   9272da5..29aba7c  main -> main\n"
"~~~"
msgstr ""
"~~~\n"
"Enumerating objects: 4, done.\n"
"Counting objects: 4, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (2/2), done.\n"
"Writing objects: 100% (3/3), 306 bytes, done.\n"
"Total 3 (delta 0), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets.git\n"
"   9272da5..29aba7c  main -> main\n"
"~~~"

#: git-novice/_episodes/08-collab.md:107
msgid ""
"Note that we didn't have to create a remote called `origin`: Git uses this\n"
"name by default when we clone a repository.  (This is why `origin` was a\n"
"sensible choice earlier when we were setting up remotes by hand.)"
msgstr ""
"Зауважте, що нам не потрібно було створювати віддалений репозиторій під назвою `origin`: Git використовує цю\n"
"цю назву за замовчуванням, коли ми клонуємо репозиторій.  (Ось чому `origin` був\n"
"розумним вибором раніше, коли ми налаштовували віддалені репозиторії вручну.)"

#: git-novice/_episodes/08-collab.md:111
msgid ""
"Take a look at the Owner’s repository on GitHub again, and you should be \n"
"able to see the new commit made by the Collaborator. You may need to refresh\n"
"your browser to see the new commit."
msgstr ""
"Знову подивіться на репозиторій Власника на GitHub, і ви повинні\n"
"бачити новий коміт, зроблений Колаборантом. Можливо, вам доведеться оновити\n"
"ваш браузер, щоб побачити новий коміт."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:115
msgid "> ## Some more about remotes"
msgstr "> ## Дещо більше про віддалені репозиторії"

#: git-novice/_episodes/08-collab.md:116
msgid ""
">\n"
"> In this episode and the previous one, our local repository has had\n"
"> a single \"remote\", called `origin`. A remote is a copy of the repository\n"
"> that is hosted somewhere else, that we can push to and pull from, and \n"
"> there's no reason that you have to work with only one. For example, \n"
"> on some large projects you might have your own copy in your own GitHub\n"
"> account (you'd probably call this `origin`) and also the main \"upstream\"\n"
"> project repository (let's call this `upstream` for the sake of examples).\n"
"> You would pull from `upstream` from time to \n"
"> time to get the latest updates that other people have committed.\n"
">\n"
"> Remember that the name you give to a remote only exists locally. It's\n"
"> an alias that you choose - whether `origin`, or `upstream`, or `fred` -\n"
"> and not something intrinstic to the remote repository.\n"
">\n"
"> The `git remote` family of commands is used to set up and alter the remotes\n"
"> associated with a repository. Here are some of the most useful ones:\n"
">\n"
"> * `git remote -v` lists all the remotes that are configured (we already used\n"
"> this in the last episode)\n"
"> * `git remote add [name] [url]` is used to add a new remote\n"
"> * `git remote remove [name]` removes a remote. Note that it doesn't affect the \n"
"> remote repository at all - it just removes the link to it from the local repo.\n"
"> * `git remote set-url [name] [newurl]` changes the URL that is associated \n"
"> with the remote. This is useful if it has moved, e.g. to a different GitHub\n"
"> account, or from GitHub to a different hosting service. Or, if we made a typo when\n"
"> adding it!\n"
"> * `git remote rename [oldname] [newname]` changes the local alias by which a remote \n"
"> is known - its name. For example, one could use this to change `upstream` to `fred`."
msgstr ""
">\n"
"> У цьому епізоді і попередньому, наш локальний репозиторій мав\n"
"> єдиний \"віддалений\" репозиторій, під назвою `origin`. Віддалений - це копія репозиторію,\n"
"> яка знаходиться в іншому місці, яку ми можемо відправити і отримати, \n"
"> і немає причин працювати тільки з одним. Наприклад, \n"
"> у деяких великих проєктах у вас може бути власна копія у вашому власному обліковому записі GitHub\n"
"> (ви, ймовірно, називаєте її `origin`), а також головне сховище проєктів \"upstream\"\n"
"> (давайте назвемо це «upstream» заради прикладів).\n"
"> Час від часу ви будете отримувати зміни з `upstream`, \n"
"> щоб отримати останні оновлення, які зробили інші люди.\n"
">\n"
"> Пам'ятайте, що ім'я, яке ви надаєте віддаленому репозиторію, існує лише локально. Це \n"
"> псевдонім, який ви вибираєте - будь то `origin`, чи `upstream`, чи `fred` -\n"
"> а не щось притаманне віддаленому репозиторію.\n"
">\n"
"> Сімейство команд `git remote` використовується для налаштування та зміни пультів, \n"
"> пов'язаних з репозиторієм. Ось деякі з найбільш корисних:\n"
">\n"
"> * `git remote -v` перераховує всі віддалені репозиторії, які налаштовані (ми вже використовували \n"
"> це в останньому епізоді)\n"
"> * `git remote add [name] [url]` використовується для додавання нового віддаленого репозиторію\n"
"> * `git remote remove [name]` видаляє пульт дистанційного керування. Зауважте, що це взагалі не впливає на \n"
"> віддалений репозиторій - він просто видаляє посилання на нього з локального репозиторію.\n"
"> * `git remote set-url [name] [newurl]` змінює URL, який пов`язаний з \n"
"> віддаленим репозиторієм. Це корисно, якщо він перейшов, наприклад, на інший обліковий запис GitHub\n"
"> або з GitHub на інший хостинг. Або, якщо ми зробили помилку при\n"
"> його додаванні!\n"
"> * `git remote rename [oldname] [newname]` змінює місцевий псевдонім, за яким відомий \n"
"> віддалений - його назву. Наприклад, можна використовувати це, щоб змінити `upstream` на `fred`."

#: git-novice/_episodes/08-collab.md:147
msgid ""
"To download the Collaborator's changes from GitHub, the Owner now enters:"
msgstr "Щоб завантажити зміни Колаборанта з GitHub, Власник тепер вводить:"

# code block
#: git-novice/_episodes/08-collab.md:154
msgid ""
"~~~\n"
"remote: Enumerating objects: 4, done.\n"
"remote: Counting objects: 100% (4/4), done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"   9272da5..29aba7c  main     -> origin/main\n"
"Updating 9272da5..29aba7c\n"
"Fast-forward\n"
" pluto.txt | 1 +\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Enumerating objects: 4, done.\n"
"remote: Counting objects: 100% (4/4), done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"   9272da5..29aba7c  main     -> origin/main\n"
"Updating 9272da5..29aba7c\n"
"Fast-forward\n"
" pluto.txt | 1 +\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"

#: git-novice/_episodes/08-collab.md:171
msgid ""
"Now the three repositories (Owner's local, Collaborator's local, and Owner's on\n"
"GitHub) are back in sync."
msgstr ""
"Тепер три сховища (локальний Власника, локальний Колаборанта і Власника на\n"
"GitHub) знову синхронізуються."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:174
msgid "> ## A Basic Collaborative Workflow"
msgstr "> ## Базовий Спільний Робочий Процес"

#: git-novice/_episodes/08-collab.md:175
msgid ""
">\n"
"> In practice, it is good to be sure that you have an updated version of the\n"
"> repository you are collaborating on, so you should `git pull` before making\n"
"> our changes. The basic collaborative workflow would be:\n"
">\n"
"> * update your local repo with `git pull origin main`,\n"
"> * make your changes and stage them with `git add`,\n"
"> * commit your changes with `git commit -m`, and\n"
"> * upload the changes to GitHub with `git push origin main`\n"
">\n"
"> It is better to make many commits with smaller changes rather than\n"
"> of one commit with massive changes: small commits are easier to\n"
"> read and review."
msgstr ""
">\n"
"> На практиці добре бути впевненим, що у вас є оновлена версія репозиторію,\n"
"> з яким ви співпрацюєте, тому перед внесенням наших змін слід зробити `git pull`\n"
"> Основним спільним робочим процесом буде:\n"
">\n"
"> * оновити локальне репо за допомогою `git pull origin main`,\n"
"> * внести свої зміни і перенети їх в зону стейджингу за допомогою `git add`,\n"
"> * закомітити зміни за допомогою `git commit -m`, та\n"
"> * завантажити зміни на GitHub з `git push origin main`\n"
">\n"
"> Краще зробити багато комітів з меншими змінами, ніж\n"
"> один коміт з масивними змінами: маленькі коміти легше\n"
"> читати та переглядати."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:190
msgid "> ## Switch Roles and Repeat"
msgstr "> ## Зміна Ролей і Повторення"

#: git-novice/_episodes/08-collab.md:191
msgid ""
">\n"
"> Switch roles and repeat the whole process."
msgstr ""
">\n"
"> Поміняйтеся ролями та повторіть весь процес."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:195
msgid "> ## Review Changes"
msgstr "> ## Перегляд Змін"

#: git-novice/_episodes/08-collab.md:196
msgid ""
">\n"
"> The Owner pushed commits to the repository without giving any information\n"
"> to the Collaborator. How can the Collaborator find out what has changed with\n"
"> command line? And on GitHub?\n"
">\n"
"> > ## Solution\n"
"> > On the command line, the Collaborator can use ```git fetch origin main```\n"
"> > to get the remote changes into the local repository, but without merging\n"
"> > them. Then by running ```git diff main origin/main``` the Collaborator\n"
"> > will see the changes output in the terminal.\n"
"> >\n"
"> > On GitHub, the Collaborator can go to the repository and click on \n"
"> > \"commits\" to view the most recent commits pushed to the repository."
msgstr ""
">\n"
"> Власник відправив коміти до репозиторію без надання будь-якої інформації\n"
"> Клаборанту. Як Колаборант може дізнатися, що змінилося з\n"
"> командним рядком? А на GitHub?\n"
">\n"
"> > ## Відповідь\n"
"> > В командному рядку, Колаборант може використати ```git fetch origin main```\n"
"> > щоб отримати віддалені зміни в локальному репозиторії, але без їх \n"
"> > об'єднання. Потім запускаючи ```git diff main origin/main```, tКолаборант\n"
"> > побачить результат змін у терміналі.\n"
"> >\n"
"> > В GitHub, Колаборант може перейти в репозиторій і натиснути на \n"
"> > \"commits\", щоб переглянути найновіші коміти, що надсилаються до репозиторію."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:212
msgid "> ## Comment Changes in GitHub"
msgstr "> ## Коментування Змін в GitHub"

#: git-novice/_episodes/08-collab.md:213
msgid ""
">\n"
"> The Collaborator has some questions about one line change made by the Owner and\n"
"> has some suggestions to propose.\n"
">\n"
"> With GitHub, it is possible to comment on the diff of a commit. Over the line of\n"
"> code to comment, a blue comment icon appears to open a comment window.\n"
">\n"
"> The Collaborator posts her comments and suggestions using the GitHub interface."
msgstr ""
">\n"
"> У Колаборанта є деякі питання про зміни в одній лінії, зроблені Власником, і\n"
"> він має деякі пропозиції.\n"
">\n"
"> З GitHub можна коментувати різницю коміту.  По лінії коду\n"
"> для коментування, з'явиться синій значок коментаря, щоб відкрити вікно коментаря.\n"
">\n"
"> Колаборант публікує свої коментарі та пропозиції за допомогою інтерфейсу GitHub."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:223
msgid "> ## Version History, Backup, and Version Control"
msgstr "> ## Історія версій, Резервне Копіювання та Контроль Версій"

#: git-novice/_episodes/08-collab.md:224
msgid ""
">\n"
"> Some backup software can keep a history of the versions of your files. They also\n"
"> allows you to recover specific versions. How is this functionality different from version control?\n"
"> What are some of the benefits of using version control, Git and GitHub?"
msgstr ""
">\n"
"> Деякі програми резервного копіювання можуть зберігати історію версій ваших файлів. Вони також\n"
"> дозволяють відновити певні версії. Чим цей функціонал відрізняється від контролю версій?\n"
"> Які переваги використання контролю версій, Git і GitHub?"

# Front Matter
#: git-novice/_episodes/09-conflict.md:1
msgid ""
"---\n"
"title: Conflicts\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"What do I do when my changes conflict with someone else's?\"\n"
"objectives:\n"
"- \"Explain what conflicts are and when they can occur.\"\n"
"- \"Resolve conflicts resulting from a merge.\"\n"
"keypoints:\n"
"- \"Conflicts occur when two or more people change the same lines of the same file.\"\n"
"- \"The version control system does not allow people to overwrite each other's changes blindly, but highlights conflicts so that they can be resolved.\"\n"
"---"
msgstr ""
"---\n"
"title: Конфлікти\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"Що робити, коли мої зміни конфліктують з чужими?\"\n"
"objectives:\n"
"- \"Пояснити, що таке конфлікти і коли вони можуть виникнути.\"\n"
"- \"Вирішення конфліктів, що виникають внаслідок об`єднання.\"\n"
"keypoints:\n"
"- \"Конфлікти виникають, коли двоє або більше людей змінюють однакові рядки одного файлу.\"\n"
"- \"Система контролю версій не дозволяє людям перезаписувати зміни один одного наосліп, але виділяє конфлікти, щоб їх можна було вирішити.\"\n"
"---"

#: git-novice/_episodes/09-conflict.md:15
msgid ""
"As soon as people can work in parallel, they'll likely step on each other's\n"
"toes.  This will even happen with a single person: if we are working on\n"
"a piece of software on both our laptop and a server in the lab, we could make\n"
"different changes to each copy.  Version control helps us manage these\n"
"[conflicts]({{ page.root}}{% link reference.md %}#conflict) by giving us tools to\n"
"[resolve]({{ page.root }}{% link reference.md %}#resolve) overlapping changes."
msgstr ""
"Як тільки люди можуть працювати паралельно, вони, швидше за все, \"наступлять один\n"
"на одного\".  Це станеться навіть з однією людиною: якщо ми працюємо\n"
"над частиною програмного забезпечення як на нашому ноутбуці, так і на сервері в лабораторії, ми можемо внести\n"
"різні зміни в кожну копію.  Контроль версій допомагає нам керувати ними\n"
"[конфлікти]({{ page.root}}{% link reference.md %}#conflict) надаючи нам інструменти для\n"
"[вирішення]({{ page.root }}{% link reference.md %}#resolve) змін, що перекриваються."

#: git-novice/_episodes/09-conflict.md:22
msgid ""
"To see how we can resolve conflicts, we must first create one.  The file\n"
"`mars.txt` currently looks like this in both partners' copies of our `planets`\n"
"repository:"
msgstr ""
"Щоб побачити, як ми можемо вирішити конфлікти, ми повинні спочатку створити їх. Файл\n"
"`mars.txt` в даний час виглядає так в обох копіях партнерів нашого `planets`\n"
"репозиторію:"

#: git-novice/_episodes/09-conflict.md:38
msgid "Let's add a line to the collaborator's copy only:"
msgstr "Додамо лише рядок до копії колаборанта:"

# code block
#: git-novice/_episodes/09-conflict.md:46
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to Wolfman's copy\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to Wolfman's copy\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:54
msgid "and then push the change to GitHub:"
msgstr "а потім відправимо наші зміни на GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:56
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:62
msgid ""
"~~~\n"
"[main 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:73
msgid ""
"~~~\n"
"Enumerating objects: 5, done.\n"
"Counting objects: 100% (5/5), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.\n"
"Total 3 (delta 2), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   29aba7c..dabb4c8  main -> main\n"
"~~~"
msgstr ""
"~~~\n"
"Enumerating objects: 5, done.\n"
"Counting objects: 100% (5/5), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.\n"
"Total 3 (delta 2), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   29aba7c..dabb4c8  main -> main\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:86
msgid ""
"Now let's have the owner\n"
"make a different change to their copy\n"
"*without* updating from GitHub:"
msgstr ""
"Тепер давайте власник зробить \n"
"іншу зміну своєї копії *без* \n"
"оновлення з GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:96
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:104
msgid "We can commit the change locally:"
msgstr "Ми можемо комітнути наші зміни локально:"

# code block
#: git-novice/_episodes/09-conflict.md:106
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:112
msgid ""
"~~~\n"
"[main 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:118
msgid "but Git won't let us push it to GitHub:"
msgstr "але Git не дозволить нам відправити зміни на GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:125
msgid ""
"~~~\n"
"To https://github.com/vlad/planets.git\n"
" ! [rejected]        main -> main (fetch first)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the remote contains work that you do\n"
"hint: not have locally. This is usually caused by another repository pushing\n"
"hint: to the same ref. You may want to first integrate the remote changes\n"
"hint: (e.g., 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"
msgstr ""
"~~~\n"
"To https://github.com/vlad/planets.git\n"
" ! [rejected]        main -> main (fetch first)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the remote contains work that you do\n"
"hint: not have locally. This is usually caused by another repository pushing\n"
"hint: to the same ref. You may want to first integrate the remote changes\n"
"hint: (e.g., 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:137
msgid "![The Conflicting Changes]({{ site.baseurl }}/fig/conflict.svg)"
msgstr "![Суперечливі зміни]({{ site.baseurl }}/fig/conflict.svg)"

#: git-novice/_episodes/09-conflict.md:139
msgid ""
"Git rejects the push because it detects that the remote repository has new updates that have not been\n"
"incorporated into the local branch.\n"
"What we have to do is pull the changes from GitHub,\n"
"[merge]({{ page.root }}{% link reference.md %}#merge) them into the copy we're currently working in, and then push that.\n"
"Let's start by pulling:"
msgstr ""
"Git відкидає це відправлення, оскільки виявляє, що віддалений репозиторій має нові оновлення, які не були\n"
"включені до локальної гілки.\n"
"Що ми повинні зробити, це витягнути зміни з GitHub,\n"
"[об`єднати]({{ page.root }}{% link reference.md %}#merge) їх у копію, в якій ми зараз працюємо, а потім відправити їх.\n"
"Давайте почнемо з отримання змін:"

# code block
#: git-novice/_episodes/09-conflict.md:150
msgid ""
"~~~\n"
"remote: Enumerating objects: 5, done.\n"
"remote: Counting objects: 100% (5/5), done.\n"
"remote: Compressing objects: 100% (1/1), done.\n"
"remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    29aba7c..dabb4c8  main     -> origin/main\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Enumerating objects: 5, done.\n"
"remote: Counting objects: 100% (5/5), done.\n"
"remote: Compressing objects: 100% (1/1), done.\n"
"remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    29aba7c..dabb4c8  main     -> origin/main\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:165
msgid ""
"The `git pull` command updates the local repository to include those\n"
"changes already included in the remote repository.\n"
"After the changes from remote branch have been fetched, Git detects that changes made to the local copy \n"
"overlap with those made to the remote repository, and therefore refuses to merge the two versions to\n"
"stop us from trampling on our previous work. The conflict is marked in\n"
"in the affected file:"
msgstr ""
"Команда `git pull` оновлює локальний репозиторій, щоб включити ті зміни,\n"
"які вже включені у віддаленому репозиторії.\n"
"Після того, як зміни з віддаленої гілки були отримані, Git виявляє, що зміни, внесені до локальної копії, \n"
"перекриваються з тими, що вносяться до віддаленого сховища, і тому відмовляється об'єднати дві версії, \n"
"щоб зупинити нас від видалення нашої попередньої роботи. Конфлікт позначений у \n"
"файлі, що постраждав:"

# code block
#: git-novice/_episodes/09-conflict.md:177
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to Wolfman's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to Wolfman's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:189
msgid ""
"Our change is preceded by `<<<<<<< HEAD`.\n"
"Git has then inserted `=======` as a separator between the conflicting changes\n"
"and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n"
"(The string of letters and digits after that marker\n"
"identifies the commit we've just downloaded.)"
msgstr ""
"Нашим змінам передує `<<<<<<< HEAD`.\n"
"Потім Git вставив `=======` як роздільник між конфліктуючими змінами і\n"
"позначив кінець вмісту, завантаженого з GitHub за допомогою `>>>>>>>`.\n"
"(Рядок букв і цифр після цього маркера\n"
"ідентифікує щойно завантажений коміт.)"

#: git-novice/_episodes/09-conflict.md:195
msgid ""
"It is now up to us to edit this file to remove these markers\n"
"and reconcile the changes.\n"
"We can do anything we want: keep the change made in the local repository, keep\n"
"the change made in the remote repository, write something new to replace both,\n"
"or get rid of the change entirely.\n"
"Let's replace both so that the file looks like this:"
msgstr ""
"Тепер ми маємо відредагувати цей файл, щоб видалити ці маркери\n"
"та узгодити зміни.\n"
"Ми можемо зробити все, що хочемо: зберегти зміни, зроблені в локальному сховищі, зберегти\n"
"зміни, зроблені у віддаленому сховищі, написати щось нове, щоб замінити обидва,\n"
"або позбутися від змін повністю.\n"
"Давайте замінимо обидва так, щоб файл виглядав наступним чином:"

# code block
#: git-novice/_episodes/09-conflict.md:207
#: git-novice/_episodes/09-conflict.md:299
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:215
msgid ""
"To finish merging,\n"
"we add `mars.txt` to the changes being made by the merge\n"
"and then commit:"
msgstr ""
"Щоб закінчити злиття,\n"
"ми додаємо `mars.txt` до змін, що вносяться об`єднанням, а потім\n"
"комітимо:"

# code block
#: git-novice/_episodes/09-conflict.md:219
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:225
msgid ""
"~~~\n"
"On branch main\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:237
msgid ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:242
msgid ""
"~~~\n"
"[main 2abf2b1] Merge changes from GitHub\n"
"~~~"
msgstr ""
"~~~\n"
"[main 2abf2b1] Merge changes from GitHub\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:247
msgid "Now we can push our changes to GitHub:"
msgstr "Тепер ми можемо відправити наші зміни на GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:254
msgid ""
"~~~\n"
"Enumerating objects: 10, done.\n"
"Counting objects: 100% (10/10), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.\n"
"Total 6 (delta 4), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (4/4), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   dabb4c8..2abf2b1  main -> main\n"
"~~~"
msgstr ""
"~~~\n"
"Enumerating objects: 10, done.\n"
"Counting objects: 100% (10/10), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.\n"
"Total 6 (delta 4), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (4/4), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   dabb4c8..2abf2b1  main -> main\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:267
msgid ""
"Git keeps track of what we've merged with what,\n"
"so we don't have to fix things by hand again\n"
"when the collaborator who made the first change pulls again:"
msgstr ""
"Git відстежує те, що ми об'єднали з чим, \n"
"тому нам не потрібно знову виправляти речі вручну\n"
"коли колаборант, який зробив першу зміну, знову отримує ці зміни:"

# code block
#: git-novice/_episodes/09-conflict.md:276
msgid ""
"~~~\n"
"remote: Enumerating objects: 10, done.\n"
"remote: Counting objects: 100% (10/10), done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    dabb4c8..2abf2b1  main     -> origin/main\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Enumerating objects: 10, done.\n"
"remote: Counting objects: 100% (10/10), done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    dabb4c8..2abf2b1  main     -> origin/main\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:292
msgid "We get the merged file:"
msgstr "Ми отримуємо об'єднаний файл:"

#: git-novice/_episodes/09-conflict.md:307
msgid ""
"We don't need to merge again because Git knows someone has already done "
"that."
msgstr ""
"Нам не потрібно знову об`єднуватися, тому що Git знає, що хтось це вже "
"зробив."

#: git-novice/_episodes/09-conflict.md:309
msgid ""
"Git's ability to resolve conflicts is very useful, but conflict resolution\n"
"costs time and effort, and can introduce errors if conflicts are not resolved\n"
"correctly. If you find yourself resolving a lot of conflicts in a project,\n"
"consider these technical approaches to reducing them:"
msgstr ""
"Здатність Git вирішувати конфлікти дуже корисна, але вирішення конфліктів \n"
"вимагає часу і зусиль, і може виводити помилки, якщо конфлікти не вирішуються\n"
"правильно. Якщо ви виявите, що вирішуєте багато конфліктів у проєкті,\n"
"розгляньте ці технічні підходи до їх зменшення::"

# unordered list
#: git-novice/_episodes/09-conflict.md:314
msgid ""
"- Pull from upstream more frequently, especially before starting new work"
msgstr "- Отримувати зміни частіше, особливо перед початком нової роботи"

# unordered list
#: git-novice/_episodes/09-conflict.md:315
msgid "- Use topic branches to segregate work, merging to main when complete"
msgstr ""
"- Використовуйте тематичні гілки для розділення роботи, об'єднання до main, "
"коли завершили"

# unordered list
#: git-novice/_episodes/09-conflict.md:316
msgid "- Make smaller more atomic commits"
msgstr "- Зробити менше величезних комітів"

# unordered list
#: git-novice/_episodes/09-conflict.md:317
msgid ""
"- Where logically appropriate, break large files into smaller ones so that "
"it is"
msgstr "- Там, де логічно доречно, розбити великі файли на менші, щоб було"

#: git-novice/_episodes/09-conflict.md:318
msgid "  less likely that two authors will alter the same file simultaneously"
msgstr "  менше шансів, що два автори змінять один і той самий файл одночасно"

#: git-novice/_episodes/09-conflict.md:320
msgid "Conflicts can also be minimized with project management strategies:"
msgstr ""
"Конфлікти також можна мінімізувати за допомогою стратегій управління "
"проєктами:"

# unordered list
#: git-novice/_episodes/09-conflict.md:322
msgid "- Clarify who is responsible for what areas with your collaborators"
msgstr "- Уточнюйте, хто відповідає за які сфери з вашими колаборантами"

# unordered list
#: git-novice/_episodes/09-conflict.md:323
msgid ""
"- Discuss what order tasks should be carried out in with your collaborators "
"so"
msgstr ""
"- Обговорити, які завдання повинні виконуватися з вашими колаборантами, щоб"

#: git-novice/_episodes/09-conflict.md:324
msgid ""
"  that tasks expected to change the same lines won't be worked on simultaneously\n"
"- If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a\n"
"  project convention that is governing and use code style tools (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) to enforce, if necessary"
msgstr ""
"  завдання, які очікують зміни одних і тих же ліній, не працювали одночасно\n"
"- Якщо конфлікти є стилістичними (наприклад, таби vs. пробіли), втсановіть\n"
"  угоду проєкту, яка регулює та використовує інструменти стилю коду (наприклад, \n"
"  `htmltidy`, `perltidy`, `rubocop`, тд.) для виконання, якщо це необхідно"

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:329
msgid "> ## Solving Conflicts that You Create"
msgstr "> ## Вирішення Конфліктів, які Ви Створюєте"

#: git-novice/_episodes/09-conflict.md:330
msgid ""
">\n"
"> Clone the repository created by your instructor.\n"
"> Add a new file to it,\n"
"> and modify an existing file (your instructor will tell you which one).\n"
"> When asked by your instructor,\n"
"> pull her changes from the repository to create a conflict,\n"
"> then resolve it."
msgstr ""
">\n"
"> Клонуйте репозиторій, створений вашим інструктором.\n"
"> Додайте до нього новий файл,\n"
"> і змініть існуючий файл (ваш інструктор скаже, який з них).\n"
"> За вказівкою вашого інструктора,\n"
"> отримайте його зміни з репозиторію, щоб створити конфлікт,\n"
"> а потім вирішіть його."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:339
msgid "> ## Conflicts on Non-textual files"
msgstr "> ## Конфлікти на Нетекстових файлах"

#: git-novice/_episodes/09-conflict.md:340
msgid ""
">\n"
"> What does Git do\n"
"> when there is a conflict in an image or some other non-textual file\n"
"> that is stored in version control?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Let's try it. Suppose Dracula takes a picture of Martian surface and\n"
"> > calls it `mars.jpg`.\n"
"> >\n"
"> > If you do not have an image file of Mars available, you can create\n"
"> > a dummy binary file like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ head -c 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` shows us that this created a 1-kilobyte file. It is full of\n"
"> > random bytes read from the special file, `/dev/urandom`.\n"
"> >\n"
"> > Now, suppose Dracula adds `mars.jpg` to his repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Suppose that Wolfman has added a similar picture in the meantime.\n"
"> > His is a picture of the Martian sky, but it is *also* called `mars.jpg`.\n"
"> > When Dracula tries to push, he gets a familiar message:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        main -> main (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"> > hint: Updates were rejected because the remote contains work that you do\n"
"> > hint: not have locally. This is usually caused by another repository pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We've learned that we must pull first and resolve any conflicts:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > When there is a conflict on an image or other binary file, git prints\n"
"> > a message like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  main     -> origin/main\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The conflict message here is mostly the same as it was for `mars.txt`, but\n"
"> > there is one key additional line:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git cannot automatically insert conflict markers into an image as it does\n"
"> > for text files. So, instead of editing the image file, we must check out\n"
"> > the version we want to keep. Then we can add and commit this version.\n"
"> >\n"
"> > On the key line above, Git has conveniently given us commit identifiers\n"
"> > for the two versions of `mars.jpg`. Our version is `HEAD`, and Wolfman's\n"
"> > version is `439dc8c0...`. If we want to use our version, we can use\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > If instead we want to use Wolfman's version, we can use `git checkout` with\n"
"> > Wolfman's commit identifier, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can also keep *both* images. The catch is that we cannot keep them\n"
"> > under the same name. But, we can check out each version in succession\n"
"> > and *rename* it, then add the renamed versions. First, check out each\n"
"> > image and rename it:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Then, remove the old `mars.jpg` and add the two new files:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Now both images of Mars are checked into the repository, and `mars.jpg`\n"
"> > no longer exists."
msgstr ""
">\n"
"> Що робить Git\n"
"> коли виникає конфлікт у зображені або іншому нетекстовому файлі,\n"
"> що зберігається в контролі версій?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Давайте спробуємо. Припустимо, Dracula робить фотографію Марсіанської поверхні та\n"
"> > називає її `mars.jpg`.\n"
"> >\n"
"> > Якщо у вас немає файлу зображення Марса, ви мжете створити\n"
"> > фіктивний бінарний файл ось так:\n"
"> >\n"
"> > ~~~\n"
"> > $ head -c 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` показує нам, що було створено 1-кілобайт файл. Він повний\n"
"> > випадкових байтів, прочитаних з спеціального файлу, `/dev/urandom`.\n"
"> >\n"
"> > Тепер, припустимо, Dracula додає `mars.jpg` до його репозиторію:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Припустимо, що Wolfman тим часом додав схожу фотографію.\n"
"> > Його зображення - марсіанське небо, але воно *також* названо `mars.jpg`.\n"
"> > Коли Dracula намагається відправити зміни, він отримує знайоме повідомлення:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        main -> main (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"> > hint: Updates were rejected because the remote contains work that you do\n"
"> > hint: not have locally. This is usually caused by another repository pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ми дізналися, що повинні спочатку отримувати зміни і вирішувати будь-які конфлікти:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Коли виникає конфлікт на зображенні або іншому двійковому файлі, git друкує\n"
"> > таке повідомлення:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  main     -> origin/main\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Повідомлення про конфлікт тут в основному таке ж, як і для `mars.txt`, але \n"
"> > є один ключовий рядок:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git не може автоматично вставляти конфліктні маркери в зображення, як це робить\n"
"> > для текстових файлів. Отже, замість редагування файлу зображення, ми повинні перевірити\n"
"> > tверсію, яку ми хочемо зберегти. Потім ми можемо додати і комітнути цю версію.\n"
"> >\n"
"> > На ключовій лінії вище, Git зручно дав нам ідентифікатори коміту\n"
"> > для двох версій `mars.jpg`. Наша версія `HEAD`, а версія Wolfman \n"
"> > `439dc8c0...`. Якщо ми хочемо використовувати нашу версію, ми можемо використати\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Якщо замість цього ми хочемо використовувати версію Wolfman, ми можемо використовувати `git checkout`\n"
"> > з ідентифікатором коміту Wolfman, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ми також можемо зберігати *обидва* зображення. Загвоздка в тому, що ми не можемо їх залишити\n"
"> > під однією й тією ж назвою. Але, ми можемо перевірити кожну версію послідовно\n"
"> > і *перейменувати* файл, потім додати перейменовані версії. Спочатку перевірте кожне \n"
"> > зображення і перейменуйте його:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Потім видаліть старий `mars.jpg` і додайте два нових файли:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Тепер обидва зображення Марса перевіряються в репозиторії, і `mars.jpg`\n"
"> > більше не існує."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:509
msgid "> ## A Typical Work Session"
msgstr "> ## Типова Робоча Сесія"

#: git-novice/_episodes/09-conflict.md:510
msgid ""
">\n"
"> You sit down at your computer to work on a shared project that is tracked in a\n"
"> remote Git repository. During your work session, you take the following\n"
"> actions, but not in this order:\n"
">\n"
"> - *Make changes* by appending the number `100` to a text file `numbers.txt`\n"
"> - *Update remote* repository to match the local repository\n"
"> - *Celebrate* your success with some fancy beverage(s)\n"
"> - *Update local* repository to match the remote repository\n"
"> - *Stage changes* to be committed\n"
"> - *Commit changes* to the local repository\n"
">\n"
"> In what order should you perform these actions to minimize the chances of\n"
"> conflicts? Put the commands above in order in the *action* column of the table\n"
"> below. When you have the order right, see if you can write the corresponding\n"
"> commands in the *command* column. A few steps are populated to get you\n"
"> started.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . |\n"
"> > |-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin main`                     |\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    |\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        |\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt\"`     |\n"
"> > |5    | Update remote     | `git push origin main`                     |\n"
"> > |6    | Celebrate!        | `AFK`                                        |"
msgstr ""
">\n"
"> Ви сідаєте за комп'ютер, щоб працювати над спільним проєктом, який відстежується у\n"
"> віддаленому репозиторії Git. Під час робочого сеансу ви приймаєте наступні\n"
"> дії, але не в цьому порядку:\n"
">\n"
"> - *Внесіть зміни *, додавши число '100' до текстового файлуe `numbers.txt`\n"
"> - *Оновіть віддалений* репозиторій, щоб відповідати локальному репозиторію\n"
"> - *Святкуйте* свій успіх з якимось напоєм(-ями)\n"
"> - *Оновіть локальний* репозиторій, щоб відповідати віддаленому репозиторію\n"
"> - *Перенесіть зміни в зону стейджингу*, щоб зробити коміт\n"
"> - *Комітніть зміни* до локального репозиторію\n"
">\n"
"> В якому порядку слід виконувати ці дії, щоб мінімізувати шанси \n"
"> конфліктів? Наведіть команди вище в порядок, у стовпці *action* в таблиці\n"
"> нижче. Коли ви розставите все у відповідному порядку, подивіться, чи можете ви написати відповідні команди в стовпці\n"
"> *command*. Кілька кроків вже заповнені, щоб допомогти вам \n"
"> розпочати.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . |\n"
"> > |-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin main`                     |\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    |\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        |\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt\"`     |\n"
"> > |5    | Update remote     | `git push origin main`                     |\n"
"> > |6    | Celebrate!        | `AFK`                                        |"

# Front Matter
#: git-novice/_episodes/10-open.md:1
msgid ""
"---\n"
"title: Open Science\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"How can version control help me make my work more open?\"\n"
"objectives:\n"
"- \"Explain how a version control system can be leveraged as an electronic lab notebook for computational work.\"\n"
"keypoints:\n"
"- \"Open scientific work is more useful and more highly cited than closed.\"\n"
"---"
msgstr ""
"---\n"
"title: Відкрита Наука\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"Як контроль версій допоможе мені зробити мою роботу більш відкритою?\"\n"
"objectives:\n"
"- \"Пояснити як система контролю версій може бути використана як електронний лабораторний ноутбук для обчислювальної роботи.\"\n"
"keypoints:\n"
"- \"Відкрита наукова робота більш корисна і більш високо цитована, ніж закрита.\"\n"
"---"

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:13
msgid "> The opposite of \"open\" isn't \"closed\"."
msgstr "> Протилежність \"відкрита\" не є \"закрита\"."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:14
msgid "> The opposite of \"open\" is \"broken\"."
msgstr "> Протилежність \"відкритої\" є \"зламана\"."

#: git-novice/_episodes/10-open.md:15
msgid ""
">\n"
"> --- John Wilbanks"
msgstr ""
">\n"
"> --- John Wilbanks"

# SC/DC Template label
#: git-novice/_episodes/10-open.md:17
msgid "{: .quotation}"
msgstr "{: .quotation}"

#: git-novice/_episodes/10-open.md:19
msgid ""
"Free sharing of information might be the ideal in science,\n"
"but the reality is often more complicated.\n"
"Normal practice today looks something like this:"
msgstr ""
"Вільний обмін інформацією може бути ідеальним в науці,\n"
"але реальність часто складніша.\n"
"Нормальна практика сьогодні виглядає приблизно так:"

# unordered list
#: git-novice/_episodes/10-open.md:23
msgid "*   A scientist collects some data and stores it on a machine"
msgstr "*   Вчений збирає деякі дані і зберігає їх на машині,"

#: git-novice/_episodes/10-open.md:24
msgid ""
"    that is occasionally backed up by her department.\n"
"*   She then writes or modifies a few small programs\n"
"    (which also reside on her machine)\n"
"    to analyze that data.\n"
"*   Once she has some results,\n"
"    she writes them up and submits her paper.\n"
"    She might include her data -- a growing number of journals require this -- but\n"
"    she probably doesn't include her code.\n"
"*   Time passes.\n"
"*   The journal sends her reviews written anonymously by a handful of other people in her field.\n"
"    She revises her paper to satisfy them,\n"
"    during which time she might also modify the scripts she wrote earlier,\n"
"    and resubmits.\n"
"*   More time passes.\n"
"*   The paper is eventually published.\n"
"    It might include a link to an online copy of her data,\n"
"    but the paper itself will be behind a paywall:\n"
"    only people who have personal or institutional access\n"
"    will be able to read it."
msgstr ""
"    яка іноді підтримується його департаментом\n"
"*   Потім він пише або змінює кілька невеликих програм\n"
"    (які також знаходяться на його машині),\n"
"    щоб аналізувати ці дані.\n"
"*   Як тільки він має деякі результати,\n"
"    він пише їх і подає свою статтю.\n"
"    Він може включати свої дані - все більше число журналів вимагають цього - але\n"
"    він, ймовірно, не включає свій код.\n"
"*   Час проходить.\n"
"*   Журнал надсилає йому відгуки, написані анонімно кількома іншими людьми в його області.\n"
"    Він переглядає свою статтю, щоб задовольнити їх,\n"
"    за цей час він також може змінити скрипти, які він написав раніше,\n"
"    та перепубліковує.\n"
"*   Проходить більше часу.\n"
"*   Зрештою стаття опублікована.\n"
"   Вона може включати посилання на онлайн-копію його даних,\n"
"    але сама стаття буде платною:\n"
"    тільки люди, які мають особистий або інституційний доступ\n"
"зможуть її прочитати."

#: git-novice/_episodes/10-open.md:44
msgid ""
"For a growing number of scientists,\n"
"though,\n"
"the process looks like this:"
msgstr ""
"Хоча, для зростаючого числа вчених\n"
"процес\n"
"виглядає так:"

# unordered list
#: git-novice/_episodes/10-open.md:48
msgid ""
"*   The data that the scientist collects is stored in an open access "
"repository"
msgstr ""
"*   Дані, які збирає вчений, зберігаються у репозиторії відкритого доступу"

#: git-novice/_episodes/10-open.md:49
msgid ""
"    like [figshare](https://figshare.com/) or\n"
"    [Zenodo](https://zenodo.org), possibly as soon as it's collected,\n"
"    and given its own\n"
"    [Digital Object Identifier](https://en.wikipedia.org/wiki/Digital_object_identifier) (DOI).\n"
"    Or the data was already published and is stored in\n"
"    [Dryad](https://datadryad.org/).\n"
"*   The scientist creates a new repository on GitHub to hold her work.\n"
"*   As she does her analysis,\n"
"    she pushes changes to her scripts\n"
"    (and possibly some output files)\n"
"    to that repository.\n"
"    She also uses the repository for her paper;\n"
"    that repository is then the hub for collaboration with her colleagues.\n"
"*   When she's happy with the state of her paper,\n"
"    she posts a version to [arXiv](https://arxiv.org/)\n"
"    or some other preprint server\n"
"    to invite feedback from peers.\n"
"*   Based on that feedback,\n"
"    she may post several revisions\n"
"    before finally submitting her paper to a journal.\n"
"*   The published paper includes links to her preprint\n"
"    and to her code and data repositories,\n"
"    which  makes it much easier for other scientists\n"
"    to use her work as starting point for their own research."
msgstr ""
"    як [figshare](https://figshare.com/) або\n"
"    [Zenodo](https://zenodo.org), ймовірно, як тільки ці дані були зібрані,\n"
"    і з огляду на свій\n"
"    [Цифровий ідентифікатор об`єкта](https://en.wikipedia.org/wiki/Digital_object_identifier) (DOI).\n"
"    Або дані вже були опубліковані і зберігаються в\n"
"    [Dryad](https://datadryad.org/).\n"
"*   Вчений створює нове сховище на GitHub для проведення своєї роботи.\n"
"*   Як він зробить свій аналіз,\n"
"    він відправляє зміни його скриптів\n"
"    (і, можливо, деякі вихідні файли)\n"
"    до цього репозиторію.\n"
"    Він також використовує сховище для своєї статті;\n"
"    цей репозиторій тоді є хабом для співпраці з його колегами.\n"
"*   Коли він задоволений станом своєї статті,\n"
"    він публікує версію на [arXiv](https://arxiv.org/)\n"
"    або інший сервер для друку,\n"
"    щоб запросити колег до написання відгуків.\n"
"*   На основі цих відгуків,\n"
"    він може опублікувати кілька редакцій\n"
"    перед тим, як нарешті подати свою статтю в журнал.\n"
"*   Опублікована стаття включає посилання на її препринт\n"
"    і до його коду та сховищ даних,\n"
"    що значно полегшує роботу іншим вченим\n"
"    використовувати його роботу як відправну точку для власних досліджень."

#: git-novice/_episodes/10-open.md:74
msgid ""
"This open model accelerates discovery:\n"
"the more open work is,\n"
"[the more widely it is cited and re-used](https://doi.org/10.1371/journal.pone.0000308).\n"
"However,\n"
"people who want to work this way need to make some decisions\n"
"about what exactly \"open\" means and how to do it. You can find more on the different aspects of Open Science in [this book](https://link.springer.com/book/10.1007/978-3-319-00026-8)."
msgstr ""
"Ця відкрита модель прискорює дослідження:\n"
"чим робота є більш відкритою,\n"
"[тим ширше вона цитується і повторно використовується](https://doi.org/10.1371/journal.pone.0000308).\n"
"Однак\n"
"людям, які хочуть працювати таким чином, потрібно приймати певні рішення\n"
"про те, що саме означає «відкрити» і як це зробити. Ви можете знайти більше про різні аспекти відкритої науки в [цій книзі](https://link.springer.com/book/10.1007/978-3-319-00026-8)."

#: git-novice/_episodes/10-open.md:81
msgid ""
"This is one of the (many) reasons we teach version control.\n"
"When used diligently,\n"
"it answers the \"how\" question\n"
"by acting as a shareable electronic lab notebook for computational work:"
msgstr ""
"Це одна з (багатьох) причин, чому ми навчаємо контролю версій.\n"
"Коли використовується старанно,\n"
"він відповідає на питання «як»,\n"
"діючи як електронний лабораторний ноутбук для обчислювальної роботи:"

# unordered list
#: git-novice/_episodes/10-open.md:86
msgid ""
"*   The conceptual stages of your work are documented, including who did"
msgstr ""
"*   Концептуальні етапи вашої роботи документовані, в тому числі, хто що і "
"коли"

#: git-novice/_episodes/10-open.md:87
msgid ""
"    what and when. Every step is stamped with an identifier (the commit ID)\n"
"    that is for most intents and purposes unique.\n"
"*   You can tie documentation of rationale, ideas, and other\n"
"    intellectual work directly to the changes that spring from them.\n"
"*   You can refer to what you used in your research to obtain your\n"
"    computational results in a way that is unique and recoverable.\n"
"*   With a version control system such as Git, \n"
"    the entire history of the repository is easy to archive for perpetuity."
msgstr ""
"    зробив. Кожен крок \"штампується\" ідентифікатором (ідентифікатор коміту),\n"
"    тобто для більшості намірів і цілей унікальний.\n"
"*   Ви можете прив'язати документацію обгрунтування, ідеї та іншу\n"
"    інтелектуальну роботу безпосередньо до змін, які виходять з них.\n"
"*   Ви можете звернутися до того, що ви використовували в своїх дослідженнях,\n"
"    щоб отримати ваші обчислювальні результати унікальним і відновлюваним чином.\n"
"*   За допомогою системи керування версіями, такої як Git, \n"
"    всю історію репозиторію легко архівувати на невизначений термін."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:96
msgid "> ## Making Code Citable"
msgstr "> ## Створення Коду можливим для Цитування"

#: git-novice/_episodes/10-open.md:97
msgid ""
">\n"
"> Anything that is hosted in a version control repository (data, code, papers, \n"
"> etc.) can be turned into a citable object. You'll learn how to do this in\n"
"> [the later episode on Citation]({{ page.root }}{% link _episodes/12-citation.md %})."
msgstr ""
">\n"
"> Все, що розміщується в репозиторії контролю версій (дані, код, статті,\n"
"> і т.д.) можна перетворити на придатний для використання об'єкт. Ви дізнаєтеся, як це зробити в\n"
"> [в пізнішому епізоді про Цитування]({{ page.root }}{% link _episodes/12-citation.md %})."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:103
msgid "> ## How Reproducible Is My Work?"
msgstr "> ## Наскільки Відтворюваною Є Моя Робота?"

#: git-novice/_episodes/10-open.md:104
msgid ""
">\n"
"> Ask one of your labmates to reproduce a result you recently obtained\n"
"> using only what they can find in your papers or on the web.\n"
"> Try to do the same for one of their results,\n"
"> then try to do it for a result from a lab you work with."
msgstr ""
">\n"
"> Попросіть одного з ваших співробітників відтворити результат, який ви нещодавно отримали,\n"
"> використовуючи тільки те, що вони можуть знайти в ваших статтях або в Інтернеті.\n"
"> Спробуйте зробити те ж саме для одного з їх результатів,\n"
"> потім спробуйте зробити це для результату з лабораторії, з якою ви працюєте."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:111
msgid "> ## How to Find an Appropriate Data Repository?"
msgstr "> ## Як Знайти Відповідний Репозиторій Даних?"

#: git-novice/_episodes/10-open.md:112
msgid ""
">\n"
"> Surf the internet for a couple of minutes and check out the data repositories\n"
"> mentioned above: [Figshare](https://figshare.com/), [Zenodo](https://zenodo.org),\n"
"> [Dryad](https://datadryad.org/). Depending on your field of research, you might\n"
"> find community-recognized repositories that are well-known in your field.\n"
"> You might also find useful [these data repositories recommended by Nature](\n"
"> https://www.nature.com/sdata/data-policies/repositories).\n"
"> Discuss with your neighbor which data repository you might want to\n"
"> approach for your current project and explain why."
msgstr ""
">\n"
"> Попрацюйте в Інтернеті протягом декількох хвилин і перевіряйте репозитрії,\n"
"> згаданих вище:: [Figshare](https://figshare.com/), [Zenodo](https://zenodo.org),\n"
"> [Dryad](https://datadryad.org/). Залежно від вашої галузі досліджень, ви можете\n"
"> fзнайти визнані спільнотою сховища, які добре відомі у вашій області.\n"
"> Ви також можете знайти корисними [ці сховища даних, рекомендовані Nature](\n"
"> https://www.nature.com/sdata/data-policies/repositories).\n"
"> Обговоріть зі своїм сусідом, до якого сховища даних ви можете\n"
"> підійти для вашого поточного проєкту, і поясніть, чому."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:123
msgid "> ## How to Track Large Data or Image Files using Git?"
msgstr ""
"> ## Як Відстежувати Великі Дані або Файли Зображень за допомогою Git?"

#: git-novice/_episodes/10-open.md:124
msgid ""
">\n"
"> Large data or image files such as `.md5` or `.psd` file types can be tracked within \n"
"> a github repository using the [Git Large File Storage](https://git-lfs.github.com)\n"
"> open source extension tool.  This tool automatically uploads large file contents to \n"
"> a remote server and replaces the file with a text pointer within the github repository.\n"
"> \n"
"> Try downloading and installing the Git Large File Storage extension tool, then add \n"
"> tracking of a large file to your github repository.  Ask a colleague to clone your\n"
"> repository and describe what they see when they access that large file.   "
msgstr ""
">\n"
"> Великі дані або файли зображень, такі як `.md5` або `.psd` типи файлів можуть бути відстежені в межах \n"
"> репозиторію github, використовуючи [Git Велике Сховище Файлів](https://git-lfs.github.com)\n"
"> інструмент розширення з відкритим кодом. Цей інструмент автоматично завантажує великий вміст файлу\n"
"> на віддалений сервер і замінює файл текстовим вказівником у репозиторії github.\n"
"> \n"
"> Спробуйте завантажити та встановити інструмент розширення Git Large File Storage, а потім додати \n"
"> відстеження великого файлу до сховища github. Попросіть колегу клонувати ваш\n"
"> репозиторій і описати, що вони бачать, коли вони отримують доступ до цього великого файлу. "

# Front Matter
#: git-novice/_episodes/11-licensing.md:1
msgid ""
"---\n"
"title: Licensing\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What licensing information should I include with my work?\"\n"
"objectives:\n"
"- \"Explain why adding licensing information to a repository is important.\"\n"
"- \"Choose a proper license.\"\n"
"- \"Explain differences in licensing and social expectations.\"\n"
"keypoints:\n"
"- \"The `LICENSE`, `LICENSE.md`, or `LICENSE.txt` file is often used in a repository to indicate how the contents of the repo may be used by others.\"\n"
"- \"People who incorporate General Public License (GPL'd) software into their own software must make their software also open under the GPL license; most other open licenses do not require this.\"\n"
"- \"The Creative Commons family of licenses allow people to mix and match requirements and restrictions on attribution, creation of derivative works, further sharing, and commercialization.\"\n"
"- \"People who are not lawyers should not try to write licenses from scratch.\"\n"
"---"
msgstr ""
"---\n"
"title: Ліцензування\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"Яку інформацію про ліцензування я повинен включити у свою роботу?\"\n"
"objectives:\n"
"- \"Пояснення чому додавання ліцензійної інформації до репозиторію є важливим.\"\n"
"- \"Виберіть відповідну ліцензію.\"\n"
"- \"Пояснити відмінності в ліцензуванні та соціальних очікуваннях.\"\n"
"keypoints:\n"
"- \"` Файл LICENSE`, `LICENSE.md`, або `LICENSE.txt` часто використовується в репозиторії, щоб вказати, як вміст репозиторію може використовуватися іншими.\"\n"
"- \"Люди, які включають програмне забезпечення General Public License (GPL'd) у власне програмне забезпечення, повинні зробити своє програмне забезпечення також відкритим під ліцензією GPL; більшість інших відкритих ліцензій цього не вимагають.\"\n"
"- \"Сімейство ліцензій Creative Commons дозволяє людям змішувати та відповідати вимогам та обмеженням щодо атрибуції, створення похідних творів, подальшого спільного використання та комерціалізації.\"\n"
"- \"Люди, які не є юристами, не повинні намагатися писати ліцензії з нуля.\"\n"
"---"

#: git-novice/_episodes/11-licensing.md:18
msgid ""
"When a repository with source code, a manuscript or other creative\n"
"works becomes public, it should include a file `LICENSE` or\n"
"`LICENSE.txt` in the base directory of the repository that clearly\n"
"states under which license the content is being made available. This\n"
"is because creative works are automatically eligible for intellectual\n"
"property (and thus copyright) protection. Reusing creative works\n"
"without a license is dangerous, because the copyright holders could\n"
"sue you for copyright infringement."
msgstr ""
"Коли репозиторій з вихідним кодом, рукописом або іншими творчими\n"
"роботами стає публічним, він повинен включати файл `LICENSE` або\n"
"`LICENSE.txt` у базовому каталозі репозиторію, де чітко\n"
"вказано, під якою ліцензією надається контент. Це\n"
"пояснюється тим, що творчі роботи автоматично мають право на захист інтелектуальної\n"
"власності (і, отже, авторського права). Повторне використання творчих робіт\n"
"без ліцензії є небезпечним, оскільки правовласники можуть\n"
"подати до суду на вас за порушення авторських прав."

#: git-novice/_episodes/11-licensing.md:27
msgid ""
"A license solves this problem by granting rights to others (the\n"
"licensees) that they would otherwise not have. What rights are being\n"
"granted under which conditions differs, often only slightly, from one\n"
"license to another. In practice, a few licenses are by far the most\n"
"popular, and [choosealicense.com](https://choosealicense.com/) will\n"
"help you find a common license that suits your needs.  Important\n"
"considerations include:"
msgstr ""
"Ліцензія вирішує цю проблему, надаючи права іншим (ліцензіатам), яких вони в іншому випадку не мали б. Які права надаються,\n"
"за яких умов відрізняються, часто лише незначно, від однієї\n"
"ліцензії на іншу. На практиці, кілька ліцензій є\n"
"найпопулярнішими, і [choosealicense.com](https://choosealicense.com/)\n"
"допоможе вам знайти загальну ліцензію, яка відповідає вашим потребам. Важливі міркування\n"
"включають:"

# unordered list
#: git-novice/_episodes/11-licensing.md:35
msgid "* Whether you want to address patent rights."
msgstr "* Чи хочете ви вирішити патентні права."

# unordered list
#: git-novice/_episodes/11-licensing.md:36
msgid "* Whether you require people distributing derivative works to also"
msgstr "* Якщо вам потрібно, щоб люди поширювали похідні роботи, щоб "

#: git-novice/_episodes/11-licensing.md:37
msgid ""
"  distribute their source code.\n"
"* Whether the content you are licensing is source code.\n"
"* Whether you want to license the code at all."
msgstr ""
"  також поширювати їх вихідний код..\n"
"* Чи є вміст, який ви ліцензуєте, вихідним кодом.\n"
"* Чи хочете ви ліцензувати код взагалі."

#: git-novice/_episodes/11-licensing.md:41
msgid ""
"Choosing a license that is in common use makes life easier for\n"
"contributors and users, because they are more likely to already be\n"
"familiar with the license and don't have to wade through a bunch of\n"
"jargon to decide if they're ok with it.  The [Open Source\n"
"Initiative](https://opensource.org/licenses) and [Free Software\n"
"Foundation](https://www.gnu.org/licenses/license-list.html) both\n"
"maintain lists of licenses which are good choices."
msgstr ""
"Вибір ліцензії, яка є в загальному використанні полегшує життя для\n"
"учасників і користувачів, тому що вони, швидше за все, вже знайомі з\n"
"ліцензією і не повинні пробиратися через купу\n"
"жаргону, щоб вирішити, чи нормально вони з нею. [Ініціатива з відкритим\n"
"кодом](https://opensource.org/licenses) та [Фонд вільного програмного\n"
"забезпечення](https://www.gnu.org/licenses/license-list.html) підтримують\n"
"списки ліцензій, які є хорошим вибором."

#: git-novice/_episodes/11-licensing.md:49
msgid ""
"[This article][software-licensing] provides an excellent overview of\n"
"licensing and licensing options from the perspective of scientists who\n"
"also write code."
msgstr ""
"[Ця стаття][software-licensing] забезпечує відмінний огляд\n"
"ліцензування та ліцензування варіантів з точки зору вчених,\n"
"які також пишуть код."

#: git-novice/_episodes/11-licensing.md:53
msgid ""
"At the end of the day what matters is that there is a clear statement\n"
"as to what the license is. Also, the license is best chosen from the\n"
"get-go, even if for a repository that is not public. Pushing off the\n"
"decision only makes it more complicated later, because each time a new\n"
"collaborator starts contributing, they, too, hold copyright and will\n"
"thus need to be asked for approval once a license is chosen."
msgstr ""
"Зрештою важливо те, що є чітке твердження\n"
"щодо того, що таке ліцензія. Також ліцензію краще вибирати з\n"
"get-go, навіть якщо для репозиторія, який не є публічним. Відштовхування\n"
"рішення тільки ускладнює його пізніше, тому що кожен раз,\n"
"коли колаборант починає вносити свій внесок, він також володіє авторським правом і,\n"
"таким чином, потрібно буде попросити схвалення, як тільки буде обрана ліцензія."

# blockquote, which can be cascaded
#: git-novice/_episodes/11-licensing.md:60
msgid "> ## Can I Use Open License?"
msgstr "> ## Чи можна використовувати відкриту ліцензію?"

#: git-novice/_episodes/11-licensing.md:61
msgid ""
">\n"
"> Find out whether you are allowed to apply an open license to your software.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"
msgstr ""
">\n"
"> Дізнайтеся, чи дозволено вам застосовувати відкриту ліцензію до вашого програмного забезпечення.\n"
"> Чи можете ви зробити це в односторонньому порядку,\n"
"> або вам потрібен дозвіл від когось у вашому закладі?\n"
"> Якщо так, то хто?"

# blockquote, which can be cascaded
#: git-novice/_episodes/11-licensing.md:68
msgid "> ## What licenses have I already accepted?"
msgstr "> ## Які ліцензії я вже прийняв?"

#: git-novice/_episodes/11-licensing.md:69
msgid ""
">\n"
"> Many of the software tools we use on a daily basis (including in this workshop) are\n"
"> released as open-source software. Pick a project on GitHub from the list below, or\n"
"> one of your own choosing. Find its license (usually in a file called `LICENSE` or\n"
"> `COPYING`) and talk about how it restricts your use of the software. Is it one of\n"
"> the licenses discussed in this session? How is it different?\n"
"> - [Git](https://github.com/git/git), the source-code management tool\n"
"> - [CPython](https://github.com/python/cpython), the standard implementation of the Python language\n"
"> - [Jupyter](https://github.com/jupyter), the project behind the web-based Python notebooks we'll be using\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), a real-time collaborative editor"
msgstr ""
">\n"
"> Багато програмних засобів, які ми використовуємо щодня (в тому числі в цьому семінарі)\n"
"> випущені як відкрите програмне забезпечення. Виберіть проєкт на GitHub зі списку нижче, або\n"
"> один на ваш власний вибір. Знайдіть свою ліцензію (зазвичай у файлі під назвою `LICENSE` або\n"
"> `COPYING`) і поговоріть про те, як це обмежує використання програмного забезпечення. Це одна з\n"
"> ліцензій, обговорена на цій сесії? Чим вона відрізняється?\n"
"> - [Git](https://github.com/git/git), інструмент управління вихідним кодом\n"
"> - [CPython](https://github.com/python/cpython), стандартна реалізація мови Python\n"
"> - [Jupyter](https://github.com/jupyter), проєкт за веб-ноутбуками Python, які ми будемо використовувати\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), редактор спільної роботи в режимі реального часу"

#: git-novice/_episodes/11-licensing.md:81
msgid "[software-licensing]: https://doi.org/10.1371/journal.pcbi.1002598"
msgstr "[software-licensing]: https://doi.org/10.1371/journal.pcbi.1002598"

# Front Matter
#: git-novice/_episodes/12-citation.md:1
msgid ""
"---\n"
"title: Citation\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I make my work easier to cite?\"\n"
"objectives:\n"
"- \"Make your work easy to cite\"\n"
"keypoints:\n"
"- \"Add a CITATION file to a repository to explain how you want your work cited.\"\n"
"---"
msgstr ""
"---\n"
"title: Цитування\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"Як полегшити мою роботу для цитування?\"\n"
"objectives:\n"
"- \"Зробити вашу роботу легко цитуємою\"\n"
"keypoints:\n"
"- \"Додайте файл CITATION до репозиторію, щоб пояснити, як ви хочете цитувати свою роботу.\"\n"
"---"

#: git-novice/_episodes/12-citation.md:13
msgid ""
"You may want to include a file called `CITATION` or `CITATION.txt`\n"
"that describes how to reference your project;\n"
"the [one for Software\n"
"Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/CITATION)\n"
"states:"
msgstr ""
"Ви можете додати файл під назвою `CITATION` або `CITATION.txt`,\n"
"який описує, як цитувати ваш проєкт;\n"
"[один для Software\n"
"Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/CITATION)\n"
"states:"

# code block
#: git-novice/_episodes/12-citation.md:19
msgid ""
"~~~\n"
"To reference Software Carpentry in publications, please cite both of the following:\n"
"\n"
"Greg Wilson: \"Software Carpentry: Getting Scientists to Write Better\n"
"Code by Making Them More Productive\".  Computing in Science &\n"
"Engineering, Nov-Dec 2006.\n"
"\n"
"Greg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448,\n"
"July 2013.\n"
"\n"
"@article{wilson-software-carpentry-2006,\n"
"    author =  {Greg Wilson},\n"
"    title =   {Software Carpentry: Getting Scientists to Write Better Code by Making Them More Productive},\n"
"    journal = {Computing in Science \\& Engineering},\n"
"    month =   {November--December},\n"
"    year =    {2006},\n"
"}\n"
"\n"
"@online{wilson-software-carpentry-2013,\n"
"  author      = {Greg Wilson},\n"
"  title       = {Software Carpentry: Lessons Learned},\n"
"  version     = {1},\n"
"  date        = {2013-07-20},\n"
"  eprinttype  = {arxiv},\n"
"  eprint      = {1307.5448}\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"To reference Software Carpentry in publications, please cite both of the following:\n"
"\n"
"Greg Wilson: \"Software Carpentry: Getting Scientists to Write Better\n"
"Code by Making Them More Productive\".  Computing in Science &\n"
"Engineering, Nov-Dec 2006.\n"
"\n"
"Greg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448,\n"
"July 2013.\n"
"\n"
"@article{wilson-software-carpentry-2006,\n"
"    author =  {Greg Wilson},\n"
"    title =   {Software Carpentry: Getting Scientists to Write Better Code by Making Them More Productive},\n"
"    journal = {Computing in Science \\& Engineering},\n"
"    month =   {November--December},\n"
"    year =    {2006},\n"
"}\n"
"\n"
"@online{wilson-software-carpentry-2013,\n"
"  author      = {Greg Wilson},\n"
"  title       = {Software Carpentry: Lessons Learned},\n"
"  version     = {1},\n"
"  date        = {2013-07-20},\n"
"  eprinttype  = {arxiv},\n"
"  eprint      = {1307.5448}\n"
"}\n"
"~~~"

# SC/DC Template label
#: git-novice/_episodes/12-citation.md:46
#: git-novice/_episodes/12-citation.md:56
msgid "{: .source}"
msgstr "{: .source}"

#: git-novice/_episodes/12-citation.md:48
msgid ""
"More detailed advice, and other ways to make your code citable can be found\n"
"[at the Software Sustainability Institute blog](https://www.software.ac.uk/how-cite-and-describe-software) and in:"
msgstr ""
"Більш детальні поради та інші способи зробити ваш код цитованим можна знайти\n"
"[в блозі Software Sustainability Institute](https://www.software.ac.uk/how-cite-and-describe-software) and in:"

# code block
#: git-novice/_episodes/12-citation.md:51
msgid ""
"~~~\n"
"Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. (2016) Software citation\n"
"principles. [PeerJ Computer Science 2:e86](https://peerj.com/articles/cs-86/)\n"
"https://doi.org/10.7717/peerj-cs.8\n"
"~~~"
msgstr ""
"~~~\n"
"Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. (2016) Software citation\n"
"principles. [PeerJ Computer Science 2:e86](https://peerj.com/articles/cs-86/)\n"
"https://doi.org/10.7717/peerj-cs.8\n"
"~~~"

#: git-novice/_episodes/12-citation.md:59
msgid ""
"There is also an [`@software{...`](https://www.google.com/search?q=git+citation+%22%40software%7B%22)\n"
"[BibTeX](https://www.ctan.org/pkg/bibtex) entry type in case\n"
"no \"umbrella\" citation like a paper or book exists for the project you want to\n"
"make citable."
msgstr ""
"Також є [`@software{...`](https://www.google.com/search?q=git+citation+%22%40software%7B%22)\n"
"[BibTeX](https://www.ctan.org/pkg/bibtex) тип запису, якщо немає \n"
"«парасольки» цитування, як стаття або книга для проєкту, який ви хочете\n"
"процитувати."

# Front Matter
#: git-novice/_episodes/13-hosting.md:1
msgid ""
"---\n"
"title: Hosting\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where should I host my version control repositories?\"\n"
"objectives:\n"
"- \"Explain different options for hosting scientific work.\"\n"
"keypoints:\n"
"- \"Projects can be hosted on university servers, on personal domains, or on a public hosting service.\"\n"
"- \"Rules regarding intellectual property and storage of sensitive information apply no matter where code and data are hosted.\"\n"
"---"
msgstr ""
"---\n"
"title: Хостинг\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Де мені розміщувати репозиторії керування версіями?\"\n"
"objectives:\n"
"- \"Пояснити різні варіанти розміщення наукової роботи.\"\n"
"keypoints:\n"
"- \"Проєкти можуть бути розміщені на серверах університетів, на особистих доменах або на публічному хостингу.\"\n"
"- \"Правила щодо інтелектуальної власності та зберігання конфіденційної інформації застосовуються незалежно від місця розміщення коду та даних.\"\n"
"---"

#: git-novice/_episodes/13-hosting.md:14
msgid ""
"The second big question for groups that want to open up their work is where to\n"
"host their code and data.  One option is for the lab, the department, or the\n"
"university to provide a server, manage accounts and backups, and so on.  The\n"
"main benefit of this is that it clarifies who owns what, which is particularly\n"
"important if any of the material is sensitive (i.e., relates to experiments\n"
"involving human subjects or may be used in a patent application).  The main\n"
"drawbacks are the cost of providing the service and its longevity: a scientist\n"
"who has spent ten years collecting data would like to be sure that data will\n"
"still be available ten years from now, but that's well beyond the lifespan of\n"
"most of the grants that fund academic infrastructure."
msgstr ""
"Друге велике питання для груп, які хочуть відкрити свою роботу, - де\n"
"розміщувати свій код і дані. Одним з варіантів є лабораторія, департамент або \n"
"університет, щоб забезпечити сервер, керувати обліковими записами та резервними копіями тощо.\n"
"Основна перевага цього полягає в тому, що він уточнює, кому що належить, що особливо\n"
"важливо, якщо будь-який з матеріалів чутливий (тобто відноситься до експериментів\n"
"за участю людських суб'єктів або може бути використаний в патентній заявці).  Основними\n"
"недоліками є вартість надання послуги та її довговічність: вчений,\n"
"який провів десять років збору даних, хотів би бути впевненим, що дані\n"
"все ще будуть доступні через десять років, але це значно перевищує термін служби\n"
"більшості грантів, які фінансують академічну інфраструктуру."

#: git-novice/_episodes/13-hosting.md:25
msgid ""
"Another option is to purchase a domain and pay an Internet service provider\n"
"(ISP) to host it.  This gives the individual or group more control, and\n"
"sidesteps problems that can arise when moving from one institution to another,\n"
"but requires more time and effort to set up than either the option above or the\n"
"option below."
msgstr ""
"Інший варіант - придбати домен і оплатити інтернет-провайдеру (ISP) \n"
"його розміщення. Це дає людині або групі більше контролю, а також\n"
"проблеми, які можуть виникнути при переході з однієї установи в іншу, але\n"
"вимагає більше часу і зусиль, щоб встановити, або варіант вище або\n"
"варіант нижче."

#: git-novice/_episodes/13-hosting.md:31
msgid ""
"The third option is to use a public hosting service like\n"
"[GitHub](https://github.com), [GitLab](https://gitlab.com),or\n"
"[BitBucket](https://bitbucket.org).\n"
"Each of these services provides a web interface that enables people to create,\n"
"view, and edit their code repositories.  These services also provide\n"
"communication and project management tools including issue tracking, wiki pages,\n"
"email notifications, and code reviews.  These services benefit from economies of\n"
"scale and network effects: it's easier to run one large service well than to run\n"
"many smaller services to the same standard.  It's also easier for people to\n"
"collaborate.  Using a popular service can help connect your project with\n"
"communities already using the same service."
msgstr ""
"Третім варіантом є використання публічного хостингу, як\n"
"[GitHub](https://github.com), [GitLab](https://gitlab.com),або\n"
"[BitBucket](https://bitbucket.org).\n"
"Кожна з цих служб надає веб-інтерфейс, який дозволяє людям створювати,\n"
"переглядати та редагувати свої репозиторії коду. Ці служби також надають\n"
"засоби комунікації та управління проєктами, включаючи відстеження проблем, сторінки вікі,\n"
"повідомлення електронної пошти та огляди коду. Ці послуги отримують вигоду від масштабів економії\n"
"і мережевих ефектів: легше запустити один великий сервіс добре, ніж запустити\n"
"багато менших послуг до того ж стандарту. Людям також легше співпрацювати.\n"
"Використання популярної послуги може допомогти з'єднати ваш проєкт з\n"
"громадами, які вже використовують той самий сервіс."

#: git-novice/_episodes/13-hosting.md:43
msgid ""
"As an example, Software Carpentry [is on GitHub]({{ site.swc_github }}) where you can find the [source for this\n"
"page](https://github.com/swcarpentry/git-novice/edit/gh-pages/_episodes/13-hosting.md). Anyone with a GitHub account can suggest changes to this text."
msgstr ""
"Наприклад, Software Carpentry [знаходиться на GitHub]({{ site.swc_github }}), де ви можете знайти [джерело для цієї\n"
"сторінки] (https://github.com/swcarpentry/git-novice/edit/gh-pages/_episodes/13-hosting.md). Кожен, хто має обліковий запис GitHub, може запропонувати зміни до цього тексту."

#: git-novice/_episodes/13-hosting.md:46
msgid ""
"GitHub repositories can also be assigned DOIs, [by connecting its releases to\n"
"Zenodo](https://guides.github.com/activities/citable-code/). For example,\n"
"[`10.5281/zenodo.57467`](https://zenodo.org/record/57467) is the DOI that has\n"
"been \"minted\" for this introduction to Git."
msgstr ""
"Репозиторіям GitHub також можуть бути присвоєні DOI, [шляхом підключення його релізів до\n"
"Zenodo](https://guides.github.com/activities/citable-code/). For example,\n"
"[`10.5281/zenodo.57467`](https://zenodo.org/record/57467) - DOI,\n"
"який був «викарбуваний» для цього введення в Git."

#: git-novice/_episodes/13-hosting.md:51
msgid ""
"Using large, well-established services can also help you quickly take advantage\n"
"of powerful tools.  One such tool, continuous integration (CI), can\n"
"automatically run software builds and tests whenever code is committed or pull\n"
"requests are submitted.  Direct integration of CI with an online hosting service\n"
"means this information is present in any pull request, and helps maintain code\n"
"integrity and quality standards.  While CI is still available in self-hosted\n"
"situations, there is much less setup and maintenance involved with using an\n"
"online service.  Furthermore, such tools are often provided free of charge to\n"
"open source projects, and are also available for private repositories for a fee."
msgstr ""
"Використання великих, добре налагоджених сервісів також може допомогти вам швидко\n"
"скористатися потужними інструментами. Один з таких інструментів, безперервна інтеграція (БI),\n"
"може автоматично запускати програмні збірки та тести щоразу, коли виконується код або\n"
"отримуються запити на отримання змін.  Пряма інтеграція БI з онлайн-хостингом означає, що ця інформація\n"
"присутня в будь-якому запиті на отримання змін, і допомагає підтримувати цілісність коду та\n"
"стандарти якості. Хоча БI все ще доступна у самостійно розміщених ситуаціях,\n"
"існує набагато менше налаштувань та обслуговування, пов'язаних з використанням онлайн-сервісу.\n"
"online service.  Крім того, такі інструменти часто надаються безкоштовно для\n"
"проєктів з відкритим вихідним кодом, а також доступні для приватних репозиторіїв за певну плату."

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:61
msgid "> ## Institutional Barriers"
msgstr "> ## Інституційні Бар'єри"

#: git-novice/_episodes/13-hosting.md:62
msgid ""
">\n"
"> Sharing is the ideal for science,\n"
"> but many institutions place restrictions on sharing,\n"
"> for example to protect potentially patentable intellectual property.\n"
"> If you encounter such restrictions,\n"
"> it can be productive to inquire about the underlying motivations and\n"
"> either to request an exception for a specific project or domain,\n"
"> or to push more broadly for institutional reform to support more open science."
msgstr ""
">\n"
"> Обмін є ідеальним для науки,\n"
"> але багато установ накладають обмеження на спільне використання,\n"
"> наприклад, для захисту потенційно патентованої інтелектуальної власності.\n"
"> Якщо ви стикаєтеся з такими обмеженнями,\n"
"> це може бути продуктивним, щоб дізнатися про основні мотивації і,\n"
"> або запросити виняток для конкретного проєкту, або домену,\n"
"> або в більш широкому сенсі для інституційної реформи для підтримки більш відкритої науки."

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:72
msgid "> ## Can My Work Be Public?"
msgstr "> ## Чи Може Моя Робота Бути Публічною?"

#: git-novice/_episodes/13-hosting.md:73
msgid ""
">\n"
"> Find out whether you are allowed to host your work openly in a public repository.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"
msgstr ""
">\n"
"> Дізнайтеся, чи дозволено вам розміщувати свою роботу відкрито в публічному репозиторії.\n"
"> Чи можете ви це зробити в\n"
"> односторонньому порядку, або вам потрібен дозвіл когось у вашому закладі?\n"
"> Якщо так, то кого?"

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:80
msgid "> ## Where Can I Share My Work?"
msgstr "> ## Де Я Можу Поділитися Своєю Роботою?"

#: git-novice/_episodes/13-hosting.md:81
msgid ""
">\n"
"> Does your institution have a repository or repositories that you can\n"
"> use to share your papers, data and software? How do institutional repositories\n"
"> differ from services like [arXiV](https://arxiv.org/), [figshare](https://figshare.com/), [GitHub](https://github.com/) or [GitLab](https://about.gitlab.com/)?"
msgstr ""
">\n"
"> У вашій установі є репозиторій або репозиторії, які ви можете\n"
"> використовувати для обміну вашими статтями, даними та програмним забезпеченням? Чим інституційні репозиторії\n"
"> відрізняються від таких сервісів, як [arXiV](https://arxiv.org/), [figshare](https://figshare.com/), [GitHub](https://github.com/) або [GitLab](https://about.gitlab.com/)?"

# Front Matter
#: git-novice/_episodes/14-supplemental-rstudio.md:1
msgid ""
"---\n"
"title: \"Supplemental: Using Git from RStudio\"\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use Git with RStudio?\"\n"
"objectives:\n"
"- \"Understand how to use Git from RStudio.\"\n"
"keypoints:\n"
"- \"Using RStudio's Git integration allows you to version control a project over time.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Додатково: Використання Git від RStudio\"\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Як я можу використовувати Git за допомогою RStudio?\"\n"
"objectives:\n"
"- \"Зрозуміти, як використовувати Git з RStudio.\"\n"
"keypoints:\n"
"- \"Використання Git інтеграції RStudio дозволяє з часом конторолювати версіями проєкту.\"\n"
"---"

#: git-novice/_episodes/14-supplemental-rstudio.md:13
msgid ""
"Version control can be very useful when developing data analysis scripts. For\n"
"that reason, the popular development environment\n"
"[RStudio][rstudio] for the R programming language has built-in\n"
"integration with Git. While some advanced Git features still require the\n"
"command-line, RStudio has a nice interface for many common Git operations."
msgstr ""
"Контроль версій може бути дуже корисним при розробці сценаріїв аналізу даних. З\n"
"цієї причини популярне середовище розвитку\n"
"[RStudio][rstudio] для мови програмування R має вбудовану\n"
"Хоча деякі розширені функції Git все ще вимагають \n"
"командного рядка, RStudio має хороший інтерфейс для багатьох поширених операцій Git."

#: git-novice/_episodes/14-supplemental-rstudio.md:19
msgid ""
"RStudio allows us to create a [project][rstudio-projects] associated with a\n"
"given directory to keep track of various related files. To be able to track the\n"
"development of the project over time, to be able to revert to previous\n"
"versions, and to collaborate with others, we version control the Rstudio\n"
"project with Git. To get started using Git in RStudio, we create a new project:"
msgstr ""
"RStudio дозволяє нам створювати [проєкт][rstudio-проєкти], пов'язані з\n"
"даним каталогом для відстеження різних пов'язаних файлів. Щоб мати\n"
"можливість відстежувати розвиток проєкту з плином часу, щоб мати можливість повернутися до\n"
"попередніх версій, і співпрацювати з іншими, ми виконуємо керування проектом Rstudio з Git.\n"
"Для початку використання Git в RStudio ми створюємо новий проєкт:"

#: git-novice/_episodes/14-supplemental-rstudio.md:25
msgid ""
"![RStudio screenshot showing the file menu dropdown with \"New Project...\" "
"selected]({{ site.baseurl }}/fig/RStudio_screenshot_newproject.png)"
msgstr ""
"![[Знімок екрана RStudio, що показує меню файлу, випадаюче з вибраним "
"пунктом \"New Project...\"]({{ site.baseurl }}/fig/RStudio_screenshot_newproject.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:27
msgid ""
"This opens a dialog asking us how we want to create the project. We have\n"
"some options here. Let's say that we want to use RStudio with the planets\n"
"repository that we already made. Since that repository lives in a directory on\n"
"our computer, we choose the option \"Existing Directory\":"
msgstr ""
"Відкриває діалогове вікно з запитанням про те, як ми хочемо створити проєкт. У нас є\n"
"деякі варіанти тут. Припустимо, що ми хочемо використовувати RStudio з\n"
"репозиторієм planets, який ми вже створили. Оскільки цей репозиторій живе в каталозі на нашому комп'ютері, ми\n"
"вибираємо опцію \"Existing Directory\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:32
msgid ""
"![RStudio screenshot showing New Project dialog window with \"Create project"
" from existing directory\" "
"selected]({{ site.baseurl }}/fig/RStudio_screenshot_existingdirectory.png)"
msgstr ""
"![Знімок екрана RStudio, що показує діалогове вікно New Project за допомогою"
" обраного \"Create project from existing "
"directory\"]({{ site.baseurl }}/fig/RStudio_screenshot_existingdirectory.png)"

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:34
msgid "> ## Do You See a \"Version Control\" Option?"
msgstr "> ## Ви бачите опцію \"Version Control\"?"

#: git-novice/_episodes/14-supplemental-rstudio.md:35
msgid ""
">\n"
"> Although we're not going to use it here, there should be a \"version control\"\n"
"> option on this menu. That is what you would click on if you wanted to\n"
"> create a project on your computer by cloning a repository from GitHub.\n"
"> If that option is not present, it probably means that RStudio doesn't know\n"
"> where your Git executable is, and you won't be able to progress further\n"
"> in this lesson until you tell RStudio where it is.  \n"
">\n"
"> ### Find your Git Executable\n"
">\n"
"> First let's make sure that Git is installed on your computer.\n"
"> Open your shell on Mac or Linux, or on Windows open the command prompt\n"
"> and then type:\n"
"> - `which git` (macOS, Linux)\n"
"> - `where git` (Windows)\n"
">\n"
"> If there is no version of Git on your computer, please follow the \n"
"> [Git installation instructions](https://swcarpentry.github.io/git-novice/setup.html)\n"
"> in the setup of this lesson to install Git now. Next open your shell or command prompt \n"
"> and type `which git` (macOS, Linux), or `where git` (Windows).\n"
"> Copy the path to the git executable.\n"
">\n"
"> On one Windows computer which had GitHub Desktop installed on it, the path was:\n"
"> `C:/Users/UserName/AppData/Local/GitHubDesktop/app-1.1.1/resources/app/git/cmd/git.exe`\n"
">\n"
"> NOTE: The path on your computer will be somewhat different.\n"
">\n"
"> ### Tell RStudio where to find GitHub\n"
">\n"
"> In RStudio, go to the `Tools` menu > `Global Options` > `Git/SVN` and then\n"
"> browse to the Git executable you found in the command prompt or shell. Now restart\n"
"> RStudio.\n"
"> Note: Even if you have Git installed, you may need\n"
"> to accept the Xcode license if you are using macOS."
msgstr ""
">\n"
"> Хоча ми не збираємося використовувати її тут, в цьому меню повинна бути опція \"version control\"\n"
"> option on this menu. Це те, що ви б натиснули, якщо ви хочете\n"
"> створити проєкт на вашому комп'ютері, клонуючи репозиторій з GitHub.\n"
"> Якщо цей параметр відсутній, це, ймовірно, означає, що RStudio не знає,\n"
"> де знаходиться ваш виконуваний файл Git, і ви не зможете прогресувати далі\n"
"> в цьому уроці, поки ви не скажете RStudio, де це.  \n"
">\n"
"> ### Знайдіть виконуваний файл Git\n"
">\n"
"> Спочатку давайте переконаємося, що Git встановлений на вашому комп'ютері.\n"
"> Відкрийте свій shell на Mac або Linux, або в Windows відкрийте командний рядок,\n"
"> а потім введіть:\n"
"> - `which git` (macOS, Linux)\n"
"> - `where git` (Windows)\n"
">\n"
"> Якщо на вашому комп'ютері немає версії Git, будь ласка, дотримуйтесь \n"
"> [Інструкції по установці Git](https://swcarpentry.github.io/git-novice/setup.html)\n"
"> в налаштуванні цього уроку, щоб встановити Git зараз. Далі відкрийте shell або командний рядок \n"
"> і введіть `which git` (macOS, Linux), або `where git` (Windows).\n"
"> Скопіюйте шлях до виконуваного файла git.\n"
">\n"
"> На одному комп'ютері Windows, на якому встановлено GitHub Desktop, шлях був:\n"
"> `C:/Users/UserName/AppData/Local/GitHubDesktop/app-1.1.1/resources/app/git/cmd/git.exe`\n"
">\n"
"> ПРИМІТКА: Шлях на вашому комп'ютері буде дещо іншим.\n"
">\n"
"> ### Скажіть RStudio де знайти GitHub\n"
">\n"
"> У RStudio перейдіть до меню `Tools` > `Global Options` > `Git/SVN`, а потім\n"
"> перейдіть до виконуваного файлу Git, який ви знайшли в командному рядку або shell. Тепер перезапустіть\n"
"> RStudio.\n"
"> Примітка: Навіть якщо у вас встановлений Git, вам може знадобитися прийняти ліцензію\n"
"> Xcode. якщо ви використовуєте macOS."

#: git-novice/_episodes/14-supplemental-rstudio.md:71
msgid ""
"Next, RStudio will ask which existing directory we want to use. Click\n"
"\"Browse...\" and navigate to the correct directory, then click \"Create Project\":"
msgstr ""
"Далі RStudio запитає, який існуючий каталог ми хочемо використовувати. Натисніть\n"
"\"Browse...\" і перейдіть до правильної директорії, потім натисніть\"Create Project\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:74
msgid "![]({{ site.baseurl }}/fig/RStudio_screenshot_navigateexisting.png)"
msgstr "![]({{ site.baseurl }}/fig/RStudio_screenshot_navigateexisting.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:76
msgid ""
"Ta-da! We have created a new project in RStudio within the existing planets\n"
"repository. Notice the vertical \"Git\" menu in the menu bar. RStudio has\n"
"recognized that the current directory is a Git repository, and gives us a\n"
"number of tools to use Git:"
msgstr ""
"Та-да! Ми створили новий проект в RStudio в рамках існуючого planets\n"
"репозиторію. Зверніть увагу на вертикальне меню \"Git\" на панелі меню. RStudio визнав, що\n"
"поточна директорія є Git репозиторієм, і дає нам\n"
"ряд інструментів для використання Git:"

#: git-novice/_episodes/14-supplemental-rstudio.md:81
msgid ""
"![RStudio window after new project is created with large arrow pointing to "
"vertical Git menu bar.]({{ site.baseurl }}/fig/RStudio_screenshot_afterclone.png)"
msgstr ""
"! [RStudio вікно після створення нового проєкту з великою стрілкою, що "
"вказує на вертикальну панель меню "
"Git.]({{ site.baseurl }}/fig/RStudio_screenshot_afterclone.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:83
msgid ""
"To edit the existing files in the repository, we can click on them in the\n"
"\"Files\" panel on the lower right. Now let's add some additional information\n"
"about Pluto:"
msgstr ""
"Щоб редагувати існуючі файли в репозиторії, ми можемо натиснути на них в панелі\n"
"\"Files\" у правому нижньому куті. Тепер додамо додаткову інформацію\n"
"про Плутон:"

#: git-novice/_episodes/14-supplemental-rstudio.md:87
msgid "![]({{ site.baseurl }}/fig/RStudio_screenshot_editfiles.png)"
msgstr "![]({{ site.baseurl }}/fig/RStudio_screenshot_editfiles.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:89
msgid ""
"Once we have saved our edited files, we can use RStudio to commit the changes\n"
"by clicking on \"Commit...\" in the Git menu:"
msgstr ""
"Після того, як ми зберегли наші відредаговані файли, ми можемо використовувати RStudio для фіксації змін, \n"
"натиснувши на \"Commit...\" в меню Git:"

#: git-novice/_episodes/14-supplemental-rstudio.md:92
msgid ""
"![RStudio screenshot showing the Git menu dropdown with \"Commit...\" "
"selected]({{ site.baseurl }}/fig/RStudio_screenshot_commit.png)"
msgstr ""
"![Знімок екрана RStudio, що показує меню Git, що випадає з вибраним пунктом "
"\"Commit...\"]({{ site.baseurl }}/fig/RStudio_screenshot_commit.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:94
msgid ""
"This will open a dialogue where we can select which files to commit (by\n"
"checking the appropriate boxes in the \"Staged\" column), and enter a commit\n"
"message (in the upper right panel). The icons in the \"Status\" column indicate\n"
"the current status of each file. Clicking on a file shows information about\n"
"changes in the lower panel (using output of `git diff`). Once everything is the\n"
"way we want it, we click \"Commit\":"
msgstr ""
"Це відкриє діалогове вікно, де ми можемо вибрати, які файли для фіксації (перевіряючи відповідні поля\n"
"в стовпці \"Staged\"), і ввести повідомлення коміту\n"
"(у верхній правій панелі). Іконки у стовпці \"Status\" вказують \n"
"поточний стан кожного файлу. Клацання на файлі показує інформацію про зміни на нижній\n"
"панелі (за допомогою результату `git diff`). Як тільки \n"
"все так, як ми хочемо, ми натискаємо \"Commit\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:101
msgid "![]({{ site.baseurl }}/fig/RStudio_screenshot_review.png)"
msgstr "![]({{ site.baseurl }}/fig/RStudio_screenshot_review.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:103
msgid ""
"The changes can be pushed by selecting \"Push Branch\" from the Git menu. There\n"
"are also options to pull from the remote repository, and to view the commit\n"
"history:"
msgstr ""
"Зміни можна відправити, вибравши \"Push Branch\" з меню Git. \n"
"Існують також варіанти отримання змін з віддаленого репозиторію та перегляду історії \n"
"комітів:"

#: git-novice/_episodes/14-supplemental-rstudio.md:107
msgid ""
"![RStudio screenshot showing the git menu dropdown with \"History\" "
"selected]({{ site.baseurl }}/fig/RStudio_screenshot_history.png)"
msgstr ""
"![Знімок екрана RStudio, що показує спадне меню git з вибраним пунктом "
"\"History\"]({{ site.baseurl }}/fig/RStudio_screenshot_history.png)"

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:109
msgid "> ## Are the Push/Pull Commands Grayed Out?"
msgstr "> ## Чи Є Команди Push/Pull Неактивними?"

#: git-novice/_episodes/14-supplemental-rstudio.md:110
msgid ""
">\n"
"> Grayed out Push/Pull commands generally mean that RStudio doesn't know the\n"
"> location of your remote repository (e.g. on GitHub). To fix this, open a\n"
"> terminal to the repository and enter the command: `git push -u origin\n"
"> main`. Then restart RStudio."
msgstr ""
">\n"
"> Неактивні команди Push/Pull зазвичай означають, що RStudio не знає\n"
"> місцезнаходження вашого віддаленого репозиторію (наприклад, на GitHub). Щоб виправити це, відкрийте \n"
"> термінал у репозиторії і введіть команду: `git push -u origin\n"
"> main`. Потім перезавантажте RStudio."

#: git-novice/_episodes/14-supplemental-rstudio.md:117
msgid ""
"If we click on \"History\", we can see a graphical version of what `git log`\n"
"would tell us:"
msgstr ""
"Якщо натиснути на \"History\", ми можемо побачити графічну версію того, що `git log`\n"
"сказав би нам:"

#: git-novice/_episodes/14-supplemental-rstudio.md:120
msgid "![]({{ site.baseurl }}/fig/RStudio_screenshot_viewhistory.png)"
msgstr "![]({{ site.baseurl }}/fig/RStudio_screenshot_viewhistory.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:122
msgid ""
"RStudio creates a number of files that it uses to keep track of a project. We\n"
"often don't want to track these, in which case we add them to our `.gitignore`\n"
"file:"
msgstr ""
"RStudio створює ряд файлів, які він використовує для відстеження проєкту. Ми часто\n"
"не хочемо відстежувати їх; в цьому випадку ми додаємо їх до нашого `.gitignore`\n"
"файлу:"

#: git-novice/_episodes/14-supplemental-rstudio.md:126
msgid ""
"![RStudio screenshot showing .gitignore open in the editor pane with the "
"files .Rproj.user, .Rhistory, .RData, and \\*.Rproj added to the "
"end]({{ site.baseurl }}/fig/RStudio_screenshot_gitignore.png)"
msgstr ""
"![Знімок екрану RStudio, що показує .gitignore, відкритий у вікні редактора "
"з файлами .Rproj.user, .Rhistory, .RData, та \\*.Rproj, доданий до "
"кінця]({{ site.baseurl }}/fig/RStudio_screenshot_gitignore.png)"

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:128
msgid "> ## Tip: versioning disposable output"
msgstr "> ## Порада: версіонування одноразового результату"

#: git-novice/_episodes/14-supplemental-rstudio.md:129
msgid ""
">\n"
"> Generally you do not want to version control disposable output (or read-only\n"
"> data). You should modify the `.gitignore` file to tell Git to ignore these\n"
"> files and directories."
msgstr ""
">\n"
"> Як правило, ви не хочете, щоб контролювати версії одноразового результату (або тільки для\n"
"> читання даних). Ви повинні змінити файл `.gitignore`, щоб повідомити Git ігнорувати ці\n"
"> файли та директорії."

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:135
msgid "> ## Challenge"
msgstr "> ## Виклик"

#: git-novice/_episodes/14-supplemental-rstudio.md:136
msgid ""
">\n"
"> 1. Create a new directory within your project called `graphs`.\n"
"> 2. Modify the `.gitignore` so that the `graphs` directory is not version controlled.\n"
">\n"
">\n"
"> > ## Solution to Challenge\n"
"> >\n"
"> > This can be done in Rstudio:\n"
"> > ```\n"
"> > dir.create(\"./graphs\")\n"
"> > ```\n"
"> > {: .language-r}\n"
"> > Then open up the `.gitignore` file from the right-hand panel of Rstudio and add \n"
"> > `graphs/` to the list of files to ignore."
msgstr ""
">\n"
"> 1. Створіть нову директорію у вашому проєкті під назвою `graphs`.\n"
"> 2. Змініть `.gitignore`, щоб директорія `graphs` не контролювалася версіями.\n"
">\n"
">\n"
"> > ## Вирішення Виклику\n"
"> >\n"
"> > Це можна зробити в Rstudio:\n"
"> > ```\n"
"> > dir.create(\"./graphs\")\n"
"> > ```\n"
"> > {: .language-r}\n"
"> > Потім відкрийте файл `.gitignore` з правої панелі Rstudio та додайте \n"
"> > `graphs/` до списку файлів, які слід ігнорувати."

#: git-novice/_episodes/14-supplemental-rstudio.md:153
msgid ""
"There are many more features in the RStudio Git menu, but these should be\n"
"enough to get you started!"
msgstr ""
"Є багато інших функцій в меню RStudio Git, але цих повинно бути\n"
"достатньо, щоб почати!"

#: git-novice/_episodes/14-supplemental-rstudio.md:157
msgid ""
"[rstudio]: https://www.rstudio.com/\n"
"[rstudio-projects]: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects"
msgstr ""
"[rstudio]: https://www.rstudio.com/\n"
"[rstudio-projects]: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects"

# Front Matter
#: git-novice/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: About\n"
"---"

#: git-novice/_extras/about.md:5
msgid "{% include carpentries.html %}"
msgstr "{% include carpentries.html %}"

# Front Matter
#: git-novice/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Обговорення\n"
"---"

# header
#: git-novice/_extras/discuss.md:6
msgid "## Frequently Asked Questions"
msgstr "## Часті запитання"

#: git-novice/_extras/discuss.md:8
msgid ""
"People often have questions about Git beyond the scope of the core material.\n"
"Students who have completed the rest of the lessons might find value in looking through the following topics."
msgstr ""
"У людей часто виникають питання про Git, що виходять за рамки основного матеріалу.\n"
"Студенти, які завершили решту уроків, можуть знайти цінність у перегляді наступних тем."

#: git-novice/_extras/discuss.md:11
msgid ""
"Note that since this material isn't essential for basic Git usage, it won't "
"be covered by the instructor."
msgstr ""
"Зауважте, що оскільки цей матеріал не є важливим для базового використання "
"Git, він не буде покритий інструктором."

# header
#: git-novice/_extras/discuss.md:13
msgid "## More Advanced Git Configuration"
msgstr "## Додаткові налаштування Git"

#: git-novice/_extras/discuss.md:15
msgid ""
"In [Setting Up Git]({{ page.root }}/02-setup/),\n"
"we used `git config --global` to set some default options for Git.\n"
"It turns out that these configuration options get stored in your home directory\n"
"in a plain text file called `.gitconfig`."
msgstr ""
"В [Налаштування Git]({{ page.root }}/02-setup/),\n"
"ми використовували `git config --global`, щоб встановити деякі параметри за замовчуванням для Git.\n"
"Виявляється, ці параметри конфігурації зберігаються у вашій домашній директорії \n"
"у звичайному текстовому файлі під назвою  `.gitconfig`."

# code block
#: git-novice/_extras/discuss.md:20
msgid ""
"~~~\n"
"$ cat ~/.gitconfig\n"
"~~~"
msgstr ""
"~~~\n"
"$ cat ~/.gitconfig\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:25
msgid ""
"~~~\n"
"[user]\n"
"\tname = Vlad Dracula\n"
"\temail = vlad@tran.sylvan.ia\n"
"[color]\n"
"\tui = true\n"
"[core]\n"
"\teditor = nano\n"
"~~~"
msgstr ""
"~~~\n"
"[user]\n"
"\tname = Vlad Dracula\n"
"\temail = vlad@tran.sylvan.ia\n"
"[color]\n"
"\tui = true\n"
"[core]\n"
"\teditor = nano\n"
"~~~"

#: git-novice/_extras/discuss.md:36
msgid ""
"This file can be opened in your preferred text editor.\n"
"(Note that it is recommended to continue using the `git config` command,\n"
"as this helps avoid introducing syntax errors.)"
msgstr ""
"Цей файл можна відкрити у бажаному текстовому редакторі.\n"
"(Зауважте, що рекомендується продовжити використання команди `git config`,\n"
"оскільки це допомагає уникнути введення синтаксичних помилок.)"

#: git-novice/_extras/discuss.md:40
msgid ""
"Eventually, you will want to start customizing Git's behaviour.\n"
"This can be done by adding more entries to your `.gitconfig`.\n"
"The available options are described in the manual:"
msgstr ""
"Зрештою, ви захочете почати налаштовувати поведінку Git.\n"
"Це можна зробити, додавши більше записів до вашого `.gitconfig`.\n"
"Доступні параметри описані в посібнику:"

# code block
#: git-novice/_extras/discuss.md:44
msgid ""
"~~~\n"
"$ git config --help\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --help\n"
"~~~"

#: git-novice/_extras/discuss.md:49
msgid ""
"In particular, you might find it useful to add aliases.\n"
"These are like shortcuts for longer Git commands.\n"
"For example, if you get sick of typing `git checkout` all the time,\n"
"you could run the command:"
msgstr ""
"Зокрема, вам може знадобитися додати псевдоніми.\n"
"Це як ярлики для довших команд Git.\n"
"Наприклад, якщо вам набридло вводити `git checkout` весь час,\n"
"ви можете запустити команду:"

# code block
#: git-novice/_extras/discuss.md:54
msgid ""
"~~~\n"
"$ git config --global alias.co checkout\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global alias.co checkout\n"
"~~~"

#: git-novice/_extras/discuss.md:59
msgid ""
"Now if we return to the example from [Exploring History]({{ page.root "
"}}/05-history/) where we ran:"
msgstr ""
"Тепер, якщо ми повернемося до прикладу з [Досліджуючи історію]({{ page.root "
"}}/05-history/), де ми запустили:"

#: git-novice/_extras/discuss.md:66
msgid "we could now instead type:"
msgstr "ми могли б тепер надрукувати:"

# code block
#: git-novice/_extras/discuss.md:68
msgid ""
"~~~\n"
"$ git co f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git co f22b25e mars.txt\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:73
msgid "## Styling Git's Log"
msgstr "## Стиль Git's Log"

#: git-novice/_extras/discuss.md:75
msgid ""
"A good target for customization is output from the log.\n"
"The default log is quite verbose but gives no graphical hints\n"
"such as information about which commits were done locally\n"
"and which were pulled from remotes."
msgstr ""
"Гарною метою для налаштування є результат log.\n"
"Типовий log досить багатослівний, але не дає графічних підказок, \n"
"таких як інформація про те, які коміти були зроблені локально\n"
"і які були витягнуті з віддалених."

#: git-novice/_extras/discuss.md:80
msgid ""
"You can use `git log --help` and `git config --help` to look for different ways to change\n"
"the log output.\n"
"Try the following commands and see what effect they have:"
msgstr ""
"Ви можете використовувати `git log --help` та `git config --help` для пошуку різних способів зміни результату\n"
"log.\n"
"Спробуйте наступні команди і подивіться, який ефект вони мають:"

# code block
#: git-novice/_extras/discuss.md:84
msgid ""
"~~~\n"
"$ git config --global alias.lg \"log --graph\"\n"
"$ git config --global log.abbrevCommit true\n"
"$ git config --global format.pretty oneline\n"
"$ git lg\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global alias.lg \"log --graph\"\n"
"$ git config --global log.abbrevCommit true\n"
"$ git config --global format.pretty oneline\n"
"$ git lg\n"
"~~~"

#: git-novice/_extras/discuss.md:92
msgid ""
"If you don't like the effects,\n"
"you can undo them with:"
msgstr ""
"Якщо вам не подобаються ефекти,\n"
"ви можете скасувати їх за допомогою:"

# code block
#: git-novice/_extras/discuss.md:95
msgid ""
"~~~\n"
"$ git config --global --unset alias.lg\n"
"$ git config --global --unset log.abbrevCommit\n"
"$ git config --global --unset format.pretty\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global --unset alias.lg\n"
"$ git config --global --unset log.abbrevCommit\n"
"$ git config --global --unset format.pretty\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_extras/discuss.md:102
msgid "> ## Undoing Git Configuration Changes"
msgstr "> ## Скасування змін конфігурації Git"

#: git-novice/_extras/discuss.md:103
msgid ""
">\n"
"> You can use the `--unset` flag to delete unwanted options from `.gitconfig`.\n"
"> Another way to roll back changes is to store your `.gitconfig` using Git.\n"
">\n"
"> For hints on what you might want to configure,\n"
"> go to GitHub and search for \"gitconfig\".\n"
"> You will find hundreds of repositories in which people have stored\n"
"> their own Git configuration files.\n"
"> Sort them by the number of stars and have a look at the top few.\n"
"> If you find some you like,\n"
"> please check that they're covered by an open source license before you clone them."
msgstr ""
">\n"
"> Ви можете використовувати прапорець `--unset` для видалення небажаних параметрів з `.gitconfig`.\n"
"> Інщий спосіб повернути зміни - зберігати ваш `.gitconfig` за допомогою Git.\n"
">\n"
"> Щоб отримати підказки щодо того, що ви можете налаштувати,\n"
"> перейдіть до GitHub та знайдіть \"gitconfig\".\n"
"> Ви знайдете сотні репозиторіїв, в яких люди зберегли\n"
"> свої власні файли конфігурації Git.\n"
"> Сортувати їх за кількістю зірок і подивитися на кілька найкращих.\n"
"> Якщо ви знайдете ті, які вам подобаються,\n"
"> будь ласка, перевірте, що вони охоплені ліцензією з відкритим вихідним кодом, перш ніж клонувати їх."

# header
#: git-novice/_extras/discuss.md:116
msgid "## Non-text Files"
msgstr "## Нетекстові файли"

#: git-novice/_extras/discuss.md:118
msgid ""
"Recall when we discussed [Conflicts]({{ page.root }}/09-conflict/)\n"
"there was a challenge that asked,\n"
"\"What does Git do\n"
"when there is a conflict in an image or some other non-textual file\n"
"that is stored in version control?\""
msgstr ""
"Пригадайте, коли ми обговорювали [Конфлікти]({{ page.root }}/09-conflict/)\n"
"була задача, яка запитувала,\n"
"\"Що робить Git\n"
"коли виникає конфлікт у зображенні або якомусь інщому нетекстовому файлі,\n"
"що зберігається у контролі версій?\""

#: git-novice/_extras/discuss.md:124
msgid "We will now revisit this in more detail."
msgstr "Тепер ми переглянемо це більш детально."

#: git-novice/_extras/discuss.md:126
msgid ""
"Many people want to version control non-text files, such as images, PDFs and Microsoft Office or LibreOffice documents.\n"
"It is true that Git can handle these filetypes (which fall under the banner of \"binary\" file types).\n"
"However, just because it *can* be done doesn't mean it *should* be done."
msgstr ""
"Багато людей хочуть керувати версіями нетекстових файлів, таких як зображення, PDF-файли та документи Microsoft Office або LibreOffice.\n"
"Це правда, що Git може обробляти ці типи файлів (які потрапляють під банер «бінарних» типів файлів).\n"
"Однак тільки тому, що це *можна* зробити, не означає, що це *слід* зробити."

#: git-novice/_extras/discuss.md:130
msgid ""
"Much of Git's magic comes from being able to do line-by-line comparisons (\"diffs\") between files.\n"
"This is generally easy for programming source code and marked up text.\n"
"For non-text files, a diff can usually only detect that the files have changed\n"
"but can't say how or where."
msgstr ""
"Велика частина магії Git походить від можливості робити порівняння по черзі («diffs») між файлами.\n"
"Це, як правило, легко для програмування вихідного коду і розміченого тексту.\n"
"Для нетекстових файлів різниця зазвичай може виявляти лише те, що файли змінилися\n"
"але не можуть сказати, як і де."

#: git-novice/_extras/discuss.md:135
msgid ""
"This has various impacts on Git's performance and will make it difficult to\n"
"compare different versions of your project."
msgstr ""
"Це має різний вплив на продуктивність Git і ускладнить\n"
"порівняння різних версій вашого проєкту."

#: git-novice/_extras/discuss.md:138
msgid ""
"For a basic example to show the difference it makes,\n"
"we're going to go see what would have happened if Dracula had tried\n"
"using outputs from a word processor instead of plain text."
msgstr ""
"Для базового прикладу, щоб показати різницю, яку він робить,\n"
"ми підемо подивитися, що б сталося, якби Dracula had спробував\n"
"використання результатів з текстового процесора замість звичайного тексту."

#: git-novice/_extras/discuss.md:142
msgid "Create a new directory and go into it:"
msgstr "Створіть нову директорію і перейдіть в неї:"

# code block
#: git-novice/_extras/discuss.md:144
msgid ""
"~~~\n"
"$ mkdir planets-nontext\n"
"$ cd planets-nontext\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir planets-nontext\n"
"$ cd planets-nontext\n"
"~~~"

#: git-novice/_extras/discuss.md:150
msgid ""
"Use a program such as Microsoft Word or LibreOffice Writer to create a new document.\n"
"Enter the same text that we began with before:"
msgstr ""
"Для створення нового документа використовуйте програму, таку як Microsoft Word або LibreOffice Writer.\n"
"Введіть той самий текст, з якого ми починали раніше:"

#: git-novice/_extras/discuss.md:158
msgid ""
"Save the document into the `planets-nontext` directory with the name of `mars.doc`.\n"
"Back in the terminal, run the usual commands for setting up a new Git repository:"
msgstr ""
"Збережіть документ у директорії `planets-nontext` зщ назвою `mars.doc`.\n"
"Знову в терміналі запустіть звичайні команди для налаштування нового репозиторію Git:"

# code block
#: git-novice/_extras/discuss.md:161
msgid ""
"~~~\n"
"$ git init\n"
"$ git add mars.doc\n"
"$ git commit -m \"Starting to think about Mars\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git init\n"
"$ git add mars.doc\n"
"$ git commit -m \"Starting to think about Mars\"\n"
"~~~"

#: git-novice/_extras/discuss.md:168
msgid ""
"Then make the same changes to `mars.doc` that we (or Vlad) previously made "
"to `mars.txt`."
msgstr ""
"Потім внесіть ті ж зміни в `mars.doc`, які ми (або Vlad) раніше зробили в "
"`mars.txt`."

#: git-novice/_extras/discuss.md:176
msgid ""
"Save and close the word processor.\n"
"Now see what Git thinks of your changes:"
msgstr ""
"Збережіть і закрийте текстовий процесор.\n"
"Тепер подивіться, що Git думає про ваші зміни:"

# code block
#: git-novice/_extras/discuss.md:184
msgid ""
"~~~\n"
"diff --git a/mars.doc b/mars.doc\n"
"index 53a66fd..6e988e9 100644\n"
"Binary files a/mars.doc and b/mars.doc differ\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.doc b/mars.doc\n"
"index 53a66fd..6e988e9 100644\n"
"Binary files a/mars.doc and b/mars.doc differ\n"
"~~~"

#: git-novice/_extras/discuss.md:191
msgid "Compare this to the earlier `git diff` obtained when using text files:"
msgstr ""
"Порівняйте це з попереднім `git diff`, отриманим при використанні текстових "
"файлів:"

#: git-novice/_extras/discuss.md:204
msgid ""
"Notice how plain text files give a much more informative diff.\n"
"You can see exactly which lines changed and what the changes were."
msgstr ""
"Зверніть увагу, як звичайні файли дають набагато більш інофрмативну різницю (diff).\n"
"Ви можете побачити, які саме лінії змінилися і які були зміни."

#: git-novice/_extras/discuss.md:207
msgid ""
"An uninformative `git diff` is not the only consequence of using Git on binary files.\n"
"However, most of the other problems boil down to whether or not a good diff is possible."
msgstr ""
"Неінформативний `git diff` не є єдиним наслідком використання Git на бінарних файлах.\n"
"Однак більшість інших проблем зводяться до того, чи можлива хороша різниця (diff)."

#: git-novice/_extras/discuss.md:210
msgid ""
"This isn't to say you should *never* use Git on binary files.\n"
"A rule of thumb is that it's OK if the binary file won't change very often,\n"
"and if it does change, you don't care about merging in small differences between versions."
msgstr ""
"Це не означає, що ви повинні *ніколи* використовувати Git на бінарних файлах.\n"
"Великим правилом є те, що це нормально, якщо бінарний файл не змінюється дуже часто,\n"
"і якщо він змінюється, вам не важливо об'єднуватися в невеликі відмінності між версіями."

#: git-novice/_extras/discuss.md:214
msgid ""
"We've already seen how a word processed report will fail this test.\n"
"An example that passes the test is a logo for your organization or project.\n"
"Even though a logo will be stored in a binary format such as `jpg` or `png`,\n"
"you can expect it will remain fairly static through the lifetime of your repository.\n"
"On the rare occasion that branding does change,\n"
"you will probably just want to replace the logo completely rather than merge little differences in."
msgstr ""
"Ми вже бачили, як опрацьований словесний репорт провалить цей тест.\n"
"Прикладом, який проходить тест, є логотип для вашої організації або проєкту.\n"
"Незважаючи на те, що логотип буде зберігатися в бінарному форматі, такому як `jpg` або `png`,\n"
"ви можете очікувати, що він залишиться досить статичним протягом усього життя вашого репозиторію.\n"
"У рідкісних випадках, коли брендинг змінюється,\n"
"ви, ймовірно, просто хочете замінити логотип повністю, а не об'єднати невеликі відмінності."

# header
#: git-novice/_extras/discuss.md:221
msgid "## Removing a File"
msgstr "## Видалення файлу"

#: git-novice/_extras/discuss.md:223
msgid ""
"Adding and modifying files are not the only actions one might take\n"
"when working on a project.  It might be required to remove a file\n"
"from the repository."
msgstr ""
"Додавання та зміна файлів - це не єдині дії, які можна виконати\n"
"під час роботи над проєктом. Можливо, буде потрібно видалити файл\n"
"зі сховища."

#: git-novice/_extras/discuss.md:227
msgid "Create a new file for the planet Nibiru:"
msgstr "Створіть новий файл для планети Nibiru:"

# code block
#: git-novice/_extras/discuss.md:229
msgid ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"~~~"

#: git-novice/_extras/discuss.md:234
msgid "Now add to the repository like you have learned earlier:"
msgstr "Тепер додайте в репозиторій, як ви навчилися раніше:"

# code block
#: git-novice/_extras/discuss.md:236
msgid ""
"~~~\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding info on nibiru'\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding info on nibiru'\n"
"$ git status\n"
"~~~"

#: git-novice/_extras/discuss.md:249
msgid ""
"Nibiru is not a real planet.  That was a silly idea.  Let us remove\n"
"it from the disk and let Git know about it:"
msgstr ""
"Nibiru - не справжня планета. Це була дурна ідея. Давайте видалимо \n"
"її з диска і нехай Git знає про це:"

# code block
#: git-novice/_extras/discuss.md:252 git-novice/_extras/discuss.md:317
msgid ""
"~~~\n"
"$ git rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git rm nibiru.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:258 git-novice/_extras/discuss.md:323
msgid ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"   (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"   deleted:    nibiru.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"   (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"   deleted:    nibiru.txt\n"
"\n"
"~~~"

#: git-novice/_extras/discuss.md:268
msgid ""
"The change has been staged.  Now commit the removal, and remove the\n"
"file from the repository itself.  Note that the file will be removed\n"
"in the new commit.  The previous commit will still\n"
"have the file, if you were to retrieve that specific commit."
msgstr ""
"Зміна була перенесена у зону стейджингу. Тепер закомітьте видалення та видаліть\n"
"файл з самого репозиторію.  Зауважте, що файл буде вилучено\n"
"у новому коміті.  Попередній коміт все одно\n"
"матиме файл, якщо ви хочете отримати цей конкретний коміт."

# code block
#: git-novice/_extras/discuss.md:273
msgid ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru.  It is not a real planet!'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru.  It is not a real planet!'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:278
msgid "## Removing a File with Unix"
msgstr "## Видалення файлу за допомогою Unix"

#: git-novice/_extras/discuss.md:280
msgid ""
"Sometimes we might forget to remove the file through Git. If you removed the\n"
"file with Unix `rm` instead of using `git rm`, no worries,\n"
"Git is smart enough to notice the missing file. Let us recreate the file and\n"
"commit it again."
msgstr ""
"Іноді ми можемо забути видалити файл через Git. Якщо ви видалили\n"
"файл за допомогою Unix `rm` замість використання `git rm`, не хвилюйтеся,\n"
"Git досить розумний, щоб помітити відсутній файл. Давайте відтворимо файл і\n"
"закомітимо його знову."

# code block
#: git-novice/_extras/discuss.md:285
msgid ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding nibiru again'\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding nibiru again'\n"
"~~~"

#: git-novice/_extras/discuss.md:292
msgid "Now we remove the file with Unix `rm`:"
msgstr "Тепер ми видаляємо файл за допомогою Unix `rm`:"

# code block
#: git-novice/_extras/discuss.md:294
msgid ""
"~~~\n"
"$ rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm nibiru.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:300
msgid ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"   (use \"git add/rm <file>...\" to update what will be committed)\n"
"   (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    deleted:    nibiru.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"   (use \"git add/rm <file>...\" to update what will be committed)\n"
"   (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    deleted:    nibiru.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_extras/discuss.md:312
msgid ""
"See how Git has noticed that the file `nibiru.txt` has been removed\n"
"from the disk.  The next step is to \"stage\" the removal of the file\n"
"from the repository.  This is done with the command `git rm` just as\n"
"before."
msgstr ""
"Дивіться, як Git помітив, що файл `nibiru.txt` був видалений\n"
"з диска. Наступним кроком є \"стейджинг\" видалення файлу\n"
"з репозиторію.  Це робиться за допомогою команди `git rm` так само, як і\n"
"раніше."

#: git-novice/_extras/discuss.md:333
msgid ""
"The change that was made in Unix has now been staged and needs to be\n"
"committed."
msgstr ""
"Зміна, яка була зроблена в Unix, тепер була перенесена в зону стейджингу і повинна бути\n"
"закомічена."

# code block
#: git-novice/_extras/discuss.md:336
msgid ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru, again!'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru, again!'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:341
msgid "## Renaming a File"
msgstr "## Видалення файлу"

#: git-novice/_extras/discuss.md:343
msgid "Another common change when working on a project is to rename a file."
msgstr ""
"Іншою поширеною зміною під час роботи над проєктом є перейменування файлу."

#: git-novice/_extras/discuss.md:345
msgid "Create a file for the planet Krypton:"
msgstr "Створіть файл для планети Krypton:"

# code block
#: git-novice/_extras/discuss.md:347
msgid ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"~~~"

#: git-novice/_extras/discuss.md:352
msgid "Add it to the repository:"
msgstr "Додайте його до репозиторію:"

# code block
#: git-novice/_extras/discuss.md:354
msgid ""
"~~~\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton'\n"
"~~~"

#: git-novice/_extras/discuss.md:360
msgid ""
"We all know that Superman moved to Earth.  Not that he had much\n"
"choice.  Now his home planet is Earth."
msgstr ""
"Всі ми знаємо, що Superman переїхав на Earth. Не те, щоб у нього було багато\n"
"вибору. Тепер його рідна планета - Earth."

#: git-novice/_extras/discuss.md:363
msgid "Rename the file `krypton.txt` to `earth.txt` with Git:"
msgstr "Переіменуйте файл `krypton.txt` на `earth.txt` за допомогою Git:"

# code block
#: git-novice/_extras/discuss.md:365
msgid ""
"~~~\n"
"$ git mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:371
msgid ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"\trenamed:    krypton.txt -> earth.txt\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"\trenamed:    krypton.txt -> earth.txt\n"
"~~~"

#: git-novice/_extras/discuss.md:379
msgid "The final step is commit our change to the repository:"
msgstr "Останнім кроком є внесення змін до репозиторію:"

# code block
#: git-novice/_extras/discuss.md:381
msgid ""
"~~~\n"
"$ git commit -m 'Superman's home is now Earth'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Superman's home is now Earth'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:386
msgid "## Renaming a File with Unix"
msgstr "## Переіменування файлу за допомогою Unix"

#: git-novice/_extras/discuss.md:388
msgid ""
"If you forgot to use Git and you used Unix `mv` instead\n"
"of `git mv`, you will have a touch more work to do but Git will\n"
"be able to deal with it. Let's try again renaming the file,\n"
"this time with Unix `mv`. First, we need to recreate the\n"
"`krypton.txt` file:"
msgstr ""
"Якщо ви забули використовувати Git і використовували Unix `mv` замість\n"
"`git mv`, у вас буде більше роботи, але Git зможе\n"
"впоратися з цим. Давайте спробуємо ще раз перейменувати файл,\n"
"цього разу за допомогою Unix `mv`. По-перше, нам потрібно відтворити\n"
"файл `krypton.txt`:"

# code block
#: git-novice/_extras/discuss.md:394
msgid ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton again.'\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton again.'\n"
"~~~"

#: git-novice/_extras/discuss.md:401
msgid "Let us rename the file and see what Git can figured out by itself:"
msgstr ""
"Давайте перейменуємо файл і подивимося, що Git може з'ясувати сам по собі:"

# code block
#: git-novice/_extras/discuss.md:403
msgid ""
"~~~\n"
"$ mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:409
msgid ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add/rm <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"        deleted:    krypton.txt\n"
"\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"    earth.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add/rm <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"        deleted:    krypton.txt\n"
"\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"    earth.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_extras/discuss.md:426
msgid ""
"Git has noticed that the file `krypton.txt` has disappeared from the\n"
"file system and a new file `earth.txt` has showed up."
msgstr ""
"Git помітив, що файл `krypton.txt` зник з\n"
"файлової системи і з`явився новий файл `earth.txt`."

#: git-novice/_extras/discuss.md:429
msgid "Add those changes to the staging area:"
msgstr "Додайте ці зміни в зону стейджингу:"

# code block
#: git-novice/_extras/discuss.md:431
msgid ""
"~~~\n"
"$ git add krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add krypton.txt earth.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:437
msgid ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    renamed:    krypton.txt -> earth.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    renamed:    krypton.txt -> earth.txt\n"
"\n"
"~~~"

#: git-novice/_extras/discuss.md:447
msgid ""
"Notice how Git has now figured out that the `krypton.txt` has not\n"
"disappeared - it has simply been renamed."
msgstr ""
"Зверніть увагу, як Git тепер зрозумів, що `krypton.txt` не\n"
"зник - його просто перейменували."

#: git-novice/_extras/discuss.md:450
msgid "The final step, as before, is to commit our change to the repository:"
msgstr "Останнім кроком, як і раніше, є внесення змін до репозиторію:"

# code block
#: git-novice/_extras/discuss.md:452
msgid ""
"~~~\n"
"$ git commit -m 'Superman's home is Earth, told you before.'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Superman's home is Earth, told you before.'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:457
msgid "## Further .gitignore concepts"
msgstr "## Більше концептів .gitignore"

#: git-novice/_extras/discuss.md:459
msgid ""
"For additional documentation on .gitignore, please reference\n"
"[the official git documentation](https://git-scm.com/docs/gitignore)."
msgstr ""
"Для додаткової документації на .gitignore, будь ласка, посилання\n"
"[офіційна документація git](https://git-scm.com/docs/gitignore)."

#: git-novice/_extras/discuss.md:462
msgid ""
"In the ignore exercise, learners were presented with two variations of ignoring\n"
"nested files. Depending on the organization of your repository, one may suit\n"
"your needs over another. Keep in mind that the way that Git travels along\n"
"directory paths can be confusing. "
msgstr ""
"У вправі на ігнорування, учням були прелставлені дві варіації ігнорування\n"
"вкладених файлів. Залежно від організації вашого репозиторію може задовольнити ваші потреби\n"
"над іншим. Майте на увазі, що шлях, яким Git подорожує по\n"
"шляхах директорій може бути заплутаним. "

#: git-novice/_extras/discuss.md:467
msgid ""
"Sometimes the `**` pattern comes in handy, too, which matches multiple\n"
"directory levels. E.g. `**/results/plots/*` would make git ignore the\n"
"`results/plots` directory in any root directory.  "
msgstr ""
"Іноді `**` шаблон стає теж в нагоді, який відповідає кратному\n"
"рівню директорій. Наприклад, `**/results/plots/*` змусить git ігнорувати\n"
"директорію `results/plots` у будь-якій кореневій директорії."

# blockquote, which can be cascaded
#: git-novice/_extras/discuss.md:471
msgid "> ## Ignoring Nested Files: Challenge Problem"
msgstr "> ## Ігнорування вкладених файлів: проблема задачі"

#: git-novice/_extras/discuss.md:472
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> results/run001.log\n"
"> results/run002.log\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> And a .gitignore that looks like:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> ~~~"
msgstr ""
">\n"
"> Враховуючи структуру директорій, яка виглядає як:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> results/run001.log\n"
"> results/run002.log\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> Та .gitignore, яка виглядає так:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> ~~~"

#: git-novice/_extras/discuss.md:489
msgid ""
">\n"
"> How would you track all of the contents of `results/data/`, including `*.dat`\n"
"> files, but ignore the rest of `results/`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > To do this, your .gitignore would look like this:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat                 # ignore the .dat files\n"
"> > results/*             # ignore the files in the results directory\n"
"> > !results/data/        # do not ignore the files in results/data\n"
"> > !results/data/*       # do not ignore the .dat files in reults/data\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> HЯк би ви відстежували весь вміст `results/data/`, включаючи файли `*.dat`,\n"
"> але ігноруючи інші `results/`?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Для цього ваш .gitignore буде виглядати так:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat                 # ігноруйте файли .dat\n"
"> > results/*             # ігноруйте файли в директорії\n"
"> > !results/data/        # не ігноруйте файли в results/data\n"
"> > !results/data/*       # не ігноруйте файли .dat в reults/data\n"
"> > ~~~\n"
"> > {: .output}"

# Front Matter
#: git-novice/_extras/figures.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Figures\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Figures\n"
"---"

#: git-novice/_extras/figures.md:5
msgid "{% include all_figures.html %}"
msgstr "{% include all_figures.html %}"

# Front Matter
#: git-novice/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Нотатки інструктора\"\n"
"---"

#: git-novice/_extras/guide.md:5
msgid ""
"Using a software tool to handle the versions of your project files\n"
"lets you focus on the more interesting/innovative aspects of your project."
msgstr ""
"Використання програмного інструменту для обробки версій файлів вашого проєкту\n"
"дозволяє зосередитися на більш цікавих/інноваційних аспектах вашого проєкту."

# unordered list
#: git-novice/_extras/guide.md:8
msgid "*   Version control's advantages"
msgstr "*   Переваги контролю версій"

# unordered list
#: git-novice/_extras/guide.md:9
msgid "    *   It's easy to set up"
msgstr "    *   Його легко встановити"

# unordered list
#: git-novice/_extras/guide.md:10
msgid ""
"    *   Every copy of a Git repository is a full backup of a project and its"
" history"
msgstr ""
"    *   Кожна копія репозиторію Git - це повне резервне копіювання проєкту "
"та його історії"

# unordered list
#: git-novice/_extras/guide.md:11
msgid ""
"    *   A few easy-to-remember commands are all you need for most day-to-day"
" version control tasks"
msgstr ""
"    *   Кілька простих для запам'ятовування команд - це все, що потрібно для"
" більшості завдань керування версіями щодня"

# unordered list
#: git-novice/_extras/guide.md:12
msgid ""
"    *   The [GitHub][github] hosting service provides a web-based "
"collaboration service"
msgstr "    *   Хостинг [GitHub][github] надає колабораційний веб-сервіс"

# unordered list
#: git-novice/_extras/guide.md:13
msgid "*   Two main concepts"
msgstr "*   Два основних поняття"

# unordered list
#: git-novice/_extras/guide.md:14
msgid "    *   *commit*: a recorded set of changes in your project's files"
msgstr "    *   *commit*: записаний набір змін у файлах вашого проєкту"

# unordered list
#: git-novice/_extras/guide.md:15
msgid "    *   *repository*: the history of all your project's commits"
msgstr "    *   *repository*: історія всіх комітів вашого проєкту"

# unordered list
#: git-novice/_extras/guide.md:16
msgid "*   Why use GitHub?"
msgstr "*   Для чого користуватися GitHub?"

# unordered list
#: git-novice/_extras/guide.md:17
msgid "    *   No need for a server: easy to set up"
msgstr "    *   Немає необхідності в сервері: легко налаштувати"

# unordered list
#: git-novice/_extras/guide.md:18
msgid ""
"    *   GitHub's strong community: your colleagues are probably already "
"there"
msgstr "    *   Сильна спільнота GitHub: ваші колеги, напевно, вже є там"

# header
#: git-novice/_extras/guide.md:20
msgid "## Overall"
msgstr "## Загалом"

#: git-novice/_extras/guide.md:22
msgid ""
"Version control might be the most important topic we teach, but Git is\n"
"definitely the most complicated tool.  However, GitHub presently dominates the\n"
"open software repository landscape, so the time and effort required to teach\n"
"fundamental Git is justified and worthwhile."
msgstr ""
"Контроль версій може бути найважливішою темою, яку ми викладаємо, але Git,\n"
"безумовно, є найскладнішим інструментом.  Однак GitHub в даний час домінує у\n"
"відкритому ландшафті репозиторію програмного забезпечення, тому час та зусилля, необхідні для вивчення\n"
"фундаменту Git, виправдані та варті того."

#: git-novice/_extras/guide.md:27
msgid ""
"Because of this complexity, we don't teach novice learners about many\n"
"interesting topics, such as branching, hashes, and commit objects."
msgstr ""
"Через цю складність, ми не вчимо початківців багатьом\n"
"цікавим темам, такі як розгалуження, хеші так об`єкти комітів."

#: git-novice/_extras/guide.md:30
msgid ""
"Instead we try to convince them that version control is useful for researchers\n"
"working in teams or not, because it is"
msgstr ""
"Замість цього ми намагаємося переконати їх, що контроль версій корисний для дослідників,\n"
"які працюють в командах чи ні, бо це"

# unordered list
#: git-novice/_extras/guide.md:33
msgid "*   a better way to \"undo\" changes,"
msgstr "*   кращий спосіб \"скасувати\" зміни,"

# unordered list
#: git-novice/_extras/guide.md:34
msgid "*   a better way to collaborate than mailing files back and forth, and"
msgstr ""
"*   кращий спосіб для колаборування, ніж розсилка файлів туди-сюди, та"

# unordered list
#: git-novice/_extras/guide.md:35
msgid ""
"*   a better way to share your code and other scientific work with the "
"world."
msgstr ""
"*   кращий спосіб поділитися своїм кодом та іншою науковою роботою зі "
"світом."

# header
#: git-novice/_extras/guide.md:37
msgid "## Teaching Notes"
msgstr "## Навчальні нотатки"

# unordered list
#: git-novice/_extras/guide.md:39
msgid ""
"*   You can \"split\" your shell so that recent commands remain in view "
"using [this](https://github.com/rgaiacs/swc-shell-split-window) script."
msgstr ""
"*   Ви можете \"розділити\" ваш термінал так, щоб останні команди залишалися"
" в полі зору за допомогою [цього](https://github.com/rgaiacs/swc-shell-"
"split-window) скрипту."

# unordered list
#: git-novice/_extras/guide.md:41
msgid "*   Make sure the network is working *before* starting this lesson."
msgstr "*   Переконайтеся, що мережа працює, *перш ніж* почати цей урок."

# unordered list
#: git-novice/_extras/guide.md:43
msgid ""
"*   Drawings are particularly useful in this lesson: if you have a "
"whiteboard,"
msgstr "*   Малюнки особливо корисні в цьому уроці: якщо у вас є дошка,"

#: git-novice/_extras/guide.md:44
msgid "    [use it][drawings]!"
msgstr "    [користуйтеся нею][drawings]!"

# unordered list
#: git-novice/_extras/guide.md:46
msgid "*   Version control is usually not the first subject in a workshop,"
msgstr "* Контроль версій, як правило, не перший предмет в семінарі,"

#: git-novice/_extras/guide.md:47
msgid ""
"    so get learners to create a GitHub account after the session before.\n"
"    Remind learners that the username and email they use for GitHub (and setup\n"
"    during Git configuration) will be viewable to the public by default.\n"
"    However, there are many reasons why a learner may not want their personal\n"
"    information viewable, and GitHub has [resources for keeping an email address\n"
"    private][github-privacy]."
msgstr ""
"    так що разом з учнями створіть обліковий запис GitHub після попередньої сесії.\n"
"    Нагадайте учням, що ім`я користувача та електронна пошта, яку вони використовують для GitHub (і налаштування\n"
"    під час конфігурації Git) будуть доступні для перегляди громадськості за замовчуванням.\n"
"    Однак, є багато причин, чому учень може не хотіти, щоб його особисту\n"
"    інформацію переглядали, і GitHub має [ресурси для зберігання адреси електронної пошти\n"
"    приватною][github-privacy]."

# unordered list
#: git-novice/_extras/guide.md:54
msgid ""
"*   If some learners are using Windows, there will inevitably be issues"
msgstr ""
"*   Якщо деякі учні використовують Windows, неминуче виникнуть проблеми"

#: git-novice/_extras/guide.md:55
msgid ""
"    merging files with different line endings.  (Even if everyone's on\n"
"    some flavor of Unix, different editors may or may not add a\n"
"    newline to the last line of a file.) Take a moment to explain\n"
"    these issues, since learners will almost certainly trip over them\n"
"    again.  If learners are running into line ending problems, GitHub\n"
"    has a [page][github-line-endings] that helps with troubleshooting.\n"
"    Specifically, the [section on refreshing a repository][github-line-endings-refresh]\n"
"    may be helpful if learners need to change the `core.autocrlf` setting\n"
"    after already having made one or more commits."
msgstr ""
"    з об`єднанням файлів з різними закінченнями рядків.   (Навіть якщо всі використовують\n"
"    той чи інший вариант Unix, різні редактори, в залежності від їх налаштувань, можуть додавати або не додавати\n"
"    новий рядок до останнього рядка файла.) Знайдіть хвилину, щоб пояснити\n"
"    ці питання, так як учні напевно будуть повертатися до них знову\n"
"    і знову.  Якщо учні стикаються з проблемами закінчення лінії, GitHub\n"
"    має [сторінку][github-line-endings], що допомагає в усуненні несправностей.\n"
"    Зокрема, [розділ про оновлення репозиторію][github-line-endings-refresh]\n"
"    може бути корисним, якщо учням потрібно змінити налаштування `core.autocrlf`\n"
"    після того, як вже зробили один або кілька комітів."

# unordered list
#: git-novice/_extras/guide.md:65
msgid ""
"*   We don't use a Git GUI in these notes because we haven't found one that"
msgstr ""
"*   Ми не використовуємо Git GUI в цих нотатках, тому що ми не знайшли той, "
"який"

#: git-novice/_extras/guide.md:66
msgid ""
"    installs easily and runs reliably on the three major operating systems, and\n"
"    because we want learners to understand what commands are being run.  That\n"
"    said, instructors should demo a GUI on their desktop at some point during\n"
"    this lesson and point learners at [this page][github-gui]."
msgstr ""
"    легко встановлюється і надійно працює на трьох основних операційних системах, і\n"
"    тому що ми хочемо, щоб учні розуміли. які команди виконуютьсяю  Тим не \n"
"    менш, інструктори повинні демонстувати графічний інтерфейс на своєму робочому столі в якийсь момент під час\n"
"    цього уроку і точкових учнів на [цій сторінці][github-gui]."

# unordered list
#: git-novice/_extras/guide.md:71
msgid "*   Instructors should show learners graphical diff/merge tools like"
msgstr ""
"*   Інструктори повинні показати учням графічні diff/merge інструменти, як "

#: git-novice/_extras/guide.md:72
msgid "    [DiffMerge][diffmerge]."
msgstr "    [DiffMerge][diffmerge]."

# unordered list
#: git-novice/_extras/guide.md:74
msgid ""
"*   When appropriate, explain that we teach Git rather than CVS, Subversion,"
" or"
msgstr ""
"*   При необхідності поясніть, що ми навчаємо Git, а не CVS, Subversion, або"

#: git-novice/_extras/guide.md:75
msgid ""
"    Mercurial primarily because of GitHub's growing popularity: CVS and\n"
"    Subversion are now seen as legacy systems, and Mercurial isn't nearly as\n"
"    widely used in the sciences right now."
msgstr ""
"    Mercurial, перш за все, через зростаючу популярність GitHub: CVS та\n"
"    Subversion тепер розглядаються як застарілі системи, і Mercurial не так широко\n"
"    зараз використовується в науках."

# unordered list
#: git-novice/_extras/guide.md:79
msgid "*   Further resources:"
msgstr "*   Більше ресурсів:"

# unordered list
#: git-novice/_extras/guide.md:80
msgid "    *    [git-it][git-it] is a self-paced command-line Git demo,"
msgstr "    *    [git-it][git-it] це самостійний командний рядок Git демо,"

#: git-novice/_extras/guide.md:81
msgid ""
"         with [git-it-electron][git-it-electron] its GitHub Desktop successor.\n"
"    *    [Code School][code-school] has a free interactive course, [Try Git][try-git].\n"
"    *    for instructors, [the Git parable][git-parable] is useful background reading"
msgstr ""
"         з [git-it-electron][git-it-electron] його наступником GitHub Desktop.\n"
"    *    [Code School][code-school] має безкоштовний інтерактивний курс [Try Git][try-git].\n"
"    *    для викладачів, [Git притча][git-parable] - корисне фонове читання"

# header
#: git-novice/_extras/guide.md:85
msgid ""
"## [Automated Version Control]({{ page.root }}{% link _episodes/01-basics.md"
" %})"
msgstr ""
"## [Автоматичний контроль версій]({{ page.root }}{% link "
"_episodes/01-basics.md %})"

# unordered list
#: git-novice/_extras/guide.md:87
msgid ""
"*   Ask, \"Who uses 'undo' in their editor?\" All say \"Me\". 'Undo' is the "
"simplest"
msgstr ""
"*   Запитайте, \"Хто користується 'скасувати' у своєму редакторі?\" Всі "
"скажуть: \"Я\". 'Скасувати' - найпростіша"

#: git-novice/_extras/guide.md:88
msgid "    form of version control."
msgstr "    форма контролю версій."

# unordered list
#: git-novice/_extras/guide.md:90
msgid ""
"*   Give learners a five-minute overview of what version control does for "
"them"
msgstr ""
"*   Дайте учням п'ятихвилинний огляд того, що для них робить контроль "
"версій,"

#: git-novice/_extras/guide.md:91
msgid ""
"    before diving into the watch-and-do practicals.  Most of them will have\n"
"    tried to co-author papers by emailing files back and forth, or will have\n"
"    biked into the office only to realize that the USB key with last night's\n"
"    work is still on the kitchen table.  Instructors can also make jokes about\n"
"    directories with names like \"final version\", \"final version revised\",\n"
"    \"final version with reviewer three's corrections\", \"really final version\",\n"
"    and, \"come on this really has to be the last version\" to motivate version\n"
"    control as a better way to collaborate and as a better way to back work up."
msgstr ""
"    перед зануренням в спостарігайте-та-робіть практичні роботи.  Більшість з них спробують\n"
"    стати співавторами статей шляхом розсилки файлів туди-сюди, або\n"
"    заїдуть в офіс тільки для того, щоб зрозуміти, що USB-ключ з роботою минулої ночі\n"
"    все ще знаходиться на кухонному столі.  Інструктори також можуть жартувати про\n"
"    директоорії з назвами, такими як \"остаточна версія\", \"переглянута остаточна версія\",\n"
"    \"остаточна версія з трьома поправками\", \"дійсно остаточна версія\",\n"
"    та, \"ну ж бо, це дійсно має бути остання версія\", щоб мотивувати контроль версій\n"
"    як кращий спосіб співпраці та як кращий спосіб резервного копіювання роботи."

# header
#: git-novice/_extras/guide.md:100
msgid "## [Setting Up Git]({{ page.root }}{% link _episodes/02-setup.md %})"
msgstr ""
"## [Налаштування Git]({{ page.root }}{% link _episodes/02-setup.md %})"

# unordered list
#: git-novice/_extras/guide.md:102
msgid ""
"*   We suggest instructors and students use `nano` as the text editor for "
"this"
msgstr ""
"*   Ми рекомендуємо інструкторам та учням використовувати `nano`, як "
"текстовий редактор для цих"

#: git-novice/_extras/guide.md:103
msgid "    lessons because"
msgstr "    уроків, тому що"

# unordered list
#: git-novice/_extras/guide.md:105
msgid "    *   it runs in all three major operating systems,"
msgstr "    *   він працює у всіх трьох основних операційних системах"

# unordered list
#: git-novice/_extras/guide.md:106
msgid ""
"    *   it runs inside the shell (switching windows can be confusing to "
"students), and"
msgstr ""
"    *   він працює всередині терміналу (перемикання вікон може заплутати "
"учнів), та"

# unordered list
#: git-novice/_extras/guide.md:107
msgid "    *   it has shortcut help at the bottom of the window."
msgstr "    *   у нижній частині вікна є клавіатурні скорочення."

#: git-novice/_extras/guide.md:109
msgid ""
"    Please point out to students during setup that they can and should use\n"
"    another text editor if they're already familiar with it."
msgstr ""
"    Будь ласка, вкажіть студентам під час налаштування, що вони можуть і повинні використовувати\n"
"    інший текстовий редактор, якщо вони вже знайомі з ним."

# unordered list
#: git-novice/_extras/guide.md:112
msgid ""
"*   When setting up Git, be very clear what learners have to enter: it is"
msgstr ""
"*   Коли налаштовуєте Git, будьте дуже уважні що студенти повинні ввести: це"

#: git-novice/_extras/guide.md:113
msgid ""
"    common for them to edit the instructor's details (e.g. email).  Check at\n"
"    the end using `git config --list`."
msgstr ""
"    розповсюдженно для них редагувати деталі інструктора (наприклад, електронна пошта).  В кінці кінців,\n"
"    перевірте за допомогою `git config --list`."

# unordered list
#: git-novice/_extras/guide.md:116
msgid ""
"*   When setting up the default branch name, if learners have a Git version"
msgstr ""
"*   Під час налаштування типового імені гілки, якщо учні мають версію Git"

#: git-novice/_extras/guide.md:117
msgid ""
"    older than 2.28, the default branch name can be changed for the lesson\n"
"    using `git branch -M main` if there are currently commits in the repository,\n"
"    or `git checkout -b main` if there are no commits/the repository is completely empty."
msgstr ""
"    старше ніж 2.28, ім`я гілки за замовчуванням можна змінити для уроку,\n"
"    використовуючи `git branch -M main`, якщо в репозиторії є коміти,\n"
"    або `git checkout -b main`, якщо немає комітів/репозиторій повністю пустий."

# header
#: git-novice/_extras/guide.md:121
msgid ""
"## [Creating a Repository]({{ page.root }}{% link _episodes/03-create.md %})"
msgstr ""
"## [Створення репозиторію]({{ page.root }}{% link _episodes/03-create.md %})"

# unordered list
#: git-novice/_extras/guide.md:123
msgid ""
"*   When you do `git status`, Mac users may see a `.DS_Store` file showing "
"as"
msgstr ""
"*   Коли ви робите `git status`, користувачі Mac можуть бачити файл "
"`.DS_Store`, що відображається як"

#: git-novice/_extras/guide.md:124
msgid "    untracked. This a file that Mac OS creates in each directory."
msgstr "    неперевірений. Це файл, який Mac OS створює в кожній директорії."

# unordered list
#: git-novice/_extras/guide.md:126
msgid ""
"*   The challenge \"Places to create repositories\" tries to reinforce the "
"idea"
msgstr ""
"*   Завдання \"місця для створення репозиторіїв\" намагається підкріпити "
"ідею,"

#: git-novice/_extras/guide.md:127
msgid ""
"    that the `.git` folder contains the whole Git repo and deleting this folder\n"
"    undoes a `git init`. It also gives the learner the way to fix the common\n"
"    mistake of putting unwanted folders (like `Desktop`) under version control."
msgstr ""
"    що папка `.git` містить весб репо Git і видалення цієї папки\n"
"    скасовує `git init`. Це також дає учневі спосіб виправити загальну\n"
"    помилку введення небажаних папок (наприклад, `Desktop`) під контролем версій."

#: git-novice/_extras/guide.md:131
msgid ""
"    Instead of removing the `.git` folder directly, you can choose to move it\n"
"    first to a safer directory and remove it from there:"
msgstr ""
"    Замість безпосереднього видалення папки `.git`, ви можете перемістити її\n"
"    спочатку в більш безпечну директорію і видалити її звідти:"

#: git-novice/_extras/guide.md:134
msgid ""
"    ~~~\n"
"    $ mv .git temp_git\n"
"    $ rm -rf  temp_git\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""
"    ~~~\n"
"    $ mv .git temp_git\n"
"    $ rm -rf  temp_git\n"
"    ~~~\n"
"    {: .language-bash}"

#: git-novice/_extras/guide.md:140
msgid ""
"    The challenge suggests that it is a bad idea to create a Git repo inside another repo.\n"
"    For more discussion on this topic, please see [this issue][repos-in-repos]."
msgstr ""
"    Завдання говорить про те, що це погана ідея створити репо Git всередині іншого репо.\n"
"    Для додаткової дискусії на цю тему, будь ласка, дивіться [це питання][repos-in-repos]."

# header
#: git-novice/_extras/guide.md:143
msgid ""
"## [Tracking Changes]({{ page.root }}{% link _episodes/04-changes.md %})"
msgstr ""
"## [Відстеження змін]({{ page.root }}{% link _episodes/04-changes.md %})"

# unordered list
#: git-novice/_extras/guide.md:145
msgid ""
"*   It's important that learners do a full commit cycle by themselves (make"
msgstr "*   Важливо, щоб учні робили повний цикл комітів самостійно (вносили"

#: git-novice/_extras/guide.md:146
msgid ""
"    changes, `git diff`, `git add`, and `git commit`). The \"`bio` repository\"\n"
"    challenge does that."
msgstr ""
"    зміни, `git diff`, `git add`, та `git commit`). Завдання \"репозиторій `bio`\"\n"
"    робить це."

# unordered list
#: git-novice/_extras/guide.md:149
msgid ""
"*   This is a good moment to show a diff with a graphical diff tool. If you"
msgstr ""
"*   Це хороший момент, щоб показати різницю з графічним інструментом diff. "
"Якщо ви"

#: git-novice/_extras/guide.md:150
msgid "    skip it because you're short on time, show it once in GitHub."
msgstr ""
"    пропустили його, тому що у вас обмаль часу, покажіть його один раз в "
"GitHub."

# unordered list
#: git-novice/_extras/guide.md:152
msgid ""
"*   One thing may cause confusion is recovering old versions.  If, instead "
"of"
msgstr ""
"*   Одна річ може викликати плутанину - відновлення старих версій. Якщо "
"замість"

#: git-novice/_extras/guide.md:153
msgid ""
"    doing `$ git checkout f22b25e mars.txt`, someone does `$ git checkout\n"
"    f22b25e`, they wind up in the \"detached HEAD\" state and confusion abounds.\n"
"    It's then possible to keep on committing, but things like `git push origin\n"
"    main` a bit later will not give easily comprehensible results.  It also\n"
"    makes it look like commits can be lost.  To \"re-attach\" HEAD, use\n"
"    `git checkout main`."
msgstr ""
"    `$ git checkout f22b25e mars.txt` хтось робить `$ git checkout\n"
"    f22b25e`, вони заводяться у \"відсторонений HEAD\" стан і плутанина рясніє.\n"
"    Потім можна продовжувати комітити, але такі речі, як `git push origin\n"
"    main` трохи пізніше легко не дасть зрозумілих результатів.  Це також\n"
"    може виглядати, що коміти були втрачені.  Щоб \"повторно прикріпити\" HEAD, використовуйте\n"
"    `git checkout main`."

# unordered list
#: git-novice/_extras/guide.md:160
msgid ""
"*   This is a good moment to show a log within a Git GUI. If you skip it"
msgstr ""
"*   Це хороший момент, щоб показати log в графічному інтерфейсі Git. Якщо ви"
" пропустите його,"

#: git-novice/_extras/guide.md:161
msgid "    because you're short on time, show it once in GitHub."
msgstr "    тому що у вас обмаль часу - покажіть його один раз на GitHub."

# header
#: git-novice/_extras/guide.md:163
msgid "## [Ignoring Things]({{ page.root }}{% link _episodes/06-ignore.md %})"
msgstr ""
"## [Ігнорування речей]({{ page.root }}{% link _episodes/06-ignore.md %})"

#: git-novice/_extras/guide.md:165
msgid ""
"Just remember that you can use wildcards and regular expressions to ignore a\n"
"particular set of files in `.gitignore`."
msgstr ""
"Просто пам'ятайте, що ви можете використовувати шаблони і регулярні вирази, щоб ігнорувати\n"
"особливий набір файлів в `.gitignore`."

# header
#: git-novice/_extras/guide.md:168
msgid ""
"## [Remotes in GitHub]({{ page.root }}{% link _episodes/07-github.md %})"
msgstr ""
"## [Пульти в GitHub]({{ page.root }}{% link _episodes/07-github.md %})"

# unordered list
#: git-novice/_extras/guide.md:170
msgid ""
"*   Make it clear that Git and GitHub are not the same thing: Git is an open"
msgstr ""
"*   Дайте зрозуміти, що Git і GitHub - це не одне і те ж: Git - це "
"інструмент"

#: git-novice/_extras/guide.md:171
msgid ""
"    source version control tool, GitHub is a company that hosts Git\n"
"    repositories in the web and provides a web interface to interact with repos\n"
"    they host."
msgstr ""
"    управління версією з відкритим кодом, GitHub - це компанія, яка розміщує Git\n"
"    репозиторії в Інтернеті та надає веб-інтерфейс для взаємодії з репозиторіями,\n"
"    які вони приймають."

# unordered list
#: git-novice/_extras/guide.md:175
msgid ""
"*   If your learners are advanced enough to be comfortable with SSH, tell "
"them"
msgstr ""
"*   Якщо ваші учні достатньо просунуті, щоб бути комфортними з SSH, скажіть "
"їм,"

#: git-novice/_extras/guide.md:176
msgid ""
"    they can use keys to authenticate on GitHub instead of passwords, but don't\n"
"    try to set this up during class: it takes too long, and is a distraction\n"
"    from the core ideas of the lesson."
msgstr ""
"    що вони можуть використовувати ключі для автентифікації на GitHub замість паролів, але не\n"
"    намагайтеся налаштувати це під час класу: це займає занадто багато часу, і це відволікає\n"
"    відволікає від основних ідей уроку."

# unordered list
#: git-novice/_extras/guide.md:180
msgid ""
"*   It is very useful to draw a diagram showing the different repositories"
msgstr "*   Дуже корисно намалювати діаграму з різними"

#: git-novice/_extras/guide.md:181
msgid "    involved."
msgstr "    сховищами."

# unordered list
#: git-novice/_extras/guide.md:183
msgid ""
"*   When pushing to a remote, the output from Git can vary slightly "
"depending on"
msgstr ""
"*    При відправленні змін на віддалений репозиторій, результат від Git може"
" незначно відрізнятис від того, що"

#: git-novice/_extras/guide.md:184
msgid ""
"    what leaners execute. The lesson displays the output from git if a learner\n"
"    executes `git push origin main`. However, some learners might use syntax\n"
"    suggested by GitHub for pushing to a remote with an existing repository,\n"
"    which is `git push -u origin main`. Learners using syntax from GitHub,\n"
"    `git push -u origin main`, will have slightly different output, including\n"
"    the line `Branch main set up to track remote branch main from origin by rebasing.`"
msgstr ""
"    виконують слухачі. урок відображає результат від git, якщо слухач\n"
"    виконує `git push origin main`. Однак деякі слухачі можуть використовувати синтаксис,\n"
"    запропонований GitHub, для відправлення на віддалений репозиторій вже з існуючим репозиторієм,\n"
"    тобто `git push -u origin main`. Слухачі, які використовують синтаксис від GitHub,\n"
"    `git push -u origin main`, будуть мати дещо інший результат, включаючи\n"
"    рядок `Branch main set up to track remote branch main from origin by rebasing.`"

# header
#: git-novice/_extras/guide.md:191
msgid "## [Collaborating]({{ page.root }}{% link _episodes/08-collab.md %})"
msgstr "## [Колаборація]({{ page.root }}{% link _episodes/08-collab.md %})"

# unordered list
#: git-novice/_extras/guide.md:193
msgid "*   Decide in advance whether all the learners will work in one shared"
msgstr ""
"*   Вирішіть заздалегідь, чи будуть всі учні працювати в одному спільному"

#: git-novice/_extras/guide.md:194
msgid ""
"    repository, or whether they will work in pairs (or other small groups) in\n"
"    separate repositories.  The former is easier to set up; the latter runs\n"
"    more smoothly."
msgstr ""
"    репозиторії, або вони будуть працювати в парах (або інших невеликих групах) в\n"
"    окремих репозиторіях.  Перший варіант легше налаштувати; останній працює\n"
"    більш гладко."

# unordered list
#: git-novice/_extras/guide.md:198
msgid ""
"*   Role playing between two instructors can be effective when teaching the"
msgstr ""
"*   Рольова гра між двома інструкторами може бути ефективною при викладанні "

#: git-novice/_extras/guide.md:199
msgid ""
"    collaboration and conflict sections of the lesson.  One instructor can play\n"
"    the role of the repository owner, while the second instructor can play the\n"
"    role of the collaborator.  If it is possible, try to use two projectors so\n"
"    that the computer screens of both instructors can be seen.  This makes for\n"
"    a very clear illustration to the students as to who does what."
msgstr ""
"    розділів про колаборацію та конфлікти.  Один інструктор може грати\n"
"    роль власника репозиторію, в той час як другий інструктор може грати\n"
"    роль колаборанта.  Якщо це можливо, спробуйте використовувати два проєктори так,\n"
"    що компʼютерні еркани обох інструкторів можна булоб побачити.  Це було б дуже\n"
"    чіткою ілюстрацією для студентів щодо того, хто що робить."

# unordered list
#: git-novice/_extras/guide.md:205
msgid ""
"*   It is also effective to pair up students during this lesson and assign "
"one"
msgstr ""
"*   Також ефективно поєднувати унчів під час цього уроку і призначати одному"

#: git-novice/_extras/guide.md:206
msgid ""
"    member of the pair to take the role of the owner and the other the role of\n"
"    the collaborator.  In this setup, challenges can include asking the\n"
"    collaborator to make a change, commit it, and push the change to the remote\n"
"    repository so that the owner can then retrieve it, and vice-versa.  The\n"
"    role playing between the instructors can get a bit \"dramatic\" in the\n"
"    conflicts part of the lesson if the instructors want to inject some humor\n"
"    into the room."
msgstr ""
"    члену пари роль власника, а іншому - роль\n"
"    колаборанта.  У цій установці задачі можуть включати в себе прохання\n"
"    колаборанта внести зміни, закомітити це і відправити їх до віддаленого\n"
"    репозиторію, так що власник може потім отримати його, і навпаки.  Роль\n"
"    гри між інструкторами може стати трохи \"драматичною\" в\n"
"    частині уроку про конфлікти, якщо інструктори хочуть ввести ще більше\n"
"    гумору."

# unordered list
#: git-novice/_extras/guide.md:214
msgid ""
"*   If you don't have two projectors, have two instructors at the front of "
"the"
msgstr ""
"*   Якщо у вас немає двох проєкторів - на початку кімнати повинні бути два"

#: git-novice/_extras/guide.md:215
msgid ""
"    room.  Each instructor does their piece of the collaboration demonstration\n"
"    on their own computer and then passes the projector cord back and forth\n"
"    with the other instructor when it's time for them to do the other part of\n"
"    the collaborative workflow.  It takes less than 10 seconds for each\n"
"    switchover, so it doesn't interrupt the flow of the lesson.\n"
"    And of course it helps to give each of the instructors a different-colored\n"
"    hat, or put different-colored sticky notes on their foreheads."
msgstr ""
"    інструктори.  Кожен інструктор робить свою частину демонстрації колаборації\n"
"    на власному компʼютері, а потім передає шнур проєктора туди-сюди\n"
"    з іншим інструктором, коли їм пора зробити іншу частину\n"
"    робочого процесу.  Це займає менше 10 секунд для кожного\n"
"    перемикання, так що це не перериває потік уроку.\n"
"    І звичайно це допомагає дати кожному з інструкторів різнобарвний\n"
"    капелюх, або наліпити різнокольорові липкі нотатки на чолі."

# unordered list
#: git-novice/_extras/guide.md:223
msgid ""
"*   If you're the only instructor, the best way to create is clone the two"
msgstr ""
"*   Якщо ви єдиний інструктор, найкращий спосіб створити - це клонувати два"

#: git-novice/_extras/guide.md:224
msgid ""
"    repos in your Desktop, but under different names, e.g., pretend one is your\n"
"    computer at work:"
msgstr ""
"    репо на робочому столі, але під різними назвами, наприклад, вдавати, що один з них є вашим\n"
"    комп'ютером на роботі:"

#: git-novice/_extras/guide.md:227
msgid ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git planets-at-work\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git planets-at-work\n"
"    ~~~\n"
"    {: .language-bash}"

# unordered list
#: git-novice/_extras/guide.md:232
msgid ""
"*   It's very common that learners mistype the remote alias or the remote "
"URL"
msgstr ""
"*   Дуже часто учні помилково вводять віддалений псевдонім або віддалений "
"URL"

#: git-novice/_extras/guide.md:233
msgid ""
"    when adding a remote, so they cannot `push`. You can diagnose this with\n"
"    `git remote -v` and checking carefully for typos.\n"
"    - To fix a wrong alias, you can do `git remote rename <old> <new>`.\n"
"    - To fix a wrong URL, you can do `git remote set-url <alias> <newurl> `."
msgstr ""
"    при додаванні віддаленого репозиторію, тому вони не можуть `відправити зміни`. Ви можете діагностувати це за допомогою\n"
"    `git remote -v` і ретельно перевірити наявність помилок.\n"
"    - Щоб виправити неправильний псевдонім, ви можете зробити `git remote rename <old> <new>`.\n"
"    - Щоб виправити неправильний URL, ви можете зробити `git remote set-url <alias> <newurl> `."

# unordered list
#: git-novice/_extras/guide.md:238
msgid ""
"*   Before cloning the repo, be sure that nobody is inside another repo. The"
msgstr ""
"*   Перш ніж клонувати репо, переконайтеся, що ніхто не знаходиться "
"всередині іншого репо."

#: git-novice/_extras/guide.md:239
msgid ""
"    best way to achieve this is moving to the `Desktop` before cloning: `cd &&\n"
"    cd Desktop`."
msgstr ""
"    Найкращий спосіб досягти цього - перейти на `Робочий стіл` перед клонуванням: `cd &&\n"
"    cd Desktop`."

# unordered list
#: git-novice/_extras/guide.md:242
msgid ""
"*   If both repos are in the `Desktop`, have them to clone their "
"collaborator"
msgstr ""
"*   Якщо обидва репо знаходяться в `Робочому столі` - нехай вони клонують "
"репо свого співавтора"

#: git-novice/_extras/guide.md:243
msgid "    repo under a given directory using a second argument:"
msgstr "    під заданим каталогом, використовуючи другий аргумент:"

#: git-novice/_extras/guide.md:245
msgid ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git vlad-planet\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git vlad-planet\n"
"    ~~~\n"
"    {: .language-bash}"

# unordered list
#: git-novice/_extras/guide.md:250
msgid ""
"*   The most common mistake is that learners `push` before `pull`ing. If "
"they"
msgstr ""
"*   Найпоширенішою помилкою є те, що учні `відправляють` зміни перед тим, як"
" `отримати` їх. Якщо вони"

#: git-novice/_extras/guide.md:251
msgid "    `pull` afterward, they may get a conflict."
msgstr ""
"    `отримають` зміни після їх відправлення - може виникнути конфлікт."

# unordered list
#: git-novice/_extras/guide.md:253
msgid ""
"*   Conflicts, sometimes weird, will start to arise. Stay tight: conflicts "
"are"
msgstr ""
"*   Почнуть виникати іноді дивні конфлікти. Зверніть увагу: конфлікти "

#: git-novice/_extras/guide.md:254
msgid "    next."
msgstr "    наступні."

# unordered list
#: git-novice/_extras/guide.md:256
msgid ""
"*   Learners may have slightly different output from `git push` and `git "
"pull`"
msgstr ""
"*   Учні можуть мати трохи інший результат від `git push` та `git pull`,"

#: git-novice/_extras/guide.md:257
msgid "    depending on the version of git, and if upstream (`-u`) is used."
msgstr "    залежно від версії git, і якщо використовується upstream (`-u`)."

# header
#: git-novice/_extras/guide.md:259
msgid "## [Conflicts]({{ page.root }}{% link _episodes/09-conflict.md %})"
msgstr "## [Конфлікти]({{ page.root }}{% link _episodes/09-conflict.md %})"

# unordered list
#: git-novice/_extras/guide.md:261
msgid ""
"*   Expect the learners to make mistakes. Expect *yourself* to make "
"mistakes."
msgstr ""
"*   Очікуйте, що учні зроблять помилки. Очікуйте, що *ви* можете зробити "
"помилки."

#: git-novice/_extras/guide.md:262
msgid ""
"    This happens because it is late in the lesson and everyone is tired."
msgstr ""
"    Це відбувається тому, що урок триває вже достатньо довго і всі "
"втомилися."

# unordered list
#: git-novice/_extras/guide.md:264
msgid ""
"*   If you're the only instructor, the best way to create a conflict is:"
msgstr "*   Якщо ви єдиний інструктор, найкращий спосіб створити конфлікт:"

# unordered list
#: git-novice/_extras/guide.md:266
msgid ""
"    *   Clone your repo in a different directory, pretending is your "
"computer at"
msgstr ""
"    *   Клонуйте свій репо в іншу директорію, вдаючи, що ваш компʼютер "
"знаходиться на"

#: git-novice/_extras/guide.md:267
msgid ""
"        work: `git clone https://github.com/vlad/planets.git planets-at-work`.\n"
"    *   At the office, you make a change, commit and push.\n"
"    *   At your laptop repo, you (forget to pull and) make a change, commit and\n"
"        try to push.\n"
"    *   `git pull` now and show the conflict."
msgstr ""
"        роботі: `git clone https://github.com/vlad/planets.git planets-at-work`.\n"
"    *   В офісі ви зробите зміни, закомітите та відправите зміни.\n"
"    *   В репо на вашому компʼютері, ви (забули отримати зміни та) робите зміни, комітите та\n"
"        намагаєтеся відправити їх.\n"
"    *   тепер введіть `git pull` та покажіть як виглядає конфлікт."

# unordered list
#: git-novice/_extras/guide.md:273
msgid ""
"*   Learners usually forget to `git add` the file after fixing the conflict "
"and"
msgstr ""
"*   Учні зазвичай забувають `git add` файл після виправлення конфлікту та"

#: git-novice/_extras/guide.md:274
msgid "    just (try to) commit. You can diagnose this with `git status`."
msgstr ""
"    просто (намагаються) комітять. Ви можете це продіагнозувати за допомогою"
" `git status`."

# unordered list
#: git-novice/_extras/guide.md:276
msgid "*   Remember that you can discard one of the two parents of the merge:"
msgstr "*   Памʼятайте, що можна відкинути одного з двох батьків злиття:"

# unordered list
#: git-novice/_extras/guide.md:278
msgid ""
"    *   discard the remote file, `git checkout --ours conflicted_file.txt`"
msgstr ""
"    *   відкинути віддалений файл, `git checkout --ours conflicted_file.txt`"

# unordered list
#: git-novice/_extras/guide.md:279
msgid ""
"    *   discard the local file, `git checkout --theirs conflicted_file.txt`"
msgstr ""
"    *   відкинути локальний файл, `git checkout --theirs "
"conflicted_file.txt`"

#: git-novice/_extras/guide.md:281
msgid ""
"    You still have to `git add` and `git commit` after this. This is\n"
"    particularly useful when working with binary files."
msgstr ""
"    Ви все ще повинні зробити `git add` та `git commit` після цього. Особливо\n"
"    це корисно при роботі з бінарними файлами."

# unordered list
#: git-novice/_extras/guide.md:284
msgid ""
"*  Keep in mind that depending on the Git version used, the outputs for"
msgstr ""
"*  Майте на увазі, що в залежності від використовуваної версії Git, "
"результати для"

#: git-novice/_extras/guide.md:285
msgid "   `git push` and `git pull` can vary slightly."
msgstr "   `git push` та `git pull` можуть дещо відрізнятися."

# header
#: git-novice/_extras/guide.md:287
msgid "## [Open Science]({{ page.root }}{% link _episodes/10-open.md %})"
msgstr "## [Відкрита наука]({{ page.root }}{% link _episodes/10-open.md %})"

# header
#: git-novice/_extras/guide.md:289
msgid "## [Licensing]({{ page.root }}{% link _episodes/11-licensing.md %})"
msgstr ""
"## [Ліцензування]({{ page.root }}{% link _episodes/11-licensing.md %})"

#: git-novice/_extras/guide.md:291
msgid ""
"We teach about licensing because questions about who owns what, or can use\n"
"what, arise naturally once we start talking about using public services like\n"
"GitHub to store files. Also, the discussion gives learners a chance to catch\n"
"their breath after what is often a frustrating couple of hours."
msgstr ""
"Ми вчимо про ліцензування, тому що питання про те, хто володіє чим, або що може використовувати,\n"
"виникають природно, як тільки ми починаємо говорити про використання державних послуг, як\n"
"GitHub для зберігання файлів. Також дискусія дає учням шанс перевести\n"
"їх дух після того, що часто розчаровує протягом декількох годин."

#: git-novice/_extras/guide.md:296
msgid ""
"The Creative Commons family of licenses is recommended for many types of\n"
"works (including software documentation and images used in software) but not\n"
"software itself. Creative Commons [recommends][cc-faq-software] a\n"
"software-specific license instead."
msgstr ""
"Сімейство ліцензій The Creative Commons рекомендується для багатьох типів\n"
"робот (включаючи програмну документацію та зображення, які використовуються в програмному забезпеченні), але не\n"
"власне програмне забезпечення. Creative Commons [рекомендує][cc-faq-software]\n"
"ліцензію на програмне забезпечення."

# header
#: git-novice/_extras/guide.md:301
msgid "## [Citation]({{ page.root }}{% link _episodes/12-citation.md %})"
msgstr "## [Цитування]({{ page.root }}{% link _episodes/12-citation.md %})"

# header
#: git-novice/_extras/guide.md:303
msgid "## [Hosting]({{ page.root }}{% link _episodes/13-hosting.md %})"
msgstr "## [Хостинг]({{ page.root }}{% link _episodes/13-hosting.md %})"

#: git-novice/_extras/guide.md:305
msgid ""
"A common concern for learners is having their work publicly available on\n"
"GitHub.  While we encourage open science, sometimes private repos are the\n"
"only choice. It's always interesting to mention the options to have\n"
"web-hosted private repositories."
msgstr ""
"Загальна турбота для учнів - мати їх роботу публічно доступною на\n"
"GitHub.  Хоча ми заохочуємо відкриту науку, іноді приватні репо є\n"
"єдиним вибором. Завжди цікаво згадати варіанти розміщення приватних\n"
"репозиторіїв."

#: git-novice/_extras/guide.md:310
msgid ""
"[cc-faq-software]: https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software\n"
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[drawings]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parable]: http://tom.preston-werner.com/2009/05/19/the-git-parable.html\n"
"[github]: https://github.com/\n"
"[github-gui]: https://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://docs.github.com/en/github/using-git/configuring-git-to-handle-line-endings\n"
"[github-line-endings-refresh]: https://docs.github.com/en/github/using-git/configuring-git-to-handle-line-endings#refreshing-a-repository-after-changing-line-endings\n"
"[github-privacy]: https://help.github.com/articles/keeping-your-email-address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"
msgstr ""
"[cc-faq-software]: https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software\n"
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[drawings]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parable]: http://tom.preston-werner.com/2009/05/19/the-git-parable.html\n"
"[github]: https://github.com/\n"
"[github-gui]: https://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://docs.github.com/en/github/using-git/configuring-git-to-handle-line-endings\n"
"[github-line-endings-refresh]: https://docs.github.com/en/github/using-git/configuring-git-to-handle-line-endings#refreshing-a-repository-after-changing-line-endings\n"
"[github-privacy]: https://help.github.com/articles/keeping-your-email-address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"

# Front Matter
#: git-novice/aio.md:1
msgid ""
"---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"

#: git-novice/aio.md:7
msgid ""
"{% comment %}\n"
"As a maintainer, you don't need to edit this file.\n"
"If you notice that something doesn't work, please \n"
"open an issue: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"
msgstr ""
"{% comment %}\n"
"Як супроводжувач, вам не потрібно редагувати цей файл.\n"
"Якщо ви помітили, що щось не працює, будь ласка\n"
"відкрийте: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"

#: git-novice/aio.md:13
msgid "{% include base_path.html %}"
msgstr "{% include base_path.html %}"

#: git-novice/aio.md:15
msgid "{% include aio-script.md %}"
msgstr "{% include aio-script.md %}"

# Front Matter
#: git-novice/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"permalink: index.html  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .  # Це єдина сторінка, яка не відповідає шаблону /:path/index.html\n"
"permalink: index.html  # Це єдина сторінка, яка не відповідає шаблону /:path/index.html\n"
"---"

#: git-novice/index.md:7
msgid ""
"Wolfman and Dracula have been hired by Universal Missions (a space\n"
"services spinoff from Euphoric State University) to investigate if it\n"
"is possible to send their next planetary lander to Mars.  They want to\n"
"be able to work on the plans at the same time, but they have run into\n"
"problems doing this in the past.  If they take turns, each one will\n"
"spend a lot of time waiting for the other to finish, but if they work\n"
"on their own copies and email changes back and forth things will be\n"
"lost, overwritten, or duplicated."
msgstr ""
"Вольфман і Дракула були найняті Universal Missions (спінофф\n"
"космічних служб з Euphoric State University), щоб дослідити, чи \n"
"можна відправити свій наступний планетарний посадковий модуль на Марс. Вони хочуть мати\n"
"можливість працювати над планами одночасно, але вони зіткнулися з проблемами, що роблять\n"
"це в минулому. Якщо вони будуть робити по черзі, кожен буде\n"
"витрачати багато часу, чекаючи, поки інший закінчить, але якщо вони працюють над\n"
"власними копіями та електронною поштою, зміни туди-сюди будуть втрачені, перезаписані\n"
"або продубльовані."

#: git-novice/index.md:16
msgid ""
"A colleague suggests using [version control]({{ page.root }}{% link reference.md %}#version-control) to\n"
"manage their work. Version control is better than mailing files back and forth:"
msgstr ""
"Колега пропонує використовувати [контроль версій]({{ page.root }}{% link reference.md %}#version-control), щоб \n"
"керувати своєю роботою. Контроль версій краще, ніж розсилка файлів туди-сюди:"

# unordered list
#: git-novice/index.md:19
msgid "*   Nothing that is committed to version control is ever lost, unless"
msgstr "*   Ніщо, що прагне до контролю версій, ніколи не втрачається, якщо"

#: git-novice/index.md:20
msgid ""
"    you work really, really hard at it. Since all old versions of\n"
"    files are saved, it's always possible to go back in time to see\n"
"    exactly who wrote what on a particular day, or what version of a\n"
"    program was used to generate a particular set of results."
msgstr ""
"    ви не працюєте дійсно, дуже важко. Оскільки всі старі версії файлів\n"
"    зберігаються, завжди можна повернутися в часі, щоб побачити, хто\n"
"    саме написав що в певний день, або яка версія програми була використана\n"
"    для створення певного набору результатів."

# unordered list
#: git-novice/index.md:25
msgid ""
"*   As we have this record of who made what changes when, we know who to ask"
msgstr ""
"*   Оскільки ми маємо цей запис про те, хто зробив які зміни коли, ми "
"знаємо, кого запитати,"

#: git-novice/index.md:26
msgid ""
"    if we have questions later on, and, if needed, revert to a previous\n"
"    version, much like the \"undo\" feature in an editor."
msgstr ""
"    якщо у нас є питання пізніше, і, якщо потрібно, повернутися \n"
"    vдо попередньої версії, так само, як функція \"undo\" в редакторі."

# unordered list
#: git-novice/index.md:29
msgid ""
"*   When several people collaborate in the same project, it's possible to"
msgstr "*   Коли кілька людей співпрацюють в одному проєкті, можна випадково"

#: git-novice/index.md:30
msgid ""
"    accidentally overlook or overwrite someone's changes. The version control\n"
"    system automatically notifies users whenever there's a conflict between one\n"
"    person's work and another's."
msgstr ""
"    пропустити або перезаписати чиїсь зміни. Система контролю версій\n"
"    автоматично повідомляє користувачів, коли виникає конфлікт між роботою\n"
"    однієї людини та іншою.."

#: git-novice/index.md:34
msgid ""
"Teams are not the only ones to benefit from version control: lone\n"
"researchers can benefit immensely.  Keeping a record of what was\n"
"changed, when, and why is extremely useful for all researchers if they\n"
"ever need to come back to the project later on (e.g., a year later,\n"
"when memory has faded)."
msgstr ""
"Команди не єдині, хто отримує вигоду від контролю версій: самотні\n"
"дослідники можуть отримати величезну користь. Ведення обліку\n"
"того, що було змінено, коли і чому надзвичайно корисно для всіх дослідників, якщо їм\n"
"коли-небудь потрібно повернутися до проєкту пізніше (наприклад, через рік,\n"
"коли пам'ять зникла)."

#: git-novice/index.md:40
msgid ""
"Version control is the lab notebook of the digital world: it's what\n"
"professionals use to keep track of what they've done and to\n"
"collaborate with other people.  Every large software development\n"
"project relies on it, and most programmers use it for their small jobs\n"
"as well.  And it isn't just for software: books,\n"
"papers, small data sets, and anything that changes over time or needs\n"
"to be shared can and should be stored in a version control system."
msgstr ""
"Контроль версій - це лабораторний ноутбук цифрового світу: це те, що\n"
"професіонали використовують, щоб стежити за тим, що вони зробили і щоб\n"
"співпрацювати з іншими людьми. Кожен великий проєкт розробки\n"
"програмного забезпечення покладається на нього, і більшість програмістів використовують його для\n"
"своїх невеликих робочих місць. І це не тільки для програмного забезпечення: книги, статті, невеликі набори даних, і \n"
"все, що змінюється з плином часу або потребує спільного використання,\n"
"може і має зберігатися в системі контролю версій."

# blockquote, which can be cascaded
#: git-novice/index.md:48
msgid "> ## Prerequisites"
msgstr "> ## Передумови"

#: git-novice/index.md:49
msgid ""
">\n"
"> In this lesson we use Git from the Unix Shell.\n"
"> Some previous experience with the shell is expected,\n"
"> *but isn't mandatory*."
msgstr ""
">\n"
"> У цьому уроці ми використовуємо Git з Unix Shell.\n"
"> SОчікується деякий попередній досвід роботи з shell,\n"
"> *але це не є обов'язковим*."

# SC/DC Template label
#: git-novice/index.md:53
msgid "{: .prereq}"
msgstr "{: .prereq}"

# Front Matter
#: git-novice/reference.md:1
msgid ""
"---\n"
"layout: reference\n"
"---"
msgstr ""
"---\n"
"layout: reference\n"
"---"

# header
#: git-novice/reference.md:5
msgid "## Git Cheatsheets for Quick Reference"
msgstr "## Шпаргалки по Git'у для швидкого ознайомлення"

# unordered list
#: git-novice/reference.md:7
msgid ""
"*   Printable Git cheatsheets in several languages are [available "
"here](https://github.github.com/training-kit/) ([English "
"version](https://github.github.com/training-kit/downloads/github-git-cheat-"
"sheet.pdf)). More material is available from the [GitHub training "
"website](http://try.github.io/)."
msgstr ""
"*   Шпаргалки з Git'у кількома мовами [доступні "
"тут](https://github.github.com/training-kit/) ([Українська "
"версія](https://training.github.com/downloads/ua/github-git-cheat-sheet/)). "
"Більше матеріалів можна знайти за посиланням [Навчальний сайт "
"GitHub](http://try.github.io/)."

# unordered list
#: git-novice/reference.md:8
msgid ""
"*   An [interactive one-page visualisation](http://ndpsoftware.com/git-"
"cheatsheet.html)"
msgstr ""
"*   [Інтерактивна односторінкова візуалізація](http://ndpsoftware.com/git-"
"cheatsheet.html)"

#: git-novice/reference.md:9
msgid ""
"    about the relationships between workspace, staging area, local repository, upstream repository, and the commands associated with each (with explanations).\n"
"*   Both resources are also available in other languages (e.g. Spanish, French, and more).\n"
"* \"[Happy Git and GitHub for the useR](http://happygitwithr.com)\" is an accessible, free online book by Jenny Bryan on how to setup and use Git and GitHub with specific references on the integration of Git with RStudio and working with Git in R.\n"
"* [Open Scientific Code using Git and GitHub](https://open-source-for-researchers.github.io/open-source-workshop/) - A collection of explanations and short practical exercises to help researchers learn more about version control and open source software."
msgstr ""
"    про взаємозв'язки між робочим простором, зоною підготовки, локальним сховищем, вищим сховищем та командами, пов'язаними з кожним з них (з поясненнями).\n"
"*   Обидва ресурси також доступні іншими мовами (наприклад, іспанською, французькою та іншими).\n"
"* \"[Happy Git and GitHub for the useR](http://happygitwithr.com)\" - доступна, безкоштовна онлайн книга Дженні Брайан про те, як налаштувати та використовувати Git і GitHub, з конкретними посиланнями на інтеграцію Git з RStudio та роботу з Git в R.\n"
"* [Open Scientific Code using Git and GitHub](https://open-source-for-researchers.github.io/open-source-workshop/) - - збірка пояснень та коротких практичних вправ, які допоможуть дослідникам дізнатися більше про контроль версій та програмне забезпечення з відкритим кодом."

# header
#: git-novice/reference.md:14
msgid "## Glossary"
msgstr "## Словник"

#: git-novice/reference.md:16
msgid ""
"{:auto_ids}\n"
"changeset\n"
":   A group of changes to one or more files that are or will be added\n"
"    to a single [commit](#commit) in a [version control](#version-control)\n"
"    [repository](#repository)."
msgstr ""
"{:auto_ids}\n"
"changeset\n"
":   Група змін до одного або декількох файлів, які є або будуть додані до одного\n"
"    [коміту](#commit) в [контролі версій](#version-control)\n"
"    [репозиторію](#repository)."

#: git-novice/reference.md:22
msgid ""
"commit\n"
":   To record the current state of a set of files (a [changeset](#changeset))\n"
"    in a [version control](#version-control) [repository](#repository). As a noun,\n"
"    the result of committing, i.e. a recorded changeset in a repository.\n"
"    If a commit contains changes to multiple files,\n"
"    all of the changes are recorded together."
msgstr ""
"коміт\n"
":   Для запису поточного стану набору файлів ([набір змін](#changeset))\n"
"    у [контролі версій](#version-control) [репозиторію](#repository). Як іменник,\n"
"    результат коміту, тобто записаний набір змін у репозиторії.\n"
"    Якщо коміт містить зміни до декількох файлів,\n"
"    всі зміни записуються разом."

#: git-novice/reference.md:29
msgid ""
"conflict\n"
":   A change made by one user of a [version control system](#version-control)\n"
"    that is incompatible with changes made by other users.\n"
"    Helping users [resolve](#resolve) conflicts\n"
"    is one of version control's major tasks."
msgstr ""
"конфлікт\n"
":   Зміна, зроблена одним користувачем [система управління версіями](#version-control),\n"
"    несумісна зі змінами, внесеними іншими користувачами.\n"
"    Допомога користувачам [вирішити](#resolve) конфлікти\n"
"    є одним з основних завдань управління версіями."

#: git-novice/reference.md:35
msgid ""
"HTTP\n"
":   The Hypertext Transfer [Protocol](#protocol) used for sharing web pages and other data\n"
"    on the World Wide Web."
msgstr ""
"HTTP\n"
":   Hypertext Transfer [Протокол](#protocol), що використовується для обміну веб-сторінками та іншими даними\n"
"    у всесвітній павутині."

#: git-novice/reference.md:39
msgid ""
"merge\n"
":   (a repository): To reconcile two sets of changes to a\n"
"    [repository](#repository)."
msgstr ""
"об'єднати\n"
":   (репозиторій): Для узгодження двох наборів змін з\n"
"    [репозиторіїв](#repository)."

#: git-novice/reference.md:43
msgid ""
"protocol\n"
":   A set of rules that define how one computer communicates with another.\n"
"    Common protocols on the Internet include [HTTP](#http) and [SSH](#ssh)."
msgstr ""
"протокол\n"
":   Набір правил, які визначають, як один комп'ютер спілкується з іншим.\n"
"    Загальні протоколи в інтернеті включають [HTTP](#http) та [SSH](#ssh)."

#: git-novice/reference.md:47
msgid ""
"remote\n"
":   (of a repository) A version control [repository](#repository) connected to another,\n"
"    in such way that both can be kept in sync exchanging [commits](#commit)."
msgstr ""
"віддалений\n"
":   (репозиторію) Контроль версій [репозиторій](#repository), підключений до іншого,\n"
"    таким чином, що обидва можуть бути збережені в синхронному обміні [комітів](#commit)."

#: git-novice/reference.md:51
msgid ""
"repository\n"
":   A storage area where a [version control](#version-control) system\n"
"    stores the full history of [commits](#commit) of a project and information\n"
"    about who changed what, when."
msgstr ""
"репозиторій\n"
":   Область зберігання, де [конроль версій](#version-control)  система\n"
"    зберігає повну історію [комітів](#commit) проєкту та інформацію\n"
"    про те, хто що змінив і коли."

#: git-novice/reference.md:56
msgid ""
"resolve\n"
":   To eliminate the [conflicts](#conflict) between two or more incompatible changes to a file or set of files\n"
"    being managed by a [version control](#version-control) system."
msgstr ""
"вирішити\n"
":   Для усунення [конфліктів](#conflict) між двома або більше несумісними змінами до файлу або набору файлів\n"
"    управляється системою [контроль версій](#version-control)."

#: git-novice/reference.md:60
msgid ""
"revision\n"
":   A synonym for [commit](#commit)."
msgstr ""
"ревізія\n"
":   Синонім [коміту](#commit)."

#: git-novice/reference.md:63
msgid ""
"SHA-1\n"
":   [SHA-1 hashes](https://en.wikipedia.org/wiki/SHA-1) is what Git uses to compute identifiers, including for commits.\n"
"    To compute these, Git uses not only the actual change of a commit, but also its metadata (such as date, author,\n"
"    message), including the identifiers of all commits of preceding changes. This makes Git commit IDs virtually unique.\n"
"    I.e., the likelihood that two commits made independently, even of the same change, receive the same ID is exceedingly\n"
"    small."
msgstr ""
"SHA-1\n"
":   [SHA-1 hashes](https://en.wikipedia.org/wiki/SHA-1) - це те, що Git використовує для обчислення ідентифікаторів, у тому числі для комітів.\n"
"    Для їх обчислення Git використовує не тільки фактичну зміну коміту, але і його метадані (такі як дата, автор,\n"
"    повідомлення), включаючи ідентифікатори всіх комітів попередніх змін. Це робить ідентифікатори комітів Git практично унікальними.\n"
"    Тобто ймовірність того, що два коміти, зроблені незалежно один від одного, навіть однієї і тієї ж зміни, отримують один і той же ідентифікатор, надзвичайно\n"
"    мала."

#: git-novice/reference.md:70
msgid ""
"SSH\n"
":   The Secure Shell [protocol](#protocol) used for secure communication between computers."
msgstr ""
"SSH\n"
":   Secure Shell [протокол](#protocol) використовується для безпечного зв'язку між комп'ютерами."

#: git-novice/reference.md:73
msgid ""
"timestamp\n"
":   A record of when a particular event occurred."
msgstr ""
"часова мітка\n"
":   Запис про те, коли сталася певна подія."

#: git-novice/reference.md:76
msgid ""
"version control\n"
":   A tool for managing changes to a set of files.\n"
"    Each set of changes creates a new [commit](#commit) of the files;\n"
"    the version control system allows users to recover old commits reliably,\n"
"    and helps manage conflicting changes made by different users."
msgstr ""
"контроль версій\n"
":   Інструмент для керування змінами набору файлів.\n"
"    Кожен набір змін створює новий [коміт](#commit) файлів;\n"
"    система контролю версій дозволяє користувачам надійно відновлювати старі коміти,\n"
"    і допомагає керувати суперечливими змінами, внесеними різними користувачами."

# Front Matter
#: git-novice/setup.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Setup\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Setup\n"
"---"

#: git-novice/setup.md:6
msgid ""
"Please see [this section of the workshop template][workshop-setup]\n"
"for instructions on installing Git."
msgstr ""
"Будь ласка, перегляньте [цей розділ шаблону семінару] [workshop-setup]\n"
"інструкція по установці Git."

#: git-novice/setup.md:9
msgid ""
"We'll do our work in the `Desktop` folder so make sure you change your "
"working directory to it with:"
msgstr ""
"Ми виконаємо нашу роботу в папці `Desktop`, тому переконайтеся, що ви "
"зміните робочий каталог на нього за допомогою:"

# code block
#: git-novice/setup.md:11
msgid ""
"~~~\n"
"$ cd\n"
"$ cd Desktop\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd\n"
"$ cd Desktop\n"
"~~~"

#: git-novice/setup.md:17
msgid "[workshop-setup]: https://carpentries.github.io/workshop-template/#git"
msgstr ""
"[workshop-setup]: https://carpentries.github.io/workshop-template/#git"

