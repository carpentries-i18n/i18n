# Japanese translation of the Software Carpentry Git Lesson
# Copyright (C) 2020 Software Carpentry Foundation; Japanese Translation Team
# This file is distributed under the same license as the gitbook package.
# Riku Takei <riku.takei@otago.ac.nz>, 2019, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2019-12-16 13:05:42+0900\n"
"PO-Revision-Date: 2018-11-07 17:21+0900\n"
"Last-Translator: Riku Takei <riku.takei@otago.ac.nz>\n"
"Language-Team: Japanese <tomkellygenetics@gmail.com>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 2.2\n"

# Front Matter
#: git-novice/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"permalink: /conduct/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"投稿者の行動規範\"\n"
"permalink: /conduct/\n"
"---"

#: git-novice/CODE_OF_CONDUCT.md:6
msgid ""
"As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""
"プロジェクト貢献者・保持者は、\n"
"[カーペントリーの行動規範][coc]に基づき行動することを誓います。"

#: git-novice/CODE_OF_CONDUCT.md:9
msgid ""
"Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""
"嫌がらせ、ハラスメント行為、その他の悪意ある行動・言動は、\n"
"カーペントリーの[報告ガイドライン][coc-reporting]に沿って報告させていただきま"
"す。"

#: git-novice/CODE_OF_CONDUCT.md:12
msgid "{% include links.md %}"
msgstr "{% include links.md %}"

# header
#: git-novice/CONTRIBUTING.md:1
msgid "# Contributing"
msgstr "# プロジェクトに貢献する"

#: git-novice/CONTRIBUTING.md:3
msgid ""
"[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source "
"projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""
"[SoftwareCarpentry][swc-site]と[DataCarpentry][dc-site]はオープンソースのプロ"
"ジェクトです。\n"
"コミュニティーからの資料提供・ご協力、例えば、\n"
"新しいレッスン、\n"
"既存の資料の修正、\n"
"バグレポート、\n"
"変更点のレビューなど、どんなに些細な変更も歓迎いたします。"

# header
#: git-novice/CONTRIBUTING.md:10
msgid "## Contributor Agreement"
msgstr "## 貢献者の規約"

#: git-novice/CONTRIBUTING.md:12
msgid ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE."
"md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly "
"as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"agrees to abide by our [code of conduct](https://docs.carpentries.org/"
"topic_folders/policies/code-of-conduct.html)."
msgstr ""
"このプロジェクトに貢献することにより、\n"
"自身が提供したコンテンツを[私達のライセンス](License.md)に基づき配布する事に"
"同意するものとします。\n"
"ご協力と引き換えに、\n"
"私達はあなたが提供する変更点・問題点などを検討し、\n"
"できるだけ早くコミュニティーの一員になれるよう尽力いたします。\n"
"[Software Carpentry][swc-site]と[Data Carpentry][dc-site]の一員になられた際に"
"は、\n"
"私達の[行動規範](https://docs.carpentries.org/topic_folders/policies/code-of-"
"conduct.html)を遵守する事に同意していただきます。"

# header
#: git-novice/CONTRIBUTING.md:20
msgid "## How to Contribute"
msgstr "## 貢献する方法"

#: git-novice/CONTRIBUTING.md:22
msgid ""
"The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""
"一番簡単に貢献する方法は、\n"
"誤字、言葉遣い、\n"
"間違った内容などを\n"
"issue(イシュー)で報告する事です。\n"
"Issueを報告することによって、自分をコミュニティーに紹介し、\n"
"また、コミュニティーのメンバーと出会う良い機会にもなります。"

# ordered list
#: git-novice/CONTRIBUTING.md:29
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr "1. [GitHub][github]アカウントをお持ちでない場合、"

#: git-novice/CONTRIBUTING.md:30
msgid ""
"    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other "
"methods described below."
msgstr ""
"    [メール][contact]にてご連絡して下さい。\n"
"    ですが、\n"
"    以下の方法であればメールよりも早急に対応できる場合がありますので、そちら"
"をお勧め致します。"

# ordered list
#: git-novice/CONTRIBUTING.md:34
msgid "2.  If you have a [GitHub][github] account,"
msgstr "2. [GitHub][github]アカウントをすでにお持ちである方・"

#: git-novice/CONTRIBUTING.md:35
msgid ""
"    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue]"
"[new-issue].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""
"    またはアカウントを[新たに作る][github-join]気がある方で、\n"
"    あまりGitに詳しくない・使い慣れていない方は、\n"
"    質問・提案などを[新しいイシュー][new-issue]として開いて下さい。\n"
"    イシューを開くことによって、コミュニティーから誰かをそのイシューに割り当"
"て、\n"
"    スレッド化したディスカッションとして質問・提案に応答させていただくことが"
"できます。"

# ordered list
#: git-novice/CONTRIBUTING.md:41
msgid "3.  If you are comfortable with Git,"
msgstr "3. Gitを使い慣れている方で、"

#: git-novice/CONTRIBUTING.md:42
msgid ""
"    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""
"    既存の資料を変更、または追加したい方は、\n"
"    プルリクエスト(Pull Request)にて変更点を提出して下さい。\n"
"    プルリクエストを使った提出方法は、[下記に記載されています](#using-"
"github)。"

# header
#: git-novice/CONTRIBUTING.md:46
msgid "## Where to Contribute"
msgstr "## どこへ貢献するか"

# ordered list
#: git-novice/CONTRIBUTING.md:48
msgid "1.  If you wish to change this lesson,"
msgstr "1.  このレッスンの内容を変更したい場合は、"

#: git-novice/CONTRIBUTING.md:49
msgid ""
"    please work in <https://github.com/swcarpentry/git-novice>,\n"
"    which can be viewed at <https://swcarpentry.github.io/git-novice>."
msgstr ""
"    <https://github.com/swcarpentry/git-novice>から編集して下さい。\n"
"    ウェブサイトはこちらから観覧いただけます：<https://swcarpentry.github.io/"
"git-novice>"

# ordered list
#: git-novice/CONTRIBUTING.md:52
msgid "2.  If you wish to change the example lesson,"
msgstr "2.  模範レッスンの内容を変更したい場合は、"

#: git-novice/CONTRIBUTING.md:53
msgid ""
"    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""
"    <https://github.com/carpentries/lesson-example>から編集して下さい。\n"
"    このレポジトリは模範レッスンの内容を記載しており、\n"
"    こちらから観覧できます：<https://carpentries.github.io/lesson-example>."

# ordered list
#: git-novice/CONTRIBUTING.md:57
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""
"3.  ワークショップのウェブサイトに使われるテンプレートの内容を変更したい場合"
"は、"

#: git-novice/CONTRIBUTING.md:58
msgid ""
"    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop "
"websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-"
"template>\n"
"    provide more background on our design choices."
msgstr ""
"    <https://github.com/carpentries/workshop-template>から編集して下さい。\n"
"    このレポジトリのホームページに、ワークショップに使うウェブサイトの設立方"
"法が記載されており、\n"
"    <https://carpentries.github.io/workshop-template>から\n"
"    サイトの詳細なデザイン方針が観覧できます。"

# ordered list
#: git-novice/CONTRIBUTING.md:63
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""
"4.  `_includes`、または`_layouts`に保存されている、レッスンやワークショップの"
"ためのCSSファイル、ツール、"

#: git-novice/CONTRIBUTING.md:64
msgid ""
"    or HTML boilerplate for lessons or workshops stored in `_includes` or "
"`_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""
"    HTML boilerplateなどを編集したい場合は、\n"
"    <https://github.com/carpentries/styles>から編集して下さい。"

# header
#: git-novice/CONTRIBUTING.md:67
msgid "## What to Contribute"
msgstr "## 貢献していただきたい個所"

#: git-novice/CONTRIBUTING.md:69
msgid ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][new-issue]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""
"新しい例を書く、すでにある例の改善、\n"
"ドキュメントのアップデート、\n"
"不明瞭な点、欠点、「動作に不具合がある」といった\n"
"[バグの報告][new-issue]など、\n"
"様々な方法で貢献していただくことができます。\n"
"どういったイシューを開いたら良いかわからない場合は、\n"
"[このレポジトリのイシュー][issues]、\n"
"[Data Carpentryのイシュー][dc-issues]、\n"
"もしくは[Software Carpentryのイシュー][swc-issues]を見てみて下さい。"

#: git-novice/CONTRIBUTING.md:79
msgid ""
"Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""
"すでにあるイシューへのコメントや、プルリクエストのレビューなども歓迎いたしま"
"す。\n"
"皆さんで協力したほうが、良い結果につながります。\n"
"また、新しく加入された方の意見やレビューなどは特に重要視しています。\n"
"レッスンの資料を幾度となく見てきた方は特に見落としがちなのですが、\n"
"私達が提供している資料・コンテンツは、初めて資料を見る方などには、理解するの"
"に時間が掛かる場合があるので、\n"
"通常とは違う視点からの意見は大変貴重なのです。"

# header
#: git-novice/CONTRIBUTING.md:86
msgid "## What *Not* to Contribute"
msgstr "## 貢献していただきたくない個所"

#: git-novice/CONTRIBUTING.md:88
msgid ""
"Our lessons already contain more material than we can cover in a typical "
"workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""
"現在、通常のワークショップの時間内ではカバーしきれないほどの内容量がレッスン"
"の資料に含まれています。\n"
"ですので、新たにレッスンに含められる項目やツールなどは求めておりません。\n"
"どうしても新しい内容を入れたい場合は、\n"
"(a)新しい内容を教えるために掛かるおおよその時間、\n"
"(b)新しい内容を入れる代わりにどの内容を取り出すか、\n"
"そして、取り出す理由をご説明下さい。\n"
"最初の点は、貢献する方々に可能かどうかを見極めていただくためです。\n"
"二つ目の点は、どちらの内容を有線するべきかを考えていただくためです。"

#: git-novice/CONTRIBUTING.md:97
msgid ""
"We are also not looking for exercises or other material that only run on one "
"platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux "
"users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""
"上記に加え、一つのプラットホーム・OSでしか使用ができないなどといったプログラ"
"ムのレッスン内容・資料などは求めておりません。\n"
"私達が提供するワークショップでは、Windows、Mac OS X、Linuxなど、違ったOSを使"
"用するユーザーが来ることがあります。\n"
"そのため、新しいレッスンを作る際には、\n"
"先述の三つのOSに対応可能である必要があります。"

# header
#: git-novice/CONTRIBUTING.md:102
msgid "## Using GitHub"
msgstr "## GitHubの使い方"

#: git-novice/CONTRIBUTING.md:104
msgid ""
"If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""
"GitHubから資料を提供したい場合は、\n"
"[GitHubでオープンソース・プロジェクトに貢献する方法][how-contribute]\n"
"を参照して下さい。\n"
"簡潔にまとめると："

# ordered list
#: git-novice/CONTRIBUTING.md:109
msgid ""
"1.  The published copy of the lesson is in the `gh-pages` branch of the "
"repository"
msgstr ""
"1.  現在公開されているレッスン内容はレポジトリの`gh-pages`というブランチに保"
"存されています"

#: git-novice/CONTRIBUTING.md:110
msgid ""
"    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your "
"`gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""
"    (これはGitHubが自動的に変更点を公開させるためです)。\n"
"    そのため、全てのブランチは`gh-pages`から分岐させ、\n"
"    オリジナルの[レポジトリ][repo]の`gh-pages`を自身が分岐した`gh-pages`のブ"
"ランチにマージ・合流させてから、\n"
"    内容を変更してください。\n"
"    他の内容・個所へ貢献することが難しくなるため、\n"
"    *オリジナルの`gh-pages`から直接内容を変更することはお控え下さい。*"

# ordered list
#: git-novice/CONTRIBUTING.md:117
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""
"2.  私達は[GitHub flow][github-flow]を使って変更点などを管理しています："

#: git-novice/CONTRIBUTING.md:118
msgid ""
"    1.  Create a new branch in your desktop copy of this repository for each "
"significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository]"
"[repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""
"    1.  自身が持っているオリジナルのレポジトリのコピー(フォーク)に新しいブラ"
"ンチを作り、そのブランチで内容を変更します。\n"
"    2.  作ったブランチ内で変更点をコミットします。\n"
"    3.  そのブランチをGitHubのフォークにプッシュします。\n"
"    4.  自身のフォークからオリジナルの[レポジトリ][repo]へプルリクエストを提"
"出します。\n"
"    5.  頂いたコメントやレビューからの提案で、更に内容を変更する場合は、\n"
"        自分のブランチで内容を変更し、GitHubのフォークにプッシュして下さ"
"い：\n"
"        自動的にプルリクエストの内容がアップデートされます。"

#: git-novice/CONTRIBUTING.md:126
msgid ""
"Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""
"全てのレッスンには二人のメインテイナーがおり、彼・彼女らがイシューやプルリク"
"エストを管理・見直す、\n"
"もしくはその他のメンバーに、一緒に見直すように声をかけます。\n"
"メインテイナー達はコミュニティーのボランティアですので、\n"
"最終的に何を変更するかの決定権は、メインテイナーに委ねられています。"

# header
#: git-novice/CONTRIBUTING.md:131
msgid "## Other Resources"
msgstr "## その他の資料"

#: git-novice/CONTRIBUTING.md:133
msgid ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""
"[Software Carpentry][swc-site]と[Data Carpentry][dc-site]についての一般的な"
"ディスカッションは、\n"
"[ディスカッション用のメーリングリスト][discuss-list]で行われ、\n"
"どなたでも参加できます。\n"
"また、[メール][contact]からでもご連絡いただけます。"

#: git-novice/CONTRIBUTING.md:138
msgid ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"

# Front Matter
#: git-novice/LICENSE.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"ライセンス\"\n"
"root: .\n"
"---"

# header
#: git-novice/LICENSE.md:6
msgid "## Instructional Material"
msgstr "## 教材"

#: git-novice/LICENSE.md:8
msgid ""
"All Software Carpentry and Data Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""
"全てのSoftware Carpentry と Data Carpentry の教材は\n"
"[クリエイティブ・コモンズ・ライセンス（CC BY ライセンス）][cc-by-human]に基づ"
"いて\n"
"提供されています。以下の文章は[CC ライセンス][cc-by-legal]の概要です。\n"
"（概要の内容は元の[CC BY ライセンス 4.0][cc-by-legal]の内容\n"
"の代わりではないので、ご注意下さい。）"

#: git-novice/LICENSE.md:14
msgid "You are free:"
msgstr "あなたは以下の行動が許されます："

# unordered list
#: git-novice/LICENSE.md:16
msgid ""
"* to **Share**---copy and redistribute the material in any medium or format"
msgstr "* 教材内容を複製、配布・共有、そして別の形式に変換する事"

# unordered list
#: git-novice/LICENSE.md:17
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr "* 教材内容を変更、もしくは教材を基に新しい教材を作ることができます"

#: git-novice/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr "（それがたとえ営利目的であっても）"

#: git-novice/LICENSE.md:21
msgid ""
"The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""
"以上の行動は、ライセンスの条件を満たしていれば\n"
"誰にでも自由に行使する権利があり、著作者・ライセンサーはその権利を取り消すこ"
"とができません。"

#: git-novice/LICENSE.md:24
msgid "Under the following terms:"
msgstr "以下の条件を満たせば、上記の行動が許されます："

# unordered list
#: git-novice/LICENSE.md:26
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""
"* **著作権の表示**---使用者は必ず、教材の著作権がどこに帰属しているかを明確に"
"する事"

#: git-novice/LICENSE.md:27
msgid ""
"  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  https://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""
"  （あなたが提供する教材がSoftware Carpentryの著作物を基に制作・引用されたこ"
"と、\n"
"  そして可能であればSoftware Carpentryへのリンク（https://software-carpentry."
"org/）を提示すること）、\n"
"  [CC ライセンス][cc-by-human]へのリンクを含むこと、そして、教材内容を変更し"
"た場合、\n"
"  内容が変更されたことを明確にする事。著作権の表示がどのように記載されるか"
"は、\n"
"  製作者の自由ですが、くれぐれもライセンサー（私達）が「あなた、もしくはあな"
"たの作品を公認した」\n"
"  というような言い回しがないようにお気をつけ下さい。"

#: git-novice/LICENSE.md:34
msgid ""
"**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""
"**新たな利用制限の追加**---他者が作品を同ライセンスに基づいて使用する場合、\n"
"あなたはその使用を妨げる、もしくは制限するような技術・法的規定を\n"
"作品に適用することを禁じます。"

#: git-novice/LICENSE.md:38
msgid "Notices:"
msgstr "ご注意："

# unordered list
#: git-novice/LICENSE.md:40
msgid "* You do not have to comply with the license for elements of the"
msgstr "* あなたは、パブリック・ドメイン（Public Domain）に属している、"

#: git-novice/LICENSE.md:41
msgid ""
"  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""
"  もしくは利用制限のない個所に関しては、\n"
"  ライセンスの規定に従う必要がありません。\n"
"* 保証は提供されていません。ライセンスはあなたの利用に必要な許諾を与える\n"
"  保証はありません。例えば、パブリシティ権、肖像権、人格権など、\n"
"  他の諸権利によって資料の利用を\n"
"  制限されることがあります。"

# header
#: git-novice/LICENSE.md:48
msgid "## Software"
msgstr "## ソフトウェア"

#: git-novice/LICENSE.md:50
msgid ""
"Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under "
"the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""
"別途で記載されていない限り、Software CarpentryとData Carpentryで使われてい"
"る\n"
"プログラム・ソフトウェアは全て\n"
"[OSI][osi]（Open Systems Interconnection）に認定された\n"
"[MIT ライセンス][mit-license]に基づいて提供されています。"

#: git-novice/LICENSE.md:55
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""
"ここに、以下の条件に従うことと引き換えに、どなたにも無償でこのソフトウェ"
"ア、\n"
"そしてそれに関する資料（以降「ソフトウェア」）を制限なく使用、\n"
"複製、編集、変更、併合、\n"
"公開、配布、サブライセンス、そして・もしくは\n"
"ソフトウェアのコピーを売ること、そして\n"
"その他の人にも同じ権限を与えることを\n"
"許可します："

#: git-novice/LICENSE.md:63
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""
"上記の著作権内容、そしてこの許可書内容を全ての\n"
"複製されたソフトウェアに含めること。"

#: git-novice/LICENSE.md:66
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""
"*ソフトウェアは「ありのまま」の状態で提供されており、記載されているかに\n"
"関わらず、どのような保証も提供されていません。これは、商品性の保証、\n"
"特定の目的のための使用についての保証、非侵害保証などが含まれます。\n"
"いかなる場合でも著作者・著作権者は、ソフトウェアによって、\n"
"またはソフトウェアとの何らかの関係によって生じた\n"
"負債、損害、その他の責任を一切\n"
"負いません。*"

# header
#: git-novice/LICENSE.md:74
msgid "## Trademark"
msgstr "## トレードマーク"

#: git-novice/LICENSE.md:76
msgid ""
"\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""
"「Software Carpentry」と「Data Carpentry」のロゴは\n"
"公式に登録された[Community Initiatives][CI]のトレードマークです。"

#: git-novice/LICENSE.md:79
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"

#: git-novice/README.md:1
msgid ""
"[![Create a Slack Account with us](https://img.shields.io/badge/"
"Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite."
"herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git-E01563."
"svg)](https://swcarpentry.slack.com/messages/C91JS49HD) "
msgstr ""
"[![Create a Slack Account with us](https://img.shields.io/badge/"
"Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite."
"herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git-E01563."
"svg)](https://swcarpentry.slack.com/messages/C91JS49HD) "

#: git-novice/README.md:4
msgid ""
"git-novice\n"
"=========="
msgstr ""
"git-novice\n"
"=========="

#: git-novice/README.md:7
msgid ""
"An introduction to version control for novices using Git.\n"
"Please see <https://swcarpentry.github.io/git-novice/> for a rendered "
"version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""
"これはGitを使用している初心者のためのバージョン管理の紹介です。\n"
"この資料のレンダリング版については、<https://swcarpentry.github.io/git-"
"novice/>を参照してください。\n"
"[レッスンテンプレートのドキュメント] [lesson-example]\n"
"書式設定、構築、および提出に関する指示については、\n"
"有用なコマンドのリストについては、このディレクトリに `make`を実行してくださ"
"い。"

#: git-novice/README.md:13
msgid "Maintainers:"
msgstr "メンテナー："

# unordered list
#: git-novice/README.md:15
msgid "* [Ivan Gonzalez][gonzalez_ivan]: [@iglpdc](https://github.com/iglpdc)"
msgstr ""
"* [Tom Kelly][kelly_tom]: [@TomKellyGenetics](https://github.com/"
"TomKellyGenetics)"

# unordered list
#: git-novice/README.md:16
msgid "* [Nima Hejazi][hejazi_nima]: [@nhejazi](https://github.com/nhejazi)"
msgstr ""
"* [GivenName FamilyName][family_given]: [@GitHubUser](https://github.com/"
"GitHubUser)"

# unordered list
#: git-novice/README.md:17
msgid "* [Daisie Huang][huang_daisie]: [@daisieh](https://github.com/daisieh)"
msgstr ""
"* [GivenName FamilyName][family_given]: [@GitHubUser](https://github.com/"
"GitHubUser)"

# unordered list
#: git-novice/README.md:18
msgid "* [Kat Koziar][koziar_kat]: [@kekoziar](https://github.com/kekoziar)"
msgstr ""
"* [GivenName FamilyName][family_given]: [@GitHubUser](https://github.com/"
"GitHubUser)"

# unordered list
#: git-novice/README.md:19
msgid "* [Madicken Munk][munk_madicken]: [@munkm](https://github.com/munkm)"
msgstr ""
"* [GivenName FamilyName][family_given]: [@GitHubUser](https://github.com/"
"GitHubUser)"

#: git-novice/README.md:21
msgid ""
"[gonzalez_ivan]: https://software-carpentry.org/team/#gonzalez_ivan\n"
"[hejazi_nima]: https://software-carpentry.org/team/#hejazi_nima\n"
"[huang_daisie]: https://software-carpentry.org/team/#huang_daisie\n"
"[koziar_kat]: https://software-carpentry.org/team/#koziar_kat\n"
"[munk_madicken]: https://software-carpentry.org/team/#munk_madicken\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example"
msgstr ""
"[gonzalez_ivan]: https://software-carpentry.org/team/#gonzalez_ivan\n"
"[hejazi_nima]: https://software-carpentry.org/team/#hejazi_nima\n"
"[huang_daisie]: https://software-carpentry.org/team/#huang_daisie\n"
"[koziar_kat]: https://software-carpentry.org/team/#koziar_kat\n"
"[munk_madicken]: https://software-carpentry.org/team/#munk_madicken\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example"

# Front Matter
#: git-novice/_episodes/01-basics.md:1
msgid ""
"---\n"
"title: Automated Version Control\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What is version control and why should I use it?\"\n"
"objectives:\n"
"- \"Understand the benefits of an automated version control system.\"\n"
"- \"Understand the basics of how Git works.\"\n"
"keypoints:\n"
"- \"Version control is like an unlimited 'undo'.\"\n"
"- \"Version control also allows many people to work in parallel.\"\n"
"---"
msgstr ""
"---\n"
"title: 自動的なバージョン管理\n"
"teaching: 5\n"
"exercises: 0\n"
"疑問:\n"
"- \"バージョン管理って何？なんで必要なの？\"\n"
"目的:\n"
"- \"自動的なバージョン管理システムの利点を理解する。\"\n"
"- \"Gitの基本を理解する。\"\n"
"まとめ:\n"
"- \"バージョン管理とは、制限無く「元に戻す」ことができる機能。\"\n"
"- \"バージョン管理を使えば、複数の人と同時進行で作業をする事が出来る。\"\n"
"---"

#: git-novice/_episodes/01-basics.md:15
msgid ""
"We'll start by exploring how version control can be used\n"
"to keep track of what one person did and when.\n"
"Even if you aren't collaborating with other people,\n"
"automated version control is much better than this situation:"
msgstr ""
"それではまず、どのようにしてバージョン管理システムが\n"
"「いつ」、「何」を、「誰」が編集したのかを記録・管理しているかを見ていきましょう。\n"
"他の人と共同作業をしていなくても、\n"
"以下の状況に陥るより、自動的なバージョン管理を使うほうが大分良いはずです："

#: git-novice/_episodes/01-basics.md:20
msgid ""
"[![Piled Higher and Deeper by Jorge Cham, http://www.phdcomics.com/comics/"
"archive_print.php?comicid=1531](../fig/phd101212s.png)](http://www.phdcomics."
"com)"
msgstr ""
"[![Piled Higher and Deeper by Jorge Cham, http://www.phdcomics.com/comics/"
"archive_print.php?comicid=1531](../fig/phd101212s.png)](http://www.phdcomics."
"com)"

#: git-novice/_episodes/01-basics.md:22
msgid "\"Piled Higher and Deeper\" by Jorge Cham, http://www.phdcomics.com"
msgstr "「高く、深く積み上げる」Jorge Cham 作、http://www.phdcomics.com"

#: git-novice/_episodes/01-basics.md:24
msgid ""
"We've all been in this situation before: it seems ridiculous to have\n"
"multiple nearly-identical versions of the same document. Some word\n"
"processors let us deal with this a little better, such as Microsoft\n"
"Word's [Track Changes](https://support.office.com/en-us/article/Track-"
"changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), Google "
"Docs' [version\n"
"history](https://support.google.com/docs/answer/190843?hl=en), or "
"LibreOffice's [Recording and Displaying Changes](https://help.libreoffice."
"org/Common/Recording_and_Displaying_Changes)."
msgstr ""
"皆さんもこんな経験をされたことがあるはずです。複数の、（それもほとんど\n"
"内容が同じの）文書のコピーを保存しておくのは馬鹿げたことです。文書作成ソフトの中には、\n"
"例えばMicrosoft Wordの[変更履歴](https://support.office.com/en-us/article/Track-changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a)、Google Docsの[バージョン履歴]"
"(https://support.google.com/docs/answer/190843?hl=en)、LibreOfficeの[変更の記録・表示](https://help.libreoffice.org/Common/Recording_and_Displaying_Changes)、\n"
"こういった状況にある程度うまく対応できるものもあります。"

#: git-novice/_episodes/01-basics.md:30
msgid ""
"Version control systems start with a base version of the document and\n"
"then record changes you make each step of the way. You can\n"
"think of it as a recording of your progress: you can rewind to start at the "
"base\n"
"document and play back each change you made, eventually arriving at your\n"
"more recent version."
msgstr ""
"バージョン管理システムは、基礎となるドキュメントを元に、\n"
"加えられた全ての変更点を記録していきます。ドキュメントの\n"
"進歩を記録していると考えてもらって構いません。変更点を最初の状況まで\n"
"戻してから、最新版になるまでの変更を一つずつ再現していくことができます。"

#: git-novice/_episodes/01-basics.md:36
msgid "![Changes Are Saved Sequentially](../fig/play-changes.svg)"
msgstr "![Changes Are Saved Sequentially](../fig/play-changes.svg)"

#: git-novice/_episodes/01-basics.md:38
msgid ""
"Once you think of changes as separate from the document itself, you\n"
"can then think about \"playing back\" different sets of changes on the base "
"document, ultimately\n"
"resulting in different versions of that document. For example, two users can "
"make independent\n"
"sets of changes on the same document. "
msgstr ""
"「変更点」と「ドキュメント」を別々の物として考えてみると、基礎となるドキュメントに\n"
"異なる変更点を「再現」する事によって、結果的に違ったバージョンのドキュメントを\n"
"作る事が可能だという事が分かります。例えば、下の図のように二人のユーザーが同じドキュメントに\n"
"違った編集を加えた場合です。"


#: git-novice/_episodes/01-basics.md:43
msgid "![Different Versions Can be Saved](../fig/versions.svg)"
msgstr "![Different Versions Can be Saved](../fig/versions.svg)"

#: git-novice/_episodes/01-basics.md:45
msgid "Unless there are conflicts, you can even incorporate two sets of changes into the same base document."
msgstr "変更点の衝突（コンフリクト）が無ければ、二つ以上の違った変更点を基礎ドキュメントに加えることさえできます。"


#: git-novice/_episodes/01-basics.md:47
msgid "![Multiple Versions Can be Merged](../fig/merge.svg)"
msgstr "![Multiple Versions Can be Merged](../fig/merge.svg)"

#: git-novice/_episodes/01-basics.md:49
msgid ""
"A version control system is a tool that keeps track of these changes for "
"us,\n"
"effectively creating different versions of our files. It allows us to\n"
"decide which changes will be made to the next version (each record of these changes is called a\n"
"[commit]({{ page.root }}/reference#commit)), and keeps useful metadata about them. The\n"
"complete history of commits for a particular project and their metadata make up\n"
"a [repository]({{ page.root }}/reference#repository). Repositories can be kept in sync\n"
"across different computers, facilitating collaboration among different people."
msgstr ""
"バージョン管理システムは、ユーザーがドキュメントに加えた変更点を記録するツールであり、\n"
"結果的にドキュメントの違ったバージョンを作成する事ができます。このツールを活用\n"
"する事によって、次のバージョンに加える変更点（個々の変更点は\n"
"[「commit（コミット）」]({{ page.root }}/reference#commit)と呼びます）を決める事ができ、変更点に関するメタデータも一緒に保存する事ができます。\n"
"特定のプロジェクトのコミット履歴とそれに関するメタデータを総じて\n"
"[「repository（レポジトリ）」]({{ page.root }}/reference#repository)と呼びます。レポジトリは\n"
"別々のコンピュータと同期させる事が出来るので、他人との共同作業を潤滑に進めることが可能になります。"


# blockquote, which can be cascaded
#: git-novice/_episodes/01-basics.md:57
msgid "> ## The Long History of Version Control Systems"
msgstr "> ## バージョン管理システムの長い歴史"

#: git-novice/_episodes/01-basics.md:58
msgid ""
">\n"
"> Automated version control systems are nothing new.\n"
"> Tools like RCS, CVS, or Subversion have been around since the early 1980s "
"and are used by many large companies.\n"
"> However, many of these are now considered legacy systems (i.e., outdated) "
"due to various limitations in their capabilities.\n"
"> More modern systems, such as Git and [Mercurial](https://swcarpentry."
"github.io/hg-novice/),\n"
"> are *distributed*, meaning that they do not need a centralized server to "
"host the repository.\n"
"> These modern systems also include powerful merging tools that make it "
"possible for multiple authors to work on\n"
"> the same files concurrently."
msgstr ""
">\n"
"> 自動化されたバージョン管理システムは最近発明されたものではありません。\n"
"> RCS、CVS、Subversionなどのツールは1980年前半から存在しており、多くの会社に使われていました。\n"
"> しかし、これらのツールでは出来る事に制限があり、多くはもう時代遅れとされています。\n"
"> 現代使われているシステム、例えばGitや[Mercurial](https://swcarpentry.github.io/hg-novice/)、は\n"
"> *分散*されています。というのは、特定のサーバーを必要とせずにシステムをホストする事が出来るという事です。\n"
"> 現代のシステムには大変便利で効果的な「merge（マージ）」機能が備われており、同じファイルを\n"
"> 複数人で作業する事が可能になりました。"


# SC/DC Template label
#: git-novice/_episodes/01-basics.md:66 git-novice/_episodes/02-setup.md:70
#: git-novice/_episodes/02-setup.md:100 git-novice/_episodes/02-setup.md:134
#: git-novice/_episodes/02-setup.md:145 git-novice/_episodes/04-changes.md:208
#: git-novice/_episodes/04-changes.md:360
#: git-novice/_episodes/04-changes.md:499
#: git-novice/_episodes/04-changes.md:514
#: git-novice/_episodes/04-changes.md:564
#: git-novice/_episodes/04-changes.md:596
#: git-novice/_episodes/05-history.md:291
#: git-novice/_episodes/05-history.md:324 git-novice/_episodes/07-github.md:76
#: git-novice/_episodes/07-github.md:147 git-novice/_episodes/07-github.md:170
#: git-novice/_episodes/07-github.md:183 git-novice/_episodes/08-collab.md:26
#: git-novice/_episodes/08-collab.md:143 git-novice/_episodes/10-open.md:101
#: git-novice/_episodes/13-hosting.md:67
#: git-novice/_episodes/14-supplemental-rstudio.md:44
#: git-novice/_episodes/14-supplemental-rstudio.md:90
#: git-novice/_episodes/14-supplemental-rstudio.md:108
#: git-novice/_extras/discuss.md:115
msgid "{: .callout}"
msgstr "{: .callout}"

# blockquote, which can be cascaded
#: git-novice/_episodes/01-basics.md:68
msgid "> ## Paper Writing"
msgstr "> ## 論文を書くにあたって"

#: git-novice/_episodes/01-basics.md:69
msgid ""
">\n"
"> *   Imagine you drafted an excellent paragraph for a paper you are "
"writing, but later ruin it. How would you retrieve\n"
">     the *excellent* version of your conclusion? Is it even possible?\n"
">\n"
"> *   Imagine you have 5 co-authors. How would you manage the changes and "
"comments they make to your paper?\n"
">     If you use LibreOffice Writer or Microsoft Word, what happens if you "
"accept changes made using the\n"
">     `Track Changes` option? Do you have a history of those changes?"
msgstr ""
">\n"
"> *   例えば、論文のために数百行書いたとします。しばらくして、間違えてその文章を編集してしまいます。\n"
">     どうしたら以前書いた文章を取り戻すことができるのでしょう？そもそも、可能なのでしょうか？\n"
">\n"
"> *   五人の共著者がいるとします。どうやって全員の変更やコメントを管理すれば良いのでしょう？\n"
">     LibreOffice WriterやMicrosoft Wordの場合、こういった変更やコメントを変更履歴機能で受け入れると\n"
">     どうなるのでしょう？変更点は記録されるのでしょうか？"

# SC/DC Template label
#: git-novice/_episodes/01-basics.md:76 git-novice/_episodes/03-create.md:127
#: git-novice/_episodes/03-create.md:148 git-novice/_episodes/04-changes.md:619
#: git-novice/_episodes/04-changes.md:643
#: git-novice/_episodes/04-changes.md:703
#: git-novice/_episodes/04-changes.md:757
#: git-novice/_episodes/04-changes.md:818
#: git-novice/_episodes/05-history.md:354
#: git-novice/_episodes/05-history.md:377
#: git-novice/_episodes/05-history.md:430
#: git-novice/_episodes/05-history.md:440
#: git-novice/_episodes/05-history.md:448
#: git-novice/_episodes/05-history.md:487 git-novice/_episodes/06-ignore.md:175
#: git-novice/_episodes/06-ignore.md:195 git-novice/_episodes/06-ignore.md:218
#: git-novice/_episodes/06-ignore.md:239 git-novice/_episodes/06-ignore.md:259
#: git-novice/_episodes/07-github.md:218 git-novice/_episodes/07-github.md:231
#: git-novice/_episodes/07-github.md:241 git-novice/_episodes/07-github.md:263
#: git-novice/_episodes/07-github.md:274 git-novice/_episodes/08-collab.md:148
#: git-novice/_episodes/08-collab.md:171 git-novice/_episodes/08-collab.md:182
#: git-novice/_episodes/08-collab.md:189
#: git-novice/_episodes/09-conflict.md:325
#: git-novice/_episodes/09-conflict.md:495
#: git-novice/_episodes/09-conflict.md:537 git-novice/_episodes/10-open.md:109
#: git-novice/_episodes/10-open.md:121 git-novice/_episodes/11-licensing.md:65
#: git-novice/_episodes/11-licensing.md:78
#: git-novice/_episodes/13-hosting.md:75 git-novice/_episodes/13-hosting.md:82
#: git-novice/_episodes/14-supplemental-rstudio.md:127
msgid "{: .challenge}"
msgstr "{: .challenge}"

# Front Matter
#: git-novice/_episodes/02-setup.md:1
msgid ""
"---\n"
"title: Setting Up Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I get set up to use Git?\"\n"
"objectives:\n"
"- \"Configure `git` the first time it is used on a computer.\"\n"
"- \"Understand the meaning of the `--global` configuration flag.\"\n"
"keypoints:\n"
"-   \"Use `git config` with the `--global` option to configure a user name, "
"email address, editor, and other preferences once per machine.\"\n"
"---"
msgstr ""
"---\n"
"title: Setting Up Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I get set up to use Git?\"\n"
"objectives:\n"
"- \"Configure `git` the first time it is used on a computer.\"\n"
"- \"Understand the meaning of the `--global` configuration flag.\"\n"
"keypoints:\n"
"-   \"Use `git config` with the `--global` option to configure a user name, "
"email address, editor, and other preferences once per machine.\"\n"
"---"

#: git-novice/_episodes/02-setup.md:14
msgid ""
"When we use Git on a new computer for the first time,\n"
"we need to configure a few things. Below are a few examples\n"
"of configurations we will set as we get started with Git:"
msgstr ""
"When we use Git on a new computer for the first time,\n"
"we need to configure a few things. Below are a few examples\n"
"of configurations we will set as we get started with Git:"

# unordered list
#: git-novice/_episodes/02-setup.md:18
msgid "*   our name and email address,"
msgstr "*   our name and email address,"

# unordered list
#: git-novice/_episodes/02-setup.md:19
msgid "*   what our preferred text editor is,"
msgstr "*   what our preferred text editor is,"

# unordered list
#: git-novice/_episodes/02-setup.md:20
msgid ""
"*   and that we want to use these settings globally (i.e. for every project)."
msgstr ""
"*   and that we want to use these settings globally (i.e. for every project)."

#: git-novice/_episodes/02-setup.md:22
msgid ""
"On a command line, Git commands are written as `git verb`,\n"
"where `verb` is what we actually want to do. So here is how\n"
"Dracula sets up his new laptop:"
msgstr ""
"On a command line, Git commands are written as `git verb`,\n"
"where `verb` is what we actually want to do. So here is how\n"
"のび太 sets up his new laptop:"

# code block
#: git-novice/_episodes/02-setup.md:26
msgid ""
"~~~\n"
"$ git config --global user.name \"Vlad Dracula\"\n"
"$ git config --global user.email \"vlad@tran.sylvan.ia\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global user.name “野比 のび太\"\n"
"$ git config --global user.email “nobita@doko.demo.doa”\n"
"~~~"

#: git-novice/_episodes/02-setup.md:30 git-novice/_episodes/02-setup.md:110
#: git-novice/_episodes/03-create.md:24 git-novice/_episodes/03-create.md:32
#: git-novice/_episodes/03-create.md:40 git-novice/_episodes/03-create.md:48
#: git-novice/_episodes/03-create.md:66 git-novice/_episodes/04-changes.md:27
#: git-novice/_episodes/04-changes.md:34 git-novice/_episodes/04-changes.md:47
#: git-novice/_episodes/04-changes.md:60 git-novice/_episodes/04-changes.md:70
#: git-novice/_episodes/04-changes.md:83 git-novice/_episodes/04-changes.md:105
#: git-novice/_episodes/04-changes.md:112
#: git-novice/_episodes/04-changes.md:135
#: git-novice/_episodes/04-changes.md:166
#: git-novice/_episodes/04-changes.md:181
#: git-novice/_episodes/04-changes.md:218
#: git-novice/_episodes/04-changes.md:232
#: git-novice/_episodes/04-changes.md:260
#: git-novice/_episodes/04-changes.md:295
#: git-novice/_episodes/04-changes.md:317
#: git-novice/_episodes/04-changes.md:374
#: git-novice/_episodes/04-changes.md:386
#: git-novice/_episodes/04-changes.md:410
#: git-novice/_episodes/04-changes.md:422
#: git-novice/_episodes/04-changes.md:444
#: git-novice/_episodes/04-changes.md:457
#: git-novice/_episodes/04-changes.md:470 git-novice/_episodes/05-history.md:31
#: git-novice/_episodes/05-history.md:45 git-novice/_episodes/05-history.md:68
#: git-novice/_episodes/05-history.md:77 git-novice/_episodes/05-history.md:96
#: git-novice/_episodes/05-history.md:137
#: git-novice/_episodes/05-history.md:158
#: git-novice/_episodes/05-history.md:181
#: git-novice/_episodes/05-history.md:194
#: git-novice/_episodes/05-history.md:215
#: git-novice/_episodes/05-history.md:235
#: git-novice/_episodes/05-history.md:240
#: git-novice/_episodes/05-history.md:250
#: git-novice/_episodes/05-history.md:273 git-novice/_episodes/06-ignore.md:23
#: git-novice/_episodes/06-ignore.md:30 git-novice/_episodes/06-ignore.md:56
#: git-novice/_episodes/06-ignore.md:75 git-novice/_episodes/06-ignore.md:98
#: git-novice/_episodes/06-ignore.md:111 git-novice/_episodes/06-ignore.md:128
#: git-novice/_episodes/07-github.md:50 git-novice/_episodes/07-github.md:86
#: git-novice/_episodes/07-github.md:96 git-novice/_episodes/07-github.md:113
#: git-novice/_episodes/07-github.md:190 git-novice/_episodes/08-collab.md:45
#: git-novice/_episodes/08-collab.md:59 git-novice/_episodes/08-collab.md:70
#: git-novice/_episodes/08-collab.md:83 git-novice/_episodes/08-collab.md:109
#: git-novice/_episodes/09-conflict.md:29
#: git-novice/_episodes/09-conflict.md:44
#: git-novice/_episodes/09-conflict.md:60
#: git-novice/_episodes/09-conflict.md:71
#: git-novice/_episodes/09-conflict.md:92
#: git-novice/_episodes/09-conflict.md:108
#: git-novice/_episodes/09-conflict.md:121
#: git-novice/_episodes/09-conflict.md:146
#: git-novice/_episodes/09-conflict.md:167
#: git-novice/_episodes/09-conflict.md:197
#: git-novice/_episodes/09-conflict.md:215
#: git-novice/_episodes/09-conflict.md:232
#: git-novice/_episodes/09-conflict.md:244
#: git-novice/_episodes/09-conflict.md:264
#: git-novice/_episodes/09-conflict.md:285 git-novice/_extras/discuss.md:24
#: git-novice/_extras/discuss.md:48 git-novice/_extras/discuss.md:58
#: git-novice/_extras/discuss.md:65 git-novice/_extras/discuss.md:72
#: git-novice/_extras/discuss.md:91 git-novice/_extras/discuss.md:101
#: git-novice/_extras/discuss.md:149 git-novice/_extras/discuss.md:167
#: git-novice/_extras/discuss.md:183 git-novice/_extras/discuss.md:233
#: git-novice/_extras/discuss.md:242 git-novice/_extras/discuss.md:257
#: git-novice/_extras/discuss.md:277 git-novice/_extras/discuss.md:291
#: git-novice/_extras/discuss.md:299 git-novice/_extras/discuss.md:322
#: git-novice/_extras/discuss.md:340 git-novice/_extras/discuss.md:351
#: git-novice/_extras/discuss.md:359 git-novice/_extras/discuss.md:370
#: git-novice/_extras/discuss.md:386 git-novice/_extras/discuss.md:401
#: git-novice/_extras/discuss.md:409 git-novice/_extras/discuss.md:437
#: git-novice/_extras/discuss.md:457 git-novice/setup.md:15
msgid "{: .language-bash}"
msgstr "{: .language-bash}"

#: git-novice/_episodes/02-setup.md:32
msgid ""
"Please use your own name and email address instead of Dracula's. This user "
"name and email will be associated with your subsequent Git activity,\n"
"which means that any changes pushed to\n"
"[GitHub](https://github.com/),\n"
"[BitBucket](https://bitbucket.org/),\n"
"[GitLab](https://gitlab.com/) or\n"
"another Git host server\n"
"in a later lesson will include this information."
msgstr ""
"Please use your own name and email address instead of のび太's. This user "
"name and email will be associated with your subsequent Git activity,\n"
"which means that any changes pushed to\n"
"[GitHub](https://github.com/),\n"
"[BitBucket](https://bitbucket.org/),\n"
"[GitLab](https://gitlab.com/) or\n"
"another Git host server\n"
"in a later lesson will include this information."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:40
msgid "> ## Line Endings"
msgstr "> ## Line Endings"

#: git-novice/_episodes/02-setup.md:41
msgid ""
">\n"
"> As with other keys, when you hit <kbd>Return</kbd> on your keyboard,\n"
"> your computer encodes this input as a character.\n"
"> For reasons that are long to explain, different operating systems\n"
"> use different character(s) to represent the end of a line.\n"
"> (You may also hear these referred to as newlines or line breaks.)\n"
"> Because Git uses these characters to compare files,\n"
"> it may cause unexpected issues when editing a file on different machines.\n"
">\n"
"> You can change the way Git recognizes and encodes line endings\n"
"> using the `core.autocrlf` command to `git config`.\n"
"> The following settings are recommended:\n"
">\n"
"> On macOS and Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> And on Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf true\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> You can read more about this issue \n"
"> [on this GitHub page](https://help.github.com/articles/dealing-with-line-"
"endings/)."
msgstr ""
">\n"
"> As with other keys, when you hit <kbd>Return</kbd> on your keyboard,\n"
"> your computer encodes this input as a character.\n"
"> For reasons that are long to explain, different operating systems\n"
"> use different character(s) to represent the end of a line.\n"
"> (You may also hear these referred to as newlines or line breaks.)\n"
"> Because Git uses these characters to compare files,\n"
"> it may cause unexpected issues when editing a file on different machines.\n"
">\n"
"> You can change the way Git recognizes and encodes line endings\n"
"> using the `core.autocrlf` command to `git config`.\n"
"> The following settings are recommended:\n"
">\n"
"> On macOS and Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> And on Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf true\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> You can read more about this issue \n"
"> [on this GitHub page](https://help.github.com/articles/dealing-with-line-"
"endings/)."

#: git-novice/_episodes/02-setup.md:72
msgid ""
"For these lessons, we will be interacting with [GitHub](https://github.com/) "
"and so the email address used should be the same as the one used when "
"setting up your GitHub account. If you are concerned about privacy, please "
"review [GitHub's instructions for keeping your email address private][git-"
"privacy]. \n"
"If you elect to use a private email address with GitHub, then use that same "
"email address for the `user.email` value, e.g. `username@users.noreply."
"github.com` replacing `username` with your GitHub one. You can change the "
"email address later on by using the `git config` command again."
msgstr ""
"For these lessons, we will be interacting with [GitHub](https://github.com/) "
"and so the email address used should be the same as the one used when "
"setting up your GitHub account. If you are concerned about privacy, please "
"review [GitHub's instructions for keeping your email address private][git-"
"privacy]. \n"
"If you elect to use a private email address with GitHub, then use that same "
"email address for the `user.email` value, e.g. `username@users.noreply."
"github.com` replacing `username` with your GitHub one. You can change the "
"email address later on by using the `git config` command again."

#: git-novice/_episodes/02-setup.md:75
msgid "Dracula also has to set his favorite text editor, following this table:"
msgstr "のび太 also has to set his favorite text editor, following this table:"

#: git-novice/_episodes/02-setup.md:77
msgid ""
"| Editor             | Configuration command                            |\n"
"|:-------------------|:-------------------------------------------------|\n"
"| Atom | `$ git config --global core.editor \"atom --wait\"`|\n"
"| nano               | `$ git config --global core.editor \"nano -w\"`    |\n"
"| BBEdit (Mac, with command line tools) | `$ git config --global core.editor "
"\"bbedit -w\"`    |\n"
"| Sublime Text (Mac) | `$ git config --global core.editor \"/Applications/"
"Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"` |\n"
"| Sublime Text (Win, 32-bit install) | `$ git config --global core.editor "
"\"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Sublime Text (Win, 64-bit install) | `$ git config --global core.editor "
"\"'c:/program files/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Notepad++ (Win, 32-bit install)    | `$ git config --global core.editor "
"\"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -"
"nosession -noPlugin\"`|\n"
"| Notepad++ (Win, 64-bit install)    | `$ git config --global core.editor "
"\"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession "
"-noPlugin\"`|\n"
"| Kate (Linux)       | `$ git config --global core.editor \"kate\"`       |\n"
"| Gedit (Linux)      | `$ git config --global core.editor \"gedit --wait --"
"new-window\"`   |\n"
"| Scratch (Linux)       | `$ git config --global core.editor \"scratch-text-"
"editor\"`  |\n"
"| Emacs              | `$ git config --global core.editor \"emacs\"`   |\n"
"| Vim                | `$ git config --global core.editor \"vim\"`   |"
msgstr ""
"| Editor             | Configuration command                            |\n"
"|:-------------------|:-------------------------------------------------|\n"
"| Atom | `$ git config --global core.editor \"atom --wait\"`|\n"
"| nano               | `$ git config --global core.editor \"nano -w\"`    |\n"
"| BBEdit (Mac, with command line tools) | `$ git config --global core.editor "
"\"bbedit -w\"`    |\n"
"| Sublime Text (Mac) | `$ git config --global core.editor \"/Applications/"
"Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"` |\n"
"| Sublime Text (Win, 32-bit install) | `$ git config --global core.editor "
"\"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Sublime Text (Win, 64-bit install) | `$ git config --global core.editor "
"\"'c:/program files/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Notepad++ (Win, 32-bit install)    | `$ git config --global core.editor "
"\"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -"
"nosession -noPlugin\"`|\n"
"| Notepad++ (Win, 64-bit install)    | `$ git config --global core.editor "
"\"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession "
"-noPlugin\"`|\n"
"| Kate (Linux)       | `$ git config --global core.editor \"kate\"`       |\n"
"| Gedit (Linux)      | `$ git config --global core.editor \"gedit --wait --"
"new-window\"`   |\n"
"| Scratch (Linux)       | `$ git config --global core.editor \"scratch-text-"
"editor\"`  |\n"
"| Emacs              | `$ git config --global core.editor \"emacs\"`   |\n"
"| Vim                | `$ git config --global core.editor \"vim\"`   |"

#: git-novice/_episodes/02-setup.md:93
msgid ""
"It is possible to reconfigure the text editor for Git whenever you want to "
"change it."
msgstr ""
"It is possible to reconfigure the text editor for Git whenever you want to "
"change it."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:95
msgid "> ## Exiting Vim"
msgstr "> ## Vimの終了の仕方"

#: git-novice/_episodes/02-setup.md:96
msgid ""
">\n"
"> Note that Vim is the default editor for many programs. If you haven't used "
"Vim before and wish to exit a session without saving\n"
"your changes, press <kbd>Esc</kbd> then type `:q!` and hit <kbd>Return</"
"kbd>.\n"
"> If you want to save your changes and quit, press <kbd>Esc</kbd> then type "
"`:wq` and hit <kbd>Return</kbd>."
msgstr ""
">\n"
"> Note that Vim is the default editor for many programs. If you haven't used "
"Vim before and wish to exit a session without saving\n"
"your changes, press <kbd>Esc</kbd> then type `:q!` and hit <kbd>Return</"
"kbd>.\n"
"> If you want to save your changes and quit, press <kbd>Esc</kbd> then type "
"`:wq` and hit <kbd>Return</kbd>."

#: git-novice/_episodes/02-setup.md:102
msgid ""
"The four commands we just ran above only need to be run once: the flag `--"
"global` tells Git\n"
"to use the settings for every project, in your user account, on this "
"computer."
msgstr ""
"The four commands we just ran above only need to be run once: the flag `--"
"global` tells Git\n"
"to use the settings for every project, in your user account, on this "
"computer."

#: git-novice/_episodes/02-setup.md:105
msgid "You can check your settings at any time:"
msgstr "You can check your settings at any time:"

# code block
#: git-novice/_episodes/02-setup.md:107
msgid ""
"~~~\n"
"$ git config --list\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --list\n"
"~~~"

#: git-novice/_episodes/02-setup.md:112
msgid ""
"You can change your configuration as many times as you want: just use the\n"
"same commands to choose another editor or update your email address."
msgstr ""
"You can change your configuration as many times as you want: just use the\n"
"same commands to choose another editor or update your email address."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:115 git-novice/_episodes/07-github.md:127
msgid "> ## Proxy"
msgstr "> ## Proxy"

#: git-novice/_episodes/02-setup.md:116
msgid ""
">\n"
"> In some networks you need to use a\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). If this is the case, "
"you\n"
"> may also need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> To disable the proxy, use\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> In some networks you need to use a\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). If this is the case, "
"you\n"
"> may also need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> To disable the proxy, use\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:136
msgid "> ## Git Help and Manual"
msgstr "> ## Git Help and Manual"

#: git-novice/_episodes/02-setup.md:137
msgid ""
">\n"
"> Always remember that if you forget a `git` command, you can access the "
"list of commands by using `-h` and access the Git manual by using `--"
"help` :\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Always remember that if you forget a `git` command, you can access the "
"list of commands by using `-h` and access the Git manual by using `--"
"help` :\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}"

#: git-novice/_episodes/02-setup.md:147
msgid ""
"[git-privacy]: https://help.github.com/articles/keeping-your-email-address-"
"private/"
msgstr ""
"[git-privacy]: https://help.github.com/articles/keeping-your-email-address-"
"private/"

# Front Matter
#: git-novice/_episodes/03-create.md:1
msgid ""
"---\n"
"title: Creating a Repository\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where does Git store information?\"\n"
"objectives:\n"
"- \"Create a local Git repository.\"\n"
"keypoints:\n"
"- \"`git init` initializes a repository.\"\n"
"- \"Git stores all of its repository data in the `.git` directory.\"\n"
"---"
msgstr ""
"---\n"
"title: Creating a Repository\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where does Git store information?\"\n"
"objectives:\n"
"- \"Create a local Git repository.\"\n"
"keypoints:\n"
"- \"`git init` initializes a repository.\"\n"
"- \"Git stores all of its repository data in the `.git` directory.\"\n"
"---"

#: git-novice/_episodes/03-create.md:14
msgid ""
"Once Git is configured,\n"
"we can start using it."
msgstr ""
"Once Git is configured,\n"
"we can start using it."

#: git-novice/_episodes/03-create.md:17
msgid ""
"First, let's create a directory in `Desktop` folder for our work and then "
"move into that directory:"
msgstr ""
"First, let's create a directory in `Desktop` folder for our work and then "
"move into that directory:"

# code block
#: git-novice/_episodes/03-create.md:19
msgid ""
"~~~\n"
"$ cd ~/Desktop\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ~/Desktop\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"

#: git-novice/_episodes/03-create.md:26
msgid ""
"Then we tell Git to make `planets` a [repository]({{ page.root }}/"
"reference#repository)—a place where\n"
"Git can store versions of our files:"
msgstr ""
"Then we tell Git to make `planets` a [repository]({{ page.root }}/"
"reference#repository)—a place where\n"
"Git can store versions of our files:"

# code block
#: git-novice/_episodes/03-create.md:29
msgid ""
"~~~\n"
"$ git init\n"
"~~~"
msgstr ""
"~~~\n"
"$ git init\n"
"~~~"

#: git-novice/_episodes/03-create.md:34
msgid ""
"If we use `ls` to show the directory's contents,\n"
"it appears that nothing has changed:"
msgstr ""
"If we use `ls` to show the directory's contents,\n"
"it appears that nothing has changed:"

# code block
#: git-novice/_episodes/03-create.md:37 git-novice/_episodes/04-changes.md:57
msgid ""
"~~~\n"
"$ ls\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls\n"
"~~~"

#: git-novice/_episodes/03-create.md:42
msgid ""
"But if we add the `-a` flag to show everything,\n"
"we can see that Git has created a hidden directory within `planets` called `."
"git`:"
msgstr ""
"But if we add the `-a` flag to show everything,\n"
"we can see that Git has created a hidden directory within `planets` called `."
"git`:"

# code block
#: git-novice/_episodes/03-create.md:45
msgid ""
"~~~\n"
"$ ls -a\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -a\n"
"~~~"

# code block
#: git-novice/_episodes/03-create.md:50
msgid ""
"~~~\n"
".\t..\t.git\n"
"~~~"
msgstr ""
"~~~\n"
".\t..\t.git\n"
"~~~"

# SC/DC Template label
#: git-novice/_episodes/03-create.md:53 git-novice/_episodes/03-create.md:78
#: git-novice/_episodes/04-changes.md:65 git-novice/_episodes/04-changes.md:75
#: git-novice/_episodes/04-changes.md:96 git-novice/_episodes/04-changes.md:125
#: git-novice/_episodes/04-changes.md:142
#: git-novice/_episodes/04-changes.md:172
#: git-novice/_episodes/04-changes.md:190
#: git-novice/_episodes/04-changes.md:224
#: git-novice/_episodes/04-changes.md:244
#: git-novice/_episodes/04-changes.md:271
#: git-novice/_episodes/04-changes.md:307
#: git-novice/_episodes/04-changes.md:323
#: git-novice/_episodes/04-changes.md:381
#: git-novice/_episodes/04-changes.md:398
#: git-novice/_episodes/04-changes.md:434
#: git-novice/_episodes/04-changes.md:450
#: git-novice/_episodes/04-changes.md:463
#: git-novice/_episodes/04-changes.md:491 git-novice/_episodes/05-history.md:38
#: git-novice/_episodes/05-history.md:57 git-novice/_episodes/05-history.md:89
#: git-novice/_episodes/05-history.md:113
#: git-novice/_episodes/05-history.md:149
#: git-novice/_episodes/05-history.md:170
#: git-novice/_episodes/05-history.md:186
#: git-novice/_episodes/05-history.md:206
#: git-novice/_episodes/05-history.md:222
#: git-novice/_episodes/05-history.md:245
#: git-novice/_episodes/05-history.md:264 git-novice/_episodes/06-ignore.md:43
#: git-novice/_episodes/06-ignore.md:62 git-novice/_episodes/06-ignore.md:85
#: git-novice/_episodes/06-ignore.md:104 git-novice/_episodes/06-ignore.md:118
#: git-novice/_episodes/06-ignore.md:142 git-novice/_episodes/07-github.md:102
#: git-novice/_episodes/07-github.md:125 git-novice/_episodes/07-github.md:197
#: git-novice/_episodes/08-collab.md:64 git-novice/_episodes/08-collab.md:76
#: git-novice/_episodes/08-collab.md:94 git-novice/_episodes/08-collab.md:124
#: git-novice/_episodes/09-conflict.md:36
#: git-novice/_episodes/09-conflict.md:52
#: git-novice/_episodes/09-conflict.md:66
#: git-novice/_episodes/09-conflict.md:82
#: git-novice/_episodes/09-conflict.md:100
#: git-novice/_episodes/09-conflict.md:114
#: git-novice/_episodes/09-conflict.md:132
#: git-novice/_episodes/09-conflict.md:159
#: git-novice/_episodes/09-conflict.md:179
#: git-novice/_episodes/09-conflict.md:205
#: git-novice/_episodes/09-conflict.md:227
#: git-novice/_episodes/09-conflict.md:237
#: git-novice/_episodes/09-conflict.md:255
#: git-novice/_episodes/09-conflict.md:278
#: git-novice/_episodes/09-conflict.md:293 git-novice/_extras/discuss.md:35
#: git-novice/_extras/discuss.md:157 git-novice/_extras/discuss.md:175
#: git-novice/_extras/discuss.md:190 git-novice/_extras/discuss.md:203
#: git-novice/_extras/discuss.md:248 git-novice/_extras/discuss.md:267
#: git-novice/_extras/discuss.md:311 git-novice/_extras/discuss.md:332
#: git-novice/_extras/discuss.md:380 git-novice/_extras/discuss.md:426
#: git-novice/_extras/discuss.md:447
msgid "{: .output}"
msgstr "{: .output}"

#: git-novice/_episodes/03-create.md:55
msgid ""
"Git uses this special sub-directory to store all the information about the "
"project, \n"
"including all files and sub-directories located within the project's "
"directory.\n"
"If we ever delete the `.git` sub-directory,\n"
"we will lose the project's history."
msgstr ""
"Git uses this special sub-directory to store all the information about the "
"project, \n"
"including all files and sub-directories located within the project's "
"directory.\n"
"If we ever delete the `.git` sub-directory,\n"
"we will lose the project's history."

#: git-novice/_episodes/03-create.md:60
msgid ""
"We can check that everything is set up correctly\n"
"by asking Git to tell us the status of our project:"
msgstr ""
"We can check that everything is set up correctly\n"
"by asking Git to tell us the status of our project:"

# code block
#: git-novice/_episodes/03-create.md:63 git-novice/_episodes/04-changes.md:80
#: git-novice/_episodes/04-changes.md:109
#: git-novice/_episodes/04-changes.md:163
#: git-novice/_episodes/04-changes.md:229
#: git-novice/_episodes/04-changes.md:454
#: git-novice/_episodes/05-history.md:191
#: git-novice/_episodes/05-history.md:247 git-novice/_episodes/06-ignore.md:27
#: git-novice/_episodes/06-ignore.md:72
msgid ""
"~~~\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git status\n"
"~~~"

#: git-novice/_episodes/03-create.md:68
msgid ""
"If you are using a different version of `git`, the exact\n"
"wording of the output might be slightly different."
msgstr ""
"If you are using a different version of `git`, the exact\n"
"wording of the output might be slightly different."

# code block
#: git-novice/_episodes/03-create.md:71
msgid ""
"~~~\n"
"# On branch master\n"
"#\n"
"# Initial commit\n"
"#\n"
"nothing to commit (create/copy files and use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"# On branch master\n"
"#\n"
"# Initial commit\n"
"#\n"
"nothing to commit (create/copy files and use \"git add\" to track)\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:80
msgid "> ## Places to Create Git Repositories"
msgstr "> ## Places to Create Git Repositories"

#: git-novice/_episodes/03-create.md:81
msgid ""
">\n"
"> Along with tracking information about planets (the project we have already "
"created), \n"
"> Dracula would also like to track information about moons.\n"
"> Despite Wolfman's concerns, Dracula creates a `moons` project inside his "
"`planets` \n"
"> project with the following sequence of commands:\n"
">\n"
"> ~~~\n"
"> $ cd ~/Desktop   # return to Desktop directory\n"
"> $ cd planets     # go into planets directory, which is already a Git "
"repository\n"
"> $ ls -a          # ensure the .git sub-directory is still present in the "
"planets directory\n"
"> $ mkdir moons    # make a sub-directory planets/moons\n"
"> $ cd moons       # go into moons sub-directory\n"
"> $ git init       # make the moons sub-directory a Git repository\n"
"> $ ls -a          # ensure the .git sub-directory is present indicating we "
"have created a new Git repository\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Is the `git init` command, run inside the `moons` sub-directory, required "
"for \n"
"> tracking files stored in the `moons` sub-directory?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > No. Dracula does not need to make the `moons` sub-directory a Git "
"repository \n"
"> > because the `planets` repository will track all files, sub-directories, "
"and \n"
"> > sub-directory files under the `planets` directory.  Thus, in order to "
"track \n"
"> > all information about moons, Dracula only needed to add the `moons` sub-"
"directory\n"
"> > to the `planets` directory.\n"
"> > \n"
"> > Additionally, Git repositories can interfere with each other if they are "
"\"nested\":\n"
"> > the outer repository will try to version-control\n"
"> > the inner repository. Therefore, it's best to create each new Git\n"
"> > repository in a separate directory. To be sure that there is no "
"conflicting\n"
"> > repository in the directory, check the output of `git status`. If it "
"looks\n"
"> > like the following, you are good to go to create a new repository as "
"shown\n"
"> > above:\n"
"> >\n"
"> > ~~~\n"
"> > $ git status\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > fatal: Not a git repository (or any of the parent directories): .git\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Along with tracking information about planets (the project we have already "
"created), \n"
"> のび太 would also like to track information about moons.\n"
"> Despite ドラえもん's concerns, のび太 creates a `moons` project inside his "
"`planets` \n"
"> project with the following sequence of commands:\n"
">\n"
"> ~~~\n"
"> $ cd ~/Desktop   # return to Desktop directory\n"
"> $ cd planets     # go into planets directory, which is already a Git "
"repository\n"
"> $ ls -a          # ensure the .git sub-directory is still present in the "
"planets directory\n"
"> $ mkdir moons    # make a sub-directory planets/moons\n"
"> $ cd moons       # go into moons sub-directory\n"
"> $ git init       # make the moons sub-directory a Git repository\n"
"> $ ls -a          # ensure the .git sub-directory is present indicating we "
"have created a new Git repository\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Is the `git init` command, run inside the `moons` sub-directory, required "
"for \n"
"> tracking files stored in the `moons` sub-directory?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > No. のび太 does not need to make the `moons` sub-directory a Git "
"repository \n"
"> > because the `planets` repository will track all files, sub-directories, "
"and \n"
"> > sub-directory files under the `planets` directory.  Thus, in order to "
"track \n"
"> > all information about moons, のび太 only needed to add the `moons` sub-"
"directory\n"
"> > to the `planets` directory.\n"
"> > \n"
"> > Additionally, Git repositories can interfere with each other if they are "
"\"nested\":\n"
"> > the outer repository will try to version-control\n"
"> > the inner repository. Therefore, it's best to create each new Git\n"
"> > repository in a separate directory. To be sure that there is no "
"conflicting\n"
"> > repository in the directory, check the output of `git status`. If it "
"looks\n"
"> > like the following, you are good to go to create a new repository as "
"shown\n"
"> > above:\n"
"> >\n"
"> > ~~~\n"
"> > $ git status\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > fatal: Not a git repository (or any of the parent directories): .git\n"
"> > ~~~\n"
"> > {: .output}"

# SC/DC Template label
#: git-novice/_episodes/03-create.md:126 git-novice/_episodes/03-create.md:147
#: git-novice/_episodes/04-changes.md:618
#: git-novice/_episodes/04-changes.md:642
#: git-novice/_episodes/04-changes.md:702
#: git-novice/_episodes/04-changes.md:756
#: git-novice/_episodes/04-changes.md:817
#: git-novice/_episodes/05-history.md:429 git-novice/_episodes/06-ignore.md:174
#: git-novice/_episodes/06-ignore.md:194 git-novice/_episodes/06-ignore.md:217
#: git-novice/_episodes/06-ignore.md:238 git-novice/_episodes/06-ignore.md:258
#: git-novice/_episodes/07-github.md:217 git-novice/_episodes/07-github.md:230
#: git-novice/_episodes/07-github.md:240 git-novice/_episodes/07-github.md:262
#: git-novice/_episodes/07-github.md:273 git-novice/_episodes/08-collab.md:170
#: git-novice/_episodes/09-conflict.md:494
#: git-novice/_episodes/09-conflict.md:536
#: git-novice/_episodes/14-supplemental-rstudio.md:126
msgid "> {: .solution}"
msgstr "> {: .solution}"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:129
msgid "> ## Correcting `git init` Mistakes"
msgstr "> ## Correcting `git init` Mistakes"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:130
msgid ""
"> Wolfman explains to Dracula how a nested repository is redundant and may "
"cause confusion"
msgstr ""
"> ドラえもん explains to のび太 how a nested repository is redundant and may "
"cause confusion"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:131
msgid ""
"> down the road. Dracula would like to remove the nested repository. How can "
"Dracula undo "
msgstr ""
"> down the road. のび太 would like to remove the nested repository. How can "
"のび太 undo "

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:132
msgid "> his last `git init` in the `moons` sub-directory?"
msgstr "> his last `git init` in the `moons` sub-directory?"

#: git-novice/_episodes/03-create.md:133
msgid ""
">\n"
"> > ## Solution -- USE WITH CAUTION!\n"
"> >\n"
"> > To recover from this little mistake, Dracula can just remove the `.git`\n"
"> > folder in the moons subdirectory by running the following command from "
"inside the `planets` directory:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > But be careful! Running this command in the wrong directory, will "
"remove\n"
"> > the entire Git history of a project you might want to keep. Therefore, "
"always check your current directory using the\n"
"> > command `pwd`."
msgstr ""
">\n"
"> > ## Solution -- USE WITH CAUTION!\n"
"> >\n"
"> > To recover from this little mistake, のび太 can just remove the `.git`\n"
"> > folder in the moons subdirectory by running the following command from "
"inside the `planets` directory:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > But be careful! Running this command in the wrong directory, will "
"remove\n"
"> > the entire Git history of a project you might want to keep. Therefore, "
"always check your current directory using the\n"
"> > command `pwd`."

# Front Matter
#: git-novice/_episodes/04-changes.md:1
msgid ""
"---\n"
"title: Tracking Changes\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I record changes in Git?\"\n"
"- \"How do I check the status of my version control repository?\"\n"
"- \"How do I record notes about what changes I made and why?\"\n"
"objectives:\n"
"- \"Go through the modify-add-commit cycle for one or more files.\"\n"
"- \"Explain where information is stored at each stage of that cycle.\"\n"
"- \"Distinguish between descriptive and non-descriptive commit messages.\"\n"
"keypoints:\n"
"- \"`git status` shows the status of a repository.\"\n"
"- \"Files can be stored in a project's working directory (which users see), "
"the staging area (where the next commit is being built up) and the local "
"repository (where commits are permanently recorded).\"\n"
"- \"`git add` puts files in the staging area.\"\n"
"- \"`git commit` saves the staged content as a new commit in the local "
"repository.\"\n"
"- \"Write a commit message that accurately describes your changes.\"\n"
"---"
msgstr ""
"---\n"
"title: Tracking Changes\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I record changes in Git?\"\n"
"- \"How do I check the status of my version control repository?\"\n"
"- \"How do I record notes about what changes I made and why?\"\n"
"objectives:\n"
"- \"Go through the modify-add-commit cycle for one or more files.\"\n"
"- \"Explain where information is stored at each stage of that cycle.\"\n"
"- \"Distinguish between descriptive and non-descriptive commit messages.\"\n"
"keypoints:\n"
"- \"`git status` shows the status of a repository.\"\n"
"- \"Files can be stored in a project's working directory (which users see), "
"the staging area (where the next commit is being built up) and the local "
"repository (where commits are permanently recorded).\"\n"
"- \"`git add` puts files in the staging area.\"\n"
"- \"`git commit` saves the staged content as a new commit in the local "
"repository.\"\n"
"- \"Write a commit message that accurately describes your changes.\"\n"
"---"

#: git-novice/_episodes/04-changes.md:21
msgid ""
"First let's make sure we're still in the right directory.\n"
"You should be in the `planets` directory."
msgstr ""
"First let's make sure we're still in the right directory.\n"
"You should be in the `planets` directory."

# code block
#: git-novice/_episodes/04-changes.md:24
msgid ""
"~~~\n"
"$ pwd\n"
"~~~"
msgstr ""
"~~~\n"
"$ pwd\n"
"~~~"

#: git-novice/_episodes/04-changes.md:29
msgid "If you are still in `moons`, navigate back up to `planets`"
msgstr "If you are still in `moons`, navigate back up to `planets`"

# code block
#: git-novice/_episodes/04-changes.md:31
msgid ""
"~~~\n"
"$ cd ..\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ..\n"
"~~~"

#: git-novice/_episodes/04-changes.md:36
msgid ""
"Let's create a file called `mars.txt` that contains some notes\n"
"about the Red Planet's suitability as a base.\n"
"We'll use `nano` to edit the file;\n"
"you can use whatever editor you like.\n"
"In particular, this does not have to be the `core.editor` you set globally "
"earlier. \n"
"But remember, the.language-bash command to create or edit a new file will "
"depend on the editor you choose (it might not be `nano`). \n"
"For a refresher on text editors, check out [\"Which Editor?\"](https://"
"swcarpentry.github.io/shell-novice/03-create/) in [The Unix Shell](https://"
"swcarpentry.github.io/shell-novice/) lesson."
msgstr ""
"Let's create a file called `mars.txt` that contains some notes\n"
"about the Red Planet's suitability as a base.\n"
"We'll use `nano` to edit the file;\n"
"you can use whatever editor you like.\n"
"In particular, this does not have to be the `core.editor` you set globally "
"earlier. \n"
"But remember, the.language-bash command to create or edit a new file will "
"depend on the editor you choose (it might not be `nano`). \n"
"For a refresher on text editors, check out [\"Which Editor?\"](https://"
"swcarpentry.github.io/shell-novice/03-create/) in [The Unix Shell](https://"
"swcarpentry.github.io/shell-novice/) lesson."

# code block
#: git-novice/_episodes/04-changes.md:44
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:49
msgid "Type the text below into the `mars.txt` file:"
msgstr "Type the text below into the `mars.txt` file:"

# code block
#: git-novice/_episodes/04-changes.md:51 git-novice/_episodes/04-changes.md:72
#: git-novice/_episodes/05-history.md:242 git-novice/_extras/discuss.md:154
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"

#: git-novice/_episodes/04-changes.md:55
msgid "`mars.txt` now contains a single line, which we can see by running:"
msgstr "`mars.txt` now contains a single line, which we can see by running:"

# code block
#: git-novice/_episodes/04-changes.md:62
msgid ""
"~~~\n"
"mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:67 git-novice/_episodes/05-history.md:237
#: git-novice/_episodes/09-conflict.md:26
#: git-novice/_episodes/09-conflict.md:164
#: git-novice/_episodes/09-conflict.md:194
#: git-novice/_episodes/09-conflict.md:282
msgid ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:77
msgid ""
"If we check the status of our project again,\n"
"Git tells us that it's noticed the new file:"
msgstr ""
"If we check the status of our project again,\n"
"Git tells us that it's noticed the new file:"

# code block
#: git-novice/_episodes/04-changes.md:85
msgid ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:98
msgid ""
"The \"untracked files\" message means that there's a file in the directory\n"
"that Git isn't keeping track of.\n"
"We can tell Git to track a file using `git add`:"
msgstr ""
"The \"untracked files\" message means that there's a file in the directory\n"
"that Git isn't keeping track of.\n"
"We can tell Git to track a file using `git add`:"

# code block
#: git-novice/_episodes/04-changes.md:102
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:107
msgid "and then check that the right thing happened:"
msgstr "and then check that the right thing happened:"

# code block
#: git-novice/_episodes/04-changes.md:114
msgid ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"

#: git-novice/_episodes/04-changes.md:127
msgid ""
"Git now knows that it's supposed to keep track of `mars.txt`,\n"
"but it hasn't recorded these changes as a commit yet.\n"
"To get it to do that,\n"
"we need to run one more command:"
msgstr ""
"Git now knows that it's supposed to keep track of `mars.txt`,\n"
"but it hasn't recorded these changes as a commit yet.\n"
"To get it to do that,\n"
"we need to run one more command:"

# code block
#: git-novice/_episodes/04-changes.md:132
msgid ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:137
msgid ""
"~~~\n"
"[master (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"[master (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:144
msgid ""
"When we run `git commit`,\n"
"Git takes everything we have told it to save by using `git add`\n"
"and stores a copy permanently inside the special `.git` directory.\n"
"This permanent copy is called a [commit]({{ page.root }}/reference#commit)\n"
"(or [revision]({{ page.root }}/reference#revision)) and its short identifier "
"is `f22b25e`.\n"
"Your commit may have another identifier."
msgstr ""
"When we run `git commit`,\n"
"Git takes everything we have told it to save by using `git add`\n"
"and stores a copy permanently inside the special `.git` directory.\n"
"This permanent copy is called a [commit]({{ page.root }}/reference#commit)\n"
"(or [revision]({{ page.root }}/reference#revision)) and its short identifier "
"is `f22b25e`.\n"
"Your commit may have another identifier."

#: git-novice/_episodes/04-changes.md:151
msgid ""
"We use the `-m` flag (for \"message\")\n"
"to record a short, descriptive, and specific comment that will help us "
"remember later on what we did and why.\n"
"If we just run `git commit` without the `-m` option,\n"
"Git will launch `nano` (or whatever other editor we configured as `core."
"editor`)\n"
"so that we can write a longer message."
msgstr ""
"We use the `-m` flag (for \"message\")\n"
"to record a short, descriptive, and specific comment that will help us "
"remember later on what we did and why.\n"
"If we just run `git commit` without the `-m` option,\n"
"Git will launch `nano` (or whatever other editor we configured as `core."
"editor`)\n"
"so that we can write a longer message."

#: git-novice/_episodes/04-changes.md:157
msgid ""
"[Good commit messages][commit-messages] start with a brief (<50 characters) "
"statement about the\n"
"changes made in the commit. Generally, the message should complete the "
"sentence \"If applied, this commit will\" <commit message here>.\n"
"If you want to go into more detail, add a blank line between the summary "
"line and your additional notes. Use this additional space to explain why you "
"made changes and/or what their impact will be."
msgstr ""
"[Good commit messages][commit-messages] start with a brief (<50 characters) "
"statement about the\n"
"changes made in the commit. Generally, the message should complete the "
"sentence \"If applied, this commit will\" <commit message here>.\n"
"If you want to go into more detail, add a blank line between the summary "
"line and your additional notes. Use this additional space to explain why you "
"made changes and/or what their impact will be."

#: git-novice/_episodes/04-changes.md:161
msgid "If we run `git status` now:"
msgstr "If we run `git status` now:"

# code block
#: git-novice/_episodes/04-changes.md:168
#: git-novice/_episodes/04-changes.md:459 git-novice/_extras/discuss.md:244
msgid ""
"~~~\n"
"On branch master\n"
"nothing to commit, working directory clean\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"nothing to commit, working directory clean\n"
"~~~"

#: git-novice/_episodes/04-changes.md:174
msgid ""
"it tells us everything is up to date.\n"
"If we want to know what we've done recently,\n"
"we can ask Git to show us the project's history using `git log`:"
msgstr ""
"it tells us everything is up to date.\n"
"If we want to know what we've done recently,\n"
"we can ask Git to show us the project's history using `git log`:"

# code block
#: git-novice/_episodes/04-changes.md:178
#: git-novice/_episodes/04-changes.md:467
msgid ""
"~~~\n"
"$ git log\n"
"~~~"
msgstr ""
"~~~\n"
"$ git log\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:183
msgid ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"

#: git-novice/_episodes/04-changes.md:192
msgid ""
"`git log` lists all commits  made to a repository in reverse chronological "
"order.\n"
"The listing for each commit includes\n"
"the commit's full identifier\n"
"(which starts with the same characters as\n"
"the short identifier printed by the `git commit` command earlier),\n"
"the commit's author,\n"
"when it was created,\n"
"and the log message Git was given when the commit was created."
msgstr ""
"`git log` lists all commits  made to a repository in reverse chronological "
"order.\n"
"The listing for each commit includes\n"
"the commit's full identifier\n"
"(which starts with the same characters as\n"
"the short identifier printed by the `git commit` command earlier),\n"
"the commit's author,\n"
"when it was created,\n"
"and the log message Git was given when the commit was created."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:201
msgid "> ## Where Are My Changes?"
msgstr "> ## Where Are My Changes?"

#: git-novice/_episodes/04-changes.md:202
msgid ""
">\n"
"> If we run `ls` at this point, we will still see just one file called `mars."
"txt`.\n"
"> That's because Git saves information about files' history\n"
"> in the special `.git` directory mentioned earlier\n"
"> so that our filesystem doesn't become cluttered\n"
"> (and so that we can't accidentally edit or delete an old version)."
msgstr ""
">\n"
"> If we run `ls` at this point, we will still see just one file called `mars."
"txt`.\n"
"> That's because Git saves information about files' history\n"
"> in the special `.git` directory mentioned earlier\n"
"> so that our filesystem doesn't become cluttered\n"
"> (and so that we can't accidentally edit or delete an old version)."

#: git-novice/_episodes/04-changes.md:210
msgid ""
"Now suppose Dracula adds more information to the file.\n"
"(Again, we'll edit with `nano` and then `cat` the file to show its "
"contents;\n"
"you may use a different editor, and don't need to `cat`.)"
msgstr ""
"Now suppose のび太 adds more information to the file.\n"
"(Again, we'll edit with `nano` and then `cat` the file to show its "
"contents;\n"
"you may use a different editor, and don't need to `cat`.)"

# code block
#: git-novice/_episodes/04-changes.md:214
#: git-novice/_episodes/04-changes.md:370 git-novice/_episodes/05-history.md:27
#: git-novice/_episodes/05-history.md:177
#: git-novice/_episodes/09-conflict.md:40
#: git-novice/_episodes/09-conflict.md:88
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:220 git-novice/_extras/discuss.md:171
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for ドラえもん\n"
"~~~"

#: git-novice/_episodes/04-changes.md:226
msgid ""
"When we run `git status` now,\n"
"it tells us that a file it already knows about has been modified:"
msgstr ""
"When we run `git status` now,\n"
"it tells us that a file it already knows about has been modified:"

# code block
#: git-novice/_episodes/04-changes.md:234
#: git-novice/_episodes/04-changes.md:297
#: git-novice/_episodes/05-history.md:196
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_episodes/04-changes.md:246
msgid ""
"The last line is the key phrase:\n"
"\"no changes added to commit\".\n"
"We have changed this file,\n"
"but we haven't told Git we will want to save those changes\n"
"(which we do with `git add`)\n"
"nor have we saved them (which we do with `git commit`).\n"
"So let's do that now. It is good practice to always review\n"
"our changes before saving them. We do this using `git diff`.\n"
"This shows us the differences between the current state\n"
"of the file and the most recently saved version:"
msgstr ""
"The last line is the key phrase:\n"
"\"no changes added to commit\".\n"
"We have changed this file,\n"
"but we haven't told Git we will want to save those changes\n"
"(which we do with `git add`)\n"
"nor have we saved them (which we do with `git commit`).\n"
"So let's do that now. It is good practice to always review\n"
"our changes before saving them. We do this using `git diff`.\n"
"This shows us the differences between the current state\n"
"of the file and the most recently saved version:"

# code block
#: git-novice/_episodes/04-changes.md:257
#: git-novice/_episodes/04-changes.md:383 git-novice/_extras/discuss.md:180
msgid ""
"~~~\n"
"$ git diff\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:262 git-novice/_extras/discuss.md:194
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for ドラえもん\n"
"~~~"

#: git-novice/_episodes/04-changes.md:273
msgid ""
"The output is cryptic because\n"
"it is actually a series of commands for tools like editors and `patch`\n"
"telling them how to reconstruct one file given the other.\n"
"If we break it down into pieces:"
msgstr ""
"The output is cryptic because\n"
"it is actually a series of commands for tools like editors and `patch`\n"
"telling them how to reconstruct one file given the other.\n"
"If we break it down into pieces:"

# ordered list
#: git-novice/_episodes/04-changes.md:278
msgid ""
"1.  The first line tells us that Git is producing output similar to the Unix "
"`diff` command"
msgstr ""
"1.  The first line tells us that Git is producing output similar to the Unix "
"`diff` command"

#: git-novice/_episodes/04-changes.md:279
msgid ""
"    comparing the old and new versions of the file.\n"
"2.  The second line tells exactly which versions of the file\n"
"    Git is comparing;\n"
"    `df0654a` and `315bf3a` are unique computer-generated labels for those "
"versions.\n"
"3.  The third and fourth lines once again show the name of the file being "
"changed.\n"
"4.  The remaining lines are the most interesting, they show us the actual "
"differences\n"
"    and the lines on which they occur.\n"
"    In particular,\n"
"    the `+` marker in the first column shows where we added a line."
msgstr ""
"    comparing the old and new versions of the file.\n"
"2.  The second line tells exactly which versions of the file\n"
"    Git is comparing;\n"
"    `df0654a` and `315bf3a` are unique computer-generated labels for those "
"versions.\n"
"3.  The third and fourth lines once again show the name of the file being "
"changed.\n"
"4.  The remaining lines are the most interesting, they show us the actual "
"differences\n"
"    and the lines on which they occur.\n"
"    In particular,\n"
"    the `+` marker in the first column shows where we added a line."

#: git-novice/_episodes/04-changes.md:289
msgid "After reviewing our change, it's time to commit it:"
msgstr "After reviewing our change, it's time to commit it:"

# code block
#: git-novice/_episodes/04-changes.md:291
msgid ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on ドラえもん\"\n"
"$ git status\n"
"~~~"

#: git-novice/_episodes/04-changes.md:309
msgid ""
"Whoops:\n"
"Git won't commit because we didn't use `git add` first.\n"
"Let's fix that:"
msgstr ""
"Whoops:\n"
"Git won't commit because we didn't use `git add` first.\n"
"Let's fix that:"

# code block
#: git-novice/_episodes/04-changes.md:313
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on ドラえもん\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:319
msgid ""
"~~~\n"
"[master 34961b1] Add concerns about effects of Mars' moons on Wolfman\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[master 34961b1] Add concerns about effects of Mars' moons on ドラえもん\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:325
msgid ""
"Git insists that we add files to the set we want to commit\n"
"before actually committing anything. This allows us to commit our\n"
"changes in stages and capture changes in logical portions rather than\n"
"only large batches.\n"
"For example,\n"
"suppose we're adding a few citations to relevant research to our thesis.\n"
"We might want to commit those additions,\n"
"and the corresponding bibliography entries,\n"
"but *not* commit some of our work drafting the conclusion\n"
"(which we haven't finished yet)."
msgstr ""
"Git insists that we add files to the set we want to commit\n"
"before actually committing anything. This allows us to commit our\n"
"changes in stages and capture changes in logical portions rather than\n"
"only large batches.\n"
"For example,\n"
"suppose we're adding a few citations to relevant research to our thesis.\n"
"We might want to commit those additions,\n"
"and the corresponding bibliography entries,\n"
"but *not* commit some of our work drafting the conclusion\n"
"(which we haven't finished yet)."

#: git-novice/_episodes/04-changes.md:336
msgid ""
"To allow for this,\n"
"Git has a special *staging area*\n"
"where it keeps track of things that have been added to\n"
"the current [changeset]({{ page.root }}/reference#changeset)\n"
"but not yet committed."
msgstr ""
"To allow for this,\n"
"Git has a special *staging area*\n"
"where it keeps track of things that have been added to\n"
"the current [changeset]({{ page.root }}/reference#changeset)\n"
"but not yet committed."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:342
msgid "> ## Staging Area"
msgstr "> ## Staging Area"

#: git-novice/_episodes/04-changes.md:343
msgid ""
">\n"
"> If you think of Git as taking snapshots of changes over the life of a "
"project,\n"
"> `git add` specifies *what* will go in a snapshot\n"
"> (putting things in the staging area),\n"
"> and `git commit` then *actually takes* the snapshot, and\n"
"> makes a permanent record of it (as a commit).\n"
"> If you don't have anything staged when you type `git commit`,\n"
"> Git will prompt you to use `git commit -a` or `git commit --all`,\n"
"> which is kind of like gathering *everyone* for the picture!\n"
"> However, it's almost always better to\n"
"> explicitly add things to the staging area, because you might\n"
"> commit changes you forgot you made. (Going back to snapshots,\n"
"> you might get the extra with incomplete makeup walking on\n"
"> the stage for the snapshot because you used `-a`!)\n"
"> Try to stage things manually,\n"
"> or you might find yourself searching for \"git undo commit\" more\n"
"> than you would like!"
msgstr ""
">\n"
"> If you think of Git as taking snapshots of changes over the life of a "
"project,\n"
"> `git add` specifies *what* will go in a snapshot\n"
"> (putting things in the staging area),\n"
"> and `git commit` then *actually takes* the snapshot, and\n"
"> makes a permanent record of it (as a commit).\n"
"> If you don't have anything staged when you type `git commit`,\n"
"> Git will prompt you to use `git commit -a` or `git commit --all`,\n"
"> which is kind of like gathering *everyone* for the picture!\n"
"> However, it's almost always better to\n"
"> explicitly add things to the staging area, because you might\n"
"> commit changes you forgot you made. (Going back to snapshots,\n"
"> you might get the extra with incomplete makeup walking on\n"
"> the stage for the snapshot because you used `-a`!)\n"
"> Try to stage things manually,\n"
"> or you might find yourself searching for \"git undo commit\" more\n"
"> than you would like!"

#: git-novice/_episodes/04-changes.md:362
msgid "![The Git Staging Area](../fig/git-staging-area.svg)"
msgstr "![The Git Staging Area](../fig/git-staging-area.svg)"

#: git-novice/_episodes/04-changes.md:364
msgid ""
"Let's watch as our changes to a file move from our editor\n"
"to the staging area\n"
"and into long-term storage.\n"
"First,\n"
"we'll add another line to the file:"
msgstr ""
"Let's watch as our changes to a file move from our editor\n"
"to the staging area\n"
"and into long-term storage.\n"
"First,\n"
"we'll add another line to the file:"

# code block
#: git-novice/_episodes/04-changes.md:376 git-novice/_episodes/05-history.md:33
#: git-novice/_episodes/05-history.md:217
#: git-novice/_episodes/09-conflict.md:31
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for ドラえもん\n"
"But the ジャイアンさん will appreciate the lack of humidity\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:388
#: git-novice/_episodes/04-changes.md:424
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for ドラえもん\n"
"+But the ジャイアンさん will appreciate the lack of humidity\n"
"~~~"

#: git-novice/_episodes/04-changes.md:400
msgid ""
"So far, so good:\n"
"we've added one line to the end of the file\n"
"(shown with a `+` in the first column).\n"
"Now let's put that change in the staging area\n"
"and see what `git diff` reports:"
msgstr ""
"So far, so good:\n"
"we've added one line to the end of the file\n"
"(shown with a `+` in the first column).\n"
"Now let's put that change in the staging area\n"
"and see what `git diff` reports:"

# code block
#: git-novice/_episodes/04-changes.md:406
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"

#: git-novice/_episodes/04-changes.md:412
msgid ""
"There is no output:\n"
"as far as Git can tell,\n"
"there's no difference between what it's been asked to save permanently\n"
"and what's currently in the directory.\n"
"However,\n"
"if we do this:"
msgstr ""
"There is no output:\n"
"as far as Git can tell,\n"
"there's no difference between what it's been asked to save permanently\n"
"and what's currently in the directory.\n"
"However,\n"
"if we do this:"

# code block
#: git-novice/_episodes/04-changes.md:419
msgid ""
"~~~\n"
"$ git diff --staged\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff --staged\n"
"~~~"

#: git-novice/_episodes/04-changes.md:436
msgid ""
"it shows us the difference between\n"
"the last committed change\n"
"and what's in the staging area.\n"
"Let's save our changes:"
msgstr ""
"it shows us the difference between\n"
"the last committed change\n"
"and what's in the staging area.\n"
"Let's save our changes:"

# code block
#: git-novice/_episodes/04-changes.md:441
msgid ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:446
msgid ""
"~~~\n"
"[master 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[master 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:452
msgid "check our status:"
msgstr "check our status:"

#: git-novice/_episodes/04-changes.md:465
msgid "and look at the history of what we've done so far:"
msgstr "and look at the history of what we've done so far:"

# code block
#: git-novice/_episodes/04-changes.md:472
msgid ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on Wolfman\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on ドラえもん\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:493
msgid "> ## Word-based diffing"
msgstr "> ## Word-based diffing"

#: git-novice/_episodes/04-changes.md:494
msgid ""
">\n"
"> Sometimes, e.g. in the case of the text documents a line-wise\n"
"> diff is too coarse. That is where the `--color-words` option of\n"
"> `git diff` comes in very useful as it highlights the changed\n"
"> words using colors."
msgstr ""
">\n"
"> Sometimes, e.g. in the case of the text documents a line-wise\n"
"> diff is too coarse. That is where the `--color-words` option of\n"
"> `git diff` comes in very useful as it highlights the changed\n"
"> words using colors."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:501
msgid "> ## Paging the Log"
msgstr "> ## Paging the Log"

#: git-novice/_episodes/04-changes.md:502
msgid ""
">\n"
"> When the output of `git log` is too long to fit in your screen,\n"
"> `git` uses a program to split it into pages of the size of your screen.\n"
"> When this \"pager\" is called, you will notice that the last line in your\n"
"> screen is a `:`, instead of your usual prompt.\n"
">\n"
"> *   To get out of the pager, press <kbd>Q</kbd>.\n"
"> *   To move to the next page, press <kbd>Spacebar</kbd>.\n"
"> *   To search for `some_word` in all pages,\n"
">     press <kbd>/</kbd>\n"
">     and type `some_word`.\n"
">     Navigate through matches pressing <kbd>N</kbd>."
msgstr ""
">\n"
"> When the output of `git log` is too long to fit in your screen,\n"
"> `git` uses a program to split it into pages of the size of your screen.\n"
"> When this \"pager\" is called, you will notice that the last line in your\n"
"> screen is a `:`, instead of your usual prompt.\n"
">\n"
"> *   To get out of the pager, press <kbd>Q</kbd>.\n"
"> *   To move to the next page, press <kbd>Spacebar</kbd>.\n"
"> *   To search for `some_word` in all pages,\n"
">     press <kbd>/</kbd>\n"
">     and type `some_word`.\n"
">     Navigate through matches pressing <kbd>N</kbd>."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:516
msgid "> ## Limit Log Size"
msgstr "> ## Limit Log Size"

#: git-novice/_episodes/04-changes.md:517
msgid ""
">\n"
"> To avoid having `git log` cover your entire terminal screen, you can limit "
"the\n"
"> number of commits that Git lists by using `-N`, where `N` is the number "
"of\n"
"> commits that you want to view. For example, if you only want information "
"from\n"
"> the last commit you can use:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"
msgstr ""
">\n"
"> To avoid having `git log` cover your entire terminal screen, you can limit "
"the\n"
"> number of commits that Git lists by using `-N`, where `N` is the number "
"of\n"
"> commits that you want to view. For example, if you only want information "
"from\n"
"> the last commit you can use:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"> Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"

# SC/DC Template label
#: git-novice/_episodes/04-changes.md:535
#: git-novice/_episodes/04-changes.md:549
#: git-novice/_episodes/04-changes.md:563
#: git-novice/_episodes/05-history.md:399
#: git-novice/_episodes/05-history.md:406
#: git-novice/_episodes/05-history.md:414
#: git-novice/_episodes/05-history.md:421
msgid "> {: .output}"
msgstr "> {: .output}"

#: git-novice/_episodes/04-changes.md:536
msgid ""
">\n"
"> You can also reduce the quantity of information using the\n"
"> `--oneline` option:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> You can also reduce the quantity of information using the\n"
"> `--oneline` option:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on ドラえもん\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

#: git-novice/_episodes/04-changes.md:550
msgid ""
">\n"
"> You can also combine the `--oneline` options with others. One useful\n"
"> combination is:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph --all --decorate\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> You can also combine the `--oneline` options with others. One useful\n"
"> combination is:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph --all --decorate\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n"
"> * 34961b1 Add concerns about effects of Mars' moons on ドラえもん\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:566
msgid "> ## Directories"
msgstr "> ## Directories"

#: git-novice/_episodes/04-changes.md:567
msgid ""
">\n"
"> Two important facts you should know about directories in Git.\n"
">\n"
"> 1. Git does not track directories on their own, only files within them.\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ mkdir directory\n"
">    $ git status\n"
">    $ git add directory\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Note, our newly created empty directory `directory` does not appear in\n"
">    the list of untracked files even if we explicitly add it (_via_ `git "
"add`) to our\n"
">    repository. This is the reason why you will sometimes see `.gitkeep` "
"files\n"
">    in otherwise empty directories. Unlike `.gitignore`, these files are "
"not special\n"
">    and their sole purpose is to populate a directory so that Git adds it "
"to\n"
">    the repository. In fact, you can name such files anything you like.\n"
">\n"
"> {:start=\"2\"}\n"
"> 2. If you create a directory in your Git repository and populate it with "
"files,\n"
">    you can add all files in the directory at once by:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}"
msgstr ""
">\n"
"> Two important facts you should know about directories in Git.\n"
">\n"
"> 1. Git does not track directories on their own, only files within them.\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ mkdir directory\n"
">    $ git status\n"
">    $ git add directory\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Note, our newly created empty directory `directory` does not appear in\n"
">    the list of untracked files even if we explicitly add it (_via_ `git "
"add`) to our\n"
">    repository. This is the reason why you will sometimes see `.gitkeep` "
"files\n"
">    in otherwise empty directories. Unlike `.gitignore`, these files are "
"not special\n"
">    and their sole purpose is to populate a directory so that Git adds it "
"to\n"
">    the repository. In fact, you can name such files anything you like.\n"
">\n"
"> {:start=\"2\"}\n"
"> 2. If you create a directory in your Git repository and populate it with "
"files,\n"
">    you can add all files in the directory at once by:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}"

#: git-novice/_episodes/04-changes.md:598
msgid ""
"To recap, when we want to add changes to our repository,\n"
"we first need to add the changed files to the staging area\n"
"(`git add`) and then commit the staged changes to the\n"
"repository (`git commit`):"
msgstr ""
"To recap, when we want to add changes to our repository,\n"
"we first need to add the changed files to the staging area\n"
"(`git add`) and then commit the staged changes to the\n"
"repository (`git commit`):"

#: git-novice/_episodes/04-changes.md:603
msgid "![The Git Commit Workflow](../fig/git-committing.svg)"
msgstr "![The Git Commit Workflow](../fig/git-committing.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:605
msgid "> ## Choosing a Commit Message"
msgstr "> ## Choosing a Commit Message"

#: git-novice/_episodes/04-changes.md:606
msgid ""
">\n"
"> Which of the following commit messages would be most appropriate for the\n"
"> last commit made to `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to "
"mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solution\n"
"> > Answer 1 is not descriptive enough, and the purpose of the commit is "
"unclear;\n"
"> > and answer 2 is redundant to using \"git diff\" to see what changed in "
"this commit;\n"
"> > but answer 3 is good: short, descriptive, and imperative."
msgstr ""
">\n"
"> Which of the following commit messages would be most appropriate for the\n"
"> last commit made to `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to "
"mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solution\n"
"> > Answer 1 is not descriptive enough, and the purpose of the commit is "
"unclear;\n"
"> > and answer 2 is redundant to using \"git diff\" to see what changed in "
"this commit;\n"
"> > but answer 3 is good: short, descriptive, and imperative."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:621
msgid "> ## Committing Changes to Git"
msgstr "> ## Committing Changes to Git"

#: git-novice/_episodes/04-changes.md:622
msgid ""
">\n"
"> Which command(s) below would save the changes of `myfile.txt`\n"
"> to my local Git repository?\n"
">\n"
"> 1. `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 2. `$ git init myfile.txt`\n"
">    `git commit -m \"my recent changes\"`\n"
">\n"
"> 3. `$ git add myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 4. `$ git commit -m myfile.txt \"my recent changes\"`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Would only create a commit if files have already been staged.\n"
"> > 2. Would try to create a new repository.\n"
"> > 3. Is correct: first add the file to the staging area, then commit.\n"
"> > 4. Would try to commit a file \"my recent changes\" with the message "
"myfile.txt."
msgstr ""
">\n"
"> Which command(s) below would save the changes of `myfile.txt`\n"
"> to my local Git repository?\n"
">\n"
"> 1. `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 2. `$ git init myfile.txt`\n"
">    `git commit -m \"my recent changes\"`\n"
">\n"
"> 3. `$ git add myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 4. `$ git commit -m myfile.txt \"my recent changes\"`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Would only create a commit if files have already been staged.\n"
"> > 2. Would try to create a new repository.\n"
"> > 3. Is correct: first add the file to the staging area, then commit.\n"
"> > 4. Would try to commit a file \"my recent changes\" with the message "
"myfile.txt."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:645
msgid "> ## Committing Multiple Files"
msgstr "> ## Committing Multiple Files"

#: git-novice/_episodes/04-changes.md:646
msgid ""
">\n"
"> The staging area can hold changes from any number of files\n"
"> that you want to commit as a single snapshot.\n"
">\n"
"> 1. Add some text to `mars.txt` noting your decision\n"
"> to consider Venus as a base\n"
"> 2. Create a new file `venus.txt` with your initial thoughts\n"
"> about Venus as a base for you and your friends\n"
"> 3. Add changes from both files to the staging area,\n"
"> and commit those changes.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > First we make our changes to the `mars.txt` and `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Now you can add both files to the staging area. We can do that in one "
"line:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Or with multiple commands:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Now the files are ready to commit. You can check that using `git "
"status`. If you are ready to commit use:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [master cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> The staging area can hold changes from any number of files\n"
"> that you want to commit as a single snapshot.\n"
">\n"
"> 1. Add some text to `mars.txt` noting your decision\n"
"> to consider Venus as a base\n"
"> 2. Create a new file `venus.txt` with your initial thoughts\n"
"> about Venus as a base for you and your friends\n"
"> 3. Add changes from both files to the staging area,\n"
"> and commit those changes.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > First we make our changes to the `mars.txt` and `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Now you can add both files to the staging area. We can do that in one "
"line:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Or with multiple commands:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Now the files are ready to commit. You can check that using `git "
"status`. If you are ready to commit use:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [master cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:705
msgid "> ## `bio` Repository"
msgstr "> ## `bio` Repository"

#: git-novice/_episodes/04-changes.md:706
msgid ""
">\n"
"> * Create a new Git repository on your computer called `bio`.\n"
"> * Write a three-line biography for yourself in a file called `me.txt`,\n"
"> commit your changes\n"
"> * Modify one line, add a fourth line\n"
"> * Display the differences\n"
"> between its updated state and its original state.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If needed, move out of the `planets` folder:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create a new folder called `bio` and 'move' into it:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Initialise git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create your biography file `me.txt` using `nano` or another text "
"editor.\n"
"> > Once in place, add and commit it to the repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m'Adding biography file'\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modify the file as described (modify one line, add a fourth line).\n"
"> > To display the differences\n"
"> > between its updated state and its original state, use `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >"
msgstr ""
">\n"
"> * Create a new Git repository on your computer called `bio`.\n"
"> * Write a three-line biography for yourself in a file called `me.txt`,\n"
"> commit your changes\n"
"> * Modify one line, add a fourth line\n"
"> * Display the differences\n"
"> between its updated state and its original state.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If needed, move out of the `planets` folder:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create a new folder called `bio` and 'move' into it:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Initialise git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create your biography file `me.txt` using `nano` or another text "
"editor.\n"
"> > Once in place, add and commit it to the repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m'Adding biography file'\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modify the file as described (modify one line, add a fourth line).\n"
"> > To display the differences\n"
"> > between its updated state and its original state, use `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:759
msgid "> ## Author and Committer"
msgstr "> ## Author and Committer"

#: git-novice/_episodes/04-changes.md:760
msgid ""
">\n"
"> For each of the commits you have done, Git stored your name twice.\n"
"> You are named as the author and as the committer. You can observe\n"
"> that by telling Git to show you more information about your last\n"
"> commits:\n"
">\n"
"> ~~~\n"
"> $ git log --format=full\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When committing you can name someone else as the author:\n"
">\n"
"> ~~~\n"
"> $ git commit --author=\"Vlad Dracula <vlad@tran.sylvan.ia>\"\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Create a new repository and create two commits: one without the\n"
"> `--author` option and one by naming a colleague of yours as the\n"
"> author. Run `git log` and `git log --format=full`. Think about ways\n"
"> how that can allow you to collaborate with your colleagues.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Update Vlad's bio.\" --author=\"Frank N. Stein "
"<franky@monster.com>\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 4162a51] Update Vlad's bio.\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > 1 file changed, 2 insertions(+), 2 deletions(-)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > ~~~\n"
"> > $ git log --format=full\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > commit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Update Vlad's bio.\n"
"> >\n"
"> > commit aaa3271e5e26f75f11892718e83a3e2743fab8ea\n"
"> > Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Vlad's initial bio.\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> For each of the commits you have done, Git stored your name twice.\n"
"> You are named as the author and as the committer. You can observe\n"
"> that by telling Git to show you more information about your last\n"
"> commits:\n"
">\n"
"> ~~~\n"
"> $ git log --format=full\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When committing you can name someone else as the author:\n"
">\n"
"> ~~~\n"
"> $ git commit --author=“野比 のび太 <nobita@doko.demo.doa>”\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Create a new repository and create two commits: one without the\n"
"> `--author` option and one by naming a colleague of yours as the\n"
"> author. Run `git log` and `git log --format=full`. Think about ways\n"
"> how that can allow you to collaborate with your colleagues.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Update のび太 bio.\" --author=“源 静香 "
"<shizuka@minamoto.home>”\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 4162a51] Update Vlad's bio.\n"
"> > Author: 源 静香 <shizuka@minamoto.home>\n"
"> > 1 file changed, 2 insertions(+), 2 deletions(-)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > ~~~\n"
"> > $ git log --format=full\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > commit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\n"
"> > Author: 源 静香 <shizuka@minamoto.home>\n"
"> > Commit: 野比 のび太 <nobita@doko.demo.doa>\n"
"> >\n"
"> > Update のび太 bio.\n"
"> >\n"
"> > commit aaa3271e5e26f75f11892718e83a3e2743fab8ea\n"
"> > Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"> > Commit: 野比 のび太 <nobita@doko.demo.doa>\n"
"> >\n"
"> > のび太 initial bio.\n"
"> > ~~~\n"
"> > {: .output}"

#: git-novice/_episodes/04-changes.md:820
msgid "[commit-messages]: https://chris.beams.io/posts/git-commit/"
msgstr "[commit-messages]: https://chris.beams.io/posts/git-commit/"

# Front Matter
#: git-novice/_episodes/05-history.md:1
msgid ""
"---\n"
"title: Exploring History\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I identify old versions of files?\"\n"
"- \"How do I review my changes?\"\n"
"- \"How can I recover old versions of files?\"\n"
"objectives:\n"
"- \"Explain what the HEAD of a repository is and how to use it.\"\n"
"- \"Identify and use Git commit numbers.\"\n"
"- \"Compare various versions of tracked files.\"\n"
"- \"Restore old versions of files.\"\n"
"keypoints:\n"
"- \"`git diff` displays differences between commits.\"\n"
"- \"`git checkout` recovers old versions of files.\"\n"
"---"
msgstr ""
"---\n"
"title: 履歴の探索\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"ファイルの古いバージョンを確認するにはどうすればよいですか?\"\n"
"- \"変更内容を再調査するにはどうすればよいでしょうか?\"\n"
"- \"ファイルの古いバージョンを復元するにはどうすればよいでしょうか?\"\n"
"objectives:\n"
"- \"リポジトリのHEADとは何か、またその使い方を説明出来るようになりましょう。\"\n"
"- \"Gitのコミット番号を特定して使ってみましょう。\"\n"
"- \"追跡調査されるファイルのいろいろなバージョンを比較してみましょう。\"\n"
"- \"ファイルの古いバージョンを復元してみましょう。\"\n"
"keypoints:\n"
"- \"`git diff` は、コミット間の違いを表示します。\"\n"
"- \"`git checkout` は、ファイルの古いバージョンを復元します。\"\n"
"---"

#: git-novice/_episodes/05-history.md:19
msgid ""
"As we saw in the previous lesson, we can refer to commits by their\n"
"identifiers.  You can refer to the _most recent commit_ of the working\n"
"directory by using the identifier `HEAD`."
msgstr ""
"前のレッスンで見たように、コミットを識別子で参照できます。\n"
"識別子 `HEAD` を使うことで 作業ディレクトリの _最新のコミット_ \n"
"を参照できます。"

#: git-novice/_episodes/05-history.md:23
msgid ""
"We've been adding one line at a time to `mars.txt`, so it's easy to track "
"our\n"
"progress by looking, so let's do that using our `HEAD`s.  Before we start,\n"
"let's make a change to `mars.txt`."
msgstr ""
"`mars.txt` に一度に1行ずつ追加しているので、進展を見て確認することは簡単です。"
"それでは `HEAD` を使ってそれを行ってみましょう。\n"
"始める前に、 `mars.txt` にもう1行加えることで変更を加えてみましょう。"

#: git-novice/_episodes/05-history.md:40
msgid "Now, let's see what we get."
msgstr "それでは、何が得られるか見てみましょう。"

# code block
#: git-novice/_episodes/05-history.md:42
msgid ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:47
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
" But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for ドラえもん\n"
" But the Mummy will appreciate the lack of humidity\n"
"~~~"

#: git-novice/_episodes/05-history.md:59
msgid ""
"which is the same as what you would get if you leave out `HEAD` (try it).  "
"The\n"
"real goodness in all this is when you can refer to previous commits.  We do\n"
"that by adding `~1` \n"
"(where \"~\" is \"tilde\", pronounced [**til**-d*uh*]) \n"
"to refer to the commit one before `HEAD`."
msgstr ""
"これは、 `HEAD` を省略した場合 (試してみてください) に得られるものと同じです。 "
"これの本当の利点は、以前のコミットを参照できることです。\n"
"それを行うには、`HEAD` より前のコミットを参照するために `~1` \n"
"(「~」は「チルダ」、発音は [**til**-d*uh*]) を追加します。 \n"

# code block
#: git-novice/_episodes/05-history.md:65
msgid ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:70
msgid ""
"If we want to see the differences between older commits we can use `git "
"diff`\n"
"again, but with the notation `HEAD~1`, `HEAD~2`, and so on, to refer to them:"
msgstr ""
"古いコミット間の違いを確認したい場合は、`git diff` を再度使用できますが、"
"`HEAD~1`、`HEAD~2` などの表記を使用して、それらを参照するには下記を行います:"

# code block
#: git-novice/_episodes/05-history.md:74
msgid ""
"~~~\n"
"$ git diff HEAD~2 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD~2 mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:79
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for ドラえもん\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"

#: git-novice/_episodes/05-history.md:91
msgid ""
"We could also use `git show` which shows us what changes we made at an older "
"commit as well as the commit message, rather than the _differences_ between "
"a commit and our working directory that we see by using `git diff`."
msgstr ""
"`git diff` を使用して表示されるコミットと作業ディレクトリの _違い_ ではなく、 "
"古いコミットで行った変更だけでなくコミットメッセージも表示する `git show` を使用することもできます。"

# code block
#: git-novice/_episodes/05-history.md:93
msgid ""
"~~~\n"
"$ git show HEAD~2 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git show HEAD~2 mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:98
msgid ""
"~~~\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""
"~~~\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: 野比 のび太 <nobita@doko.demo.doa>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"

#: git-novice/_episodes/05-history.md:115
msgid ""
"In this way,\n"
"we can build up a chain of commits.\n"
"The most recent end of the chain is referred to as `HEAD`;\n"
"we can refer to previous commits using the `~` notation,\n"
"so `HEAD~1`\n"
"means \"the previous commit\",\n"
"while `HEAD~123` goes back 123 commits from where we are now."
msgstr ""
"このようにして、コミットのチェーンを構築できます。\n"
"チェーンの最新の終わりは `HEAD` と呼ばれます;\n"
" `~` 表記を使用して以前のコミットを参照できるため、\n"
" `HEAD~1` は「以前のコミット」を意味し、`HEAD~123` は\n"
"現在の場所から123個前のコミットに戻ります。"

#: git-novice/_episodes/05-history.md:123
msgid ""
"We can also refer to commits using\n"
"those long strings of digits and letters\n"
"that `git log` displays.\n"
"These are unique IDs for the changes,\n"
"and \"unique\" really does mean unique:\n"
"every change to any set of files on any computer\n"
"has a unique 40-character identifier.\n"
"Our first commit was given the ID\n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"so let's try this:"
msgstr ""
"`git log` が表示する、数字と文字の長い文字列を使用して\n"
"コミットを参照することもできます。\n"
"これらは一個一個の変更に対するユニークなIDであり、「ユニーク」は本当に唯一であることを意味します:\n"
"どのコンピューターのどのファイルの変更の組み合わせに対しても、\n"
"ユニークな40文字の ID があります。\n"
"最初のコミットにはID `f22b25e3233b4645dabd0d81e651fe074bd8e73b` が与えられたので、\n"
"これを試してみましょう:"

# code block
#: git-novice/_episodes/05-history.md:134
msgid ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:139
#: git-novice/_episodes/05-history.md:160
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for ドラえもん\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"

#: git-novice/_episodes/05-history.md:151
msgid ""
"That's the right answer,\n"
"but typing out random 40-character strings is annoying,\n"
"so Git lets us use just the first few characters:"
msgstr ""
"これは正しい答えですが、\n"
"ランダムな40文字の文字列を入力するのは面倒なので、\n"
"Gitは最初の数文字だけを使えばよいようにしてくれています:"

# code block
#: git-novice/_episodes/05-history.md:155
msgid ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:172
msgid ""
"All right! So\n"
"we can save changes to files and see what we've changed—now how\n"
"can we restore older versions of things?\n"
"Let's suppose we accidentally overwrite our file:"
msgstr ""
"やりました! \n"
"こんなわけで ファイルへの変更を保存して、何が変更されたかを確認できます。\n"
"では、どうすれば古いバージョンのものを復元できるでしょうか?\n"
"我々のファイルをうっかり上書きしたとしましょう:"

# code block
#: git-novice/_episodes/05-history.md:183
msgid ""
"~~~\n"
"We will need to manufacture our own oxygen\n"
"~~~"
msgstr ""
"~~~\n"
"We will need to manufacture our own oxygen\n"
"~~~"

#: git-novice/_episodes/05-history.md:188
msgid ""
"`git status` now tells us that the file has been changed,\n"
"but those changes haven't been staged:"
msgstr ""
"`git status` は、ファイルが変更されたことを示しますが、\n"
"それらの変更はステージングされていません:"

#: git-novice/_episodes/05-history.md:208
msgid ""
"We can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"`git checkout`を使うと、元の状態に戻すことができます:"

# code block
#: git-novice/_episodes/05-history.md:211
msgid ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:224
msgid ""
"As you might guess from its name,\n"
"`git checkout` checks out (i.e., restores) an old version of a file.\n"
"In this case,\n"
"we're telling Git that we want to recover the version of the file recorded "
"in `HEAD`,\n"
"which is the last saved commit.\n"
"If we want to go back even further,\n"
"we can use a commit identifier instead:"
msgstr ""
"その名前から推測できるように、\n"
"`git checkout` はファイルの古いバージョンをチェックアウト (つまり、復元) します。\n"
"この場合、\n"
"最後に保存されたコミットである `HEAD` に記録されたファイルのバージョン "
"を復元することをGitに伝えています。\n"
"さらに戻りたい場合は、\n"
"代わりにコミット ID を使うことができます:"

# code block
#: git-novice/_episodes/05-history.md:232 git-novice/_extras/discuss.md:62
msgid ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:252
msgid ""
"~~~\n"
"# On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"# Changes not staged for commit:\n"
"#   (use \"git add <file>...\" to update what will be committed)\n"
"#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"#\n"
"#\tmodified:   mars.txt\n"
"#\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"# On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"# Changes not staged for commit:\n"
"#   (use \"git add <file>...\" to update what will be committed)\n"
"#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"#\n"
"#\tmodified:   mars.txt\n"
"#\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_episodes/05-history.md:266
msgid ""
"Notice that the changes are on the staged area.\n"
"Again, we can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"変更はステージング領域にあることに注意してください。\n"
"繰り返しますが、`git checkout` を使うと、元の状態に戻すことができます:"

# code block
#: git-novice/_episodes/05-history.md:270
msgid ""
"~~~\n"
"$ git checkout -f master mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout -f master mars.txt\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:275
msgid "> ## Don't Lose Your HEAD"
msgstr "> ## HEAD を見失わないようにしましょう"

#: git-novice/_episodes/05-history.md:276
msgid ""
">\n"
"> Above we used\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> to revert `mars.txt` to its state after the commit `f22b25e`. But be "
"careful! \n"
"> The command `checkout` has other important functionalities and Git will "
"misunderstand\n"
"> your intentions if you are not accurate with the typing. For example, \n"
"> if you forget `mars.txt` in the previous command.\n"
"> The \"detached HEAD\" is like \"look, but don't touch\" here,\n"
"> so you shouldn't make any changes in this state.\n"
"> After investigating your repo's past state, reattach your `HEAD` with `git "
"checkout master`."
msgstr ""
">\n"
"> 上記では下記を使いました\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> `mars.txt` をコミット `f22b25e` 後の状態に戻すためにです。しかし注意してください!"
"> コマンド `checkout` には他の重要な機能があり、入力が正確でない場合、"
"> Gitはあなたの意図を誤解する可能性があります。たとえば、\n"
"> 前のコマンドで `mars.txt` を忘れた場合です。\n"
"> ここでの「HEADが切り離された」状態は「見れるが触ってはいけない」ようなものなので、\n"
"> この状態で変更を加えないでください。\n"
"> リポジトリの過去の状態を調査した後、`git checkout master` で `HEAD` を再接続してください。"

#: git-novice/_episodes/05-history.md:293
msgid ""
"It's important to remember that\n"
"we must use the commit number that identifies the state of the repository\n"
"*before* the change we're trying to undo.\n"
"A common mistake is to use the number of\n"
"the commit in which we made the change we're trying to get rid of.\n"
"In the example below, we want to retrieve the state from before the most\n"
"recent commit (`HEAD~1`), which is commit `f22b25e`:"
msgstr ""
"取り消したい変更の一個**前**のコミット番号を使う\n"
"必要がある\n"
"ことを覚えておくことが重要です。\n"
"よくある間違いは、\n"
"破棄しようとしている変更を行ったコミットの番号を使用することです。\n"
"以下の例では、最新のコミットの前 (`HEAD~1`) 、\n"
"すなわち`f22b25e`から状態を取得したいと考えています:"

#: git-novice/_episodes/05-history.md:301
msgid "![Git Checkout](../fig/git-checkout.svg)"
msgstr "![Git Checkout](../fig/git-checkout.svg)"

#: git-novice/_episodes/05-history.md:303
msgid ""
"So, to put it all together,\n"
"here's how Git works in cartoon form:"
msgstr ""
"つまり、すべてをまとめると、\n"
"Gitがどのように機能するかは次の漫画のようになります:"

#: git-novice/_episodes/05-history.md:306
msgid ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266](../fig/"
"git_staging.svg)"
msgstr ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266](../fig/"
"git_staging.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:308
msgid "> ## Simplifying the Common Case"
msgstr "> ## よくあるケースの簡単化"

#: git-novice/_episodes/05-history.md:309
msgid ""
">\n"
"> If you read the output of `git status` carefully,\n"
"> you'll see that it includes this hint:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> As it says,\n"
"> `git checkout` without a version identifier restores files to the state "
"saved in `HEAD`.\n"
"> The double dash `--` is needed to separate the names of the files being "
"recovered\n"
"> from the command itself:\n"
"> without it,\n"
"> Git would try to use the name of the file as the commit identifier."
msgstr ""
">\n"
"> `git status` の出力を注意深く読むと、\n"
"> 次のヒントを含んでいることが分かります:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> それが言っているように、\n"
"> バージョン識別子のない `git checkout` はファイルを"
"`HEAD` に保存された状態に復元します。\n"
"> 二重のダッシュ `--` はコマンドから復元されるファイルの名前を区別するために必要です:\n"
"> それがないと、\n"
"> Git はファイルの名前をコミット ID として使用しようとします。"

#: git-novice/_episodes/05-history.md:326
msgid ""
"The fact that files can be reverted one by one\n"
"tends to change the way people organize their work.\n"
"If everything is in one large document,\n"
"it's hard (but not impossible) to undo changes to the introduction\n"
"without also undoing changes made later to the conclusion.\n"
"If the introduction and conclusion are stored in separate files,\n"
"on the other hand,\n"
"moving backward and forward in time becomes much easier."
msgstr ""
"ファイルを1つずつ元に戻すことができるという事実は\n"
"人々が研究を整理する方法を変えることがあります。\n"
"すべての変更が1つの大きなドキュメントに含まれている場合、\n"
"後で結論に加えられた変更を元に戻さずに、\n"
"序論への変更を元に戻すことは困難です(不可能ではありませんが)。\n"
"一方、\n"
"序論と結論を別々のファイルに保存すると、\n"
"時間を前後に移動するのがはるかに簡単になります。"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:335
msgid "> ## Recovering Older Versions of a File"
msgstr "> ## ファイルの古いバージョンの復元"

#: git-novice/_episodes/05-history.md:336
msgid ""
">\n"
"> Jennifer has made changes to the Python script that she has been working "
"on for weeks, and the\n"
"> modifications she made this morning \"broke\" the script and it no longer "
"runs. She has spent\n"
"> ~ 1hr trying to fix it, with no luck...\n"
">\n"
"> Luckily, she has been keeping track of her project's versions using Git! "
"Which commands below will\n"
"> let her recover the last committed version of her Python script called\n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Both 2 and 4"
msgstr ""
">\n"
"> ジェニファーは、数週間取り組んできたPythonスクリプトに変更を加えました。 "
"そして\n"
"> 今朝行った変更により、スクリプトが \"壊れ\" 動作しなくなりました。 "
"彼女はそれを修正しようとして\n"
"> 約1時間費やしましたが、うまく機能しません...\n"
">\n"
"> 幸い、彼女はGitを使用してプロジェクトのバージョンを追跡していました! "
"以下のどのコマンドで、\n"
"> `data_cruncher.py` と呼ばれるPythonスクリプトの最後にコミットされたバージョンを復元できるでしょうか?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. 2と4の両方"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:356
msgid "> ## Reverting a Commit"
msgstr "> ## コミットを戻すことについて"

#: git-novice/_episodes/05-history.md:357
msgid ""
">\n"
"> Jennifer is collaborating on her Python script with her colleagues and\n"
"> realizes her last commit to the group repository is wrong and wants to\n"
"> undo it.  Jennifer needs to undo correctly so everyone in the group\n"
"> repository gets the correct change.  `git revert [wrong commit ID]`\n"
"> will make a new commit that undoes Jennifer's previous wrong\n"
"> commit. Therefore `git revert` is different than `git checkout [commit\n"
"> ID]` because `checkout` is for local changes not committed to the\n"
"> group repository.  Below are the right steps and explanations for\n"
"> Jennifer to use `git revert`, what is the missing command?\n"
">\n"
"> 1. `________ # Look at the git history of the project to find the commit "
"ID`\n"
">\n"
"> 2. Copy the ID (the first few characters of the ID, e.g. 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Type in the new commit message.\n"
">\n"
"> 5. Save and close"
msgstr ""
">\n"
"> ジェニファーは同僚とPythonスクリプトで共同作業を行っており、\n"
"> グループのリポジトリへの彼女の最新のコミットが間違っていることに気付き、\n"
"> それを元に戻したいと思っています。Jenniferは、グループリポジトリのみんなが正しい変更を取得できるように、\n"
"> 正しく元に戻す必要があります。  `git revert [wrong commit ID]` は、\n"
"> ジェニファーの誤ったコミットを元に戻す新しいコミットを作ります。\n"
"> 従って `git revert` は `git checkout [commit\n"
"> ID]` とは異なります。なぜなら `checkout` はグループのリポジトリにはコミットされていない\n"
"> ローカルの変更用のコマンドだからです。以下は、ジェニファーが\n"
"> `git revert` を使用するための正しい手順と説明ですが、不足しているコマンドは何でしょうか?\n"
">\n"
"> 1. `________ # コミットIDを見つけるために、プロジェクトのgitの "
"履歴を見ます`\n"
">\n"
"> 2. そのIDをコピーします (IDの最初の数文字は例えば 0b1d055)。\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. 新しいコミットメッセージを入力します。\n"
">\n"
"> 5. 保存して閉じます"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:379
msgid "> ## Understanding Workflow and History"
msgstr "> ## ワークフローと履歴の理解"

#: git-novice/_episodes/05-history.md:380
msgid ""
">\n"
"> What is the output of the last command in\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #this will print the contents of venus.txt to the screen\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. \n"
">\n"
"> ~~~\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"
msgstr ""
">\n"
"> 最後のコマンドの出力は何でしょうか\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #これはvenus.txtの内容を画面に出力します\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. \n"
">\n"
"> ~~~\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:400
msgid ""
">\n"
"> 2.\n"
">\n"
"> ~~~\n"
"> Venus is beautiful and full of love\n"
"> ~~~"
msgstr ""
">\n"
"> 2.\n"
">\n"
"> ~~~\n"
"> Venus is beautiful and full of love\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:407
msgid ""
">\n"
"> 3.\n"
">\n"
"> ~~~\n"
"> Venus is beautiful and full of love\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"
msgstr ""
">\n"
"> 3.\n"
">\n"
"> ~~~\n"
"> Venus is beautiful and full of love\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:415
msgid ""
">\n"
"> 4.\n"
">\n"
"> ~~~\n"
"> Error because you have changed venus.txt without committing the changes\n"
"> ~~~"
msgstr ""
">\n"
"> 4.\n"
">\n"
"> ~~~\n"
"> Error because you have changed venus.txt without committing the changes\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:422
msgid ""
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answer is 2 because `git add venus.txt` was used only before add the "
"line\n"
"> > `Venus is too hot to be suitable as a base`\n"
"> > which was lost when `git checkout` was executed.\n"
"> > Using the flag `-a` with `git commit` would have prevented the lost."
msgstr ""
">\n"
"> > ## 答え\n"
"> >\n"
"> > 答えは2です。`git add venus.txt` は `git checkout` が実行された時に "
"失われた行\n"
"> > `Venus is too hot to be suitable as a base`\n"
"> > を追加する前でのみ使われていました。\n"
"> > フラグ `-a` を `git commit` とともに使っていたら、その行の消失は防がれていたでしょう。"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:432
msgid "> ## Checking Understanding of `git diff`"
msgstr "> ## `git diff` の理解のチェック"

#: git-novice/_episodes/05-history.md:433
msgid ""
">\n"
"> Consider this command: `git diff HEAD~3 mars.txt`. What do you predict "
"this command\n"
"> will do if you execute it? What happens when you do execute it? Why?\n"
">\n"
"> Try another command, `git diff [ID] mars.txt`, where [ID] is replaced "
"with\n"
"> the unique identifier for your most recent commit. What do you think will "
"happen,\n"
"> and what does happen?"
msgstr ""
">\n"
"> このコマンドをよく考えてみてください: `git diff HEAD~3 mars.txt`。 "
"このコマンドを実行したら\n"
"> どうなるだろうと予測しますか? 実行すると何が起こっていますか? またそれはなぜでしょうか?\n"
">\n"
"> 別のコマンド `git diff [ID] mars.txt` を試しましょう、ここでの [ID] は "
"> 最新のコミットのユニークな ID で置き換えられます。 "
"あなたは何が起こるだろうと思いますか? \n"
"> そして何が起こっていますか?"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:442
msgid "> ## Getting Rid of Staged Changes"
msgstr "> ## ステージされた変更の除去"

#: git-novice/_episodes/05-history.md:443
msgid ""
">\n"
"> `git checkout` can be used to restore a previous commit when unstaged "
"changes have\n"
"> been made, but will it also work for changes that have been staged but not "
"committed?\n"
"> Make a change to `mars.txt`, add that change, and use `git checkout` to "
"see if\n"
"> you can remove your change."
msgstr ""
">\n"
"> `git checkout` は、ステージされていない変更があったときに "
"以前のコミットを復元するために使用できます。\n"
"> しかしそれはステージされているがコミットされていない変更に対しても機能する"
"でしょうか?\n"
"> `mars.txt` に変更を用意し、その変更を加え（`git add`を使い）、`git checkout` を使い "
"> 変更を取り除くことができるかどうか確かめましょう。"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:450
msgid "> ## Explore and Summarize Histories"
msgstr "> ## 履歴を探索し、要約する"

#: git-novice/_episodes/05-history.md:451
msgid ""
">\n"
"> Exploring history is an important part of git, often it is a challenge to "
"find\n"
"> the right commit ID, especially if the commit is from several months ago.\n"
">\n"
"> Imagine the `planets` project has more than 50 files.\n"
"> You would like to find a commit with specific text in `mars.txt` is "
"modified.\n"
"> When you type `git log`, a very long list appeared,\n"
"> How can you narrow down the search?\n"
">\n"
"> Recall that the `git diff` command allow us to explore one specific file,\n"
"> e.g. `git diff mars.txt`. We can apply a similar idea here.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Unfortunately some of these commit messages are very ambiguous e.g. "
"`update files`.\n"
"> How can you search through these files?\n"
">\n"
"> Both `git diff` and `git log` are very useful and they summarize a "
"different part of the history for you.\n"
"> Is it possible to combine both? Let's try the following:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> You should get a long list of output, and you should be able to see both "
"commit messages and the difference between each commit.\n"
">\n"
"> Question: What does the following command do?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~3 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> 履歴の探索はgitの重要な要素であり、特にそのコミットが数ヶ月前のものである場合は、 "
"> 適切なコミットIDを見つけるのが難しいことがよくあります。\n"
">\n"
"> `planets` プロジェクトに50を超えるファイルがあると考えてください。\n"
"> あなたは `mars.txt` 中の特定のテキストが変更されたコミットを見つけたい "
"とします。\n"
"> `git log` と入力すると、非常に長いリストが表示されました。\n"
"> どうやって探す範囲を限定しますか?\n"
">\n"
"> `git diff` コマンドを使用すると、1つの特定のファイルを探索できることを思い出してください、\n"
"> 例えば、 `git diff mars.txt` 。 ここでも同様のアイデアを適用できます。\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 残念ながら、これらのコミットメッセージの一部は非常にあいまいです。例えば、 "
"`update files`。\n"
"> どうやったらこれらのファイルを念入りに調べることができますか?\n"
">\n"
""
"> `git diff` と `git log` はどちらも非常に便利で、それらは "
"履歴の異なる部分を要約しています。\n"
"> 両方を組み合わせることは可能でしょうか? 以下を試してみましょう:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 出力の長いリストが表示され、 "
"コミットメッセージと各コミットの違いの両方を確認できるはずです。\n"
">\n"
"> 問い: 以下のコマンドは何を行うでしょうか?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~3 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"

# Front Matter
#: git-novice/_episodes/06-ignore.md:1
msgid ""
"---\n"
"title: Ignoring Things\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I tell Git to ignore files I don't want to track?\"\n"
"objectives:\n"
"- \"Configure Git to ignore specific files.\"\n"
"- \"Explain why ignoring files can be useful.\"\n"
"keypoints:\n"
"- \"The `.gitignore` file tells Git what files to ignore.\"\n"
"---"
msgstr ""
"---\n"
"title: Ignoring Things\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I tell Git to ignore files I don't want to track?\"\n"
"objectives:\n"
"- \"Configure Git to ignore specific files.\"\n"
"- \"Explain why ignoring files can be useful.\"\n"
"keypoints:\n"
"- \"The `.gitignore` file tells Git what files to ignore.\"\n"
"---"

#: git-novice/_episodes/06-ignore.md:14
msgid ""
"What if we have files that we do not want Git to track for us,\n"
"like backup files created by our editor\n"
"or intermediate files created during data analysis?\n"
"Let's create a few dummy files:"
msgstr ""
"What if we have files that we do not want Git to track for us,\n"
"like backup files created by our editor\n"
"or intermediate files created during data analysis?\n"
"Let's create a few dummy files:"

# code block
#: git-novice/_episodes/06-ignore.md:19
msgid ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:25
msgid "and see what Git says:"
msgstr "and see what Git says:"

# code block
#: git-novice/_episodes/06-ignore.md:32
msgid ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:45
msgid ""
"Putting these files under version control would be a waste of disk space.\n"
"What's worse,\n"
"having them all listed could distract us from changes that actually matter,\n"
"so let's tell Git to ignore them."
msgstr ""
"Putting these files under version control would be a waste of disk space.\n"
"What's worse,\n"
"having them all listed could distract us from changes that actually matter,\n"
"so let's tell Git to ignore them."

#: git-novice/_episodes/06-ignore.md:50
msgid ""
"We do this by creating a file in the root directory of our project called `."
"gitignore`:"
msgstr ""
"We do this by creating a file in the root directory of our project called `."
"gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:52
msgid ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:58
msgid ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"
msgstr ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:64
msgid ""
"These patterns tell Git to ignore any file whose name ends in `.dat`\n"
"and everything in the `results` directory.\n"
"(If any of these files were already being tracked,\n"
"Git would continue to track them.)"
msgstr ""
"These patterns tell Git to ignore any file whose name ends in `.dat`\n"
"and everything in the `results` directory.\n"
"(If any of these files were already being tracked,\n"
"Git would continue to track them.)"

#: git-novice/_episodes/06-ignore.md:69
msgid ""
"Once we have created this file,\n"
"the output of `git status` is much cleaner:"
msgstr ""
"Once we have created this file,\n"
"the output of `git status` is much cleaner:"

# code block
#: git-novice/_episodes/06-ignore.md:77
msgid ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:87
msgid ""
"The only thing Git notices now is the newly-created `.gitignore` file.\n"
"You might think we wouldn't want to track it,\n"
"but everyone we're sharing our repository with will probably want to ignore\n"
"the same things that we're ignoring.\n"
"Let's add and commit `.gitignore`:"
msgstr ""
"The only thing Git notices now is the newly-created `.gitignore` file.\n"
"You might think we wouldn't want to track it,\n"
"but everyone we're sharing our repository with will probably want to ignore\n"
"the same things that we're ignoring.\n"
"Let's add and commit `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:93
msgid ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:100
msgid ""
"~~~\n"
"# On branch master\n"
"nothing to commit, working directory clean\n"
"~~~"
msgstr ""
"~~~\n"
"# On branch master\n"
"nothing to commit, working directory clean\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:106
msgid ""
"As a bonus, using `.gitignore` helps us avoid accidentally adding to the "
"repository files that we don't want to track:"
msgstr ""
"As a bonus, using `.gitignore` helps us avoid accidentally adding to the "
"repository files that we don't want to track:"

# code block
#: git-novice/_episodes/06-ignore.md:108
msgid ""
"~~~\n"
"$ git add a.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add a.dat\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:113
msgid ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"
msgstr ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:120
msgid ""
"If we really want to override our ignore settings,\n"
"we can use `git add -f` to force Git to add something. For example,\n"
"`git add -f a.dat`.\n"
"We can also always see the status of ignored files if we want:"
msgstr ""
"If we really want to override our ignore settings,\n"
"we can use `git add -f` to force Git to add something. For example,\n"
"`git add -f a.dat`.\n"
"We can also always see the status of ignored files if we want:"

# code block
#: git-novice/_episodes/06-ignore.md:125
msgid ""
"~~~\n"
"$ git status --ignored\n"
"~~~"
msgstr ""
"~~~\n"
"$ git status --ignored\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:130
msgid ""
"~~~\n"
"On branch master\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working directory clean\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working directory clean\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:144
msgid "> ## Ignoring Nested Files"
msgstr "> ## Ignoring Nested Files"

#: git-novice/_episodes/06-ignore.md:145
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore only `results/plots` and not `results/data`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > As with most programming issues, there are a few ways that you\n"
"> > could solve this. If you only want to ignore the contents of\n"
"> > `results/plots`, you can change your `.gitignore` to ignore\n"
"> > only the `/plots/` subfolder by adding the following line to\n"
"> > your .gitignore:\n"
"> >\n"
"> > `results/plots/`\n"
"> >\n"
"> > If, instead, you want to ignore everything in `/results/`, but wanted to "
"track\n"
"> > `results/data`, then you can add `results/` to your .gitignore\n"
"> > and create an exception for the `results/data/` folder.\n"
"> > The next challenge will cover this type of solution.\n"
"> >\n"
"> > Sometimes the `**` pattern comes in handy, too, which matches\n"
"> > multiple directory levels. E.g. `**/results/plots/*` would make git "
"ignore\n"
"> > the `results/plots` directory in any root directory."
msgstr ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore only `results/plots` and not `results/data`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > As with most programming issues, there are a few ways that you\n"
"> > could solve this. If you only want to ignore the contents of\n"
"> > `results/plots`, you can change your `.gitignore` to ignore\n"
"> > only the `/plots/` subfolder by adding the following line to\n"
"> > your .gitignore:\n"
"> >\n"
"> > `results/plots/`\n"
"> >\n"
"> > If, instead, you want to ignore everything in `/results/`, but wanted to "
"track\n"
"> > `results/data`, then you can add `results/` to your .gitignore\n"
"> > and create an exception for the `results/data/` folder.\n"
"> > The next challenge will cover this type of solution.\n"
"> >\n"
"> > Sometimes the `**` pattern comes in handy, too, which matches\n"
"> > multiple directory levels. E.g. `**/results/plots/*` would make git "
"ignore\n"
"> > the `results/plots` directory in any root directory."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:177
msgid "> ## Including Specific Files"
msgstr "> ## Including Specific Files"

#: git-novice/_episodes/06-ignore.md:178
msgid ""
">\n"
"> How would you ignore all `.data` files in your root directory except for\n"
"> `final.data`?\n"
"> Hint: Find out what `!` (the exclamation point operator) does\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > You would add the following two lines to your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.data           # ignore all data files\n"
"> > !final.data      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The exclamation point operator will include a previously excluded entry."
msgstr ""
">\n"
"> How would you ignore all `.data` files in your root directory except for\n"
"> `final.data`?\n"
"> Hint: Find out what `!` (the exclamation point operator) does\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > You would add the following two lines to your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.data           # ignore all data files\n"
"> > !final.data      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The exclamation point operator will include a previously excluded entry."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:197
msgid "> ## Ignoring all data Files in a Directory"
msgstr "> ## Ignoring all data Files in a Directory"

#: git-novice/_episodes/06-ignore.md:198
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.data\n"
"> results/data/position/gps/b.data\n"
"> results/data/position/gps/c.data\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What's the shortest `.gitignore` rule you could write to ignore all `."
"data`\n"
"> files in `result/data/position/gps`? Do not ignore the `info.txt`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Appending `results/data/position/gps/*.data` will match every file in "
"`results/data/position/gps` that ends with `.data`.\n"
"> > The file `results/data/position/gps/info.txt` will not be ignored."
msgstr ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.data\n"
"> results/data/position/gps/b.data\n"
"> results/data/position/gps/c.data\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What's the shortest `.gitignore` rule you could write to ignore all `."
"data`\n"
"> files in `result/data/position/gps`? Do not ignore the `info.txt`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Appending `results/data/position/gps/*.data` will match every file in "
"`results/data/position/gps` that ends with `.data`.\n"
"> > The file `results/data/position/gps/info.txt` will not be ignored."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:220
msgid "> ## The Order of Rules"
msgstr "> ## The Order of Rules"

#: git-novice/_episodes/06-ignore.md:221
msgid ""
">\n"
"> Given a `.gitignore` file with the following contents:\n"
">\n"
"> ~~~\n"
"> *.data\n"
"> !*.data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What will be the result?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The `!` modifier will negate an entry from a previously defined ignore "
"pattern.\n"
"> > Because the `!*.data` entry negates all of the previous `.data` files in "
"the `.gitignore`,\n"
"> > none of them will be ignored, and all `.data` files will be tracked.\n"
"> >"
msgstr ""
">\n"
"> Given a `.gitignore` file with the following contents:\n"
">\n"
"> ~~~\n"
"> *.data\n"
"> !*.data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What will be the result?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The `!` modifier will negate an entry from a previously defined ignore "
"pattern.\n"
"> > Because the `!*.data` entry negates all of the previous `.data` files in "
"the `.gitignore`,\n"
"> > none of them will be ignored, and all `.data` files will be tracked.\n"
"> >"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:241
msgid "> ## Log Files"
msgstr "> ## Log Files"

#: git-novice/_episodes/06-ignore.md:242
msgid ""
">\n"
"> You wrote a script that creates many intermediate log-files of the form "
"`log_01`, `log_02`, `log_03`, etc.\n"
"> You want to keep them but you do not want to track them through `git`.\n"
">\n"
"> 1. Write **one** `.gitignore` entry that excludes files of the form "
"`log_01`, `log_02`, etc.\n"
">\n"
"> 2. Test your \"ignore pattern\" by creating some dummy files of the form "
"`log_01`, etc.\n"
">\n"
"> 3. You find that the file `log_01` is very important after all, add it to "
"the tracked files without changing the `.gitignore` again.\n"
">\n"
"> 4. Discuss with your neighbor what other types of files could reside in "
"your directory that you do not want to track and thus would exclude via `."
"gitignore`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. append either `log_*`  or  `log*`  as a new entry in your .gitignore\n"
"> > 3. track `log_01` using   `git add -f log_01`"
msgstr ""
">\n"
"> You wrote a script that creates many intermediate log-files of the form "
"`log_01`, `log_02`, `log_03`, etc.\n"
"> You want to keep them but you do not want to track them through `git`.\n"
">\n"
"> 1. Write **one** `.gitignore` entry that excludes files of the form "
"`log_01`, `log_02`, etc.\n"
">\n"
"> 2. Test your \"ignore pattern\" by creating some dummy files of the form "
"`log_01`, etc.\n"
">\n"
"> 3. You find that the file `log_01` is very important after all, add it to "
"the tracked files without changing the `.gitignore` again.\n"
">\n"
"> 4. Discuss with your neighbor what other types of files could reside in "
"your directory that you do not want to track and thus would exclude via `."
"gitignore`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. append either `log_*`  or  `log*`  as a new entry in your .gitignore\n"
"> > 3. track `log_01` using   `git add -f log_01`"

# Front Matter
#: git-novice/_episodes/07-github.md:1
msgid ""
"---\n"
"title: Remotes in GitHub\n"
"teaching: 30\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I share my changes with others on the web?\"\n"
"objectives:\n"
"- \"Explain what remote repositories are and why they are useful.\"\n"
"- \"Push to or pull from a remote repository.\"\n"
"keypoints:\n"
"- \"A local Git repository can be connected to one or more remote "
"repositories.\"\n"
"- \"Use the HTTPS protocol to connect to remote repositories until you have "
"learned how to set up SSH.\"\n"
"- \"`git push` copies changes from a local repository to a remote repository."
"\"\n"
"- \"`git pull` copies changes from a remote repository to a local repository."
"\"\n"
"---"
msgstr ""
"---\n"
"title: Remotes in GitHub\n"
"teaching: 30\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I share my changes with others on the web?\"\n"
"objectives:\n"
"- \"Explain what remote repositories are and why they are useful.\"\n"
"- \"Push to or pull from a remote repository.\"\n"
"keypoints:\n"
"- \"A local Git repository can be connected to one or more remote "
"repositories.\"\n"
"- \"Use the HTTPS protocol to connect to remote repositories until you have "
"learned how to set up SSH.\"\n"
"- \"`git push` copies changes from a local repository to a remote repository."
"\"\n"
"- \"`git pull` copies changes from a remote repository to a local repository."
"\"\n"
"---"

#: git-novice/_episodes/07-github.md:17
msgid ""
"Version control really comes into its own when we begin to collaborate with\n"
"other people.  We already have most of the machinery we need to do this; "
"the\n"
"only thing missing is to copy changes from one repository to another."
msgstr ""
"Version control really comes into its own when we begin to collaborate with\n"
"other people.  We already have most of the machinery we need to do this; "
"the\n"
"only thing missing is to copy changes from one repository to another."

#: git-novice/_episodes/07-github.md:21
msgid ""
"Systems like Git allow us to move work between any two repositories.  In\n"
"practice, though, it's easiest to use one copy as a central hub, and to keep "
"it\n"
"on the web rather than on someone's laptop.  Most programmers use hosting\n"
"services like [GitHub](https://github.com), [BitBucket](https://bitbucket."
"org) or\n"
"[GitLab](https://gitlab.com/) to hold those master copies; we'll explore the "
"pros\n"
"and cons of this in the final section of this lesson."
msgstr ""
"Systems like Git allow us to move work between any two repositories.  In\n"
"practice, though, it's easiest to use one copy as a central hub, and to keep "
"it\n"
"on the web rather than on someone's laptop.  Most programmers use hosting\n"
"services like [GitHub](https://github.com), [BitBucket](https://bitbucket."
"org) or\n"
"[GitLab](https://gitlab.com/) to hold those master copies; we'll explore the "
"pros\n"
"and cons of this in the final section of this lesson."

#: git-novice/_episodes/07-github.md:28
msgid ""
"Let's start by sharing the changes we've made to our current project with "
"the\n"
"world.  Log in to GitHub, then click on the icon in the top right corner to\n"
"create a new repository called `planets`:"
msgstr ""
"Let's start by sharing the changes we've made to our current project with "
"the\n"
"world.  Log in to GitHub, then click on the icon in the top right corner to\n"
"create a new repository called `planets`:"

#: git-novice/_episodes/07-github.md:32
msgid ""
"![Creating a Repository on GitHub (Step 1)](../fig/github-create-repo-01.png)"
msgstr ""
"![Creating a Repository on GitHub (Step 1)](../fig/github-create-repo-01.png)"

#: git-novice/_episodes/07-github.md:34
msgid "Name your repository \"planets\" and then click \"Create Repository\":"
msgstr "Name your repository \"planets\" and then click \"Create Repository\":"

#: git-novice/_episodes/07-github.md:36
msgid ""
"![Creating a Repository on GitHub (Step 2)](../fig/github-create-repo-02.png)"
msgstr ""
"![Creating a Repository on GitHub (Step 2)](../fig/github-create-repo-02.png)"

#: git-novice/_episodes/07-github.md:38
msgid ""
"As soon as the repository is created, GitHub displays a page with a URL and "
"some\n"
"information on how to configure your local repository:"
msgstr ""
"As soon as the repository is created, GitHub displays a page with a URL and "
"some\n"
"information on how to configure your local repository:"

#: git-novice/_episodes/07-github.md:41
msgid ""
"![Creating a Repository on GitHub (Step 3)](../fig/github-create-repo-03.png)"
msgstr ""
"![Creating a Repository on GitHub (Step 3)](../fig/github-create-repo-03.png)"

#: git-novice/_episodes/07-github.md:43
msgid "This effectively does the following on GitHub's servers:"
msgstr "This effectively does the following on GitHub's servers:"

# code block
#: git-novice/_episodes/07-github.md:45
msgid ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"$ git init\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"$ git init\n"
"~~~"

#: git-novice/_episodes/07-github.md:52
msgid ""
"Note that our local repository still contains our earlier work on `mars."
"txt`, but the\n"
"remote repository on GitHub appears empty as it doesn't contain any files "
"yet."
msgstr ""
"Note that our local repository still contains our earlier work on `mars."
"txt`, but the\n"
"remote repository on GitHub appears empty as it doesn't contain any files "
"yet."

#: git-novice/_episodes/07-github.md:55
msgid ""
"![Freshly-Made GitHub Repository](../fig/git-freshly-made-github-repo.svg)"
msgstr ""
"![Freshly-Made GitHub Repository](../fig/git-freshly-made-github-repo.svg)"

#: git-novice/_episodes/07-github.md:57
msgid ""
"The next step is to connect the two repositories.  We do this by making the\n"
"GitHub repository a [remote]({{ page.root }}/reference#remote) for the local "
"repository.\n"
"The home page of the repository on GitHub includes the string we need to\n"
"identify it:"
msgstr ""
"The next step is to connect the two repositories.  We do this by making the\n"
"GitHub repository a [remote]({{ page.root }}/reference#remote) for the local "
"repository.\n"
"The home page of the repository on GitHub includes the string we need to\n"
"identify it:"

#: git-novice/_episodes/07-github.md:62
msgid ""
"![Where to Find Repository URL on GitHub](../fig/github-find-repo-string.png)"
msgstr ""
"![Where to Find Repository URL on GitHub](../fig/github-find-repo-string.png)"

#: git-novice/_episodes/07-github.md:64
msgid ""
"Click on the 'HTTPS' link to change the [protocol]({{ page.root }}/"
"reference#protocol) from\n"
"SSH to HTTPS."
msgstr ""
"Click on the 'HTTPS' link to change the [protocol]({{ page.root }}/"
"reference#protocol) from\n"
"SSH to HTTPS."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:67
msgid "> ## HTTPS vs. SSH"
msgstr "> ## HTTPS vs. SSH"

#: git-novice/_episodes/07-github.md:68
msgid ""
">\n"
"> We use HTTPS here because it does not require additional configuration.  "
"After\n"
"> the workshop you may want to set up SSH access, which is a bit more "
"secure, by\n"
"> following one of the great tutorials from\n"
"> [GitHub](https://help.github.com/articles/generating-ssh-keys),\n"
"> [Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/"
"Set+up+SSH+for+Git)\n"
"> and [GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n"
"> (this one has a screencast)."
msgstr ""
">\n"
"> We use HTTPS here because it does not require additional configuration.  "
"After\n"
"> the workshop you may want to set up SSH access, which is a bit more "
"secure, by\n"
"> following one of the great tutorials from\n"
"> [GitHub](https://help.github.com/articles/generating-ssh-keys),\n"
"> [Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/"
"Set+up+SSH+for+Git)\n"
"> and [GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n"
"> (this one has a screencast)."

#: git-novice/_episodes/07-github.md:78
msgid ""
"![Changing the Repository URL on GitHub](../fig/github-change-repo-string."
"png)"
msgstr ""
"![Changing the Repository URL on GitHub](../fig/github-change-repo-string."
"png)"

#: git-novice/_episodes/07-github.md:80
msgid ""
"Copy that URL from the browser, go into the local `planets` repository, and "
"run\n"
"this command:"
msgstr ""
"Copy that URL from the browser, go into the local `planets` repository, and "
"run\n"
"this command:"

# code block
#: git-novice/_episodes/07-github.md:83
msgid ""
"~~~\n"
"$ git remote add origin https://github.com/vlad/planets.git\n"
"~~~"
msgstr ""
"~~~\n"
"$ git remote add origin https://github.com/nobita/planets.git\n"
"~~~"

#: git-novice/_episodes/07-github.md:88
msgid ""
"Make sure to use the URL for your repository rather than Vlad's: the only\n"
"difference should be your username instead of `vlad`."
msgstr ""
"Make sure to use the URL for your repository rather than のび太’s: the only\n"
"difference should be your username instead of `nobita`."

#: git-novice/_episodes/07-github.md:91
msgid "We can check that the command has worked by running `git remote -v`:"
msgstr "We can check that the command has worked by running `git remote -v`:"

# code block
#: git-novice/_episodes/07-github.md:93
msgid ""
"~~~\n"
"$ git remote -v\n"
"~~~"
msgstr ""
"~~~\n"
"$ git remote -v\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:98
msgid ""
"~~~\n"
"origin   https://github.com/vlad/planets.git (push)\n"
"origin   https://github.com/vlad/planets.git (fetch)\n"
"~~~"
msgstr ""
"~~~\n"
"origin   https://github.com/nobita/planets.git (push)\n"
"origin   https://github.com/nobita/planets.git (fetch)\n"
"~~~"

#: git-novice/_episodes/07-github.md:104
msgid ""
"The name `origin` is a local nickname for your remote repository. We could "
"use\n"
"something else if we wanted to, but `origin` is by far the most common "
"choice."
msgstr ""
"The name `origin` is a local nickname for your remote repository. We could "
"use\n"
"something else if we wanted to, but `origin` is by far the most common "
"choice."

#: git-novice/_episodes/07-github.md:107
msgid ""
"Once the nickname `origin` is set up, this command will push the changes "
"from\n"
"our local repository to the repository on GitHub:"
msgstr ""
"Once the nickname `origin` is set up, this command will push the changes "
"from\n"
"our local repository to the repository on GitHub:"

# code block
#: git-novice/_episodes/07-github.md:110 git-novice/_episodes/08-collab.md:80
#: git-novice/_episodes/09-conflict.md:68
#: git-novice/_episodes/09-conflict.md:118
#: git-novice/_episodes/09-conflict.md:241
msgid ""
"~~~\n"
"$ git push origin master\n"
"~~~"
msgstr ""
"~~~\n"
"$ git push origin master\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:115
msgid ""
"~~~\n"
"Counting objects: 9, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (9/9), 821 bytes, done.\n"
"Total 9 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets\n"
" * [new branch]      master -> master\n"
"Branch master set up to track remote branch master from origin.\n"
"~~~"
msgstr ""
"~~~\n"
"Counting objects: 9, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (9/9), 821 bytes, done.\n"
"Total 9 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/nobita/planets\n"
" * [new branch]      master -> master\n"
"Branch master set up to track remote branch master from origin.\n"
"~~~"

#: git-novice/_episodes/07-github.md:128
msgid ""
">\n"
"> If the network you are connected to uses a proxy, there is a chance that "
"your\n"
"> last command failed with \"Could not resolve hostname\" as the error "
"message. To\n"
"> solve this issue, you need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy http://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you connect to another network that doesn't use a proxy, you will "
"need to\n"
"> tell Git to disable the proxy using:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> If the network you are connected to uses a proxy, there is a chance that "
"your\n"
"> last command failed with \"Could not resolve hostname\" as the error "
"message. To\n"
"> solve this issue, you need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy http://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you connect to another network that doesn't use a proxy, you will "
"need to\n"
"> tell Git to disable the proxy using:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:149
msgid "> ## Password Managers"
msgstr "> ## Password Managers"

#: git-novice/_episodes/07-github.md:150
msgid ""
">\n"
"> If your operating system has a password manager configured, `git push` "
"will\n"
"> try to use it when it needs your username and password.  For example, "
"this\n"
"> is the default behavior for Git Bash on Windows. If you want to type your\n"
"> username and password at the terminal instead of using a password "
"manager,\n"
"> type:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> in the terminal, before you run `git push`.  Despite the name, [git uses\n"
"> `SSH_ASKPASS` for all credential\n"
"> entry](https://git-scm.com/docs/gitcredentials#_requesting_credentials), "
"so\n"
"> you may want to unset `SSH_ASKPASS` whether you are using git via SSH or\n"
"> https.\n"
">\n"
"> You may also want to add `unset SSH_ASKPASS` at the end of your `~/."
"language-bashrc`\n"
"> to make git default to using the terminal for usernames and passwords."
msgstr ""
">\n"
"> If your operating system has a password manager configured, `git push` "
"will\n"
"> try to use it when it needs your username and password.  For example, "
"this\n"
"> is the default behavior for Git Bash on Windows. If you want to type your\n"
"> username and password at the terminal instead of using a password "
"manager,\n"
"> type:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> in the terminal, before you run `git push`.  Despite the name, [git uses\n"
"> `SSH_ASKPASS` for all credential\n"
"> entry](https://git-scm.com/docs/gitcredentials#_requesting_credentials), "
"so\n"
"> you may want to unset `SSH_ASKPASS` whether you are using git via SSH or\n"
"> https.\n"
">\n"
"> You may also want to add `unset SSH_ASKPASS` at the end of your `~/."
"language-bashrc`\n"
"> to make git default to using the terminal for usernames and passwords."

#: git-novice/_episodes/07-github.md:172
msgid "Our local and remote repositories are now in this state:"
msgstr "Our local and remote repositories are now in this state:"

#: git-novice/_episodes/07-github.md:174
msgid ""
"![GitHub Repository After First Push](../fig/github-repo-after-first-push."
"svg)"
msgstr ""
"![GitHub Repository After First Push](../fig/github-repo-after-first-push."
"svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:176
msgid "> ## The '-u' Flag"
msgstr "> ## The '-u' Flag"

#: git-novice/_episodes/07-github.md:177
msgid ""
">\n"
"> You may see a `-u` option used with `git push` in some documentation.  "
"This\n"
"> option is synonymous with the `--set-upstream-to` option for the `git "
"branch`\n"
"> command, and is used to associate the current branch with a remote branch "
"so\n"
"> that the `git pull` command can be used without any arguments. To do "
"this,\n"
"> simply use `git push -u origin master` once the remote has been set up."
msgstr ""
">\n"
"> You may see a `-u` option used with `git push` in some documentation.  "
"This\n"
"> option is synonymous with the `--set-upstream-to` option for the `git "
"branch`\n"
"> command, and is used to associate the current branch with a remote branch "
"so\n"
"> that the `git pull` command can be used without any arguments. To do "
"this,\n"
"> simply use `git push -u origin master` once the remote has been set up."

#: git-novice/_episodes/07-github.md:185
msgid ""
"We can pull changes from the remote repository to the local one as well:"
msgstr ""
"We can pull changes from the remote repository to the local one as well:"

# code block
#: git-novice/_episodes/07-github.md:187 git-novice/_episodes/08-collab.md:106
#: git-novice/_episodes/09-conflict.md:143
#: git-novice/_episodes/09-conflict.md:261
msgid ""
"~~~\n"
"$ git pull origin master\n"
"~~~"
msgstr ""
"~~~\n"
"$ git pull origin master\n"
"~~~"

# code block
#: git-novice/_episodes/07-github.md:192
msgid ""
"~~~\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Already up-to-date.\n"
"~~~"
msgstr ""
"~~~\n"
"From https://github.com/nobita/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Already up-to-date.\n"
"~~~"

#: git-novice/_episodes/07-github.md:199
msgid ""
"Pulling has no effect in this case because the two repositories are already\n"
"synchronized.  If someone else had pushed some changes to the repository on\n"
"GitHub, though, this command would download them to our local repository."
msgstr ""
"Pulling has no effect in this case because the two repositories are already\n"
"synchronized.  If someone else had pushed some changes to the repository on\n"
"GitHub, though, this command would download them to our local repository."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:203
msgid "> ## GitHub GUI"
msgstr "> ## GitHub GUI"

#: git-novice/_episodes/07-github.md:204
msgid ""
">\n"
"> Browse to your `planets` repository on GitHub.\n"
"> Under the Code tab, find and click on the text that says \"XX commits"
"\" (where \"XX\" is some number).\n"
"> Hover over, and click on, the three buttons to the right of each commit.\n"
"> What information can you gather/explore from these buttons?\n"
"> How would you get that same information in the shell?\n"
">\n"
"> > ## Solution\n"
"> > The left-most button (with the picture of a clipboard) copies the full "
"identifier of the commit to the clipboard. In the shell, ```git log``` will "
"show you the full commit identifier for each commit.\n"
"> >\n"
"> > When you click on the middle button, you'll see all of the changes that "
"were made in that particular commit. Green shaded lines indicate additions "
"and red ones removals. In the shell we can do the same thing with ```git "
"diff```. In particular, ```git diff ID1..ID2``` where ID1 and ID2 are commit "
"identifiers (e.g. ```git diff a3bf1e5..041e637```) will show the differences "
"between those two commits.\n"
"> >\n"
"> > The right-most button lets you view all of the files in the repository "
"at the time of that commit. To do this in the shell, we'd need to checkout "
"the repository at that particular time. We can do this with ```git checkout "
"ID``` where ID is the identifier of the commit we want to look at. If we do "
"this, we need to remember to put the repository back to the right state "
"afterwards!"
msgstr ""
">\n"
"> Browse to your `planets` repository on GitHub.\n"
"> Under the Code tab, find and click on the text that says \"XX commits"
"\" (where \"XX\" is some number).\n"
"> Hover over, and click on, the three buttons to the right of each commit.\n"
"> What information can you gather/explore from these buttons?\n"
"> How would you get that same information in the shell?\n"
">\n"
"> > ## Solution\n"
"> > The left-most button (with the picture of a clipboard) copies the full "
"identifier of the commit to the clipboard. In the shell, ```git log``` will "
"show you the full commit identifier for each commit.\n"
"> >\n"
"> > When you click on the middle button, you'll see all of the changes that "
"were made in that particular commit. Green shaded lines indicate additions "
"and red ones removals. In the shell we can do the same thing with ```git "
"diff```. In particular, ```git diff ID1..ID2``` where ID1 and ID2 are commit "
"identifiers (e.g. ```git diff a3bf1e5..041e637```) will show the differences "
"between those two commits.\n"
"> >\n"
"> > The right-most button lets you view all of the files in the repository "
"at the time of that commit. To do this in the shell, we'd need to checkout "
"the repository at that particular time. We can do this with ```git checkout "
"ID``` where ID is the identifier of the commit we want to look at. If we do "
"this, we need to remember to put the repository back to the right state "
"afterwards!"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:220
msgid "> ## GitHub Timestamp"
msgstr "> ## GitHub Timestamp"

#: git-novice/_episodes/07-github.md:221
msgid ""
">\n"
"> Create a remote repository on GitHub.  Push the contents of your local\n"
"> repository to the remote.  Make changes to your local repository and push\n"
"> these changes.  Go to the repo you just created on GitHub and check the\n"
"> [timestamps]({{ page.root }}/reference#timestamp) of the files.  How does "
"GitHub record\n"
"> times, and why?\n"
">\n"
"> > ## Solution\n"
"> > GitHub displays timestamps in a human readable relative format (i.e. "
"\"22 hours ago\" or \"three weeks ago\"). However, if you hover over the "
"timestamp, you can see the exact time at which the last change to the file "
"occurred."
msgstr ""
">\n"
"> Create a remote repository on GitHub.  Push the contents of your local\n"
"> repository to the remote.  Make changes to your local repository and push\n"
"> these changes.  Go to the repo you just created on GitHub and check the\n"
"> [timestamps]({{ page.root }}/reference#timestamp) of the files.  How does "
"GitHub record\n"
"> times, and why?\n"
">\n"
"> > ## Solution\n"
"> > GitHub displays timestamps in a human readable relative format (i.e. "
"\"22 hours ago\" or \"three weeks ago\"). However, if you hover over the "
"timestamp, you can see the exact time at which the last change to the file "
"occurred."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:233
msgid "> ## Push vs. Commit"
msgstr "> ## Push vs. Commit"

#: git-novice/_episodes/07-github.md:234
msgid ""
">\n"
"> In this lesson, we introduced the \"git push\" command.\n"
"> How is \"git push\" different from \"git commit\"?\n"
">\n"
"> > ## Solution\n"
"> > When we push changes, we're interacting with a remote repository to "
"update it with the changes we've made locally (often this corresponds to "
"sharing the changes we've made with others). Commit only updates your local "
"repository."
msgstr ""
">\n"
"> In this lesson, we introduced the \"git push\" command.\n"
"> How is \"git push\" different from \"git commit\"?\n"
">\n"
"> > ## Solution\n"
"> > When we push changes, we're interacting with a remote repository to "
"update it with the changes we've made locally (often this corresponds to "
"sharing the changes we've made with others). Commit only updates your local "
"repository."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:243
msgid "> ## Fixing Remote Settings"
msgstr "> ## Fixing Remote Settings"

#: git-novice/_episodes/07-github.md:244
msgid ""
">\n"
"> It happens quite often in practice that you made a typo in the\n"
"> remote URL. This exercise is about how to fix this kind of issue.\n"
"> First start by adding a remote with an invalid URL:\n"
">\n"
"> ~~~\n"
"> git remote add broken https://github.com/this/url/is/invalid\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Do you get an error when adding the remote? Can you think of a\n"
"> command that would make it obvious that your remote URL was not\n"
"> valid? Can you figure out how to fix the URL (tip: use `git remote\n"
"> -h`)? Don't forget to clean up and remove this remote once you are\n"
"> done with this exercise.\n"
">\n"
"> > ## Solution\n"
"> > We don't see any error message when we add the remote (adding the remote "
"tells git about it, but doesn't try to use it yet). As soon as we try to use "
"```git push``` we'll see an error message. The command ```git remote set-"
"url``` allows us to change the remote's URL to fix it."
msgstr ""
">\n"
"> It happens quite often in practice that you made a typo in the\n"
"> remote URL. This exercise is about how to fix this kind of issue.\n"
"> First start by adding a remote with an invalid URL:\n"
">\n"
"> ~~~\n"
"> git remote add broken https://github.com/this/url/is/invalid\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Do you get an error when adding the remote? Can you think of a\n"
"> command that would make it obvious that your remote URL was not\n"
"> valid? Can you figure out how to fix the URL (tip: use `git remote\n"
"> -h`)? Don't forget to clean up and remove this remote once you are\n"
"> done with this exercise.\n"
">\n"
"> > ## Solution\n"
"> > We don't see any error message when we add the remote (adding the remote "
"tells git about it, but doesn't try to use it yet). As soon as we try to use "
"```git push``` we'll see an error message. The command ```git remote set-"
"url``` allows us to change the remote's URL to fix it."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:265
msgid "> ## GitHub License and README files"
msgstr "> ## GitHub License and README files"

#: git-novice/_episodes/07-github.md:266
msgid ""
">\n"
"> In this section we learned about creating a remote repository on GitHub, "
"but when you initialized your\n"
"> GitHub repo, you didn't add a README.md or a license file. If you had, "
"what do you think would have happened when\n"
"> you tried to link your local and remote repositories?\n"
">\n"
"> > ## Solution\n"
"> > In this case, since we already had a README file in our own (local) "
"repository, we'd see a merge conflict (when git realises that there are two "
"versions of the file and asks us to reconcile the differences)."
msgstr ""
">\n"
"> In this section we learned about creating a remote repository on GitHub, "
"but when you initialized your\n"
"> GitHub repo, you didn't add a README.md or a license file. If you had, "
"what do you think would have happened when\n"
"> you tried to link your local and remote repositories?\n"
">\n"
"> > ## Solution\n"
"> > In this case, since we already had a README file in our own (local) "
"repository, we'd see a merge conflict (when git realises that there are two "
"versions of the file and asks us to reconcile the differences)."

# Front Matter
#: git-novice/_episodes/08-collab.md:1
msgid ""
"---\n"
"title: Collaborating\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use version control to collaborate with other people?\"\n"
"objectives:\n"
"- \"Clone a remote repository.\"\n"
"- \"Collaborate pushing to a common repository.\"\n"
"- \"Describe the basic collaborative workflow.\"\n"
"keypoints:\n"
"- \"`git clone` copies a remote repository to create a local repository with "
"a remote called `origin` automatically set up.\"\n"
"---"
msgstr ""
"---\n"
"title: Collaborating\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use version control to collaborate with other people?\"\n"
"objectives:\n"
"- \"Clone a remote repository.\"\n"
"- \"Collaborate pushing to a common repository.\"\n"
"- \"Describe the basic collaborative workflow.\"\n"
"keypoints:\n"
"- \"`git clone` copies a remote repository to create a local repository with "
"a remote called `origin` automatically set up.\"\n"
"---"

#: git-novice/_episodes/08-collab.md:15
msgid ""
"For the next step, get into pairs.  One person will be the \"Owner\" and the "
"other\n"
"will be the \"Collaborator\". The goal is that the Collaborator add changes "
"into\n"
"the Owner's repository. We will switch roles at the end, so both persons "
"will\n"
"play Owner and Collaborator."
msgstr ""
"For the next step, get into pairs.  One person will be the \"Owner\" and the "
"other\n"
"will be the \"Collaborator\". The goal is that the Collaborator add changes "
"into\n"
"the Owner's repository. We will switch roles at the end, so both persons "
"will\n"
"play Owner and Collaborator."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:20
msgid "> ## Practicing By Yourself"
msgstr "> ## Practicing By Yourself"

#: git-novice/_episodes/08-collab.md:21
msgid ""
">\n"
"> If you're working through this lesson on your own, you can carry on by "
"opening\n"
"> a second terminal window.\n"
"> This window will represent your partner, working on another computer. You\n"
"> won't need to give anyone access on GitHub, because both 'partners' are "
"you."
msgstr ""
">\n"
"> If you're working through this lesson on your own, you can carry on by "
"opening\n"
"> a second terminal window.\n"
"> This window will represent your partner, working on another computer. You\n"
"> won't need to give anyone access on GitHub, because both 'partners' are "
"you."

#: git-novice/_episodes/08-collab.md:28
msgid ""
"The Owner needs to give the Collaborator access.\n"
"On GitHub, click the settings button on the right,\n"
"then select Collaborators, and enter your partner's username."
msgstr ""
"The Owner needs to give the Collaborator access.\n"
"On GitHub, click the settings button on the right,\n"
"then select Collaborators, and enter your partner's username."

#: git-novice/_episodes/08-collab.md:32
msgid "![Adding Collaborators on GitHub](../fig/github-add-collaborators.png)"
msgstr "![Adding Collaborators on GitHub](../fig/github-add-collaborators.png)"

#: git-novice/_episodes/08-collab.md:34
msgid ""
"To accept access to the Owner's repo, the Collaborator\n"
"needs to go to [https://github.com/notifications](https://github.com/"
"notifications).\n"
"Once there she can accept access to the Owner's repo."
msgstr ""
"To accept access to the Owner's repo, the Collaborator\n"
"needs to go to [https://github.com/notifications](https://github.com/"
"notifications).\n"
"Once there she can accept access to the Owner's repo."

#: git-novice/_episodes/08-collab.md:38
msgid ""
"Next, the Collaborator needs to download a copy of the Owner's repository to "
"her\n"
" machine. This is called \"cloning a repo\". To clone the Owner's repo into\n"
"her `Desktop` folder, the Collaborator enters:"
msgstr ""
"Next, the Collaborator needs to download a copy of the Owner's repository to "
"her\n"
" machine. This is called \"cloning a repo\". To clone the Owner's repo into\n"
"her `Desktop` folder, the Collaborator enters:"

# code block
#: git-novice/_episodes/08-collab.md:42
msgid ""
"~~~\n"
"$ git clone https://github.com/vlad/planets.git ~/Desktop/vlad-planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ git clone https://github.com/nobita/planets.git ~/Desktop/vlad-planets\n"
"~~~"

#: git-novice/_episodes/08-collab.md:47
msgid "Replace 'vlad' with the Owner's username."
msgstr "Replace 「nobita」 with the Owner's username."

#: git-novice/_episodes/08-collab.md:49
msgid "![After Creating Clone of Repository](../fig/github-collaboration.svg)"
msgstr "![After Creating Clone of Repository](../fig/github-collaboration.svg)"

#: git-novice/_episodes/08-collab.md:51
msgid ""
"The Collaborator can now make a change in her clone of the Owner's "
"repository,\n"
"exactly the same way as we've been doing before:"
msgstr ""
"The Collaborator can now make a change in her clone of the Owner's "
"repository,\n"
"exactly the same way as we've been doing before:"

# code block
#: git-novice/_episodes/08-collab.md:54
msgid ""
"~~~\n"
"$ cd ~/Desktop/vlad-planets\n"
"$ nano pluto.txt\n"
"$ cat pluto.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ~/Desktop/nobita-planets\n"
"$ nano pluto.txt\n"
"$ cat pluto.txt\n"
"~~~"

# code block
#: git-novice/_episodes/08-collab.md:61
msgid ""
"~~~\n"
"It is so a planet!\n"
"~~~"
msgstr ""
"~~~\n"
"It is so a planet!\n"
"~~~"

# code block
#: git-novice/_episodes/08-collab.md:66
msgid ""
"~~~\n"
"$ git add pluto.txt\n"
"$ git commit -m \"Add notes about Pluto\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add pluto.txt\n"
"$ git commit -m \"Add notes about Pluto\"\n"
"~~~"

# code block
#: git-novice/_episodes/08-collab.md:72
msgid ""
"~~~\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"
msgstr ""
"~~~\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"

#: git-novice/_episodes/08-collab.md:78
msgid "Then push the change to the *Owner's repository* on GitHub:"
msgstr "Then push the change to the *Owner's repository* on GitHub:"

# code block
#: git-novice/_episodes/08-collab.md:85
msgid ""
"~~~\n"
"Counting objects: 4, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (2/2), done.\n"
"Writing objects: 100% (3/3), 306 bytes, done.\n"
"Total 3 (delta 0), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets.git\n"
"   9272da5..29aba7c  master -> master\n"
"~~~"
msgstr ""
"~~~\n"
"Counting objects: 4, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (2/2), done.\n"
"Writing objects: 100% (3/3), 306 bytes, done.\n"
"Total 3 (delta 0), reused 0 (delta 0)\n"
"To https://github.com/nobita/planets.git\n"
"   9272da5..29aba7c  master -> master\n"
"~~~"

#: git-novice/_episodes/08-collab.md:96
msgid ""
"Note that we didn't have to create a remote called `origin`: Git uses this\n"
"name by default when we clone a repository.  (This is why `origin` was a\n"
"sensible choice earlier when we were setting up remotes by hand.)"
msgstr ""
"Note that we didn't have to create a remote called `origin`: Git uses this\n"
"name by default when we clone a repository.  (This is why `origin` was a\n"
"sensible choice earlier when we were setting up remotes by hand.)"

#: git-novice/_episodes/08-collab.md:100
msgid ""
"Take a look to the Owner's repository on its GitHub website now (maybe you "
"need\n"
"to refresh your browser.) You should be able to see the new commit made by "
"the\n"
"Collaborator."
msgstr ""
"Take a look to the Owner's repository on its GitHub website now (maybe you "
"need\n"
"to refresh your browser.) You should be able to see the new commit made by "
"the\n"
"Collaborator."

#: git-novice/_episodes/08-collab.md:104
msgid ""
"To download the Collaborator's changes from GitHub, the Owner now enters:"
msgstr ""
"To download the Collaborator's changes from GitHub, the Owner now enters:"

# code block
#: git-novice/_episodes/08-collab.md:111
msgid ""
"~~~\n"
"remote: Counting objects: 4, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 0), reused 3 (delta 0)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Updating 9272da5..29aba7c\n"
"Fast-forward\n"
" pluto.txt | 1 +\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Counting objects: 4, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 0), reused 3 (delta 0)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/nobita/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Updating 9272da5..29aba7c\n"
"Fast-forward\n"
" pluto.txt | 1 +\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"

#: git-novice/_episodes/08-collab.md:126
msgid ""
"Now the three repositories (Owner's local, Collaborator's local, and Owner's "
"on\n"
"GitHub) are back in sync."
msgstr ""
"Now the three repositories (Owner's local, Collaborator's local, and Owner's "
"on\n"
"GitHub) are back in sync."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:129
msgid "> ## A Basic Collaborative Workflow"
msgstr "> ## A Basic Collaborative Workflow"

#: git-novice/_episodes/08-collab.md:130
msgid ""
">\n"
"> In practice, it is good to be sure that you have an updated version of "
"the\n"
"> repository you are collaborating on, so you should `git pull` before "
"making\n"
"> our changes. The basic collaborative workflow would be:\n"
">\n"
"> * update your local repo with `git pull origin master`,\n"
"> * make your changes and stage them with `git add`,\n"
"> * commit your changes with `git commit -m`, and\n"
"> * upload the changes to GitHub with `git push origin master`\n"
">\n"
"> It is better to make many commits with smaller changes rather than\n"
"> of one commit with massive changes: small commits are easier to\n"
"> read and review."
msgstr ""
">\n"
"> In practice, it is good to be sure that you have an updated version of "
"the\n"
"> repository you are collaborating on, so you should `git pull` before "
"making\n"
"> our changes. The basic collaborative workflow would be:\n"
">\n"
"> * update your local repo with `git pull origin master`,\n"
"> * make your changes and stage them with `git add`,\n"
"> * commit your changes with `git commit -m`, and\n"
"> * upload the changes to GitHub with `git push origin master`\n"
">\n"
"> It is better to make many commits with smaller changes rather than\n"
"> of one commit with massive changes: small commits are easier to\n"
"> read and review."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:145
msgid "> ## Switch Roles and Repeat"
msgstr "> ## Switch Roles and Repeat"

#: git-novice/_episodes/08-collab.md:146
msgid ""
">\n"
"> Switch roles and repeat the whole process."
msgstr ""
">\n"
"> Switch roles and repeat the whole process."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:150
msgid "> ## Review Changes"
msgstr "> ## Review Changes"

#: git-novice/_episodes/08-collab.md:151
msgid ""
">\n"
"> The Owner pushed commits to the repository without giving any information\n"
"> to the Collaborator. How can the Collaborator find out what has changed "
"with\n"
"> command line? And on GitHub?\n"
">\n"
"> > ## Solution\n"
"> > On the command line, the Collaborator can use ```git fetch origin "
"master```\n"
"> > to get the remote changes into the local repository, but without "
"merging\n"
"> > them. Then by running ```git diff master origin/master``` the "
"Collaborator\n"
"> > will see the changes output in the terminal.\n"
"> >\n"
"> > On GitHub, the Collaborator can go to their own fork of the repository "
"and\n"
"> > look right above the light blue latest commit bar for a gray bar saying\n"
"> > \"This branch is 1 commit behind Our-Repository:master.\" On the far "
"right of\n"
"> > that gray bar is a Compare icon and link. On the Compare page the\n"
"> > Collaborator should change the base fork to their own repository, then "
"click\n"
"> > the link in the paragraph above to \"compare across forks\", and "
"finally\n"
"> > change the head fork to the main repository. This will show all the "
"commits\n"
"> > that are different."
msgstr ""
">\n"
"> The Owner pushed commits to the repository without giving any information\n"
"> to the Collaborator. How can the Collaborator find out what has changed "
"with\n"
"> command line? And on GitHub?\n"
">\n"
"> > ## Solution\n"
"> > On the command line, the Collaborator can use ```git fetch origin "
"master```\n"
"> > to get the remote changes into the local repository, but without "
"merging\n"
"> > them. Then by running ```git diff master origin/master``` the "
"Collaborator\n"
"> > will see the changes output in the terminal.\n"
"> >\n"
"> > On GitHub, the Collaborator can go to their own fork of the repository "
"and\n"
"> > look right above the light blue latest commit bar for a gray bar saying\n"
"> > \"This branch is 1 commit behind Our-Repository:master.\" On the far "
"right of\n"
"> > that gray bar is a Compare icon and link. On the Compare page the\n"
"> > Collaborator should change the base fork to their own repository, then "
"click\n"
"> > the link in the paragraph above to \"compare across forks\", and "
"finally\n"
"> > change the head fork to the main repository. This will show all the "
"commits\n"
"> > that are different."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:173
msgid "> ## Comment Changes in GitHub"
msgstr "> ## Comment Changes in GitHub"

#: git-novice/_episodes/08-collab.md:174
msgid ""
">\n"
"> The Collaborator has some questions about one line change made by the "
"Owner and\n"
"> has some suggestions to propose.\n"
">\n"
"> With GitHub, it is possible to comment the diff of a commit. Over the line "
"of\n"
"> code to comment, a blue comment icon appears to open a comment window.\n"
">\n"
"> The Collaborator posts its comments and suggestions using GitHub interface."
msgstr ""
">\n"
"> The Collaborator has some questions about one line change made by the "
"Owner and\n"
"> has some suggestions to propose.\n"
">\n"
"> With GitHub, it is possible to comment the diff of a commit. Over the line "
"of\n"
"> code to comment, a blue comment icon appears to open a comment window.\n"
">\n"
"> The Collaborator posts its comments and suggestions using GitHub interface."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:184
msgid "> ## Version History, Backup, and Version Control"
msgstr "> ## Version History, Backup, and Version Control"

#: git-novice/_episodes/08-collab.md:185
msgid ""
">\n"
"> Some backup software can keep a history of the versions of your files. "
"They also\n"
"> allows you to recover specific versions. How is this functionality "
"different from version control?\n"
"> What are some of the benefits of using version control, Git and GitHub?"
msgstr ""
">\n"
"> Some backup software can keep a history of the versions of your files. "
"They also\n"
"> allows you to recover specific versions. How is this functionality "
"different from version control?\n"
"> What are some of the benefits of using version control, Git and GitHub?"

# Front Matter
#: git-novice/_episodes/09-conflict.md:1
msgid ""
"---\n"
"title: Conflicts\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"What do I do when my changes conflict with someone else's?\"\n"
"objectives:\n"
"- \"Explain what conflicts are and when they can occur.\"\n"
"- \"Resolve conflicts resulting from a merge.\"\n"
"keypoints:\n"
"- \"Conflicts occur when two or more people change the same file(s) at the "
"same time.\"\n"
"- \"The version control system does not allow people to overwrite each "
"other's changes blindly, but highlights conflicts so that they can be "
"resolved.\"\n"
"---"
msgstr ""
"---\n"
"title: Conflicts\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"What do I do when my changes conflict with someone else's?\"\n"
"objectives:\n"
"- \"Explain what conflicts are and when they can occur.\"\n"
"- \"Resolve conflicts resulting from a merge.\"\n"
"keypoints:\n"
"- \"Conflicts occur when two or more people change the same file(s) at the "
"same time.\"\n"
"- \"The version control system does not allow people to overwrite each "
"other's changes blindly, but highlights conflicts so that they can be "
"resolved.\"\n"
"---"

#: git-novice/_episodes/09-conflict.md:15
msgid ""
"As soon as people can work in parallel, they'll likely step on each other's\n"
"toes.  This will even happen with a single person: if we are working on\n"
"a piece of software on both our laptop and a server in the lab, we could "
"make\n"
"different changes to each copy.  Version control helps us manage these\n"
"[conflicts]({{ page.root }}/reference#conflicts) by giving us tools to\n"
"[resolve]({{ page.root }}/reference#resolve) overlapping changes."
msgstr ""
"As soon as people can work in parallel, they'll likely step on each other's\n"
"toes.  This will even happen with a single person: if we are working on\n"
"a piece of software on both our laptop and a server in the lab, we could "
"make\n"
"different changes to each copy.  Version control helps us manage these\n"
"[conflicts]({{ page.root }}/reference#conflicts) by giving us tools to\n"
"[resolve]({{ page.root }}/reference#resolve) overlapping changes."

#: git-novice/_episodes/09-conflict.md:22
msgid ""
"To see how we can resolve conflicts, we must first create one.  The file\n"
"`mars.txt` currently looks like this in both partners' copies of our "
"`planets`\n"
"repository:"
msgstr ""
"To see how we can resolve conflicts, we must first create one.  The file\n"
"`mars.txt` currently looks like this in both partners' copies of our "
"`planets`\n"
"repository:"

#: git-novice/_episodes/09-conflict.md:38
msgid "Let's add a line to one partner's copy only:"
msgstr "Let's add a line to one partner's copy only:"

# code block
#: git-novice/_episodes/09-conflict.md:46
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to Wolfman's copy\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for ドラえもん\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to ドラえもん's copy\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:54
msgid "and then push the change to GitHub:"
msgstr "and then push the change to GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:56
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:62
msgid ""
"~~~\n"
"[master 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[master 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:73
msgid ""
"~~~\n"
"Counting objects: 5, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 352 bytes, done.\n"
"Total 3 (delta 1), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets\n"
"   29aba7c..dabb4c8  master -> master\n"
"~~~"
msgstr ""
"~~~\n"
"Counting objects: 5, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 352 bytes, done.\n"
"Total 3 (delta 1), reused 0 (delta 0)\n"
"To https://github.com/nobita/planets\n"
"   29aba7c..dabb4c8  master -> master\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:84
msgid ""
"Now let's have the other partner\n"
"make a different change to their copy\n"
"*without* updating from GitHub:"
msgstr ""
"Now let's have the other partner\n"
"make a different change to their copy\n"
"*without* updating from GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:94
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for ドラえもん\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:102
msgid "We can commit the change locally:"
msgstr "We can commit the change locally:"

# code block
#: git-novice/_episodes/09-conflict.md:104
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:110
msgid ""
"~~~\n"
"[master 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[master 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:116
msgid "but Git won't let us push it to GitHub:"
msgstr "but Git won't let us push it to GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:123
msgid ""
"~~~\n"
"To https://github.com/vlad/planets.git\n"
" ! [rejected]        master -> master (non-fast-forward)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the tip of your current branch is "
"behind\n"
"hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\n"
"hint: before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"
msgstr ""
"~~~\n"
"To https://github.com/nobita/planets.git\n"
" ! [rejected]        master -> master (non-fast-forward)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the tip of your current branch is "
"behind\n"
"hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\n"
"hint: before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:134
msgid "![The Conflicting Changes](../fig/conflict.svg)"
msgstr "![The Conflicting Changes](../fig/conflict.svg)"

#: git-novice/_episodes/09-conflict.md:136
msgid ""
"Git rejects the push because it detects that the remote repository has new "
"updates that have not been\n"
"incorporated into the local branch.\n"
"What we have to do is pull the changes from GitHub,\n"
"[merge]({{ page.root }}/reference#merge) them into the copy we're currently "
"working in,\n"
"and then push that.\n"
"Let's start by pulling:"
msgstr ""
"Git rejects the push because it detects that the remote repository has new "
"updates that have not been\n"
"incorporated into the local branch.\n"
"What we have to do is pull the changes from GitHub,\n"
"[merge]({{ page.root }}/reference#merge) them into the copy we're currently "
"working in,\n"
"and then push that.\n"
"Let's start by pulling:"

# code block
#: git-novice/_episodes/09-conflict.md:148
msgid ""
"~~~\n"
"remote: Counting objects: 5, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 1), reused 3 (delta 1)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Counting objects: 5, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 1), reused 3 (delta 1)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/nobita/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:161
msgid ""
"The `git pull` detects a conflict.\n"
"The conflict is marked in the affected file:"
msgstr ""
"The `git pull` detects a conflict.\n"
"The conflict is marked in the affected file:"

# code block
#: git-novice/_episodes/09-conflict.md:169
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to Wolfman's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for ドラえもん\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to ドラえもん's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:181
msgid ""
"Our change is preceded by `<<<<<<< HEAD`.\n"
"Git has then inserted `=======` as a separator between the conflicting "
"changes\n"
"and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n"
"(The string of letters and digits after that marker\n"
"identifies the commit we've just downloaded.)"
msgstr ""
"Our change is preceded by `<<<<<<< HEAD`.\n"
"Git has then inserted `=======` as a separator between the conflicting "
"changes\n"
"and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n"
"(The string of letters and digits after that marker\n"
"identifies the commit we've just downloaded.)"

#: git-novice/_episodes/09-conflict.md:187
msgid ""
"It is now up to us to edit this file to remove these markers\n"
"and reconcile the changes.\n"
"We can do anything we want: keep the change made in the local repository, "
"keep\n"
"the change made in the remote repository, write something new to replace "
"both,\n"
"or get rid of the change entirely.\n"
"Let's replace both so that the file looks like this:"
msgstr ""
"It is now up to us to edit this file to remove these markers\n"
"and reconcile the changes.\n"
"We can do anything we want: keep the change made in the local repository, "
"keep\n"
"the change made in the remote repository, write something new to replace "
"both,\n"
"or get rid of the change entirely.\n"
"Let's replace both so that the file looks like this:"

# code block
#: git-novice/_episodes/09-conflict.md:199
#: git-novice/_episodes/09-conflict.md:287
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for ドラえもん\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:207
msgid ""
"To finish merging,\n"
"we add `mars.txt` to the changes being made by the merge\n"
"and then commit:"
msgstr ""
"To finish merging,\n"
"we add `mars.txt` to the changes being made by the merge\n"
"and then commit:"

# code block
#: git-novice/_episodes/09-conflict.md:211
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:217
msgid ""
"~~~\n"
"On branch master\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:229
msgid ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:234
msgid ""
"~~~\n"
"[master 2abf2b1] Merge changes from GitHub\n"
"~~~"
msgstr ""
"~~~\n"
"[master 2abf2b1] Merge changes from GitHub\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:239
msgid "Now we can push our changes to GitHub:"
msgstr "Now we can push our changes to GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:246
msgid ""
"~~~\n"
"Counting objects: 10, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 697 bytes, done.\n"
"Total 6 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets.git\n"
"   dabb4c8..2abf2b1  master -> master\n"
"~~~"
msgstr ""
"~~~\n"
"Counting objects: 10, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 697 bytes, done.\n"
"Total 6 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/nobita/planets.git\n"
"   dabb4c8..2abf2b1  master -> master\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:257
msgid ""
"Git keeps track of what we've merged with what,\n"
"so we don't have to fix things by hand again\n"
"when the collaborator who made the first change pulls again:"
msgstr ""
"Git keeps track of what we've merged with what,\n"
"so we don't have to fix things by hand again\n"
"when the collaborator who made the first change pulls again:"

# code block
#: git-novice/_episodes/09-conflict.md:266
msgid ""
"~~~\n"
"remote: Counting objects: 10, done.\n"
"remote: Compressing objects: 100% (4/4), done.\n"
"remote: Total 6 (delta 2), reused 6 (delta 2)\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Counting objects: 10, done.\n"
"remote: Compressing objects: 100% (4/4), done.\n"
"remote: Total 6 (delta 2), reused 6 (delta 2)\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/nobita/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:280
msgid "We get the merged file:"
msgstr "We get the merged file:"

#: git-novice/_episodes/09-conflict.md:295
msgid ""
"We don't need to merge again because Git knows someone has already done that."
msgstr ""
"We don't need to merge again because Git knows someone has already done that."

#: git-novice/_episodes/09-conflict.md:297
msgid ""
"Git's ability to resolve conflicts is very useful, but conflict resolution\n"
"costs time and effort, and can introduce errors if conflicts are not "
"resolved\n"
"correctly. If you find yourself resolving a lot of conflicts in a project,\n"
"consider these technical approaches to reducing them:"
msgstr ""
"Git's ability to resolve conflicts is very useful, but conflict resolution\n"
"costs time and effort, and can introduce errors if conflicts are not "
"resolved\n"
"correctly. If you find yourself resolving a lot of conflicts in a project,\n"
"consider these technical approaches to reducing them:"

# unordered list
#: git-novice/_episodes/09-conflict.md:302
msgid ""
"- Pull from upstream more frequently, especially before starting new work"
msgstr ""
"- Pull from upstream more frequently, especially before starting new work"

# unordered list
#: git-novice/_episodes/09-conflict.md:303
msgid "- Use topic branches to segregate work, merging to master when complete"
msgstr ""
"- Use topic branches to segregate work, merging to master when complete"

# unordered list
#: git-novice/_episodes/09-conflict.md:304
msgid "- Make smaller more atomic commits"
msgstr "- Make smaller more atomic commits"

# unordered list
#: git-novice/_episodes/09-conflict.md:305
msgid ""
"- Where logically appropriate, break large files into smaller ones so that "
"it is"
msgstr ""
"- Where logically appropriate, break large files into smaller ones so that "
"it is"

#: git-novice/_episodes/09-conflict.md:306
msgid "  less likely that two authors will alter the same file simultaneously"
msgstr "  less likely that two authors will alter the same file simultaneously"

#: git-novice/_episodes/09-conflict.md:308
msgid "Conflicts can also be minimized with project management strategies:"
msgstr "Conflicts can also be minimized with project management strategies:"

# unordered list
#: git-novice/_episodes/09-conflict.md:310
msgid "- Clarify who is responsible for what areas with your collaborators"
msgstr "- Clarify who is responsible for what areas with your collaborators"

# unordered list
#: git-novice/_episodes/09-conflict.md:311
msgid ""
"- Discuss what order tasks should be carried out in with your collaborators "
"so"
msgstr ""
"- Discuss what order tasks should be carried out in with your collaborators "
"so"

#: git-novice/_episodes/09-conflict.md:312
msgid ""
"  that tasks expected to change the same lines won't be worked on "
"simultaneously\n"
"- If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a\n"
"  project convention that is governing and use code style tools (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) to enforce, if necessary"
msgstr ""
"  that tasks expected to change the same lines won't be worked on "
"simultaneously\n"
"- If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a\n"
"  project convention that is governing and use code style tools (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) to enforce, if necessary"

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:317
msgid "> ## Solving Conflicts that You Create"
msgstr "> ## Solving Conflicts that You Create"

#: git-novice/_episodes/09-conflict.md:318
msgid ""
">\n"
"> Clone the repository created by your instructor.\n"
"> Add a new file to it,\n"
"> and modify an existing file (your instructor will tell you which one).\n"
"> When asked by your instructor,\n"
"> pull her changes from the repository to create a conflict,\n"
"> then resolve it."
msgstr ""
">\n"
"> Clone the repository created by your instructor.\n"
"> Add a new file to it,\n"
"> and modify an existing file (your instructor will tell you which one).\n"
"> When asked by your instructor,\n"
"> pull her changes from the repository to create a conflict,\n"
"> then resolve it."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:327
msgid "> ## Conflicts on Non-textual files"
msgstr "> ## Conflicts on Non-textual files"

#: git-novice/_episodes/09-conflict.md:328
msgid ""
">\n"
"> What does Git do\n"
"> when there is a conflict in an image or some other non-textual file\n"
"> that is stored in version control?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Let's try it. Suppose Dracula takes a picture of Martian surface and\n"
"> > calls it `mars.jpg`.\n"
"> >\n"
"> > If you do not have an image file of Mars available, you can create\n"
"> > a dummy binary file like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ head --bytes 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` shows us that this created a 1-kilobyte file. It is full of\n"
"> > random bytes read from the special file, `/dev/urandom`.\n"
"> >\n"
"> > Now, suppose Dracula adds `mars.jpg` to his repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Suppose that Wolfman has added a similar picture in the meantime.\n"
"> > His is a picture of the Martian sky, but it is *also* called `mars."
"jpg`.\n"
"> > When Dracula tries to push, he gets a familiar message:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        master -> master (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets."
"git'\n"
"> > hint: Updates were rejected because the remote contains work that you "
"do\n"
"> > hint: not have locally. This is usually caused by another repository "
"pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote "
"changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for "
"details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We've learned that we must pull first and resolve any conflicts:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > When there is a conflict on an image or other binary file, git prints\n"
"> > a message like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            master     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  master     -> origin/master\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The conflict message here is mostly the same as it was for `mars.txt`, "
"but\n"
"> > there is one key additional line:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git cannot automatically insert conflict markers into an image as it "
"does\n"
"> > for text files. So, instead of editing the image file, we must check "
"out\n"
"> > the version we want to keep. Then we can add and commit this version.\n"
"> >\n"
"> > On the key line above, Git has conveniently given us commit identifiers\n"
"> > for the two versions of `mars.jpg`. Our version is `HEAD`, and "
"Wolfman's\n"
"> > version is `439dc8c0...`. If we want to use our version, we can use\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > If instead we want to use Wolfman's version, we can use `git checkout` "
"with\n"
"> > Wolfman's commit identifier, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can also keep *both* images. The catch is that we cannot keep them\n"
"> > under the same name. But, we can check out each version in succession\n"
"> > and *rename* it, then add the renamed versions. First, check out each\n"
"> > image and rename it:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Then, remove the old `mars.jpg` and add the two new files:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Now both images of Mars are checked into the repository, and `mars.jpg`\n"
"> > no longer exists."
msgstr ""
">\n"
"> What does Git do\n"
"> when there is a conflict in an image or some other non-textual file\n"
"> that is stored in version control?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Let's try it. Suppose のび太 takes a picture of Martian surface and\n"
"> > calls it `mars.jpg`.\n"
"> >\n"
"> > If you do not have an image file of Mars available, you can create\n"
"> > a dummy binary file like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ head --bytes 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 nobita 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` shows us that this created a 1-kilobyte file. It is full of\n"
"> > random bytes read from the special file, `/dev/urandom`.\n"
"> >\n"
"> > Now, suppose のび太 adds `mars.jpg` to his repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Suppose that ドラえもん has added a similar picture in the meantime.\n"
"> > His is a picture of the Martian sky, but it is *also* called `mars."
"jpg`.\n"
"> > When のび太 tries to push, he gets a familiar message:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        master -> master (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets."
"git'\n"
"> > hint: Updates were rejected because the remote contains work that you "
"do\n"
"> > hint: not have locally. This is usually caused by another repository "
"pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote "
"changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for "
"details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We've learned that we must pull first and resolve any conflicts:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > When there is a conflict on an image or other binary file, git prints\n"
"> > a message like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            master     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  master     -> origin/master\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The conflict message here is mostly the same as it was for `mars.txt`, "
"but\n"
"> > there is one key additional line:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git cannot automatically insert conflict markers into an image as it "
"does\n"
"> > for text files. So, instead of editing the image file, we must check "
"out\n"
"> > the version we want to keep. Then we can add and commit this version.\n"
"> >\n"
"> > On the key line above, Git has conveniently given us commit identifiers\n"
"> > for the two versions of `mars.jpg`. Our version is `HEAD`, and ドラえも"
"ん's\n"
"> > version is `439dc8c0...`. If we want to use our version, we can use\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > If instead we want to use ドラえもん's version, we can use `git "
"checkout` with\n"
"> > ドラえもん's commit identifier, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can also keep *both* images. The catch is that we cannot keep them\n"
"> > under the same name. But, we can check out each version in succession\n"
"> > and *rename* it, then add the renamed versions. First, check out each\n"
"> > image and rename it:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Then, remove the old `mars.jpg` and add the two new files:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Now both images of Mars are checked into the repository, and `mars.jpg`\n"
"> > no longer exists."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:497
msgid "> ## A Typical Work Session"
msgstr "> ## A Typical Work Session"

#: git-novice/_episodes/09-conflict.md:498
msgid ""
">\n"
"> You sit down at your computer to work on a shared project that is tracked "
"in a\n"
"> remote Git repository. During your work session, you take the following\n"
"> actions, but not in this order:\n"
">\n"
"> - *Make changes* by appending the number `100` to a text file `numbers."
"txt`\n"
"> - *Update remote* repository to match the local repository\n"
"> - *Celebrate* your success with beer(s)\n"
"> - *Update local* repository to match the remote repository\n"
"> - *Stage changes* to be committed\n"
"> - *Commit changes* to the local repository\n"
">\n"
"> In what order should you perform these actions to minimize the chances of\n"
"> conflicts? Put the commands above in order in the *action* column of the "
"table\n"
"> below. When you have the order right, see if you can write the "
"corresponding\n"
"> commands in the *command* column. A few steps are populated to get you\n"
"> started.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . "
"|\n"
"> > "
"|-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin master`                     "
"|\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    "
"|\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        "
"|\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt"
"\"`     |\n"
"> > |5    | Update remote     | `git push origin master`                     "
"|\n"
"> > |6    | Celebrate!        | `AFK`                                        "
"|\n"
"> >"
msgstr ""
">\n"
"> You sit down at your computer to work on a shared project that is tracked "
"in a\n"
"> remote Git repository. During your work session, you take the following\n"
"> actions, but not in this order:\n"
">\n"
"> - *Make changes* by appending the number `100` to a text file `numbers."
"txt`\n"
"> - *Update remote* repository to match the local repository\n"
"> - *Celebrate* your success with beer(s)\n"
"> - *Update local* repository to match the remote repository\n"
"> - *Stage changes* to be committed\n"
"> - *Commit changes* to the local repository\n"
">\n"
"> In what order should you perform these actions to minimize the chances of\n"
"> conflicts? Put the commands above in order in the *action* column of the "
"table\n"
"> below. When you have the order right, see if you can write the "
"corresponding\n"
"> commands in the *command* column. A few steps are populated to get you\n"
"> started.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . "
"|\n"
"> > "
"|-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin master`                     "
"|\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    "
"|\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        "
"|\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt"
"\"`     |\n"
"> > |5    | Update remote     | `git push origin master`                     "
"|\n"
"> > |6    | Celebrate!        | `AFK`                                        "
"|\n"
"> >"

# Front Matter
#: git-novice/_episodes/10-open.md:1
msgid ""
"---\n"
"title: Open Science\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"How can version control help me make my work more open?\"\n"
"objectives:\n"
"- \"Explain how a version control system can be leveraged as an electronic "
"lab notebook for computational work.\"\n"
"keypoints:\n"
"- \"Open scientific work is more useful and more highly cited than closed."
"\"\n"
"---"
msgstr ""
"---\n"
"title: Open Science\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"How can version control help me make my work more open?\"\n"
"objectives:\n"
"- \"Explain how a version control system can be leveraged as an electronic "
"lab notebook for computational work.\"\n"
"keypoints:\n"
"- \"Open scientific work is more useful and more highly cited than closed."
"\"\n"
"---"

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:13
msgid "> The opposite of \"open\" isn't \"closed\"."
msgstr "> The opposite of \"open\" isn't \"closed\"."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:14
msgid "> The opposite of \"open\" is \"broken\"."
msgstr "> The opposite of \"open\" is \"broken\"."

#: git-novice/_episodes/10-open.md:15
msgid ""
">\n"
"> --- John Wilbanks"
msgstr ""
">\n"
"> --- John Wilbanks"

# SC/DC Template label
#: git-novice/_episodes/10-open.md:17
msgid "{: .quotation}"
msgstr "{: .quotation}"

#: git-novice/_episodes/10-open.md:19
msgid ""
"Free sharing of information might be the ideal in science,\n"
"but the reality is often more complicated.\n"
"Normal practice today looks something like this:"
msgstr ""
"Free sharing of information might be the ideal in science,\n"
"but the reality is often more complicated.\n"
"Normal practice today looks something like this:"

# unordered list
#: git-novice/_episodes/10-open.md:23
msgid "*   A scientist collects some data and stores it on a machine"
msgstr "*   A scientist collects some data and stores it on a machine"

#: git-novice/_episodes/10-open.md:24
msgid ""
"    that is occasionally backed up by her department.\n"
"*   She then writes or modifies a few small programs\n"
"    (which also reside on her machine)\n"
"    to analyze that data.\n"
"*   Once she has some results,\n"
"    she writes them up and submits her paper.\n"
"    She might include her data—a growing number of journals require this—"
"but\n"
"    she probably doesn't include her code.\n"
"*   Time passes.\n"
"*   The journal sends her reviews written anonymously by a handful of other "
"people in her field.\n"
"    She revises her paper to satisfy them,\n"
"    during which time she might also modify the scripts she wrote earlier,\n"
"    and resubmits.\n"
"*   More time passes.\n"
"*   The paper is eventually published.\n"
"    It might include a link to an online copy of her data,\n"
"    but the paper itself will be behind a paywall:\n"
"    only people who have personal or institutional access\n"
"    will be able to read it."
msgstr ""
"    that is occasionally backed up by her department.\n"
"*   She then writes or modifies a few small programs\n"
"    (which also reside on her machine)\n"
"    to analyze that data.\n"
"*   Once she has some results,\n"
"    she writes them up and submits her paper.\n"
"    She might include her data—a growing number of journals require this—"
"but\n"
"    she probably doesn't include her code.\n"
"*   Time passes.\n"
"*   The journal sends her reviews written anonymously by a handful of other "
"people in her field.\n"
"    She revises her paper to satisfy them,\n"
"    during which time she might also modify the scripts she wrote earlier,\n"
"    and resubmits.\n"
"*   More time passes.\n"
"*   The paper is eventually published.\n"
"    It might include a link to an online copy of her data,\n"
"    but the paper itself will be behind a paywall:\n"
"    only people who have personal or institutional access\n"
"    will be able to read it."

#: git-novice/_episodes/10-open.md:44
msgid ""
"For a growing number of scientists,\n"
"though,\n"
"the process looks like this:"
msgstr ""
"For a growing number of scientists,\n"
"though,\n"
"the process looks like this:"

# unordered list
#: git-novice/_episodes/10-open.md:48
msgid ""
"*   The data that the scientist collects is stored in an open access "
"repository"
msgstr ""
"*   The data that the scientist collects is stored in an open access "
"repository"

#: git-novice/_episodes/10-open.md:49
msgid ""
"    like [figshare](https://figshare.com/) or\n"
"    [Zenodo](https://zenodo.org), possibly as soon as it's collected,\n"
"    and given its own\n"
"    [Digital Object Identifier](https://en.wikipedia.org/wiki/"
"Digital_object_identifier) (DOI).\n"
"    Or the data was already published and is stored in\n"
"    [Dryad](https://datadryad.org/).\n"
"*   The scientist creates a new repository on GitHub to hold her work.\n"
"*   As she does her analysis,\n"
"    she pushes changes to her scripts\n"
"    (and possibly some output files)\n"
"    to that repository.\n"
"    She also uses the repository for her paper;\n"
"    that repository is then the hub for collaboration with her colleagues.\n"
"*   When she's happy with the state of her paper,\n"
"    she posts a version to [arXiv](https://arxiv.org/)\n"
"    or some other preprint server\n"
"    to invite feedback from peers.\n"
"*   Based on that feedback,\n"
"    she may post several revisions\n"
"    before finally submitting her paper to a journal.\n"
"*   The published paper includes links to her preprint\n"
"    and to her code and data repositories,\n"
"    which  makes it much easier for other scientists\n"
"    to use her work as starting point for their own research."
msgstr ""
"    like [figshare](https://figshare.com/) or\n"
"    [Zenodo](https://zenodo.org), possibly as soon as it's collected,\n"
"    and given its own\n"
"    [Digital Object Identifier](https://en.wikipedia.org/wiki/"
"Digital_object_identifier) (DOI).\n"
"    Or the data was already published and is stored in\n"
"    [Dryad](https://datadryad.org/).\n"
"*   The scientist creates a new repository on GitHub to hold her work.\n"
"*   As she does her analysis,\n"
"    she pushes changes to her scripts\n"
"    (and possibly some output files)\n"
"    to that repository.\n"
"    She also uses the repository for her paper;\n"
"    that repository is then the hub for collaboration with her colleagues.\n"
"*   When she's happy with the state of her paper,\n"
"    she posts a version to [arXiv](https://arxiv.org/)\n"
"    or some other preprint server\n"
"    to invite feedback from peers.\n"
"*   Based on that feedback,\n"
"    she may post several revisions\n"
"    before finally submitting her paper to a journal.\n"
"*   The published paper includes links to her preprint\n"
"    and to her code and data repositories,\n"
"    which  makes it much easier for other scientists\n"
"    to use her work as starting point for their own research."

#: git-novice/_episodes/10-open.md:74
msgid ""
"This open model accelerates discovery:\n"
"the more open work is,\n"
"[the more widely it is cited and re-used](https://doi.org/10.1371/journal."
"pone.0000308).\n"
"However,\n"
"people who want to work this way need to make some decisions\n"
"about what exactly \"open\" means and how to do it. You can find more on the "
"different aspects of Open Science in [this book](https://link.springer.com/"
"book/10.1007/978-3-319-00026-8)."
msgstr ""
"This open model accelerates discovery:\n"
"the more open work is,\n"
"[the more widely it is cited and re-used](https://doi.org/10.1371/journal."
"pone.0000308).\n"
"However,\n"
"people who want to work this way need to make some decisions\n"
"about what exactly \"open\" means and how to do it. You can find more on the "
"different aspects of Open Science in [this book](https://link.springer.com/"
"book/10.1007/978-3-319-00026-8)."

#: git-novice/_episodes/10-open.md:81
msgid ""
"This is one of the (many) reasons we teach version control.\n"
"When used diligently,\n"
"it answers the \"how\" question\n"
"by acting as a shareable electronic lab notebook for computational work:"
msgstr ""
"This is one of the (many) reasons we teach version control.\n"
"When used diligently,\n"
"it answers the \"how\" question\n"
"by acting as a shareable electronic lab notebook for computational work:"

# unordered list
#: git-novice/_episodes/10-open.md:86
msgid ""
"*   The conceptual stages of your work are documented, including who did"
msgstr ""
"*   The conceptual stages of your work are documented, including who did"

#: git-novice/_episodes/10-open.md:87
msgid ""
"    what and when. Every step is stamped with an identifier (the commit ID)\n"
"    that is for most intents and purposes unique.\n"
"*   You can tie documentation of rationale, ideas, and other\n"
"    intellectual work directly to the changes that spring from them.\n"
"*   You can refer to what you used in your research to obtain your\n"
"    computational results in a way that is unique and recoverable.\n"
"*   With a version control system such as Git, \n"
"    the entire history of the repository is easy to archive for perpetuity."
msgstr ""
"    what and when. Every step is stamped with an identifier (the commit ID)\n"
"    that is for most intents and purposes unique.\n"
"*   You can tie documentation of rationale, ideas, and other\n"
"    intellectual work directly to the changes that spring from them.\n"
"*   You can refer to what you used in your research to obtain your\n"
"    computational results in a way that is unique and recoverable.\n"
"*   With a version control system such as Git, \n"
"    the entire history of the repository is easy to archive for perpetuity."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:96
msgid "> ## Making Code Citable"
msgstr "> ## Making Code Citable"

#: git-novice/_episodes/10-open.md:97
msgid ""
">\n"
"> Anything that is hosted in a version control repository (data, code, "
"papers, \n"
"> etc.) can be turned into a citable object. You'll learn how to do this in\n"
"> [lesson 12: Citation]({{ page.root }}/12-citation/)."
msgstr ""
">\n"
"> Anything that is hosted in a version control repository (data, code, "
"papers, \n"
"> etc.) can be turned into a citable object. You'll learn how to do this in\n"
"> [lesson 12: Citation]({{ page.root }}/12-citation/)."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:103
msgid "> ## How Reproducible Is My Work?"
msgstr "> ## How Reproducible Is My Work?"

#: git-novice/_episodes/10-open.md:104
msgid ""
">\n"
"> Ask one of your labmates to reproduce a result you recently obtained\n"
"> using only what they can find in your papers or on the web.\n"
"> Try to do the same for one of their results,\n"
"> then try to do it for a result from a lab you work with."
msgstr ""
">\n"
"> Ask one of your labmates to reproduce a result you recently obtained\n"
"> using only what they can find in your papers or on the web.\n"
"> Try to do the same for one of their results,\n"
"> then try to do it for a result from a lab you work with."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:111
msgid "> ## How to Find an Appropriate Data Repository?"
msgstr "> ## How to Find an Appropriate Data Repository?"

#: git-novice/_episodes/10-open.md:112
msgid ""
">\n"
"> Surf the internet for a couple of minutes and check out the data "
"repositories\n"
"> mentioned above: [Figshare](https://figshare.com/), [Zenodo](https://"
"zenodo.org),\n"
"> [Dryad](https://datadryad.org/). Depending on your field of research, you "
"might\n"
"> find community-recognized repositories that are well-known in your field.\n"
"> You might also find useful [these data repositories recommended by Nature]"
"(\n"
"> https://www.nature.com/sdata/data-policies/repositories).\n"
"> Discuss with your neighbor which data repository you might want to\n"
"> approach for your current project and explain why."
msgstr ""
">\n"
"> Surf the internet for a couple of minutes and check out the data "
"repositories\n"
"> mentioned above: [Figshare](https://figshare.com/), [Zenodo](https://"
"zenodo.org),\n"
"> [Dryad](https://datadryad.org/). Depending on your field of research, you "
"might\n"
"> find community-recognized repositories that are well-known in your field.\n"
"> You might also find useful [these data repositories recommended by Nature]"
"(\n"
"> https://www.nature.com/sdata/data-policies/repositories).\n"
"> Discuss with your neighbor which data repository you might want to\n"
"> approach for your current project and explain why."

# Front Matter
#: git-novice/_episodes/11-licensing.md:1
msgid ""
"---\n"
"title: Licensing\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What licensing information should I include with my work?\"\n"
"objectives:\n"
"- \"Explain why adding licensing information to a repository is important."
"\"\n"
"- \"Choose a proper license.\"\n"
"- \"Explain differences in licensing and social expectations.\"\n"
"keypoints:\n"
"- \"People who incorporate General Public License (GPL'd) software into "
"their own software must make their software also open under the GPL license; "
"most other open licenses do not require this.\"\n"
"- \"The Creative Commons family of licenses allow people to mix and match "
"requirements and restrictions on attribution, creation of derivative works, "
"further sharing, and commercialization.\"\n"
"- \"People who are not lawyers should not try to write licenses from scratch."
"\"\n"
"---"
msgstr ""
"---\n"
"title: Licensing\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What licensing information should I include with my work?\"\n"
"objectives:\n"
"- \"Explain why adding licensing information to a repository is important."
"\"\n"
"- \"Choose a proper license.\"\n"
"- \"Explain differences in licensing and social expectations.\"\n"
"keypoints:\n"
"- \"People who incorporate General Public License (GPL'd) software into "
"their own software must make their software also open under the GPL license; "
"most other open licenses do not require this.\"\n"
"- \"The Creative Commons family of licenses allow people to mix and match "
"requirements and restrictions on attribution, creation of derivative works, "
"further sharing, and commercialization.\"\n"
"- \"People who are not lawyers should not try to write licenses from scratch."
"\"\n"
"---"

#: git-novice/_episodes/11-licensing.md:17
msgid ""
"When a repository with source code, a manuscript or other creative\n"
"works becomes public, it should include a file `LICENSE` or\n"
"`LICENSE.txt` in the base directory of the repository that clearly\n"
"states under which license the content is being made available. This\n"
"is because creative works are automatically eligible for intellectual\n"
"property (and thus copyright) protection. Reusing creative works\n"
"without a license is dangerous, because the copyright holders could\n"
"sue you for copyright infringement."
msgstr ""
"When a repository with source code, a manuscript or other creative\n"
"works becomes public, it should include a file `LICENSE` or\n"
"`LICENSE.txt` in the base directory of the repository that clearly\n"
"states under which license the content is being made available. This\n"
"is because creative works are automatically eligible for intellectual\n"
"property (and thus copyright) protection. Reusing creative works\n"
"without a license is dangerous, because the copyright holders could\n"
"sue you for copyright infringement."

#: git-novice/_episodes/11-licensing.md:26
msgid ""
"A license solves this problem by granting rights to others (the\n"
"licensees) that they would otherwise not have. What rights are being\n"
"granted under which conditions differs, often only slightly, from one\n"
"license to another. In practice, a few licenses are by far the most\n"
"popular, and [choosealicense.com](https://choosealicense.com/) will\n"
"help you find a common license that suits your needs.  Important\n"
"considerations include:"
msgstr ""
"A license solves this problem by granting rights to others (the\n"
"licensees) that they would otherwise not have. What rights are being\n"
"granted under which conditions differs, often only slightly, from one\n"
"license to another. In practice, a few licenses are by far the most\n"
"popular, and [choosealicense.com](https://choosealicense.com/) will\n"
"help you find a common license that suits your needs.  Important\n"
"considerations include:"

# unordered list
#: git-novice/_episodes/11-licensing.md:34
msgid "* Whether you want to address patent rights."
msgstr "* Whether you want to address patent rights."

# unordered list
#: git-novice/_episodes/11-licensing.md:35
msgid "* Whether you require people distributing derivative works to also"
msgstr "* Whether you require people distributing derivative works to also"

#: git-novice/_episodes/11-licensing.md:36
msgid ""
"  distribute their source code.\n"
"* Whether the content you are licensing is source code.\n"
"* Whether you want to license the code at all."
msgstr ""
"  distribute their source code.\n"
"* Whether the content you are licensing is source code.\n"
"* Whether you want to license the code at all."

#: git-novice/_episodes/11-licensing.md:40
msgid ""
"Choosing a license that is in common use makes life easier for\n"
"contributors and users, because they are more likely to already be\n"
"familiar with the license and don't have to wade through a bunch of\n"
"jargon to decide if they're ok with it.  The [Open Source\n"
"Initiative](https://opensource.org/licenses) and [Free Software\n"
"Foundation](https://www.gnu.org/licenses/license-list.html) both\n"
"maintain lists of licenses which are good choices."
msgstr ""
"Choosing a license that is in common use makes life easier for\n"
"contributors and users, because they are more likely to already be\n"
"familiar with the license and don't have to wade through a bunch of\n"
"jargon to decide if they're ok with it.  The [Open Source\n"
"Initiative](https://opensource.org/licenses) and [Free Software\n"
"Foundation](https://www.gnu.org/licenses/license-list.html) both\n"
"maintain lists of licenses which are good choices."

#: git-novice/_episodes/11-licensing.md:48
msgid ""
"[This article](https://doi.org/10.1371/journal.pcbi.1002598) provides an "
"excellent overview of\n"
"licensing and licensing options from the perspective of scientists who\n"
"also write code."
msgstr ""
"[This article](https://doi.org/10.1371/journal.pcbi.1002598) provides an "
"excellent overview of\n"
"licensing and licensing options from the perspective of scientists who\n"
"also write code."

#: git-novice/_episodes/11-licensing.md:52
msgid ""
"At the end of the day what matters is that there is a clear statement\n"
"as to what the license is. Also, the license is best chosen from the\n"
"get-go, even if for a repository that is not public. Pushing off the\n"
"decision only makes it more complicated later, because each time a new\n"
"collaborator starts contributing, they, too, hold copyright and will\n"
"thus need to be asked for approval once a license is chosen."
msgstr ""
"At the end of the day what matters is that there is a clear statement\n"
"as to what the license is. Also, the license is best chosen from the\n"
"get-go, even if for a repository that is not public. Pushing off the\n"
"decision only makes it more complicated later, because each time a new\n"
"collaborator starts contributing, they, too, hold copyright and will\n"
"thus need to be asked for approval once a license is chosen."

# blockquote, which can be cascaded
#: git-novice/_episodes/11-licensing.md:59
msgid "> ## Can I Use Open License?"
msgstr "> ## Can I Use Open License?"

#: git-novice/_episodes/11-licensing.md:60
msgid ""
">\n"
"> Find out whether you are allowed to apply an open license to your "
"software.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"
msgstr ""
">\n"
"> Find out whether you are allowed to apply an open license to your "
"software.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"

# blockquote, which can be cascaded
#: git-novice/_episodes/11-licensing.md:67
msgid "> ## What licenses have I already accepted?"
msgstr "> ## What licenses have I already accepted?"

#: git-novice/_episodes/11-licensing.md:68
msgid ""
">\n"
"> Many of the software tools we use on a daily basis (including in this "
"workshop) are\n"
"> released as open-source software. Pick a project on GitHub from the list "
"below, or\n"
"> one of your own choosing. Find its license (usually in a file called "
"`LICENSE` or\n"
"> `COPYING`) and talk about how it restricts your use of the software. Is it "
"one of\n"
"> the licenses discussed in this session? How is it different?\n"
"> - [Git](https://github.com/git/git), the source-code management tool\n"
"> - [CPython](https://github.com/python/cpython), the standard "
"implementation of the Python language\n"
"> - [Jupyter](https://github.com/jupyter), the project behind the web-based "
"Python notebooks we'll be using\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), a real-time "
"collaborative editor"
msgstr ""
">\n"
"> Many of the software tools we use on a daily basis (including in this "
"workshop) are\n"
"> released as open-source software. Pick a project on GitHub from the list "
"below, or\n"
"> one of your own choosing. Find its license (usually in a file called "
"`LICENSE` or\n"
"> `COPYING`) and talk about how it restricts your use of the software. Is it "
"one of\n"
"> the licenses discussed in this session? How is it different?\n"
"> - [Git](https://github.com/git/git), the source-code management tool\n"
"> - [CPython](https://github.com/python/cpython), the standard "
"implementation of the Python language\n"
"> - [Jupyter](https://github.com/jupyter), the project behind the web-based "
"Python notebooks we'll be using\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), a real-time "
"collaborative editor"

# Front Matter
#: git-novice/_episodes/12-citation.md:1
msgid ""
"---\n"
"title: Citation\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I make my work easier to cite?\"\n"
"objectives:\n"
"- \"Make your work easy to cite\"\n"
"keypoints:\n"
"- \"Add a CITATION file to a repository to explain how you want your work "
"cited.\"\n"
"---"
msgstr ""
"---\n"
"title: Citation\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I make my work easier to cite?\"\n"
"objectives:\n"
"- \"Make your work easy to cite\"\n"
"keypoints:\n"
"- \"Add a CITATION file to a repository to explain how you want your work "
"cited.\"\n"
"---"

#: git-novice/_episodes/12-citation.md:13
msgid ""
"You may want to include a file called `CITATION` or `CITATION.txt`\n"
"that describes how to reference your project;\n"
"the [one for Software\n"
"Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/CITATION)\n"
"states:"
msgstr ""
"You may want to include a file called `CITATION` or `CITATION.txt`\n"
"that describes how to reference your project;\n"
"the [one for Software\n"
"Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/CITATION)\n"
"states:"

# code block
#: git-novice/_episodes/12-citation.md:19
msgid ""
"~~~\n"
"To reference Software Carpentry in publications, please cite both of the "
"following:\n"
"\n"
"Greg Wilson: \"Software Carpentry: Getting Scientists to Write Better\n"
"Code by Making Them More Productive\".  Computing in Science &\n"
"Engineering, Nov-Dec 2006.\n"
"\n"
"Greg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448,\n"
"July 2013.\n"
"\n"
"@article{wilson-software-carpentry-2006,\n"
"    author =  {Greg Wilson},\n"
"    title =   {Software Carpentry: Getting Scientists to Write Better Code "
"by Making Them More Productive},\n"
"    journal = {Computing in Science \\& Engineering},\n"
"    month =   {November--December},\n"
"    year =    {2006},\n"
"}\n"
"\n"
"@online{wilson-software-carpentry-2013,\n"
"  author      = {Greg Wilson},\n"
"  title       = {Software Carpentry: Lessons Learned},\n"
"  version     = {1},\n"
"  date        = {2013-07-20},\n"
"  eprinttype  = {arxiv},\n"
"  eprint      = {1307.5448}\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"To reference Software Carpentry in publications, please cite both of the "
"following:\n"
"\n"
"Greg Wilson: \"Software Carpentry: Getting Scientists to Write Better\n"
"Code by Making Them More Productive\".  Computing in Science &\n"
"Engineering, Nov-Dec 2006.\n"
"\n"
"Greg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448,\n"
"July 2013.\n"
"\n"
"@article{wilson-software-carpentry-2006,\n"
"    author =  {Greg Wilson},\n"
"    title =   {Software Carpentry: Getting Scientists to Write Better Code "
"by Making Them More Productive},\n"
"    journal = {Computing in Science \\& Engineering},\n"
"    month =   {November--December},\n"
"    year =    {2006},\n"
"}\n"
"\n"
"@online{wilson-software-carpentry-2013,\n"
"  author      = {Greg Wilson},\n"
"  title       = {Software Carpentry: Lessons Learned},\n"
"  version     = {1},\n"
"  date        = {2013-07-20},\n"
"  eprinttype  = {arxiv},\n"
"  eprint      = {1307.5448}\n"
"}\n"
"~~~"

# SC/DC Template label
#: git-novice/_episodes/12-citation.md:46
msgid "{: .source}"
msgstr "{: .source}"

#: git-novice/_episodes/12-citation.md:48
msgid ""
"More detailed advice, and other ways to make your code citable can be found\n"
"[at the Software Sustainability Institute blog](https://www.software.ac.uk/"
"how-cite-and-describe-software) and in:"
msgstr ""
"More detailed advice, and other ways to make your code citable can be found\n"
"[at the Software Sustainability Institute blog](https://www.software.ac.uk/"
"how-cite-and-describe-software) and in:"

# blockquote, which can be cascaded
#: git-novice/_episodes/12-citation.md:51
msgid ""
">  Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. "
msgstr ""
">  Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. "

# blockquote, which can be cascaded
#: git-novice/_episodes/12-citation.md:52
msgid ""
">  (2016) Software citation principles. [PeerJ Computer Science 2:e86]"
"(https://peerj.com/articles/cs-86/) https://doi.org/10.7717/peerj-cs.86"
msgstr ""
">  (2016) Software citation principles. [PeerJ Computer Science 2:e86]"
"(https://peerj.com/articles/cs-86/) https://doi.org/10.7717/peerj-cs.86"

#: git-novice/_episodes/12-citation.md:54
msgid ""
"There is also an [`@software{…`](https://www.google.de/search?q=git+citation+"
"%22%40software%7B%22) \n"
"[BibTeX](https://www.ctan.org/pkg/bibtex) entry type in case\n"
"no \"umbrella\" citation like a paper or book exists for the project you "
"want to\n"
"make citable."
msgstr ""
"There is also an [`@software{…`](https://www.google.de/search?q=git+citation+"
"%22%40software%7B%22) \n"
"[BibTeX](https://www.ctan.org/pkg/bibtex) entry type in case\n"
"no \"umbrella\" citation like a paper or book exists for the project you "
"want to\n"
"make citable."

# Front Matter
#: git-novice/_episodes/13-hosting.md:1
msgid ""
"---\n"
"title: Hosting\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where should I host my version control repositories?\"\n"
"objectives:\n"
"- \"Explain different options for hosting scientific work.\"\n"
"keypoints:\n"
"- \"Projects can be hosted on university servers, on personal domains, or on "
"public forges.\"\n"
"- \"Rules regarding intellectual property and storage of sensitive "
"information apply no matter where code and data are hosted.\"\n"
"---"
msgstr ""
"---\n"
"title: Hosting\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where should I host my version control repositories?\"\n"
"objectives:\n"
"- \"Explain different options for hosting scientific work.\"\n"
"keypoints:\n"
"- \"Projects can be hosted on university servers, on personal domains, or on "
"public forges.\"\n"
"- \"Rules regarding intellectual property and storage of sensitive "
"information apply no matter where code and data are hosted.\"\n"
"---"

#: git-novice/_episodes/13-hosting.md:14
msgid ""
"The second big question for groups that want to open up their work is where "
"to\n"
"host their code and data.  One option is for the lab, the department, or "
"the\n"
"university to provide a server, manage accounts and backups, and so on.  "
"The\n"
"main benefit of this is that it clarifies who owns what, which is "
"particularly\n"
"important if any of the material is sensitive (i.e., relates to experiments\n"
"involving human subjects or may be used in a patent application).  The main\n"
"drawbacks are the cost of providing the service and its longevity: a "
"scientist\n"
"who has spent ten years collecting data would like to be sure that data "
"will\n"
"still be available ten years from now, but that's well beyond the lifespan "
"of\n"
"most of the grants that fund academic infrastructure."
msgstr ""
"The second big question for groups that want to open up their work is where "
"to\n"
"host their code and data.  One option is for the lab, the department, or "
"the\n"
"university to provide a server, manage accounts and backups, and so on.  "
"The\n"
"main benefit of this is that it clarifies who owns what, which is "
"particularly\n"
"important if any of the material is sensitive (i.e., relates to experiments\n"
"involving human subjects or may be used in a patent application).  The main\n"
"drawbacks are the cost of providing the service and its longevity: a "
"scientist\n"
"who has spent ten years collecting data would like to be sure that data "
"will\n"
"still be available ten years from now, but that's well beyond the lifespan "
"of\n"
"most of the grants that fund academic infrastructure."

#: git-novice/_episodes/13-hosting.md:25
msgid ""
"Another option is to purchase a domain and pay an Internet service provider\n"
"(ISP) to host it.  This gives the individual or group more control, and\n"
"sidesteps problems that can arise when moving from one institution to "
"another,\n"
"but requires more time and effort to set up than either the option above or "
"the\n"
"option below."
msgstr ""
"Another option is to purchase a domain and pay an Internet service provider\n"
"(ISP) to host it.  This gives the individual or group more control, and\n"
"sidesteps problems that can arise when moving from one institution to "
"another,\n"
"but requires more time and effort to set up than either the option above or "
"the\n"
"option below."

#: git-novice/_episodes/13-hosting.md:31
msgid ""
"The third option is to use a public hosting service like\n"
"[GitHub](https://github.com), [GitLab](https://gitlab.com),or\n"
"[BitBucket](https://bitbucket.org).\n"
"Each of these services provides a web interface that enables people to "
"create,\n"
"view, and edit their code repositories.  These services also provide\n"
"communication and project management tools including issue tracking, wiki "
"pages,\n"
"email notifications, and code reviews.  These services benefit from "
"economies of\n"
"scale and network effects: it's easier to run one large service well than to "
"run\n"
"many smaller services to the same standard.  It's also easier for people to\n"
"collaborate.  Using a popular service can help connect your project with\n"
"communities already using the same service."
msgstr ""
"The third option is to use a public hosting service like\n"
"[GitHub](https://github.com), [GitLab](https://gitlab.com),or\n"
"[BitBucket](https://bitbucket.org).\n"
"Each of these services provides a web interface that enables people to "
"create,\n"
"view, and edit their code repositories.  These services also provide\n"
"communication and project management tools including issue tracking, wiki "
"pages,\n"
"email notifications, and code reviews.  These services benefit from "
"economies of\n"
"scale and network effects: it's easier to run one large service well than to "
"run\n"
"many smaller services to the same standard.  It's also easier for people to\n"
"collaborate.  Using a popular service can help connect your project with\n"
"communities already using the same service."

#: git-novice/_episodes/13-hosting.md:43
msgid ""
"As an example, Software Carpentry [is on\n"
"GitHub]({{ swc_github }}) where you can find the [source for this\n"
"page]({{page.root}}/_episodes/13-hosting.md).\n"
"Anyone with a GitHub account can suggest changes to this text."
msgstr ""
"As an example, Software Carpentry [is on\n"
"GitHub]({{ swc_github }}) where you can find the [source for this\n"
"page]({{page.root}}/_episodes/13-hosting.md).\n"
"Anyone with a GitHub account can suggest changes to this text."

#: git-novice/_episodes/13-hosting.md:48
msgid ""
"Using large, well-established services can also help you quickly take "
"advantage\n"
"of powerful tools.  One such tool, continuous integration (CI), can\n"
"automatically run software builds and tests whenever code is committed or "
"pull\n"
"requests are submitted.  Direct integration of CI with an online hosting "
"service\n"
"means this information is present in any pull request, and helps maintain "
"code\n"
"integrity and quality standards.  While CI is still available in self-"
"hosted\n"
"situations, there is much less setup and maintenance involved with using an\n"
"online service.  Furthermore, such tools are often provided free of charge "
"to\n"
"open source projects, and are also available for private repositories for a "
"fee."
msgstr ""
"Using large, well-established services can also help you quickly take "
"advantage\n"
"of powerful tools.  One such tool, continuous integration (CI), can\n"
"automatically run software builds and tests whenever code is committed or "
"pull\n"
"requests are submitted.  Direct integration of CI with an online hosting "
"service\n"
"means this information is present in any pull request, and helps maintain "
"code\n"
"integrity and quality standards.  While CI is still available in self-"
"hosted\n"
"situations, there is much less setup and maintenance involved with using an\n"
"online service.  Furthermore, such tools are often provided free of charge "
"to\n"
"open source projects, and are also available for private repositories for a "
"fee."

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:58
msgid "> ## Institutional Barriers"
msgstr "> ## Institutional Barriers"

#: git-novice/_episodes/13-hosting.md:59
msgid ""
">\n"
"> Sharing is the ideal for science,\n"
"> but many institutions place restrictions on sharing,\n"
"> for example to protect potentially patentable intellectual property.\n"
"> If you encounter such restrictions,\n"
"> it can be productive to inquire about the underlying motivations and\n"
"> either to request an exception for a specific project or domain,\n"
"> or to push more broadly for institutional reform to support more open "
"science."
msgstr ""
">\n"
"> Sharing is the ideal for science,\n"
"> but many institutions place restrictions on sharing,\n"
"> for example to protect potentially patentable intellectual property.\n"
"> If you encounter such restrictions,\n"
"> it can be productive to inquire about the underlying motivations and\n"
"> either to request an exception for a specific project or domain,\n"
"> or to push more broadly for institutional reform to support more open "
"science."

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:69
msgid "> ## Can My Work Be Public?"
msgstr "> ## Can My Work Be Public?"

#: git-novice/_episodes/13-hosting.md:70
msgid ""
">\n"
"> Find out whether you are allowed to host your work openly on a public "
"forge.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"
msgstr ""
">\n"
"> Find out whether you are allowed to host your work openly on a public "
"forge.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:77
msgid "> ## Where Can I Share My Work?"
msgstr "> ## Where Can I Share My Work?"

#: git-novice/_episodes/13-hosting.md:78
msgid ""
">\n"
"> Does your institution have a repository or repositories that you can\n"
"> use to share your papers, data and software? How do institutional "
"repositories\n"
"> differ from services like [arXiV](https://arxiv.org/), [figshare](https://"
"figshare.com/), [GitHub](https://github.com/) or [GitLab](https://about."
"gitlab.com/)?"
msgstr ""
">\n"
"> Does your institution have a repository or repositories that you can\n"
"> use to share your papers, data and software? How do institutional "
"repositories\n"
"> differ from services like [arXiV](https://arxiv.org/), [figshare](https://"
"figshare.com/), [GitHub](https://github.com/) or [GitLab](https://about."
"gitlab.com/)?"

# Front Matter
#: git-novice/_episodes/14-supplemental-rstudio.md:1
msgid ""
"---\n"
"title: \"Supplemental: Using Git from RStudio\"\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use Git with RStudio?\"\n"
"objectives:\n"
"- \"Understand how to use Git from RStudio.\"\n"
"keypoints:\n"
"- \"Create an RStudio project\"\n"
"---"
msgstr ""
"---\n"
"title: \"Supplemental: Using Git from RStudio\"\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use Git with RStudio?\"\n"
"objectives:\n"
"- \"Understand how to use Git from RStudio.\"\n"
"keypoints:\n"
"- \"Create an RStudio project\"\n"
"---"

#: git-novice/_episodes/14-supplemental-rstudio.md:13
msgid ""
"Version control can be very useful when developing data analysis scripts. "
"For\n"
"that reason, the popular development environment\n"
"RStudio for the R programming language has built-in\n"
"integration with Git. While some advanced Git features still require the\n"
"command-line, RStudio has a nice interface for many common Git operations."
msgstr ""
"Version control can be very useful when developing data analysis scripts. "
"For\n"
"that reason, the popular development environment\n"
"RStudio for the R programming language has built-in\n"
"integration with Git. While some advanced Git features still require the\n"
"command-line, RStudio has a nice interface for many common Git operations."

#: git-novice/_episodes/14-supplemental-rstudio.md:19
msgid ""
"RStudio allows us to create a [project][rstudio-projects] associated with a\n"
"given directory to keep track of various related files. To be able to track "
"the\n"
"development of the project over time, to be able to revert to previous\n"
"versions, and to collaborate with others, we version control the Rstudio\n"
"project with Git. To get started using Git in RStudio, we create a new "
"project:"
msgstr ""
"RStudio allows us to create a [project][rstudio-projects] associated with a\n"
"given directory to keep track of various related files. To be able to track "
"the\n"
"development of the project over time, to be able to revert to previous\n"
"versions, and to collaborate with others, we version control the Rstudio\n"
"project with Git. To get started using Git in RStudio, we create a new "
"project:"

#: git-novice/_episodes/14-supplemental-rstudio.md:25
msgid "![](../fig/RStudio_screenshot_newproject.png)"
msgstr "![](../fig/RStudio_screenshot_newproject.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:27
msgid ""
"This will open a dialog asking us how we want to create the project. We "
"have\n"
"some options here. Let's say that we want to use RStudio with the planets\n"
"repository that we already made. Since that repository lives in a directory "
"on\n"
"our computer, we choose the option \"Existing Directory\":"
msgstr ""
"This will open a dialog asking us how we want to create the project. We "
"have\n"
"some options here. Let's say that we want to use RStudio with the planets\n"
"repository that we already made. Since that repository lives in a directory "
"on\n"
"our computer, we choose the option \"Existing Directory\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:32
msgid "![](../fig/RStudio_screenshot_existingdirectory.png)"
msgstr "![](../fig/RStudio_screenshot_existingdirectory.png)"

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:34
msgid "> ## Do You See a \"Version Control\" Option?"
msgstr "> ## Do You See a \"Version Control\" Option?"

#: git-novice/_episodes/14-supplemental-rstudio.md:35
msgid ""
">\n"
"> Although we're not going to use it here, there should be a \"version "
"control\"\n"
"> option on this menu. That is what you would click on if you wanted to\n"
"> create a project on your computer by cloning a repository from GitHub.\n"
"> If that option is not present, it probably means that RStudio doesn't "
"know\n"
"> where your Git executable is. See\n"
"> [this page](https://stat545-ubc.github.io/git03_rstudio-meet-git.html)\n"
"> for some debugging advice. Even if you have Git installed, you may need\n"
"> to accept the XCode license if you are using macOS."
msgstr ""
">\n"
"> Although we're not going to use it here, there should be a \"version "
"control\"\n"
"> option on this menu. That is what you would click on if you wanted to\n"
"> create a project on your computer by cloning a repository from GitHub.\n"
"> If that option is not present, it probably means that RStudio doesn't "
"know\n"
"> where your Git executable is. See\n"
"> [this page](https://stat545-ubc.github.io/git03_rstudio-meet-git.html)\n"
"> for some debugging advice. Even if you have Git installed, you may need\n"
"> to accept the XCode license if you are using macOS."

#: git-novice/_episodes/14-supplemental-rstudio.md:46
msgid ""
"Next, RStudio will ask which existing directory we want to use. Click\n"
"\"Browse...\" and navigate to the correct directory, then click \"Create "
"Project\":"
msgstr ""
"Next, RStudio will ask which existing directory we want to use. Click\n"
"\"Browse...\" and navigate to the correct directory, then click \"Create "
"Project\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:49
msgid "![](../fig/RStudio_screenshot_navigateexisting.png)"
msgstr "![](../fig/RStudio_screenshot_navigateexisting.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:51
msgid ""
"Ta-da! We have created a new project in RStudio within the existing planets\n"
"repository. Notice the vertical \"Git\" menu in the menu bar. RStudio has\n"
"recognized that the current directory is a Git repository, and gives us a\n"
"number of tools to use Git:"
msgstr ""
"Ta-da! We have created a new project in RStudio within the existing planets\n"
"repository. Notice the vertical \"Git\" menu in the menu bar. RStudio has\n"
"recognized that the current directory is a Git repository, and gives us a\n"
"number of tools to use Git:"

#: git-novice/_episodes/14-supplemental-rstudio.md:56
msgid "![](../fig/RStudio_screenshot_afterclone.png)"
msgstr "![](../fig/RStudio_screenshot_afterclone.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:58
msgid ""
"To edit the existing files in the repository, we can click on them in the\n"
"\"Files\" panel on the lower right. Now let's add some additional "
"information\n"
"about Pluto:"
msgstr ""
"To edit the existing files in the repository, we can click on them in the\n"
"\"Files\" panel on the lower right. Now let's add some additional "
"information\n"
"about Pluto:"

#: git-novice/_episodes/14-supplemental-rstudio.md:62
msgid "![](../fig/RStudio_screenshot_editfiles.png)"
msgstr "![](../fig/RStudio_screenshot_editfiles.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:64
msgid ""
"Once we have saved our edited files, we can use RStudio to commit the "
"changes\n"
"by clicking on \"Commit...\" in the Git menu:"
msgstr ""
"Once we have saved our edited files, we can use RStudio to commit the "
"changes\n"
"by clicking on \"Commit...\" in the Git menu:"

#: git-novice/_episodes/14-supplemental-rstudio.md:67
msgid "![](../fig/RStudio_screenshot_commit.png)"
msgstr "![](../fig/RStudio_screenshot_commit.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:69
msgid ""
"This will open a dialogue where we can select which files to commit (by\n"
"checking the appropriate boxes in the \"Staged\" column), and enter a "
"commit\n"
"message (in the upper right panel). The icons in the \"Status\" column "
"indicate\n"
"the current status of each file. Clicking on a file shows information about\n"
"changes in the lower panel (using output of `git diff`). Once everything is "
"the\n"
"way we want it, we click \"Commit\":"
msgstr ""
"This will open a dialogue where we can select which files to commit (by\n"
"checking the appropriate boxes in the \"Staged\" column), and enter a "
"commit\n"
"message (in the upper right panel). The icons in the \"Status\" column "
"indicate\n"
"the current status of each file. Clicking on a file shows information about\n"
"changes in the lower panel (using output of `git diff`). Once everything is "
"the\n"
"way we want it, we click \"Commit\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:76
msgid "![](../fig/RStudio_screenshot_review.png)"
msgstr "![](../fig/RStudio_screenshot_review.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:78
msgid ""
"The changes can be pushed by selecting \"Push Branch\" from the Git menu. "
"There\n"
"are also options to pull from the remote repository, and to view the commit\n"
"history:"
msgstr ""
"The changes can be pushed by selecting \"Push Branch\" from the Git menu. "
"There\n"
"are also options to pull from the remote repository, and to view the commit\n"
"history:"

#: git-novice/_episodes/14-supplemental-rstudio.md:82
msgid "![](../fig/RStudio_screenshot_history.png)"
msgstr "![](../fig/RStudio_screenshot_history.png)"

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:84
msgid "> ## Are the Push/Pull Commands Grayed Out?"
msgstr "> ## Are the Push/Pull Commands Grayed Out?"

#: git-novice/_episodes/14-supplemental-rstudio.md:85
msgid ""
">\n"
"> Grayed out Push/Pull commands generally mean that RStudio doesn't know "
"the\n"
"> location of your remote repository (e.g. on GitHub). To fix this, open a\n"
"> terminal to the repository and enter the command: `git push -u origin\n"
"> master`. Then restart RStudio."
msgstr ""
">\n"
"> Grayed out Push/Pull commands generally mean that RStudio doesn't know "
"the\n"
"> location of your remote repository (e.g. on GitHub). To fix this, open a\n"
"> terminal to the repository and enter the command: `git push -u origin\n"
"> master`. Then restart RStudio."

#: git-novice/_episodes/14-supplemental-rstudio.md:92
msgid ""
"If we click on \"History\", we can see a graphical version of what `git "
"log`\n"
"would tell us:"
msgstr ""
"If we click on \"History\", we can see a graphical version of what `git "
"log`\n"
"would tell us:"

#: git-novice/_episodes/14-supplemental-rstudio.md:95
msgid "![](../fig/RStudio_screenshot_viewhistory.png)"
msgstr "![](../fig/RStudio_screenshot_viewhistory.png)"

#: git-novice/_episodes/14-supplemental-rstudio.md:97
msgid ""
"RStudio creates a number of files that it uses to keep track of a project. "
"We\n"
"often don't want to track these, in which case we add them to our `."
"gitignore`\n"
"file:"
msgstr ""
"RStudio creates a number of files that it uses to keep track of a project. "
"We\n"
"often don't want to track these, in which case we add them to our `."
"gitignore`\n"
"file:"

#: git-novice/_episodes/14-supplemental-rstudio.md:101
msgid "![](../fig/RStudio_screenshot_gitignore.png)"
msgstr "![](../fig/RStudio_screenshot_gitignore.png)"

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:103
msgid "> ## Tip: versioning disposable output"
msgstr "> ## Tip: versioning disposable output"

#: git-novice/_episodes/14-supplemental-rstudio.md:104
msgid ""
">\n"
"> Generally you do not want to version control disposable output (or read-"
"only\n"
"> data). You should modify the `.gitignore` file to tell Git to ignore "
"these\n"
"> files and directories."
msgstr ""
">\n"
"> Generally you do not want to version control disposable output (or read-"
"only\n"
"> data). You should modify the `.gitignore` file to tell Git to ignore "
"these\n"
"> files and directories."

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:110
msgid "> ## Challenge"
msgstr "> ## Challenge"

#: git-novice/_episodes/14-supplemental-rstudio.md:111
msgid ""
">\n"
"> 1. Create a new directory within your project called `graphs`.\n"
"> 2. Modify the `.gitignore` so that the `graphs` directory is not version "
"controlled.\n"
">\n"
"> Add the newly created folders to version control using\n"
"> the Git interface.\n"
">\n"
"> > ## Solution to Challenge\n"
"> >\n"
"> > This can be done with the command line:\n"
"> > ```\n"
"> > $ mkdir graphs\n"
"> > $ echo \"graphs/\" >> .gitignore\n"
"> > ```\n"
"> > {: . shell}"
msgstr ""
">\n"
"> 1. Create a new directory within your project called `graphs`.\n"
"> 2. Modify the `.gitignore` so that the `graphs` directory is not version "
"controlled.\n"
">\n"
"> Add the newly created folders to version control using\n"
"> the Git interface.\n"
">\n"
"> > ## Solution to Challenge\n"
"> >\n"
"> > This can be done with the command line:\n"
"> > ```\n"
"> > $ mkdir graphs\n"
"> > $ echo \"graphs/\" >> .gitignore\n"
"> > ```\n"
"> > {: . shell}"

#: git-novice/_episodes/14-supplemental-rstudio.md:129
msgid ""
"There are many more features in the RStudio Git menu, but these should be\n"
"enough to get you started!"
msgstr ""
"There are many more features in the RStudio Git menu, but these should be\n"
"enough to get you started!"

#: git-novice/_episodes/14-supplemental-rstudio.md:132
msgid ""
"[rstudio-projects]: https://support.rstudio.com/hc/en-us/articles/200526207-"
"Using-Projects"
msgstr ""
"[rstudio-projects]: https://support.rstudio.com/hc/en-us/articles/200526207-"
"Using-Projects"

# Front Matter
#: git-novice/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"

#: git-novice/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr "{% include carpentries.html %}"

# Front Matter
#: git-novice/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /discuss/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /discuss/\n"
"---"

# header
#: git-novice/_extras/discuss.md:7
msgid "## Frequently Asked Questions"
msgstr "## Frequently Asked Questions"

#: git-novice/_extras/discuss.md:9
msgid ""
"People often have questions about Git beyond the scope of the core "
"material.\n"
"Students who have completed the rest of the lessons might find value in "
"looking through the following topics."
msgstr ""
"People often have questions about Git beyond the scope of the core "
"material.\n"
"Students who have completed the rest of the lessons might find value in "
"looking through the following topics."

#: git-novice/_extras/discuss.md:12
msgid ""
"Note that since this material isn't essential for basic Git usage, it won't "
"be covered by the instructor."
msgstr ""
"Note that since this material isn't essential for basic Git usage, it won't "
"be covered by the instructor."

# header
#: git-novice/_extras/discuss.md:14
msgid "## More Advanced Git Configuration"
msgstr "## More Advanced Git Configuration"

#: git-novice/_extras/discuss.md:16
msgid ""
"In [Setting Up Git]({{ page.root }}/02-setup/),\n"
"we used `git config --global` to set some default options for Git.\n"
"It turns out that these configuration options get stored in your home "
"directory\n"
"in a plain text file called `.gitconfig`."
msgstr ""
"In [Setting Up Git]({{ page.root }}/02-setup/),\n"
"we used `git config --global` to set some default options for Git.\n"
"It turns out that these configuration options get stored in your home "
"directory\n"
"in a plain text file called `.gitconfig`."

# code block
#: git-novice/_extras/discuss.md:21
msgid ""
"~~~\n"
"$ cat ~/.gitconfig\n"
"~~~"
msgstr ""
"~~~\n"
"$ cat ~/.gitconfig\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:26
msgid ""
"~~~\n"
"[user]\n"
"\tname = Vlad Dracula\n"
"\temail = vlad@tran.sylvan.ia\n"
"[color]\n"
"\tui = true\n"
"[core]\n"
"\teditor = nano\n"
"~~~"
msgstr ""
"~~~\n"
"[user]\n"
"\tname = 野比 のび太 \n"
"\temail = nobita@doko.demo.doa\n"
"[color]\n"
"\tui = true\n"
"[core]\n"
"\teditor = nano\n"
"~~~"

#: git-novice/_extras/discuss.md:37
msgid ""
"This file can be opened in your preferred text editor.\n"
"(Note that it is recommended to continue using the `git config` command,\n"
"as this helps avoid introducing syntax errors.)"
msgstr ""
"This file can be opened in your preferred text editor.\n"
"(Note that it is recommended to continue using the `git config` command,\n"
"as this helps avoid introducing syntax errors.)"

#: git-novice/_extras/discuss.md:41
msgid ""
"Eventually, you will want to start customizing Git's behaviour.\n"
"This can be done by adding more entries to your `.gitconfig`.\n"
"The available options are described in the manual:"
msgstr ""
"Eventually, you will want to start customizing Git's behaviour.\n"
"This can be done by adding more entries to your `.gitconfig`.\n"
"The available options are described in the manual:"

# code block
#: git-novice/_extras/discuss.md:45
msgid ""
"~~~\n"
"$ git config --help\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --help\n"
"~~~"

#: git-novice/_extras/discuss.md:50
msgid ""
"In particular, you might find it useful to add aliases.\n"
"These are like shortcuts for longer git commands.\n"
"For example, if you get sick of typing `git checkout` all the time,\n"
"you could run the command:"
msgstr ""
"In particular, you might find it useful to add aliases.\n"
"These are like shortcuts for longer git commands.\n"
"For example, if you get sick of typing `git checkout` all the time,\n"
"you could run the command:"

# code block
#: git-novice/_extras/discuss.md:55
msgid ""
"~~~\n"
"$ git config --global alias.co checkout\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global alias.co checkout\n"
"~~~"

#: git-novice/_extras/discuss.md:60
msgid ""
"Now if we return to the example from [Exploring History]({{ page.root }}/05-"
"history/) where we ran:"
msgstr ""
"Now if we return to the example from [Exploring History]({{ page.root }}/05-"
"history/) where we ran:"

#: git-novice/_extras/discuss.md:67
msgid "we could now instead type:"
msgstr "we could now instead type:"

# code block
#: git-novice/_extras/discuss.md:69
msgid ""
"~~~\n"
"$ git co f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git co f22b25e mars.txt\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:74
msgid "## Styling Git's Log"
msgstr "## Styling Git's Log"

#: git-novice/_extras/discuss.md:76
msgid ""
"A good target for customization is output from the log.\n"
"The default log is quite verbose but gives no graphical hints\n"
"such as information about which commits were done locally\n"
"and which were pulled from remotes."
msgstr ""
"A good target for customization is output from the log.\n"
"The default log is quite verbose but gives no graphical hints\n"
"such as information about which commits were done locally\n"
"and which were pulled from remotes."

#: git-novice/_extras/discuss.md:81
msgid ""
"You can use `git log --help` and `git config --help` to look for different "
"ways to change\n"
"the log output.\n"
"Try the following commands and see what effect they have:"
msgstr ""
"You can use `git log --help` and `git config --help` to look for different "
"ways to change\n"
"the log output.\n"
"Try the following commands and see what effect they have:"

# code block
#: git-novice/_extras/discuss.md:85
msgid ""
"~~~\n"
"$ git config --global alias.lg \"log --graph\"\n"
"$ git config --global log.abbrevCommit true\n"
"$ git config --global format.pretty oneline\n"
"$ git lg\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global alias.lg \"log --graph\"\n"
"$ git config --global log.abbrevCommit true\n"
"$ git config --global format.pretty oneline\n"
"$ git lg\n"
"~~~"

#: git-novice/_extras/discuss.md:93
msgid ""
"If you don't like the effects,\n"
"you can undo them with:"
msgstr ""
"If you don't like the effects,\n"
"you can undo them with:"

# code block
#: git-novice/_extras/discuss.md:96
msgid ""
"~~~\n"
"$ git config --global --unset alias.lg\n"
"$ git config --global --unset log.abbrevCommit\n"
"$ git config --global --unset format.pretty\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global --unset alias.lg\n"
"$ git config --global --unset log.abbrevCommit\n"
"$ git config --global --unset format.pretty\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_extras/discuss.md:103
msgid "> ## Undoing Git Configuration Changes"
msgstr "> ## Undoing Git Configuration Changes"

#: git-novice/_extras/discuss.md:104
msgid ""
">\n"
"> You can use the `--unset` flag to delete unwanted options from `."
"gitconfig`.\n"
"> Another way to roll back changes is to store your `.gitconfig` using Git.\n"
">\n"
"> For hints on what you might want to configure,\n"
"> go to GitHub and search for \"gitconfig\".\n"
"> You will find hundreds of repositories in which people have stored\n"
"> their own Git configuration files.\n"
"> Sort them by the number of stars and have a look at the top few.\n"
"> If you find some you like,\n"
"> please check that they're covered by an open source license before you "
"clone them."
msgstr ""
">\n"
"> You can use the `--unset` flag to delete unwanted options from `."
"gitconfig`.\n"
"> Another way to roll back changes is to store your `.gitconfig` using Git.\n"
">\n"
"> For hints on what you might want to configure,\n"
"> go to GitHub and search for \"gitconfig\".\n"
"> You will find hundreds of repositories in which people have stored\n"
"> their own Git configuration files.\n"
"> Sort them by the number of stars and have a look at the top few.\n"
"> If you find some you like,\n"
"> please check that they're covered by an open source license before you "
"clone them."

# header
#: git-novice/_extras/discuss.md:117
msgid "## Non-text Files"
msgstr "## Non-text Files"

#: git-novice/_extras/discuss.md:119
msgid ""
"Recall when we discussed [Conflicts]({{ page.root }}/09-conflict/)\n"
"there was a challenge that asked,\n"
"\"What does Git do\n"
"when there is a conflict in an image or some other non-textual file\n"
"that is stored in version control?\""
msgstr ""
"Recall when we discussed [Conflicts]({{ page.root }}/09-conflict/)\n"
"there was a challenge that asked,\n"
"\"What does Git do\n"
"when there is a conflict in an image or some other non-textual file\n"
"that is stored in version control?\""

#: git-novice/_extras/discuss.md:125
msgid "We will now revisit this in more detail."
msgstr "We will now revisit this in more detail."

#: git-novice/_extras/discuss.md:127
msgid ""
"Many people want to version control non-text files, such as images, PDFs and "
"Microsoft Office or LibreOffice documents.\n"
"It is true that Git can handle these filetypes (which fall under the banner "
"of \"binary\" file types).\n"
"However, just because it *can* be done doesn't mean it *should* be done."
msgstr ""
"Many people want to version control non-text files, such as images, PDFs and "
"Microsoft Office or LibreOffice documents.\n"
"It is true that Git can handle these filetypes (which fall under the banner "
"of \"binary\" file types).\n"
"However, just because it *can* be done doesn't mean it *should* be done."

#: git-novice/_extras/discuss.md:131
msgid ""
"Much of Git's magic comes from being able to do line-by-line comparisons "
"(\"diffs\") between files.\n"
"This is generally easy for programming source code and marked up text.\n"
"For non-text files, a diff can usually only detect that the files have "
"changed\n"
"but can't say how or where."
msgstr ""
"Much of Git's magic comes from being able to do line-by-line comparisons "
"(\"diffs\") between files.\n"
"This is generally easy for programming source code and marked up text.\n"
"For non-text files, a diff can usually only detect that the files have "
"changed\n"
"but can't say how or where."

#: git-novice/_extras/discuss.md:136
msgid ""
"This has various impacts on Git's performance and will make it difficult to\n"
"compare different versions of your project."
msgstr ""
"This has various impacts on Git's performance and will make it difficult to\n"
"compare different versions of your project."

#: git-novice/_extras/discuss.md:139
msgid ""
"For a basic example to show the difference it makes,\n"
"we're going to go see what would have happened if Dracula had tried\n"
"using outputs from a word processor instead of plain text."
msgstr ""
"For a basic example to show the difference it makes,\n"
"we're going to go see what would have happened if のび太 had tried\n"
"using outputs from a word processor instead of plain text."

#: git-novice/_extras/discuss.md:143
msgid "Create a new directory and go into it:"
msgstr "Create a new directory and go into it:"

# code block
#: git-novice/_extras/discuss.md:145
msgid ""
"~~~\n"
"$ mkdir planets-nontext\n"
"$ cd planets-nontext\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir planets-nontext\n"
"$ cd planets-nontext\n"
"~~~"

#: git-novice/_extras/discuss.md:151
msgid ""
"Use a program such as Microsoft Word or LibreOffice Writer to create a new "
"document.\n"
"Enter the same text that we began with before:"
msgstr ""
"Use a program such as Microsoft Word or LibreOffice Writer to create a new "
"document.\n"
"Enter the same text that we began with before:"

#: git-novice/_extras/discuss.md:159
msgid ""
"Save the document into the `planets-nontext` directory with the name of "
"`mars.doc`.\n"
"Back in the terminal, run the usual commands for setting up a new Git "
"repository:"
msgstr ""
"Save the document into the `planets-nontext` directory with the name of "
"`mars.doc`.\n"
"Back in the terminal, run the usual commands for setting up a new Git "
"repository:"

# code block
#: git-novice/_extras/discuss.md:162
msgid ""
"~~~\n"
"$ git init\n"
"$ git add mars.doc\n"
"$ git commit -m \"Starting to think about Mars\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git init\n"
"$ git add mars.doc\n"
"$ git commit -m \"Starting to think about Mars\"\n"
"~~~"

#: git-novice/_extras/discuss.md:169
msgid ""
"Then make the same changes to `mars.doc` that we (or Vlad) previously made "
"to `mars.txt`."
msgstr ""
"Then make the same changes to `mars.doc` that we (or のび太) previously made "
"to `mars.txt`."

#: git-novice/_extras/discuss.md:177
msgid ""
"Save and close the word processor.\n"
"Now see what Git thinks of your changes:"
msgstr ""
"Save and close the word processor.\n"
"Now see what Git thinks of your changes:"

# code block
#: git-novice/_extras/discuss.md:185
msgid ""
"~~~\n"
"diff --git a/mars.doc b/mars.doc\n"
"index 53a66fd..6e988e9 100644\n"
"Binary files a/mars.doc and b/mars.doc differ\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.doc b/mars.doc\n"
"index 53a66fd..6e988e9 100644\n"
"Binary files a/mars.doc and b/mars.doc differ\n"
"~~~"

#: git-novice/_extras/discuss.md:192
msgid "Compare this to the earlier `git diff` obtained when using text files:"
msgstr "Compare this to the earlier `git diff` obtained when using text files:"

#: git-novice/_extras/discuss.md:205
msgid ""
"Notice how plain text files give a much more informative diff.\n"
"You can see exactly which lines changed and what the changes were."
msgstr ""
"Notice how plain text files give a much more informative diff.\n"
"You can see exactly which lines changed and what the changes were."

#: git-novice/_extras/discuss.md:208
msgid ""
"An uninformative `git diff` is not the only consequence of using Git on "
"binary files.\n"
"However, most of the other problems boil down to whether or not a good diff "
"is possible."
msgstr ""
"An uninformative `git diff` is not the only consequence of using Git on "
"binary files.\n"
"However, most of the other problems boil down to whether or not a good diff "
"is possible."

#: git-novice/_extras/discuss.md:211
msgid ""
"This isn't to say you should *never* use Git on binary files.\n"
"A rule of thumb is that it's OK if the binary file won't change very often,\n"
"and if it does change, you don't care about merging in small differences "
"between versions."
msgstr ""
"This isn't to say you should *never* use Git on binary files.\n"
"A rule of thumb is that it's OK if the binary file won't change very often,\n"
"and if it does change, you don't care about merging in small differences "
"between versions."

#: git-novice/_extras/discuss.md:215
msgid ""
"We've already seen how a word processed report will fail this test.\n"
"An example that passes the test is a logo for your organization or project.\n"
"Even though a logo will be stored in a binary format such as `jpg` or "
"`png`,\n"
"you can expect it will remain fairly static through the lifetime of your "
"repository.\n"
"On the rare occasion that branding does change,\n"
"you will probably just want to replace the logo completely rather than merge "
"little differences in."
msgstr ""
"We've already seen how a word processed report will fail this test.\n"
"An example that passes the test is a logo for your organization or project.\n"
"Even though a logo will be stored in a binary format such as `jpg` or "
"`png`,\n"
"you can expect it will remain fairly static through the lifetime of your "
"repository.\n"
"On the rare occasion that branding does change,\n"
"you will probably just want to replace the logo completely rather than merge "
"little differences in."

# header
#: git-novice/_extras/discuss.md:222
msgid "## Removing a File"
msgstr "## Removing a File"

#: git-novice/_extras/discuss.md:224
msgid ""
"Adding and modifying files are not the only actions one might take\n"
"when working on a project.  It might be required to remove a file\n"
"from the repository."
msgstr ""
"Adding and modifying files are not the only actions one might take\n"
"when working on a project.  It might be required to remove a file\n"
"from the repository."

#: git-novice/_extras/discuss.md:228
msgid "Create a new file for the planet Nibiru:"
msgstr "Create a new file for the planet Nibiru:"

# code block
#: git-novice/_extras/discuss.md:230
msgid ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"~~~"

#: git-novice/_extras/discuss.md:235
msgid "Now add to the repository like you have learned earlier:"
msgstr "Now add to the repository like you have learned earlier:"

# code block
#: git-novice/_extras/discuss.md:237
msgid ""
"~~~\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding info on nibiru'\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding info on nibiru'\n"
"$ git status\n"
"~~~"

#: git-novice/_extras/discuss.md:250
msgid ""
"Nibiru is not a real planet.  That was a silly idea.  Let us remove\n"
"it from the disk and let Git know about it:"
msgstr ""
"Nibiru is not a real planet.  That was a silly idea.  Let us remove\n"
"it from the disk and let Git know about it:"

# code block
#: git-novice/_extras/discuss.md:253 git-novice/_extras/discuss.md:318
msgid ""
"~~~\n"
"$ git rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git rm nibiru.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:259 git-novice/_extras/discuss.md:324
msgid ""
"~~~\n"
"On branch master\n"
"Changes to be committed:\n"
"   (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"   deleted:    nibiru.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Changes to be committed:\n"
"   (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"   deleted:    nibiru.txt\n"
"\n"
"~~~"

#: git-novice/_extras/discuss.md:269
msgid ""
"The change has been staged.  Now commit the removal, and remove the\n"
"file from the repository itself.  Note that the file will be removed\n"
"in the new commit.  The previous commit will still\n"
"have the file, if you were to retrieve that specific commit."
msgstr ""
"The change has been staged.  Now commit the removal, and remove the\n"
"file from the repository itself.  Note that the file will be removed\n"
"in the new commit.  The previous commit will still\n"
"have the file, if you were to retrieve that specific commit."

# code block
#: git-novice/_extras/discuss.md:274
msgid ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru.  It is not a real planet!'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru.  It is not a real planet!'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:279
msgid "## Removing a File with Unix"
msgstr "## Removing a File with Unix"

#: git-novice/_extras/discuss.md:281
msgid ""
"Sometimes we might forget to remove the file through Git. If you removed "
"the\n"
"file with Unix `rm` instead of using `git rm`, no worries,\n"
"Git is smart enough to notice the missing file. Let us recreate the file "
"and\n"
"commit it again."
msgstr ""
"Sometimes we might forget to remove the file through Git. If you removed "
"the\n"
"file with Unix `rm` instead of using `git rm`, no worries,\n"
"Git is smart enough to notice the missing file. Let us recreate the file "
"and\n"
"commit it again."

# code block
#: git-novice/_extras/discuss.md:286
msgid ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding nibiru again'\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding nibiru again'\n"
"~~~"

#: git-novice/_extras/discuss.md:293
msgid "Now we remove the file with Unix `rm`:"
msgstr "Now we remove the file with Unix `rm`:"

# code block
#: git-novice/_extras/discuss.md:295
msgid ""
"~~~\n"
"$ rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm nibiru.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:301
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"   (use \"git add/rm <file>...\" to update what will be committed)\n"
"   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"    deleted:    nibiru.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"   (use \"git add/rm <file>...\" to update what will be committed)\n"
"   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"    deleted:    nibiru.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_extras/discuss.md:313
msgid ""
"See how Git has noticed that the file `nibiru.txt` has been removed\n"
"from the disk.  The next step is to \"stage\" the removal of the file\n"
"from the repository.  This is done with the command `git rm` just as\n"
"before."
msgstr ""
"See how Git has noticed that the file `nibiru.txt` has been removed\n"
"from the disk.  The next step is to \"stage\" the removal of the file\n"
"from the repository.  This is done with the command `git rm` just as\n"
"before."

#: git-novice/_extras/discuss.md:334
msgid ""
"The change that was made in Unix has now been staged and needs to be\n"
"committed."
msgstr ""
"The change that was made in Unix has now been staged and needs to be\n"
"committed."

# code block
#: git-novice/_extras/discuss.md:337
msgid ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru, again!'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru, again!'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:342
msgid "## Renaming a File"
msgstr "## Renaming a File"

#: git-novice/_extras/discuss.md:344
msgid "Another common change when working on a project is to rename a file."
msgstr "Another common change when working on a project is to rename a file."

#: git-novice/_extras/discuss.md:346
msgid "Create a file for the planet Krypton:"
msgstr "Create a file for the planet Krypton:"

# code block
#: git-novice/_extras/discuss.md:348
msgid ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"~~~"

#: git-novice/_extras/discuss.md:353
msgid "Add it to the repository:"
msgstr "Add it to the repository:"

# code block
#: git-novice/_extras/discuss.md:355
msgid ""
"~~~\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton'\n"
"~~~"

#: git-novice/_extras/discuss.md:361
msgid ""
"We all know that Superman moved to Earth.  Not that he had much\n"
"choice.  Now his home planet is Earth."
msgstr ""
"We all know that Superman moved to Earth.  Not that he had much\n"
"choice.  Now his home planet is Earth."

#: git-novice/_extras/discuss.md:364
msgid "Rename the file `krypton.txt` to `earth.txt` with Git:"
msgstr "Rename the file `krypton.txt` to `earth.txt` with Git:"

# code block
#: git-novice/_extras/discuss.md:366
msgid ""
"~~~\n"
"$ git mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:372
msgid ""
"~~~\n"
"# On branch master\n"
"# Changes to be committed:\n"
"#   (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#\trenamed:    krypton.txt -> earth.txt\n"
"#\n"
"~~~"
msgstr ""
"~~~\n"
"# On branch master\n"
"# Changes to be committed:\n"
"#   (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#\trenamed:    krypton.txt -> earth.txt\n"
"#\n"
"~~~"

#: git-novice/_extras/discuss.md:381
msgid "The final step is commit our change to the repository:"
msgstr "The final step is commit our change to the repository:"

# code block
#: git-novice/_extras/discuss.md:383
msgid ""
"~~~\n"
"$ git commit -m 'Superman's home is now Earth'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Superman's home is now Earth'\n"
"~~~"

# header
#: git-novice/_extras/discuss.md:388
msgid "## Renaming a File with Unix"
msgstr "## Renaming a File with Unix"

#: git-novice/_extras/discuss.md:390
msgid ""
"If you forgot to use Git and you used Unix `mv` instead\n"
"of `git mv`, you will have a touch more work to do but Git will\n"
"be able to deal with it. Let's try again renaming the file,\n"
"this time with Unix `mv`. First, we need to recreate the\n"
"`krypton.txt` file:"
msgstr ""
"If you forgot to use Git and you used Unix `mv` instead\n"
"of `git mv`, you will have a touch more work to do but Git will\n"
"be able to deal with it. Let's try again renaming the file,\n"
"this time with Unix `mv`. First, we need to recreate the\n"
"`krypton.txt` file:"

# code block
#: git-novice/_extras/discuss.md:396
msgid ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton again.'\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton again.'\n"
"~~~"

#: git-novice/_extras/discuss.md:403
msgid "Let us rename the file and see what Git can figured out by itself:"
msgstr "Let us rename the file and see what Git can figured out by itself:"

# code block
#: git-novice/_extras/discuss.md:405
msgid ""
"~~~\n"
"$ mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:411
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add/rm <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"        deleted:    krypton.txt\n"
"\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"    earth.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add/rm <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"        deleted:    krypton.txt\n"
"\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"    earth.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_extras/discuss.md:428
msgid ""
"Git has noticed that the file `krypton.txt` has disappeared from the\n"
"file system and a new file `earth.txt` has showed up."
msgstr ""
"Git has noticed that the file `krypton.txt` has disappeared from the\n"
"file system and a new file `earth.txt` has showed up."

#: git-novice/_extras/discuss.md:431
msgid "Add those changes to the staging area:"
msgstr "Add those changes to the staging area:"

# code block
#: git-novice/_extras/discuss.md:433
msgid ""
"~~~\n"
"$ git add krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add krypton.txt earth.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_extras/discuss.md:439
msgid ""
"~~~\n"
"On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    renamed:    krypton.txt -> earth.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    renamed:    krypton.txt -> earth.txt\n"
"\n"
"~~~"

#: git-novice/_extras/discuss.md:449
msgid ""
"Notice how Git has now figure out that the `krypton.txt` has not\n"
"disappeared it has simply been renamed."
msgstr ""
"Notice how Git has now figure out that the `krypton.txt` has not\n"
"disappeared it has simply been renamed."

#: git-novice/_extras/discuss.md:452
msgid "The final step, as before, is to commit our change to the repository:"
msgstr "The final step, as before, is to commit our change to the repository:"

# code block
#: git-novice/_extras/discuss.md:454
msgid ""
"~~~\n"
"$ git commit -m 'Superman's home is Earth, told you before.'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m 'Superman's home is Earth, told you before.'\n"
"~~~"

# Front Matter
#: git-novice/_extras/figures.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Figures\n"
"permalink: /figures/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Figures\n"
"permalink: /figures/\n"
"---"

# Front Matter
#: git-novice/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"

#: git-novice/_extras/guide.md:6
msgid ""
"Using a software tool to handle the versions of your project files\n"
"lets you focus on the more interesting/innovative aspects of your project."
msgstr ""
"Using a software tool to handle the versions of your project files\n"
"lets you focus on the more interesting/innovative aspects of your project."

# unordered list
#: git-novice/_extras/guide.md:9
msgid "*   Version control's advantages"
msgstr "*   Version control's advantages"

# unordered list
#: git-novice/_extras/guide.md:10
msgid "    *   It's easy to set up"
msgstr "    *   It's easy to set up"

# unordered list
#: git-novice/_extras/guide.md:11
msgid ""
"    *   Every copy of a Git repository is a full backup of a project and its "
"history"
msgstr ""
"    *   Every copy of a Git repository is a full backup of a project and its "
"history"

# unordered list
#: git-novice/_extras/guide.md:12
msgid ""
"    *   A few easy-to-remember commands are all you need for most day-to-day "
"version control tasks"
msgstr ""
"    *   A few easy-to-remember commands are all you need for most day-to-day "
"version control tasks"

# unordered list
#: git-novice/_extras/guide.md:13
msgid ""
"    *   The [GitHub][github] hosting service provides a web-based "
"collaboration service"
msgstr ""
"    *   The [GitHub][github] hosting service provides a web-based "
"collaboration service"

# unordered list
#: git-novice/_extras/guide.md:14
msgid "*   Two main concepts"
msgstr "*   Two main concepts"

# unordered list
#: git-novice/_extras/guide.md:15
msgid "    *   *commit*: a recorded set of changes in your project's files"
msgstr "    *   *commit*: a recorded set of changes in your project's files"

# unordered list
#: git-novice/_extras/guide.md:16
msgid "    *   *repository*: the history of all your project's commits"
msgstr "    *   *repository*: the history of all your project's commits"

# unordered list
#: git-novice/_extras/guide.md:17
msgid "*   Why use GitHub?"
msgstr "*   Why use GitHub?"

# unordered list
#: git-novice/_extras/guide.md:18
msgid "    *   No need for a server: easy to set up"
msgstr "    *   No need for a server: easy to set up"

# unordered list
#: git-novice/_extras/guide.md:19
msgid ""
"    *   GitHub's strong community: your colleagues are probably already there"
msgstr ""
"    *   GitHub's strong community: your colleagues are probably already there"

# header
#: git-novice/_extras/guide.md:21
msgid "## Overall"
msgstr "## Overall"

#: git-novice/_extras/guide.md:23
msgid ""
"Version control might be the most important topic we teach, but Git is\n"
"definitely the most complicated tool.  However, GitHub presently dominates "
"the\n"
"open software repository landscape, so the time and effort required to "
"teach\n"
"fundamental Git is justified and worthwhile."
msgstr ""
"Version control might be the most important topic we teach, but Git is\n"
"definitely the most complicated tool.  However, GitHub presently dominates "
"the\n"
"open software repository landscape, so the time and effort required to "
"teach\n"
"fundamental Git is justified and worthwhile."

#: git-novice/_extras/guide.md:28
msgid ""
"Because of this complexity, we don't teach novice learners about many\n"
"interesting topics, such as branching, hashes, and commit objects."
msgstr ""
"Because of this complexity, we don't teach novice learners about many\n"
"interesting topics, such as branching, hashes, and commit objects."

#: git-novice/_extras/guide.md:31
msgid ""
"Instead we try to convince them that version control is useful for "
"researchers\n"
"working in teams or not, because it is"
msgstr ""
"Instead we try to convince them that version control is useful for "
"researchers\n"
"working in teams or not, because it is"

# unordered list
#: git-novice/_extras/guide.md:34
msgid "*   a better way to \"undo\" changes,"
msgstr "*   a better way to \"undo\" changes,"

# unordered list
#: git-novice/_extras/guide.md:35
msgid "*   a better way to collaborate than mailing files back and forth, and"
msgstr "*   a better way to collaborate than mailing files back and forth, and"

# unordered list
#: git-novice/_extras/guide.md:36
msgid ""
"*   a better way to share your code and other scientific work with the world."
msgstr ""
"*   a better way to share your code and other scientific work with the world."

# header
#: git-novice/_extras/guide.md:38
msgid "## Teaching Notes"
msgstr "## Teaching Notes"

# unordered list
#: git-novice/_extras/guide.md:40
msgid ""
"*   You can \"split\" your shell so that recent commands remain in view "
"using [this](https://github.com/rgaiacs/swc-shell-split-window) script."
msgstr ""
"*   You can \"split\" your shell so that recent commands remain in view "
"using [this](https://github.com/rgaiacs/swc-shell-split-window) script."

# unordered list
#: git-novice/_extras/guide.md:42
msgid "*   Make sure the network is working *before* starting this lesson."
msgstr "*   Make sure the network is working *before* starting this lesson."

# unordered list
#: git-novice/_extras/guide.md:44
msgid ""
"*   Drawings are particularly useful in this lesson: if you have a "
"whiteboard,"
msgstr ""
"*   Drawings are particularly useful in this lesson: if you have a "
"whiteboard,"

#: git-novice/_extras/guide.md:45
msgid "    [use it][drawings]!"
msgstr "    [use it][drawings]!"

# unordered list
#: git-novice/_extras/guide.md:47
msgid "*   Version control is usually not the first subject in a workshop,"
msgstr "*   Version control is usually not the first subject in a workshop,"

#: git-novice/_extras/guide.md:48
msgid ""
"    so get learners to create a GitHub account after the session before.\n"
"    Remind learners that the username and email they use for GitHub (and "
"setup\n"
"    during Git configuration) will be viewable to the public by default.\n"
"    However, there are many reasons why a learner may not want their "
"personal\n"
"    information viewable, and GitHub has [resources for keeping an email "
"address\n"
"    private][github-privacy]."
msgstr ""
"    so get learners to create a GitHub account after the session before.\n"
"    Remind learners that the username and email they use for GitHub (and "
"setup\n"
"    during Git configuration) will be viewable to the public by default.\n"
"    However, there are many reasons why a learner may not want their "
"personal\n"
"    information viewable, and GitHub has [resources for keeping an email "
"address\n"
"    private][github-privacy]."

# unordered list
#: git-novice/_extras/guide.md:55
msgid "*   If some learners are using Windows, there will inevitably be issues"
msgstr ""
"*   If some learners are using Windows, there will inevitably be issues"

#: git-novice/_extras/guide.md:56
msgid ""
"    merging files with different line endings.  (Even if everyone's on\n"
"    some flavor of Unix, different editors may or may not add a\n"
"    newline to the last line of a file.) Take a moment to explain\n"
"    these issues, since learners will almost certainly trip over them\n"
"    again.  If learners are running into line ending problems, GitHub\n"
"    has a [page][github-line-endings] that helps with troubleshooting."
msgstr ""
"    merging files with different line endings.  (Even if everyone's on\n"
"    some flavor of Unix, different editors may or may not add a\n"
"    newline to the last line of a file.) Take a moment to explain\n"
"    these issues, since learners will almost certainly trip over them\n"
"    again.  If learners are running into line ending problems, GitHub\n"
"    has a [page][github-line-endings] that helps with troubleshooting."

# unordered list
#: git-novice/_extras/guide.md:63
msgid ""
"*   We don't use a Git GUI in these notes because we haven't found one that"
msgstr ""
"*   We don't use a Git GUI in these notes because we haven't found one that"

#: git-novice/_extras/guide.md:64
msgid ""
"    installs easily and runs reliably on the three major operating systems, "
"and\n"
"    because we want learners to understand what commands are being run.  "
"That\n"
"    said, instructors should demo a GUI on their desktop at some point "
"during\n"
"    this lesson and point learners at [this page][github-gui]."
msgstr ""
"    installs easily and runs reliably on the three major operating systems, "
"and\n"
"    because we want learners to understand what commands are being run.  "
"That\n"
"    said, instructors should demo a GUI on their desktop at some point "
"during\n"
"    this lesson and point learners at [this page][github-gui]."

# unordered list
#: git-novice/_extras/guide.md:69
msgid "*   Instructors should show learners graphical diff/merge tools like"
msgstr "*   Instructors should show learners graphical diff/merge tools like"

#: git-novice/_extras/guide.md:70
msgid "    [DiffMerge][diffmerge]."
msgstr "    [DiffMerge][diffmerge]."

# unordered list
#: git-novice/_extras/guide.md:72
msgid ""
"*   When appropriate, explain that we teach Git rather than CVS, Subversion, "
"or"
msgstr ""
"*   When appropriate, explain that we teach Git rather than CVS, Subversion, "
"or"

#: git-novice/_extras/guide.md:73
msgid ""
"    Mercurial primarily because of GitHub's growing popularity: CVS and\n"
"    Subversion are now seen as legacy systems, and Mercurial isn't nearly "
"as\n"
"    widely used in the sciences right now."
msgstr ""
"    Mercurial primarily because of GitHub's growing popularity: CVS and\n"
"    Subversion are now seen as legacy systems, and Mercurial isn't nearly "
"as\n"
"    widely used in the sciences right now."

# unordered list
#: git-novice/_extras/guide.md:77
msgid "*   Further resources:"
msgstr "*   Further resources:"

# unordered list
#: git-novice/_extras/guide.md:78
msgid "    *    [git-it][git-it] is a self-paced command-line Git demo,"
msgstr "    *    [git-it][git-it] is a self-paced command-line Git demo,"

#: git-novice/_extras/guide.md:79
msgid ""
"         with [git-it-electron][git-it-electron] its GitHub Desktop "
"successor.\n"
"    *    [Code School][code-school] has a free interactive course, [Try Git]"
"[try-git].\n"
"    *    for instructors, [the Git parable][git-parable] is useful "
"background reading"
msgstr ""
"         with [git-it-electron][git-it-electron] its GitHub Desktop "
"successor.\n"
"    *    [Code School][code-school] has a free interactive course, [Try Git]"
"[try-git].\n"
"    *    for instructors, [the Git parable][git-parable] is useful "
"background reading"

# header
#: git-novice/_extras/guide.md:83
msgid "## [Automated Version Control]({{ page.root }}/01-basics/)"
msgstr "## [Automated Version Control]({{ page.root }}/01-basics/)"

# unordered list
#: git-novice/_extras/guide.md:85
msgid ""
"*   Ask, \"Who uses 'undo' in their editor?\" All say \"Me\". 'Undo' is the "
"simplest"
msgstr ""
"*   Ask, \"Who uses 'undo' in their editor?\" All say \"Me\". 'Undo' is the "
"simplest"

#: git-novice/_extras/guide.md:86
msgid "    form of version control."
msgstr "    form of version control."

# unordered list
#: git-novice/_extras/guide.md:88
msgid ""
"*   Give learners a five-minute overview of what version control does for "
"them"
msgstr ""
"*   Give learners a five-minute overview of what version control does for "
"them"

#: git-novice/_extras/guide.md:89
msgid ""
"    before diving into the watch-and-do practicals.  Most of them will have\n"
"    tried to co-author papers by emailing files back and forth, or will "
"have\n"
"    biked into the office only to realize that the USB key with last "
"night's\n"
"    work is still on the kitchen table.  Instructors can also make jokes "
"about\n"
"    directories with names like \"final version\", \"final version revised"
"\",\n"
"    \"final version with reviewer three's corrections\", \"really final "
"version\",\n"
"    and, \"come on this really has to be the last version\" to motivate "
"version\n"
"    control as a better way to collaborate and as a better way to back work "
"up."
msgstr ""
"    before diving into the watch-and-do practicals.  Most of them will have\n"
"    tried to co-author papers by emailing files back and forth, or will "
"have\n"
"    biked into the office only to realize that the USB key with last "
"night's\n"
"    work is still on the kitchen table.  Instructors can also make jokes "
"about\n"
"    directories with names like \"final version\", \"final version revised"
"\",\n"
"    \"final version with reviewer three's corrections\", \"really final "
"version\",\n"
"    and, \"come on this really has to be the last version\" to motivate "
"version\n"
"    control as a better way to collaborate and as a better way to back work "
"up."

# header
#: git-novice/_extras/guide.md:98
msgid "## [Setting Up Git]({{ page.root }}/02-setup/)"
msgstr "## [Setting Up Git]({{ page.root }}/02-setup/)"

# unordered list
#: git-novice/_extras/guide.md:100
msgid ""
"*   We suggest instructors and students use `nano` as the text editor for "
"this"
msgstr ""
"*   We suggest instructors and students use `nano` as the text editor for "
"this"

#: git-novice/_extras/guide.md:101
msgid "    lessons because"
msgstr "    lessons because"

# unordered list
#: git-novice/_extras/guide.md:103
msgid "    *   it runs in all three major operating systems,"
msgstr "    *   it runs in all three major operating systems,"

# unordered list
#: git-novice/_extras/guide.md:104
msgid ""
"    *   it runs inside the shell (switching windows can be confusing to "
"students), and"
msgstr ""
"    *   it runs inside the shell (switching windows can be confusing to "
"students), and"

# unordered list
#: git-novice/_extras/guide.md:105
msgid "    *   it has shortcut help at the bottom of the window."
msgstr "    *   it has shortcut help at the bottom of the window."

#: git-novice/_extras/guide.md:107
msgid ""
"    Please point out to students during setup that they can and should use\n"
"    another text editor if they're already familiar with it."
msgstr ""
"    Please point out to students during setup that they can and should use\n"
"    another text editor if they're already familiar with it."

# unordered list
#: git-novice/_extras/guide.md:110
msgid ""
"*   When setting up Git, be very clear what learners have to enter: it is"
msgstr ""
"*   When setting up Git, be very clear what learners have to enter: it is"

#: git-novice/_extras/guide.md:111
msgid ""
"    common for them to edit the instructor's details (e.g. email).  Check "
"at\n"
"    the end using `git config --list`."
msgstr ""
"    common for them to edit the instructor's details (e.g. email).  Check "
"at\n"
"    the end using `git config --list`."

# header
#: git-novice/_extras/guide.md:114
msgid "## [Creating a Repository]({{ page.root }}/03-create/)"
msgstr "## [Creating a Repository]({{ page.root }}/03-create/)"

# unordered list
#: git-novice/_extras/guide.md:116
msgid ""
"*   When you do `git status`, Mac users may see a `.DS_Store` file showing as"
msgstr ""
"*   When you do `git status`, Mac users may see a `.DS_Store` file showing as"

#: git-novice/_extras/guide.md:117
msgid "    untracked. This a file that Mac OS creates in each directory."
msgstr "    untracked. This a file that Mac OS creates in each directory."

# unordered list
#: git-novice/_extras/guide.md:119
msgid ""
"*   The challenge \"Places to create repositories\" tries to reinforce the "
"idea"
msgstr ""
"*   The challenge \"Places to create repositories\" tries to reinforce the "
"idea"

#: git-novice/_extras/guide.md:120
msgid ""
"    that the `.git` folder contains the whole Git repo and deleting this "
"folder\n"
"    undoes a `git init`. It also gives the learner the way to fix the "
"common\n"
"    mistake of putting unwanted folders (like `Desktop`) under version "
"control."
msgstr ""
"    that the `.git` folder contains the whole Git repo and deleting this "
"folder\n"
"    undoes a `git init`. It also gives the learner the way to fix the "
"common\n"
"    mistake of putting unwanted folders (like `Desktop`) under version "
"control."

#: git-novice/_extras/guide.md:124
msgid ""
"    Instead of removing the `.git` folder directly, you can choose to move "
"it\n"
"    first to a safer directory and remove it from there:"
msgstr ""
"    Instead of removing the `.git` folder directly, you can choose to move "
"it\n"
"    first to a safer directory and remove it from there:"

#: git-novice/_extras/guide.md:127
msgid ""
"    ~~~\n"
"    $ mv .git temp_git\n"
"    $ rm -rf  temp_git\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""
"    ~~~\n"
"    $ mv .git temp_git\n"
"    $ rm -rf  temp_git\n"
"    ~~~\n"
"    {: .language-bash}"

#: git-novice/_extras/guide.md:133
msgid ""
"    The challenge suggests that it is a bad idea to create a Git repo inside "
"another repo.\n"
"    For more discussion on this topic, please see [this issue][repos-in-"
"repos]."
msgstr ""
"    The challenge suggests that it is a bad idea to create a Git repo inside "
"another repo.\n"
"    For more discussion on this topic, please see [this issue][repos-in-"
"repos]."

# header
#: git-novice/_extras/guide.md:136
msgid "## [Tracking Changes]({{ page.root }}/04-changes/)"
msgstr "## [Tracking Changes]({{ page.root }}/04-changes/)"

# unordered list
#: git-novice/_extras/guide.md:138
msgid ""
"*   It's important that learners do a full commit cycle by themselves (make"
msgstr ""
"*   It's important that learners do a full commit cycle by themselves (make"

#: git-novice/_extras/guide.md:139
msgid ""
"    changes, `git diff`, `git add`, and `git commit`). The \"`bio` repository"
"\"\n"
"    challenge does that."
msgstr ""
"    changes, `git diff`, `git add`, and `git commit`). The \"`bio` repository"
"\"\n"
"    challenge does that."

# unordered list
#: git-novice/_extras/guide.md:142
msgid ""
"*   This is a good moment to show a diff with a graphical diff tool. If you"
msgstr ""
"*   This is a good moment to show a diff with a graphical diff tool. If you"

#: git-novice/_extras/guide.md:143
msgid "    skip it because you're short on time, show it once in GitHub."
msgstr "    skip it because you're short on time, show it once in GitHub."

# unordered list
#: git-novice/_extras/guide.md:145
msgid ""
"*   One thing may cause confusion is recovering old versions.  If, instead of"
msgstr ""
"*   One thing may cause confusion is recovering old versions.  If, instead of"

#: git-novice/_extras/guide.md:146
msgid ""
"    doing `$ git checkout f22b25e mars.txt`, someone does `$ git checkout\n"
"    f22b25e`, they wind up in the \"detached HEAD\" state and confusion "
"abounds.\n"
"    It's then possible to keep on committing, but things like `git push "
"origin\n"
"    master` a bit later will not give easily comprehensible results.  It "
"also\n"
"    makes it look like commits can be lost.  To \"re-attach\" HEAD, use\n"
"    `git checkout master`."
msgstr ""
"    doing `$ git checkout f22b25e mars.txt`, someone does `$ git checkout\n"
"    f22b25e`, they wind up in the \"detached HEAD\" state and confusion "
"abounds.\n"
"    It's then possible to keep on committing, but things like `git push "
"origin\n"
"    master` a bit later will not give easily comprehensible results.  It "
"also\n"
"    makes it look like commits can be lost.  To \"re-attach\" HEAD, use\n"
"    `git checkout master`."

# unordered list
#: git-novice/_extras/guide.md:153
msgid ""
"*   This is a good moment to show a log within a Git GUI. If you skip it"
msgstr ""
"*   This is a good moment to show a log within a Git GUI. If you skip it"

#: git-novice/_extras/guide.md:154
msgid "    because you're short on time, show it once in GitHub."
msgstr "    because you're short on time, show it once in GitHub."

# header
#: git-novice/_extras/guide.md:156
msgid "## [Ignoring Things]({{ page.root }}/06-ignore/)"
msgstr "## [Ignoring Things]({{ page.root }}/06-ignore/)"

#: git-novice/_extras/guide.md:158
msgid ""
"Just remember that you can use wildcards and regular expressions to ignore "
"a\n"
"particular set of files in `.gitignore`."
msgstr ""
"Just remember that you can use wildcards and regular expressions to ignore "
"a\n"
"particular set of files in `.gitignore`."

# header
#: git-novice/_extras/guide.md:161
msgid "## [Remotes in GitHub]({{ page.root }}/07-github/)"
msgstr "## [Remotes in GitHub]({{ page.root }}/07-github/)"

# unordered list
#: git-novice/_extras/guide.md:163
msgid ""
"*   Make it clear that Git and GitHub are not the same thing: Git is an open"
msgstr ""
"*   Make it clear that Git and GitHub are not the same thing: Git is an open"

#: git-novice/_extras/guide.md:164
msgid ""
"    source version control tool, GitHub is a company that hosts Git\n"
"    repositories in the web and provides a web interface to interact with "
"repos\n"
"    they host."
msgstr ""
"    source version control tool, GitHub is a company that hosts Git\n"
"    repositories in the web and provides a web interface to interact with "
"repos\n"
"    they host."

# unordered list
#: git-novice/_extras/guide.md:168
msgid ""
"*   If your learners are advanced enough to be comfortable with SSH, tell "
"them"
msgstr ""
"*   If your learners are advanced enough to be comfortable with SSH, tell "
"them"

#: git-novice/_extras/guide.md:169
msgid ""
"    they can use keys to authenticate on GitHub instead of passwords, but "
"don't\n"
"    try to set this up during class: it takes too long, and is a "
"distraction\n"
"    from the core ideas of the lesson."
msgstr ""
"    they can use keys to authenticate on GitHub instead of passwords, but "
"don't\n"
"    try to set this up during class: it takes too long, and is a "
"distraction\n"
"    from the core ideas of the lesson."

# unordered list
#: git-novice/_extras/guide.md:173
msgid ""
"*   It is very useful to draw a diagram showing the different repositories"
msgstr ""
"*   It is very useful to draw a diagram showing the different repositories"

#: git-novice/_extras/guide.md:174
msgid "    involved."
msgstr "    involved."

# header
#: git-novice/_extras/guide.md:176
msgid "## [Collaborating]({{ page.root }}/08-collab/)"
msgstr "## [Collaborating]({{ page.root }}/08-collab/)"

# unordered list
#: git-novice/_extras/guide.md:178
msgid "*   Decide in advance whether all the learners will work in one shared"
msgstr "*   Decide in advance whether all the learners will work in one shared"

#: git-novice/_extras/guide.md:179
msgid ""
"    repository, or whether they will work in pairs (or other small groups) "
"in\n"
"    separate repositories.  The former is easier to set up; the latter runs\n"
"    more smoothly."
msgstr ""
"    repository, or whether they will work in pairs (or other small groups) "
"in\n"
"    separate repositories.  The former is easier to set up; the latter runs\n"
"    more smoothly."

# unordered list
#: git-novice/_extras/guide.md:183
msgid ""
"*   Role playing between two instructors can be effective when teaching the"
msgstr ""
"*   Role playing between two instructors can be effective when teaching the"

#: git-novice/_extras/guide.md:184
msgid ""
"    collaboration and conflict sections of the lesson.  One instructor can "
"play\n"
"    the role of the repository owner, while the second instructor can play "
"the\n"
"    role of the collaborator.  If it is possible, try to use two projectors "
"so\n"
"    that the computer screens of both instructors can be seen.  This makes "
"for\n"
"    a very clear illustration to the students as to who does what."
msgstr ""
"    collaboration and conflict sections of the lesson.  One instructor can "
"play\n"
"    the role of the repository owner, while the second instructor can play "
"the\n"
"    role of the collaborator.  If it is possible, try to use two projectors "
"so\n"
"    that the computer screens of both instructors can be seen.  This makes "
"for\n"
"    a very clear illustration to the students as to who does what."

# unordered list
#: git-novice/_extras/guide.md:190
msgid ""
"*   It is also effective to pair up students during this lesson and assign "
"one"
msgstr ""
"*   It is also effective to pair up students during this lesson and assign "
"one"

#: git-novice/_extras/guide.md:191
msgid ""
"    member of the pair to take the role of the owner and the other the role "
"of\n"
"    the collaborator.  In this setup, challenges can include asking the\n"
"    collaborator to make a change, commit it, and push the change to the "
"remote\n"
"    repository so that the owner can then retrieve it, and vice-versa.  The\n"
"    role playing between the instructors can get a bit \"dramatic\" in the\n"
"    conflicts part of the lesson if the instructors want to inject some "
"humor\n"
"    into the room."
msgstr ""
"    member of the pair to take the role of the owner and the other the role "
"of\n"
"    the collaborator.  In this setup, challenges can include asking the\n"
"    collaborator to make a change, commit it, and push the change to the "
"remote\n"
"    repository so that the owner can then retrieve it, and vice-versa.  The\n"
"    role playing between the instructors can get a bit \"dramatic\" in the\n"
"    conflicts part of the lesson if the instructors want to inject some "
"humor\n"
"    into the room."

# unordered list
#: git-novice/_extras/guide.md:199
msgid ""
"*   If you don't have two projectors, have two instructors at the front of "
"the"
msgstr ""
"*   If you don't have two projectors, have two instructors at the front of "
"the"

#: git-novice/_extras/guide.md:200
msgid ""
"    room.  Each instructor does their piece of the collaboration "
"demonstration\n"
"    on their own computer and then passes the projector cord back and forth\n"
"    with the other instructor when it's time for them to do the other part "
"of\n"
"    the collaborative workflow.  It takes less than 10 seconds for each\n"
"    switchover, so it doesn't interrupt the flow of the lesson.\n"
"    And of course it helps to give each of the instructors a different-"
"colored\n"
"    hat, or put different-colored sticky notes on their foreheads."
msgstr ""
"    room.  Each instructor does their piece of the collaboration "
"demonstration\n"
"    on their own computer and then passes the projector cord back and forth\n"
"    with the other instructor when it's time for them to do the other part "
"of\n"
"    the collaborative workflow.  It takes less than 10 seconds for each\n"
"    switchover, so it doesn't interrupt the flow of the lesson.\n"
"    And of course it helps to give each of the instructors a different-"
"colored\n"
"    hat, or put different-colored sticky notes on their foreheads."

# unordered list
#: git-novice/_extras/guide.md:208
msgid ""
"*   If you're the only instructor, the best way to create is clone the two"
msgstr ""
"*   If you're the only instructor, the best way to create is clone the two"

#: git-novice/_extras/guide.md:209
msgid ""
"    repos in your Desktop, but under different names, e.g., pretend one is "
"your\n"
"    computer at work:"
msgstr ""
"    repos in your Desktop, but under different names, e.g., pretend one is "
"your\n"
"    computer at work:"

#: git-novice/_extras/guide.md:212
msgid ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git planets-at-work\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""
"    ~~~\n"
"    $ git clone https://github.com/nobita/planets.git planets-at-work\n"
"    ~~~\n"
"    {: .language-bash}"

# unordered list
#: git-novice/_extras/guide.md:217
msgid ""
"*   It's very common that learners mistype the remote alias or the remote URL"
msgstr ""
"*   It's very common that learners mistype the remote alias or the remote URL"

#: git-novice/_extras/guide.md:218
msgid ""
"    when adding a remote, so they cannot `push`. You can diagnose this with\n"
"    `git remote -v` and checking carefully for typos.\n"
"    - To fix a wrong alias, you can do `git remote rename <old> <new>`.\n"
"    - To fix a wrong URL, you can do `git remote set-url <alias> <newurl> `."
msgstr ""
"    when adding a remote, so they cannot `push`. You can diagnose this with\n"
"    `git remote -v` and checking carefully for typos.\n"
"    - To fix a wrong alias, you can do `git remote rename <old> <new>`.\n"
"    - To fix a wrong URL, you can do `git remote set-url <alias> <newurl> `."

# unordered list
#: git-novice/_extras/guide.md:223
msgid ""
"*   Before cloning the repo, be sure that nobody is inside another repo. The"
msgstr ""
"*   Before cloning the repo, be sure that nobody is inside another repo. The"

#: git-novice/_extras/guide.md:224
msgid ""
"    best way to achieve this is moving to the `Desktop` before cloning: `cd "
"&&\n"
"    cd Desktop`."
msgstr ""
"    best way to achieve this is moving to the `Desktop` before cloning: `cd "
"&&\n"
"    cd Desktop`."

# unordered list
#: git-novice/_extras/guide.md:227
msgid ""
"*   If both repos are in the `Desktop`, have them to clone their collaborator"
msgstr ""
"*   If both repos are in the `Desktop`, have them to clone their collaborator"

#: git-novice/_extras/guide.md:228
msgid "    repo under a given directory using a second argument:"
msgstr "    repo under a given directory using a second argument:"

#: git-novice/_extras/guide.md:230
msgid ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git vlad-planet\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""
"    ~~~\n"
"    $ git clone https://github.com/nobita/planets.git vlad-planet\n"
"    ~~~\n"
"    {: .language-bash}"

# unordered list
#: git-novice/_extras/guide.md:235
msgid ""
"*   The most common mistake is that learners `push` before `pull`ing. If they"
msgstr ""
"*   The most common mistake is that learners `push` before `pull`ing. If they"

#: git-novice/_extras/guide.md:236
msgid "    `pull` afterward, they may get a conflict."
msgstr "    `pull` afterward, they may get a conflict."

# unordered list
#: git-novice/_extras/guide.md:238
msgid ""
"*   Conflicts, sometimes weird, will start to arise. Stay tight: conflicts "
"are"
msgstr ""
"*   Conflicts, sometimes weird, will start to arise. Stay tight: conflicts "
"are"

#: git-novice/_extras/guide.md:239
msgid "    next."
msgstr "    next."

# header
#: git-novice/_extras/guide.md:241
msgid "## [Conflicts]({{ page.root }}/09-conflict/)"
msgstr "## [Conflicts]({{ page.root }}/09-conflict/)"

# unordered list
#: git-novice/_extras/guide.md:243
msgid ""
"*   Expect the learners to make mistakes. Expect *yourself* to make "
"mistakes. This"
msgstr ""
"*   Expect the learners to make mistakes. Expect *yourself* to make "
"mistakes. This"

#: git-novice/_extras/guide.md:244
msgid "    happens because it is late in the lesson and everyone is tired."
msgstr "    happens because it is late in the lesson and everyone is tired."

# unordered list
#: git-novice/_extras/guide.md:246
msgid ""
"*   If you're the only instructor, the best way to create a conflict is:"
msgstr ""
"*   If you're the only instructor, the best way to create a conflict is:"

# unordered list
#: git-novice/_extras/guide.md:248
msgid ""
"    *   Clone your repo in a different directory, pretending is your "
"computer at"
msgstr ""
"    *   Clone your repo in a different directory, pretending is your "
"computer at"

#: git-novice/_extras/guide.md:249
msgid ""
"        work: `git clone https://github.com/vlad/planets.git planets-at-"
"work`.\n"
"    *   At the office, you make a change, commit and push.\n"
"    *   At your laptop repo, you (forget to pull and) make a change, commit "
"and\n"
"        try to push.\n"
"    *   `git pull` now and show the conflict."
msgstr ""
"        work: `git clone https://github.com/nobita/planets.git planets-at-"
"work`.\n"
"    *   At the office, you make a change, commit and push.\n"
"    *   At your laptop repo, you (forget to pull and) make a change, commit "
"and\n"
"        try to push.\n"
"    *   `git pull` now and show the conflict."

# unordered list
#: git-novice/_extras/guide.md:255
msgid ""
"*   Learners usually forget to `git add` the file after fixing the conflict "
"and"
msgstr ""
"*   Learners usually forget to `git add` the file after fixing the conflict "
"and"

#: git-novice/_extras/guide.md:256
msgid "    just (try to) commit. You can diagnose this with `git status`."
msgstr "    just (try to) commit. You can diagnose this with `git status`."

# unordered list
#: git-novice/_extras/guide.md:258
msgid "*   Remember that you can discard one of the two parents of the merge:"
msgstr "*   Remember that you can discard one of the two parents of the merge:"

# unordered list
#: git-novice/_extras/guide.md:260
msgid ""
"    *   discard the remote file, `git checkout --ours conflicted_file.txt`"
msgstr ""
"    *   discard the remote file, `git checkout --ours conflicted_file.txt`"

# unordered list
#: git-novice/_extras/guide.md:261
msgid ""
"    *   discard the local file, `git checkout --theirs conflicted_file.txt`"
msgstr ""
"    *   discard the local file, `git checkout --theirs conflicted_file.txt`"

#: git-novice/_extras/guide.md:263
msgid ""
"    You still have to `git add` and `git commit` after this. This is\n"
"    particularly useful when working with binary files."
msgstr ""
"    You still have to `git add` and `git commit` after this. This is\n"
"    particularly useful when working with binary files."

# header
#: git-novice/_extras/guide.md:266
msgid "## [Open Science]({{ page.root }}/10-open/)"
msgstr "## [Open Science]({{ page.root }}/10-open/)"

# header
#: git-novice/_extras/guide.md:268
msgid "## [Licensing]({{ page.root }}/11-licensing/)"
msgstr "## [Licensing]({{ page.root }}/11-licensing/)"

#: git-novice/_extras/guide.md:270
msgid ""
"We teach about licensing because questions about who owns what, or can use\n"
"what, arise naturally once we start talking about using public services "
"like\n"
"GitHub to store files. Also, the discussion gives learners a chance to "
"catch\n"
"their breath after what is often a frustrating couple of hours."
msgstr ""
"We teach about licensing because questions about who owns what, or can use\n"
"what, arise naturally once we start talking about using public services "
"like\n"
"GitHub to store files. Also, the discussion gives learners a chance to "
"catch\n"
"their breath after what is often a frustrating couple of hours."

# header
#: git-novice/_extras/guide.md:275
msgid "## [Citation]({{ page.root }}/12-citation/)"
msgstr "## [Citation]({{ page.root }}/12-citation/)"

# header
#: git-novice/_extras/guide.md:277
msgid "## [Hosting]({{ page.root }}/13-hosting/)"
msgstr "## [Hosting]({{ page.root }}/13-hosting/)"

#: git-novice/_extras/guide.md:279
msgid ""
"A common concern for learners is having their work publicly available on\n"
"GitHub.  While we encourage open science, sometimes private repos are the\n"
"only choice. It's always interesting to mention the options to have\n"
"web-hosted private repositories."
msgstr ""
"A common concern for learners is having their work publicly available on\n"
"GitHub.  While we encourage open science, sometimes private repos are the\n"
"only choice. It's always interesting to mention the options to have\n"
"web-hosted private repositories."

#: git-novice/_extras/guide.md:284
msgid ""
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[drawings]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parable]: http://tom.preston-werner.com/2009/05/19/the-git-parable."
"html\n"
"[github]: https://github.com/\n"
"[github-gui]: https://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://help.github.com/articles/dealing-with-line-"
"endings/#platform-all\n"
"[github-privacy]: https://help.github.com/articles/keeping-your-email-"
"address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"
msgstr ""
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[drawings]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parable]: http://tom.preston-werner.com/2009/05/19/the-git-parable."
"html\n"
"[github]: https://github.com/\n"
"[github-gui]: https://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://help.github.com/articles/dealing-with-line-"
"endings/#platform-all\n"
"[github-privacy]: https://help.github.com/articles/keeping-your-email-"
"address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"

# Front Matter
#: git-novice/aio.md:1
msgid ""
"---\n"
"layout: page \n"
"permalink: /aio/\n"
"---"
msgstr ""
"---\n"
"layout: page \n"
"permalink: /aio/\n"
"---"

# inline html
#: git-novice/aio.md:5
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

#: git-novice/aio.md:31
msgid ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"

# Front Matter
#: git-novice/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"

#: git-novice/index.md:6
msgid ""
"Wolfman and Dracula have been hired by Universal Missions (a space\n"
"services spinoff from Euphoric State University) to investigate if it\n"
"is possible to send their next planetary lander to Mars.  They want to\n"
"be able to work on the plans at the same time, but they have run into\n"
"problems doing this in the past.  If they take turns, each one will\n"
"spend a lot of time waiting for the other to finish, but if they work\n"
"on their own copies and email changes back and forth things will be\n"
"lost, overwritten, or duplicated."
msgstr ""
"ドラえもんとのび太はに火星に惑星無人探査機を送ることができるかどうか、\n"
"検討するためにユニバーサル・ミッションズ（ユーフォーリック州立大学の\n"
"スピンオフ宇宙サービス）に雇われました。 彼らはそれぞれ同時に計画を\n"
"作りたいのですが、前にもこのような仕事をしようとしたら困ったことが\n"
"ありました。一人ずつするにと、待っている時間がもったいないですが、\n"
"それぞれ自分のコピーを編集して、メールで添付ファイルを送ったりすると\n"
"情報の喪失や上書き、複製などといった問題が起こります。"

#: git-novice/index.md:15
msgid ""
"A colleague suggests using [version control]({{ page.root }}/"
"reference#version-control) to\n"
"manage their work. Version control is better than mailing files back and "
"forth:"
msgstr ""
"同僚は、[バーションの管理は]({{page.root}} / reference＃version-control)を"
"使って作業を\n"
"管理することを提案しています。 バーションの管理を使うはファイルを前後にメール"
"するよりも優れています："

# unordered list
#: git-novice/index.md:18
msgid "*   Nothing that is committed to version control is ever lost, unless"
msgstr "*   本当に消そうとしない限り、バージョン管理にコミットされているものは"

#: git-novice/index.md:19
msgid ""
"    you work really, really hard at it. Since all old versions of\n"
"    files are saved, it's always possible to go back in time to see\n"
"    exactly who wrote what on a particular day, or what version of a\n"
"    program was used to generate a particular set of results."
msgstr ""
"    失われることはありません。古いバージョンのファイルは\n"
"    すべて保存されているため、特定の日に誰が何を書き込んだのか、\n"
"    特定の結果を生成するためにどのバージョンのプログラムが使用されたのかな"
"ど、\n"
"    正確に確認することが可能です。"

# unordered list
#: git-novice/index.md:24
msgid ""
"*   As we have this record of who made what changes when, we know who to ask"
msgstr "*   誰が何をいつ変更したのかという記録があるため、後に問題が"

#: git-novice/index.md:25
msgid ""
"    if we have questions later on, and, if needed, revert to a previous\n"
"    version, much like the \"undo\" feature in an editor."
msgstr ""
"    生じた場合、連絡するべき人が分かる上に必要に応じて\n"
"    \"元に戻す\"機能のように、以前のバージョンに戻すことができます。"

# unordered list
#: git-novice/index.md:28
msgid ""
"*   When several people collaborate in the same project, it's possible to"
msgstr "*   同じプロジェクトで複数の人が協力し合う場合、"

#: git-novice/index.md:29
msgid ""
"    accidentally overlook or overwrite someone's changes. The version "
"control\n"
"    system automatically notifies users whenever there's a conflict between "
"one\n"
"    person's work and another's."
msgstr ""
"    間違って誰かの変更を見落としたり上書きしたりする可能性があります。\n"
"    バージョン管理システムは、二つの変更点の間に不一致がある場合、\n"
"    自動的にユーザーに知らせてくれます。"

#: git-novice/index.md:33
msgid ""
"Teams are not the only ones to benefit from version control: lone\n"
"researchers can benefit immensely.  Keeping a record of what was\n"
"changed, when, and why is extremely useful for all researchers if they\n"
"ever need to come back to the project later on (e.g., a year later,\n"
"when memory has faded)."
msgstr ""
"バージョン管理を使うことによって得をするのはチームだけではありません: 個人で"
"作業をしている\n"
"研究者にもメリットがあります。何が、いつ、何故変わったのかを\n"
"記録しておくことは、後で昔のプロジェクトを見返すことになった場合などに\n"
"（例えば、1年後、プロジェクトの詳細を忘れてしまった時などに）、\n"
"非常に便利です。"

#: git-novice/index.md:39
msgid ""
"Version control is the lab notebook of the digital world: it's what\n"
"professionals use to keep track of what they've done and to\n"
"collaborate with other people.  Every large software development\n"
"project relies on it, and most programmers use it for their small jobs\n"
"as well.  And it isn't just for software: books,\n"
"papers, small data sets, and anything that changes over time or needs\n"
"to be shared can and should be stored in a version control system."
msgstr ""
"Version control is the lab notebook of the digital world: it's what\n"
"professionals use to keep track of what they've done and to\n"
"collaborate with other people.  Every large software development\n"
"project relies on it, and most programmers use it for their small jobs\n"
"as well.  And it isn't just for software: books,\n"
"papers, small data sets, and anything that changes over time or needs\n"
"to be shared can and should be stored in a version control system."

# blockquote, which can be cascaded
#: git-novice/index.md:47
msgid "> ## Prerequisites"
msgstr "> ## Prerequisites"

#: git-novice/index.md:48
msgid ""
">\n"
"> In this lesson we use Git from the Unix Shell.\n"
"> Some previous experience with the shell is expected,\n"
"> *but isn't mandatory*."
msgstr ""
">\n"
"> In this lesson we use Git from the Unix Shell.\n"
"> Some previous experience with the shell is expected,\n"
"> *but isn't mandatory*."

# SC/DC Template label
#: git-novice/index.md:52
msgid "{: .prereq}"
msgstr "{: .prereq}"

# Front Matter
#: git-novice/reference.md:1
msgid ""
"---\n"
"layout: reference\n"
"\n"
"---"
msgstr ""
"---\n"
"layout: reference\n"
"\n"
"---"

# header
#: git-novice/reference.md:6
msgid "## Git Cheatsheets for Quick Reference"
msgstr "## Git Cheatsheets for Quick Reference"

# unordered list
#: git-novice/reference.md:8
msgid ""
"*   A great [printable git cheatsheet](https://services.github.com/on-demand/"
"downloads/github-git-cheat-sheet.pdf) is available in PDF from the"
msgstr ""
"*   A great [printable git cheatsheet](https://services.github.com/on-demand/"
"downloads/github-git-cheat-sheet.pdf) is available in PDF from the"

#: git-novice/reference.md:9
msgid ""
"[GitHub training website](https://services.github.com/resources/).\n"
"*   An [interactive one-page visualisation](http://ndpsoftware.com/git-"
"cheatsheet.html)\n"
"    about the relationships between workspace, staging area, local "
"repository, upstream repository, and the commands associated with each (with "
"explanations).\n"
"*   Both resources are also available in other languages (e.g. Spanish, "
"French, and more).\n"
"* \"[Happy Git and GitHub for the useR](http://happygitwithr.com)\" is an "
"accessible, free online book by Jenny Bryan on how to setup and use git and "
"GitHub with specific references on the integration of git with RStudio and "
"working with git in R."
msgstr ""
"[GitHub training website](https://services.github.com/resources/).\n"
"*   An [interactive one-page visualisation](http://ndpsoftware.com/git-"
"cheatsheet.html)\n"
"    about the relationships between workspace, staging area, local "
"repository, upstream repository, and the commands associated with each (with "
"explanations).\n"
"*   Both resources are also available in other languages (e.g. Spanish, "
"French, and more).\n"
"* \"[Happy Git and GitHub for the useR](http://happygitwithr.com)\" is an "
"accessible, free online book by Jenny Bryan on how to setup and use git and "
"GitHub with specific references on the integration of git with RStudio and "
"working with git in R."

# header
#: git-novice/reference.md:15
msgid "## Glossary"
msgstr "## Glossary"

#: git-novice/reference.md:17
msgid ""
"{:auto_ids}\n"
"changeset\n"
":   A group of changes to one or more files that are or will be added\n"
"    to a single [commit](#commit) in a [version control](#version-control)\n"
"    [repository](#repository)."
msgstr ""
"{:auto_ids}\n"
"changeset\n"
":   A group of changes to one or more files that are or will be added\n"
"    to a single [commit](#commit) in a [version control](#version-control)\n"
"    [repository](#repository)."

#: git-novice/reference.md:23
msgid ""
"commit\n"
":   To record the current state of a set of files (a [changeset]"
"(#changeset))\n"
"    in a [version control](#version-control) [repository](#repository). As a "
"noun,\n"
"    the result of committing, i.e. a recorded changeset in a repository.\n"
"    If a commit contains changes to multiple files,\n"
"    all of the changes are recorded together."
msgstr ""
"commit\n"
":   To record the current state of a set of files (a [changeset]"
"(#changeset))\n"
"    in a [version control](#version-control) [repository](#repository). As a "
"noun,\n"
"    the result of committing, i.e. a recorded changeset in a repository.\n"
"    If a commit contains changes to multiple files,\n"
"    all of the changes are recorded together."

#: git-novice/reference.md:30
msgid ""
"conflict\n"
":   A change made by one user of a [version control system](#version-"
"control)\n"
"    that is incompatible with changes made by other users.\n"
"    Helping users [resolve](#resolve) conflicts\n"
"    is one of version control's major tasks."
msgstr ""
"conflict\n"
":   A change made by one user of a [version control system](#version-"
"control)\n"
"    that is incompatible with changes made by other users.\n"
"    Helping users [resolve](#resolve) conflicts\n"
"    is one of version control's major tasks."

#: git-novice/reference.md:36
msgid ""
"HTTP\n"
":   The Hypertext Transfer [Protocol](#protocol) used for sharing web pages "
"and other data\n"
"    on the World Wide Web."
msgstr ""
"HTTP\n"
":   The Hypertext Transfer [Protocol](#protocol) used for sharing web pages "
"and other data\n"
"    on the World Wide Web."

#: git-novice/reference.md:40
msgid ""
"merge\n"
":   (a repository): To reconcile two sets of changes to a\n"
"    [repository](#repository)."
msgstr ""
"merge\n"
":   (a repository): To reconcile two sets of changes to a\n"
"    [repository](#repository)."

#: git-novice/reference.md:44
msgid ""
"protocol\n"
":   A set of rules that define how one computer communicates with another.\n"
"    Common protocols on the Internet include [HTTP](#http) and [SSH](#ssh)."
msgstr ""
"protocol\n"
":   A set of rules that define how one computer communicates with another.\n"
"    Common protocols on the Internet include [HTTP](#http) and [SSH](#ssh)."

#: git-novice/reference.md:48
msgid ""
"remote\n"
":   (of a repository) A version control [repository](#repository) connected "
"to another,\n"
"    in such way that both can be kept in sync exchanging [commits](#commit)."
msgstr ""
"remote\n"
":   (of a repository) A version control [repository](#repository) connected "
"to another,\n"
"    in such way that both can be kept in sync exchanging [commits](#commit)."

#: git-novice/reference.md:52
msgid ""
"repository\n"
":   A storage area where a [version control](#version-control) system\n"
"    stores the full history of [commits](#commit) of a project and "
"information\n"
"    about who changed what, when."
msgstr ""
"repository\n"
":   A storage area where a [version control](#version-control) system\n"
"    stores the full history of [commits](#commit) of a project and "
"information\n"
"    about who changed what, when."

#: git-novice/reference.md:57
msgid ""
"resolve\n"
":   To eliminate the [conflicts](#conflict) between two or more incompatible "
"changes to a file or set of files\n"
"    being managed by a [version control](#version-control) system."
msgstr ""
"resolve\n"
":   To eliminate the [conflicts](#conflict) between two or more incompatible "
"changes to a file or set of files\n"
"    being managed by a [version control](#version-control) system."

#: git-novice/reference.md:61
msgid ""
"revision\n"
":   A synonym for [commit](#commit)."
msgstr ""
"revision\n"
":   A synonym for [commit](#commit)."

#: git-novice/reference.md:64
msgid ""
"SHA-1\n"
":   [SHA-1 hashes](https://en.wikipedia.org/wiki/SHA-1) is what Git uses to "
"compute identifiers, including for commits.\n"
"    To compute these, Git uses not only the actual change of a commit, but "
"also its metadata (such as date, author,\n"
"    message), including the identifiers of all commits of preceding changes. "
"This makes Git commit IDs virtually unique.\n"
"    I.e., the likelihood that two commits made independently, even of the "
"same change, receive the same ID is exceedingly\n"
"    small."
msgstr ""
"SHA-1\n"
":   [SHA-1 hashes](https://en.wikipedia.org/wiki/SHA-1) is what Git uses to "
"compute identifiers, including for commits.\n"
"    To compute these, Git uses not only the actual change of a commit, but "
"also its metadata (such as date, author,\n"
"    message), including the identifiers of all commits of preceding changes. "
"This makes Git commit IDs virtually unique.\n"
"    I.e., the likelihood that two commits made independently, even of the "
"same change, receive the same ID is exceedingly\n"
"    small."

#: git-novice/reference.md:71
msgid ""
"SSH\n"
":   The Secure Shell [protocol](#protocol) used for secure communication "
"between computers."
msgstr ""
"SSH\n"
":   The Secure Shell [protocol](#protocol) used for secure communication "
"between computers."

#: git-novice/reference.md:74
msgid ""
"timestamp\n"
":   A record of when a particular event occurred."
msgstr ""
"timestamp\n"
":   A record of when a particular event occurred."

#: git-novice/reference.md:77
msgid ""
"version control\n"
":   A tool for managing changes to a set of files.\n"
"    Each set of changes creates a new [commit](#commit) of the files;\n"
"    the version control system allows users to recover old commits "
"reliably,\n"
"    and helps manage conflicting changes made by different users."
msgstr ""
"version control\n"
":   A tool for managing changes to a set of files.\n"
"    Each set of changes creates a new [commit](#commit) of the files;\n"
"    the version control system allows users to recover old commits "
"reliably,\n"
"    and helps manage conflicting changes made by different users."

# Front Matter
#: git-novice/setup.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Setup\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Setup\n"
"---"

#: git-novice/setup.md:6
msgid ""
"Please see [this section of the workshop template][workshop-setup]\n"
"for instructions on installing Git."
msgstr ""
"Please see [this section of the workshop template][workshop-setup]\n"
"for instructions on installing Git."

#: git-novice/setup.md:9
msgid ""
"We'll do our work in the `Desktop` folder so make sure you change your "
"working directory to it with:"
msgstr ""
"We'll do our work in the `Desktop` folder so make sure you change your "
"working directory to it with:"

# code block
#: git-novice/setup.md:11
msgid ""
"~~~\n"
"$ cd\n"
"$ cd Desktop\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd\n"
"$ cd Desktop\n"
"~~~"

#: git-novice/setup.md:17
msgid "[workshop-setup]: https://carpentries.github.io/workshop-template/#git"
msgstr "[workshop-setup]: https://carpentries.github.io/workshop-template/#git"
