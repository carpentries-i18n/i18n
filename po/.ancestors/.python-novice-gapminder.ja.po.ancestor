# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2018-09-16 01:25:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: python-novice-gapminder/CODE_OF_CONDUCT.md:1
#: python-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"---"
msgstr ""

#: python-novice-gapminder/CODE_OF_CONDUCT.md:5
#: python-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:5
msgid "As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""

#: python-novice-gapminder/CODE_OF_CONDUCT.md:8
#: python-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:8
msgid "Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""

#: python-novice-gapminder/CODE_OF_CONDUCT.md:11
#: python-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:11
#: python-novice-gapminder/bin/boilerplate/_episodes/01-introduction.md:14
#: python-novice-gapminder/bin/boilerplate/_extras/discuss.md:6
#: python-novice-gapminder/bin/boilerplate/_extras/figures.md:40
#: python-novice-gapminder/bin/boilerplate/_extras/guide.md:6
#: python-novice-gapminder/bin/boilerplate/index.md:13
#: python-novice-gapminder/bin/boilerplate/reference.md:9
#: python-novice-gapminder/bin/boilerplate/setup.md:7
msgid "{% include links.md %}"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:1
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:1
# header
msgid "# Contributing"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:3
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:3
msgid "[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:10
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:10
# header
msgid "## Contributor Agreement"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:12
msgid "By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CONDUCT.md)."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:20
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:20
# header
msgid "## How to Contribute"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:22
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:22
msgid "The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:29
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:29
# ordered list
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:30
msgid "    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:34
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:34
# ordered list
msgid "2.  If you have a [GitHub][github] account,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:35
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:35
msgid "    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue][issues].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:41
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:41
# ordered list
msgid "3.  If you are comfortable with Git,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:42
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:42
msgid "    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:46
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:46
# header
msgid "## Where to Contribute"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:48
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:48
# ordered list
msgid "1.  If you wish to change this lesson,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:49
msgid "    please work in <https://github.com/swcarpentry/python-novice-gapminder/>,\n"
"    which can be viewed at <https://swcarpentry.github.io/python-novice-gapminder>."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:52
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:52
# ordered list
msgid "2.  If you wish to change the example lesson,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:53
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:53
msgid "    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:57
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:57
# ordered list
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:58
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:58
msgid "    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-template>\n"
"    provide more background on our design choices."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:63
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:63
# ordered list
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:64
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:64
msgid "    or HTML boilerplate for lessons or workshops stored in `_includes` or `_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:67
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:67
# header
msgid "## What to Contribute"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:69
msgid "There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:79
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:79
msgid "Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:86
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:86
# header
msgid "## What *Not* to Contribute"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:88
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:88
msgid "Our lessons already contain more material than we can cover in a typical workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:97
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:97
msgid "We are also not looking for exercises or other material that only run on one platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:102
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:102
# header
msgid "## Using GitHub"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:104
msgid "If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:109
# ordered list
msgid "1.  The published copy of the lesson is in the `gh-pages` branch of the repository"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:110
msgid "    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your `gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:117
# ordered list
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:118
msgid "    1.  Create a new branch in your desktop copy of this repository for each significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository][repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:126
msgid "Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:131
#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:129
# header
msgid "## Other Resources"
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:133
msgid "General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""

#: python-novice-gapminder/CONTRIBUTING.md:138
msgid "[contact]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://github.com/swcarpentry/python-novice-gapminder/issues/\n"
"[repo]: https://github.com/swcarpentry/python-novice-gapminder/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"
msgstr ""

#: python-novice-gapminder/LICENSE.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""

#: python-novice-gapminder/LICENSE.md:6
# header
msgid "## Instructional Material"
msgstr ""

#: python-novice-gapminder/LICENSE.md:8
msgid "All Software Carpentry and Data Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""

#: python-novice-gapminder/LICENSE.md:14
msgid "You are free:"
msgstr ""

#: python-novice-gapminder/LICENSE.md:16
# unordered list
msgid "* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""

#: python-novice-gapminder/LICENSE.md:17
# unordered list
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""

#: python-novice-gapminder/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr ""

#: python-novice-gapminder/LICENSE.md:21
msgid "The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""

#: python-novice-gapminder/LICENSE.md:24
msgid "Under the following terms:"
msgstr ""

#: python-novice-gapminder/LICENSE.md:26
# unordered list
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""

#: python-novice-gapminder/LICENSE.md:27
msgid "  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""

#: python-novice-gapminder/LICENSE.md:34
msgid "**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""

#: python-novice-gapminder/LICENSE.md:38
msgid "Notices:"
msgstr ""

#: python-novice-gapminder/LICENSE.md:40
# unordered list
msgid "* You do not have to comply with the license for elements of the"
msgstr ""

#: python-novice-gapminder/LICENSE.md:41
msgid "  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""

#: python-novice-gapminder/LICENSE.md:48
# header
msgid "## Software"
msgstr ""

#: python-novice-gapminder/LICENSE.md:50
msgid "Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""

#: python-novice-gapminder/LICENSE.md:55
msgid "Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""

#: python-novice-gapminder/LICENSE.md:63
msgid "The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""

#: python-novice-gapminder/LICENSE.md:66
msgid "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""

#: python-novice-gapminder/LICENSE.md:74
# header
msgid "## Trademark"
msgstr ""

#: python-novice-gapminder/LICENSE.md:76
msgid "\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""

#: python-novice-gapminder/LICENSE.md:79
msgid "[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""

#: python-novice-gapminder/README.md:1
msgid "[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--py--gapminder-E01563.svg)](https://swcarpentry.slack.com/messages/C9X4W03KL) "
msgstr ""

#: python-novice-gapminder/README.md:4
msgid "python-novice-gapminder\n"
"======================="
msgstr ""

#: python-novice-gapminder/README.md:7
msgid "Introduction to Python for non-programmers with a focus on plotting and data analysis.\n"
"Please see <https://swcarpentry.github.io/python-novice-gapminder/>\n"
"for a rendered version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""

#: python-novice-gapminder/README.md:14
msgid "Maintainer(s):"
msgstr ""

#: python-novice-gapminder/README.md:16
# unordered list
msgid "* [Allen Lee][lee-allen]"
msgstr ""

#: python-novice-gapminder/README.md:17
# unordered list
msgid "* [Nathan Moore][moore-nathan]"
msgstr ""

#: python-novice-gapminder/README.md:18
# unordered list
msgid "* [Sourav Singh][singh-sourav]"
msgstr ""

#: python-novice-gapminder/README.md:19
# unordered list
msgid "* [Olav Vahtras][olav-vahtras]"
msgstr ""

#: python-novice-gapminder/README.md:21
msgid "[lee-allen]: https://software-carpentry.org/team/#lee-allen\n"
"[lesson-example]: https://carpentries.github.io/lesson-example/\n"
"[moore-nathan]: https://software-carpentry.org/team/#moore_nathan\n"
"[singh-sourav]: https://software-carpentry.org/team/#singh-sourav\n"
"[olav-vahtras]: https://software-carpentry.org/team/#vahtras_olav"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:1
# Front Matter
msgid "---\n"
"title: \"Running and Quitting\"\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I run Python programs?\"\n"
"objectives:\n"
"- \"Launch the Jupyter Notebook, create new notebooks, and exit the Notebook.\"\n"
"- \"Create Markdown cells in a notebook.\"\n"
"- \"Create and run Python cells in a notebook.\"\n"
"keypoints:\n"
"- \"Python programs are plain text files.\"\n"
"- \"Use the Jupyter Notebook for editing and running Python.\"\n"
"- \"The Notebook has Command and Edit modes.\"\n"
"- \"Use the keyboard and mouse to select and edit cells.\"\n"
"- \"The Notebook will turn Markdown into pretty-printed documentation.\"\n"
"- \"Markdown does most of what HTML does.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:19
# header
msgid "## Python programs are plain text files."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:21
# unordered list
msgid "*   They have the `.py` extension to let everyone (including the operating system) "
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:22
msgid "    know it is a Python program.\n"
"    *   This is convention, not a requirement.\n"
"*   It's common to write them using a text editor but we are going to use\n"
"    the [Jupyter Notebook][jupyter].\n"
"*   The bit of extra setup is well worth it because the Notebook provides code completion \n"
"    and other helpful features.\n"
"*   Notebook files have the extension `.ipynb` to distinguish them from plain-text Python programs.\n"
"    *   Can export as \"pure Python\" to run from the command line."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:31
# header
msgid "## Use the Jupyter Notebook for editing and running Python."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:33
# unordered list
msgid "*   The [Anaconda package manager][anaconda] is an automated way to install the Jupyter notebook."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:34
# unordered list
msgid "    *   See [the setup instructions]({{ page.root }}/setup/) for Anaconda installation instructions."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:35
# unordered list
msgid "*   It also installs all the extra libraries it needs to run."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:36
# unordered list
msgid "*   Once you have installed Python and the Jupyter Notebook requirements, open a shell and type:"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:38
msgid "    ~~~\n"
"    $ jupyter notebook\n"
"    ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:42
# unordered list
msgid "*   This will start a Jupyter Notebook server and open your default web browser. "
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:43
# unordered list
msgid "*   The server runs locally on your machine only and does not use an internet connection."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:44
# unordered list
msgid "*   The server sends messages to your browser."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:45
# unordered list
msgid "*   The server does the work and the web browser renders the notebook."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:46
# unordered list
msgid "*   You can type code into the browser and see the result when the web page talks to the server."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:47
# unordered list
msgid "*   This has several advantages:"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:48
# unordered list
msgid "    *   You can easily type, edit, and copy and paste blocks of code."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:49
# unordered list
msgid "    *   Tab complete allows you to easily access the names of things you are using"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:50
msgid "        and learn more about them.\n"
"    *   It allows you to annotate your code with links, different sized text, bullets, etc.\n"
"        to make it more accessible to you and your collaborators.\n"
"    *   It allows you to display figures next to the code that produces them\n"
"        to tell a complete story of the analysis."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:56
msgid "![Example Jupyter Notebook](../fig/0_jupyter_notebook_example.jpg)  \n"
"*Screenshot of a [Jupyter Notebook on quantum mechanics](https://github.com/jrjohansson/qutip-lectures) by Robert Johansson*"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:59
# blockquote, which can be cascaded
msgid "> ## How It's Stored"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:60
msgid ">\n"
"> *   The notebook file is stored in a format called JSON.\n"
"> *   Just like a webpage, what's saved looks different from what you see in your browser.\n"
"> *   But this format allows Jupyter to mix source code, text, and images, all in one file."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:64
#: python-novice-gapminder/_episodes/01-run-quit.md:77
#: python-novice-gapminder/_episodes/02-variables.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:35
#: python-novice-gapminder/_episodes/07-reading-tabular.md:72
#: python-novice-gapminder/_episodes/09-plotting.md:280
#: python-novice-gapminder/_episodes/17-conditionals.md:251
#: python-novice-gapminder/_episodes/17-conditionals.md:427
#: python-novice-gapminder/_episodes/18-style.md:98
#: python-novice-gapminder/_extras/design.md:14
#: python-novice-gapminder/index.md:23
# SC/DC Template label
msgid "{: .callout}"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:66
# header
msgid "## The Notebook has Command and Edit modes."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:68
# unordered list
msgid "*   Open a new notebook from the dropdown menu (that says 'New') in the top right corner of the file browser page."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:69
# unordered list
msgid "*   Each notebook contains one or more cells that contain code, text, or images."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:71
# blockquote, which can be cascaded
msgid "> ## Code vs. Text"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:72
msgid ">\n"
"> We often use the term \"code\" to mean\n"
"> \"the source code of software written in a language such as Python\". \n"
"> A \"code cell\" in a Notebook is a cell that contains software;\n"
"> a \"text cell\" is one that contains ordinary prose written for human beings."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:79
# unordered list
msgid "*   If you press \"esc\" and \"return\" alternately,"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:80
msgid "    the outer border of your code cell will change from gray/blue to green.\n"
"    *   The difference in color is subtle.\n"
"*   These are the command (gray) and edit (green) modes of your notebook.\n"
"*   In command mode, pressing the \"H\" key will provide \n"
"    a list of all the shortcut keys.\n"
"*   Command mode alows you to edit notebook-level features, and edit mode changes the content of cells.\n"
"*   When in command mode (esc/gray),\n"
"    *   The \"B\" key will make a new cell below the currently selected cell.\n"
"    *   The \"A\" key will make one above.\n"
"    *   The \"X\" key will delete the current cell.\n"
"    *   The \"Z\" key will undo your last cell deletion.\n"
"*   All actions can be done using the menus,\n"
"    but there are lots of keyboard shortcuts to speed things up.\n"
"*   If you remember the \"esc\" and \"H\" shortcut, you will be able to find out all the rest."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:95
# blockquote, which can be cascaded
msgid "> ## Command Vs. Edit"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:96
msgid ">\n"
"> In the Jupyter notebook page are you currently in command or edit mode?  \n"
"> Switch between the modes. \n"
"> Use the shortcuts to generate a new cell. \n"
"> Use the shortcuts to delete a cell\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Command mode has a grey boarder and Edit mode has a green border. \n"
"> > Use \"esc\" and \"Enter\" to switch between modes. \n"
"> > You need to be in command mode (Hit \"esc\" if your cell is green).  Type \"B\" or \"A\".\n"
"> > You need to be in command mode (Hit \"esc\" if your cell is green).  Type \"X\".\n"
"> >"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:109
#: python-novice-gapminder/_episodes/01-run-quit.md:272
#: python-novice-gapminder/_episodes/01-run-quit.md:294
#: python-novice-gapminder/_episodes/01-run-quit.md:324
#: python-novice-gapminder/_episodes/01-run-quit.md:350
#: python-novice-gapminder/_episodes/02-variables.md:280
#: python-novice-gapminder/_episodes/02-variables.md:298
#: python-novice-gapminder/_episodes/03-types-conversion.md:227
#: python-novice-gapminder/_episodes/03-types-conversion.md:248
#: python-novice-gapminder/_episodes/03-types-conversion.md:274
#: python-novice-gapminder/_episodes/03-types-conversion.md:328
#: python-novice-gapminder/_episodes/03-types-conversion.md:399
#: python-novice-gapminder/_episodes/03-types-conversion.md:424
#: python-novice-gapminder/_episodes/03-types-conversion.md:447
#: python-novice-gapminder/_episodes/04-built-in.md:243
#: python-novice-gapminder/_episodes/04-built-in.md:290
#: python-novice-gapminder/_episodes/04-built-in.md:302
#: python-novice-gapminder/_episodes/04-built-in.md:315
#: python-novice-gapminder/_episodes/06-libraries.md:152
#: python-novice-gapminder/_episodes/06-libraries.md:209
#: python-novice-gapminder/_episodes/06-libraries.md:241
#: python-novice-gapminder/_episodes/06-libraries.md:259
#: python-novice-gapminder/_episodes/06-libraries.md:298
#: python-novice-gapminder/_episodes/06-libraries.md:330
#: python-novice-gapminder/_episodes/06-libraries.md:360
#: python-novice-gapminder/_episodes/06-libraries.md:381
#: python-novice-gapminder/_episodes/07-reading-tabular.md:240
#: python-novice-gapminder/_episodes/07-reading-tabular.md:335
#: python-novice-gapminder/_episodes/07-reading-tabular.md:364
#: python-novice-gapminder/_episodes/07-reading-tabular.md:388
#: python-novice-gapminder/_episodes/08-data-frames.md:355
#: python-novice-gapminder/_episodes/08-data-frames.md:394
#: python-novice-gapminder/_episodes/08-data-frames.md:450
#: python-novice-gapminder/_episodes/08-data-frames.md:471
#: python-novice-gapminder/_episodes/08-data-frames.md:511
#: python-novice-gapminder/_episodes/09-plotting.md:164
#: python-novice-gapminder/_episodes/09-plotting.md:187
#: python-novice-gapminder/_episodes/09-plotting.md:208
#: python-novice-gapminder/_episodes/09-plotting.md:242
#: python-novice-gapminder/_episodes/11-lists.md:233
#: python-novice-gapminder/_episodes/11-lists.md:246
#: python-novice-gapminder/_episodes/11-lists.md:270
#: python-novice-gapminder/_episodes/11-lists.md:299
#: python-novice-gapminder/_episodes/11-lists.md:328
#: python-novice-gapminder/_episodes/11-lists.md:348
#: python-novice-gapminder/_episodes/11-lists.md:386
#: python-novice-gapminder/_episodes/11-lists.md:427
#: python-novice-gapminder/_episodes/12-for-loops.md:186
#: python-novice-gapminder/_episodes/12-for-loops.md:211
#: python-novice-gapminder/_episodes/12-for-loops.md:236
#: python-novice-gapminder/_episodes/12-for-loops.md:260
#: python-novice-gapminder/_episodes/12-for-loops.md:278
#: python-novice-gapminder/_episodes/12-for-loops.md:298
#: python-novice-gapminder/_episodes/12-for-loops.md:313
#: python-novice-gapminder/_episodes/12-for-loops.md:343
#: python-novice-gapminder/_episodes/12-for-loops.md:379
#: python-novice-gapminder/_episodes/12-for-loops.md:400
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:122
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:154
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:177
#: python-novice-gapminder/_episodes/14-writing-functions.md:172
#: python-novice-gapminder/_episodes/14-writing-functions.md:198
#: python-novice-gapminder/_episodes/14-writing-functions.md:238
#: python-novice-gapminder/_episodes/14-writing-functions.md:265
#: python-novice-gapminder/_episodes/14-writing-functions.md:300
#: python-novice-gapminder/_episodes/14-writing-functions.md:331
#: python-novice-gapminder/_episodes/14-writing-functions.md:402
#: python-novice-gapminder/_episodes/14-writing-functions.md:497
#: python-novice-gapminder/_episodes/14-writing-functions.md:542
#: python-novice-gapminder/_episodes/17-conditionals.md:273
#: python-novice-gapminder/_episodes/17-conditionals.md:311
#: python-novice-gapminder/_episodes/17-conditionals.md:338
#: python-novice-gapminder/_episodes/17-conditionals.md:375
#: python-novice-gapminder/_episodes/18-style.md:152
#: python-novice-gapminder/_episodes/18-style.md:230
# SC/DC Template label
msgid "> {: .solution}"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:110
#: python-novice-gapminder/_episodes/01-run-quit.md:273
#: python-novice-gapminder/_episodes/01-run-quit.md:295
#: python-novice-gapminder/_episodes/01-run-quit.md:325
#: python-novice-gapminder/_episodes/01-run-quit.md:351
#: python-novice-gapminder/_episodes/02-variables.md:233
#: python-novice-gapminder/_episodes/02-variables.md:260
#: python-novice-gapminder/_episodes/02-variables.md:281
#: python-novice-gapminder/_episodes/02-variables.md:299
#: python-novice-gapminder/_episodes/02-variables.md:321
#: python-novice-gapminder/_episodes/03-types-conversion.md:228
#: python-novice-gapminder/_episodes/03-types-conversion.md:249
#: python-novice-gapminder/_episodes/03-types-conversion.md:275
#: python-novice-gapminder/_episodes/03-types-conversion.md:329
#: python-novice-gapminder/_episodes/03-types-conversion.md:400
#: python-novice-gapminder/_episodes/03-types-conversion.md:425
#: python-novice-gapminder/_episodes/03-types-conversion.md:448
#: python-novice-gapminder/_episodes/04-built-in.md:244
#: python-novice-gapminder/_episodes/04-built-in.md:291
#: python-novice-gapminder/_episodes/04-built-in.md:303
#: python-novice-gapminder/_episodes/04-built-in.md:316
#: python-novice-gapminder/_episodes/06-libraries.md:153
#: python-novice-gapminder/_episodes/06-libraries.md:210
#: python-novice-gapminder/_episodes/06-libraries.md:242
#: python-novice-gapminder/_episodes/06-libraries.md:260
#: python-novice-gapminder/_episodes/06-libraries.md:299
#: python-novice-gapminder/_episodes/06-libraries.md:331
#: python-novice-gapminder/_episodes/06-libraries.md:361
#: python-novice-gapminder/_episodes/06-libraries.md:382
#: python-novice-gapminder/_episodes/07-reading-tabular.md:241
#: python-novice-gapminder/_episodes/07-reading-tabular.md:336
#: python-novice-gapminder/_episodes/07-reading-tabular.md:365
#: python-novice-gapminder/_episodes/07-reading-tabular.md:389
#: python-novice-gapminder/_episodes/08-data-frames.md:342
#: python-novice-gapminder/_episodes/08-data-frames.md:356
#: python-novice-gapminder/_episodes/08-data-frames.md:370
#: python-novice-gapminder/_episodes/08-data-frames.md:395
#: python-novice-gapminder/_episodes/08-data-frames.md:410
#: python-novice-gapminder/_episodes/08-data-frames.md:451
#: python-novice-gapminder/_episodes/08-data-frames.md:464
#: python-novice-gapminder/_episodes/08-data-frames.md:472
#: python-novice-gapminder/_episodes/08-data-frames.md:484
#: python-novice-gapminder/_episodes/08-data-frames.md:512
#: python-novice-gapminder/_episodes/08-data-frames.md:520
#: python-novice-gapminder/_episodes/09-plotting.md:165
#: python-novice-gapminder/_episodes/09-plotting.md:209
#: python-novice-gapminder/_episodes/09-plotting.md:243
#: python-novice-gapminder/_episodes/11-lists.md:234
#: python-novice-gapminder/_episodes/11-lists.md:247
#: python-novice-gapminder/_episodes/11-lists.md:271
#: python-novice-gapminder/_episodes/11-lists.md:300
#: python-novice-gapminder/_episodes/11-lists.md:329
#: python-novice-gapminder/_episodes/11-lists.md:349
#: python-novice-gapminder/_episodes/11-lists.md:387
#: python-novice-gapminder/_episodes/11-lists.md:428
#: python-novice-gapminder/_episodes/12-for-loops.md:187
#: python-novice-gapminder/_episodes/12-for-loops.md:212
#: python-novice-gapminder/_episodes/12-for-loops.md:237
#: python-novice-gapminder/_episodes/12-for-loops.md:314
#: python-novice-gapminder/_episodes/12-for-loops.md:344
#: python-novice-gapminder/_episodes/12-for-loops.md:380
#: python-novice-gapminder/_episodes/12-for-loops.md:401
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:123
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:155
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:178
#: python-novice-gapminder/_episodes/14-writing-functions.md:173
#: python-novice-gapminder/_episodes/14-writing-functions.md:199
#: python-novice-gapminder/_episodes/14-writing-functions.md:239
#: python-novice-gapminder/_episodes/14-writing-functions.md:266
#: python-novice-gapminder/_episodes/14-writing-functions.md:301
#: python-novice-gapminder/_episodes/14-writing-functions.md:332
#: python-novice-gapminder/_episodes/14-writing-functions.md:403
#: python-novice-gapminder/_episodes/14-writing-functions.md:543
#: python-novice-gapminder/_episodes/15-scope.md:74
#: python-novice-gapminder/_episodes/15-scope.md:109
#: python-novice-gapminder/_episodes/17-conditionals.md:274
#: python-novice-gapminder/_episodes/17-conditionals.md:312
#: python-novice-gapminder/_episodes/17-conditionals.md:339
#: python-novice-gapminder/_episodes/17-conditionals.md:376
#: python-novice-gapminder/_episodes/18-style.md:125
#: python-novice-gapminder/_episodes/18-style.md:153
#: python-novice-gapminder/_episodes/18-style.md:231
# SC/DC Template label
msgid "{: .challenge}"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:112
# header
msgid "## Use the keyboard and mouse to select and edit cells."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:114
# unordered list
msgid "*   Pressing the \"return\" key turns the border green and engages edit mode,"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:115
msgid "    which allows you to type within the cell.\n"
"*   Because we want to be able to write many lines of code in a single cell,\n"
"    pressing the \"return\" key when in edit mode (green) moves the cursor to the next line in the cell just like in a text editor.\n"
"*   We need some other way to tell the Notebook we want to run what's in the cell.\n"
"*   Pressing the \"shift\" and the \"enter\" key together will execute the contents of the cell.\n"
"*   Notice that the \"return\" and \"shift\" keys on the \n"
"    right of the keyboard are right next to each other."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:123
# header
msgid "## The Notebook will turn Markdown into pretty-printed documentation."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:125
# unordered list
msgid "*   Notebooks can also render [Markdown][markdown]."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:126
# unordered list
msgid "    *   A simple plain-text format for writing lists, links, "
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:127
msgid "        and other things that might go into a web page.\n"
"    *   Equivalently, a subset of HTML that looks like what you'd send in an old-fashioned email.\n"
"*   Turn the current cell into a Markdown cell by entering \n"
"    the command mode (esc/gray) and press the \"M\" key.\n"
"*   `In [ ]:` will disappear to show it is no longer a code cell\n"
"    and you will be able to write in Markdown.\n"
"*   Turn the current cell into a Code cell\n"
"    by entering the command mode (esc/gray) and press the \"Y\" key."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:136
# header
msgid "## Markdown does most of what HTML does."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:138
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*   Use asterisks\n"
"*   to create\n"
"*   bullet lists.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*   Use asterisks\n"
"*   to create\n"
"*   bullet lists.\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:153
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"1.  Use numbers\n"
"1.  to create\n"
"1.  numbered lists.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"1.  Use numbers\n"
"1.  to create\n"
"1.  numbered lists.\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:168
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*  You can use indents\n"
"	*  To create sublists \n"
"	*  of the same type\n"
"*  Or sublists\n"
"	1. Of different\n"
"	1. types\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*  You can use indents\n"
"	*  To create sublists\n"
"	*  of the same type\n"
"*  Or sublists\n"
"	1. Of different\n"
"	1. types\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:189
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"# A Level-1 Heading\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"# A Level-1 Heading\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:200
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"## A Level-2 Heading (etc.)\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"## A Level-2 Heading (etc.)\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:211
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"Line breaks\n"
"don't matter."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:217
msgid "But blank lines\n"
"create new paragraphs.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"Line breaks\n"
"don't matter."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:225
msgid "But blank lines\n"
"create new paragraphs.\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:230
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"[Create links](http://software-carpentry.org) with `[...](...)`.\n"
"Or use [named links][data_carpentry]."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:236
msgid "[data_carpentry]: http://datacarpentry.org\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"[Create links](http://software-carpentry.org) with `[...](...)`.\n"
"Or use [named links][data_carpentry]."
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:243
msgid "[data_carpentry]: http://datacarpentry.org\n"
"  </div>\n"
"</div>"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:247
# blockquote, which can be cascaded
msgid "> ## Creating Lists in Markdown"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:248
msgid ">\n"
"> Create a nested list in a Markdown cell in a notebook that looks like this:\n"
">\n"
"> 1.  Get funding.\n"
"> 2.  Do work.\n"
">     *   Design experiment.\n"
">     *   Collect data.\n"
">     *   Analyze.\n"
"> 3.  Write up.\n"
"> 4.  Publish.\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > This challenge integrates both the numbered list and bullet list. \n"
"> > Note that the bullet list is indented 2 spaces so that it is inline with the items of the numbered list.\n"
"> > ~~~\n"
"> > 1.  Get funding.\n"
"> > 2.  Do work.\n"
"> >     *   Design experiment.\n"
"> >     *   Collect data.\n"
"> >     *   Analyze.\n"
"> > 3.  Write up.\n"
"> > 4.  Publish.\n"
"> > ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:275
# blockquote, which can be cascaded
msgid "> ## More Math"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:276
msgid ">\n"
"> What is displayed when a Python cell in a notebook\n"
"> that contains several calculations is executed?\n"
"> For example, what happens when this cell is executed?\n"
">\n"
"> ~~~\n"
"> 7 * 3\n"
"> 2 + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > Python returns the output of the last calculation.\n"
"> > ~~~\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:297
# blockquote, which can be cascaded
msgid "> ## Change an Existing Cell from Code to Markdown"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:298
msgid ">\n"
"> What happens if you write some Python in a code cell\n"
"> and then you switch it to a Markdown cell?\n"
"> For example,\n"
"> put the following in a code cell:\n"
">\n"
"> ~~~\n"
"> x = 6 * 7 + 12\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> And then run it with shift+return to be sure that it works as a code cell.\n"
"> Now go back to the cell and use escape+M to switch the cell to Markdown\n"
"> and \"run\" it with shift+return.\n"
"> What happened and how might this be useful?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > The Python code gets treated like markdown text.\n"
"> > The lines appear as if they are part of one contiguous paragraph.\n"
"> > This could be useful to temporarily turn on and off cells in notebooks that get used for multiple purposes. \n"
"> > ~~~\n"
"> > x = 6 * 7 + 12 print(x)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:327
# blockquote, which can be cascaded
msgid "> ## Equations"
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:328
msgid ">\n"
"> Standard Markdown (such as we're using for these notes) won't render equations,\n"
"> but the Notebook will.\n"
"> Create a new Markdown cell\n"
"> and enter the following:\n"
">\n"
"> ~~~\n"
"> $\\sum_{i=1}^{N} 2^{-i} \\approx 1$\n"
"> ~~~\n"
">\n"
"> (It's probably easier to copy and paste.)\n"
"> What does it display?\n"
"> What do you think the underscore, `_`, circumflex, `^`, and dollar sign, `$`, do?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > The notebook shows the equation as it would be rendered from latex equation syntax.\n"
"> > The dollar sign, `$`, is used to tell markdown that the text in between is a latex equation.\n"
"> > If you're not familiar with latex,  underscore, `_`, is used for subscripts and circumflex, `^`, is used for superscripts.\n"
"> > A pair of curly braces, `{` and `}`, is used to group text together so that the statement `i=1` becomes the the subscript and `N` becomes the superscript.\n"
"> > Similarly, `-i` is in curly braces to make the whole statement the superscript for `2`.\n"
"> > `\\sum` and `\\approx` are latex commands for \"sum over\" and \"approximate\" symbols. "
msgstr ""

#: python-novice-gapminder/_episodes/01-run-quit.md:353
msgid "[anaconda]: https://docs.continuum.io/anaconda/install\n"
"[jupyter]: http://jupyter.org/\n"
"[markdown]: https://en.wikipedia.org/wiki/Markdown"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:1
# Front Matter
msgid "---\n"
"title: \"Variables and Assignment\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I store data in programs?\"\n"
"objectives:\n"
"- \"Write programs that assign scalar values to variables and perform calculations with those values.\"\n"
"- \"Correctly trace value changes in programs that use scalar assignment.\"\n"
"keypoints:\n"
"- \"Use variables to store values.\"\n"
"- \"Use `print` to display values.\"\n"
"- \"Variables persist between cells.\"\n"
"- \"Variables must be created before they are used.\"\n"
"- \"Variables can be used in calculations.\"\n"
"- \"Use an index to get a single character from a string.\"\n"
"- \"Use a slice to get a substring.\"\n"
"- \"Use the built-in function `len` to find the length of a string.\"\n"
"- \"Python is case-sensitive.\"\n"
"- \"Use meaningful variable names.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:22
# header
msgid "## Use variables to store values."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:24
# unordered list
msgid "*   Variables are names for values."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:25
# unordered list
msgid "*   In Python the `=` symbol assigns the value on the right to the name on the left."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:26
# unordered list
msgid "*   The variable is created when a value is assigned to it."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:27
# unordered list
msgid "*   Here, Python assigns an age to a variable `age`"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:28
msgid "    and a name in quotes to a variable `first_name`."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:30
# code block
msgid "~~~\n"
"age = 42\n"
"first_name = 'Ahmed'\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:34
#: python-novice-gapminder/_episodes/02-variables.md:53
#: python-novice-gapminder/_episodes/02-variables.md:71
#: python-novice-gapminder/_episodes/02-variables.md:117
#: python-novice-gapminder/_episodes/02-variables.md:138
#: python-novice-gapminder/_episodes/02-variables.md:163
#: python-novice-gapminder/_episodes/02-variables.md:174
#: python-novice-gapminder/_episodes/02-variables.md:199
#: python-novice-gapminder/_episodes/03-types-conversion.md:40
#: python-novice-gapminder/_episodes/03-types-conversion.md:50
#: python-novice-gapminder/_episodes/03-types-conversion.md:63
#: python-novice-gapminder/_episodes/03-types-conversion.md:72
#: python-novice-gapminder/_episodes/03-types-conversion.md:91
#: python-novice-gapminder/_episodes/03-types-conversion.md:104
#: python-novice-gapminder/_episodes/03-types-conversion.md:117
#: python-novice-gapminder/_episodes/03-types-conversion.md:128
#: python-novice-gapminder/_episodes/03-types-conversion.md:146
#: python-novice-gapminder/_episodes/03-types-conversion.md:164
#: python-novice-gapminder/_episodes/03-types-conversion.md:180
#: python-novice-gapminder/_episodes/03-types-conversion.md:200
#: python-novice-gapminder/_episodes/04-built-in.md:34
#: python-novice-gapminder/_episodes/04-built-in.md:52
#: python-novice-gapminder/_episodes/04-built-in.md:71
#: python-novice-gapminder/_episodes/04-built-in.md:87
#: python-novice-gapminder/_episodes/04-built-in.md:101
#: python-novice-gapminder/_episodes/04-built-in.md:112
#: python-novice-gapminder/_episodes/04-built-in.md:125
#: python-novice-gapminder/_episodes/04-built-in.md:146
#: python-novice-gapminder/_episodes/04-built-in.md:156
#: python-novice-gapminder/_episodes/04-built-in.md:167
#: python-novice-gapminder/_episodes/04-built-in.md:191
#: python-novice-gapminder/_episodes/04-built-in.md:216
#: python-novice-gapminder/_episodes/06-libraries.md:51
#: python-novice-gapminder/_episodes/06-libraries.md:69
#: python-novice-gapminder/_episodes/06-libraries.md:108
#: python-novice-gapminder/_episodes/06-libraries.md:124
#: python-novice-gapminder/_episodes/07-reading-tabular.md:36
#: python-novice-gapminder/_episodes/07-reading-tabular.md:84
#: python-novice-gapminder/_episodes/07-reading-tabular.md:108
#: python-novice-gapminder/_episodes/07-reading-tabular.md:146
#: python-novice-gapminder/_episodes/07-reading-tabular.md:164
#: python-novice-gapminder/_episodes/07-reading-tabular.md:189
#: python-novice-gapminder/_episodes/08-data-frames.md:51
#: python-novice-gapminder/_episodes/08-data-frames.md:65
#: python-novice-gapminder/_episodes/08-data-frames.md:77
#: python-novice-gapminder/_episodes/08-data-frames.md:100
#: python-novice-gapminder/_episodes/08-data-frames.md:122
#: python-novice-gapminder/_episodes/08-data-frames.md:149
#: python-novice-gapminder/_episodes/08-data-frames.md:161
#: python-novice-gapminder/_episodes/08-data-frames.md:183
#: python-novice-gapminder/_episodes/08-data-frames.md:213
#: python-novice-gapminder/_episodes/08-data-frames.md:231
#: python-novice-gapminder/_episodes/08-data-frames.md:263
#: python-novice-gapminder/_episodes/08-data-frames.md:306
#: python-novice-gapminder/_episodes/11-lists.md:36
#: python-novice-gapminder/_episodes/11-lists.md:51
#: python-novice-gapminder/_episodes/11-lists.md:66
#: python-novice-gapminder/_episodes/11-lists.md:83
#: python-novice-gapminder/_episodes/11-lists.md:107
#: python-novice-gapminder/_episodes/11-lists.md:127
#: python-novice-gapminder/_episodes/11-lists.md:148
#: python-novice-gapminder/_episodes/11-lists.md:159
#: python-novice-gapminder/_episodes/11-lists.md:177
#: python-novice-gapminder/_episodes/11-lists.md:195
#: python-novice-gapminder/_episodes/12-for-loops.md:34
#: python-novice-gapminder/_episodes/12-for-loops.md:43
#: python-novice-gapminder/_episodes/12-for-loops.md:64
#: python-novice-gapminder/_episodes/12-for-loops.md:76
#: python-novice-gapminder/_episodes/12-for-loops.md:94
#: python-novice-gapminder/_episodes/12-for-loops.md:111
#: python-novice-gapminder/_episodes/12-for-loops.md:125
#: python-novice-gapminder/_episodes/12-for-loops.md:146
#: python-novice-gapminder/_episodes/12-for-loops.md:168
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:28
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:67
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:78
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:94
#: python-novice-gapminder/_episodes/14-writing-functions.md:43
#: python-novice-gapminder/_episodes/14-writing-functions.md:54
#: python-novice-gapminder/_episodes/14-writing-functions.md:76
#: python-novice-gapminder/_episodes/14-writing-functions.md:87
#: python-novice-gapminder/_episodes/14-writing-functions.md:111
#: python-novice-gapminder/_episodes/14-writing-functions.md:117
#: python-novice-gapminder/_episodes/14-writing-functions.md:126
#: python-novice-gapminder/_episodes/14-writing-functions.md:139
#: python-novice-gapminder/_episodes/15-scope.md:31
#: python-novice-gapminder/_episodes/15-scope.md:46
#: python-novice-gapminder/_episodes/17-conditionals.md:35
#: python-novice-gapminder/_episodes/17-conditionals.md:52
#: python-novice-gapminder/_episodes/17-conditionals.md:72
#: python-novice-gapminder/_episodes/17-conditionals.md:99
#: python-novice-gapminder/_episodes/17-conditionals.md:123
#: python-novice-gapminder/_episodes/17-conditionals.md:139
#: python-novice-gapminder/_episodes/17-conditionals.md:159
#: python-novice-gapminder/_episodes/18-style.md:55
#: python-novice-gapminder/_episodes/18-style.md:76
# SC/DC Template label
msgid "{: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:36
# unordered list
msgid "*   Variable names"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:37
# unordered list
msgid "    * can **only** contain letters, digits, and underscore `_` (typically used to separate words in long variable names)"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:38
# unordered list
msgid "    * cannot start with a digit"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:39
# unordered list
msgid "*   Variable names that start with underscores like `__alistairs_real_age` have a special meaning"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:40
msgid "    so we won't do that until we understand the convention."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:42
# header
msgid "## Use `print` to display values."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:44
# unordered list
msgid "*   Python has a built-in function called `print` that prints things as text."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:45
# unordered list
msgid "*   Call the function (i.e., tell Python to run it) by using its name."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:46
# unordered list
msgid "*   Provide values to the function (i.e., the things to print) in parentheses."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:47
# unordered list
msgid "*   To add a string to the printout, wrap the string in single or double quotes."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:48
# unordered list
msgid "*   The values passed to the function are called 'arguments'"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:50
# code block
msgid "~~~\n"
"print(first_name, 'is', age, 'years old')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:54
# code block
msgid "~~~\n"
"Ahmed is 42 years old\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:57
#: python-novice-gapminder/_episodes/02-variables.md:121
#: python-novice-gapminder/_episodes/02-variables.md:142
#: python-novice-gapminder/_episodes/02-variables.md:167
#: python-novice-gapminder/_episodes/02-variables.md:178
#: python-novice-gapminder/_episodes/03-types-conversion.md:44
#: python-novice-gapminder/_episodes/03-types-conversion.md:54
#: python-novice-gapminder/_episodes/03-types-conversion.md:67
#: python-novice-gapminder/_episodes/03-types-conversion.md:95
#: python-novice-gapminder/_episodes/03-types-conversion.md:108
#: python-novice-gapminder/_episodes/03-types-conversion.md:121
#: python-novice-gapminder/_episodes/03-types-conversion.md:169
#: python-novice-gapminder/_episodes/03-types-conversion.md:185
#: python-novice-gapminder/_episodes/03-types-conversion.md:204
#: python-novice-gapminder/_episodes/04-built-in.md:58
#: python-novice-gapminder/_episodes/04-built-in.md:76
#: python-novice-gapminder/_episodes/04-built-in.md:105
#: python-novice-gapminder/_episodes/04-built-in.md:116
#: python-novice-gapminder/_episodes/04-built-in.md:136
#: python-novice-gapminder/_episodes/04-built-in.md:221
#: python-novice-gapminder/_episodes/06-libraries.md:56
#: python-novice-gapminder/_episodes/06-libraries.md:96
#: python-novice-gapminder/_episodes/06-libraries.md:112
#: python-novice-gapminder/_episodes/06-libraries.md:128
#: python-novice-gapminder/_episodes/07-reading-tabular.md:54
#: python-novice-gapminder/_episodes/07-reading-tabular.md:101
#: python-novice-gapminder/_episodes/07-reading-tabular.md:128
#: python-novice-gapminder/_episodes/07-reading-tabular.md:153
#: python-novice-gapminder/_episodes/07-reading-tabular.md:180
#: python-novice-gapminder/_episodes/07-reading-tabular.md:221
#: python-novice-gapminder/_episodes/08-data-frames.md:55
#: python-novice-gapminder/_episodes/08-data-frames.md:69
#: python-novice-gapminder/_episodes/08-data-frames.md:93
#: python-novice-gapminder/_episodes/08-data-frames.md:112
#: python-novice-gapminder/_episodes/08-data-frames.md:132
#: python-novice-gapminder/_episodes/08-data-frames.md:156
#: python-novice-gapminder/_episodes/08-data-frames.md:168
#: python-novice-gapminder/_episodes/08-data-frames.md:203
#: python-novice-gapminder/_episodes/08-data-frames.md:223
#: python-novice-gapminder/_episodes/08-data-frames.md:243
#: python-novice-gapminder/_episodes/08-data-frames.md:298
#: python-novice-gapminder/_episodes/08-data-frames.md:326
#: python-novice-gapminder/_episodes/11-lists.md:41
#: python-novice-gapminder/_episodes/11-lists.md:56
#: python-novice-gapminder/_episodes/11-lists.md:70
#: python-novice-gapminder/_episodes/11-lists.md:88
#: python-novice-gapminder/_episodes/11-lists.md:113
#: python-novice-gapminder/_episodes/11-lists.md:132
#: python-novice-gapminder/_episodes/11-lists.md:164
#: python-novice-gapminder/_episodes/11-lists.md:199
#: python-novice-gapminder/_episodes/12-for-loops.md:52
#: python-novice-gapminder/_episodes/12-for-loops.md:131
#: python-novice-gapminder/_episodes/12-for-loops.md:153
#: python-novice-gapminder/_episodes/12-for-loops.md:172
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:49
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:73
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:82
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:103
#: python-novice-gapminder/_episodes/14-writing-functions.md:58
#: python-novice-gapminder/_episodes/14-writing-functions.md:80
#: python-novice-gapminder/_episodes/14-writing-functions.md:91
#: python-novice-gapminder/_episodes/14-writing-functions.md:121
#: python-novice-gapminder/_episodes/14-writing-functions.md:130
#: python-novice-gapminder/_episodes/14-writing-functions.md:144
#: python-novice-gapminder/_episodes/15-scope.md:50
#: python-novice-gapminder/_episodes/17-conditionals.md:39
#: python-novice-gapminder/_episodes/17-conditionals.md:57
#: python-novice-gapminder/_episodes/17-conditionals.md:80
#: python-novice-gapminder/_episodes/17-conditionals.md:107
#: python-novice-gapminder/_episodes/17-conditionals.md:127
#: python-novice-gapminder/_episodes/17-conditionals.md:143
#: python-novice-gapminder/_episodes/17-conditionals.md:173
#: python-novice-gapminder/_episodes/18-style.md:83
# SC/DC Template label
msgid "{: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:59
# unordered list
msgid "*   `print` automatically puts a single space between items to separate them."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:60
# unordered list
msgid "*   And wraps around to a new line at the end."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:62
# header
msgid "## Variables must be created before they are used."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:64
# unordered list
msgid "*   If a variable doesn't exist yet, or if the name has been mis-spelled,"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:65
msgid "    Python reports an error.\n"
"    *   Unlike some languages, which \"guess\" a default value."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:68
# code block
msgid "~~~\n"
"print(last_name)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:72
# code block
msgid "~~~\n"
"---------------------------------------------------------------------------\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-1-c1fbb4e96102> in <module>()\n"
"----> 1 print(last_name)\n"
"\n"
"NameError: name 'last_name' is not defined\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:80
#: python-novice-gapminder/_episodes/03-types-conversion.md:81
#: python-novice-gapminder/_episodes/03-types-conversion.md:137
#: python-novice-gapminder/_episodes/03-types-conversion.md:155
#: python-novice-gapminder/_episodes/04-built-in.md:91
#: python-novice-gapminder/_episodes/04-built-in.md:150
#: python-novice-gapminder/_episodes/04-built-in.md:160
#: python-novice-gapminder/_episodes/04-built-in.md:174
#: python-novice-gapminder/_episodes/04-built-in.md:195
#: python-novice-gapminder/_episodes/11-lists.md:181
#: python-novice-gapminder/_episodes/12-for-loops.md:68
#: python-novice-gapminder/_episodes/12-for-loops.md:83
#: python-novice-gapminder/_episodes/15-scope.md:57
# SC/DC Template label
msgid "{: .error}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:82
# unordered list
msgid "*   The last line of an error message is usually the most informative."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:83
# unordered list
msgid "*   We will look at error messages in detail [later]({{ page.root }}/15-scope/#reading-error-messages)."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:85
# blockquote, which can be cascaded
msgid "> ## Variables Persist Between Cells"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:86
msgid ">\n"
"> Be aware that it is the order of **execution** of cells that is important in a Jupyter notebook, not the order\n"
"> in which they appear. Python will remember **all** the code that was run previously, including any variables you have\n"
"> defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then\n"
"> (re)run cells further up, those defined further down will still be present. As an example, create 2 cells with the\n"
"> following content, in this order:\n"
">\n"
"> ~~~\n"
"> print(myval)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:96
#: python-novice-gapminder/_episodes/02-variables.md:101
#: python-novice-gapminder/_episodes/02-variables.md:217
#: python-novice-gapminder/_episodes/02-variables.md:246
#: python-novice-gapminder/_episodes/02-variables.md:309
#: python-novice-gapminder/_episodes/03-types-conversion.md:287
#: python-novice-gapminder/_episodes/03-types-conversion.md:340
#: python-novice-gapminder/_episodes/03-types-conversion.md:353
#: python-novice-gapminder/_episodes/03-types-conversion.md:374
#: python-novice-gapminder/_episodes/03-types-conversion.md:412
#: python-novice-gapminder/_episodes/04-built-in.md:234
#: python-novice-gapminder/_episodes/04-built-in.md:260
#: python-novice-gapminder/_episodes/06-libraries.md:162
#: python-novice-gapminder/_episodes/06-libraries.md:227
#: python-novice-gapminder/_episodes/06-libraries.md:273
#: python-novice-gapminder/_episodes/06-libraries.md:344
#: python-novice-gapminder/_episodes/06-libraries.md:372
#: python-novice-gapminder/_episodes/08-data-frames.md:339
#: python-novice-gapminder/_episodes/08-data-frames.md:368
#: python-novice-gapminder/_episodes/08-data-frames.md:409
#: python-novice-gapminder/_episodes/08-data-frames.md:463
#: python-novice-gapminder/_episodes/11-lists.md:214
#: python-novice-gapminder/_episodes/11-lists.md:257
#: python-novice-gapminder/_episodes/11-lists.md:281
#: python-novice-gapminder/_episodes/11-lists.md:311
#: python-novice-gapminder/_episodes/11-lists.md:340
#: python-novice-gapminder/_episodes/11-lists.md:362
#: python-novice-gapminder/_episodes/11-lists.md:370
#: python-novice-gapminder/_episodes/11-lists.md:401
#: python-novice-gapminder/_episodes/11-lists.md:410
#: python-novice-gapminder/_episodes/12-for-loops.md:199
#: python-novice-gapminder/_episodes/12-for-loops.md:226
#: python-novice-gapminder/_episodes/12-for-loops.md:251
#: python-novice-gapminder/_episodes/12-for-loops.md:269
#: python-novice-gapminder/_episodes/12-for-loops.md:288
#: python-novice-gapminder/_episodes/12-for-loops.md:304
#: python-novice-gapminder/_episodes/12-for-loops.md:331
#: python-novice-gapminder/_episodes/12-for-loops.md:366
#: python-novice-gapminder/_episodes/12-for-loops.md:393
#: python-novice-gapminder/_episodes/13-looping-data-sets.md:139
#: python-novice-gapminder/_episodes/14-writing-functions.md:161
#: python-novice-gapminder/_episodes/14-writing-functions.md:185
#: python-novice-gapminder/_episodes/14-writing-functions.md:210
#: python-novice-gapminder/_episodes/14-writing-functions.md:229
#: python-novice-gapminder/_episodes/14-writing-functions.md:254
#: python-novice-gapminder/_episodes/14-writing-functions.md:264
#: python-novice-gapminder/_episodes/14-writing-functions.md:280
#: python-novice-gapminder/_episodes/14-writing-functions.md:316
#: python-novice-gapminder/_episodes/14-writing-functions.md:321
#: python-novice-gapminder/_episodes/14-writing-functions.md:360
#: python-novice-gapminder/_episodes/14-writing-functions.md:377
#: python-novice-gapminder/_episodes/14-writing-functions.md:415
#: python-novice-gapminder/_episodes/14-writing-functions.md:425
#: python-novice-gapminder/_episodes/14-writing-functions.md:437
#: python-novice-gapminder/_episodes/15-scope.md:73
#: python-novice-gapminder/_episodes/17-conditionals.md:231
#: python-novice-gapminder/_episodes/17-conditionals.md:240
#: python-novice-gapminder/_episodes/17-conditionals.md:248
#: python-novice-gapminder/_episodes/17-conditionals.md:265
#: python-novice-gapminder/_episodes/17-conditionals.md:292
#: python-novice-gapminder/_episodes/17-conditionals.md:326
#: python-novice-gapminder/_episodes/17-conditionals.md:357
#: python-novice-gapminder/_episodes/17-conditionals.md:404
#: python-novice-gapminder/_episodes/17-conditionals.md:420
#: python-novice-gapminder/_episodes/18-style.md:97
#: python-novice-gapminder/_episodes/18-style.md:124
#: python-novice-gapminder/_episodes/18-style.md:140
#: python-novice-gapminder/_episodes/18-style.md:182
# SC/DC Template label
msgid "> {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:97
msgid ">\n"
"> ~~~\n"
"> myval = 1\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:102
msgid ">\n"
"> If you execute this in order, the first cell will give an error. However, if you run the first cell **after** the second\n"
"> cell it will print out ‘1’. To prevent confusion, it can be helpful to use the `Kernel` -> `Restart & Run All` option which\n"
"> clears the interpreter and runs everything from a clean slate going top to bottom."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:108
# header
msgid "## Variables can be used in calculations."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:110
# unordered list
msgid "*   We can use variables in calculations just as if they were values."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:111
# unordered list
msgid "    *   Remember, we assigned 42 to `age` a few lines ago."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:113
# code block
msgid "~~~\n"
"age = age + 3\n"
"print('Age in three years:', age)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:118
# code block
msgid "~~~\n"
"Age in three years: 45\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:123
# header
msgid "## Use an index to get a single character from a string."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:125
# unordered list
msgid "*   The characters (individual letters, numbers, and so on) in a string are"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:126
msgid "    ordered. For example, the string 'AB' is not the same as 'BA'. Because of\n"
"    this ordering, we can treat the string as a list of characters.\n"
"*   Each position in the string (first, second, etc.) is given a number. This\n"
"    number is called an index or sometimes a subscript.\n"
"*   Indices are numbered from 0.\n"
"*   Use the position's index in square brackets to get the character at that\n"
"    position."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:134
# code block
msgid "~~~\n"
"atom_name = 'helium'\n"
"print(atom_name[0])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:139
# code block
msgid "~~~\n"
"h\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:144
# header
msgid "## Use a slice to get a substring."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:146
# unordered list
msgid "*   A part of a string is called a substring. A substring can be as short as a"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:147
msgid "    single character.\n"
"*   An item in a list is called an element. Whenever we treat a string as if it\n"
"    were a list, the string's elements are its individual characters.\n"
"*   A slice is a part of a string (or, more generally, any list-like thing).\n"
"*   We take a slice by using `[start:stop]`, where `start` is replaced with the\n"
"    index of the first element we want and `stop` is replaced with the index of\n"
"    the element just after the last element we want.\n"
"*   Mathematically, you might say that a slice selects `[start:stop)`.\n"
"*   The difference between stop and start is the slice's length.\n"
"*   Taking a slice does not change the contents of the original string. Instead,\n"
"    the slice is a copy of part of the original string."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:159
# code block
msgid "~~~\n"
"atom_name = 'sodium'\n"
"print(atom_name[0:3])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:164
# code block
msgid "~~~\n"
"sod\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:169
# header
msgid "## Use the built-in function `len` to find the length of a string."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:171
# code block
msgid "~~~\n"
"print(len('helium'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:175
# code block
msgid "~~~\n"
"6\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:180
# unordered list
msgid "*   Nested functions are evaluated from the inside out,"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:181
msgid "    just like in mathematics."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:183
# header
msgid "## Python is case-sensitive."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:185
# unordered list
msgid "*   Python thinks that upper- and lower-case letters are different,"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:186
msgid "    so `Name` and `name` are different variables.\n"
"*   There are conventions for using upper-case letters at the start of variable names so we will use lower-case letters for now."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:189
# header
msgid "## Use meaningful variable names."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:191
# unordered list
msgid "*   Python doesn't care what you call variables as long as they obey the rules"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:192
msgid "    (alphanumeric characters and the underscore)."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:194
# code block
msgid "~~~\n"
"flabadab = 42\n"
"ewr_422_yY = 'Ahmed'\n"
"print(ewr_422_yY, 'is', flabadab, 'years old')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:201
# unordered list
msgid "*   Use meaningful variable names to help other people understand what the program does."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:202
# unordered list
msgid "*   The most important \"other person\" is your future self."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:204
# blockquote, which can be cascaded
msgid "> ## Swapping Values"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:205
msgid ">\n"
"> Fill the table showing the values of the variables in this program\n"
"> **after** each statement is executed.\n"
">\n"
"> ~~~\n"
"> # Command  # Value of x   # Value of y   # Value of swap #\n"
"> x = 1.0    #              #              #               #\n"
"> y = 3.0    #              #              #               #\n"
"> swap = x   #              #              #               #\n"
"> x = y      #              #              #               #\n"
"> y = swap   #              #              #               #\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:218
#: python-novice-gapminder/_episodes/02-variables.md:247
#: python-novice-gapminder/_episodes/03-types-conversion.md:376
#: python-novice-gapminder/_episodes/04-built-in.md:235
#: python-novice-gapminder/_episodes/04-built-in.md:261
#: python-novice-gapminder/_episodes/07-reading-tabular.md:374
#: python-novice-gapminder/_episodes/08-data-frames.md:372
#: python-novice-gapminder/_episodes/12-for-loops.md:200
#: python-novice-gapminder/_episodes/12-for-loops.md:227
#: python-novice-gapminder/_episodes/12-for-loops.md:252
#: python-novice-gapminder/_episodes/12-for-loops.md:270
#: python-novice-gapminder/_episodes/12-for-loops.md:289
#: python-novice-gapminder/_episodes/12-for-loops.md:305
#: python-novice-gapminder/_episodes/12-for-loops.md:332
#: python-novice-gapminder/_episodes/12-for-loops.md:367
#: python-novice-gapminder/_episodes/12-for-loops.md:394
#: python-novice-gapminder/_episodes/14-writing-functions.md:186
#: python-novice-gapminder/_episodes/14-writing-functions.md:231
#: python-novice-gapminder/_episodes/14-writing-functions.md:255
#: python-novice-gapminder/_episodes/14-writing-functions.md:281
#: python-novice-gapminder/_episodes/14-writing-functions.md:322
#: python-novice-gapminder/_episodes/17-conditionals.md:298
#: python-novice-gapminder/_episodes/17-conditionals.md:327
#: python-novice-gapminder/_episodes/18-style.md:141
# blockquote, which can be cascaded
msgid "> > ## Solution"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:219
#: python-novice-gapminder/_episodes/02-variables.md:248
#: python-novice-gapminder/_episodes/02-variables.md:253
#: python-novice-gapminder/_episodes/03-types-conversion.md:383
#: python-novice-gapminder/_episodes/14-writing-functions.md:187
#: python-novice-gapminder/_episodes/14-writing-functions.md:192
#: python-novice-gapminder/_episodes/14-writing-functions.md:256
#: python-novice-gapminder/_episodes/14-writing-functions.md:282
#: python-novice-gapminder/_episodes/17-conditionals.md:299
#: python-novice-gapminder/_episodes/17-conditionals.md:328
#: python-novice-gapminder/_episodes/18-style.md:142
# blockquote, which can be cascaded
msgid "> >"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:220
#: python-novice-gapminder/_episodes/02-variables.md:227
#: python-novice-gapminder/_episodes/02-variables.md:249
#: python-novice-gapminder/_episodes/02-variables.md:251
#: python-novice-gapminder/_episodes/03-types-conversion.md:384
#: python-novice-gapminder/_episodes/03-types-conversion.md:387
#: python-novice-gapminder/_episodes/03-types-conversion.md:389
#: python-novice-gapminder/_episodes/03-types-conversion.md:397
#: python-novice-gapminder/_episodes/04-built-in.md:263
#: python-novice-gapminder/_episodes/04-built-in.md:265
#: python-novice-gapminder/_episodes/04-built-in.md:267
#: python-novice-gapminder/_episodes/04-built-in.md:269
#: python-novice-gapminder/_episodes/04-built-in.md:271
#: python-novice-gapminder/_episodes/04-built-in.md:273
#: python-novice-gapminder/_episodes/04-built-in.md:275
#: python-novice-gapminder/_episodes/04-built-in.md:277
#: python-novice-gapminder/_episodes/04-built-in.md:279
#: python-novice-gapminder/_episodes/04-built-in.md:281
#: python-novice-gapminder/_episodes/04-built-in.md:283
#: python-novice-gapminder/_episodes/04-built-in.md:285
#: python-novice-gapminder/_episodes/07-reading-tabular.md:376
#: python-novice-gapminder/_episodes/07-reading-tabular.md:378
#: python-novice-gapminder/_episodes/07-reading-tabular.md:381
#: python-novice-gapminder/_episodes/07-reading-tabular.md:383
#: python-novice-gapminder/_episodes/08-data-frames.md:374
#: python-novice-gapminder/_episodes/08-data-frames.md:379
#: python-novice-gapminder/_episodes/08-data-frames.md:382
#: python-novice-gapminder/_episodes/08-data-frames.md:388
#: python-novice-gapminder/_episodes/12-for-loops.md:228
#: python-novice-gapminder/_episodes/12-for-loops.md:234
#: python-novice-gapminder/_episodes/12-for-loops.md:253
#: python-novice-gapminder/_episodes/12-for-loops.md:258
#: python-novice-gapminder/_episodes/12-for-loops.md:271
#: python-novice-gapminder/_episodes/12-for-loops.md:276
#: python-novice-gapminder/_episodes/12-for-loops.md:290
#: python-novice-gapminder/_episodes/12-for-loops.md:296
#: python-novice-gapminder/_episodes/12-for-loops.md:306
#: python-novice-gapminder/_episodes/12-for-loops.md:311
#: python-novice-gapminder/_episodes/12-for-loops.md:333
#: python-novice-gapminder/_episodes/12-for-loops.md:341
#: python-novice-gapminder/_episodes/12-for-loops.md:368
#: python-novice-gapminder/_episodes/12-for-loops.md:377
#: python-novice-gapminder/_episodes/12-for-loops.md:395
#: python-novice-gapminder/_episodes/12-for-loops.md:398
#: python-novice-gapminder/_episodes/14-writing-functions.md:188
#: python-novice-gapminder/_episodes/14-writing-functions.md:194
#: python-novice-gapminder/_episodes/14-writing-functions.md:197
#: python-novice-gapminder/_episodes/14-writing-functions.md:257
#: python-novice-gapminder/_episodes/14-writing-functions.md:263
#: python-novice-gapminder/_episodes/14-writing-functions.md:283
#: python-novice-gapminder/_episodes/14-writing-functions.md:288
#: python-novice-gapminder/_episodes/14-writing-functions.md:291
#: python-novice-gapminder/_episodes/14-writing-functions.md:294
#: python-novice-gapminder/_episodes/14-writing-functions.md:296
#: python-novice-gapminder/_episodes/14-writing-functions.md:298
#: python-novice-gapminder/_episodes/17-conditionals.md:300
#: python-novice-gapminder/_episodes/17-conditionals.md:309
#: python-novice-gapminder/_episodes/17-conditionals.md:329
#: python-novice-gapminder/_episodes/17-conditionals.md:336
#: python-novice-gapminder/_episodes/18-style.md:143
#: python-novice-gapminder/_episodes/18-style.md:150
# blockquote, which can be cascaded
msgid "> > ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:221
# blockquote, which can be cascaded
msgid "> > # Command  # Value of x   # Value of y   # Value of swap #"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:222
# blockquote, which can be cascaded
msgid "> > x = 1.0    # 1.0          # not defined  # not defined   #"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:223
# blockquote, which can be cascaded
msgid "> > y = 3.0    # 1.0          # 3.0          # not defined   #"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:224
# blockquote, which can be cascaded
msgid "> > swap = x   # 1.0          # 3.0          # 1.0           #"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:225
# blockquote, which can be cascaded
msgid "> > x = y      # 3.0          # 3.0          # 1.0           #"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:226
# blockquote, which can be cascaded
msgid "> > y = swap   # 3.0          # 1.0          # 1.0           #"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:228
#: python-novice-gapminder/_episodes/02-variables.md:252
#: python-novice-gapminder/_episodes/03-types-conversion.md:398
#: python-novice-gapminder/_episodes/04-built-in.md:270
#: python-novice-gapminder/_episodes/04-built-in.md:278
#: python-novice-gapminder/_episodes/04-built-in.md:286
#: python-novice-gapminder/_episodes/14-writing-functions.md:191
#: python-novice-gapminder/_episodes/14-writing-functions.md:299
# blockquote, which can be cascaded
msgid "> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:229
#: python-novice-gapminder/_episodes/03-types-conversion.md:380
#: python-novice-gapminder/_episodes/04-built-in.md:287
#: python-novice-gapminder/_episodes/07-reading-tabular.md:387
#: python-novice-gapminder/_episodes/12-for-loops.md:201
#: python-novice-gapminder/_episodes/14-writing-functions.md:232
#: python-novice-gapminder/_episodes/14-writing-functions.md:259
#: python-novice-gapminder/_episodes/14-writing-functions.md:323
# blockquote, which can be cascaded
msgid "> > "
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:230
# blockquote, which can be cascaded
msgid "> > These three lines exchange the values in `x` and `y` using the `swap`"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:231
# blockquote, which can be cascaded
msgid "> > variable for temporary storage. This is a fairly common programming idiom."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:232
#: python-novice-gapminder/_episodes/02-variables.md:259
# SC/DC Template label
msgid ">{: .solution}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:235
# blockquote, which can be cascaded
msgid "> ## Predicting Values"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:236
msgid ">\n"
"> What is the final value of `position` in the program below?\n"
"> (Try to predict the value without running the program,\n"
"> then check your prediction.)\n"
">\n"
"> ~~~\n"
"> initial = 'left'\n"
"> position = initial\n"
"> initial = 'right'\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:250
# blockquote, which can be cascaded
msgid "> > 'left'"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:254
msgid ">> The `initial` variable is assigned the value 'left'.\n"
"> > In the second line, the `position` variable also receives\n"
">> the string value 'left'. In third line, the `initial` variable is given the\n"
">> value 'right', but the `position` variable retains its string value\n"
">> of 'left'."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:262
# blockquote, which can be cascaded
msgid "> ## Challenge"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:263
msgid ">\n"
"> If you assign `a = 123`,\n"
"> what happens if you try to get the second digit of `a` via `a[1]`?\n"
">\n"
"> > ## Solution\n"
"> > Numbers are not stored in the written representation,\n"
"> > so they can't be treated like strings.\n"
"> >\n"
"> > ~~~\n"
"> > a = 123\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > ~~~\n"
"> > TypeError: 'int' object is not subscriptable\n"
"> > ~~~\n"
"> > {: .error}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:283
# blockquote, which can be cascaded
msgid "> ## Choosing a Name"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:284
msgid ">\n"
"> Which is a better variable name, `m`, `min`, or `minutes`?\n"
"> Why?\n"
"> Hint: think about which code you would rather inherit\n"
"> from someone who is leaving the lab:\n"
">\n"
"> 1. `ts = m * 60 + s`\n"
"> 2. `tot_sec = min * 60 + sec`\n"
"> 3. `total_seconds = minutes * 60 + seconds`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > `minutes` is better because `min` might mean something like \"minimum\"\n"
"> > (and actually does in Python, but we haven't seen that yet)."
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:301
# blockquote, which can be cascaded
msgid "> ## Slicing"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:302
msgid ">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> atom_name = 'carbon'\n"
"> print('atom_name[1:3] is:', atom_name[1:3])\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:310
#: python-novice-gapminder/_episodes/02-variables.md:312
#: python-novice-gapminder/_episodes/09-plotting.md:252
#: python-novice-gapminder/_episodes/09-plotting.md:254
#: python-novice-gapminder/_episodes/11-lists.md:258
#: python-novice-gapminder/_episodes/11-lists.md:261
# blockquote, which can be cascaded
msgid "> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:311
# blockquote, which can be cascaded
msgid "> atom_name[1:3] is: ar"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:313
#: python-novice-gapminder/_episodes/03-types-conversion.md:294
#: python-novice-gapminder/_episodes/03-types-conversion.md:346
#: python-novice-gapminder/_episodes/07-reading-tabular.md:352
#: python-novice-gapminder/_episodes/11-lists.md:220
#: python-novice-gapminder/_episodes/11-lists.md:262
#: python-novice-gapminder/_episodes/14-writing-functions.md:217
#: python-novice-gapminder/_episodes/17-conditionals.md:297
#: python-novice-gapminder/_episodes/17-conditionals.md:409
# SC/DC Template label
msgid "> {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/02-variables.md:314
msgid ">\n"
"> 1.  What does `thing[low:high]` do?\n"
"> 2.  What does `thing[low:]` (without a value after the colon) do?\n"
"> 3.  What does `thing[:high]` (without a value before the colon) do?\n"
"> 4.  What does `thing[:]` (just a colon) do?\n"
"> 5.  What does `thing[number:negative-number]` do?\n"
"> 6.  What happens when you choose a `high` value which is out of range? (i.e., try `atom_name[0:15]`) "
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:1
# Front Matter
msgid "---\n"
"title: \"Data Types and Type Conversion\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"What kinds of data do programs store?\"\n"
"- \"How can I convert one type to another?\"\n"
"objectives:\n"
"- \"Explain key differences between integers and floating point numbers.\"\n"
"- \"Explain key differences between numbers and character strings.\"\n"
"- \"Use built-in functions to convert between integers, floating point numbers, and strings.\"\n"
"keypoints:\n"
"- \"Every value has a type.\"\n"
"- \"Use the built-in function `type` to find the type of a value.\"\n"
"- \"Types control what operations can be done on values.\"\n"
"- \"Strings can be added and multiplied.\"\n"
"- \"Strings have a length (but numbers don't).\"\n"
"- \"Must convert numbers to strings or vice versa when operating on them.\"\n"
"- \"Can mix integers and floats freely in operations.\"\n"
"- \"Variables only change value when something is assigned to them.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:22
# header
msgid "## Every value has a type."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:24
# unordered list
msgid "*   Every value in a program has a specific type."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:25
# unordered list
msgid "*   Integer (`int`): represents positive or negative whole numbers like 3 or -512."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:26
# unordered list
msgid "*   Floating point number (`float`): represents real numbers like 3.14159 or -2.5."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:27
# unordered list
msgid "*   Character string (usually called \"string\", `str`): text."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:28
# unordered list
msgid "    *   Written in either single quotes or double quotes (as long as they match)."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:29
# unordered list
msgid "    *   The quote marks aren't printed when the string is displayed."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:31
# header
msgid "## Use the built-in function `type` to find the type of a value."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:33
# unordered list
msgid "*   Use the built-in function `type` to find out what type a value has."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:34
# unordered list
msgid "*   Works on variables as well."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:35
# unordered list
msgid "    *   But remember: the *value* has the type --- the *variable* is just a label."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:37
# code block
msgid "~~~\n"
"print(type(52))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:41
# code block
msgid "~~~\n"
"<class 'int'>\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:46
# code block
msgid "~~~\n"
"fitness = 'average'\n"
"print(type(fitness))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:51
# code block
msgid "~~~\n"
"<class 'str'>\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:56
# header
msgid "## Types control what operations (or methods) can be performed on a given value."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:58
# unordered list
msgid "*   A value's type determines what the program can do to it."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:60
# code block
msgid "~~~\n"
"print(5 - 3)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:64
# code block
msgid "~~~\n"
"2\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:69
# code block
msgid "~~~\n"
"print('hello' - 'h')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:73
# code block
msgid "~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-2-67f5626a1e07> in <module>()\n"
"----> 1 print('hello' - 'h')\n"
"\n"
"TypeError: unsupported operand type(s) for -: 'str' and 'str'\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:83
# header
msgid "## You can use the \"+\" and \"*\" operators on strings."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:85
# unordered list
msgid "*   \"Adding\" character strings concatenates them."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:87
# code block
msgid "~~~\n"
"full_name = 'Ahmed' + ' ' + 'Walsh'\n"
"print(full_name)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:92
# code block
msgid "~~~\n"
"Ahmed Walsh\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:97
# unordered list
msgid "*   Multiplying a character string by an integer _N_ creates a new string that consists of that character string repeated  _N_ times."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:98
# unordered list
msgid "    *   Since multiplication is repeated addition."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:100
# code block
msgid "~~~\n"
"separator = '=' * 10\n"
"print(separator)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:105
# code block
msgid "~~~\n"
"==========\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:110
# header
msgid "## Strings have a length (but numbers don't)."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:112
# unordered list
msgid "*   The built-in function `len` counts the number of characters in a string."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:114
# code block
msgid "~~~\n"
"print(len(full_name))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:118
# code block
msgid "~~~\n"
"11\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:123
# unordered list
msgid "*   But numbers don't have a length (not even zero)."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:125
# code block
msgid "~~~\n"
"print(len(52))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:129
# code block
msgid "~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-3-f769e8e8097d> in <module>()\n"
"----> 1 print(len(52))\n"
"\n"
"TypeError: object of type 'int' has no len()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:139
# header
msgid "## Must convert numbers to strings or vice versa when operating on them."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:141
# unordered list
msgid "*   Cannot add numbers and strings."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:143
# code block
msgid "~~~\n"
"print(1 + '2')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:147
# code block
msgid "~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-4-fe4f54a023c6> in <module>()\n"
"----> 1 print(1 + '2')\n"
"\n"
"TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:157
# unordered list
msgid "*   Not allowed because it's ambiguous: should `1 + '2'` be `3` or `'12'`?"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:158
# unordered list
msgid "*   Some types can be converted to other types by using the type name as a function."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:160
# code block
msgid "~~~\n"
"print(1 + int('2'))\n"
"print(str(1) + '2')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:165
# code block
msgid "~~~\n"
"3\n"
"12\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:171
# header
msgid "## Can mix integers and floats freely in operations."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:173
# unordered list
msgid "*   Integers and floating-point numbers can be mixed in arithmetic."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:174
# unordered list
msgid "    *   Python 3 automatically converts integers to floats as needed. (Integer division in Python 2 will return an integer, the *floor* of the division.)"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:176
# code block
msgid "~~~\n"
"print('half is', 1 / 2.0)\n"
"print('three squared is', 3.0 ** 2)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:181
# code block
msgid "~~~\n"
"half is 0.5\n"
"three squared is 9.0\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:187
# header
msgid "## Variables only change value when something is assigned to them."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:189
# unordered list
msgid "*   If we make one cell in a spreadsheet depend on another,"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:190
msgid "    and update the latter,\n"
"    the former updates automatically.\n"
"*   This does **not** happen in programming languages."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:194
# code block
msgid "~~~\n"
"first = 1\n"
"second = 5 * first\n"
"first = 2\n"
"print('first is', first, 'and second is', second)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:201
# code block
msgid "~~~\n"
"first is 2 and second is 5\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:206
# unordered list
msgid "*   The computer reads the value of `first` when doing the multiplication,"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:207
msgid "    creates a new value, and assigns it to `second`.\n"
"*   After that, `second` does not remember where it came from."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:210
# blockquote, which can be cascaded
msgid "> ## Fractions"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:211
msgid ">\n"
"> What type of value is 3.4?\n"
"> How can you find out?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > It is a floating-point number (often abbreviated \"float\").\n"
"> >\n"
"> > ~~~\n"
"> > print(type(3.4))\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > ~~~\n"
"> > <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:230
# blockquote, which can be cascaded
msgid "> ## Automatic Type Conversion"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:231
msgid ">\n"
"> What type of value is 3.25 + 4?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > It is a float:\n"
"> > integers are automatically converted to floats as necessary.\n"
"> >\n"
"> > ~~~\n"
"> > result = 3.25 + 4\n"
"> > print(result, 'is', type(result))\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > ~~~\n"
"> > 7.25 is <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:251
# blockquote, which can be cascaded
msgid "> ## Choose a Type"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:252
msgid ">\n"
"> What type of value (integer, floating point number, or character string)\n"
"> would you use to represent each of the following?  Try to come up with more than one good answer for each problem.  For example, in  # 1, when would counting days with a floating point variable make more sense than using an integer?  \n"
">\n"
"> 1. Number of days since the start of the year.\n"
"> 2. Time elapsed from the start of the year until now in days.\n"
"> 3. Serial number of a piece of lab equipment.\n"
"> 4. A lab specimen's age\n"
"> 5. Current population of a city.\n"
"> 6. Average population of a city over time.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answers to the questions are:\n"
"> > 1. Integer, since the number of days would lie between 1 and 365. \n"
"> > 2. Floating point, since fractional days are required\n"
"> > 3. Character string if serial number contains letters and numbers, otherwise integer if the serial number consists only of numerals\n"
"> > 4. This will vary! How do you define a specimen's age? whole days since collection (integer)? date and time (string)?\n"
"> > 5. Choose floating point to represent population as large aggreates (eg millions), or integer to represent population in units of individuals.\n"
"> > 6. Floating point number, since an average is likely to have a fractional part.\n"
"> >\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:277
# blockquote, which can be cascaded
msgid "> ## Division Types"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:278
msgid ">\n"
"> In Python 3, the `//` operator performs integer (whole-number) floor division, the `/` operator performs floating-point\n"
"> division, and the '%' (or *modulo*) operator calculates and returns the remainder from integer division:\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 5//3)\n"
"> print('5 / 3:', 5/3)\n"
"> print('5 % 3:', 5%3)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:288
msgid ">\n"
"> ~~~\n"
"> 5 // 3: 1\n"
"> 5 / 3: 1.6666666666666667\n"
"> 5 % 3: 2\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:295
msgid ">\n"
"> However in Python2 (and other languages), the `/` operator between two integer types perform a floor (`//`) division. To perform a float division, we have to convert one of the integers to float.\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 1)\n"
"> print('5 / 3:', 1 )\n"
"> print('5 / float(3):', 1.6666667 )\n"
"> print('float(5) / 3:', 1.6666667 )\n"
"> print('float(5 / 3):', 1.0 )\n"
"> print('5 % 3:', 2)\n"
"> ~~~\n"
">\n"
"> If `num_subjects` is the number of subjects taking part in a study,\n"
"> and `num_per_survey` is the number that can take part in a single survey,\n"
"> write an expression that calculates the number of surveys needed\n"
"> to reach everyone once.\n"
">\n"
"> > ## Solution\n"
"> > We want the minimum number of surveys that reaches everyone once, which is\n"
"> > the rounded up value of `num_subjects / num_per_survey`. This is \n"
"> > equivalent to performing an integer division with `//` and adding 1.\n"
"> > ~~~\n"
"> > num_subjects = 600\n"
"> > num_per_survey = 42\n"
"> > num_surveys = num_subjects // num_per_survey + 1\n"
"> >\n"
"> > print(num_subjects, 'subjects,', num_per_survey, 'per survey:', num_surveys)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > ~~~\n"
"> > 600 subjects, 42 per survey: 15\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:331
# blockquote, which can be cascaded
msgid "> ## Strings to Numbers"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:332
msgid ">\n"
"> Where reasonable, `float()` will convert a string to a floating point number,\n"
"> and `int()` will convert a floating point number to an integer:\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"3.4\"))\n"
"> print(\"float to int:\", int(3.4))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:341
msgid ">\n"
"> ~~~\n"
"> string to float: 3.4\n"
"> float to int: 3\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:347
msgid ">\n"
"> If the conversion doesn't make sense, however, an error message will occur\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"Hello world!\"))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:354
msgid ">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> ValueError                                Traceback (most recent call last)\n"
"> <ipython-input-5-df3b790bf0a2> in <module>()\n"
"> ----> 1 print(\"string to float:\", float(\"Hello world!\"))\n"
">\n"
"> ValueError: could not convert string to float: 'Hello world!'\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:363
#: python-novice-gapminder/_episodes/06-libraries.md:252
#: python-novice-gapminder/_episodes/07-reading-tabular.md:71
#: python-novice-gapminder/_episodes/15-scope.md:108
# SC/DC Template label
msgid "> {: .error}"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:364
msgid ">\n"
"> Given this information, what do you expect the following program to do?\n"
">\n"
"> What does it actually do?\n"
">\n"
"> Why do you think it does that?\n"
">\n"
"> ~~~\n"
"> print(\"fractional string to int:\", int(\"3.4\"))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:375
#: python-novice-gapminder/_episodes/07-reading-tabular.md:368
#: python-novice-gapminder/_episodes/08-data-frames.md:369
#: python-novice-gapminder/_episodes/08-data-frames.md:371
#: python-novice-gapminder/_episodes/09-plotting.md:246
#: python-novice-gapminder/_episodes/09-plotting.md:256
#: python-novice-gapminder/_episodes/14-writing-functions.md:230
# blockquote, which can be cascaded
msgid "> "
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:377
# blockquote, which can be cascaded
msgid "> > What do you expect this program to do? It would not be so unreasonable to expect the Python 3 `int` command to"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:378
# blockquote, which can be cascaded
msgid "> > convert the string \"3.4\" to 3.4 and an additional type conversion to 3. After all, Python 3 performs a lot of other"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:379
# blockquote, which can be cascaded
msgid "> > magic - isn't that part of its charm?"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:381
# blockquote, which can be cascaded
msgid "> > However, Python 3 throws an error. Why? To be consistent, possibly. If you ask Python to perform two consecutive"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:382
# blockquote, which can be cascaded
msgid "> > typecasts, you must convert it explicitly in code."
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:385
# blockquote, which can be cascaded
msgid "> > int(\"3.4\")"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:386
# blockquote, which can be cascaded
msgid "> > int(float(\"3.4\"))"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:388
#: python-novice-gapminder/_episodes/04-built-in.md:266
#: python-novice-gapminder/_episodes/04-built-in.md:274
#: python-novice-gapminder/_episodes/04-built-in.md:282
#: python-novice-gapminder/_episodes/12-for-loops.md:235
#: python-novice-gapminder/_episodes/12-for-loops.md:259
#: python-novice-gapminder/_episodes/12-for-loops.md:277
#: python-novice-gapminder/_episodes/12-for-loops.md:297
#: python-novice-gapminder/_episodes/12-for-loops.md:312
#: python-novice-gapminder/_episodes/12-for-loops.md:342
#: python-novice-gapminder/_episodes/12-for-loops.md:378
#: python-novice-gapminder/_episodes/12-for-loops.md:399
#: python-novice-gapminder/_episodes/14-writing-functions.md:289
#: python-novice-gapminder/_episodes/14-writing-functions.md:295
#: python-novice-gapminder/_episodes/17-conditionals.md:310
#: python-novice-gapminder/_episodes/17-conditionals.md:337
#: python-novice-gapminder/_episodes/18-style.md:151
# blockquote, which can be cascaded
msgid "> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:390
# blockquote, which can be cascaded
msgid "> > In [2]: int(\"3.4\")"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:391
# blockquote, which can be cascaded
msgid "> > ---------------------------------------------------------------------------"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:392
# blockquote, which can be cascaded
msgid "> > ValueError                                Traceback (most recent call last)"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:393
# blockquote, which can be cascaded
msgid "> > <ipython-input-2-ec6729dfccdc> in <module>()"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:394
# blockquote, which can be cascaded
msgid "> > ----> 1 int(\"3.4\")"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:395
# blockquote, which can be cascaded
msgid "> > ValueError: invalid literal for int() with base 10: '3.4'"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:396
# blockquote, which can be cascaded
msgid "> > 3"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:402
# blockquote, which can be cascaded
msgid "> ## Arithmetic with Different Types"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:403
msgid ">\n"
"> Which of the following will print 2.0?\n"
"> Note: there may be more than one right answer.\n"
">\n"
"> ~~~\n"
"> first = 1.0\n"
"> second = \"1\"\n"
"> third = \"1.1\"\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:413
msgid ">\n"
"> 1. `first + float(second)`\n"
"> 2. `float(second) + float(third)`\n"
"> 3. `first + int(third)`\n"
"> 4. `first + int(float(third))`\n"
"> 5. `int(first) + int(float(third))`\n"
"> 6. `2.0 * second`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Answer: 1 and 4"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:427
# blockquote, which can be cascaded
msgid "> ## Complex Numbers"
msgstr ""

#: python-novice-gapminder/_episodes/03-types-conversion.md:428
msgid ">\n"
"> Python provides complex numbers,\n"
"> which are written as `1.0+2.0j`.\n"
"> If `val` is an imaginary number,\n"
"> its real and imaginary parts can be accessed using *dot notation*\n"
"> as `val.real` and `val.imag`.\n"
">\n"
"> 1.  Why do you think Python uses `j` instead of `i` for the imaginary part?\n"
"> 2.  What do you expect `1+2j + 3` to produce?\n"
"> 3.  What do you expect '4j' to be?  What about `4 j` or `4 + j'? > \n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > 1. Standard mathematics treatments typically use `i` to denote an imaginary number. However, from media reports it\n"
"> > was an early convention established from electrical engineering that now presents a technically expensive area to\n"
"> > change. [Stack Overflow provides additional explanation and\n"
"> > discussion](http://stackoverflow.com/questions/24812444/why-are-complex-numbers-in-python-denoted-with-j-instead-of-i)\n"
"> > 2. _4+2j_\n"
"> > 3. _4j, syntax error, depends on the value of j_"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:1
# Front Matter
msgid "---\n"
"title: \"Built-in Functions and Help\"\n"
"teaching: 15\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use built-in functions?\"\n"
"- \"How can I find out what they do?\"\n"
"- \"What kind of errors can occur in programs?\"\n"
"objectives:\n"
"- \"Explain the purpose of functions.\"\n"
"- \"Correctly call built-in Python functions.\"\n"
"- \"Correctly nest calls to built-in functions.\"\n"
"- \"Use help to display documentation for built-in functions.\"\n"
"- \"Correctly describe situations in which SyntaxError and NameError occur.\"\n"
"keypoints:\n"
"- \"Use comments to add documentation to programs.\"\n"
"- \"A function may take zero or more arguments.\"\n"
"- \"Commonly-used built-in functions include `max`, `min`, and `round`.\"\n"
"- \"Functions may only work for certain (combinations of) arguments.\"\n"
"- \"Functions may have default values for some arguments.\"\n"
"- \"Use the built-in function `help` to get help for a function.\"\n"
"- \"The Jupyter Notebook has two ways to get help.\"\n"
"- \"Every function returns something.\"\n"
"- \"Python reports a syntax error when it can't understand the source of a program.\"\n"
"- \"Python reports a runtime error when something goes wrong while a program is executing.\"\n"
"- \"Fix syntax errors by reading the source code, and runtime errors by tracing the program's execution.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:28
# header
msgid "## Use comments to add documentation to programs."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:30
# code block
msgid "~~~\n"
"# This sentence isn't executed by Python.\n"
"adjustment = 0.5   # Neither is this - anything after '#' is ignored.\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:36
# header
msgid "## A function may take zero or more arguments."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:38
# unordered list
msgid "*   We have seen some functions already --- now let's take a closer look."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:39
# unordered list
msgid "*   An *argument* is a value passed into a function."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:40
# unordered list
msgid "*   `len` takes exactly one."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:41
# unordered list
msgid "*   `int`, `str`, and `float` create a new value from an existing one."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:42
# unordered list
msgid "*   `print` takes zero or more."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:43
# unordered list
msgid "*   `print` with no arguments prints a blank line."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:44
# unordered list
msgid "    *   Must always use parentheses, even if they're empty,"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:45
msgid "        so that Python knows a function is being called."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:47
# code block
msgid "~~~\n"
"print('before')\n"
"print()\n"
"print('after')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:53
# code block
msgid "~~~\n"
"before\n"
"\n"
"after\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:60
# header
msgid "## Commonly-used built-in functions include `max`, `min`, and `round`."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:62
# unordered list
msgid "*   Use `max` to find the largest value of one or more values."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:63
# unordered list
msgid "*   Use `min` to find the smallest."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:64
# unordered list
msgid "*   Both work on character strings as well as numbers."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:65
# unordered list
msgid "    *   \"Larger\" and \"smaller\" use (0-9, A-Z, a-z) to compare letters."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:67
# code block
msgid "~~~\n"
"print(max(1, 2, 3))\n"
"print(min('a', 'A', '0'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:72
# code block
msgid "~~~\n"
"3\n"
"0\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:78
# header
msgid "## Functions may only work for certain (combinations of) arguments."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:80
# unordered list
msgid "*   `max` and `min` must be given at least one argument."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:81
# unordered list
msgid "    *   \"Largest of the empty set\" is a meaningless question."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:82
# unordered list
msgid "*   And they must be given things that can meaningfully be compared."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:84
# code block
msgid "~~~\n"
"print(max(1, 'a'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:88
# code block
msgid "~~~\n"
"TypeError: unorderable types: str() > int()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:93
# header
msgid "## Functions may have default values for some arguments."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:95
# unordered list
msgid "*   `round` will round off a floating-point number."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:96
# unordered list
msgid "*   By default, rounds to zero decimal places."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:98
# code block
msgid "~~~\n"
"round(3.712)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:102
# code block
msgid "~~~\n"
"4\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:107
# unordered list
msgid "*   We can specify the number of decimal places we want."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:109
# code block
msgid "~~~\n"
"round(3.712, 1)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:113
# code block
msgid "~~~\n"
"3.7\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:118
# header
msgid "## Use the built-in function `help` to get help for a function."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:120
# unordered list
msgid "*   Every built-in function has online documentation."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:122
# code block
msgid "~~~\n"
"help(round)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:126
# code block
msgid "~~~\n"
"Help on built-in function round in module builtins:\n"
"\n"
"round(...)\n"
"    round(number[, ndigits]) -> number\n"
"\n"
"    Round a number to a given precision in decimal digits (default 0 digits).\n"
"    This returns an int when called with one argument, otherwise the\n"
"    same type as the number. ndigits may be negative.\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:138
# header
msgid "## Python reports a syntax error when it can't understand the source of a program."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:140
# unordered list
msgid "*   Won't even try to run the program if it can't be parsed."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:142
# code block
msgid "~~~\n"
"# Forgot to close the quote marks around the string.\n"
"name = 'Feng\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:147
# code block
msgid "~~~\n"
"SyntaxError: EOL while scanning string literal\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:152
# code block
msgid "~~~\n"
"# An extra '=' in the assignment.\n"
"age = = 52\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:157
# code block
msgid "~~~\n"
"SyntaxError: invalid syntax\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:162
# unordered list
msgid "*   Look more closely at the error message:"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:164
# code block
msgid "~~~\n"
"print(\"hello world\"\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:168
# code block
msgid "~~~\n"
"  File \"<ipython-input-6-d1cc229bf815>\", line 1\n"
"    print (\"hello world\"\n"
"                        ^\n"
"SyntaxError: unexpected EOF while parsing\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:176
# unordered list
msgid "*   The message indicates a problem on first line of the input (\"line 1\")."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:177
# unordered list
msgid "    *   In this case the \"ipython-input\" section of the file name tells us that"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:178
msgid "        we are working with input into IPython,\n"
"        the Python interpreter used by the Jupyter Notebook.\n"
"*   The `-6-` part of the filename indicates that\n"
"    the error occurred in cell 6 of our Notebook.\n"
"*   Next is the problematic line of code,\n"
"    indicating the problem with a `^` pointer."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:185
# header
msgid "## Python reports a runtime error when something goes wrong while a program is executing."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:187
# code block
msgid "~~~\n"
"age = 53\n"
"remaining = 100 - aege # mis-spelled 'age'\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:192
# code block
msgid "~~~\n"
"NameError: name 'aege' is not defined\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:197
# unordered list
msgid "*   Fix syntax errors by reading the source and runtime errors by tracing execution."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:199
# header
msgid "## The Jupyter Notebook has two ways to get help."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:201
# unordered list
msgid "*   Place the cursor inside the parenthesis of the function,"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:202
msgid "    hold down `shift`,\n"
"    and press `tab`.\n"
"*   Or type a function name with a question mark after it."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:206
# header
msgid "## Every function returns something."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:208
# unordered list
msgid "*   Every function call produces some result."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:209
# unordered list
msgid "*   If the function doesn't have a useful result to return,"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:210
msgid "    it usually returns the special value `None`."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:212
# code block
msgid "~~~\n"
"result = print('example')\n"
"print('result of print is', result)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:217
# code block
msgid "~~~\n"
"example\n"
"result of print is None\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:223
# blockquote, which can be cascaded
msgid "> ## What Happens When"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:224
msgid ">\n"
"> 1. Explain in simple terms the order of operations in the following program:\n"
">    when does the addition happen, when does the subtraction happen,\n"
">    when is each function called, etc.\n"
"> 2. What is the final value of `radiance`?\n"
">\n"
"> ~~~\n"
"> radiance = 1.0\n"
"> radiance = max(2.1, 2.0 + min(radiance, 1.1 * radiance - 0.5))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:236
# blockquote, which can be cascaded
msgid "> > 1."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:237
# blockquote, which can be cascaded
msgid "> >    1. `1.1 * radiance = 1.1`"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:238
# blockquote, which can be cascaded
msgid "> >    2. `1.1 - 0.5 = 0.6`"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:239
# blockquote, which can be cascaded
msgid "> >    3. `min(randiance, 0.6) = 0.6`"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:240
# blockquote, which can be cascaded
msgid "> >    4. `2.0 + 0.6 = 2.6`"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:241
# blockquote, which can be cascaded
msgid "> >    5. `max(2.1, 2.6) = 2.6`"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:242
# blockquote, which can be cascaded
msgid "> > 2. At the end, `radiance = 2.6`"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:246
# blockquote, which can be cascaded
msgid "> ## Spot the Difference"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:247
msgid ">\n"
"> 1. Predict what each of the `print` statements in the program below will print.\n"
"> 2. Does `max(len(rich), poor)` run or produce an error message?\n"
">    If it runs, does its result make any sense?\n"
">\n"
"> ~~~\n"
"> easy_string = \"abc\"\n"
"> print(max(easy_string))\n"
"> rich = \"gold\"\n"
"> poor = \"tin\"\n"
"> print(max(rich, poor))\n"
"> print(max(len(rich), len(poor)))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:262
# blockquote, which can be cascaded
msgid "> > 1. "
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:264
# blockquote, which can be cascaded
msgid "> > print(max(easy_string))"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:268
# blockquote, which can be cascaded
msgid "> > c"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:272
# blockquote, which can be cascaded
msgid "> > print(max(rich, poor))"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:276
# blockquote, which can be cascaded
msgid "> > tin"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:280
# blockquote, which can be cascaded
msgid "> > print(max(len(rich), len(poor)))"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:284
# blockquote, which can be cascaded
msgid "> > 4"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:288
# blockquote, which can be cascaded
msgid "> > 2. It throws a TypeError. The command is trying to run `max(4, 'tin')` and you can't compare"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:289
# blockquote, which can be cascaded
msgid "> >    a string and an integer"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:293
# blockquote, which can be cascaded
msgid "> ## Why Not?"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:294
msgid ">\n"
"> Why don't `max` and `min` return `None` when they are given no arguments?\n"
">\n"
"> > ## Solution\n"
"> > `max` and `min` return TypeErrors in this case because the correct number of parameters\n"
"> > was not supplied. If it just returned `None`, the error would be much harder to trace as it\n"
"> > would likely be stored into a variable and used later in the program, only to likely throw\n"
"> > a runtime error."
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:305
# blockquote, which can be cascaded
msgid "> ## Last Character of a String"
msgstr ""

#: python-novice-gapminder/_episodes/04-built-in.md:306
msgid ">\n"
"> If Python starts counting from zero,\n"
"> and `len` returns the number of characters in a string,\n"
"> what index expression will get the last character in the string `name`?\n"
"> (Note: we will see a simpler way to do this in a later episode.)\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > `name[len(name) - 1]`"
msgstr ""

#: python-novice-gapminder/_episodes/05-coffee.md:1
# Front Matter
msgid "---\n"
"layout: break\n"
"title: \"Morning Coffee\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/05-coffee.md:8
# header
msgid "# Reflection exercise"
msgstr ""

#: python-novice-gapminder/_episodes/05-coffee.md:10
msgid "Over coffee, reflect on and discuss the following:\n"
"* What are the different kinds of errors Python will report?\n"
"* Did the code always produce the results you expected? If not, why?\n"
"* Is there something we can do to prevent errors when we write code?"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:1
# Front Matter
msgid "---\n"
"title: \"Libraries\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use software that other people have written?\"\n"
"- \"How can I find out what that software does?\"\n"
"objectives:\n"
"- \"Explain what software libraries are and why programmers create and use them.\"\n"
"- \"Write programs that import and use libraries from Python's standard library.\"\n"
"- \"Find and read documentation for standard libraries interactively (in the interpreter) and online.\"\n"
"keypoints:\n"
"- \"Most of the power of a programming language is in its libraries.\"\n"
"- \"A program must import a library module in order to use it.\"\n"
"- \"Use `help` to learn about the contents of a library module.\"\n"
"- \"Import specific items from a library to shorten programs.\"\n"
"- \"Create an alias for a library when importing it to shorten programs.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:19
# header
msgid "## Most of the power of a programming language is in its libraries."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:21
# unordered list
msgid "*   A *library* is a collection of files (called *modules*) that contains"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:22
msgid "    functions for use by other programs.\n"
"    *   May also contain data values (e.g., numerical constants) and other things.\n"
"    *   Library's contents are supposed to be related, but there's no way to enforce that.\n"
"*   The Python [standard library][stdlib] is an extensive suite of modules that comes\n"
"    with Python itself.\n"
"*   Many additional libraries are available from [PyPI][pypi] (the Python Package Index).\n"
"*   We will see later how to write new libraries."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:30
# blockquote, which can be cascaded
msgid "> ## Libraries and modules"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:31
msgid ">\n"
"> A library is a collection of modules, but the terms are often used\n"
"> interchangeably, especially since many libraries only consist of a single\n"
"> module, so don't worry if you mix them."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:38
# header
msgid "## A program must import a library module before using it."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:40
# unordered list
msgid "*   Use `import` to load a library module into a program's memory."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:41
# unordered list
msgid "*   Then refer to things from the module as `module_name.thing_name`."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:42
# unordered list
msgid "    *   Python uses `.` to mean \"part of\"."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:43
# unordered list
msgid "*   Using `math`, one of the modules in the standard library:"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:45
# code block
msgid "~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:52
# code block
msgid "~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:58
# unordered list
msgid "*   Have to refer to each item with the module's name."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:59
# unordered list
msgid "    *   `math.cos(pi)` won't work: the reference to `pi`"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:60
msgid "        doesn't somehow \"inherit\" the function's reference to `math`."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:62
# header
msgid "## Use `help` to learn about the contents of a library module."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:64
# unordered list
msgid "*   Works just like help for a function."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:66
# code block
msgid "~~~\n"
"help(math)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:70
# code block
msgid "~~~\n"
"Help on module math:\n"
"\n"
"NAME\n"
"    math\n"
"\n"
"MODULE REFERENCE\n"
"    http://docs.python.org/3.5/library/math\n"
"\n"
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above.\n"
"\n"
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard.\n"
"\n"
"FUNCTIONS\n"
"    acos(...)\n"
"        acos(x)\n"
"\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:98
# header
msgid "## Import specific items from a library module to shorten programs."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:100
# unordered list
msgid "*   Use `from ... import ...` to load only specific items from a library module."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:101
# unordered list
msgid "*   Then refer to them directly without library name as prefix."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:103
# code block
msgid "~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:109
#: python-novice-gapminder/_episodes/06-libraries.md:125
# code block
msgid "~~~\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:114
# header
msgid "## Create an alias for a library module when importing it to shorten programs."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:116
# unordered list
msgid "*   Use `import ... as ...` to give a library a short *alias* while importing it."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:117
# unordered list
msgid "*   Then refer to items in the library using that shortened name."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:119
# code block
msgid "~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:130
# unordered list
msgid "*   Commonly used for libraries that are frequently used or have long names."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:131
# unordered list
msgid "    *   E.g., `matplotlib` plotting library is often aliased as `mpl`."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:132
# unordered list
msgid "*   But can make programs harder to understand,"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:133
msgid "    since readers must learn your program's aliases."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:135
# blockquote, which can be cascaded
msgid "> ## Exploring the Math Module"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:136
msgid ">\n"
"> 1. What function from the `math` module can you use to calculate a square root\n"
">    *without* using `sqrt`?\n"
"> 2. Since the library contains this function, why does `sqrt` exist?\n"
">\n"
"> > ## Solution\n"
"> > 1. Using `help(math)` we see that we've got `pow(x,y)` in addition to `sqrt(x)`,\n"
"> >    so we could use `pow(x, 0.5)` to find a square root.\n"
"> > 2. The `sqrt(x)` function is arguably more readable than `pow(x, 0.5)` when\n"
"> >    implementing equations. Readability is a cornerstone of good programming, so it\n"
"> >    makes sense to provide a special function for this specific common case.\n"
"> >\n"
"> >    Also, the design of Python's `math` library has its origin in the C standard,\n"
"> >    which includes both `sqrt(x)` and `pow(x,y)`, so a little bit of the history\n"
"> >    of programming is showing in Python's function names.\n"
"> >"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:155
# blockquote, which can be cascaded
msgid "> ## Locating the Right Module"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:156
msgid ">\n"
"> You want to select a random character from a string:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:163
msgid ">\n"
"> 1. Which [standard library][stdlib] module could help you?\n"
"> 2. Which function would you select from that module? Are there alternatives?\n"
"> 3. Try to write a program that uses the function.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The [random module](randommod) seems like it could help you.\n"
"> >\n"
"> > The string has 11 characters, each having a positional index from 0 to 10.\n"
"> > You could use `random.randrange` function (or the alias `random.randint`\n"
"> > if you find that easier to remember) to get a random integer between 0 and\n"
"> > 10, and then pick out the character at that position:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > or more compactly:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > Perhaps you found the `random.sample` function? It allows for slightly\n"
"> > less typing:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > Note that this function returns a list of values. We will learn about\n"
"> > lists in episode 11.\n"
"> >\n"
"> > There's also other functions you could use, but with more convoluted\n"
"> > code as a result."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:213
# blockquote, which can be cascaded
msgid "> ## Jigsaw Puzzle (Parson's Problem) Programming Example"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:214
msgid ">\n"
"> Rearrange the following statements so that a random\n"
"> DNA base is printed and its index in the string.  Not all statements may be needed.  Feel free to use/add\n"
"> intermediate variables.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:228
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:244
# blockquote, which can be cascaded
msgid "> ## When Is Help Available?"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:245
msgid ">\n"
"> When a colleague of yours types `help(math)`,\n"
"> Python reports an error:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:253
msgid ">\n"
"> What has your colleague forgotten to do?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Importing the math module (`import math`)"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:262
# blockquote, which can be cascaded
msgid "> ## Importing With Aliases"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:263
msgid ">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Rewrite the program so that it uses `import` *without* `as`.\n"
"> 3. Which form do you find easier to read?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:274
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > can bewritten as\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > Since you just wrote the code and are familiar with it, you might actually\n"
"> > find the first version easier to read. But when trying to read a huge piece\n"
"> > of code written by someone else, or when getting back to your own huge piece\n"
"> > of code after several months, non-abbreviated names are often easier, except\n"
"> > where there are clear abbreviation conventions."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:301
# blockquote, which can be cascaded
msgid "> ## There Are Many Ways To Import Libraries!"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:302
msgid ">\n"
"> Match the following print statements with the appropriate library calls.\n"
">\n"
"> Print commands:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\",sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\",m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\",math.sin(math.pi/2))`\n"
">\n"
"> Library calls:\n"
">\n"
"> 1. `from math import sin,pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Library calls 1 and 4. In order to directly refer to `sin` and `pi` without\n"
"> >    the library name as prefix, you need to use the `from ... import ...`\n"
"> >    statement. Whereas library call 1 specifically imports the two functions\n"
"> >    `sin` and `pi`, library call 4 imports all functions in the `math` module.\n"
"> > 2. Library call 3. Here `sin` and `pi` are referred to with a shortened library\n"
"> >    name `m` instead of `math`. Library call 3 does exactly that using the\n"
"> >    `import ... as ...` syntax - it creates an alias for `math` in the form of\n"
"> >    the shortened name `m`.\n"
"> > 3. Library call 2. Here `sin` and `pi` are referred to with the regular library\n"
"> >    name `math`, so the regular `import ...` call suffices."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:333
# blockquote, which can be cascaded
msgid "> ## Importing Specific Items"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:334
msgid ">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Do you find this version easier to read than preceding ones?\n"
"> 3. Why *wouldn't* programmers always use this form of `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:345
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > Most likely you find this version easier to read since it's less dense.\n"
"> > The main reason not to use this form of import is to avoid name clashes.\n"
"> > For instance, you wouldn't import `degrees` this way if you also wanted to\n"
"> > use the name `degrees` for a variable or function of your own. Or if you\n"
"> > were to also import a function named `degrees` from another library."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:363
#: python-novice-gapminder/_episodes/15-scope.md:76
# blockquote, which can be cascaded
msgid "> ## Reading Error Messages"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:364
msgid ">\n"
"> 1. Read the code below and try to identify what the errors are without running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:373
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. The logarithm of `x` is only defined for `x > 0`, so 0 is outside the\n"
"> >    domain of the function.\n"
"> > 2. You get an error of type \"ValueError\", indicating that the function\n"
"> >    received an inappropriate argument value. The additional message\n"
"> >    \"math domain error\" makes it clearer what the problem is."
msgstr ""

#: python-novice-gapminder/_episodes/06-libraries.md:384
msgid "[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:1
# Front Matter
msgid "---\n"
"title: \"Reading Tabular Data into DataFrames\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I read tabular data?\"\n"
"objectives:\n"
"- \"Import the Pandas library.\"\n"
"- \"Use Pandas to load a simple CSV data set.\"\n"
"- \"Get some basic information about a Pandas DataFrame.\"\n"
"keypoints:\n"
"- \"Use the Pandas library to get basic statistics out of tabular data.\"\n"
"- \"Use `index_col` to specify that a column's values should be used as row headings.\"\n"
"- \"Use `DataFrame.info` to find out more about a dataframe.\"\n"
"- \"The `DataFrame.columns` variable stores information about the dataframe's columns.\"\n"
"- \"Use `DataFrame.T` to transpose a dataframe.\"\n"
"- \"Use `DataFrame.describe` to get summary statistics about data.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:19
# header
msgid "## Use the Pandas library to do statistics on tabular data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:21
# unordered list
msgid "*   Pandas is a widely-used Python library for statistics, particularly on tabular data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:22
# unordered list
msgid "*   Borrows many features from R's dataframes."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:23
# unordered list
msgid "    *   A 2-dimenstional table whose columns have names"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:24
msgid "        and potentially have different data types.\n"
"*   Load it with `import pandas`.\n"
"*   Read a Comma Separate Values (CSV) data file with `pandas.read_csv`.\n"
"    *   Argument is the name of the file to be read.\n"
"    *   Assign result to a variable to store the data that was read."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:30
# code block
msgid "~~~\n"
"import pandas\n"
"\n"
"data = pandas.read_csv('data/gapminder_gdp_oceania.csv')\n"
"print(data)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:37
# code block
msgid "~~~\n"
"       country  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"0    Australia     10039.59564     10949.64959     12217.22686\n"
"1  New Zealand     10556.57566     12247.39532     13175.67800\n"
"\n"
"   gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"0     14526.12465     16788.62948     18334.19751     19477.00928\n"
"1     14463.91893     16046.03728     16233.71770     17632.41040\n"
"\n"
"   gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"0     21888.88903     23424.76683     26997.93657     30687.75473\n"
"1     19007.19129     18363.32494     21050.41377     23189.80135\n"
"\n"
"   gdpPercap_2007\n"
"0     34435.36744\n"
"1     25185.00911\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:56
# unordered list
msgid "*   The columns in a dataframe are the observed variables, and the rows are the observations."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:57
# unordered list
msgid "*   Pandas uses backslash `\\` to show wrapped lines when output is too wide to fit the screen."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:59
# blockquote, which can be cascaded
msgid "> ## File Not Found"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:60
msgid ">\n"
"> Our lessons store their data files in a `data` sub-directory,\n"
"> which is why the path to the file is `data/gapminder_gdp_oceania.csv`.\n"
"> If you forget to include `data/`,\n"
"> or if you include it but your copy of the file is somewhere else,\n"
"> you will get a [runtime error]({{ page.root }}/05-error-messages/)\n"
"> that ends with a line like this:\n"
">\n"
"> ~~~\n"
"> OSError: File b'gapminder_gdp_oceania.csv' does not exist\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:74
# header
msgid "## Use `index_col` to specify that a column's values should be used as row headings."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:76
# unordered list
msgid "*   Row headings are numbers (0 and 1 in this case)."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:77
# unordered list
msgid "*   Really want to index by country."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:78
# unordered list
msgid "*   Pass the name of the column to `read_csv` as its `index_col` parameter to do this."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:80
# code block
msgid "~~~\n"
"data = pandas.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"print(data)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:85
# code block
msgid "~~~\n"
"             gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"country\n"
"Australia       10039.59564     10949.64959     12217.22686     14526.12465\n"
"New Zealand     10556.57566     12247.39532     13175.67800     14463.91893\n"
"\n"
"             gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"country\n"
"Australia       16788.62948     18334.19751     19477.00928     21888.88903\n"
"New Zealand     16046.03728     16233.71770     17632.41040     19007.19129\n"
"\n"
"             gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"country\n"
"Australia       23424.76683     26997.93657     30687.75473     34435.36744\n"
"New Zealand     18363.32494     21050.41377     23189.80135     25185.00911\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:103
# header
msgid "## Use `DataFrame.info` to find out more about a dataframe."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:105
# code block
msgid "~~~\n"
"data.info()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:109
# code block
msgid "~~~\n"
"<class 'pandas.core.frame.DataFrame'>\n"
"Index: 2 entries, Australia to New Zealand\n"
"Data columns (total 12 columns):\n"
"gdpPercap_1952    2 non-null float64\n"
"gdpPercap_1957    2 non-null float64\n"
"gdpPercap_1962    2 non-null float64\n"
"gdpPercap_1967    2 non-null float64\n"
"gdpPercap_1972    2 non-null float64\n"
"gdpPercap_1977    2 non-null float64\n"
"gdpPercap_1982    2 non-null float64\n"
"gdpPercap_1987    2 non-null float64\n"
"gdpPercap_1992    2 non-null float64\n"
"gdpPercap_1997    2 non-null float64\n"
"gdpPercap_2002    2 non-null float64\n"
"gdpPercap_2007    2 non-null float64\n"
"dtypes: float64(12)\n"
"memory usage: 208.0+ bytes\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:130
# unordered list
msgid "*   This is a `DataFrame`"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:131
# unordered list
msgid "*   Two rows named `'Australia'` and `'New Zealand'`"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:132
# unordered list
msgid "*   Twelve columns, each of which has two actual 64-bit floating point values."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:133
# unordered list
msgid "    *   We will talk later about null values, which are used to represent missing observations."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:134
# unordered list
msgid "*   Uses 208 bytes of memory."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:136
# header
msgid "## The `DataFrame.columns` variable stores information about the dataframe's columns."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:138
# unordered list
msgid "*   Note that this is data, *not* a method."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:139
# unordered list
msgid "    *   Like `math.pi`."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:140
# unordered list
msgid "    *   So do not use `()` to try to call it."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:141
# unordered list
msgid "*   Called a *member variable*, or just *member*."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:143
# code block
msgid "~~~\n"
"print(data.columns)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:147
# code block
msgid "~~~\n"
"Index(['gdpPercap_1952', 'gdpPercap_1957', 'gdpPercap_1962', 'gdpPercap_1967',\n"
"       'gdpPercap_1972', 'gdpPercap_1977', 'gdpPercap_1982', 'gdpPercap_1987',\n"
"       'gdpPercap_1992', 'gdpPercap_1997', 'gdpPercap_2002', 'gdpPercap_2007'],\n"
"      dtype='object')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:155
# header
msgid "## Use `DataFrame.T` to transpose a dataframe."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:157
# unordered list
msgid "*   Sometimes want to treat columns as rows and vice versa."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:158
# unordered list
msgid "*   Transpose (written `.T`) doesn't copy the data, just changes the program's view of it."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:159
# unordered list
msgid "*   Like `columns`, it is a member variable."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:161
# code block
msgid "~~~\n"
"print(data.T)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:165
# code block
msgid "~~~\n"
"country           Australia  New Zealand\n"
"gdpPercap_1952  10039.59564  10556.57566\n"
"gdpPercap_1957  10949.64959  12247.39532\n"
"gdpPercap_1962  12217.22686  13175.67800\n"
"gdpPercap_1967  14526.12465  14463.91893\n"
"gdpPercap_1972  16788.62948  16046.03728\n"
"gdpPercap_1977  18334.19751  16233.71770\n"
"gdpPercap_1982  19477.00928  17632.41040\n"
"gdpPercap_1987  21888.88903  19007.19129\n"
"gdpPercap_1992  23424.76683  18363.32494\n"
"gdpPercap_1997  26997.93657  21050.41377\n"
"gdpPercap_2002  30687.75473  23189.80135\n"
"gdpPercap_2007  34435.36744  25185.00911\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:182
# header
msgid "## Use `DataFrame.describe` to get summary statistics about data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:184
msgid "DataFrame.describe() gets the summary statistics of only the columns that have numerical data. \n"
"All other columns are ignored, unless you use the argument `include='all'`.\n"
"~~~\n"
"print(data.describe())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:190
# code block
msgid "~~~\n"
"       gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     10298.085650    11598.522455    12696.452430    14495.021790\n"
"std        365.560078      917.644806      677.727301       43.986086\n"
"min      10039.595640    10949.649590    12217.226860    14463.918930\n"
"25%      10168.840645    11274.086022    12456.839645    14479.470360\n"
"50%      10298.085650    11598.522455    12696.452430    14495.021790\n"
"75%      10427.330655    11922.958888    12936.065215    14510.573220\n"
"max      10556.575660    12247.395320    13175.678000    14526.124650\n"
"\n"
"       gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"count         2.00000        2.000000        2.000000        2.000000\n"
"mean      16417.33338    17283.957605    18554.709840    20448.040160\n"
"std         525.09198     1485.263517     1304.328377     2037.668013\n"
"min       16046.03728    16233.717700    17632.410400    19007.191290\n"
"25%       16231.68533    16758.837652    18093.560120    19727.615725\n"
"50%       16417.33338    17283.957605    18554.709840    20448.040160\n"
"75%       16602.98143    17809.077557    19015.859560    21168.464595\n"
"max       16788.62948    18334.197510    19477.009280    21888.889030\n"
"\n"
"       gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     20894.045885    24024.175170    26938.778040    29810.188275\n"
"std       3578.979883     4205.533703     5301.853680     6540.991104\n"
"min      18363.324940    21050.413770    23189.801350    25185.009110\n"
"25%      19628.685413    22537.294470    25064.289695    27497.598692\n"
"50%      20894.045885    24024.175170    26938.778040    29810.188275\n"
"75%      22159.406358    25511.055870    28813.266385    32122.777857\n"
"max      23424.766830    26997.936570    30687.754730    34435.367440\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:223
# unordered list
msgid "*   Not particularly useful with just two records,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:224
msgid "    but very helpful when there are thousands."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:226
# blockquote, which can be cascaded
msgid "> ## Reading Other Data"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:227
msgid ">\n"
"> Read the data in `gapminder_gdp_americas.csv`\n"
"> (which should be in the same directory as `gapminder_gdp_oceania.csv`)\n"
"> into a variable called `americas`\n"
"> and display its summary statistics.\n"
">\n"
"> > ## Solution\n"
"> > To read in a CSV, we use `pandas.read_csv` and pass the filename 'data/gapminder_gdp_americas.csv' to it. We also once again pass the\n"
"> > column name 'country' to the parameter `index_col` in order to index by country:\n"
"> > ~~~\n"
"> > americas = pandas.read_csv('data/gapminder_gdp_americas.csv', index_col='country')\n"
"> > ~~~\n"
"> >{: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:245
# blockquote, which can be cascaded
msgid "> ## Inspecting Data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:246
msgid ">\n"
"> After reading the data for the Americas,\n"
"> use `help(americas.head)` and `help(americas.tail)`\n"
"> to find out what `DataFrame.head` and `DataFrame.tail` do.\n"
">\n"
"> 1.  What method call will display the first three rows of this data?\n"
"> 2.  What method call will display the last three columns of this data?\n"
">     (Hint: you may need to change your view of the data.)\n"
">\n"
"> > ## Solution\n"
"> > 1. We can check out the first five rows of `americas` by executing `americas.head()` (allowing us to view the head\n"
"> > of the DataFrame). We can specify the number of rows we wish to see by specifying the parameter `n` in our call\n"
"> > to `americas.head()`. To view the first three rows, execute:\n"
"> >\n"
"> > ~~~\n"
"> > americas.head(n=3)\n"
"> > ~~~\n"
"> >{: .python}\n"
"> > \n"
"> > The output is then\n"
"> > ~~~\n"
"> >          continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"> >country                                                               \n"
"> >Argentina  Americas     5911.315053     6856.856212     7133.166023   \n"
"> >Bolivia    Americas     2677.326347     2127.686326     2180.972546   \n"
"> >Brazil     Americas     2108.944355     2487.365989     3336.585802   \n"
"> >\n"
"> >           gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"> >country                                                                     \n"
"> >Argentina     8052.953021     9443.038526    10079.026740     8997.897412   \n"
"> >Bolivia       2586.886053     2980.331339     3548.097832     3156.510452   \n"
"> >Brazil        3429.864357     4985.711467     6660.118654     7030.835878   \n"
"> >\n"
"> >           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"> >country                                                                     \n"
"> >Argentina     9139.671389     9308.418710    10967.281950     8797.640716   \n"
"> >Bolivia       2753.691490     2961.699694     3326.143191     3413.262690   \n"
"> >Brazil        7807.095818     6950.283021     7957.980824     8131.212843   \n"
"> >\n"
"> >           gdpPercap_2007  \n"
"> >country                    \n"
"> >Argentina    12779.379640  \n"
"> >Bolivia       3822.137084  \n"
"> >Brazil        9065.800825 \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > 2. To check out the last three rows of `americas`, we would use the command, `americas.tail(n=3)`,\n"
"> > analogous to `head()` used above. However, here we want to look at the last three columns so we need\n"
"> > to change our view and then use `tail()`. To do so, we create a new DataFrame in which rows and \n"
"> > columns are switched\n"
"> > \n"
"> > ~~~\n"
"> > americas_flipped = americas.T\n"
"> > ~~~\n"
"> >{: .python}\n"
"> >\n"
"> > We can then view the last three columns of `americas` by viewing the last three rows of `americas_flipped`:\n"
"> > ~~~\n"
"> > americas_flipped.tail(n=3)\n"
"> > ~~~\n"
"> >{: .python}\n"
"> > The output is then\n"
"> > ~~~\n"
"> > country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \\\n"
"> > gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36   \n"
"> > gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26   \n"
"> > gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58   \n"
"> > \n"
"> > country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \\\n"
"> > gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...      \n"
"> > gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...      \n"
"> > gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...      \n"
"> > \n"
"> > country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \\\n"
"> > gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4   \n"
"> > gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6   \n"
"> > gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7   \n"
"> > \n"
"> > country        Trinidad and Tobago United States  Uruguay Venezuela  \n"
"> > gdpPercap_1997             8792.57       35767.4  9230.24   10165.5  \n"
"> > gdpPercap_2002             11460.6       39097.1     7727   8605.05  \n"
"> > gdpPercap_2007             18008.5       42951.7  10611.5   11415.8  \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > Note: we could have done the above in a single line of code by 'chaining' the commands:\n"
"> > ~~~\n"
"> > americas.T.tail(n=3)\n"
"> > ~~~\n"
"> >{: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:338
# blockquote, which can be cascaded
msgid "> ## Reading Files in Other Directories"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:339
msgid ">\n"
"> The data for your current project is stored in a file called `microbes.csv`,\n"
"> which is located in a folder called `field_data`.\n"
"> You are doing analysis in a notebook called `analysis.ipynb`\n"
"> in a sibling folder called `thesis`:\n"
">\n"
"> ~~~\n"
"> your_home_directory\n"
"> +-- field_data/\n"
"> |   +-- microbes.csv\n"
"> +-- thesis/\n"
">     +-- analysis.ipynb\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:353
msgid ">\n"
"> What value(s) should you pass to `read_csv` to read `microbes.csv` in `analysis.ipynb`?\n"
"> \n"
"> > ## Solution\n"
"> > We need to specify the path to the file of interest in the call to `pandas.read_csv`. We first need to 'jump' out of\n"
"> > the folder `thesis` using '../' and then into the folder `field_data` using 'field_data/'. Then we can specify the filename `microbes.csv.\n"
"> > The result is as follows:\n"
"> > ~~~\n"
"> > data_microbes = pandas.read_csv('../field_data/microbes.csv')\n"
"> > ~~~\n"
"> >{: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:367
# blockquote, which can be cascaded
msgid "> ## Writing Data"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:369
# blockquote, which can be cascaded
msgid "> As well as the `read_csv` function for reading data from a file,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:370
# blockquote, which can be cascaded
msgid "> Pandas provides a `to_csv` function to write dataframes to files."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:371
# blockquote, which can be cascaded
msgid "> Applying what you've learned about reading from files,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:372
# blockquote, which can be cascaded
msgid "> write one of your dataframes to a file called `processed.csv`."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:373
# blockquote, which can be cascaded
msgid "> You can use `help` to get information on how to use `to_csv`."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:375
# blockquote, which can be cascaded
msgid "> > In order to write the DataFrame `americas` to a file called `processed.csv`, execute the following command:"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:377
# blockquote, which can be cascaded
msgid "> > americas.to_csv('processed.csv')"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:379
#: python-novice-gapminder/_episodes/07-reading-tabular.md:384
# blockquote, which can be cascaded
msgid "> >{: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:380
# blockquote, which can be cascaded
msgid "> > For help on `to_csv`, you could execute, for example,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:382
# blockquote, which can be cascaded
msgid "> > help(americas.to_csv)"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:385
# blockquote, which can be cascaded
msgid "> > Note that `help(to_csv)` throws an error! This is a subtlety and is due to the fact that `to_csv` is NOT a function in "
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:386
# blockquote, which can be cascaded
msgid "> > and of itself and the actual call is `americas.to_csv`. "
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:1
# Front Matter
msgid "---\n"
"title: \"Pandas DataFrames\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I do statistical analysis of tabular data?\"\n"
"objectives:\n"
"- \"Select individual values from a Pandas dataframe.\"\n"
"- \"Select entire rows or entire columns from a dataframe.\"\n"
"- \"Select a subset of both rows and columns from a dataframe in a single operation.\"\n"
"- \"Select a subset of a dataframe by a single Boolean criterion.\"\n"
"keypoints:\n"
"- \"Use `DataFrame.iloc[..., ...]` to select values by integer location.\"\n"
"- \"Use `:` on its own to mean all columns or all rows.\"\n"
"- \"Select multiple columns or rows using `DataFrame.loc` and a named slice.\"\n"
"- \"Result of slicing can be used in further operations.\"\n"
"- \"Use comparisons to select data based on value.\"\n"
"- \"Select values or NaN using a Boolean mask.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:21
# header
msgid "## Note about Pandas DataFrames/Series"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:23
msgid "A [DataFrame][pandas-dataframe] is a collection of [Series][pandas-series];\n"
"The DataFrame is the way Pandas represents a table, and Series is the data-structure\n"
"Pandas use to represent a column."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:27
msgid "Pandas is built on top of the [Numpy][numpy] library, which in practice means that\n"
"most of the methods defined for Numpy Arrays apply to Pandas Series/DataFrames."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:30
msgid "What makes Pandas so attractive is the powerful interface to access individual records\n"
"of the table, proper handling of missing values, and relational-databases operations\n"
"between DataFrames."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:34
# header
msgid "## Selecting values"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:36
msgid "To access a value at the position `[i,j]` of a DataFrame, we have two options, depending on\n"
"what is the meaning of `i` in use.\n"
"Remember that a DataFrame provides a *index* as a way to identify the rows of the table;\n"
"a row, then, has a *position* inside the table as well as a *label*, which\n"
"uniquely identifies its *entry* in the DataFrame."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:42
# header
msgid "## Use `DataFrame.iloc[..., ...]` to select values by their (entry) position"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:44
# unordered list
msgid "*   Can specify location by numerical index analogously to 2D version of character selection in strings."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:46
# code block
msgid "~~~\n"
"import pandas\n"
"data = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"print(data.iloc[0, 0])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:52
#: python-novice-gapminder/_episodes/08-data-frames.md:66
# code block
msgid "~~~\n"
"1601.056136\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:57
# header
msgid "## Use `DataFrame.loc[..., ...]` to select values by their (entry) label."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:59
# unordered list
msgid "*   Can specify location by row name analogously to 2D version of dictionary keys."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:61
# code block
msgid "~~~\n"
"data = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"print(data.loc[\"Albania\", \"gdpPercap_1952\"])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:70
# header
msgid "## Use `:` on its own to mean all columns or all rows."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:72
# unordered list
msgid "*   Just like Python's usual slicing notation."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:74
# code block
msgid "~~~\n"
"print(data.loc[\"Albania\", :])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:78
# code block
msgid "~~~\n"
"gdpPercap_1952    1601.056136\n"
"gdpPercap_1957    1942.284244\n"
"gdpPercap_1962    2312.888958\n"
"gdpPercap_1967    2760.196931\n"
"gdpPercap_1972    3313.422188\n"
"gdpPercap_1977    3533.003910\n"
"gdpPercap_1982    3630.880722\n"
"gdpPercap_1987    3738.932735\n"
"gdpPercap_1992    2497.437901\n"
"gdpPercap_1997    3193.054604\n"
"gdpPercap_2002    4604.211737\n"
"gdpPercap_2007    5937.029526\n"
"Name: Albania, dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:95
# unordered list
msgid "*   Would get the same result printing `data.loc[\"Albania\"]` (without a second index)."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:97
# code block
msgid "~~~\n"
"print(data.loc[:, \"gdpPercap_1952\"])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:101
# code block
msgid "~~~\n"
"country\n"
"Albania                    1601.056136\n"
"Austria                    6137.076492\n"
"Belgium                    8343.105127\n"
"⋮ ⋮ ⋮\n"
"Switzerland               14734.232750\n"
"Turkey                     1969.100980\n"
"United Kingdom             9979.508487\n"
"Name: gdpPercap_1952, dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:114
# unordered list
msgid "*   Would get the same result printing `data[\"gdpPercap_1952\"]`"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:115
# unordered list
msgid "*   Also get the same result printing `data.gdpPercap_1952` (since it's a column name)"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:117
# header
msgid "## Select multiple columns or rows using `DataFrame.loc` and a named slice."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:119
# code block
msgid "~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:123
# code block
msgid "~~~\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy           8243.582340    10022.401310    12269.273780\n"
"Montenegro      4649.593785     5907.850937     7778.414017\n"
"Netherlands    12790.849560    15363.251360    18794.745670\n"
"Norway         13450.401510    16361.876470    18965.055510\n"
"Poland          5338.752143     6557.152776     8006.506993\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:134
msgid "In the above code, we discover that **slicing using `loc` is inclusive at both\n"
"ends**, which differs from **slicing using `iloc`**, where slicing indicates\n"
"everything up to but not including the final index. "
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:139
# header
msgid "## Result of slicing can be used in further operations."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:141
# unordered list
msgid "*   Usually don't just print a slice."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:142
# unordered list
msgid "*   All the statistical operators that work on entire dataframes"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:143
msgid "    work the same way on slices.\n"
"*   E.g., calculate max of a slice."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:146
# code block
msgid "~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'].max())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:150
# code block
msgid "~~~\n"
"gdpPercap_1962    13450.40151\n"
"gdpPercap_1967    16361.87647\n"
"gdpPercap_1972    18965.05551\n"
"dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:158
# code block
msgid "~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'].min())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:162
# code block
msgid "~~~\n"
"gdpPercap_1962    4649.593785\n"
"gdpPercap_1967    5907.850937\n"
"gdpPercap_1972    7778.414017\n"
"dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:170
# header
msgid "## Use comparisons to select data based on value."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:172
# unordered list
msgid "*   Comparison is applied element by element."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:173
# unordered list
msgid "*   Returns a similarly-shaped dataframe of `True` and `False`."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:175
# code block
msgid "~~~\n"
"# Use a subset of data to keep output readable.\n"
"subset = data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972']\n"
"print('Subset of data:\\n', subset)\n"
"\n"
"# Which values were greater than 10000 ?\n"
"print('\\nWhere are values large?\\n', subset > 10000)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:184
# code block
msgid "~~~\n"
"Subset of data:\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy           8243.582340    10022.401310    12269.273780\n"
"Montenegro      4649.593785     5907.850937     7778.414017\n"
"Netherlands    12790.849560    15363.251360    18794.745670\n"
"Norway         13450.401510    16361.876470    18965.055510\n"
"Poland          5338.752143     6557.152776     8006.506993\n"
"\n"
"Where are values large?\n"
"            gdpPercap_1962 gdpPercap_1967 gdpPercap_1972\n"
"country\n"
"Italy                False           True           True\n"
"Montenegro           False          False          False\n"
"Netherlands           True           True           True\n"
"Norway                True           True           True\n"
"Poland               False          False          False\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:205
# header
msgid "## Select values or NaN using a Boolean mask."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:207
# unordered list
msgid "*   A frame full of Booleans is sometimes called a *mask* because of how it can be used."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:209
# code block
msgid "~~~\n"
"mask = subset > 10000\n"
"print(subset[mask])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:214
# code block
msgid "~~~\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy                   NaN     10022.40131     12269.27378\n"
"Montenegro              NaN             NaN             NaN\n"
"Netherlands     12790.84956     15363.25136     18794.74567\n"
"Norway          13450.40151     16361.87647     18965.05551\n"
"Poland                  NaN             NaN             NaN\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:225
# unordered list
msgid "*   Get the value where the mask is true, and NaN (Not a Number) where it is false."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:226
# unordered list
msgid "*   Useful because NaNs are ignored by operations like max, min, average, etc."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:228
# code block
msgid "~~~\n"
"print(subset[subset > 10000].describe())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:232
# code block
msgid "~~~\n"
"       gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"count        2.000000        3.000000        3.000000\n"
"mean     13120.625535    13915.843047    16676.358320\n"
"std        466.373656     3408.589070     3817.597015\n"
"min      12790.849560    10022.401310    12269.273780\n"
"25%      12955.737547    12692.826335    15532.009725\n"
"50%      13120.625535    15363.251360    18794.745670\n"
"75%      13285.513523    15862.563915    18879.900590\n"
"max      13450.401510    16361.876470    18965.055510\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:245
# header
msgid "## Select-Apply-Combine operations"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:247
msgid "Pandas vectorizing methods and grouping operations are features that provide users \n"
"much flexibility to analyse their data."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:250
msgid "For instance, let's say we want to have a clearer view on how the European countries \n"
"split themselves according to their GDP."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:253
# ordered list
msgid "1.  We may have a glance by splitting the countries in two groups during the years surveyed,"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:254
msgid "    those who presented a GDP *higher* than the European average and those with a *lower* GDP.\n"
"2.  We then estimate a *wealthy score* based on the historical (from 1962 to 2007) values,\n"
"    where we account how many times a country has participated in the groups of *lower* or *higher* GDP"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:258
# code block
msgid "~~~\n"
"mask_higher = data.apply(lambda x:x>x.mean())\n"
"wealth_score = mask_higher.aggregate('sum',axis=1)/len(data.columns)\n"
"wealth_score\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:264
# code block
msgid "~~~\n"
"country\n"
"Albania                   0.000000\n"
"Austria                   1.000000\n"
"Belgium                   1.000000\n"
"Bosnia and Herzegovina    0.000000\n"
"Bulgaria                  0.000000\n"
"Croatia                   0.000000\n"
"Czech Republic            0.500000\n"
"Denmark                   1.000000\n"
"Finland                   1.000000\n"
"France                    1.000000\n"
"Germany                   1.000000\n"
"Greece                    0.333333\n"
"Hungary                   0.000000\n"
"Iceland                   1.000000\n"
"Ireland                   0.333333\n"
"Italy                     0.500000\n"
"Montenegro                0.000000\n"
"Netherlands               1.000000\n"
"Norway                    1.000000\n"
"Poland                    0.000000\n"
"Portugal                  0.000000\n"
"Romania                   0.000000\n"
"Serbia                    0.000000\n"
"Slovak Republic           0.000000\n"
"Slovenia                  0.333333\n"
"Spain                     0.333333\n"
"Sweden                    1.000000\n"
"Switzerland               1.000000\n"
"Turkey                    0.000000\n"
"United Kingdom            1.000000\n"
"dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:300
msgid "Finally, for each group in the `wealth_score` table, we sum their (financial) contribution\n"
"across the years surveyed:"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:303
# code block
msgid "~~~\n"
"data.groupby(wealth_score).sum()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:307
# code block
msgid "~~~\n"
"          gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"0.000000    36916.854200    46110.918793    56850.065437    71324.848786   \n"
"0.333333    16790.046878    20942.456800    25744.935321    33567.667670   \n"
"0.500000    11807.544405    14505.000150    18380.449470    21421.846200   \n"
"1.000000   104317.277560   127332.008735   149989.154201   178000.350040   \n"
"\n"
"          gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"0.000000    88569.346898   104459.358438   113553.768507   119649.599409   \n"
"0.333333    45277.839976    53860.456750    59679.634020    64436.912960   \n"
"0.500000    25377.727380    29056.145370    31914.712050    35517.678220   \n"
"1.000000   215162.343140   241143.412730   263388.781960   296825.131210   \n"
"\n"
"          gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007  \n"
"0.000000    92380.047256   103772.937598   118590.929863   149577.357928  \n"
"0.333333    67918.093220    80876.051580   102086.795210   122803.729520  \n"
"0.500000    36310.666080    40723.538700    45564.308390    51403.028210  \n"
"1.000000   315238.235970   346930.926170   385109.939210   427850.333420\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:329
# blockquote, which can be cascaded
msgid "> ## Selection of Individual Values"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:330
msgid ">\n"
"> Assume Pandas has been imported into your notebook\n"
"> and the Gapminder GDP data for Europe has been loaded:\n"
">\n"
"> ~~~\n"
"> import pandas\n"
">\n"
"> df = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:340
msgid ">\n"
"> Write an expression to find the Per Capita GDP of Serbia in 2007."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:343
msgid ">\n"
"> > ## Solution\n"
"> > The selection can be done by using the labels for both the row (\"Serbia\") and the column (\"gdpPercap_2007\"):\n"
"> > ~~~\n"
"> > print(df.loc['Serbia', 'gdpPercap_2007'])\n"
"> > ~~~\n"
"> >{: .python}\n"
"> > The output is\n"
"> > ~~~\n"
"> > 9786.534714\n"
"> > ~~~\n"
"> >{: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:358
# blockquote, which can be cascaded
msgid "> ## Extent of Slicing"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:359
msgid ">\n"
"> 1.  Do the two statements below produce the same output?\n"
"> 2.  Based on this,\n"
">     what rule governs what is included (or not) in numerical slices and named slices in Pandas?\n"
"> \n"
"> ~~~\n"
"> print(data.iloc[0:2, 0:2])\n"
"> print(data.loc['Albania':'Belgium', 'gdpPercap_1952':'gdpPercap_1962'])\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:373
# blockquote, which can be cascaded
msgid "> > No, they do not produce the same output! The output of the first statement is:"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:375
# blockquote, which can be cascaded
msgid "> >         gdpPercap_1952  gdpPercap_1957"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:376
# blockquote, which can be cascaded
msgid "> > country                                "
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:377
# blockquote, which can be cascaded
msgid "> > Albania     1601.056136     1942.284244"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:378
# blockquote, which can be cascaded
msgid "> > Austria     6137.076492     8842.598030"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:380
#: python-novice-gapminder/_episodes/08-data-frames.md:389
# blockquote, which can be cascaded
msgid "> >{: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:381
# blockquote, which can be cascaded
msgid "> > The second statement gives:"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:383
# blockquote, which can be cascaded
msgid "> >         gdpPercap_1952  gdpPercap_1957  gdpPercap_1962"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:384
# blockquote, which can be cascaded
msgid "> > country                                                "
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:385
# blockquote, which can be cascaded
msgid "> > Albania     1601.056136     1942.284244     2312.888958"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:386
# blockquote, which can be cascaded
msgid "> > Austria     6137.076492     8842.598030    10750.721110"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:387
# blockquote, which can be cascaded
msgid "> > Belgium     8343.105127     9714.960623    10991.206760"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:390
# blockquote, which can be cascaded
msgid "> > Clearly, the second statement produces an additional column and an additional row compared to the first statement.  "
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:391
# blockquote, which can be cascaded
msgid "> > What conclusion can we draw? We see that a numerical slice, 0:2, *omits* the final index (i.e. index 2)"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:392
# blockquote, which can be cascaded
msgid "> > in the range provided,"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:393
# blockquote, which can be cascaded
msgid "> > while a named slice, 'gdpPercap_1952':'gdpPercap_1962', *includes* the final element."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:397
# blockquote, which can be cascaded
msgid "> ## Reconstructing Data"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:398
msgid ">\n"
"> Explain what each line in the following short program does:\n"
"> what is in `first`, `second`, etc.?\n"
">\n"
"> ~~~\n"
"> first = pandas.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> second = first[first['continent'] == 'Americas']\n"
"> third = second.drop('Puerto Rico')\n"
"> fourth = third.drop('continent', axis = 1)\n"
"> fourth.to_csv('result.csv')\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:411
msgid ">\n"
"> > ## Solution\n"
"> > Let's go through this piece of code line by line.\n"
"> > ~~~\n"
"> > first = pandas.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > This line loads the dataset containing the GDP data from all countries into a dataframe called \n"
"> > `first`. The `index_col='country'` parameter selects which column to use as the \n"
"> > row labels in the dataframe.  \n"
"> > ~~~\n"
"> > second = first[first['continent'] == 'Americas']\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > This line makes a selection: only those rows of `first` for which the 'continent' column matches \n"
"> > 'Americas' are extracted. Notice how the Boolean expression inside the brackets, \n"
"> > `first['continent'] == 'Americas'`, is used to select only those rows where the expression is true. \n"
"> > Try printing this expression! Can you print also its individual True/False elements? \n"
"> > (hint: first assign the expression to a variable)\n"
"> > ~~~\n"
"> > third = second.drop('Puerto Rico')\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > As the syntax suggests, this line drops the row from `second` where the label is 'Puerto Rico'. The \n"
"> > resulting dataframe `third` has one row less than the original dataframe `second`.\n"
"> > ~~~\n"
"> > fourth = third.drop('continent', axis = 1)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > Again we apply the drop function, but in this case we are dropping not a row but a whole column. \n"
"> > To accomplish this, we need to specify also the `axis` parameter (we want to drop the second column \n"
"> > which has index 1).\n"
"> > ~~~\n"
"> > fourth.to_csv('result.csv')\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > The final step is to write the data that we have been working on to a csv file. Pandas makes this easy \n"
"> > with the `to_csv()` function. The only required argument to the function is the filename. Note that the \n"
"> > file will be written in the directory from which you started the Jupyter or Python session."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:453
# blockquote, which can be cascaded
msgid "> ## Selecting Indices"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:454
msgid ">\n"
"> Explain in simple terms what `idxmin` and `idxmax` do in the short program below.\n"
"> When would you use these methods?\n"
">\n"
"> ~~~\n"
"> data = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> print(data.idxmin())\n"
"> print(data.idxmax())\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:465
msgid ">\n"
"> > ## Solution\n"
"> > For each column in `data`, `idxmin` will return the index value corresponding to each column's minimum;\n"
"> > `idxmax` will do accordingly the same for each column's maximum value.\n"
"> >\n"
"> > You can use these functions whenever you want to get the row index of the minimum/maximum value and not the actual minimum/maximum value."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:474
# blockquote, which can be cascaded
msgid "> ## Practice with Selection"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:475
msgid ">\n"
"> Assume Pandas has been imported and the Gapminder GDP data for Europe has been loaded.\n"
"> Write an expression to select each of the following:\n"
">\n"
"> 1.  GDP per capita for all countries in 1982.\n"
"> 2.  GDP per capita for Denmark for all years.\n"
"> 3.  GDP per capita for all countries for years *after* 1985.\n"
"> 4.  GDP per capita for each country in 2007 as a multiple of \n"
">     GDP per capita for that country in 1952."
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:485
msgid ">\n"
"> > ## Solution\n"
"> > 1:\n"
"> > ~~~\n"
"> > data['gdpPercap_1982']\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > 2:\n"
"> > ~~~\n"
"> > data.loc['Denmark',:]\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > 3:\n"
"> > ~~~\n"
"> > data.loc[:,'gdpPercap_1985':]\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > Pandas is smart enough to recognize the number at the end of the column label and does not give you an error, although no column named `gdpPercap_1985` actually exists. This is useful if new columns are added to the CSV file later.\n"
"> >\n"
"> > 4:\n"
"> > ~~~\n"
"> > data['gdpPercap_2007']/data['gdpPercap_1952']\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:514
# blockquote, which can be cascaded
msgid "> ## Interpretation"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:515
msgid ">\n"
"> Poland's borders have been stable since 1945,\n"
"> but changed several times in the years before then.\n"
"> How would you handle this if you were creating a table of GDP per capita for Poland\n"
"> for the entire twentieth century?"
msgstr ""

#: python-novice-gapminder/_episodes/08-data-frames.md:523
msgid "[pandas-dataframe]: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\n"
"[pandas-series]: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html\n"
"[numpy]: http://www.numpy.org/"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:1
# Front Matter
msgid "---\n"
"title: \"Plotting\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I plot my data?\"\n"
"- \"How can I save my plot for publishing?\"\n"
"objectives:\n"
"- \"Create a time series plot showing a single data set.\"\n"
"- \"Create a scatter plot showing relationship between two data sets.\"\n"
"keypoints:\n"
"- \"[`matplotlib`](https://matplotlib.org/) is the most widely used scientific plotting library in Python.\"\n"
"- \"Plot data directly from a Pandas dataframe.\"\n"
"- \"Select and transform data, then plot it.\"\n"
"- \"Many styles of plot are available: see the [Python Graph Gallery](https://python-graph-gallery.com/matplotlib/) for more options.\"\n"
"- \"Can plot many sets of data together.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:18
# header
msgid "## [`matplotlib`](https://matplotlib.org/) is the most widely used scientific plotting library in Python."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:20
# unordered list
msgid "*   Commonly use a sub-library called [`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:21
# unordered list
msgid "*   The Jupyter Notebook will render plots inline if we ask it to using a \"magic\" command."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:23
# code block
msgid "~~~\n"
"%matplotlib inline\n"
"import matplotlib.pyplot as plt\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:27
#: python-novice-gapminder/_episodes/09-plotting.md:39
#: python-novice-gapminder/_episodes/09-plotting.md:60
#: python-novice-gapminder/_episodes/09-plotting.md:72
#: python-novice-gapminder/_episodes/09-plotting.md:84
#: python-novice-gapminder/_episodes/09-plotting.md:100
#: python-novice-gapminder/_episodes/09-plotting.md:120
#: python-novice-gapminder/_episodes/09-plotting.md:129
msgid "{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:29
# unordered list
msgid "*   Simple plots are then (fairly) simple to create."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:31
# code block
msgid "~~~\n"
"time = [0, 1, 2, 3]\n"
"position = [0, 100, 200, 300]\n"
"\n"
"plt.plot(time, position)\n"
"plt.xlabel('Time (hr)')\n"
"plt.ylabel('Position (km)')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:41
msgid "![Simple Position-Time Plot](../fig/9_simple_position_time_plot.png)\n"
"## Plot data directly from a [`Pandas dataframe`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:44
# unordered list
msgid "*   We can also plot [Pandas dataframes](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:45
# unordered list
msgid "*   This implicitly uses [`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:46
# unordered list
msgid "*   Before plotting, we convert the column headings from a `string` to `integer` data type, since they represent numerical values"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:48
# code block
msgid "~~~\n"
"import pandas\n"
"\n"
"data = pandas.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"\n"
"# Extract year from last 4 characters of each column name\n"
"years = data.columns.str.strip('gdpPercap_')\n"
"# Convert year values to integers, saving results back to dataframe\n"
"data.columns = years.astype(int)\n"
"\n"
"data.loc['Australia'].plot()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:62
msgid "![GDP plot for Australia](../fig/9_gdp_australia.png)\n"
"## Select and transform data, then plot it."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:65
# unordered list
msgid "*   By default, [`DataFrame.plot`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html#pandas.DataFrame.plot) plots with the rows as the X axis."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:66
# unordered list
msgid "*   We can transpose the data in order to plot multiple series."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:68
# code block
msgid "~~~\n"
"data.T.plot()\n"
"plt.ylabel('GDP per capita')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:74
msgid "![GDP plot for Australia and New Zealand](../fig/9_gdp_australia_nz.png)\n"
"## Many styles of plot are available."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:77
# unordered list
msgid "*   For example, do a bar plot using a fancier style."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:79
# code block
msgid "~~~\n"
"plt.style.use('ggplot')\n"
"data.T.plot(kind='bar')\n"
"plt.ylabel('GDP per capita')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:86
msgid "![GDP barplot for Australia](../fig/9_gdp_bar.png)"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:88
# header
msgid "## Data can also be plotted by calling the `matplotlib` `plot` function directly."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:89
# unordered list
msgid "*   The command is `plt.plot(x, y)`"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:90
# unordered list
msgid "*   The color / format of markers can also be specified as an optical argument: e.g. 'b-' is a blue line, 'g--' is a green dashed line."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:92
# header
msgid "## Get Australia data from dataframe"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:94
# code block
msgid "~~~\n"
"years = data.columns\n"
"gdp_australia = data.loc['Australia']\n"
"\n"
"plt.plot(years, gdp_australia, 'g--')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:102
msgid "![GDP formatted plot for Australia](../fig/9_gdp_australia_formatted.png)"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:104
# header
msgid "## Can plot many sets of data together."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:106
# code block
msgid "~~~\n"
"# Select two countries' worth of data.\n"
"gdp_australia = data.loc['Australia']\n"
"gdp_nz = data.loc['New Zealand']\n"
"\n"
"# Plot with differently-colored markers.\n"
"plt.plot(years, gdp_australia, 'b-', label='Australia')\n"
"plt.plot(years, gdp_nz, 'g-', label='New Zealand')\n"
"\n"
"# Create legend.\n"
"plt.legend(loc='upper left')\n"
"plt.xlabel('Year')\n"
"plt.ylabel('GDP per capita ($)')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:122
msgid "![GDP formatted plot for Australia and New Zealand](../fig/9_gdp_australia_nz_formatted.png)\n"
"*   Plot a scatter plot correlating the GDP of Australia and New Zealand\n"
"*   Use either `plt.scatter` or `DataFrame.plot.scatter`"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:126
# code block
msgid "~~~\n"
"plt.scatter(gdp_australia, gdp_nz)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:131
msgid "![GDP correlation using plt.scatter](../fig/9_gdp_correlation_plt.png)\n"
"~~~\n"
"data.T.plot.scatter(x = 'Australia', y = 'New Zealand')\n"
"~~~\n"
"{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:137
msgid "![GDP correlation using data.T.plot.scatter](../fig/9_gdp_correlation_data.png)\n"
"> ## Minima and Maxima\n"
">\n"
"> Fill in the blanks below to plot the minimum GDP per capita over time\n"
"> for all the countries in Europe.\n"
"> Modify it again to plot the maximum GDP per capita over time for Europe.\n"
">\n"
"> ~~~\n"
"> data_europe = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> data_europe.____.plot(label='min')\n"
"> data_europe.____\n"
"> plt.legend(loc='best')\n"
"> plt.xticks(rotation=90)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > data_europe = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> > data_europe.min().plot(label='min')\n"
"> > data_europe.max().plot(label='max')\n"
"> > plt.legend(loc='best')\n"
"> > plt.xticks(rotation=90)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ![Minima Maxima Solution](../fig/9_minima_maxima_solution.png)"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:167
# blockquote, which can be cascaded
msgid "> ## Correlations"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:168
msgid ">\n"
"> Modify the example in the notes to create a scatter plot showing\n"
"> the relationship between the minimum and maximum GDP per capita\n"
"> among the countries in Asia for each year in the data set.\n"
"> What relationship do you see (if any)?\n"
">\n"
"> ~~~\n"
"> data_asia = pandas.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.describe().T.plot(kind='scatter', x='min', y='max')\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ![Correlations Solution 1](../fig/9_correlations_solution1.png)\n"
"> >\n"
"> > No particular correlations can be seen between the minimum and maximum gdp values\n"
"> > year on year. It seems the fortunes of asian countries do not rise and fall together.\n"
"> >"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:188
msgid ">\n"
"> You might note that the variability in the maximum is much higher than\n"
"> that of the minimum.  Take a look at the maximum and the max indexes:\n"
">\n"
"> ~~~\n"
"> data_asia = pandas.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.max().plot()\n"
"> print(data_asia.idxmax())\n"
"> print(data_asia.idxmin())\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ![Correlations Solution 2](../fig/9_correlations_solution2.png)\n"
"> >\n"
"> > Seems the variability in this value is due to a sharp drop after 1972.\n"
"> > Some geopolitics at play perhaps? Given the dominance of oil producing countries,\n"
"> > maybe the Brent crude index would make an interesting comparison?\n"
"> > Whilst Myanmar consistently has the lowest gdp, the highest gdb nation has varied\n"
"> > more notably.\n"
"> >"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:211
# blockquote, which can be cascaded
msgid "> ## More Correlations"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:212
msgid ">\n"
"> This short program creates a plot showing\n"
"> the correlation between GDP and life expectancy for 2007,\n"
"> normalizing marker size by population:\n"
">\n"
"> ~~~\n"
"> data_all = pandas.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> data_all.plot(kind='scatter', x='gdpPercap_2007', y='lifeExp_2007',\n"
">               s=data_all['pop_2007']/1e6)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Using online help and other resources,\n"
"> explain what each argument to `plot` does.\n"
">\n"
"> > ## Solution\n"
"> > ![More Correlations Solution](../fig/9_more_correlations_solution.png)\n"
"> >\n"
"> > A good place to look is the documentation for the plot function -\n"
"> > help(data_all.plot).\n"
"> >\n"
"> > kind - As seen already this determines the kind of plot to be drawn.\n"
"> >\n"
"> > x and y - A column name or index that determines what data will be\n"
"> > placed on the x and y axes of the plot\n"
"> >\n"
"> > s - Details for this can be found in the documentation of plt.scatter.\n"
"> > A single number or one value for each data point. Determines the size\n"
"> > of the plotted points.\n"
"> >"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:245
# blockquote, which can be cascaded
msgid "> ## Saving your plot to a file"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:247
# blockquote, which can be cascaded
msgid "> If you are satisfied with the plot you see you may want to save it to a file,"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:248
# blockquote, which can be cascaded
msgid "> perhaps to include it in a publication. There is a function in the"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:249
# blockquote, which can be cascaded
msgid "> matplotlib.pyplot module that accomplishes this:"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:250
# blockquote, which can be cascaded
msgid "> [savefig](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:251
# blockquote, which can be cascaded
msgid "> Calling this function, e.g. with"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:253
# blockquote, which can be cascaded
msgid "> plt.savefig('my_figure.png')"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:255
# blockquote, which can be cascaded
msgid "> {: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:257
# blockquote, which can be cascaded
msgid "> will save the current figure to the file `my_figure.png`. The file format"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:258
# blockquote, which can be cascaded
msgid "> will automatically be deduced from the file name extension (other formats"
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:259
# blockquote, which can be cascaded
msgid "> are pdf, ps, eps and svg)."
msgstr ""

#: python-novice-gapminder/_episodes/09-plotting.md:260
msgid ">\n"
"> Note that functions in `plt` refer to a global figure variable\n"
"> and after a figure has been displayed to the screen (e.g. with `plt.show`) \n"
"> matplotlib will make this  variable refer to a new empty figure.\n"
"> Therefore, make sure you call `plt.savefig` before the plot is displayed to\n"
"> the screen, otherwise you may find a file with an empty plot.\n"
">\n"
"> When using dataframes, data is often generated and plotted to screen in one line,\n"
"> and `plt.savefig` seems not to be a possible approach.\n"
"> One possibility to save the figure to file is then to\n"
">\n"
"> * save a reference to the current figure in a local variable (with `plt.gcf`) \n"
"> * call the `savefig` class method from that varible.\n"
">\n"
"> ~~~\n"
"> fig = plt.gcf() # get current figure\n"
"> data.plot(kind='bar')\n"
"> fig.savefig('my_figure.png')\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/10-lunch.md:1
# Front Matter
msgid "---\n"
"layout: break\n"
"title: \"Lunch\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 45\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/10-lunch.md:8
#: python-novice-gapminder/_episodes/16-coffee.md:8
msgid "FIXME: describe what to reflect on."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:1
# Front Matter
msgid "---\n"
"title: \"Lists\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I store multiple values?\"\n"
"objectives:\n"
"- \"Explain why programs need collections of values.\"\n"
"- \"Write programs that create flat lists, index them, slice them, and modify them through assignment and method calls.\"\n"
"keypoints:\n"
"- \"A list stores many values in a single structure.\"\n"
"- \"Use an item's index to fetch it from a list.\"\n"
"- \"Lists' values can be replaced by assigning to them.\"\n"
"- \"Appending items to a list lengthens it.\"\n"
"- \"Use `del` to remove items from a list entirely.\"\n"
"- \"The empty list contains no values.\"\n"
"- \"Lists may contain values of different types.\"\n"
"- \"Character strings can be indexed like lists.\"\n"
"- \"Character strings are immutable.\"\n"
"- \"Indexing beyond the end of the collection is an error.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:22
# header
msgid "## A list stores many values in a single structure."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:24
# unordered list
msgid "*   Doing calculations with a hundred variables called `pressure_001`, `pressure_002`, etc.,"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:25
msgid "    would be at least as slow as doing them by hand.\n"
"*   Use a *list* to store many values together.\n"
"    *   Contained within square brackets `[...]`.\n"
"    *   Values separated by commas `,`.\n"
"*   Use `len` to find out how many values are in a list."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:31
# code block
msgid "~~~\n"
"pressures = [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"print('pressures:', pressures)\n"
"print('length:', len(pressures))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:37
# code block
msgid "~~~\n"
"pressures: [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"length: 5\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:43
# header
msgid "## Use an item's index to fetch it from a list."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:45
# unordered list
msgid "*   Just like strings."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:47
# code block
msgid "~~~\n"
"print('zeroth item of pressures:', pressures[0])\n"
"print('fourth item of pressures:', pressures[4])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:52
# code block
msgid "~~~\n"
"zeroth item of pressures: 0.273\n"
"fourth item of pressures: 0.276\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:58
# header
msgid "## Lists' values can be replaced by assigning to them."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:60
# unordered list
msgid "*   Use an index expression on the left of assignment to replace a value."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:62
# code block
msgid "~~~\n"
"pressures[0] = 0.265\n"
"print('pressures is now:', pressures)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:67
# code block
msgid "~~~\n"
"pressures is now: [0.265, 0.275, 0.277, 0.275, 0.276]\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:72
# header
msgid "## Appending items to a list lengthens it."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:74
# unordered list
msgid "*   Use `list_name.append` to add items to the end of a list."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:76
# code block
msgid "~~~\n"
"primes = [2, 3, 5]\n"
"print('primes is initially:', primes)\n"
"primes.append(7)\n"
"primes.append(9)\n"
"print('primes has become:', primes)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:84
# code block
msgid "~~~\n"
"primes is initially: [2, 3, 5]\n"
"primes has become: [2, 3, 5, 7, 9]\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:90
# unordered list
msgid "*   `append` is a *method* of lists."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:91
# unordered list
msgid "    *   Like a function, but tied to a particular object."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:92
# unordered list
msgid "*   Use `object_name.method_name` to call methods."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:93
# unordered list
msgid "    *   Deliberately resembles the way we refer to things in a library."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:94
# unordered list
msgid "*   We will meet other methods of lists as we go along."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:95
# unordered list
msgid "    *   Use `help(list)` for a preview."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:96
# unordered list
msgid "*   `extend` is similar to `append`, but it allows you to combine two lists.  For example:"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:98
# code block
msgid "~~~\n"
"teen_primes = [11, 13, 17, 19]\n"
"middle_aged_primes = [37, 41, 43, 47]\n"
"print('primes is currently:', primes)\n"
"primes.extend(teen_primes)\n"
"print('primes has now become:', primes)\n"
"primes.append(middle_aged_primes)\n"
"print('primes has finally become:', primes)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:108
# code block
msgid "~~~\n"
"primes is currently: [2, 3, 5, 7, 9]\n"
"primes has now become: [2, 3, 5, 7, 9, 11, 13, 17, 19]\n"
"primes has finally become: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]]\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:115
msgid "Note that while `extend` maintains the \"flat\" structure of the list, appending a list to a list makes the result two-dimensional."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:117
# header
msgid "## Use `del` to remove items from a list entirely."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:119
# unordered list
msgid "*   `del list_name[index]` removes an item from a list and shortens the list."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:120
# unordered list
msgid "*   Not a function or a method, but a statement in the language."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:122
# code block
msgid "~~~\n"
"print('primes before removing last item:', primes)\n"
"del primes[4]\n"
"print('primes after removing last item:', primes)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:128
# code block
msgid "~~~\n"
"primes before removing last item: [2, 3, 5, 7, 9]\n"
"primes after removing last item: [2, 3, 5, 7]\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:134
# header
msgid "## The empty list contains no values."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:136
# unordered list
msgid "*   Use `[]` on its own to represent a list that doesn't contain any values."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:137
# unordered list
msgid "    *   \"The zero of lists.\""
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:138
# unordered list
msgid "*   Helpful as a starting point for collecting values"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:139
msgid "    (which we will see in the [next episode]({{page.root}}/09-for-loops/))."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:141
# header
msgid "## Lists may contain values of different types."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:143
# unordered list
msgid "*   A single list may contain numbers, strings, and anything else."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:145
# code block
msgid "~~~\n"
"goals = [1, 'Create lists.', 2, 'Extract items from lists.', 3, 'Modify lists.']\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:150
# header
msgid "## Character strings can be indexed like lists."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:152
# unordered list
msgid "*   Get single characters from a character string using indexes in square brackets."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:154
# code block
msgid "~~~\n"
"element = 'carbon'\n"
"print('zeroth character:', element[0])\n"
"print('third character:', element[3])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:160
# code block
msgid "~~~\n"
"zeroth character: c\n"
"third character: b\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:166
# header
msgid "## Character strings are immutable."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:168
# unordered list
msgid "*   Cannot change the characters in a string after it has been created."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:169
# unordered list
msgid "    *   *Immutable*: can't be changed after creation."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:170
# unordered list
msgid "    *   In contrast, lists are *mutable*: they can be modified in place."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:171
# unordered list
msgid "*   Python considers the string to be a single value with parts,"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:172
msgid "    not a collection of values."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:174
# code block
msgid "~~~\n"
"element[0] = 'C'\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:178
# code block
msgid "~~~\n"
"TypeError: 'str' object does not support item assignment\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:183
# unordered list
msgid "*   Lists and character strings are both *collections*."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:185
# header
msgid "## Indexing beyond the end of the collection is an error."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:187
# unordered list
msgid "*   Python reports an `IndexError` if we attempt to access a value that doesn't exist."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:188
# unordered list
msgid "    *   This is a kind of [runtime error]({{ page.root }}/05-error-messages/)."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:189
# unordered list
msgid "    *   Cannot be detected as the code is parsed"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:190
msgid "        because the index might be calculated based on data."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:192
# code block
msgid "~~~\n"
"print('99th element of element is:', element[99])\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:196
# code block
msgid "~~~\n"
"IndexError: string index out of range\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:201
# blockquote, which can be cascaded
msgid "> ## Fill in the Blanks"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:202
msgid ">\n"
"> Fill in the blanks so that the program below produces the output shown.\n"
">\n"
"> ~~~\n"
"> values = ____\n"
"> values.____(1)\n"
"> values.____(3)\n"
"> values.____(5)\n"
"> print('first time:', values)\n"
"> values = values[____]\n"
"> print('second time:', values)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:215
msgid ">\n"
"> ~~~\n"
"> first time: [1, 3, 5]\n"
"> second time: [3, 5]\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:221
msgid ">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > values = []\n"
"> > values.append(1)\n"
"> > values.append(3)\n"
"> > values.append(5)\n"
"> > print('first time:', values)\n"
"> > values = values[1:]\n"
"> > print('second time:', values)\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:236
# blockquote, which can be cascaded
msgid "> ## How Large is a Slice?"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:237
msgid ">\n"
"> If 'low' and 'high' are both non-negative integers,\n"
"> how long is the list `values[low:high]`?\n"
">\n"
"> > ## Solution\n"
"> > The list `values[low:high]` has `high - low` elements.  For example,\n"
"> > `values[1:4]` has the 3 elements `values[1]`, `values[2]`, and `values[3]`.\n"
"> > Note that the expression will only work if `high` is less than the total\n"
"> > length of the list `values`."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:249
# blockquote, which can be cascaded
msgid "> ## From Strings to Lists and Back"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:250
msgid ">\n"
"> Given this:\n"
">\n"
"> ~~~\n"
"> print('string to list:', list('tin'))\n"
"> print('list to string:', ''.join(['g', 'o', 'l', 'd']))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:259
# blockquote, which can be cascaded
msgid "> ['t', 'i', 'n']"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:260
# blockquote, which can be cascaded
msgid "> 'gold'"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:263
msgid ">\n"
"> 1.  Explain in simple terms what `list('some string')` does.\n"
"> 2.  What does `'-'.join(['x', 'y'])` generate?\n"
">\n"
"> > ## Solution\n"
"> > 1. `list('some string')` \"splits\" a string into a list of its characters.\n"
"> > 2. `x-y`"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:273
# blockquote, which can be cascaded
msgid "> ## Working With the End"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:274
msgid ">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'helium'\n"
"> print(element[-1])\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:282
msgid ">\n"
"> 1.  How does Python interpret a negative index?\n"
"> 2.  If a list or string has N elements,\n"
">     what is the most negative index that can safely be used with it,\n"
">     and what location does that index represent?\n"
"> 3.  If `values` is a list, what does `del values[-1]` do?\n"
"> 4.  How can you display all elements but the last one without changing `values`?\n"
">     (Hint: you will need to combine slicing and negative indexing.)\n"
">\n"
"> > ## Solution\n"
"> > The program prints `m`.\n"
"> > 1. Python interprets a negative index as starting from the end (as opposed to\n"
"> >    starting from the beginning).  The last element is `-1`.\n"
"> > 2. The last index that can safely be used with a list of N elements is element\n"
"> >    `-N`, which represents the first element.\n"
"> > 3. `del values[-1]` removes the last element from the list.\n"
"> > 4. `values[:-1]`"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:302
# blockquote, which can be cascaded
msgid "> ## Stepping Through a List"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:303
msgid ">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'fluorine'\n"
"> print(element[::2])\n"
"> print(element[::-1])\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:312
msgid ">\n"
"> 1.  If we write a slice as `low:high:stride`, what does `stride` do?\n"
"> 2.  What expression would select all of the even-numbered items from a collection?\n"
">\n"
"> > ## Solution\n"
"> > The program prints\n"
"> > ~~~\n"
"> > furn\n"
"> > eniroulf\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > 1. `stride` is the step size of the slice\n"
"> > 2. The slice `1::2` selects all even-numbered items from a collection: it starts\n"
"> >    with element `1` (which is the second element, since indexing starts at `0`),\n"
"> >    goes on until the end (since no `end` is given), and uses a step size of `2`\n"
"> >    (i.e., selects every second element)."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:331
# blockquote, which can be cascaded
msgid "> ## Slice Bounds"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:332
msgid ">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'lithium'\n"
"> print(element[0:20])\n"
"> print(element[-1:3])\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:341
msgid ">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > lithium\n"
"> > \n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:351
# blockquote, which can be cascaded
msgid "> ## Sort and Sorted"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:352
msgid ">\n"
"> What do these two programs print?\n"
"> In simple terms, explain the difference between `sorted(letters)` and `letters.sort()`.\n"
">\n"
"> ~~~\n"
"> # Program A\n"
"> letters = list('gold')\n"
"> result = sorted(letters)\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:363
msgid ">\n"
"> ~~~\n"
"> # Program B\n"
"> letters = list('gold')\n"
"> result = letters.sort()\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:371
msgid ">\n"
"> > ## Solution\n"
"> > Program A prints\n"
"> > ~~~\n"
"> > letters is ['g', 'o', 'l', 'd'] and result is ['d', 'g', 'l', 'o']\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > Program B prints\n"
"> > ~~~\n"
"> > letters is ['d', 'g', 'l', 'o'] and result is None\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > `sorted(letters)` returns a sorted copy of the list `letters` (the original\n"
"> > list `letters` remains unchanged), while `letters.sort()` sorts the list\n"
"> > `letters` in-place and does not return anything."
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:389
# blockquote, which can be cascaded
msgid "> ## Copying (or Not)"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:390
msgid ">\n"
"> What do these two programs print?\n"
"> In simple terms, explain the difference between `new = old` and `new = old[:]`.\n"
">\n"
"> ~~~\n"
"> # Program A\n"
"> old = list('gold')\n"
"> new = old      # simple assignment\n"
"> new[0] = 'D'\n"
"> print('new is', new, 'and old is', old)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:402
msgid ">\n"
"> ~~~\n"
"> # Program B\n"
"> old = list('gold')\n"
"> new = old[:]   # assigning a slice\n"
"> new[0] = 'D'\n"
"> print('new is', new, 'and old is', old)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/11-lists.md:411
msgid ">\n"
"> > ## Solution\n"
"> > Program A prints\n"
"> > ~~~\n"
"> > new is ['D', 'o', 'l', 'd'] and old is ['D', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > Program B prints\n"
"> > ~~~\n"
"> > new is ['D', 'o', 'l', 'd'] and old is ['g', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > `new = old` makes `new` a reference to the list `old`; `new` and `old` point\n"
"> > towards the same object.\n"
"> > \n"
"> > `new = old[:]` however creates a new list object `new` containing all elements\n"
"> > from the list `old`; `new` and `old` are different objects."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:1
# Front Matter
msgid "---\n"
"title: \"For Loops\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I make a program do many things?\"\n"
"objectives:\n"
"- \"Explain what for loops are normally used for.\"\n"
"- \"Trace the execution of a simple (unnested) loop and correctly state the values of variables in each iteration.\"\n"
"- \"Write for loops that use the Accumulator pattern to aggregate values.\"\n"
"keypoints:\n"
"- \"A *for loop* executes commands once for each value in a collection.\"\n"
"- \"The first line of the `for` loop must end with a colon, and the body must be indented.\"\n"
"- \"Indentation is always meaningful in Python.\"\n"
"- \"A `for` loop is made up of a collection, a loop variable, and a body.\"\n"
"- \"Loop variables can be called anything (but it is strongly advised to have a meaningful name to the looping variable).\"\n"
"- \"The body of a loop can contain many statements.\"\n"
"- \"Use `range` to iterate over a sequence of numbers.\"\n"
"- \"The Accumulator pattern turns many values into one.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:21
# header
msgid "## A *for loop* executes commands once for each value in a collection."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:23
# unordered list
msgid "*   Doing calculations on the values in a list one by one"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:24
msgid "    is as painful as working with `pressure_001`, `pressure_002`, etc.\n"
"*   A *for loop* tells Python to execute some statements once for each value in a list,\n"
"    a character string,\n"
"    or some other collection.\n"
"*   \"for each thing in this group, do these operations\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:30
#: python-novice-gapminder/_episodes/12-for-loops.md:90
# code block
msgid "~~~\n"
"for number in [2, 3, 5]:\n"
"    print(number)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:36
# unordered list
msgid "*   This `for` loop is equivalent to:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:38
# code block
msgid "~~~\n"
"print(2)\n"
"print(3)\n"
"print(5)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:45
# unordered list
msgid "*   And the `for` loop's output is:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:47
# code block
msgid "~~~\n"
"2\n"
"3\n"
"5\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:54
# header
msgid "## The first line of the `for` loop must end with a colon, and the body must be indented."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:56
# unordered list
msgid "*   The colon at the end of the first line signals the start of a *block* of statements."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:57
# unordered list
msgid "*   Python uses indentation rather than `{}` or `begin`/`end` to show *nesting*."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:58
# unordered list
msgid "    *   Any consistent indentation is legal, but almost everyone uses four spaces."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:60
# code block
msgid "~~~\n"
"for number in [2, 3, 5]:\n"
"print(number)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:65
# code block
msgid "~~~\n"
"IndentationError: expected an indented block\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:70
# unordered list
msgid "*   Indentation is always meaningful in Python."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:72
# code block
msgid "~~~\n"
"firstName=\"Jon\"\n"
"  lastName=\"Smith\"\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:77
# code block
msgid "~~~\n"
"  File \"<ipython-input-7-f65f2962bf9c>\", line 2\n"
"    lastName=\"Smith\"\n"
"    ^\n"
"IndentationError: unexpected indent\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:85
# unordered list
msgid "*   This error can be fixed by removing the extra spaces"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:86
msgid "    at the beginning of the second line."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:88
# header
msgid "## A `for` loop is made up of a collection, a loop variable, and a body."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:96
# unordered list
msgid "*   The collection, `[2, 3, 5]`, is what the loop is being run on."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:97
# unordered list
msgid "*   The body, `print(number)`, specifies what to do for each value in the collection."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:98
# unordered list
msgid "*   The loop variable, `number`, is what changes for each *iteration* of the loop."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:99
# unordered list
msgid "    *   The \"current thing\"."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:101
# header
msgid "## Loop variables can be called anything."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:103
# unordered list
msgid "*   As with all variables, loop variables are:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:104
# unordered list
msgid "    *   Created on demand."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:105
# unordered list
msgid "    *   Meaningless: their names can be anything at all."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:107
# code block
msgid "~~~\n"
"for kitten in [2, 3, 5]:\n"
"    print(kitten)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:113
# header
msgid "## The body of a loop can contain many statements."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:115
# unordered list
msgid "*   But no loop should be more than a few lines long."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:116
# unordered list
msgid "*   Hard for human beings to keep larger chunks of code in mind."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:118
# code block
msgid "~~~\n"
"primes = [2, 3, 5]\n"
"for p in primes:\n"
"    squared = p ** 2\n"
"    cubed = p ** 3\n"
"    print(p, squared, cubed)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:126
# code block
msgid "~~~\n"
"2 4 8\n"
"3 9 27\n"
"5 25 125\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:133
# header
msgid "## Use `range` to iterate over a sequence of numbers."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:135
# unordered list
msgid "*   The built-in function `range` produces a sequence of numbers."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:136
# unordered list
msgid "    *   *Not* a list: the numbers are produced on demand"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:137
msgid "        to make looping over large ranges more efficient.\n"
"*   `range(N)` is the numbers 0..N-1\n"
"    *   Exactly the legal indices of a list or character string of length N"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:141
# code block
msgid "~~~\n"
"print('a range is not a list: range(0, 3)')\n"
"for number in range(0,3):\n"
"    print(number)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:147
# code block
msgid "~~~\n"
"a range is not a list: range(0, 3)\n"
"0\n"
"1\n"
"2\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:155
# header
msgid "## The Accumulator pattern turns many values into one."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:157
# unordered list
msgid "*   A common pattern in programs is to:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:158
msgid "    1.  Initialize an *accumulator* variable to zero, the empty string, or the empty list.\n"
"    2.  Update the variable with values from a collection."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:161
# code block
msgid "~~~\n"
"# Sum the first 10 integers.\n"
"total = 0\n"
"for number in range(10):\n"
"   total = total + (number + 1)\n"
"print(total)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:169
# code block
msgid "~~~\n"
"55\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:174
# unordered list
msgid "*   Read `total = total + (number + 1)` as:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:175
# unordered list
msgid "    *   Add 1 to the current value of the loop variable `number`."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:176
# unordered list
msgid "    *   Add that to the current value of the accumulator variable `total`."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:177
# unordered list
msgid "    *   Assign that to `total`, replacing the current value."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:178
# unordered list
msgid "*   We have to add `number + 1` because `range` produces 0..9, not 1..10."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:180
# blockquote, which can be cascaded
msgid "> ## Classifying Errors"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:181
msgid ">\n"
"> Is an indentation error a syntax error or a runtime error?\n"
"> > ## Solution\n"
"> > An IndentationError is a syntax error. Programs with syntax errors cannot be started.\n"
"> > A program with a runtime error will start but an error will be thrown under certain conditions."
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:189
#: python-novice-gapminder/_episodes/17-conditionals.md:253
# blockquote, which can be cascaded
msgid "> ## Tracing Execution"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:190
msgid ">\n"
"> Create a table showing the numbers of the lines that are executed when this program runs,\n"
"> and the values of the variables after each line is executed.\n"
">\n"
"> ~~~\n"
"> total = 0\n"
"> for char in \"tin\":\n"
">     total = total + 1\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:202
# blockquote, which can be cascaded
msgid "> > | Line no | Variables            |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:203
# blockquote, which can be cascaded
msgid "> > |---------|----------------------|"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:204
# blockquote, which can be cascaded
msgid "> > | 1       | total = 0            |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:205
# blockquote, which can be cascaded
msgid "> > | 2       | total = 0 char = 't' |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:206
# blockquote, which can be cascaded
msgid "> > | 3       | total = 1 char = 't' |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:207
# blockquote, which can be cascaded
msgid "> > | 2       | total = 1 char = 'i' |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:208
# blockquote, which can be cascaded
msgid "> > | 3       | total = 2 char = 'i' |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:209
# blockquote, which can be cascaded
msgid "> > | 2       | total = 2 char = 'n' |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:210
# blockquote, which can be cascaded
msgid "> > | 3       | total = 3 char = 'n' |"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:214
# blockquote, which can be cascaded
msgid "> ## Reversing a String"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:215
msgid ">\n"
"> Fill in the blanks in the program below so that it prints \"nit\"\n"
"> (the reverse of the original character string \"tin\").\n"
">\n"
"> ~~~\n"
"> original = \"tin\"\n"
"> result = ____\n"
"> for char in original:\n"
">     result = ____\n"
"> print(result)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:229
# blockquote, which can be cascaded
msgid "> > original = \"tin\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:230
#: python-novice-gapminder/_episodes/12-for-loops.md:292
# blockquote, which can be cascaded
msgid "> > result = \"\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:231
# blockquote, which can be cascaded
msgid "> > for char in original:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:232
# blockquote, which can be cascaded
msgid "> >     result = char + result"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:233
#: python-novice-gapminder/_episodes/12-for-loops.md:295
#: python-novice-gapminder/_episodes/17-conditionals.md:308
# blockquote, which can be cascaded
msgid "> > print(result)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:239
# blockquote, which can be cascaded
msgid "> ## Practice Accumulating"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:240
msgid ">\n"
"> Fill in the blanks in each of the programs below\n"
"> to produce the indicated result.\n"
">\n"
"> ~~~\n"
"> # Total length of the strings in the list: [\"red\", \"green\", \"blue\"] => 12\n"
"> total = 0\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     ____ = ____ + len(word)\n"
"> print(total)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:254
# blockquote, which can be cascaded
msgid "> > total = 0"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:255
#: python-novice-gapminder/_episodes/12-for-loops.md:273
#: python-novice-gapminder/_episodes/12-for-loops.md:308
# blockquote, which can be cascaded
msgid "> > for word in [\"red\", \"green\", \"blue\"]:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:256
# blockquote, which can be cascaded
msgid "> >     total = total + len(word)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:257
# blockquote, which can be cascaded
msgid "> > print(total)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:261
msgid ">\n"
"> ~~~\n"
"> # List of word lengths: [\"red\", \"green\", \"blue\"] => [3, 5, 4]\n"
"> lengths = ____\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     lengths.____(____)\n"
"> print(lengths)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:272
# blockquote, which can be cascaded
msgid "> > lengths = []"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:274
# blockquote, which can be cascaded
msgid "> >     lengths.append(len(word))"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:275
# blockquote, which can be cascaded
msgid "> > print(lengths)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:279
msgid ">\n"
"> ~~~\n"
"> # Concatenate all words: [\"red\", \"green\", \"blue\"] => \"redgreenblue\"\n"
"> words = [\"red\", \"green\", \"blue\"]\n"
"> result = ____\n"
"> for ____ in ____:\n"
">     ____\n"
"> print(result)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:291
# blockquote, which can be cascaded
msgid "> > words = [\"red\", \"green\", \"blue\"]"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:293
# blockquote, which can be cascaded
msgid "> > for word in words:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:294
# blockquote, which can be cascaded
msgid "> >     result = result + word"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:299
msgid ">\n"
"> ~~~\n"
"> # Create acronym: [\"red\", \"green\", \"blue\"] => \"RGB\"\n"
"> # write the whole thing\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:307
# blockquote, which can be cascaded
msgid "> > acronym = \"\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:309
# blockquote, which can be cascaded
msgid "> >     acronym = acronym + word[0].upper()"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:310
# blockquote, which can be cascaded
msgid "> > print(acronym)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:316
# blockquote, which can be cascaded
msgid "> ## Cumulative Sum"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:317
msgid ">\n"
"> Reorder and properly indent the lines of code below\n"
"> so that they print an array with the cumulative sum of data.\n"
"> The result should be `[1, 3, 5, 10]`.\n"
">\n"
"> ~~~\n"
"> cumulative += [sum]\n"
"> for number in data:\n"
"> cumulative = []\n"
"> sum += number\n"
"> sum = 0\n"
"> print(cumulative)\n"
"> data = [1,2,2,5]\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:334
# blockquote, which can be cascaded
msgid "> > sum = 0"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:335
# blockquote, which can be cascaded
msgid "> > data = [1,2,2,5]"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:336
# blockquote, which can be cascaded
msgid "> > cumulative = []"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:337
# blockquote, which can be cascaded
msgid "> > for number in data:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:338
# blockquote, which can be cascaded
msgid "> >     sum += number"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:339
# blockquote, which can be cascaded
msgid "> >     cumulative.append(sum)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:340
# blockquote, which can be cascaded
msgid "> > print(cumulative)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:346
# blockquote, which can be cascaded
msgid "> ## Identifying Variable Name Errors"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:347
msgid ">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code and read the error message.\n"
">    What type of `NameError` do you think this is?\n"
">    Is it a string with no quotes, a misspelled variable, or a \n"
">    variable that should have been defined but was not?\n"
"> 3. Fix the error.\n"
"> 4. Repeat steps 2 and 3, until you have fixed all the errors.\n"
">\n"
"> ~~~\n"
"> for number in range(10):\n"
">     # use a if the number is a multiple of 3, otherwise use b\n"
">     if (Number % 3) == 0:\n"
">         message = message + a\n"
">     else:\n"
">         message = message + \"b\"\n"
"> print(message)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:369
# blockquote, which can be cascaded
msgid "> > message = \"\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:370
# blockquote, which can be cascaded
msgid "> > for number in range(10):"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:371
# blockquote, which can be cascaded
msgid "> >     # use a if the number is a multiple of 3, otherwise use b"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:372
# blockquote, which can be cascaded
msgid "> >     if (number % 3) == 0:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:373
# blockquote, which can be cascaded
msgid "> >         message = message + \"a\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:374
#: python-novice-gapminder/_episodes/17-conditionals.md:306
# blockquote, which can be cascaded
msgid "> >     else:"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:375
# blockquote, which can be cascaded
msgid "> >         message = message + \"b\""
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:376
# blockquote, which can be cascaded
msgid "> > print(message)"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:382
# blockquote, which can be cascaded
msgid "> ## Identifying Item Errors"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:383
msgid ">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
"> 3. Fix the error.\n"
">\n"
"> ~~~\n"
"> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> print('My favorite season is ', seasons[4])\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:396
# blockquote, which can be cascaded
msgid "> > seasons = ['Spring', 'Summer', 'Fall', 'Winter']"
msgstr ""

#: python-novice-gapminder/_episodes/12-for-loops.md:397
# blockquote, which can be cascaded
msgid "> > print('My favorite season is ', seasons[3])"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:1
# Front Matter
msgid "---\n"
"title: \"Looping Over Data Sets\"\n"
"teaching: 5\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I process many data sets with a single command?\"\n"
"objectives:\n"
"- \"Be able to read and write globbing expressions that match sets of files.\"\n"
"- \"Use glob to create lists of files.\"\n"
"- \"Write for loops to perform operations on files given their names in a list.\"\n"
"keypoints:\n"
"- \"Use a `for` loop to process files given a list of their names.\"\n"
"- \"Use `glob.glob` to find sets of files whose names match a pattern.\"\n"
"- \"Use `glob` and `for` to process batches of files.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:17
# header
msgid "## Use a `for` loop to process files given a list of their names."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:19
# unordered list
msgid "*   A filename is just a character string."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:20
# unordered list
msgid "*   And lists can contain character strings."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:22
# code block
msgid "~~~\n"
"import pandas\n"
"for filename in ['data/gapminder_gdp_africa.csv', 'data/gapminder_gdp_asia.csv']:\n"
"    data = pandas.read_csv(filename, index_col='country')\n"
"    print(filename, data.min())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:29
# code block
msgid "~~~\n"
"data/gapminder_gdp_africa.csv gdpPercap_1952    298.846212\n"
"gdpPercap_1957    335.997115\n"
"gdpPercap_1962    355.203227\n"
"gdpPercap_1967    412.977514\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    312.188423\n"
"gdpPercap_2002    241.165877\n"
"gdpPercap_2007    277.551859\n"
"dtype: float64\n"
"data/gapminder_gdp_asia.csv gdpPercap_1952    331\n"
"gdpPercap_1957    350\n"
"gdpPercap_1962    388\n"
"gdpPercap_1967    349\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    415\n"
"gdpPercap_2002    611\n"
"gdpPercap_2007    944\n"
"dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:51
# header
msgid "## Use `glob.glob` to find sets of files whose names match a pattern."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:53
# unordered list
msgid "*   In Unix, the term \"globbing\" means \"matching a set of files with a pattern\"."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:54
# unordered list
msgid "*   The most common patterns are:"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:55
# unordered list
msgid "    *   `*` meaning \"match zero or more characters\""
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:56
# unordered list
msgid "    *   `?` meaning \"match exactly one character\""
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:57
# unordered list
msgid "*   Python contains the `glob` library to provide pattern matching functionality"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:58
# unordered list
msgid "*   The `glob` library contains a function also called `glob` to match file patterns"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:59
# unordered list
msgid "*   E.g., `glob.glob('*.txt')` matches all files in the current directory "
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:60
msgid "    whose names end with `.txt`.\n"
"*   Result is a (possibly empty) list of character strings."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:63
# code block
msgid "~~~\n"
"import glob\n"
"print('all csv files in data directory:', glob.glob('data/*.csv'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:68
# code block
msgid "~~~\n"
"all csv files in data directory: ['data/gapminder_all.csv', 'data/gapminder_gdp_africa.csv', \\\n"
"'data/gapminder_gdp_americas.csv', 'data/gapminder_gdp_asia.csv', 'data/gapminder_gdp_europe.csv', \\\n"
"'data/gapminder_gdp_oceania.csv']\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:75
# code block
msgid "~~~\n"
"print('all PDB files:', glob.glob('*.pdb'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:79
# code block
msgid "~~~\n"
"all PDB files: []\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:84
# header
msgid "## Use `glob` and `for` to process batches of files."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:86
# unordered list
msgid "*   Helps a lot if the files are named and stored systematically and consistently"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:87
msgid "    so that simple patterns will find the right data."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:89
# code block
msgid "~~~\n"
"for filename in glob.glob('data/gapminder_*.csv'):\n"
"    data = pandas.read_csv(filename)\n"
"    print(filename, data['gdpPercap_1952'].min())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:95
# code block
msgid "~~~\n"
"data/gapminder_all.csv 298.8462121\n"
"data/gapminder_gdp_africa.csv 298.8462121\n"
"data/gapminder_gdp_americas.csv 1397.717137\n"
"data/gapminder_gdp_asia.csv 331.0\n"
"data/gapminder_gdp_europe.csv 973.5331948\n"
"data/gapminder_gdp_oceania.csv 10039.59564\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:105
# unordered list
msgid "*   This includes all data, as well as per-region data."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:106
# unordered list
msgid "*   Use a more specific pattern in the exercises to exclude the whole data set."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:107
# unordered list
msgid "*   But note that the minimum of the entire data set is also the minimum of one of the data sets,"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:108
msgid "    which is a nice check on correctness."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:110
# blockquote, which can be cascaded
msgid "> ## Determining Matches"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:111
msgid ">\n"
"> Which of these files is *not* matched by the expression `glob.glob('data/*as*.csv')`?\n"
">\n"
"> 1. `data/gapminder_gdp_africa.csv`\n"
"> 2. `data/gapminder_gdp_americas.csv`\n"
"> 3. `data/gapminder_gdp_asia.csv`\n"
"> 4. 1 and 2 are not matched.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1 is not matched by the glob."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:125
# blockquote, which can be cascaded
msgid "> ## Minimum File Size"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:126
msgid ">\n"
"> Modify this program so that it prints the number of records in\n"
"> the file that has the fewest records.\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas\n"
"> fewest = ____\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     dataframe = pandas.____(filename)\n"
">     fewest = min(____, dataframe.shape[0])\n"
"> print('smallest file has', fewest, 'records')\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:140
# blockquote, which can be cascaded
msgid "> Notice that the shape method returns a tuple with "
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:141
# blockquote, which can be cascaded
msgid "> the number of rows and columns of the data frame."
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:142
msgid ">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas\n"
"> > fewest = float('Inf')\n"
"> > for filename in glob.glob('data/*.csv'):\n"
"> >     dataframe = pandas.read_csv(filename)\n"
"> >     fewest = min(fewest, dataframe.shape[0])\n"
"> > print('smallest file has', fewest, 'records')\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:157
# blockquote, which can be cascaded
msgid "> ## Comparing Data"
msgstr ""

#: python-novice-gapminder/_episodes/13-looping-data-sets.md:158
msgid ">\n"
"> Write a program that reads in the regional data sets\n"
"> and plots the average GDP per capita for each region over time\n"
"> in a single chart.\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas \n"
"> > import matplotlib.pyplot as plt\n"
"> > fig, ax = plt.subplots(1,1)\n"
"> > for filename in glob.glob('data/gapminder_gdp*.csv'):\n"
"> >     dataframe = pandas.read_csv(filename)\n"
"> >     # extract region from the filename, expected to be in the format 'data/gapminder_gdp_<region>.csv'\n"
"> >     region = filename.rpartition('_')[2][:-4] \n"
"> >     dataframe.mean().plot(ax=ax, label=region)\n"
"> > plt.legend()\n"
"> > plt.show()\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:1
# Front Matter
msgid "---\n"
"title: \"Writing Functions\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I create my own functions?\"\n"
"objectives:\n"
"- \"Explain and identify the difference between function definition and function call.\"\n"
"- \"Write a function that takes a small, fixed number of arguments and produces a single result.\"\n"
"keypoints:\n"
"- \"Break programs down into functions to make them easier to understand.\"\n"
"- \"Define a function using `def` with a name, parameters, and a block of code.\"\n"
"- \"Defining a function does not run it.\"\n"
"- \"Arguments in call are matched to parameters in definition.\"\n"
"- \"Functions may return a result to their caller using `return`.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:17
# header
msgid "## Break programs down into functions to make them easier to understand."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:19
# unordered list
msgid "*   Human beings can only keep a few items in working memory at a time."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:20
# unordered list
msgid "*   Understand larger/more complicated ideas by understanding and combining pieces."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:21
# unordered list
msgid "    *   Components in a machine."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:22
# unordered list
msgid "    *   Lemmas when proving theorems."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:23
# unordered list
msgid "*   Functions serve the same purpose in programs."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:24
# unordered list
msgid "    *   *Encapsulate* complexity so that we can treat it as a single \"thing\"."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:25
# unordered list
msgid "*   Also enables *re-use*."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:26
# unordered list
msgid "    *   Write one time, use many times."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:28
# header
msgid "## Define a function using `def` with a name, parameters, and a block of code."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:30
# unordered list
msgid "*   Begin the definition of a new function with `def`."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:31
# unordered list
msgid "*   Followed by the name of the function."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:32
# unordered list
msgid "    *   Must obey the same rules as variable names."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:33
# unordered list
msgid "*   Then *parameters* in parentheses."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:34
# unordered list
msgid "    *   Empty parentheses if the function doesn't take any inputs."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:35
# unordered list
msgid "    *   We will discuss this in detail in a moment."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:36
# unordered list
msgid "*   Then a colon."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:37
# unordered list
msgid "*   Then an indented block of code."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:39
# code block
msgid "~~~\n"
"def print_greeting():\n"
"    print('Hello!')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:45
# header
msgid "## Defining a function does not run it."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:47
# unordered list
msgid "*   Defining a function does not run it."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:48
# unordered list
msgid "    *   Like assigning a value to a variable."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:49
# unordered list
msgid "*   Must call the function to execute the code it contains."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:51
# code block
msgid "~~~\n"
"print_greeting()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:55
# code block
msgid "~~~\n"
"Hello!\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:60
# header
msgid "## Arguments in call are matched to parameters in definition."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:62
# unordered list
msgid "*   Functions are most useful when they can operate on different data."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:63
# unordered list
msgid "*   Specify *parameters* when defining a function."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:64
# unordered list
msgid "    *   These become variables when the function is executed."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:65
# unordered list
msgid "    *   Are assigned the arguments in the call (i.e., the values passed to the function)."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:66
# unordered list
msgid "    *   If you don't name the arguments when using them in the call, the arguments will be matched to"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:67
msgid "parameters in the order the parameters are defined in the function."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:69
# code block
msgid "~~~\n"
"def print_date(year, month, day):\n"
"    joined = str(year) + '/' + str(month) + '/' + str(day)\n"
"    print(joined)\n"
"\n"
"print_date(1871, 3, 19)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:77
#: python-novice-gapminder/_episodes/14-writing-functions.md:88
# code block
msgid "~~~\n"
"1871/3/19\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:82
msgid "Or, we can name the arguments when we call the function, which allows us to\n"
"specify them in any order:\n"
"~~~\n"
"print_date(month=3, day=19, year=1871)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:93
# unordered list
msgid "*   Via [Twitter](https://twitter.com/minisciencegirl/status/693486088963272705):"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:94
msgid "    `()` contains the ingredients for the function\n"
"    while the body contains the recipe."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:97
# header
msgid "## Functions may return a result to their caller using `return`."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:99
# unordered list
msgid "*   Use `return ...` to give a value back to the caller."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:100
# unordered list
msgid "*   May occur anywhere in the function."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:101
# unordered list
msgid "*   But functions are easier to understand if `return` occurs:"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:102
# unordered list
msgid "    *   At the start to handle special cases."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:103
# unordered list
msgid "    *   At the very end, with a final result."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:105
# code block
msgid "~~~\n"
"def average(values):\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:113
# code block
msgid "~~~\n"
"a = average([1, 3, 4])\n"
"print('average of actual values:', a)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:118
# code block
msgid "~~~\n"
"2.6666666666666665\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:123
# code block
msgid "~~~\n"
"print('average of empty list:', average([]))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:127
# code block
msgid "~~~\n"
"None\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:132
# unordered list
msgid "*   Remember: [every function returns something]({{ page.root }}/04-built-in/)."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:133
# unordered list
msgid "*   A function that doesn't explicitly `return` a value automatically returns `None`."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:135
# code block
msgid "~~~\n"
"result = print_date(1871, 3, 19)\n"
"print('result of call is:', result)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:140
# code block
msgid "~~~\n"
"1871/3/19\n"
"result of call is: None\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:146
# blockquote, which can be cascaded
msgid "> ## Identifying Syntax Errors"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:147
msgid ">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code and read the error message.\n"
">    Is it a `SyntaxError` or an `IndentationError`?\n"
"> 3. Fix the error.\n"
"> 4. Repeat steps 2 and 3 until you have fixed all the errors.\n"
">\n"
"> ~~~\n"
"> def another_function\n"
">   print(\"Syntax errors are annoying.\")\n"
">    print(\"But at least python tells us about them!\")\n"
">   print(\"So they are usually not too hard to fix.\")\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:162
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def another_function():\n"
"> >   print(\"Syntax errors are annoying.\")\n"
"> >   print(\"But at least Python tells us about them!\")\n"
"> >   print(\"So they are usually not too hard to fix.\")\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:175
# blockquote, which can be cascaded
msgid "> ## Definition and Use"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:176
msgid ">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> def report(pressure):\n"
">     print('pressure is', pressure)\n"
">\n"
"> print('calling', report, 22.5)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:189
# blockquote, which can be cascaded
msgid "> > calling <function report at 0x7fd128ff1bf8> 22.5"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:190
# blockquote, which can be cascaded
msgid "> > ~~~ "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:193
# blockquote, which can be cascaded
msgid "> > A function call always needs parenthesis, otherwise you get memory address of the function object. So, if we wanted to call the function named report, and give it the value 22.5 to report on, we could have our function call as follows"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:195
# blockquote, which can be cascaded
msgid "> > print(\"calling\")"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:196
# blockquote, which can be cascaded
msgid "> > report(22.5)"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:202
# blockquote, which can be cascaded
msgid "> ## Order of Operations"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:203
msgid ">\n"
"> The example above:\n"
">\n"
"> ~~~\n"
"> result = print_date(1871, 3, 19)\n"
"> print('result of call is:', result)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:211
msgid ">\n"
"> printed:\n"
"> ~~~\n"
"> 1871/3/19\n"
"> result of call is: None\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:218
msgid ">\n"
"> Explain why the two lines of output appeared in the order they did.\n"
">\n"
"> What's wrong in this example?\n"
"> ~~~\n"
"> result = print_date(1871,3,19)\n"
">\n"
"> def print_date(year, month, day):\n"
">    joined = str(year) + '/' + str(month) + '/' + str(day)\n"
">    print(joined)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:233
# blockquote, which can be cascaded
msgid "> > 1. The first line of output (`1871/3/19`) is from the print function inside `print_date()`, while the second line"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:234
# blockquote, which can be cascaded
msgid "> > is from the print function below the function call. All of the code inside `print_date()` is executed first, and"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:235
# blockquote, which can be cascaded
msgid "> > the program then \"leaves\" the function and executes the rest of the code.   "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:236
# blockquote, which can be cascaded
msgid "> > 2. The problem with the example is that the function is defined *after* the call to the function is made. Python"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:237
# blockquote, which can be cascaded
msgid "> > therefore doesn't understand the function call."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:241
# blockquote, which can be cascaded
msgid "> ## Encapsulation"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:242
msgid ">\n"
"> Fill in the blanks to create a function that takes a single filename as an argument,\n"
"> loads the data in the file named by the argument,\n"
"> and returns the minimum value in that data.\n"
">\n"
"> ~~~\n"
"> import pandas\n"
">\n"
"> def min_in_data(____):\n"
">     data = ____\n"
">     return ____\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:258
#: python-novice-gapminder/_episodes/17-conditionals.md:331
# blockquote, which can be cascaded
msgid "> > import pandas"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:260
# blockquote, which can be cascaded
msgid "> > def min_in_data(filename):"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:261
# blockquote, which can be cascaded
msgid "> >     data = pandas.read_csv(filename)"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:262
# blockquote, which can be cascaded
msgid "> >     return data.min()"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:268
# blockquote, which can be cascaded
msgid "> ## Find the First"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:269
msgid ">\n"
"> Fill in the blanks to create a function that takes a list of numbers as an argument\n"
"> and returns the first negative value in the list.\n"
"> What does your function do if the list is empty?\n"
">\n"
"> ~~~\n"
"> def first_negative(values):\n"
">     for v in ____:\n"
">         if ____:\n"
">             return ____\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:284
# blockquote, which can be cascaded
msgid "> > def first_negative(values):"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:285
# blockquote, which can be cascaded
msgid "> >     for v in values:"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:286
# blockquote, which can be cascaded
msgid "> >         if v<0:"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:287
# blockquote, which can be cascaded
msgid "> >             return v"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:290
# blockquote, which can be cascaded
msgid "> > If an empty list is passed to this function, it returns `None`:"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:292
# blockquote, which can be cascaded
msgid "> > my_list = []"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:293
# blockquote, which can be cascaded
msgid "> > print(first_negative(my_list)"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:297
# blockquote, which can be cascaded
msgid "> > None"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:303
# blockquote, which can be cascaded
msgid "> ## Calling by Name"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:304
msgid ">\n"
"> Earlier we saw this function:\n"
">\n"
"> ~~~\n"
"> def print_date(year, month, day):\n"
">     joined = str(year) + '/' + str(month) + '/' + str(day)\n"
">     print(joined)\n"
"> ~~~\n"
"> We saw that we can call the function using *named arguments*, like this:\n"
"> ~~~\n"
"> print_date(day=1, month=2, year=2003)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:317
msgid ">\n"
"> 1.  What does `print_date(day=1, month=2, year=2003)` print?\n"
"> 2.  When have you seen a function call like this before?\n"
"> 3.  When and why is it useful to call functions this way?"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:324
# blockquote, which can be cascaded
msgid "> > 1. `2003/2/1`"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:325
# blockquote, which can be cascaded
msgid "> > 2. We saw examples of using *named arguments* when working with the pandas library. For example, when reading in a dataset "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:326
# blockquote, which can be cascaded
msgid "> > using `data = pandas.read_csv('data/gapminder_gdp_europe.csv', index_col='country')`, the last argument `index_col` is a "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:327
# blockquote, which can be cascaded
msgid "> > named argument.  "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:328
# blockquote, which can be cascaded
msgid "> > 3. Using named arguments can make code more readable since one can see from the function call what name the different arguments "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:329
# blockquote, which can be cascaded
msgid "> > have inside the function. It can also reduce the chances of passing arguments in the wrong order, since by using named arguments "
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:330
# blockquote, which can be cascaded
msgid "> > the order doesn't matter."
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:334
# blockquote, which can be cascaded
msgid "> ## Encapsulate of If/Print Block"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:335
msgid ">\n"
"> The code below will run on a label-printer for chicken eggs.  A digital scale will report a chicken egg mass (in grams) to the computer and then the computer will print a label.  \n"
">\n"
"> Please re-write the code so that the if-block is folded into a function.\n"
">\n"
"> ~~~\n"
">  import random\n"
">  for i in range(10):\n"
">\n"
">     # simulating the mass of a chicken egg\n"
">     # the (random) mass will be 70 +/- 20 grams\n"
">     mass=70+20.0*(2.0*random.random()-1.0)\n"
">\n"
">     print(mass)\n"
">    \n"
">     #egg sizing machinery prints a label\n"
">     if(mass>=85):\n"
">        print(\"jumbo\")\n"
">     elif(mass>=70):\n"
">        print(\"large\")\n"
">     elif(mass<70 and mass>=55):\n"
">        print(\"medium\")\n"
">     else:\n"
">        print(\"small\")\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:361
msgid ">\n"
">\n"
"> The simplified program  follows.  What function definition will make it functional?\n"
">\n"
"> ~~~\n"
">  # revised version\n"
">  import random\n"
">  for i in range(10):\n"
">\n"
">     # simulating the mass of a chicken egg\n"
">     # the (random) mass will be 70 +/- 20 grams\n"
">     mass=70+20.0*(2.0*random.random()-1.0)\n"
">\n"
">     print(mass,print_egg_label(mass))    \n"
">\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:378
msgid ">\n"
">\n"
"> 1. Create a function definition for `print_egg_label()` that will work with the revised program above.  Note, the function's return value will be significant. Sample output might be `71.23 large`.\n"
"> 2.  A dirty egg might have a mass of more than 90 grams, and a spoiled or broken egg will probably have a mass that's less than 50 grams.  Modify your `print_egg_label()` function to account for these error conditions. Sample output could be `25 too light, probably spoiled`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def print_egg_label(mass):\n"
"> >     #egg sizing machinery prints a label\n"
"> >     if(mass>=90):\n"
"> >         return(\"warning: egg might be dirty\")\n"
"> >     elif(mass>=85):\n"
"> >         return(\"jumbo\")\n"
"> >     elif(mass>=70):\n"
"> >         return(\"large\")\n"
"> >     elif(mass<70 and mass>=55):\n"
"> >         return(\"medium\")\n"
"> >     elif(mass<50):\n"
"> >         return(\"too light, probably spoiled\")\n"
"> >     else:\n"
"> >         return(\"small\")\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:405
# blockquote, which can be cascaded
msgid "> ## Encapsulating Data Analysis"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:406
msgid ">\n"
"> Assume that the following code has been executed:\n"
">\n"
"> ~~~\n"
"> import pandas\n"
">\n"
"> df = pandas.read_csv('data/gapminder_gdp_asia.csv', index_col=0)\n"
"> japan = df.loc['Japan']\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:416
msgid ">\n"
"> 1.Complete the statements below to obtain the average GDP for Japan\n"
"> across the years reported for the 1980s.\n"
">\n"
"> ~~~\n"
"> year = 1983\n"
"> gdp_decade = 'gdpPercap_' + str(year // ____)\n"
"> avg = (japan.loc[gdp_decade + ___] + japan.loc[gdp_decade + ___]) / 2\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:426
msgid ">\n"
"> 2.Abstract the code above into a single function.\n"
">\n"
"> ~~~\n"
"> def avg_gdp_in_decade(country, continent, year):\n"
">     df = pandas.read_csv('data/gapminder_gdp_'+___+'.csv',delimiter=',',index_col=0)\n"
">     ____\n"
">     ____\n"
">     ____\n"
">     return avg\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:438
msgid ">\n"
"> 3.How would you generalize this function\n"
">    if you did not know beforehand which specific years occurred as columns in the data?\n"
">    For instance, what if we also had data from years ending in 1 and 9 for each decade?\n"
">    (Hint: use the columns to filter out the ones that correspond to the decade,\n"
">    instead of enumerating them in the code.)\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1.\n"
"> >\n"
"> > ~~~\n"
"> > year = 1983\n"
"> > gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> > avg = (japan.loc[gdp_decade + '2'] + japan.loc[gdp_decade + '7']) / 2\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > ~~~\n"
"> > def avg_gdp_in_decade(country, continent, year):\n"
"> >     df = pandas.read_csv('data/gapminder_gdp_' + continent + '.csv', index_col=0)\n"
"> >     c = df.loc[country]\n"
"> >     gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> >     avg = (c.loc[gdp_decade + '2'] + c.loc[gdp_decade + '7'])/2\n"
"> >     return avg\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > 3.\n"
"> > \n"
"> > We need to loop over the reported years\n"
"> >    to obtain the average for the relevant ones in the data.\n"
"> >\n"
"> > ~~~\n"
"> > def avg_gdp_in_decade(country, continent, year):\n"
"> >     df = pandas.read_csv('data/gapminder_gdp_' + continent + '.csv', index_col=0)\n"
"> >     c = df.loc[country]\n"
"> >     gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> >     total = 0.0\n"
"> >     num_years = 0\n"
"> >     for yr_header in c.index: # c's index contains reported years\n"
"> >         if yr_header.startswith(gdp_decade):\n"
"> >             total = total + c.loc[yr_header]\n"
"> >             num_years = num_years + 1\n"
"> >     return total/num_years\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > The function can now be called by:\n"
"> > ~~~\n"
"> > avg_gdp_in_decade('Japan','asia',1983)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > \n"
"> > ~~~\n"
"> > 20880.023800000003\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:499
# blockquote, which can be cascaded
msgid "> ## Simulating a dynamical system"
msgstr ""

#: python-novice-gapminder/_episodes/14-writing-functions.md:500
msgid ">\n"
"> In mathematics, a [dynamical system](https://en.wikipedia.org/wiki/Dynamical_system) is a system in which a function describes the time dependence of a point in a geometrical space.  A canonical example of a dynamical system is a system called the [logistic map](https://en.wikipedia.org/wiki/Logistic_map).\n"
">\n"
">\n"
"> 1. Define a function called `logistic_map` that takes two inputs: `x`, representing the state of the system at time _t_, and a parameter `r`. This function should return a value representing the state of the system at time _t+1_.\n"
">\n"
"> 2. Using a `for` loop, iterate the `logistic_map` function defined in part 1 starting from an initial condition of 0.5 for `t_final=10`, `100`, and `1000` periods. Store the intermediate results in a list so that after the `for` loop terminates you have accumulated a sequence of values representing the state of the logistic map at time _t=0,1,...,t_final_.\n"
">\n"
"> 3. Encapsulate the logic of your `for` loop into a function called `iterate` that takes the initial condition as its first input, the parameter `t_final` as its second input and the parameter `r` as its third input. The function should return the list of values representing the state of the logistic map at time _t=0,1,...,t_final_.\n"
">\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1.\n"
"> >\n"
"> > ~~~\n"
"> > def logistic_map(x, r):\n"
"> >     return r * x * (1 - x)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > ~~~\n"
"> > initial_condition = 0.5\n"
"> > t_final = 10\n"
"> > r = 1.0\n"
"> > trajectory = [initial_condition]\n"
"> > for t in range(1, t_final):\n"
"> >     trajectory[t] = logistic_map(trajectory[t-1], r)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > 3.\n"
"> > ~~~\n"
"> > def iterate(initial_condition, t_final, r):\n"
"> >     trajectory = [initial_condition]\n"
"> >     for t in range(1, t_final):\n"
"> >         trajectory[t] = logistic_map(trajectory[t-1], r)\n"
"> >     return trajectorys\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:1
# Front Matter
msgid "---\n"
"title: \"Variable Scope\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How do function calls actually work?\"\n"
"- \"How can I determine where errors occurred?\"\n"
"objectives:\n"
"- \"Identify local and global variables.\"\n"
"- \"Identify parameters as local variables.\"\n"
"- \"Read a traceback and determine the file, function, and line number on which the error occurred, the type of error, and the error message.\"\n"
"keypoints:\n"
"- \"The scope of a variable is the part of a program that can 'see' that variable.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:15
# header
msgid "## The scope of a variable is the part of a program that can 'see' that variable."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:17
# unordered list
msgid "*   There are only so many sensible names for variables."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:18
# unordered list
msgid "*   People using functions shouldn't have to worry about"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:19
msgid "    what variable names the author of the function used.\n"
"*   People writing functions shouldn't have to worry about\n"
"    what variable names the function's caller uses.\n"
"*   The part of a program in which a variable is visible is called its *scope*."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:24
# code block
msgid "~~~\n"
"pressure = 103.9\n"
"\n"
"def adjust(t):\n"
"    temperature = t * 1.43 / pressure\n"
"    return temperature\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:33
# unordered list
msgid "*   `pressure` is a *global variable*."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:34
# unordered list
msgid "    *   Defined outside any particular function."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:35
# unordered list
msgid "    *   Visible everywhere."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:36
# unordered list
msgid "*   `t` and `temperature` are *local variables* in `adjust`."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:37
# unordered list
msgid "    *   Defined in the function."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:38
# unordered list
msgid "    *   Not visible in the main program."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:39
# unordered list
msgid "    *   Remember: a function parameter is a variable"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:40
msgid "        that is automatically assigned a value when the function is called."
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:42
# code block
msgid "~~~\n"
"print('adjusted:', adjust(0.9))\n"
"print('temperature after call:', temperature)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:47
# code block
msgid "~~~\n"
"adjusted: 0.01238691049085659\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:51
# code block
msgid "~~~\n"
"Traceback (most recent call last):\n"
"  File \"/Users/swcarpentry/foo.py\", line 8, in <module>\n"
"    print('temperature after call:', temperature)\n"
"NameError: name 'temperature' is not defined\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:59
# blockquote, which can be cascaded
msgid "> ## Local and Global Variable Use"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:60
msgid ">\n"
"> Trace the values of all variables in this program as it is executed.\n"
"> (Use '---' as the value of variables before and after they exist.)\n"
">\n"
"> ~~~\n"
"> limit = 100\n"
">\n"
"> def clip(value):\n"
">     return min(max(0.0, value), limit)\n"
">\n"
"> value = -22.5\n"
"> print(clip(value))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/15-scope.md:77
msgid ">\n"
"> Read the traceback below, and identify the following:\n"
">\n"
"> 1. How many levels does the traceback have?\n"
"> 2. What is the file name where the error occurred?\n"
"> 3. What is the function name where the error occurred?\n"
"> 4. On which line number in this function did the error occurr?\n"
"> 5. What is the type of error?\n"
"> 6. What is the error message?\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> KeyError                                  Traceback (most recent call last)\n"
"> <ipython-input-2-e4c4cbafeeb5> in <module>()\n"
">       1 import errors_02\n"
"> ----> 2 errors_02.print_friday_message()\n"
">\n"
"> /Users/ghopper/thesis/code/errors_02.py in print_friday_message()\n"
">      13\n"
">      14 def print_friday_message():\n"
"> ---> 15     print_message(\"Friday\")\n"
">\n"
"> /Users/ghopper/thesis/code/errors_02.py in print_message(day)\n"
">       9         \"sunday\": \"Aw, the weekend is almost over.\"\n"
">      10     }\n"
"> ---> 11     print(messages[day])\n"
">      12\n"
">      13\n"
">\n"
"> KeyError: 'Friday'\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/16-coffee.md:1
# Front Matter
msgid "---\n"
"layout: break\n"
"title: \"Afternoon Coffee\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:1
# Front Matter
msgid "---\n"
"title: \"Conditionals\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can programs do different things for different data?\"\n"
"objectives:\n"
"- \"Correctly write programs that use if and else statements and simple Boolean expressions (without logical operators).\"\n"
"- \"Trace the execution of unnested conditionals and conditionals inside loops.\"\n"
"keypoints:\n"
"- \"Use `if` statements to control whether or not a block of code is executed.\"\n"
"- \"Conditionals are often used inside loops.\"\n"
"- \"Use `else` to execute a block of code when an `if` condition is *not* true.\"\n"
"- \"Use `elif` to specify additional tests.\"\n"
"- \"Conditions are tested once, in order.\"\n"
"- \"Create a table showing variables' values to trace a program's execution.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:18
# header
msgid "## Use `if` statements to control whether or not a block of code is executed."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:20
# unordered list
msgid "*   An `if` statement (more properly called a *conditional* statement)"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:21
msgid "    controls whether some block of code is executed or not.\n"
"*   Structure is similar to a `for` statement:\n"
"    *   First line opens with `if` and ends with a colon\n"
"    *   Body containing one or more statements is indented (usually by 4 spaces)"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:26
# code block
msgid "~~~\n"
"mass = 3.54\n"
"if mass > 3.0:\n"
"    print(mass, 'is large')\n"
"\n"
"mass = 2.07\n"
"if mass > 3.0:\n"
"    print (mass, 'is large')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:36
# code block
msgid "~~~\n"
"3.54 is large\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:41
# header
msgid "## Conditionals are often used inside loops."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:43
# unordered list
msgid "*   Not much point using a conditional when we know the value (as above)."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:44
# unordered list
msgid "*   But useful when we have a collection to process."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:46
# code block
msgid "~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 3.0:\n"
"        print(m, 'is large')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:53
# code block
msgid "~~~\n"
"3.54 is large\n"
"9.22 is large\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:59
# header
msgid "## Use `else` to execute a block of code when an `if` condition is *not* true."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:61
# unordered list
msgid "*   `else` can be used following an `if`."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:62
# unordered list
msgid "*   Allows us to specify an alternative to execute when the `if` *branch* isn't taken."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:64
# code block
msgid "~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 3.0:\n"
"        print(m, 'is large')\n"
"    else:\n"
"        print(m, 'is small')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:73
# code block
msgid "~~~\n"
"3.54 is large\n"
"2.07 is small\n"
"9.22 is large\n"
"1.86 is small\n"
"1.71 is small\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:82
# header
msgid "## Use `elif` to specify additional tests."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:84
# unordered list
msgid "*   May want to provide several alternative choices, each with its own test."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:85
# unordered list
msgid "*   Use `elif` (short for \"else if\") and a condition to specify these."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:86
# unordered list
msgid "*   Always associated with an `if`."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:87
# unordered list
msgid "*   Must come before the `else` (which is the \"catch all\")."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:89
# code block
msgid "~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 9.0:\n"
"        print(m, 'is HUGE')\n"
"    elif m > 3.0:\n"
"        print(m, 'is large')\n"
"    else:\n"
"        print(m, 'is small')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:100
# code block
msgid "~~~\n"
"3.54 is large\n"
"2.07 is small\n"
"9.22 is HUGE\n"
"1.86 is small\n"
"1.71 is small\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:109
# header
msgid "## Conditions are tested once, in order."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:111
# unordered list
msgid "*   Python steps through the branches of the conditional in order, testing each in turn."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:112
# unordered list
msgid "*   So ordering matters."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:114
# code block
msgid "~~~\n"
"grade = 85\n"
"if grade >= 70:\n"
"    print('grade is C')\n"
"elif grade >= 80:\n"
"    print('grade is B')\n"
"elif grade >= 90:\n"
"    print('grade is A')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:124
# code block
msgid "~~~\n"
"grade is C\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:129
# unordered list
msgid "*   Does *not* automatically go back and re-evaluate if values change."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:131
# code block
msgid "~~~\n"
"velocity = 10.0\n"
"if velocity > 20.0:\n"
"    print('moving too fast')\n"
"else:\n"
"    print('adjusting velocity')\n"
"    velocity = 50.0\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:140
# code block
msgid "~~~\n"
"adjusting velocity\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:145
# unordered list
msgid "*   Often use conditionals in a loop to \"evolve\" the values of variables."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:147
# code block
msgid "~~~\n"
"velocity = 10.0\n"
"for i in range(5): # execute the loop 5 times\n"
"    print(i, ':', velocity)\n"
"    if velocity > 20.0:\n"
"        print('moving too fast')\n"
"        velocity = velocity - 5.0\n"
"    else:\n"
"        print('moving too slow')\n"
"        velocity = velocity + 10.0\n"
"print('final velocity:', velocity)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:160
# code block
msgid "~~~\n"
"0 : 10.0\n"
"moving too slow\n"
"1 : 20.0\n"
"moving too slow\n"
"2 : 30.0\n"
"moving too fast\n"
"3 : 25.0\n"
"moving too fast\n"
"4 : 20.0\n"
"moving too slow\n"
"final velocity: 30.0\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:175
# header
msgid "## Create a table showing variables' values to trace a program's execution."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:177
# inline html
msgid "<table>\n"
"  <tr>\n"
"    <td><strong>i</strong></td>\n"
"    <td>0</td>\n"
"    <td>.</td>\n"
"    <td>1</td>\n"
"    <td>.</td>\n"
"    <td>2</td>\n"
"    <td>.</td>\n"
"    <td>3</td>\n"
"    <td>.</td>\n"
"    <td>4</td>\n"
"    <td>.</td>\n"
"  </tr>\n"
"  <tr>\n"
"    <td><strong>velocity</strong></td>\n"
"    <td>10.0</td>\n"
"    <td>20.0</td>\n"
"    <td>.</td>\n"
"    <td>30.0</td>\n"
"    <td>.</td>\n"
"    <td>25.0</td>\n"
"    <td>.</td>\n"
"    <td>20.0</td>\n"
"    <td>.</td>\n"
"    <td>30.0</td>\n"
"  </tr>\n"
"</table>"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:206
# unordered list
msgid "*   The program must have a `print` statement *outside* the body of the loop"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:207
msgid "    to show the final value of `velocity`,\n"
"    since its value is updated by the last iteration of the loop."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:210
# blockquote, which can be cascaded
msgid "> ## Compound Relations Using `and`, `or`, and Parentheses"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:211
msgid ">\n"
"> Often, you want some combination of things to be true.  You can combine\n"
"> relations within a conditional using `and` and `or`.  Continuing the example\n"
"> above, suppose you have\n"
">\n"
"> ~~~\n"
"> mass     = [ 3.54,  2.07,  9.22,  1.86,  1.71]\n"
"> velocity = [10.00, 20.00, 30.00, 25.00, 20.00]\n"
">\n"
"> i = 0\n"
"> for i in range(5):\n"
">     if mass[i] > 5 and velocity[i] > 20:\n"
">         print(\"Fast heavy object.  Duck!\")\n"
">     elif mass[i] > 2 and mass[i] <= 5 and velocity[i] <= 20:\n"
">         print(\"Normal traffic\")\n"
">     elif mass[i] <= 2 and velocity[i] <= 20:\n"
">         print(\"Slow light object.  Ignore it\")\n"
">     else:\n"
">         print(\"Whoa!  Something is up with the data.  Check it\")\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:232
msgid ">\n"
"> Just like with arithmetic, you can and should use parentheses whenever there\n"
"> is possible ambiguity.  A good general rule is to *always* use parentheses\n"
"> when mixing `and` and `or` in the same condition.  That is, instead of:\n"
">\n"
"> ~~~\n"
"> if mass[i] <= 2 or mass[i] >= 5 and velocity[i] > 20:\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:241
msgid ">\n"
"> write one of these:\n"
">\n"
"> ~~~\n"
"> if (mass[i] <= 2 or mass[i] >= 5) and velocity[i] > 20:\n"
"> if mass[i] <= 2 or (mass[i] >= 5 and velocity[i] > 20):\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:249
msgid ">\n"
"> so it is perfectly clear to a reader (and to Python) what you really mean."
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:254
msgid ">\n"
"> What does this program print?\n"
">\n"
"> ~~~\n"
"> pressure = 71.9\n"
"> if pressure > 50.0:\n"
">     pressure = 25.0\n"
"> elif pressure <= 50.0:\n"
">     pressure = 0.0\n"
"> print(pressure)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:266
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > 25.0\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:276
# blockquote, which can be cascaded
msgid "> ## Trimming Values"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:277
msgid ">\n"
"> Fill in the blanks so that this program creates a new list\n"
"> containing zeroes where the original list's values were negative\n"
"> and ones where the original list's values were positive.\n"
">\n"
"> ~~~\n"
"> original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]\n"
"> result = ____\n"
"> for value in original:\n"
">     if ____:\n"
">         result.append(0)\n"
">     else:\n"
">         ____\n"
"> print(result)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:293
msgid ">\n"
"> ~~~\n"
"> [0, 1, 1, 1, 0, 1]\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:301
# blockquote, which can be cascaded
msgid "> > original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:302
# blockquote, which can be cascaded
msgid "> > result = []"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:303
# blockquote, which can be cascaded
msgid "> > for value in original:"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:304
# blockquote, which can be cascaded
msgid "> >     if value<0.0:"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:305
# blockquote, which can be cascaded
msgid "> >         result.append(0)"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:307
# blockquote, which can be cascaded
msgid "> >         result.append(1)"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:314
# blockquote, which can be cascaded
msgid "> ## Processing Small Files"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:315
msgid ">\n"
"> Modify this program so that it only processes files with fewer than 50 records.\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     contents = pandas.read_csv(filename)\n"
">     ____:\n"
">         print(filename, len(contents))\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:330
# blockquote, which can be cascaded
msgid "> > import glob"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:332
# blockquote, which can be cascaded
msgid "> > for filename in glob.glob('data/*.csv'):"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:333
# blockquote, which can be cascaded
msgid "> >     contents = pandas.read_csv(filename)"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:334
# blockquote, which can be cascaded
msgid "> >     if len(contents)<50:"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:335
# blockquote, which can be cascaded
msgid "> >         print(filename, len(contents))"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:341
# blockquote, which can be cascaded
msgid "> ## Initializing"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:342
msgid ">\n"
"> Modify this program so that it finds the largest and smallest values in the list\n"
"> no matter what the range of values originally is.\n"
">\n"
"> ~~~\n"
"> values = [...some test data...]\n"
"> smallest, largest = None, None\n"
"> for v in values:\n"
">     if ____:\n"
">         smallest, largest = v, v\n"
">     ____:\n"
">         smallest = min(____, v)\n"
">         largest = max(____, v)\n"
"> print(smallest, largest)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:358
msgid ">\n"
"> What are the advantages and disadvantages of using this method\n"
"> to find the range of the data?\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > values = [-2,1,65,78,-54,-24,100]\n"
"> > smallest, largest = None, None\n"
"> > for v in values:\n"
"> >     if smallest==None and largest==None:\n"
"> >         smallest, largest = v, v\n"
"> >     else:\n"
"> >         smallest = min(smallest, v)\n"
"> >         largest = max(largest, v)\n"
"> > print(smallest, largest)\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:378
# blockquote, which can be cascaded
msgid "> ## Using Functions With Conditionals in Pandas"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:379
msgid ">\n"
"> Functions will often contain conditionals.  Here is a short example that\n"
"> will indicate which quartile the argument is in based on hand-coded values\n"
"> for the quartile cut points.\n"
">\n"
"> ~~~\n"
"> def calculate_life_quartile(exp):\n"
">     if exp < 58.41:\n"
">         # This observation is in the first quartile\n"
">         return 1\n"
">     elif exp >= 58.41 and exp < 67.05:\n"
">         # This observation is in the second quartile\n"
">        return 2\n"
">     elif exp >= 67.05 and exp < 71.70:\n"
">         # This observation is in the third quartile\n"
">        return 3\n"
">     elif exp >= 71.70:\n"
">         # This observation is in the fourth quartile\n"
">        return 4\n"
">     else:\n"
">         # This observation has bad data\n"
">        return None\n"
">\n"
"> calculate_life_quartile(62.5)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:405
msgid ">\n"
"> ~~~\n"
"> 2\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:410
msgid ">\n"
"> That function would typically be used within a `for` loop, but Pandas has\n"
"> a different, more efficient way of doing the same thing, and that is by\n"
"> *applying* a function to a dataframe or a portion of a dataframe.  Here\n"
"> is an example, using the definition above.\n"
">\n"
"> ~~~\n"
"> data = pd.read_csv('Americas-data.csv')\n"
"> data['life_qrtl'] = data['lifeExp'].apply(calculate_life_quartile)\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/17-conditionals.md:421
msgid ">\n"
"> There is a lot in that second line, so let's take it piece by piece.\n"
"> On the right side of the `=` we start with `data['lifeExp']`, which is the\n"
"> column in the dataframe called `data` labeled `lifExp`.  We use the\n"
"> `apply()` to do what it says, apply the `calculate_life_quartile` to the\n"
"> value of this column for every row in the dataframe."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:1
# Front Matter
msgid "---\n"
"title: \"Programming Style\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I make my programs more readable?\"\n"
"- \"How do most programmers format their code?\"\n"
"- \"How can programs check their own operation?\"\n"
"objectives:\n"
"- \"Provide sound justifications for basic rules of coding style.\"\n"
"- \"Refactor one-page programs to make them more readable and justify the changes.\"\n"
"- \"Use Python community coding standards (PEP-8).\"\n"
"keypoints:\n"
"- \"Follow standard Python style in your code.\"\n"
"- \"Use docstrings to provide online help.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:18
# header
msgid "## Coding style"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:20
msgid "Coding style helps us to understand the code better. It helps to maintain and change the code.\n"
"Python relies strongly on coding style, as we may notice by the indentation we apply to lines to define different blocks of code.\n"
"Python proposes a standard style through one of its first Python Enhancement Proposals (PEP), [PEP8](https://www.python.org/dev/peps/pep-0008), and highlight the importance of readability in the [Zen of Python](https://www.python.org/dev/peps/pep-0020)."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:24
msgid "We may highlight some points:\n"
"*   document your code\n"
"*   use clear, meaningful variable names\n"
"*   use white-space, *not* tabs, to indent lines"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:30
# header
msgid "## Follow standard Python style in your code."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:32
# unordered list
msgid "*   [PEP8](https://www.python.org/dev/peps/pep-0008):"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:33
msgid "    a style guide for Python that discusses topics such as how you should name variables,\n"
"    how you should use indentation in your code,\n"
"    how you should structure your `import` statements,\n"
"    etc.\n"
"    Adhering to PEP8 makes it easier for other Python developers to read and understand your code,\n"
"    and to understand what their contributions should look like.\n"
"    The [PEP8 application and Python library](https://pypi.python.org/pypi/pep8)\n"
"    can check your code for compliance with PEP8.\n"
"*   [Google style guide on Python](https://google.github.io/styleguide/pyguide.html) \n"
"    supports the use of PEP8 and extend the coding style to more specific structure of \n"
"    a Python code, which may be interesting also to follow."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:45
# header
msgid "## Use assertions to check for internal errors."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:47
msgid "Assertions are a simple, but powerful method for making sure that the context in which your code is executing is as you expect."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:49
# code block
msgid "~~~\n"
"def calc_bulk_density(mass, volume):\n"
"    '''Return dry bulk density = powder mass / powder volume.'''\n"
"    assert volume > 0\n"
"    return mass / volume\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:57
msgid "If the assertion is `False`, the Python interpreter raises an `AssertionError` runtime exception. The source code for the expression that failed will be displayed as part of the error message. To ignore assertions in your code run the interpreter with the '-O' (optimize) switch. Assertions should contain only simple checks and never change the state of the program. For example, an assertion should never contain an assignment."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:59
# header
msgid "## Use docstrings to provide online help."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:61
# unordered list
msgid "*   If the first thing in a function is a character string"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:62
msgid "    that is not assigned to a variable,\n"
"    Python attaches it to the function as the online help.\n"
"*   Called a *docstring* (short for \"documentation string\")."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:66
# code block
msgid "~~~\n"
"def average(values):\n"
"    \"Return average of values, or None if no values are supplied.\"\n"
"\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / average(values)\n"
"\n"
"help(average)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:77
# code block
msgid "~~~\n"
"Help on function average in module __main__:\n"
"\n"
"average(values)\n"
"    Return average of values, or None if no values are supplied.\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:85
# blockquote, which can be cascaded
msgid "> ## Multiline Strings"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:86
msgid ">\n"
"> Often use *multiline strings* for documentation.\n"
"> These start and end with three quote characters (either single or double)\n"
"> and end with three matching characters.\n"
">\n"
"> ~~~\n"
"> \"\"\"This string spans\n"
"> multiple lines.\n"
">\n"
"> Blank lines are allowed.\"\"\"\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:100
# blockquote, which can be cascaded
msgid "> ## What Will Be Shown?"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:101
msgid ">\n"
"> Highlight the lines in the code below that will be available as online help.\n"
"> Are there lines that should be made available, but won't be?\n"
"> Will any lines produce a syntax error or a runtime error?\n"
">\n"
"> ~~~\n"
"> \"Find maximum edit distance between multiple sequences.\"\n"
"> # This finds the maximum distance between all sequences.\n"
">\n"
"> def overall_max(sequences):\n"
">     '''Determine overall maximum edit distance.'''\n"
">\n"
">     highest = 0\n"
">     for left in sequences:\n"
">         for right in sequences:\n"
">             '''Avoid checking sequence against itself.'''\n"
">             if left != right:\n"
">                 this = edit_distance(left, right)\n"
">                 highest = max(highest, this)\n"
">\n"
">     # Report.\n"
">     return highest\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:127
# blockquote, which can be cascaded
msgid "> ## Document This"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:128
msgid ">\n"
"> Turn the comment on the following function into a docstring\n"
"> and check that `help` displays it properly.\n"
">\n"
"> ~~~\n"
"> def middle(a, b, c):\n"
">     # Return the middle value of three.\n"
">     # Assumes the values can actually be compared.\n"
">     values = [a, b, c]\n"
">     values.sort()\n"
">     return values[1]\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:144
# blockquote, which can be cascaded
msgid "> > def middle(a, b, c):"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:145
# blockquote, which can be cascaded
msgid "> >     '''Return the middle value of three."
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:146
# blockquote, which can be cascaded
msgid "> >     Assumes the values can actually be compared.'''"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:147
# blockquote, which can be cascaded
msgid "> >     values = [a, b, c]"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:148
# blockquote, which can be cascaded
msgid "> >     values.sort()"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:149
# blockquote, which can be cascaded
msgid "> >     return values[1]"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:155
# blockquote, which can be cascaded
msgid "> ## Clean Up This Code"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:156
msgid ">\n"
"> 1. Read this short program and try to predict what it does.\n"
"> 2. Run it: how accurate was your prediction?\n"
"> 3. Refactor the program to make it more readable.\n"
">    Remember to run it after each change to ensure its behavior hasn't changed.\n"
"> 4. Compare your rewrite with your neighbor's.\n"
">    What did you do the same?\n"
">    What did you do differently, and why?\n"
">\n"
"> ~~~\n"
"> n = 10\n"
"> s = 'et cetera'\n"
"> print(s)\n"
"> i = 0\n"
"> while i < n:\n"
">     # print('at', j)\n"
">     new = ''\n"
">     for j in range(len(s)):\n"
">         left = j-1\n"
">         right = (j+1)%len(s)\n"
">         if s[left]==s[right]: new += '-'\n"
">         else: new += '*'\n"
">     s=''.join(new)\n"
">     print(s)\n"
">     i += 1\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/18-style.md:183
msgid ">\n"
"> > ## Solution\n"
"> >\n"
"> > Here's one solution.\n"
"> >\n"
"> > ~~~\n"
"> > def string_machine(input_string, iterations):\n"
"> >     \"\"\"\n"
"> >     Takes input_string and generates a new string with -'s and *'s\n"
"> >     corresponding to characters that have identical adjacent characters\n"
"> >     or not, respectively.  Iterates through this procedure with the resultant\n"
"> >     strings for the supplied number of iterations.\n"
"> >     \"\"\"\n"
"> >     print(input_string)\n"
"> >     old = input_string\n"
"> >     for i in range(iterations):\n"
"> >         new = ''\n"
"> >         # iterate through characters in previous string\n"
"> >         for j in range(len(input_string)):\n"
"> >             left = j-1\n"
"> >             right = (j+1)%len(input_string) # ensure right index wraps around\n"
"> >             if old[left]==old[right]:\n"
"> >                 new += '-'\n"
"> >             else:\n"
"> >                 new += '*'\n"
"> >         print(new)\n"
"> >         # store new string as old\n"
"> >         old = new\n"
"> >\n"
"> > string_machine('et cetera', 10)\n"
"> > ~~~\n"
"> > {: .python}\n"
"> > \n"
"> > ~~~\n"
"> > et cetera\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > --*-*-*-*\n"
"> > **-------\n"
"> > ***-----*\n"
"> > --**---**\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:1
# Front Matter
msgid "---\n"
"title: \"Wrap-Up\"\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"What have we learned?\"\n"
"- \"What else is out there and where do I find it?\"\n"
"objectives:\n"
"- \"Name and locate scientific Python community sites for software, workshops, and help.\"\n"
"keypoints:\n"
"- \"Python supports a large community within and outwith research.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:14
msgid "Leslie Lamport once said, \"Writing is nature's way of showing you how sloppy your thinking is.\"\n"
"The same is true of programming:\n"
"many things that seem obvious when we're thinking about them\n"
"turn out to be anything but when we have to explain them precisely."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:19
# header
msgid "## Python supports a large community within and outwith research."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:21
# unordered list
msgid "*   The [Python 3 documentation](https://docs.python.org/3/) covers the core language"
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:22
msgid "    and the standard library."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:24
# unordered list
msgid "*   [PyCon](https://pycon.org/) is the largest annual conference for the Python community."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:26
# unordered list
msgid "*   [SciPy](https://scipy.org) is a rich collection of scientific utilities."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:27
msgid "    It is also the name of [a series of annual conferences](https://conference.scipy.org/)."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:29
# unordered list
msgid "*   [Jupyter](https://jupyter.org) is the home of the Jupyter Notebook."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:31
# unordered list
msgid "*   [Pandas](https://pandas.pydata.org) is the home of the Pandas data library."
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:33
# unordered list
msgid "*   Stack Overflow's [general Python section](http://stackoverflow.com/questions/tagged/python)"
msgstr ""

#: python-novice-gapminder/_episodes/19-wrap.md:34
msgid "    can be helpful,\n"
"    as can the sections on [NumPy](http://stackoverflow.com/questions/tagged/numpy),\n"
"    [SciPy](http://stackoverflow.com/questions/tagged/scipy),\n"
"    [Pandas](http://stackoverflow.com/questions/tagged/pandas),\n"
"    and other topics."
msgstr ""

#: python-novice-gapminder/_episodes/20-feedback.md:1
# Front Matter
msgid "---\n"
"title: \"Feedback\"\n"
"teaching: 0\n"
"exercises: 15\n"
"questions:\n"
"- \"How did the class go?\"\n"
"objectives:\n"
"- \"Gather feedback on the class\"\n"
"keypoints:\n"
"- \"We are constantly seeking to improve this course.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/20-feedback.md:13
msgid "Gather feedback from participants."
msgstr ""

#: python-novice-gapminder/_extras/about.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""

#: python-novice-gapminder/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr ""

#: python-novice-gapminder/_extras/design.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Lesson Design\"\n"
"permalink: /design/\n"
"---"
msgstr ""

#: python-novice-gapminder/_extras/design.md:7
# blockquote, which can be cascaded
msgid "> ## Help Wanted"
msgstr ""

#: python-novice-gapminder/_extras/design.md:8
# blockquote, which can be cascaded
msgid "> {:.no_toc}"
msgstr ""

#: python-novice-gapminder/_extras/design.md:9
msgid ">\n"
"> **We are filling in the exercises [below](#stage-3-learning-plan)\n"
"> in order to make the lesson plan more concrete.\n"
"> Contributions (both in the form of pull requests with filled-in exercises,\n"
"> and comments on specific exercises, ordering, and timings) are greatly appreciated.**"
msgstr ""

#: python-novice-gapminder/_extras/design.md:16
# header
msgid "## Process Used"
msgstr ""

#: python-novice-gapminder/_extras/design.md:18
# blockquote, which can be cascaded
msgid "> Michael Pollan's advice if he taught R or Python programming:"
msgstr ""

#: python-novice-gapminder/_extras/design.md:19
msgid ">\n"
"> 1. Write code.\n"
"> 2. Not too much.\n"
"> 3. Mostly plots.\n"
">\n"
"> — [Michael Koontz](https://twitter.com/_mikoontz/status/758021742078025728)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:25
# SC/DC Template label
msgid "{: .quotation}"
msgstr ""

#: python-novice-gapminder/_extras/design.md:27
msgid "This lesson was developed using a slimmed-down variant of the \"Understanding by Design\" process.\n"
"The main sections are:"
msgstr ""

#: python-novice-gapminder/_extras/design.md:30
# ordered list
msgid "1.  Assumptions about audience, time, etc."
msgstr ""

#: python-novice-gapminder/_extras/design.md:31
msgid "    (The current draft also includes some conclusions and decisions in this \n"
"    section - that should be refactored.)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:34
# ordered list
msgid "2.  Desired results:"
msgstr ""

#: python-novice-gapminder/_extras/design.md:35
msgid "    overall goals, summative assessments at half-day granularity, what learners \n"
"    will be able to do, what learners will know."
msgstr ""

#: python-novice-gapminder/_extras/design.md:38
# ordered list
msgid "3.  Learning plan:"
msgstr ""

#: python-novice-gapminder/_extras/design.md:39
msgid "    each episode has a heading that summarizes what will be covered,\n"
"    then estimates time that will be spent on teaching and on exercises,\n"
"    while the exercises are given as bullet points."
msgstr ""

#: python-novice-gapminder/_extras/design.md:43
# header
msgid "## Stage 1: Assumptions"
msgstr ""

#: python-novice-gapminder/_extras/design.md:45
# unordered list
msgid "*   Audience"
msgstr ""

#: python-novice-gapminder/_extras/design.md:46
# unordered list
msgid "    *   Graduate students in numerate disciplines from cosmology to archaeology"
msgstr ""

#: python-novice-gapminder/_extras/design.md:47
# unordered list
msgid "    *   Who have manipulated data in spreadsheets and with interactive tools like SAS"
msgstr ""

#: python-novice-gapminder/_extras/design.md:48
# unordered list
msgid "    *   But have *not* programmed beyond CPD (copy-paste-despair)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:49
# unordered list
msgid "*   Constraints"
msgstr ""

#: python-novice-gapminder/_extras/design.md:50
# unordered list
msgid "    *   One full day 09:00-16:30"
msgstr ""

#: python-novice-gapminder/_extras/design.md:51
# unordered list
msgid "        *   06:15 class time"
msgstr ""

#: python-novice-gapminder/_extras/design.md:52
# unordered list
msgid "        *   0:45 lunch"
msgstr ""

#: python-novice-gapminder/_extras/design.md:53
# unordered list
msgid "        *   0:30 total for two coffee breaks"
msgstr ""

#: python-novice-gapminder/_extras/design.md:54
# unordered list
msgid "    *   Learners use native installs on their own machines"
msgstr ""

#: python-novice-gapminder/_extras/design.md:55
# unordered list
msgid "        *   May use VMs or cloud resources at instructor's discretion"
msgstr ""

#: python-novice-gapminder/_extras/design.md:56
# unordered list
msgid "        *   But must keep native local install as an option"
msgstr ""

#: python-novice-gapminder/_extras/design.md:57
# unordered list
msgid "    *   No dependence on other Carpentry modules"
msgstr ""

#: python-novice-gapminder/_extras/design.md:58
# unordered list
msgid "        *   In particular, does not require knowledge of shell or version control"
msgstr ""

#: python-novice-gapminder/_extras/design.md:59
# unordered list
msgid "    *   Use the Jupyter Notebook"
msgstr ""

#: python-novice-gapminder/_extras/design.md:60
# unordered list
msgid "        *   Authentic tool used by many instructors"
msgstr ""

#: python-novice-gapminder/_extras/design.md:61
# unordered list
msgid "        *   There isn't really an alternative"
msgstr ""

#: python-novice-gapminder/_extras/design.md:62
# unordered list
msgid "        *   And means that even people who have seen a bit of Python before"
msgstr ""

#: python-novice-gapminder/_extras/design.md:63
msgid "            will probably learn something\n"
"*   Motivating Example\n"
"    *   Creating 2D plots suitable for inclusion in papers\n"
"    *   Appeals to almost everyone\n"
"    *   Makes lesson usable by both Carpentries\n"
"        *   And means that even people who have seen a bit of Python before \n"
"            will probably learn something\n"
"*   Data\n"
"    *   Use the gapminder data throughout\n"
"    *   But break into multiple files by continent\n"
"        *   To make display of output from examples tidier\n"
"            (e.g., use Australia/New Zealand, which is only two lines)\n"
"        *   And allow examples showing use of multiple data sets\n"
"*   Focus on Pandas instead of NumPy\n"
"    *   Makes lesson usable by both Data Carpentry and Software Carpentry\n"
"    *   Genuine novices are likely to want data analysis\n"
"    *   And people with some prior experience:\n"
"        *   will accept data analysis as an authentic task,\n"
"        *   and are unlikely to have encountered Pandas,\n"
"            so they'll still get something useful out of the lesson\n"
"*   Challenges will mostly *not* be \"write this code from scratch\"\n"
"    *   Want lots of short exercises that can reliably be finished in allotted time\n"
"    *   So use MCQs, fill-in-the-blanks, Parsons Problems, \"tweak this code\", etc."
msgstr ""

#: python-novice-gapminder/_extras/design.md:87
# header
msgid "## Stage 2: Desired Results"
msgstr ""

#: python-novice-gapminder/_extras/design.md:89
# header
msgid "### Questions"
msgstr ""

#: python-novice-gapminder/_extras/design.md:91
msgid "How do I..."
msgstr ""

#: python-novice-gapminder/_extras/design.md:93
# unordered list
msgid "*   ...read tabular data?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:94
# unordered list
msgid "*   ...plot a single vector of values?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:95
# unordered list
msgid "*   ...create a time series plot?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:96
# unordered list
msgid "*   ...create one plot for each of several data sets?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:97
# unordered list
msgid "*   ...get extra data from a single data set for plotting?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:98
# unordered list
msgid "*   ...write programs I can read and re-use in future?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:100
# header
msgid "### Skills"
msgstr ""

#: python-novice-gapminder/_extras/design.md:102
msgid "I can..."
msgstr ""

#: python-novice-gapminder/_extras/design.md:104
# unordered list
msgid "*   ...write short scripts using loops and conditionals."
msgstr ""

#: python-novice-gapminder/_extras/design.md:105
# unordered list
msgid "*   ...write functions with a fixed number of parameters that return a single result."
msgstr ""

#: python-novice-gapminder/_extras/design.md:106
# unordered list
msgid "*   ...import libraries using aliases and refer to those libraries' contents."
msgstr ""

#: python-novice-gapminder/_extras/design.md:107
# unordered list
msgid "*   ...do simple data extraction and formatting using Pandas."
msgstr ""

#: python-novice-gapminder/_extras/design.md:109
# header
msgid "### Concepts"
msgstr ""

#: python-novice-gapminder/_extras/design.md:111
msgid "I know..."
msgstr ""

#: python-novice-gapminder/_extras/design.md:113
# unordered list
msgid "*   ...that a program is a piece of lab equipment that implements an analysis"
msgstr ""

#: python-novice-gapminder/_extras/design.md:114
# unordered list
msgid "    *   Needs to be validated/calibrated before/during use"
msgstr ""

#: python-novice-gapminder/_extras/design.md:115
# unordered list
msgid "    *   Makes analysis reproducible, reviewable, shareable"
msgstr ""

#: python-novice-gapminder/_extras/design.md:116
# unordered list
msgid "*   ...that programs are written for people, not for computers"
msgstr ""

#: python-novice-gapminder/_extras/design.md:117
# unordered list
msgid "    *   Meaningful variable names"
msgstr ""

#: python-novice-gapminder/_extras/design.md:118
# unordered list
msgid "    *   Modularity for readability as well as re-use"
msgstr ""

#: python-novice-gapminder/_extras/design.md:119
# unordered list
msgid "    *   No duplication"
msgstr ""

#: python-novice-gapminder/_extras/design.md:120
# unordered list
msgid "    *   Document purpose and use"
msgstr ""

#: python-novice-gapminder/_extras/design.md:121
# unordered list
msgid "*   ...that there is no magic: the programs they use are no different "
msgstr ""

#: python-novice-gapminder/_extras/design.md:122
msgid "    in principle from those they build\n"
"*   ...how to assign values to variables\n"
"*   ...what integers, floats, strings, NumPy arrays, and Pandas dataframes are\n"
"*   ...how to trace the execution of a `for` loop\n"
"*   ...how to trace the execution of `if`/`else` statements\n"
"*   ...how to create and index lists\n"
"*   ...how to create and index NumPy arrays\n"
"*   ...how to create and index Pandas dataframes\n"
"*   ...how to create time series plots\n"
"*   ...the difference between defining and calling a function\n"
"*   ...where to find documentation on standard libraries\n"
"*   ...how to find out what else scientific Python offers"
msgstr ""

#: python-novice-gapminder/_extras/design.md:135
# header
msgid "## Stage 3: Learning Plan"
msgstr ""

#: python-novice-gapminder/_extras/design.md:137
# header
msgid "### Summative Assessment"
msgstr ""

#: python-novice-gapminder/_extras/design.md:139
# unordered list
msgid "*   Midpoint: create time-series plot for each file in a directory."
msgstr ""

#: python-novice-gapminder/_extras/design.md:140
# unordered list
msgid "*   Final: extract data from Pandas dataframe"
msgstr ""

#: python-novice-gapminder/_extras/design.md:141
msgid "    and create comparative multi-line time series plot."
msgstr ""

#: python-novice-gapminder/_extras/design.md:143
# header
msgid "### [Running and Quitting Interactively]({{page.root}}/01-run-quit/) (9:00)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:145
# unordered list
msgid "*   Teaching: 15 min (because setup issues)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:146
# unordered list
msgid "    *   Launch the Jupyter Notebook, create new notebooks, and exit the Notebook."
msgstr ""

#: python-novice-gapminder/_extras/design.md:147
# unordered list
msgid "    *   Create Markdown cells in a notebook."
msgstr ""

#: python-novice-gapminder/_extras/design.md:148
# unordered list
msgid "    *   Create and run Python cells in a notebook."
msgstr ""

#: python-novice-gapminder/_extras/design.md:149
# unordered list
msgid "*   Challenges: 0 min (accounted for in teaching time - no separate exercise)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:150
# unordered list
msgid "    *   Creating lists in Markdown"
msgstr ""

#: python-novice-gapminder/_extras/design.md:151
# unordered list
msgid "    *   What is displayed when several expressions are put in a single cell?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:152
# unordered list
msgid "    *   Change an existing cell from code to Markdown"
msgstr ""

#: python-novice-gapminder/_extras/design.md:153
# unordered list
msgid "    *   Rendering LaTeX-style equations"
msgstr ""

#: python-novice-gapminder/_extras/design.md:155
# header
msgid "### [Variables and Assignment]({{page.root}}/02-variables/) (9:15)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:157
#: python-novice-gapminder/_extras/design.md:169
#: python-novice-gapminder/_extras/design.md:204
#: python-novice-gapminder/_extras/design.md:216
#: python-novice-gapminder/_extras/design.md:259
#: python-novice-gapminder/_extras/design.md:273
#: python-novice-gapminder/_extras/design.md:297
#: python-novice-gapminder/_extras/design.md:311
#: python-novice-gapminder/_extras/design.md:323
# unordered list
msgid "*   Teaching: 10 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:158
# unordered list
msgid "    *   Write programs that assign scalar values to variables and perform calculations with those values."
msgstr ""

#: python-novice-gapminder/_extras/design.md:159
# unordered list
msgid "    *   Correctly trace value changes in programs that use scalar assignment."
msgstr ""

#: python-novice-gapminder/_extras/design.md:160
#: python-novice-gapminder/_extras/design.md:173
#: python-novice-gapminder/_extras/design.md:193
#: python-novice-gapminder/_extras/design.md:208
#: python-novice-gapminder/_extras/design.md:220
#: python-novice-gapminder/_extras/design.md:262
#: python-novice-gapminder/_extras/design.md:290
#: python-novice-gapminder/_extras/design.md:315
# unordered list
msgid "*   Challenges: 10 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:161
# unordered list
msgid "    *   Trace execution of code swapping two values using an intermediate variable."
msgstr ""

#: python-novice-gapminder/_extras/design.md:162
# unordered list
msgid "    *   Predict final values of variables after several assignments."
msgstr ""

#: python-novice-gapminder/_extras/design.md:163
# unordered list
msgid "    *   What happens if you try to index a number?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:164
# unordered list
msgid "    *   Which is a better variable name, `m`, `min`, or `minutes`?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:165
# unordered list
msgid "    *   What do the following slice expressions produce?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:167
# header
msgid "### [Data Types and Type Conversion]({{page.root}}/03-types-conversion/) (09:35)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:170
# unordered list
msgid "    *   Explain key differences between integers and floating point numbers."
msgstr ""

#: python-novice-gapminder/_extras/design.md:171
# unordered list
msgid "    *   Explain key differences between numbers and character strings."
msgstr ""

#: python-novice-gapminder/_extras/design.md:172
# unordered list
msgid "    *   Use built-in functions to convert between integers, floating point numbers, and strings."
msgstr ""

#: python-novice-gapminder/_extras/design.md:174
# unordered list
msgid "    *   What type of value is 3.4?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:175
# unordered list
msgid "    *   What type of value is 3.25 + 4?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:176
# unordered list
msgid "    *   What type of value would you use to represent:"
msgstr ""

#: python-novice-gapminder/_extras/design.md:177
# unordered list
msgid "        *   Number of days since the start of the year."
msgstr ""

#: python-novice-gapminder/_extras/design.md:178
# unordered list
msgid "        *   Time elapsed since the start of the year."
msgstr ""

#: python-novice-gapminder/_extras/design.md:179
# unordered list
msgid "        *   Etc."
msgstr ""

#: python-novice-gapminder/_extras/design.md:180
# unordered list
msgid "    *   How can you use `//` (integer division) and `%` (modulo)?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:181
# unordered list
msgid "    *   What does `int(\"3.4\")` do?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:182
# unordered list
msgid "    *   Given these float, int, and string values, which expressions will print a particular result?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:183
# unordered list
msgid "    *   What do you expect `1+2j + 3` to produce?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:185
# header
msgid "### [Built-in Functions and Help]({{page.root}}/04-built-in/) (09:55)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:187
#: python-novice-gapminder/_extras/design.md:228
#: python-novice-gapminder/_extras/design.md:247
#: python-novice-gapminder/_extras/design.md:335
# unordered list
msgid "*   Teaching: 15 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:188
# unordered list
msgid "    *   Explain the purpose of functions."
msgstr ""

#: python-novice-gapminder/_extras/design.md:189
# unordered list
msgid "    *   Correctly call built-in Python functions."
msgstr ""

#: python-novice-gapminder/_extras/design.md:190
# unordered list
msgid "    *   Correctly nest calls to built-in functions."
msgstr ""

#: python-novice-gapminder/_extras/design.md:191
# unordered list
msgid "    *   Use help to display documentation for built-in functions."
msgstr ""

#: python-novice-gapminder/_extras/design.md:192
# unordered list
msgid "    *   Correctly describe situations in which SyntaxError and NameError occur."
msgstr ""

#: python-novice-gapminder/_extras/design.md:194
# unordered list
msgid "    *   Explain the order of operations in the following complex expression."
msgstr ""

#: python-novice-gapminder/_extras/design.md:195
# unordered list
msgid "    *   What will each nested combination of `min` and `max` calls produce?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:196
# unordered list
msgid "    *   Why don't `max` and `min` return `None` when given no arguments?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:197
# unordered list
msgid "    *   Given what we have seen so far,"
msgstr ""

#: python-novice-gapminder/_extras/design.md:198
msgid "        what index expression will get the last character in a string?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:200
# header
msgid "### [Coffee]({{page.root}}/05-coffee/): 15 min (10:20)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:202
# header
msgid "### [Libraries]({{page.root}}/06-libraries/) (10:35)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:205
# unordered list
msgid "    *   Explain what software libraries are and why programmers create and use them."
msgstr ""

#: python-novice-gapminder/_extras/design.md:206
# unordered list
msgid "    *   Write programs that import and use libraries from Python's standard library."
msgstr ""

#: python-novice-gapminder/_extras/design.md:207
# unordered list
msgid "    *   Find and read documentation for standard libraries interactively (in the interpreter) and online."
msgstr ""

#: python-novice-gapminder/_extras/design.md:209
# unordered list
msgid "    *   Which function from the standard math library could you use to calculate a square root?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:210
# unordered list
msgid "    *   What library would you use to select a random value from data?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:211
# unordered list
msgid "    *   If `help(math)` produces an error, what have you forgotten to do?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:212
# unordered list
msgid "    *   Fill in the blanks in code below so that the import statement and program run."
msgstr ""

#: python-novice-gapminder/_extras/design.md:214
# header
msgid "### [Reading Tabular Data]({{page.root}}/07-reading-tabular/) (10:55)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:217
# unordered list
msgid "    *   Import the Pandas library."
msgstr ""

#: python-novice-gapminder/_extras/design.md:218
# unordered list
msgid "    *   Use Pandas to load a simple CSV data set."
msgstr ""

#: python-novice-gapminder/_extras/design.md:219
# unordered list
msgid "    *   Get some basic information about a Pandas DataFrame."
msgstr ""

#: python-novice-gapminder/_extras/design.md:221
# unordered list
msgid "    *   Read the data for the Americas and display its summary statistics."
msgstr ""

#: python-novice-gapminder/_extras/design.md:222
# unordered list
msgid "    *   What do `.head` and `.tail` do?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:223
# unordered list
msgid "    *   What string(s) should you pass to `read_csv` to read files from other directories?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:224
# unordered list
msgid "    *   How can you *write* CSV data?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:226
# header
msgid "### [DataFrames]({{page.root}}/08-data-frames/) (11:15)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:229
# unordered list
msgid "    *   Select individual values from a Pandas dataframe."
msgstr ""

#: python-novice-gapminder/_extras/design.md:230
# unordered list
msgid "    *   Select entire rows or entire columns from a dataframe."
msgstr ""

#: python-novice-gapminder/_extras/design.md:231
# unordered list
msgid "    *   Select a subset of both rows and columns from a dataframe in a single operation."
msgstr ""

#: python-novice-gapminder/_extras/design.md:232
# unordered list
msgid "    *   Select a subset of a dataframe by a single Boolean criterion."
msgstr ""

#: python-novice-gapminder/_extras/design.md:233
#: python-novice-gapminder/_extras/design.md:277
#: python-novice-gapminder/_extras/design.md:300
#: python-novice-gapminder/_extras/design.md:326
#: python-novice-gapminder/_extras/design.md:339
#: python-novice-gapminder/_extras/design.md:354
# unordered list
msgid "*   Challenges: 15 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:234
# unordered list
msgid "    *   Write an expression to find the Per Capita GDP of Serbia in 2007."
msgstr ""

#: python-novice-gapminder/_extras/design.md:235
# unordered list
msgid "    *   What rule governs what is (or isn't) included in numerical and named slices in Pandas?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:236
# unordered list
msgid "    *   What does each line in the following short program do?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:237
# unordered list
msgid "    *   What do `idxmin` and `idxmax` do?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:238
# unordered list
msgid "    *   Write expressions to get the GDP per capita for all countries in 1982,"
msgstr ""

#: python-novice-gapminder/_extras/design.md:239
msgid "        for all countries *after* 1985,\n"
"        etc.\n"
"    *   Given the way its borders have changed since 1900,\n"
"        what would you do if asked to create a table of GDP per capita for Poland\n"
"        for the Twentieth Century?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:245
# header
msgid "### [Plotting]({{page.root}}/09-plotting/) (11:45)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:248
# unordered list
msgid "    *   Create a time series plot showing a single data set."
msgstr ""

#: python-novice-gapminder/_extras/design.md:249
# unordered list
msgid "    *   Create a scatter plot showing relationship between two data sets."
msgstr ""

#: python-novice-gapminder/_extras/design.md:250
# unordered list
msgid "*   Exercise: 15 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:251
# unordered list
msgid "    *   Fill in the blanks to plot the minimum GDP per capita over time for European countries."
msgstr ""

#: python-novice-gapminder/_extras/design.md:252
# unordered list
msgid "    *   Modify the example to create a scatter plot of GDP per capita in Asian countries."
msgstr ""

#: python-novice-gapminder/_extras/design.md:253
# unordered list
msgid "    *   Explain what each argument to `plot` does in the following example."
msgstr ""

#: python-novice-gapminder/_extras/design.md:255
# header
msgid "### [Lunch]({{page.root}}/10-lunch/) (12:15): 45 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:257
# header
msgid "### [Lists]({{page.root}}/11-lists/) (13:00)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:260
# unordered list
msgid "    *   Explain why programs need collections of values."
msgstr ""

#: python-novice-gapminder/_extras/design.md:261
# unordered list
msgid "    *   Write programs that create flat lists, index them, slice them, and modify them through assignment and method calls."
msgstr ""

#: python-novice-gapminder/_extras/design.md:263
# unordered list
msgid "    *   Fill in the blanks so that the program produces the output shown."
msgstr ""

#: python-novice-gapminder/_extras/design.md:264
# unordered list
msgid "    *   How large are the following slices?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:265
# unordered list
msgid "    *   What do negative index expressions print?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:266
# unordered list
msgid "    *   What does a \"stride\" in a slice do?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:267
# unordered list
msgid "    *   How do slices treat out-of-range bounds?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:268
# unordered list
msgid "    *   What are the differences between sorting these two ways?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:269
# unordered list
msgid "    *   What is the difference between `new = old` and `new = old[:]`?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:271
# header
msgid "### [Loops]({{page.root}}/12-for-loops/) (13:20)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:274
# unordered list
msgid "    *   Explain what for loops are normally used for."
msgstr ""

#: python-novice-gapminder/_extras/design.md:275
# unordered list
msgid "    *   Trace the execution of a simple (unnested) loop and correctly state the values of variables in each iteration."
msgstr ""

#: python-novice-gapminder/_extras/design.md:276
# unordered list
msgid "    *   Write for loops that use the Accumulator pattern to aggregate values."
msgstr ""

#: python-novice-gapminder/_extras/design.md:278
# unordered list
msgid "    *   Is an indentation error a syntax error or a runtime error?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:279
# unordered list
msgid "    *   Trace which lines of this program are executed in what order."
msgstr ""

#: python-novice-gapminder/_extras/design.md:280
# unordered list
msgid "    *   Fill in the blanks in this program so that it reverses a string."
msgstr ""

#: python-novice-gapminder/_extras/design.md:281
# unordered list
msgid "    *   Fill in the blanks in this series of examples to get practice accumulating values."
msgstr ""

#: python-novice-gapminder/_extras/design.md:282
# unordered list
msgid "    *   Reorder and indent these lins to calculate the cumulative sum of the list values."
msgstr ""

#: python-novice-gapminder/_extras/design.md:284
# header
msgid "### [Looping Over Data Sets]({{page.root}}/13-looping-data-sets/) (13:45)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:286
# unordered list
msgid "*   Teaching: 5 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:287
# unordered list
msgid "    *   Be able to read and write globbing expressions that match sets of files."
msgstr ""

#: python-novice-gapminder/_extras/design.md:288
# unordered list
msgid "    *   Use glob to create lists of files."
msgstr ""

#: python-novice-gapminder/_extras/design.md:289
# unordered list
msgid "    *   Write for loops to perform operations on files given their names in a list."
msgstr ""

#: python-novice-gapminder/_extras/design.md:291
# unordered list
msgid "    *   Which filenames are *not* matched by this glob expression?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:292
# unordered list
msgid "    *   Modify this program so that it prints the number of records in the shortest file."
msgstr ""

#: python-novice-gapminder/_extras/design.md:293
# unordered list
msgid "    *   Write a program that reads and plots all of the regional data sets."
msgstr ""

#: python-novice-gapminder/_extras/design.md:295
# header
msgid "### [Writing Functions]({{page.root}}/14-writing-functions/) (14:00)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:298
# unordered list
msgid "    *   Explain and identify the difference between function definition and function call."
msgstr ""

#: python-novice-gapminder/_extras/design.md:299
# unordered list
msgid "    *   Write a function that takes a small, fixed number of arguments and produces a single result."
msgstr ""

#: python-novice-gapminder/_extras/design.md:301
# unordered list
msgid "    *   This code defines and calls a function - what does it print when run?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:302
# unordered list
msgid "    *   Explain why this short program prints things in the order it does."
msgstr ""

#: python-novice-gapminder/_extras/design.md:303
# unordered list
msgid "    *   Fill in the blanks to create a function that finds the minimum value in a data file."
msgstr ""

#: python-novice-gapminder/_extras/design.md:304
# unordered list
msgid "    *   Fill in the blanks to create a function that finds the first negative value in a list."
msgstr ""

#: python-novice-gapminder/_extras/design.md:305
msgid "        What does your function do if the list is empty?\n"
"    *   Why is it sometimes useful to pass arguments by naming the corresponding parameters?\n"
"    *   Fill in the blanks and turn this short piece of code into a function."
msgstr ""

#: python-novice-gapminder/_extras/design.md:309
# header
msgid "### [Variable Scope]({{page.root}}/15-scope/) (14:25)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:312
# unordered list
msgid "    *   Identify local and global variables."
msgstr ""

#: python-novice-gapminder/_extras/design.md:313
# unordered list
msgid "    *   Identify parameters as local variables."
msgstr ""

#: python-novice-gapminder/_extras/design.md:314
# unordered list
msgid "    *   Read a traceback and determine the file, function, and line number on which the error occurred."
msgstr ""

#: python-novice-gapminder/_extras/design.md:316
# unordered list
msgid "    *   Trace the changes to the values in this program,"
msgstr ""

#: python-novice-gapminder/_extras/design.md:317
msgid "        being careful to distinguish local from global values."
msgstr ""

#: python-novice-gapminder/_extras/design.md:319
# header
msgid "### [Coffee]({{page.root}}/16-coffee/) (14:45): 15 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:321
# header
msgid "### [Conditionals]({{page.root}}/17-conditionals/) (15:00)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:324
# unordered list
msgid "    *   Correctly write programs that use if and else statements and simple Boolean expressions (without logical operators)."
msgstr ""

#: python-novice-gapminder/_extras/design.md:325
# unordered list
msgid "    *   Trace the execution of unnested conditionals and conditionals inside loops."
msgstr ""

#: python-novice-gapminder/_extras/design.md:327
# unordered list
msgid "    *   Trace the execution of this conditional statement."
msgstr ""

#: python-novice-gapminder/_extras/design.md:328
# unordered list
msgid "    *   Fill in the blanks so that this function replaces negative values with zeroes."
msgstr ""

#: python-novice-gapminder/_extras/design.md:329
# unordered list
msgid "    *   Modify this program so that it only processes files with fewer than 50 records."
msgstr ""

#: python-novice-gapminder/_extras/design.md:330
# unordered list
msgid "    *   Modify this program so that it always finds the largest and smallest values in a list"
msgstr ""

#: python-novice-gapminder/_extras/design.md:331
msgid "        no matter what the list's values are."
msgstr ""

#: python-novice-gapminder/_extras/design.md:333
# header
msgid "### [Programming Style]({{page.root}}/18-style/) (15:25)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:336
# unordered list
msgid "    *   How can I make my programs more readable?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:337
# unordered list
msgid "    *   How do most programmers format their code?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:338
# unordered list
msgid "    *   How can programs check their own operation?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:340
# unordered list
msgid "    *   Which lines in this code will be available as online help?"
msgstr ""

#: python-novice-gapminder/_extras/design.md:341
# unordered list
msgid "    *   Turn the comments in this program into docstrings."
msgstr ""

#: python-novice-gapminder/_extras/design.md:342
# unordered list
msgid "    *   Rewrite this short program to be more readable."
msgstr ""

#: python-novice-gapminder/_extras/design.md:344
# header
msgid "### [Wrap-Up]({{page.root}}/19-wrap/) (15:55)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:346
# unordered list
msgid "*   Teaching: 20 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:347
# unordered list
msgid "    *   Name and locate scientific Python community sites for software, workshops, and help."
msgstr ""

#: python-novice-gapminder/_extras/design.md:348
# unordered list
msgid "*   Challenges: 0 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:349
# unordered list
msgid "    *   None."
msgstr ""

#: python-novice-gapminder/_extras/design.md:351
# header
msgid "### [Feedback]({{page.root}}/20-feedback/) (16:15)"
msgstr ""

#: python-novice-gapminder/_extras/design.md:353
# unordered list
msgid "*   Teaching: 0 min"
msgstr ""

#: python-novice-gapminder/_extras/design.md:355
# unordered list
msgid "    *   Collect feedback"
msgstr ""

#: python-novice-gapminder/_extras/design.md:357
# header
msgid "### Finish (16:30)"
msgstr ""

#: python-novice-gapminder/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Discussion\"\n"
"permalink: /discuss/\n"
"---"
msgstr ""

#: python-novice-gapminder/_extras/discuss.md:6
msgid "FIXME: general discussion and further reading for learners."
msgstr ""

#: python-novice-gapminder/_extras/exercises.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Further Exercises\"\n"
"permalink: /exercises/\n"
"---"
msgstr ""

#: python-novice-gapminder/_extras/exercises.md:6
msgid "FIXME: exercises that don't fit into the regular schedule."
msgstr ""

#: python-novice-gapminder/_extras/figures.md:1
#: python-novice-gapminder/bin/boilerplate/_extras/figures.md:1
# Front Matter
msgid "---\n"
"title: Figures\n"
"---"
msgstr ""

#: python-novice-gapminder/_extras/figures.md:4
#: python-novice-gapminder/bin/boilerplate/_extras/figures.md:4
# inline html
msgid "<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"          article_here.appendChild(htmlDocArticle.getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: python-novice-gapminder/_extras/figures.md:33
#: python-novice-gapminder/aio.md:29
#: python-novice-gapminder/bin/boilerplate/_extras/figures.md:33
#: python-novice-gapminder/bin/boilerplate/aio.md:29
msgid "{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""

#: python-novice-gapminder/_extras/guide.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Instructors' Guide\"\n"
"permalink: /guide/\n"
"---"
msgstr ""

#: python-novice-gapminder/_extras/guide.md:7
# header
msgid "## General Notes"
msgstr ""

#: python-novice-gapminder/_extras/guide.md:9
msgid "It's all right not to get through the whole lesson.\n"
":   This lesson is designed for people who have never programmed before,\n"
"    but any given class may include people with a wide range of prior experience.\n"
"    We have therefore included enough material to fill a full day if need be,\n"
"    but expect that many offerings will only get as far as the introduction to Pandas."
msgstr ""

#: python-novice-gapminder/_extras/guide.md:15
msgid "Don't tell people to Google things.\n"
":   One of the goals of this less is\n"
"    to help novices build a workable mental model of how programming works.\n"
"    Until they have that model,\n"
"    they will not know what to search for or how to recognize a helpful answer.\n"
"    Telling them to Google can also give the impression that we think their problem is trivial.\n"
"    (That said, if learners have done enough programming before to be past these issues,\n"
"    having them search for solutions online can help them solidify their understanding.)\n"
"    It's also worth quoting\n"
"    [Trevor King](https://github.com/swcarpentry/python-novice-\n"
"    gapminder/issues/22#issuecomment-182573516)'s\n"
"    comment about online search:\n"
"    \"If you find anything,\n"
"    other folks were confused enough to bother with a blog or Stack Overflow post,\n"
"    so it's probably not trivial.\""
msgstr ""

#: python-novice-gapminder/_includes/links.md:1
msgid "[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[ci]: http://communityin.org/\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html#reporting-guidelines\n"
"[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[concept-maps]: https://carpentries.github.io/instructor-training/05-memory/\n"
"[contrib-covenant]: https://contributor-covenant.org/\n"
"[contributing]: {{ site.github.repository_url }}/blob/gh-pages/CONTRIBUTING.md\n"
"[cran-checkpoint]: https://cran.r-project.org/package=checkpoint\n"
"[cran-knitr]: https://cran.r-project.org/package=knitr\n"
"[cran-stringr]: https://cran.r-project.org/package=stringr\n"
"[email]: mailto:team@carpentries.org\n"
"[github-importer]: https://import.github.com/\n"
"[importer]: https://github.com/new/import\n"
"[jekyll-collection]: https://jekyllrb.com/docs/collections/\n"
"[jekyll-install]: https://jekyllrb.com/docs/installation/\n"
"[jekyll-windows]: http://jekyll-windows.juthilo.com/\n"
"[jekyll]: https://jekyllrb.com/\n"
"[jupyter]: https://jupyter.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example/\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[morea]: https://morea-framework.github.io/\n"
"[numfocus]: https://numfocus.org/\n"
"[osi]: https://opensource.org\n"
"[pandoc]: https://pandoc.org/\n"
"[paper-now]: https://github.com/PeerJ/paper-now\n"
"[python-gapminder]: https://swcarpentry.github.io/python-novice-gapminder/\n"
"[pyyaml]: https://pypi.python.org/pypi/PyYAML\n"
"[r-markdown]: https://rmarkdown.rstudio.com/\n"
"[rstudio]: https://www.rstudio.com/\n"
"[ruby-install-guide]: https://www.ruby-lang.org/en/downloads/\n"
"[ruby-installer]: https://rubyinstaller.org/\n"
"[rubygems]: https://rubygems.org/pages/download/\n"
"[styles]: https://github.com/carpentries/styles/\n"
"[swc-releases]: https://github.com/swcarpentry/swc-releases\n"
"[workshop-repo]: {{ site.workshop_repo }}\n"
"[yaml]: http://yaml.org/"
msgstr ""

#: python-novice-gapminder/aio.md:1
#: python-novice-gapminder/bin/boilerplate/aio.md:1
# Front Matter
msgid "---\n"
"---"
msgstr ""

#: python-novice-gapminder/aio.md:3
#: python-novice-gapminder/bin/boilerplate/aio.md:3
# inline html
msgid "<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:12
msgid "By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CODE_OF_CONDUCT.md)."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:30
msgid "    you can [send us comments by email][email].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:49
msgid "    please work in <https://github.com/swcarpentry/FIXME>,\n"
"    which can be viewed at <https://swcarpentry.github.io/FIXME>."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:69
msgid "There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas, please see the 'Issues' tab for\n"
"a list of issues associated with this repository,\n"
"or you may also look at the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:104
msgid "If you choose to contribute via GitHub, you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"To manage changes, we follow [GitHub flow][github-flow].\n"
"Each lesson has two maintainers who review issues and pull requests or encourage others to do so.\n"
"The maintainers are community volunteers and have final say over what gets merged into the lesson.\n"
"To use the web interface for contributing to a lesson:"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:111
# ordered list
msgid "1.  Fork the originating repository to your GitHub profile."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:112
# ordered list
msgid "2.  Within your version of the forked repository, move to the `gh-pages` branch and"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:113
msgid "create a new branch for each significant change being made.\n"
"3.  Navigate to the file(s) you wish to change within the new branches and make revisions as required.\n"
"4.  Commit all changed files within the appropriate branches.\n"
"5.  Create individual pull requests from each of your changed branches\n"
"to the `gh-pages` branch within the originating repository.\n"
"6.  If you receive feedback, make changes using your issue-specific branches of the forked\n"
"repository and the pull requests will update automatically.\n"
"7.  Repeat as needed until all feedback has been addressed."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:122
msgid "When starting work, please make sure your clone of the originating `gh-pages` branch is up-to-date\n"
"before creating your own revision-specific branch(es) from there.\n"
"Additionally, please only work from your newly-created branch(es) and *not*\n"
"your clone of the originating `gh-pages` branch.\n"
"Lastly, published copies of all the lessons are available in the `gh-pages` branch of the originating\n"
"repository for reference while revising."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:131
msgid "General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][email]."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:136
msgid "[email]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://guides.github.com/features/issues/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:1
# header
msgid "# FIXME Lesson title"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:3
msgid "[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/)"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:5
#: python-novice-gapminder/bin/boilerplate/_episodes/01-introduction.md:12
#: python-novice-gapminder/bin/boilerplate/_extras/discuss.md:4
#: python-novice-gapminder/bin/boilerplate/_extras/guide.md:4
#: python-novice-gapminder/bin/boilerplate/reference.md:7
#: python-novice-gapminder/bin/boilerplate/setup.md:4
msgid "FIXME"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:7
# header
msgid "## Contributing"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:9
msgid "We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any\n"
"questions, concerns, or experience any difficulties along the way."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:12
msgid "We'd like to ask you to familiarize yourself with our [Contribution Guide](CONTRIBUTING.md) and have a look at\n"
"the [more detailed guidelines][lesson-example] on proper formatting, ways to render the lesson locally, and even\n"
"how to write new episodes."
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:16
# header
msgid "## Maintainer(s)"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:18
# unordered list
msgid "* FIXME"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:20
# header
msgid "## Authors"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:22
msgid "A list of contributors to the lesson can be found in [AUTHORS](AUTHORS)"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:24
# header
msgid "## Citation"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:26
msgid "To cite this lesson, please consult with [CITATION](CITATION)"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/README.md:28
msgid "[lesson-example]: https://carpentries.github.io/lesson-example"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/_episodes/01-introduction.md:1
# Front Matter
msgid "---\n"
"title: \"Introduction\"\n"
"teaching: 0\n"
"exercises: 0\n"
"questions:\n"
"- \"Key question (FIXME)\"\n"
"objectives:\n"
"- \"First objective. (FIXME)\"\n"
"keypoints:\n"
"- \"First key point. (FIXME)\"\n"
"---"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/_extras/about.md:1
# Front Matter
msgid "---\n"
"title: About\n"
"---"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/_extras/about.md:4
msgid "{% include carpentries.html %}\n"
"{% include links.md %}"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"title: Discussion\n"
"---"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/_extras/guide.md:1
# Front Matter
msgid "---\n"
"title: \"Instructor Notes\"\n"
"---"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/index.md:1
# Front Matter
msgid "---\n"
"layout: lesson\n"
"root: .  # Is the only page that don't follow the partner /:path/index.html\n"
"permalink: index.html  # Is the only page that don't follow the partner /:path/index.html\n"
"---"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/index.md:6
msgid "FIXME: home page introduction"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/index.md:8
#: python-novice-gapminder/index.md:25
# blockquote, which can be cascaded
msgid "> ## Prerequisites"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/index.md:9
msgid ">\n"
"> FIXME"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/index.md:11
#: python-novice-gapminder/index.md:39
# SC/DC Template label
msgid "{: .prereq}"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/reference.md:1
# Front Matter
msgid "---\n"
"layout: reference\n"
"---"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/reference.md:5
#: python-novice-gapminder/reference.md:9
# header
msgid "## Glossary"
msgstr ""

#: python-novice-gapminder/bin/boilerplate/setup.md:1
# Front Matter
msgid "---\n"
"title: Setup\n"
"---"
msgstr ""

#: python-novice-gapminder/index.md:1
# Front Matter
msgid "---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""

#: python-novice-gapminder/index.md:6
msgid "This lesson is an introduction to programming in Python\n"
"for people with little or no previous programming experience.\n"
"It uses plotting as its motivating example,\n"
"and is designed to be used in both [Data Carpentry]({{ site.dc_site }})\n"
"and [Software Carpentry]({{ site.swc_site }}) workshops.\n"
"This lesson references the Jupyter Notebook,\n"
"but can be taught using a regular Python interpreter as well.\n"
"Please note that this lesson uses Python 3 rather than Python 2."
msgstr ""

#: python-novice-gapminder/index.md:15
# blockquote, which can be cascaded
msgid "> ## Under Design"
msgstr ""

#: python-novice-gapminder/index.md:16
msgid ">\n"
"> **This lesson is currently in its early design stage;\n"
"> please check [the design notes]({{ page.root }}/design/)\n"
"> to see what we have so far.\n"
"> Contributions are very welcome:\n"
"> we would be particularly grateful for exercises\n"
"> and for commentary on the ones already there.**"
msgstr ""

#: python-novice-gapminder/index.md:26
msgid ">\n"
"> 1.  Learners need to understand what files and directories are,\n"
">     what a working directory is,\n"
">     and how to start a Python interpreter.\n"
">\n"
"> 2. Learners must install Python before the class starts.\n"
">\n"
"> 3. Learners must get the gapminder data before class starts:\n"
">    please download and unzip the file \n"
">    [python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
">\n"
">    Please see [the setup instructions]({{ page.root }}/setup/)\n"
">    for details."
msgstr ""

#: python-novice-gapminder/reference.md:1
# Front Matter
msgid "---\n"
"layout: reference\n"
"permalink: /reference/\n"
"root: ..\n"
"---"
msgstr ""

#: python-novice-gapminder/reference.md:7
msgid "FIXME: more reference material."
msgstr ""

#: python-novice-gapminder/reference.md:11
msgid "FIXME: glossary."
msgstr ""

#: python-novice-gapminder/setup.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Setup\"\n"
"permalink: /setup/\n"
"root: ..\n"
"---"
msgstr ""

#: python-novice-gapminder/setup.md:8
# header
msgid "## Installing Python Using Anaconda"
msgstr ""

#: python-novice-gapminder/setup.md:10
msgid "[Python][python] is a popular language for scientific computing, and great for\n"
"general-purpose programming as well. Installing all of its scientific packages\n"
"individually can be a bit difficult, however, so we recommend the all-in-one\n"
"installer [Anaconda][anaconda]."
msgstr ""

#: python-novice-gapminder/setup.md:15
msgid "Regardless of how you choose to install it, please make sure you install Python\n"
"version 3.x (e.g., 3.4 is fine). Also, please set up your python environment at \n"
"least a day in advance of the workshop.  If you encounter problems with the \n"
"installation procedure, ask your workshop organizers via e-mail for assistance so\n"
"you are ready to go as soon as the workshop begins."
msgstr ""

#: python-novice-gapminder/setup.md:21
# header
msgid "### Windows - [Video tutorial][video-windows]"
msgstr ""

#: python-novice-gapminder/setup.md:23
# ordered list
msgid "1. Open [https://www.anaconda.com/download][continuum-windows]"
msgstr ""

#: python-novice-gapminder/setup.md:24
#: python-novice-gapminder/setup.md:35
msgid "   with your web browser."
msgstr ""

#: python-novice-gapminder/setup.md:26
# ordered list
msgid "2. Download the Python 3 installer for Windows."
msgstr ""

#: python-novice-gapminder/setup.md:28
# ordered list
msgid "3. Double-click the executable and install Python 3 using _MOST_ of the"
msgstr ""

#: python-novice-gapminder/setup.md:29
msgid "   default settings. The only exception is to check the \n"
"   **Make Anaconda the default Python** option."
msgstr ""

#: python-novice-gapminder/setup.md:32
# header
msgid "### Mac OS X - [Video tutorial][video-mac]"
msgstr ""

#: python-novice-gapminder/setup.md:34
# ordered list
msgid "1. Open [https://www.anaconda.com/download][continuum-mac]"
msgstr ""

#: python-novice-gapminder/setup.md:37
# ordered list
msgid "2. Download the Python 3 installer for OS X."
msgstr ""

#: python-novice-gapminder/setup.md:39
# ordered list
msgid "3. Install Python 3 using all of the defaults for installation."
msgstr ""

#: python-novice-gapminder/setup.md:41
# header
msgid "### Linux"
msgstr ""

#: python-novice-gapminder/setup.md:43
msgid "Note that the following installation steps require you to work from the shell. \n"
"If you run into any difficulties, please request help before the workshop begins."
msgstr ""

#: python-novice-gapminder/setup.md:46
# ordered list
msgid "1.  Open [https://www.anaconda.com/download][continuum-linux] with your web browser."
msgstr ""

#: python-novice-gapminder/setup.md:48
# ordered list
msgid "2.  Download the Python 3 installer for Linux."
msgstr ""

#: python-novice-gapminder/setup.md:50
# ordered list
msgid "3.  Install Python 3 using all of the defaults for installation."
msgstr ""

#: python-novice-gapminder/setup.md:52
msgid "    a.  Open a terminal window."
msgstr ""

#: python-novice-gapminder/setup.md:54
msgid "    b.  Navigate to the folder where you downloaded the installer"
msgstr ""

#: python-novice-gapminder/setup.md:56
msgid "    c.  Type"
msgstr ""

#: python-novice-gapminder/setup.md:58
msgid "    ~~~\n"
"    $ bash Anaconda3-\n"
"    ~~~"
msgstr ""

#: python-novice-gapminder/setup.md:61
# SC/DC Template label
msgid "    {: .bash}"
msgstr ""

#: python-novice-gapminder/setup.md:63
msgid "    and press tab.  The name of the file you just downloaded should appear."
msgstr ""

#: python-novice-gapminder/setup.md:65
msgid "    d.  Press enter."
msgstr ""

#: python-novice-gapminder/setup.md:67
msgid "    e.  Follow the text-only prompts.  When the license agreement appears (a colon\n"
"        will be present at the bottom of the screen) hold the down arrow until the \n"
"        bottom of the text. Type `yes` and press enter to approve the license. Press \n"
"        enter again to approve the default location for the files. Type `yes` and \n"
"        press enter to prepend Anaconda to your `PATH` (this makes the Anaconda \n"
"        distribution the default Python)."
msgstr ""

#: python-novice-gapminder/setup.md:74
# header
msgid "## Getting the Data"
msgstr ""

#: python-novice-gapminder/setup.md:76
msgid "The data we will be using is taken from the [gapminder][gapminder] dataset.\n"
"To obtain it, download and unzip the file \n"
"[python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
"In order to follow the presented material, you should launch a Jupyter \n"
"notebook in the root directory (see [Starting Python](#Starting-Python))."
msgstr ""

#: python-novice-gapminder/setup.md:82
# header
msgid "## Starting Python"
msgstr ""

#: python-novice-gapminder/setup.md:84
msgid "We will teach Python using the [Jupyter notebook][jupyter], a \n"
"programming environment that runs in a web browser. Jupyter requires a reasonably \n"
"up-to-date browser, preferably a current version of Chrome, Safari, or Firefox \n"
"(note that Internet Explorer version 9 and below are *not* supported). If you \n"
"installed Python using Anaconda, Jupyter should already be on your system. If \n"
"you did not use Anaconda, use the Python package manager pip\n"
"(see the [Jupyter website][jupyter-install] for details.)"
msgstr ""

#: python-novice-gapminder/setup.md:92
msgid "To start the notebook, open a terminal or git bash and type the command:"
msgstr ""

#: python-novice-gapminder/setup.md:94
# code block
msgid "~~~\n"
"$ jupyter notebook\n"
"~~~"
msgstr ""

#: python-novice-gapminder/setup.md:97
#: python-novice-gapminder/setup.md:105
# SC/DC Template label
msgid "{: .bash}"
msgstr ""

#: python-novice-gapminder/setup.md:99
msgid "To start the Python interpreter without the notebook, open a terminal \n"
"or Git Bash and type the command:"
msgstr ""

#: python-novice-gapminder/setup.md:102
# code block
msgid "~~~\n"
"$ python\n"
"~~~"
msgstr ""

#: python-novice-gapminder/setup.md:107
msgid "[anaconda]: https://www.anaconda.com/\n"
"[continuum-mac]: https://www.anaconda.com/download/#macos\n"
"[continuum-linux]: https://www.anaconda.com/download/#linux\n"
"[continuum-windows]: https://www.anaconda.com/download/#windows\n"
"[gapminder]: http://gapminder.org\n"
"[jupyter]: http://jupyter.org/\n"
"[jupyter-install]: http://jupyter.readthedocs.io/en/latest/install.html#optional-for-experienced-python-developers-installing-jupyter-with-pip\n"
"[python]: https://python.org\n"
"[video-mac]: https://www.youtube.com/watch?v=TcSAln46u9U\n"
"[video-windows]: https://www.youtube.com/watch?v=xxQ0mzZ8UvA"
msgstr ""

