# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2018-09-16 01:25:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: sql-novice-survey/CODE_OF_CONDUCT.md:1
#: sql-novice-survey/bin/boilerplate/CODE_OF_CONDUCT.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"---"
msgstr ""

#: sql-novice-survey/CODE_OF_CONDUCT.md:5
#: sql-novice-survey/bin/boilerplate/CODE_OF_CONDUCT.md:5
msgid "As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""

#: sql-novice-survey/CODE_OF_CONDUCT.md:8
#: sql-novice-survey/bin/boilerplate/CODE_OF_CONDUCT.md:8
msgid "Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""

#: sql-novice-survey/CODE_OF_CONDUCT.md:11
#: sql-novice-survey/bin/boilerplate/CODE_OF_CONDUCT.md:11
#: sql-novice-survey/bin/boilerplate/_episodes/01-introduction.md:14
#: sql-novice-survey/bin/boilerplate/_extras/discuss.md:6
#: sql-novice-survey/bin/boilerplate/_extras/figures.md:40
#: sql-novice-survey/bin/boilerplate/_extras/guide.md:6
#: sql-novice-survey/bin/boilerplate/index.md:13
#: sql-novice-survey/bin/boilerplate/reference.md:9
#: sql-novice-survey/bin/boilerplate/setup.md:7
msgid "{% include links.md %}"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:1
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:1
# header
msgid "# Contributing"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:3
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:3
msgid "[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:10
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:10
# header
msgid "## Contributor Agreement"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:12
msgid "By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CONDUCT.md)."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:20
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:20
# header
msgid "## How to Contribute"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:22
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:22
msgid "The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:29
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:29
# ordered list
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:30
msgid "    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:34
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:34
# ordered list
msgid "2.  If you have a [GitHub][github] account,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:35
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:35
msgid "    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue][issues].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:41
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:41
# ordered list
msgid "3.  If you are comfortable with Git,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:42
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:42
msgid "    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:46
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:46
# header
msgid "## Where to Contribute"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:48
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:48
# ordered list
msgid "1.  If you wish to change this lesson,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:49
msgid "    please work in <https://github.com/swcarpentry/sql-novice-survey>,\n"
"    which can be viewed at <https://swcarpentry.github.io/sql-novice-survey>."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:52
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:52
# ordered list
msgid "2.  If you wish to change the example lesson,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:53
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:53
msgid "    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:57
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:57
# ordered list
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:58
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:58
msgid "    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-template>\n"
"    provide more background on our design choices."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:63
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:63
# ordered list
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:64
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:64
msgid "    or HTML boilerplate for lessons or workshops stored in `_includes` or `_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:67
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:67
# header
msgid "## What to Contribute"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:69
msgid "There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:79
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:79
msgid "Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:86
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:86
# header
msgid "## What *Not* to Contribute"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:88
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:88
msgid "Our lessons already contain more material than we can cover in a typical workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:97
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:97
msgid "We are also not looking for exercises or other material that only run on one platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:102
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:102
# header
msgid "## Using GitHub"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:104
msgid "If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:109
# ordered list
msgid "1.  The published copy of the lesson is in the `gh-pages` branch of the repository"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:110
msgid "    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your `gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:117
# ordered list
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:118
msgid "    1.  Create a new branch in your desktop copy of this repository for each significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository][repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:126
msgid "Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:131
#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:129
# header
msgid "## Other Resources"
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:133
msgid "General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""

#: sql-novice-survey/CONTRIBUTING.md:138
msgid "[contact]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[example-site]: https://carpentries.github.io/lesson-example/\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://github.com/swcarpentry/sql-novice-survey/issues/\n"
"[repo]: https://github.com/swcarpentry/sql-novice-survey/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"
msgstr ""

#: sql-novice-survey/LICENSE.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""

#: sql-novice-survey/LICENSE.md:6
# header
msgid "## Instructional Material"
msgstr ""

#: sql-novice-survey/LICENSE.md:8
msgid "All Software Carpentry and Data Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""

#: sql-novice-survey/LICENSE.md:14
msgid "You are free:"
msgstr ""

#: sql-novice-survey/LICENSE.md:16
# unordered list
msgid "* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""

#: sql-novice-survey/LICENSE.md:17
# unordered list
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""

#: sql-novice-survey/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr ""

#: sql-novice-survey/LICENSE.md:21
msgid "The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""

#: sql-novice-survey/LICENSE.md:24
msgid "Under the following terms:"
msgstr ""

#: sql-novice-survey/LICENSE.md:26
# unordered list
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""

#: sql-novice-survey/LICENSE.md:27
msgid "  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""

#: sql-novice-survey/LICENSE.md:34
msgid "**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""

#: sql-novice-survey/LICENSE.md:38
msgid "Notices:"
msgstr ""

#: sql-novice-survey/LICENSE.md:40
# unordered list
msgid "* You do not have to comply with the license for elements of the"
msgstr ""

#: sql-novice-survey/LICENSE.md:41
msgid "  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""

#: sql-novice-survey/LICENSE.md:48
# header
msgid "## Software"
msgstr ""

#: sql-novice-survey/LICENSE.md:50
msgid "Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""

#: sql-novice-survey/LICENSE.md:55
msgid "Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""

#: sql-novice-survey/LICENSE.md:63
msgid "The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""

#: sql-novice-survey/LICENSE.md:66
msgid "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""

#: sql-novice-survey/LICENSE.md:74
# header
msgid "## Trademark"
msgstr ""

#: sql-novice-survey/LICENSE.md:76
msgid "\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""

#: sql-novice-survey/LICENSE.md:79
msgid "[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""

#: sql-novice-survey/README.md:1
msgid "[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--sql-E01563.svg)](https://swcarpentry.slack.com/messages/C9X3YNVNY) "
msgstr ""

#: sql-novice-survey/README.md:5
msgid "sql-novice-survey\n"
"================="
msgstr ""

#: sql-novice-survey/README.md:8
msgid "An introduction to databases and SQL using Antarctic survey data.\n"
"Please see <https://swcarpentry.github.io/sql-novice-survey/> for a rendered version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""

#: sql-novice-survey/README.md:14
msgid "Maintainer(s):"
msgstr ""

#: sql-novice-survey/README.md:16
# unordered list
msgid "* [Rémi Rampin](https://software-carpentry.org/team/#rampin_rmi)"
msgstr ""

#: sql-novice-survey/README.md:17
# unordered list
msgid "* [Henry Senyondo](https://software-carpentry.org/team/#senyondo_henry)"
msgstr ""

#: sql-novice-survey/README.md:18
# unordered list
msgid "* Jane Wyngaard"
msgstr ""

#: sql-novice-survey/README.md:20
msgid "[lesson-example]: https://carpentries.github.io/lesson-example/"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:1
# Front Matter
msgid "---\n"
"title: \"Selecting Data\"\n"
"teaching: 10\n"
"exercises: 5\n"
"questions:\n"
"- \"How can I get data from a database?\"\n"
"objectives:\n"
"- \"Explain the difference between a table, a record, and a field.\"\n"
"- \"Explain the difference between a database and a database manager.\"\n"
"- \"Write a query to select all values for specific fields from a single table.\"\n"
"keypoints:\n"
"- \"A relational database stores information in tables, each of which has a fixed set of columns and a variable number of records.\"\n"
"- \"A database manager is a program that manipulates information stored in a database.\"\n"
"- \"We write queries in a specialized language called SQL to extract information from databases.\"\n"
"- \"Use SELECT... FROM... to get values from a database table.\"\n"
"- \"SQL is case-insensitive (but data is case-sensitive).\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:18
msgid "A [relational database]({{ site.github.url }}/reference.html#relational-database)\n"
"is a way to store and manipulate information.\n"
"Databases are arranged as [tables]({{ site.github.url }}/reference.html#table).\n"
"Each table has columns (also known as [fields]({{ site.github.url }}/reference.html#fields)) that describe the data,\n"
"and rows (also known as [records]({{ site.github.url }}/reference.html#record)) which contain the data."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:24
msgid "When we are using a spreadsheet,\n"
"we put formulas into cells to calculate new values based on old ones.\n"
"When we are using a database,\n"
"we send commands\n"
"(usually called [queries]({{ site.github.url }}/reference.html#query))\n"
"to a [database manager]({{ site.github.url }}/reference.html#database-manager):\n"
"a program that manipulates the database for us.\n"
"The database manager does whatever lookups and calculations the query specifies,\n"
"returning the results in a tabular form\n"
"that we can then use as a starting point for further queries."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:35
# blockquote, which can be cascaded
msgid "> ## Changing Database Managers"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:36
msgid ">\n"
"> Every database manager --- Oracle,\n"
"> IBM DB2, PostgreSQL, MySQL, Microsoft Access, and SQLite --- stores\n"
"> data in a different way,\n"
"> so a database created with one cannot be used directly by another.\n"
"> However,\n"
"> every database manager can import and export data in a variety of formats, like .csv,\n"
"> so it *is* possible to move information from one to another."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:44
#: sql-novice-survey/_episodes/01-select.md:70
#: sql-novice-survey/_episodes/01-select.md:204
#: sql-novice-survey/_episodes/02-sort-dup.md:145
#: sql-novice-survey/_episodes/03-filter.md:94
#: sql-novice-survey/_episodes/03-filter.md:239
#: sql-novice-survey/_episodes/09-create.md:177
# SC/DC Template label
msgid "{: .callout}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:46
msgid "Queries are written in a language called [SQL]({{ site.github.url }}/reference.html#sql),\n"
"which stands for \"Structured Query Language\".\n"
"SQL provides hundreds of different ways to analyze and recombine data.\n"
"We will only look at a handful of queries,\n"
"but that handful accounts for most of what scientists do."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:52
# blockquote, which can be cascaded
msgid "> ## Getting Into and Out Of SQLite"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:53
msgid ">\n"
"> In order to use the SQLite commands *interactively*, we need to\n"
"> enter into the SQLite console.  So, open up a terminal, and run\n"
">\n"
"> ~~~\n"
"> $ cd /path/to/survey/data/\n"
"> $ sqlite3 survey.db\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:61
#: sql-novice-survey/_episodes/01-select.md:156
#: sql-novice-survey/_episodes/01-select.md:167
# SC/DC Template label
msgid "> {: .bash}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:62
msgid ">\n"
"> The SQLite command is `sqlite3` and you are telling SQLite to open up\n"
"> the `survey.db`.  You need to specify the `.db` file otherwise, SQLite\n"
"> will open up a temporary, empty database.\n"
">\n"
"> To get out of SQLite, type out `.exit` or `.quit`.  For some\n"
"> terminals, `Ctrl-D` can also work.  If you forget any SQLite `.` (dot)\n"
"> command, type `.help`."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:72
msgid "Before we get into using SQLite to select the data, let's take a look at the tables of the database we will use in our examples:"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:74
msgid "<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:77
msgid "**Person**: people who took readings."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:79
msgid "|id      |personal |family\n"
"|--------|---------|----------\n"
"|dyer    |William  |Dyer\n"
"|pb      |Frank    |Pabodie\n"
"|lake    |Anderson |Lake\n"
"|roe     |Valentina|Roerich\n"
"|danforth|Frank    |Danforth"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:87
msgid "**Site**: locations where readings were taken."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:89
msgid "|name |lat   |long   |\n"
"|-----|------|-------|\n"
"|DR-1 |-49.85|-128.57|\n"
"|DR-3 |-47.15|-126.72|\n"
"|MSK-4|-48.87|-123.4 |"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:95
msgid "**Visited**: when readings were taken at specific sites."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:97
msgid "|id   |site |dated     |\n"
"|-----|-----|----------|\n"
"|619  |DR-1 |1927-02-08|\n"
"|622  |DR-1 |1927-02-10|\n"
"|734  |DR-3 |1930-01-07|\n"
"|735  |DR-3 |1930-01-12|\n"
"|751  |DR-3 |1930-02-26|\n"
"|752  |DR-3 |-null-    |\n"
"|837  |MSK-4|1932-01-14|\n"
"|844  |DR-1 |1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:108
msgid "  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:111
msgid "**Survey**: the actual readings."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:113
msgid "|taken|person|quant|reading|\n"
"|-----|------|-----|-------|\n"
"|619  |dyer  |rad  |9.82   |\n"
"|619  |dyer  |sal  |0.13   |\n"
"|622  |dyer  |rad  |7.8    |\n"
"|622  |dyer  |sal  |0.09   |\n"
"|734  |pb    |rad  |8.41   |\n"
"|734  |lake  |sal  |0.05   |\n"
"|734  |pb    |temp |-21.5  |\n"
"|735  |pb    |rad  |7.22   |\n"
"|735  |-null-|sal  |0.06   |\n"
"|735  |-null-|temp |-26.0  |\n"
"|751  |pb    |rad  |4.35   |\n"
"|751  |pb    |temp |-18.5  |\n"
"|751  |lake  |sal  |0.1    |\n"
"|752  |lake  |rad  |2.19   |\n"
"|752  |lake  |sal  |0.09   |\n"
"|752  |lake  |temp |-16.0  |\n"
"|752  |roe   |sal  |41.6   |\n"
"|837  |lake  |rad  |1.46   |\n"
"|837  |lake  |sal  |0.21   |\n"
"|837  |roe   |sal  |22.5   |\n"
"|844  |roe   |rad  |11.25  |"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:137
msgid "  </div>\n"
"</div>"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:140
msgid "Notice that three entries --- one in the `Visited` table,\n"
"and two in the `Survey` table --- don't contain any actual\n"
"data, but instead have a special `-null-` entry:\n"
"we'll return to these missing values [later]({{ site.github.url }}/05-null/)."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:146
# blockquote, which can be cascaded
msgid "> ## Checking If Data is Available"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:147
msgid ">\n"
"> On the shell command line,\n"
"> change the working directory to the one where you saved `survey.db`.\n"
"> If you saved it at your Desktop you should use\n"
">\n"
"> ~~~\n"
"> $ cd Desktop\n"
"> $ ls | grep survey.db\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:157
#: sql-novice-survey/_episodes/01-select.md:159
#: sql-novice-survey/_episodes/01-select.md:168
#: sql-novice-survey/_episodes/01-select.md:172
#: sql-novice-survey/_episodes/01-select.md:186
#: sql-novice-survey/_episodes/01-select.md:188
# blockquote, which can be cascaded
msgid "> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:158
# blockquote, which can be cascaded
msgid "> survey.db"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:160
#: sql-novice-survey/_episodes/01-select.md:173
#: sql-novice-survey/_episodes/01-select.md:189
#: sql-novice-survey/_episodes/09-create.md:203
# SC/DC Template label
msgid "> {: .output}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:161
msgid ">\n"
"> If you get the same output, you can run\n"
">\n"
"> ~~~\n"
"> $ sqlite3 survey.db\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:169
# blockquote, which can be cascaded
msgid "> SQLite version 3.8.8 2015-01-16 12:08:06"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:170
# blockquote, which can be cascaded
msgid "> Enter \".help\" for usage hints."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:171
# blockquote, which can be cascaded
msgid "> sqlite>"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:174
msgid ">\n"
"> that instructs SQLite to load the database in the `survey.db` file.\n"
">\n"
"> For a list of useful system commands, enter `.help`.\n"
">\n"
"> All SQLite-specific commands are prefixed with a `.` to distinguish them from SQL commands.\n"
"> Type `.tables` to list the tables in the database.\n"
">\n"
"> ~~~\n"
"> .tables\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:185
#: sql-novice-survey/_episodes/01-select.md:200
#: sql-novice-survey/_episodes/01-select.md:352
#: sql-novice-survey/_episodes/01-select.md:359
#: sql-novice-survey/_episodes/03-filter.md:249
#: sql-novice-survey/_episodes/04-calc.md:123
#: sql-novice-survey/_episodes/04-calc.md:163
#: sql-novice-survey/_episodes/05-null.md:225
#: sql-novice-survey/_episodes/06-agg.md:377
#: sql-novice-survey/_episodes/06-agg.md:394
#: sql-novice-survey/_episodes/07-join.md:285
# SC/DC Template label
msgid "> {: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:187
# blockquote, which can be cascaded
msgid "> Person   Site     Survey   Visited"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:190
msgid ">\n"
"> You can change some SQLite settings to make the output easier to read.\n"
"> First,\n"
"> set the output mode to display left-aligned columns.\n"
"> Then turn on the display of column headers.\n"
">\n"
"> ~~~\n"
"> .mode column\n"
"> .header on\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:201
msgid ">\n"
"> To exit SQLite and return to the shell command line,\n"
"> you can use either `.quit` or `.exit`."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:206
msgid "For now,\n"
"let's write an SQL query that displays scientists' names.\n"
"We do this using the SQL command `SELECT`,\n"
"giving it the names of the columns we want and the table we want them from.\n"
"Our query and its output look like this:"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:212
# code block
msgid "~~~\n"
"SELECT family, personal FROM Person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:215
#: sql-novice-survey/_episodes/01-select.md:236
#: sql-novice-survey/_episodes/01-select.md:268
#: sql-novice-survey/_episodes/01-select.md:285
#: sql-novice-survey/_episodes/01-select.md:300
#: sql-novice-survey/_episodes/01-select.md:316
#: sql-novice-survey/_episodes/02-sort-dup.md:33
#: sql-novice-survey/_episodes/02-sort-dup.md:67
#: sql-novice-survey/_episodes/02-sort-dup.md:85
#: sql-novice-survey/_episodes/02-sort-dup.md:125
#: sql-novice-survey/_episodes/02-sort-dup.md:149
#: sql-novice-survey/_episodes/02-sort-dup.md:174
#: sql-novice-survey/_episodes/02-sort-dup.md:211
#: sql-novice-survey/_episodes/03-filter.md:28
#: sql-novice-survey/_episodes/03-filter.md:50
#: sql-novice-survey/_episodes/03-filter.md:67
#: sql-novice-survey/_episodes/03-filter.md:102
#: sql-novice-survey/_episodes/03-filter.md:123
#: sql-novice-survey/_episodes/03-filter.md:146
#: sql-novice-survey/_episodes/03-filter.md:165
#: sql-novice-survey/_episodes/03-filter.md:185
#: sql-novice-survey/_episodes/03-filter.md:205
#: sql-novice-survey/_episodes/04-calc.md:23
#: sql-novice-survey/_episodes/04-calc.md:49
#: sql-novice-survey/_episodes/04-calc.md:68
#: sql-novice-survey/_episodes/04-calc.md:83
#: sql-novice-survey/_episodes/05-null.md:33
#: sql-novice-survey/_episodes/05-null.md:52
#: sql-novice-survey/_episodes/05-null.md:65
#: sql-novice-survey/_episodes/05-null.md:103
#: sql-novice-survey/_episodes/05-null.md:110
#: sql-novice-survey/_episodes/05-null.md:118
#: sql-novice-survey/_episodes/05-null.md:129
#: sql-novice-survey/_episodes/05-null.md:150
#: sql-novice-survey/_episodes/05-null.md:171
#: sql-novice-survey/_episodes/06-agg.md:25
#: sql-novice-survey/_episodes/06-agg.md:47
#: sql-novice-survey/_episodes/06-agg.md:58
#: sql-novice-survey/_episodes/06-agg.md:73
#: sql-novice-survey/_episodes/06-agg.md:82
#: sql-novice-survey/_episodes/06-agg.md:91
#: sql-novice-survey/_episodes/06-agg.md:112
#: sql-novice-survey/_episodes/06-agg.md:124
#: sql-novice-survey/_episodes/06-agg.md:146
#: sql-novice-survey/_episodes/06-agg.md:170
#: sql-novice-survey/_episodes/06-agg.md:181
#: sql-novice-survey/_episodes/06-agg.md:198
#: sql-novice-survey/_episodes/06-agg.md:215
#: sql-novice-survey/_episodes/06-agg.md:235
#: sql-novice-survey/_episodes/06-agg.md:263
#: sql-novice-survey/_episodes/06-agg.md:292
#: sql-novice-survey/_episodes/07-join.md:43
#: sql-novice-survey/_episodes/07-join.md:95
#: sql-novice-survey/_episodes/07-join.md:135
#: sql-novice-survey/_episodes/07-join.md:163
#: sql-novice-survey/_episodes/07-join.md:223
#: sql-novice-survey/_episodes/09-create.md:39
#: sql-novice-survey/_episodes/09-create.md:46
#: sql-novice-survey/_episodes/09-create.md:87
#: sql-novice-survey/_episodes/09-create.md:105
#: sql-novice-survey/_episodes/09-create.md:113
#: sql-novice-survey/_episodes/09-create.md:126
#: sql-novice-survey/_episodes/09-create.md:143
#: sql-novice-survey/_episodes/10-prog.md:135
#: sql-novice-survey/_episodes/11-prog-R.md:110
#: sql-novice-survey/_episodes/11-prog-R.md:120
# SC/DC Template label
msgid "{: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:217
#: sql-novice-survey/_episodes/01-select.md:238
msgid "|family  |personal |\n"
"|--------|---------|\n"
"|Dyer    |William  |\n"
"|Pabodie |Frank    |\n"
"|Lake    |Anderson |\n"
"|Roerich |Valentina|\n"
"|Danforth|Frank    |"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:225
msgid "The semicolon at the end of the query\n"
"tells the database manager that the query is complete and ready to run.\n"
"We have written our commands in upper case and the names for the table and columns\n"
"in lower case,\n"
"but we don't have to:\n"
"as the example below shows,\n"
"SQL is [case insensitive]({{ site.github.url }}/reference.html#case-insensitive)."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:233
# code block
msgid "~~~\n"
"SeLeCt FaMiLy, PeRsOnAl FrOm PeRsOn;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:246
msgid "You can use SQL's case insensitivity to your advantage. For instance,\n"
"some people choose to write SQL keywords (such as `SELECT` and `FROM`)\n"
"in capital letters and **field** and **table** names in lower\n"
"case. This can make it easier to locate parts of an SQL statement. For\n"
"instance, you can scan the statement, quickly locate the prominent\n"
"`FROM` keyword and know the table name follows.  Whatever casing\n"
"convention you choose, please be consistent: complex queries are hard\n"
"enough to read without the extra cognitive load of random\n"
"capitalization.  One convention is to use UPPER CASE for SQL\n"
"statements, to distinguish them from tables and column names. This is\n"
"the convention that we will use for this lesson."
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:258
msgid "While we are on the topic of SQL's syntax, one aspect of SQL's syntax\n"
"that can frustrate novices and experts alike is forgetting to finish a\n"
"command with `;` (semicolon).  When you press enter for a command\n"
"without adding the `;` to the end, it can look something like this:"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:263
# code block
msgid "~~~\n"
"SELECT id FROM Person\n"
"...>\n"
"...>\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:270
msgid "This is SQL's prompt, where it is waiting for additional commands or\n"
"for a `;` to let SQL know to finish.  This is easy to fix!  Just type\n"
"`;` and press enter!"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:274
msgid "Now, going back to our query,\n"
"it's important to understand that\n"
"the rows and columns in a database table aren't actually stored in any particular order.\n"
"They will always be *displayed* in some order,\n"
"but we can control that in various ways.\n"
"For example,\n"
"we could swap the columns in the output by writing our query as:"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:282
# code block
msgid "~~~\n"
"SELECT personal, family FROM Person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:287
msgid "|personal |family  |\n"
"|---------|--------|\n"
"|William  |Dyer    |\n"
"|Frank    |Pabodie |\n"
"|Anderson |Lake    |\n"
"|Valentina|Roerich |\n"
"|Frank    |Danforth|"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:295
msgid "or even repeat columns:"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:297
# code block
msgid "~~~\n"
"SELECT id, id, id FROM Person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:302
msgid "|id      |id      |id      |\n"
"|--------|--------|--------|\n"
"|dyer    |dyer    |dyer    |\n"
"|pb      |pb      |pb      |\n"
"|lake    |lake    |lake    |\n"
"|roe     |roe     |roe     |\n"
"|danforth|danforth|danforth|"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:310
msgid "As a shortcut,\n"
"we can select all of the columns in a table using `*`:"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:313
# code block
msgid "~~~\n"
"SELECT * FROM Person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:318
msgid "|id      |personal |family  |\n"
"|--------|---------|--------|\n"
"|dyer    |William  |Dyer    |\n"
"|pb      |Frank    |Pabodie |\n"
"|lake    |Anderson |Lake    |\n"
"|roe     |Valentina|Roerich |\n"
"|danforth|Frank    |Danforth|"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:326
# blockquote, which can be cascaded
msgid "> ## Selecting Site Names"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:327
msgid ">\n"
"> Write a query that selects only the `name` column from the `Site` table.\n"
">\n"
"> > ## Solution\n"
"> > \n"
"> > ~~~\n"
"> > SELECT name FROM Site;\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |name      |\n"
"> > |----------|\n"
"> > |DR-1      |\n"
"> > |DR-3      |\n"
"> > |MSK-4     |"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:342
#: sql-novice-survey/_episodes/02-sort-dup.md:248
#: sql-novice-survey/_episodes/02-sort-dup.md:270
#: sql-novice-survey/_episodes/03-filter.md:264
#: sql-novice-survey/_episodes/03-filter.md:284
#: sql-novice-survey/_episodes/03-filter.md:304
#: sql-novice-survey/_episodes/04-calc.md:113
#: sql-novice-survey/_episodes/04-calc.md:152
#: sql-novice-survey/_episodes/04-calc.md:186
#: sql-novice-survey/_episodes/05-null.md:215
#: sql-novice-survey/_episodes/06-agg.md:341
#: sql-novice-survey/_episodes/06-agg.md:364
#: sql-novice-survey/_episodes/08-hygiene.md:100
#: sql-novice-survey/_episodes/08-hygiene.md:114
#: sql-novice-survey/_episodes/09-create.md:189
#: sql-novice-survey/_episodes/09-create.md:234
#: sql-novice-survey/_episodes/10-prog.md:318
#: sql-novice-survey/_episodes/10-prog.md:390
# SC/DC Template label
msgid "> {: .solution}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:343
#: sql-novice-survey/_episodes/01-select.md:362
#: sql-novice-survey/_episodes/02-sort-dup.md:249
#: sql-novice-survey/_episodes/02-sort-dup.md:271
#: sql-novice-survey/_episodes/03-filter.md:265
#: sql-novice-survey/_episodes/03-filter.md:285
#: sql-novice-survey/_episodes/03-filter.md:305
#: sql-novice-survey/_episodes/04-calc.md:114
#: sql-novice-survey/_episodes/04-calc.md:153
#: sql-novice-survey/_episodes/04-calc.md:187
#: sql-novice-survey/_episodes/05-null.md:216
#: sql-novice-survey/_episodes/05-null.md:229
#: sql-novice-survey/_episodes/05-null.md:242
#: sql-novice-survey/_episodes/06-agg.md:342
#: sql-novice-survey/_episodes/06-agg.md:365
#: sql-novice-survey/_episodes/06-agg.md:380
#: sql-novice-survey/_episodes/06-agg.md:397
#: sql-novice-survey/_episodes/07-join.md:254
#: sql-novice-survey/_episodes/07-join.md:275
#: sql-novice-survey/_episodes/07-join.md:286
#: sql-novice-survey/_episodes/07-join.md:326
#: sql-novice-survey/_episodes/08-hygiene.md:101
#: sql-novice-survey/_episodes/08-hygiene.md:115
#: sql-novice-survey/_episodes/09-create.md:190
#: sql-novice-survey/_episodes/09-create.md:210
#: sql-novice-survey/_episodes/09-create.md:235
#: sql-novice-survey/_episodes/10-prog.md:319
#: sql-novice-survey/_episodes/10-prog.md:391
#: sql-novice-survey/_episodes/11-prog-R.md:181
#: sql-novice-survey/_episodes/11-prog-R.md:190
# SC/DC Template label
msgid "{: .challenge}"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:345
# blockquote, which can be cascaded
msgid "> ## Query Style"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:346
msgid ">\n"
"> Many people format queries as:\n"
">\n"
"> ~~~\n"
"> SELECT personal, family FROM person;\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:353
msgid ">\n"
"> or as:\n"
">\n"
"> ~~~\n"
"> select Personal, Family from PERSON;\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/01-select.md:360
msgid ">\n"
"> What style do you find easiest to read, and why?"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:1
# Front Matter
msgid "---\n"
"title: \"Sorting and Removing Duplicates\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I sort a query's results?\"\n"
"- \"How can I remove duplicate values from a query's results?\"\n"
"objectives:\n"
"- \"Write queries that display results in a particular order.\"\n"
"- \"Write queries that eliminate duplicate values from data.\"\n"
"keypoints:\n"
"- \"The records in a database table are not intrinsically ordered: if we want to display them in some order, we must specify that explicitly with ORDER BY.\"\n"
"- \"The values in a database are not guaranteed to be unique: if we want to eliminate duplicates, we must specify that explicitly as well using DISTINCT.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:15
msgid "In beginning our examination of the Antarctic data, we want to know:"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:17
# unordered list
msgid "* what kind of quantity measurements were taken at each site;"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:18
# unordered list
msgid "* which scientists took measurements on the expedition;"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:19
# unordered list
msgid "* the sites where each scientist took measurements"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:21
msgid "To determine which measurements were taken at each site,\n"
"we can examine the `Survey` table.\n"
"Data is often redundant,\n"
"so queries often return redundant information.\n"
"For example,\n"
"if we select the quantities that have been measured\n"
"from the `Survey` table,\n"
"we get this:"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:30
# code block
msgid "~~~\n"
"SELECT quant FROM Survey;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:35
msgid "|quant|\n"
"|-----|\n"
"|rad  |\n"
"|sal  |\n"
"|rad  |\n"
"|sal  |\n"
"|rad  |\n"
"|sal  |\n"
"|temp |\n"
"|rad  |\n"
"|sal  |\n"
"|temp |\n"
"|rad  |\n"
"|temp |\n"
"|sal  |\n"
"|rad  |\n"
"|sal  |\n"
"|temp |\n"
"|sal  |\n"
"|rad  |\n"
"|sal  |\n"
"|sal  |\n"
"|rad  |"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:59
msgid "This result makes it difficult to see all of the different types of\n"
"`quant` in the Survey table.  We can eliminate the redundant output to\n"
"make the result more readable by adding the `DISTINCT` keyword to our\n"
"query:"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:64
# code block
msgid "~~~\n"
"SELECT DISTINCT quant FROM Survey;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:69
msgid "|quant|\n"
"|-----|\n"
"|rad  |\n"
"|sal  |\n"
"|temp |"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:75
msgid "If we want to determine which visit (stored in the `taken` column)\n"
"have which `quant` measurement,\n"
"we can use the `DISTINCT` keyword on multiple columns.\n"
"If we select more than one column,\n"
"distinct *sets* of values are returned\n"
"(in this case *pairs*, because we are selecting two columns):"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:82
# code block
msgid "~~~\n"
"SELECT DISTINCT taken, quant FROM Survey;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:87
msgid "|taken|quant|\n"
"|-----|-----|\n"
"|619  |rad  |\n"
"|619  |sal  |\n"
"|622  |rad  |\n"
"|622  |sal  |\n"
"|734  |rad  |\n"
"|734  |sal  |\n"
"|734  |temp |\n"
"|735  |rad  |\n"
"|735  |sal  |\n"
"|735  |temp |\n"
"|751  |rad  |\n"
"|751  |temp |\n"
"|751  |sal  |\n"
"|752  |rad  |\n"
"|752  |sal  |\n"
"|752  |temp |\n"
"|837  |rad  |\n"
"|837  |sal  |\n"
"|844  |rad  |"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:109
msgid "Notice in both cases that duplicates are removed\n"
"even if the rows they come from didn't appear to be adjacent in the database table."
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:113
msgid "Our next task is to identify the scientists on the expedition by looking at the `Person` table.\n"
"As we mentioned earlier,\n"
"database records are not stored in any particular order.\n"
"This means that query results aren't necessarily sorted,\n"
"and even if they are,\n"
"we often want to sort them in a different way,\n"
"e.g., by their identifier instead of by their personal name.\n"
"We can do this in SQL by adding an `ORDER BY` clause to our query:"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:122
# code block
msgid "~~~\n"
"SELECT * FROM Person ORDER BY id;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:127
msgid "|id     |personal |family  |\n"
"|-------|---------|--------|\n"
"|danfort|Frank    |Danforth|\n"
"|dyer   |William  |Dyer    |\n"
"|lake   |Anderson |Lake    |\n"
"|pb     |Frank    |Pabodie |\n"
"|roe    |Valentina|Roerich |"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:135
msgid "By default, when we use ORDER BY\n"
"results are sorted in ascending order of the column we specify\n"
"(i.e.,\n"
"from least to greatest)."
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:140
msgid "We can sort in the opposite order using `DESC` (for \"descending\"):"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:142
# blockquote, which can be cascaded
msgid "> ## A note on ordering"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:143
msgid ">\n"
"> While it may look that the records are consistent every time we ask for them in this lesson, that is because no one has changed or modified any of the data so far. Remember to use ORDER BY if you want the rows returned to have any sort of consistent or predictable order."
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:146
# code block
msgid "~~~\n"
"SELECT * FROM person ORDER BY id DESC;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:151
msgid "|id     |personal |family  |\n"
"|-------|---------|--------|\n"
"|roe    |Valentina|Roerich |\n"
"|pb     |Frank    |Pabodie |\n"
"|lake   |Anderson |Lake    |\n"
"|dyer   |William  |Dyer    |\n"
"|danfort|Frank    |Danforth|"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:159
msgid "(And if we want to make it clear that we're sorting in ascending order,\n"
"we can use `ASC` instead of `DESC`.)"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:163
msgid "In order to look at which scientist measured quantities during each visit,\n"
"we can look again at the `Survey` table.\n"
"We can also sort on several fields at once.\n"
"For example,\n"
"this query sorts results first in ascending order by `taken`,\n"
"and then in descending order by `person`\n"
"within each group of equal `taken` values:"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:171
# code block
msgid "~~~\n"
"SELECT taken, person, quant FROM Survey ORDER BY taken ASC, person DESC;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:176
msgid "|taken|person|quant|\n"
"|-----|------|-----|\n"
"|619  |dyer  |rad  |\n"
"|619  |dyer  |sal  |\n"
"|622  |dyer  |rad  |\n"
"|622  |dyer  |sal  |\n"
"|734  |pb    |rad  |\n"
"|734  |pb    |temp |\n"
"|734  |lake  |sal  |\n"
"|735  |pb    |rad  |\n"
"|735  |-null-|sal  |\n"
"|735  |-null-|temp |\n"
"|751  |pb    |rad  |\n"
"|751  |pb    |temp |\n"
"|751  |lake  |sal  |\n"
"|752  |roe   |sal  |\n"
"|752  |lake  |rad  |\n"
"|752  |lake  |sal  |\n"
"|752  |lake  |temp |\n"
"|837  |roe   |sal  |\n"
"|837  |lake  |rad  |\n"
"|837  |lake  |sal  |\n"
"|844  |roe   |rad  |"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:200
msgid "This query gives us a good idea of which scientist was involved in which visit,\n"
"and what measurements they performed during the visit."
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:203
msgid "Looking at the table, it seems like some scientists specialized in\n"
"certain kinds of measurements.  We can examine which scientists\n"
"performed which measurements by selecting the appropriate columns and\n"
"removing duplicates."
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:208
# code block
msgid "~~~\n"
"SELECT DISTINCT quant, person FROM Survey ORDER BY quant ASC;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:213
msgid "|quant|person|\n"
"|-----|------|\n"
"|rad  |dyer  |\n"
"|rad  |pb    |\n"
"|rad  |lake  |\n"
"|rad  |roe   |\n"
"|sal  |dyer  |\n"
"|sal  |lake  |\n"
"|sal  |-null-|\n"
"|sal  |roe   |\n"
"|temp |pb    |\n"
"|temp |-null-|\n"
"|temp |lake  |"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:227
# blockquote, which can be cascaded
msgid "> ## Finding Distinct Dates"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:228
msgid ">\n"
"> Write a query that selects distinct dates from the `Visited` table.\n"
">\n"
"> > ## Solution\n"
"> > \n"
"> > ~~~\n"
"> > SELECT DISTINCT dated FROM Visited;\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |dated     |\n"
"> > |----------|\n"
"> > |1927-02-08|\n"
"> > |1927-02-10|\n"
"> > |1930-01-07|\n"
"> > |1930-01-12|\n"
"> > |1930-02-26|\n"
"> > |&nbsp;    |\n"
"> > |1932-01-14|\n"
"> > |1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:251
# blockquote, which can be cascaded
msgid "> ## Displaying Full Names"
msgstr ""

#: sql-novice-survey/_episodes/02-sort-dup.md:252
msgid ">\n"
"> Write a query that displays the full names of the scientists in the `Person` table,\n"
"> ordered by family name.\n"
">\n"
"> > ## Solution\n"
"> > \n"
"> > ~~~\n"
"> > SELECT personal, family FROM Person ORDER BY family ASC;\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |personal  |family    |\n"
"> > |----------|----------|\n"
"> > |Frank     |Danforth  |\n"
"> > |William   |Dyer      |\n"
"> > |Anderson  |Lake      |\n"
"> > |Frank     |Pabodie   |\n"
"> > |Valentina |Roerich   |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:1
# Front Matter
msgid "---\n"
"title: \"Filtering\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I select subsets of data?\"\n"
"objectives:\n"
"- \"Write queries that select records that satisfy user-specified conditions.\"\n"
"- \"Explain the order in which the clauses in a query are executed.\"\n"
"keypoints:\n"
"- \"Use WHERE to specify conditions that records must meet in order to be included in a query's results.\"\n"
"- \"Use AND, OR, and NOT to combine tests.\"\n"
"- \"Filtering is done on whole records, so conditions can use fields that are not actually displayed.\"\n"
"- \"Write queries incrementally.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:16
msgid "One of the most powerful features of a database is\n"
"the ability to [filter]({{ site.github.url }}/reference.html#filter) data,\n"
"i.e.,\n"
"to select only those records that match certain criteria.\n"
"For example,\n"
"suppose we want to see when a particular site was visited.\n"
"We can select these records from the `Visited` table\n"
"by using a `WHERE` clause in our query:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:25
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE site = 'DR-1';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:30
msgid "|id   |site|dated     |\n"
"|-----|----|----------|\n"
"|619  |DR-1|1927-02-08|\n"
"|622  |DR-1|1927-02-10|\n"
"|844  |DR-1|1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:36
msgid "The database manager executes this query in two stages.\n"
"First,\n"
"it checks at each row in the `Visited` table\n"
"to see which ones satisfy the `WHERE`.\n"
"It then uses the column names following the `SELECT` keyword\n"
"to determine which columns to display."
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:43
msgid "This processing order means that\n"
"we can filter records using `WHERE`\n"
"based on values in columns that aren't then displayed:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:47
# code block
msgid "~~~\n"
"SELECT id FROM Visited WHERE site = 'DR-1';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:52
msgid "|id   |\n"
"|-----|\n"
"|619  |\n"
"|622  |\n"
"|844  |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:58
msgid "![SQL Filtering in Action](../fig/sql-filter.svg)"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:60
msgid "We can use many other Boolean operators to filter our data.\n"
"For example,\n"
"we can ask for all information from the DR-1 site collected before 1930:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:64
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE site = 'DR-1' AND dated < '1930-01-01';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:69
#: sql-novice-survey/_episodes/05-null.md:54
msgid "|id   |site|dated     |\n"
"|-----|----|----------|\n"
"|619  |DR-1|1927-02-08|\n"
"|622  |DR-1|1927-02-10|"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:74
# blockquote, which can be cascaded
msgid "> ## Date Types"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:75
msgid ">\n"
"> Most database managers have a special data type for dates.\n"
"> In fact, many have two:\n"
"> one for dates,\n"
"> such as \"May 31, 1971\",\n"
"> and one for durations,\n"
"> such as \"31 days\".\n"
"> SQLite doesn't:\n"
"> instead,\n"
"> it stores dates as either text\n"
"> (in the ISO-8601 standard format \"YYYY-MM-DD HH:MM:SS.SSSS\"),\n"
"> real numbers\n"
"> ([Julian days](https://en.wikipedia.org/wiki/Julian_day), the number of days since November 24, 4714 BCE),\n"
"> or integers\n"
"> ([Unix time](https://en.wikipedia.org/wiki/Unix_time), the number of seconds since midnight, January 1, 1970).\n"
"> If this sounds complicated,\n"
"> it is,\n"
"> but not nearly as complicated as figuring out\n"
"> [historical dates in Sweden](https://en.wikipedia.org/wiki/Swedish_calendar)."
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:96
msgid "If we want to find out what measurements were taken by either Lake or Roerich,\n"
"we can combine the tests on their names using `OR`:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:99
# code block
msgid "~~~\n"
"SELECT * FROM Survey WHERE person = 'lake' OR person = 'roe';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:104
#: sql-novice-survey/_episodes/03-filter.md:125
msgid "|taken|person|quant|reading|\n"
"|-----|------|-----|-------|\n"
"|734  |lake  |sal  |0.05   |\n"
"|751  |lake  |sal  |0.1    |\n"
"|752  |lake  |rad  |2.19   |\n"
"|752  |lake  |sal  |0.09   |\n"
"|752  |lake  |temp |-16.0  |\n"
"|752  |roe   |sal  |41.6   |\n"
"|837  |lake  |rad  |1.46   |\n"
"|837  |lake  |sal  |0.21   |\n"
"|837  |roe   |sal  |22.5   |\n"
"|844  |roe   |rad  |11.25  |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:117
msgid "Alternatively,\n"
"we can use `IN` to see if a value is in a specific set:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:120
# code block
msgid "~~~\n"
"SELECT * FROM Survey WHERE person IN ('lake', 'roe');\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:138
msgid "We can combine `AND` with `OR`,\n"
"but we need to be careful about which operator is executed first.\n"
"If we *don't* use parentheses,\n"
"we get this:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:143
# code block
msgid "~~~\n"
"SELECT * FROM Survey WHERE quant = 'sal' AND person = 'lake' OR person = 'roe';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:148
msgid "|taken|person|quant|reading|\n"
"|-----|------|-----|-------|\n"
"|734  |lake  |sal  |0.05   |\n"
"|751  |lake  |sal  |0.1    |\n"
"|752  |lake  |sal  |0.09   |\n"
"|752  |roe   |sal  |41.6   |\n"
"|837  |lake  |sal  |0.21   |\n"
"|837  |roe   |sal  |22.5   |\n"
"|844  |roe   |rad  |11.25  |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:158
msgid "which is salinity measurements by Lake,\n"
"and *any* measurement by Roerich.\n"
"We probably want this instead:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:162
# code block
msgid "~~~\n"
"SELECT * FROM Survey WHERE quant = 'sal' AND (person = 'lake' OR person = 'roe');\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:167
msgid "|taken|person|quant|reading|\n"
"|-----|------|-----|-------|\n"
"|734  |lake  |sal  |0.05   |\n"
"|751  |lake  |sal  |0.1    |\n"
"|752  |lake  |sal  |0.09   |\n"
"|752  |roe   |sal  |41.6   |\n"
"|837  |lake  |sal  |0.21   |\n"
"|837  |roe   |sal  |22.5   |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:176
msgid "We can also filter by partial matches.  For example, if we want to\n"
"know something just about the site names beginning with \"DR\" we can\n"
"use the `LIKE` keyword.  The percent symbol acts as a\n"
"[wildcard]({{ site.github.url }}/reference.html#wildcard), matching any characters in that\n"
"place.  It can be used at the beginning, middle, or end of the string:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:182
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE site LIKE 'DR%';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:187
msgid "|id   |site |dated     |\n"
"|-----|-----|----------|\n"
"|619  |DR-1 |1927-02-08|\n"
"|622  |DR-1 |1927-02-10|\n"
"|734  |DR-3 |1930-01-07|\n"
"|735  |DR-3 |1930-01-12|\n"
"|751  |DR-3 |1930-02-26|\n"
"|752  |DR-3 |          |\n"
"|844  |DR-1 |1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:198
msgid "Finally,\n"
"we can use `DISTINCT` with `WHERE`\n"
"to give a second level of filtering:"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:202
# code block
msgid "~~~\n"
"SELECT DISTINCT person, quant FROM Survey WHERE person = 'lake' OR person = 'roe';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:207
msgid "|person|quant|\n"
"|------|-----|\n"
"|lake  |sal  |\n"
"|lake  |rad  |\n"
"|lake  |temp |\n"
"|roe   |sal  |\n"
"|roe   |rad  |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:215
msgid "But remember:\n"
"`DISTINCT` is applied to the values displayed in the chosen columns,\n"
"not to the entire rows as they are being processed."
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:219
# blockquote, which can be cascaded
msgid "> ## Growing Queries"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:220
msgid ">\n"
"> What we have just done is how most people \"grow\" their SQL queries.\n"
"> We started with something simple that did part of what we wanted,\n"
"> then added more clauses one by one,\n"
"> testing their effects as we went.\n"
"> This is a good strategy --- in fact,\n"
"> for complex queries it's often the *only* strategy --- but\n"
"> it depends on quick turnaround,\n"
"> and on us recognizing the right answer when we get it.\n"
">\n"
"> The best way to achieve quick turnaround is often\n"
"> to put a subset of data in a temporary database\n"
"> and run our queries against that,\n"
"> or to fill a small database with synthesized records.\n"
"> For example,\n"
"> instead of trying our queries against an actual database of 20 million Australians,\n"
"> we could run it against a sample of ten thousand,\n"
"> or write a small program to generate ten thousand random (but plausible) records\n"
"> and use that."
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:241
# blockquote, which can be cascaded
msgid "> ## Fix This Query"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:242
msgid ">\n"
"> Suppose we want to select all sites that lie more than 42 degrees from the poles.\n"
"> Our first query is:\n"
">\n"
"> ~~~\n"
"> SELECT * FROM Site WHERE (lat > -48) OR (lat < 48);\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:250
msgid ">\n"
"> Explain why this is wrong,\n"
"> and rewrite the query so that it is correct.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Because we used `OR`, a site on the South Pole for example will still meet \n"
"> > the second criteria and thus be included. Instead, we want to restrict this\n"
"> > to sites that meet _both_ criteria:\n"
"> >\n"
"> > ~~~\n"
"> > SELECT * FROM Site WHERE (lat > -48) AND (lat < 48);\n"
"> > ~~~\n"
"> > {: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:267
# blockquote, which can be cascaded
msgid "> ## Finding Outliers"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:268
msgid ">\n"
"> Normalized salinity readings are supposed to be between 0.0 and 1.0.\n"
"> Write a query that selects all records from `Survey`\n"
"> with salinity values outside this range.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > SELECT * FROM Survey WHERE quant = 'sal' AND ((reading > 1.0) OR (reading < 0.0));\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |taken     |person    |quant     |reading   |\n"
"> > |----------|----------|----------|----------|\n"
"> > |752       |roe       |sal       |41.6      |\n"
"> > |837       |roe       |sal       |22.5      |"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:287
# blockquote, which can be cascaded
msgid "> ## Matching Patterns"
msgstr ""

#: sql-novice-survey/_episodes/03-filter.md:288
msgid ">\n"
"> Which of these expressions are true?\n"
">\n"
"> 1. `'a' LIKE 'a'`\n"
"> 2. `'a' LIKE '%a'`\n"
"> 3. `'beta' LIKE '%a'`\n"
"> 4. `'alpha' LIKE 'a%%'`\n"
"> 5. `'alpha' LIKE 'a%p%'`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. True because these are the same character.\n"
"> > 2. True because the wildcard can match _zero_ or more characters.\n"
"> > 3. True because the `%` matches `bet` and the `a` matches the `a`.\n"
"> > 4. True because the first wildcard matches `lpha` and the second wildcard matches zero characters (or vice versa).\n"
"> > 5. True because the first wildcard matches `l` and the second wildcard matches `ha`."
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:1
# Front Matter
msgid "---\n"
"title: \"Calculating New Values\"\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"How can I calculate new values on the fly?\"\n"
"objectives:\n"
"- \"Write queries that calculate new values for each selected record.\"\n"
"keypoints:\n"
"- \"Queries can do the usual arithmetic operations on values.\"\n"
"- \"Use UNION to combine the results of two or more queries.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:13
msgid "After carefully re-reading the expedition logs,\n"
"we realize that the radiation measurements they report\n"
"may need to be corrected upward by 5%.\n"
"Rather than modifying the stored data,\n"
"we can do this calculation on the fly\n"
"as part of our query:"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:20
# code block
msgid "~~~\n"
"SELECT 1.05 * reading FROM Survey WHERE quant = 'rad';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:25
msgid "|1.05 * reading|\n"
"|--------------|\n"
"|10.311        |\n"
"|8.19          |\n"
"|8.8305        |\n"
"|7.581         |\n"
"|4.5675        |\n"
"|2.2995        |\n"
"|1.533         |\n"
"|11.8125       |"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:36
msgid "When we run the query,\n"
"the expression `1.05 * reading` is evaluated for each row.\n"
"Expressions can use any of the fields,\n"
"all of usual arithmetic operators,\n"
"and a variety of common functions.\n"
"(Exactly which ones depends on which database manager is being used.)\n"
"For example,\n"
"we can convert temperature readings from Fahrenheit to Celsius\n"
"and round to two decimal places:"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:46
# code block
msgid "~~~\n"
"SELECT taken, round(5 * (reading - 32) / 9, 2) FROM Survey WHERE quant = 'temp';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:51
msgid "|taken|round(5*(reading-32)/9, 2)|\n"
"|-----|--------------------------|\n"
"|734  |-29.72                    |\n"
"|735  |-32.22                    |\n"
"|751  |-28.06                    |\n"
"|752  |-26.67                    |"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:58
msgid "As you can see from this example, though, the string describing our\n"
"new field (generated from the equation) can become quite unwieldy. SQL\n"
"allows us to rename our fields, any field for that matter, whether it\n"
"was calculated or one of the existing fields in our database, for\n"
"succinctness and clarity. For example, we could write the previous\n"
"query as:"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:65
# code block
msgid "~~~\n"
"SELECT taken, round(5 * (reading - 32) / 9, 2) as Celsius FROM Survey WHERE quant = 'temp';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:70
msgid "|taken|Celsius|\n"
"|-----|-------|\n"
"|734  |-29.72 |\n"
"|735  |-32.22 |\n"
"|751  |-28.06 |\n"
"|752  |-26.67 |"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:77
msgid "We can also combine values from different fields,\n"
"for example by using the string concatenation operator `||`:"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:80
# code block
msgid "~~~\n"
"SELECT personal || ' ' || family FROM Person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:85
msgid "|personal || ' ' || family|\n"
"|-------------------------|\n"
"|William Dyer             |\n"
"|Frank Pabodie            |\n"
"|Anderson Lake            |\n"
"|Valentina Roerich        |\n"
"|Frank Danforth           |"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:93
# blockquote, which can be cascaded
msgid "> ## Fixing Salinity Readings"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:94
msgid ">\n"
"> After further reading,\n"
"> we realize that Valentina Roerich\n"
"> was reporting salinity as percentages.\n"
"> Write a query that returns all of her salinity measurements\n"
"> from the `Survey` table\n"
"> with the values divided by 100.\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > SELECT taken, reading / 100 FROM Survey WHERE person = 'roe' AND quant = 'sal';\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |taken     |reading / 100|\n"
"> > |----------|-------------|\n"
"> > |752       |0.416        |\n"
"> > |837       |0.225        |"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:116
# blockquote, which can be cascaded
msgid "> ## Unions"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:117
msgid ">\n"
"> The `UNION` operator combines the results of two queries:\n"
">\n"
"> ~~~\n"
"> SELECT * FROM Person WHERE id = 'dyer' UNION SELECT * FROM Person WHERE id = 'roe';\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:124
msgid ">\n"
"> |id  |personal |family |\n"
"> |----|-------- |-------|\n"
"> |dyer|William  |Dyer   |\n"
"> |roe |Valentina|Roerich|\n"
">\n"
"> Use `UNION` to create a consolidated list of salinity measurements\n"
"> in which Valentina Roerich's, and only Valentina's,\n"
"> have been corrected as described in the previous challenge.\n"
"> The output should be something like:\n"
">\n"
"> |taken|reading|\n"
"> |-----|-------|\n"
"> |619  |0.13   |\n"
"> |622  |0.09   |\n"
"> |734  |0.05   |\n"
"> |751  |0.1    |\n"
"> |752  |0.09   |\n"
"> |752  |0.416  |\n"
"> |837  |0.21   |\n"
"> |837  |0.225  |\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > SELECT taken, reading FROM Survey WHERE person != 'roe' AND quant = 'sal' UNION SELECT taken, reading / 100 FROM Survey WHERE person = 'roe' AND quant = 'sal' ORDER BY taken ASC;\n"
"> > ~~~\n"
"> > {: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:155
# blockquote, which can be cascaded
msgid "> ## Selecting Major Site Identifiers"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:156
msgid ">\n"
"> The site identifiers in the `Visited` table have two parts\n"
"> separated by a '-':\n"
">\n"
"> ~~~\n"
"> SELECT DISTINCT site FROM Visited;\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/04-calc.md:164
msgid ">\n"
"> |site |\n"
"> |-----|\n"
"> |DR-1 |\n"
"> |DR-3 |\n"
"> |MSK-4|\n"
">\n"
"> Some major site identifiers (i.e. the letter codes) are two letters long and some are three.\n"
"> The \"in string\" function `instr(X, Y)`\n"
"> returns the 1-based index of the first occurrence of string Y in string X,\n"
"> or 0 if Y does not exist in X.\n"
"> The substring function `substr(X, I, [L])`\n"
"> returns the substring of X starting at index I, with an optional length L.\n"
"> Use these two functions to produce a list of unique major site identifiers.\n"
"> (For this data,\n"
"> the list should contain only \"DR\" and \"MSK\").\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > SELECT DISTINCT substr(site, 1, instr(site, '-') - 1) AS MajorSite FROM Visited;\n"
"> > ```\n"
"> > {: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:1
# Front Matter
msgid "---\n"
"title: \"Missing Data\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How do databases represent missing information?\"\n"
"- \"What special handling does missing information require?\"\n"
"objectives:\n"
"- \"Explain how databases represent missing information.\"\n"
"- \"Explain the three-valued logic databases use when manipulating missing information.\"\n"
"- \"Write queries that handle missing information correctly.\"\n"
"keypoints:\n"
"- \"Databases use a special value called NULL to represent missing information.\"\n"
"- \"Almost all operations on NULL produce NULL.\"\n"
"- \"Queries can test for NULLs using IS NULL and IS NOT NULL.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:17
msgid "Real-world data is never complete --- there are always holes.\n"
"Databases represent these holes using a special value called `null`.\n"
"`null` is not zero, `False`, or the empty string;\n"
"it is a one-of-a-kind value that means \"nothing here\".\n"
"Dealing with `null` requires a few special tricks\n"
"and some careful thinking."
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:24
msgid "To start,\n"
"let's have a look at the `Visited` table.\n"
"There are eight records,\n"
"but #752 doesn't have a date --- or rather,\n"
"its date is null:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:30
# code block
msgid "~~~\n"
"SELECT * FROM Visited;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:35
msgid "|id   |site|dated     |\n"
"|-----|----|----------|\n"
"|619  |DR-1|1927-02-08|\n"
"|622  |DR-1|1927-02-10|\n"
"|734  |DR-3|1930-01-07|\n"
"|735  |DR-3|1930-01-12|\n"
"|751  |DR-3|1930-02-26|\n"
"|752  |DR-3|-null-    |\n"
"|837  |MSK-|1932-01-14|\n"
"|844  |DR-1|1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:46
msgid "Null doesn't behave like other values.\n"
"If we select the records that come before 1930:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:49
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE dated < '1930-01-01';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:59
msgid "we get two results,\n"
"and if we select the ones that come during or after 1930:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:62
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE dated >= '1930-01-01';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:67
msgid "|id   |site|dated     |\n"
"|-----|----|----------|\n"
"|734  |DR-3|1930-01-07|\n"
"|735  |DR-3|1930-01-12|\n"
"|751  |DR-3|1930-02-26|\n"
"|837  |MSK-|1932-01-14|\n"
"|844  |DR-1|1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:75
msgid "we get five,\n"
"but record #752 isn't in either set of results.\n"
"The reason is that\n"
"`null<'1930-01-01'`\n"
"is neither true nor false:\n"
"null means, \"We don't know,\"\n"
"and if we don't know the value on the left side of a comparison,\n"
"we don't know whether the comparison is true or false.\n"
"Since databases represent \"don't know\" as null,\n"
"the value of `null<'1930-01-01'`\n"
"is actually `null`.\n"
"`null>='1930-01-01'` is also null\n"
"because we can't answer to that question either.\n"
"And since the only records kept by a `WHERE`\n"
"are those for which the test is true,\n"
"record #752 isn't included in either set of results."
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:92
msgid "Comparisons aren't the only operations that behave this way with nulls.\n"
"`1+null` is `null`,\n"
"`5*null` is `null`,\n"
"`log(null)` is `null`,\n"
"and so on.\n"
"In particular,\n"
"comparing things to null with = and != produces null:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:100
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE dated = NULL;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:105
msgid "produces no output, and neither does:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:107
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE dated != NULL;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:112
msgid "To check whether a value is `null` or not,\n"
"we must use a special test `IS NULL`:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:115
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE dated IS NULL;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:120
msgid "|id   |site|dated     |\n"
"|-----|----|----------|\n"
"|752  |DR-3|-null-    |"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:124
msgid "or its inverse `IS NOT NULL`:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:126
# code block
msgid "~~~\n"
"SELECT * FROM Visited WHERE dated IS NOT NULL;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:131
msgid "|id   |site|dated     |\n"
"|-----|----|----------|\n"
"|619  |DR-1|1927-02-08|\n"
"|622  |DR-1|1927-02-10|\n"
"|734  |DR-3|1930-01-07|\n"
"|735  |DR-3|1930-01-12|\n"
"|751  |DR-3|1930-02-26|\n"
"|837  |MSK-|1932-01-14|\n"
"|844  |DR-1|1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:141
msgid "Null values can cause headaches wherever they appear.\n"
"For example,\n"
"suppose we want to find all the salinity measurements\n"
"that weren't taken by Lake.\n"
"It's natural to write the query like this:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:147
# code block
msgid "~~~\n"
"SELECT * FROM Survey WHERE quant = 'sal' AND person != 'lake';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:152
msgid "|taken|person|quant|reading|\n"
"|-----|------|-----|-------|\n"
"|619  |dyer  |sal  |0.13   |\n"
"|622  |dyer  |sal  |0.09   |\n"
"|752  |roe   |sal  |41.6   |\n"
"|837  |roe   |sal  |22.5   |"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:159
msgid "but this query filters omits the records\n"
"where we don't know who took the measurement.\n"
"Once again,\n"
"the reason is that when `person` is `null`,\n"
"the `!=` comparison produces `null`,\n"
"so the record isn't kept in our results.\n"
"If we want to keep these records\n"
"we need to add an explicit check:"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:168
# code block
msgid "~~~\n"
"SELECT * FROM Survey WHERE quant = 'sal' AND (person != 'lake' OR person IS NULL);\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:173
msgid "|taken|person|quant|reading|\n"
"|-----|------|-----|-------|\n"
"|619  |dyer  |sal  |0.13   |\n"
"|622  |dyer  |sal  |0.09   |\n"
"|735  |-null-|sal  |0.06   |\n"
"|752  |roe   |sal  |41.6   |\n"
"|837  |roe   |sal  |22.5   |"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:181
msgid "We still have to decide whether this is the right thing to do or not.\n"
"If we want to be absolutely sure that\n"
"we aren't including any measurements by Lake in our results,\n"
"we need to exclude all the records for which we don't know who did the work."
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:186
msgid "In contrast to arithmetic or Boolean operators, aggregation functions\n"
"that combine multiple values, such as `min`, `max` or `avg`, *ignore*\n"
"`null` values. In the majority of cases, this is a desirable output:\n"
"for example, unknown values are thus not affecting our data when we\n"
"are averaging it. Aggregation functions will be addressed in more\n"
"detail in [the next section]({{ site.github.url }}/06-agg/)."
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:193
# blockquote, which can be cascaded
msgid "> ## Sorting by Known Date"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:194
msgid ">\n"
"> Write a query that sorts the records in `Visited` by date,\n"
"> omitting entries for which the date is not known\n"
"> (i.e., is null).\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > SELECT * FROM Visited WHERE dated IS NOT NULL ORDER BY dated ASC;\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |id        |site      |dated     |\n"
"> > |----------|----------|----------|\n"
"> > |619       |DR-1      |1927-02-08|\n"
"> > |622       |DR-1      |1927-02-10|\n"
"> > |734       |DR-3      |1930-01-07|\n"
"> > |735       |DR-3      |1930-01-12|\n"
"> > |751       |DR-3      |1930-02-26|\n"
"> > |837       |MSK-4     |1932-01-14|\n"
"> > |844       |DR-1      |1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:218
# blockquote, which can be cascaded
msgid "> ## NULL in a Set"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:219
msgid ">\n"
"> What do you expect the query:\n"
">\n"
"> ~~~\n"
"> SELECT * FROM Visited WHERE dated IN ('1927-02-08', NULL);\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:226
msgid ">\n"
"> to produce?\n"
"> What does it actually produce?"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:231
# blockquote, which can be cascaded
msgid "> ## Pros and Cons of Sentinels"
msgstr ""

#: sql-novice-survey/_episodes/05-null.md:232
msgid ">\n"
"> Some database designers prefer to use\n"
"> a [sentinel value]({{ site.github.url }}/reference.html#sentinel-value)\n"
"> to mark missing data rather than `null`.\n"
"> For example,\n"
"> they will use the date \"0000-00-00\" to mark a missing date,\n"
"> or -1.0 to mark a missing salinity or radiation reading\n"
"> (since actual readings cannot be negative).\n"
"> What does this simplify?\n"
"> What burdens or risks does it introduce?"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:1
# Front Matter
msgid "---\n"
"title: \"Aggregation\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I calculate sums, averages, and other summary values?\"\n"
"objectives:\n"
"- \"Define aggregation and give examples of its use.\"\n"
"- \"Write queries that compute aggregated values.\"\n"
"- \"Trace the execution of a query that performs aggregation.\"\n"
"- \"Explain how missing data is handled during aggregation.\"\n"
"keypoints:\n"
"- \"Use aggregation functions to combine multiple values.\"\n"
"- \"Aggregation functions ignore `null` values.\"\n"
"- \"Aggregation happens after filtering.\"\n"
"- \"Use GROUP BY to combine subsets separately.\"\n"
"- \"If no aggregation function is specified for a field, the query may return an arbitrary value for that field.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:19
msgid "We now want to calculate ranges and averages for our data.\n"
"We know how to select all of the dates from the `Visited` table:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:22
# code block
msgid "~~~\n"
"SELECT dated FROM Visited;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:27
msgid "|dated     |\n"
"|----------|\n"
"|1927-02-08|\n"
"|1927-02-10|\n"
"|1930-01-07|\n"
"|1930-01-12|\n"
"|1930-02-26|\n"
"|-null-    |\n"
"|1932-01-14|\n"
"|1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:38
msgid "but to combine them,\n"
"we must use an [aggregation function]({{ site.github.url }}/reference.html#aggregation-function)\n"
"such as `min` or `max`.\n"
"Each of these functions takes a set of records as input,\n"
"and produces a single record as output:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:44
#: sql-novice-survey/_episodes/06-agg.md:167
# code block
msgid "~~~\n"
"SELECT min(dated) FROM Visited;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:49
#: sql-novice-survey/_episodes/06-agg.md:172
#: sql-novice-survey/_episodes/06-agg.md:183
msgid "|min(dated)|\n"
"|----------|\n"
"|1927-02-08|"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:53
msgid "![SQL Aggregation](../fig/sql-aggregation.svg)"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:55
# code block
msgid "~~~\n"
"SELECT max(dated) FROM Visited;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:60
msgid "|max(dated)|\n"
"|----------|\n"
"|1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:64
msgid "`min` and `max` are just two of\n"
"the aggregation functions built into SQL.\n"
"Three others are `avg`,\n"
"`count`,\n"
"and `sum`:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:70
# code block
msgid "~~~\n"
"SELECT avg(reading) FROM Survey WHERE quant = 'sal';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:75
msgid "|avg(reading)    |\n"
"|----------------|\n"
"|7.20333333333333|"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:79
# code block
msgid "~~~\n"
"SELECT count(reading) FROM Survey WHERE quant = 'sal';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:84
msgid "|count(reading)|\n"
"|--------------|\n"
"|9             |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:88
# code block
msgid "~~~\n"
"SELECT sum(reading) FROM Survey WHERE quant = 'sal';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:93
msgid "|sum(reading)|\n"
"|------------|\n"
"|64.83       |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:97
msgid "We used `count(reading)` here,\n"
"but we could just as easily have counted `quant`\n"
"or any other field in the table,\n"
"or even used `count(*)`,\n"
"since the function doesn't care about the values themselves,\n"
"just how many values there are."
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:104
msgid "SQL lets us do several aggregations at once.\n"
"We can,\n"
"for example,\n"
"find the range of sensible salinity measurements:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:109
# code block
msgid "~~~\n"
"SELECT min(reading), max(reading) FROM Survey WHERE quant = 'sal' AND reading <= 1.0;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:114
msgid "|min(reading)|max(reading)|\n"
"|------------|------------|\n"
"|0.05        |0.21        |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:118
msgid "We can also combine aggregated results with raw results,\n"
"although the output might surprise you:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:121
# code block
msgid "~~~\n"
"SELECT person, count(*) FROM Survey WHERE quant = 'sal' AND reading <= 1.0;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:126
msgid "|person|count(\\*)|\n"
"|------|--------|\n"
"|lake  |7       |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:130
msgid "Why does Lake's name appear rather than Roerich's or Dyer's?\n"
"The answer is that when it has to aggregate a field,\n"
"but isn't told how to,\n"
"the database manager chooses an actual value from the input set.\n"
"It might use the first one processed,\n"
"the last one,\n"
"or something else entirely."
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:138
msgid "Another important fact is that when there are no values to aggregate ---\n"
"for example, where there are no rows satisfying the `WHERE` clause ---\n"
"aggregation's result is \"don't know\"\n"
"rather than zero or some other arbitrary value:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:143
# code block
msgid "~~~\n"
"SELECT person, max(reading), sum(reading) FROM Survey WHERE quant = 'missing';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:148
msgid "|person|max(reading)|sum(reading)|\n"
"|------|------------|------------|\n"
"|-null-|-null-      |-null-      |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:152
msgid "One final important feature of aggregation functions is that\n"
"they are inconsistent with the rest of SQL in a very useful way.\n"
"If we add two values,\n"
"and one of them is null,\n"
"the result is null.\n"
"By extension,\n"
"if we use `sum` to add all the values in a set,\n"
"and any of those values are null,\n"
"the result should also be null.\n"
"It's much more useful,\n"
"though,\n"
"for aggregation functions to ignore null values\n"
"and only combine those that are non-null.\n"
"This behavior lets us write our queries as:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:176
msgid "instead of always having to filter explicitly:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:178
# code block
msgid "~~~\n"
"SELECT min(dated) FROM Visited WHERE dated IS NOT NULL;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:187
msgid "Aggregating all records at once doesn't always make sense.\n"
"For example,\n"
"suppose we suspect that there is a systematic bias in our data,\n"
"and that some scientists' radiation readings are higher than others.\n"
"We know that this doesn't work:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:193
# code block
msgid "~~~\n"
"SELECT person, count(reading), round(avg(reading), 2)\n"
"FROM  Survey\n"
"WHERE quant = 'rad';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:200
msgid "|person|count(reading)|round(avg(reading), 2)|\n"
"|------|--------------|----------------------|\n"
"|roe   |8             |6.56                  |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:204
msgid "because the database manager selects a single arbitrary scientist's name\n"
"rather than aggregating separately for each scientist.\n"
"Since there are only five scientists,\n"
"we could write five queries of the form:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:209
# code block
msgid "~~~\n"
"SELECT person, count(reading), round(avg(reading), 2)\n"
"FROM  Survey\n"
"WHERE quant = 'rad'\n"
"AND   person = 'dyer';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:217
msgid "person|count(reading)|round(avg(reading), 2)|\n"
"------|--------------|----------------------|\n"
"dyer  |2             |8.81                  |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:221
msgid "but this would be tedious,\n"
"and if we ever had a data set with fifty or five hundred scientists,\n"
"the chances of us getting all of those queries right is small."
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:225
msgid "What we need to do is\n"
"tell the database manager to aggregate the hours for each scientist separately\n"
"using a `GROUP BY` clause:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:229
# code block
msgid "~~~\n"
"SELECT   person, count(reading), round(avg(reading), 2)\n"
"FROM     Survey\n"
"WHERE    quant = 'rad'\n"
"GROUP BY person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:237
msgid "person|count(reading)|round(avg(reading), 2)|\n"
"------|--------------|----------------------|\n"
"dyer  |2             |8.81                  |\n"
"lake  |2             |1.82                  |\n"
"pb    |3             |6.66                  |\n"
"roe   |1             |11.25                 |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:244
msgid "`GROUP BY` does exactly what its name implies:\n"
"groups all the records with the same value for the specified field together\n"
"so that aggregation can process each batch separately.\n"
"Since all the records in each batch have the same value for `person`,\n"
"it no longer matters that the database manager\n"
"is picking an arbitrary one to display\n"
"alongside the aggregated `reading` values."
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:252
msgid "Just as we can sort by multiple criteria at once,\n"
"we can also group by multiple criteria.\n"
"To get the average reading by scientist and quantity measured,\n"
"for example,\n"
"we just add another field to the `GROUP BY` clause:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:258
# code block
msgid "~~~\n"
"SELECT   person, quant, count(reading), round(avg(reading), 2)\n"
"FROM     Survey\n"
"GROUP BY person, quant;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:265
msgid "|person|quant|count(reading)|round(avg(reading), 2)|\n"
"|------|-----|--------------|----------------------|\n"
"|-null-|sal  |1             |0.06                  |\n"
"|-null-|temp |1             |-26.0                 |\n"
"|dyer  |rad  |2             |8.81                  |\n"
"|dyer  |sal  |2             |0.11                  |\n"
"|lake  |rad  |2             |1.82                  |\n"
"|lake  |sal  |4             |0.11                  |\n"
"|lake  |temp |1             |-16.0                 |\n"
"|pb    |rad  |3             |6.66                  |\n"
"|pb    |temp |2             |-20.0                 |\n"
"|roe   |rad  |1             |11.25                 |\n"
"|roe   |sal  |2             |32.05                 |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:279
msgid "Note that we have added `quant` to the list of fields displayed,\n"
"since the results wouldn't make much sense otherwise."
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:282
msgid "Let's go one step further and remove all the entries\n"
"where we don't know who took the measurement:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:285
# code block
msgid "~~~\n"
"SELECT   person, quant, count(reading), round(avg(reading), 2)\n"
"FROM     Survey\n"
"WHERE    person IS NOT NULL\n"
"GROUP BY person, quant\n"
"ORDER BY person, quant;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:294
msgid "|person|quant|count(reading)|round(avg(reading), 2)|\n"
"|------|-----|--------------|----------------------|\n"
"|dyer  |rad  |2             |8.81                  |\n"
"|dyer  |sal  |2             |0.11                  |\n"
"|lake  |rad  |2             |1.82                  |\n"
"|lake  |sal  |4             |0.11                  |\n"
"|lake  |temp |1             |-16.0                 |\n"
"|pb    |rad  |3             |6.66                  |\n"
"|pb    |temp |2             |-20.0                 |\n"
"|roe   |rad  |1             |11.25                 |\n"
"|roe   |sal  |2             |32.05                 |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:306
msgid "Looking more closely,\n"
"this query:"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:309
# ordered list
msgid "1.  selected records from the `Survey` table"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:310
msgid "    where the `person` field was not null;"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:312
# ordered list
msgid "2.  grouped those records into subsets"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:313
msgid "    so that the `person` and `quant` values in each subset\n"
"    were the same;"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:316
# ordered list
msgid "3.  ordered those subsets first by `person`,"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:317
msgid "    and then within each sub-group by `quant`;\n"
"    and"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:320
# ordered list
msgid "4.  counted the number of records in each subset,"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:321
msgid "    calculated the average `reading` in each,\n"
"    and chose a `person` and `quant` value from each\n"
"    (it doesn't matter which ones,\n"
"    since they're all equal)."
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:326
# blockquote, which can be cascaded
msgid "> ## Counting Temperature Readings"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:327
msgid ">\n"
"> How many temperature readings did Frank Pabodie record,\n"
"> and what was their average value?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > SELECT count(reading), avg(reading) FROM Survey WHERE quant = 'temp' AND person = 'pb';\n"
"> > ~~~\n"
"> > {: .sql}\n"
"> >\n"
"> > |count(reading)|avg(reading)|\n"
"> > |--------------|------------|\n"
"> > |2             |-20.0       |"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:344
# blockquote, which can be cascaded
msgid "> ## Averaging with NULL"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:345
msgid ">\n"
"> The average of a set of values is the sum of the values\n"
"> divided by the number of values.\n"
"> Does this mean that the `avg` function returns 2.0 or 3.0\n"
"> when given the values 1.0, `null`, and 5.0?\n"
">\n"
"> > ## Solution\n"
"> > The answer is 3.0.\n"
"> > `NULL` is not a value; it is the absence of a value.\n"
"> > As such it is not included in the calculation.\n"
"> >\n"
"> > You can confirm this, by executing this code:\n"
"> > ```\n"
"> > SELECT AVG(a) FROM (\n"
"> >     SELECT 1 AS a\n"
"> >     UNION ALL SELECT NULL\n"
"> >     UNION ALL SELECT 5);\n"
"> > ```\n"
"> > {: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:367
# blockquote, which can be cascaded
msgid "> ## What Does This Query Do?"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:368
msgid ">\n"
"> We want to calculate the difference between\n"
"> each individual radiation reading\n"
"> and the average of all the radiation readings.\n"
"> We write the query:\n"
">\n"
"> ~~~\n"
"> SELECT reading - avg(reading) FROM Survey WHERE quant = 'rad';\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:378
msgid ">\n"
"> What does this actually produce, and why?"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:382
# blockquote, which can be cascaded
msgid "> ## Ordering When Concatenating"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:383
msgid ">\n"
"> The function `group_concat(field, separator)`\n"
"> concatenates all the values in a field\n"
"> using the specified separator character\n"
"> (or ',' if the separator isn't specified).\n"
"> Use this to produce a one-line list of scientists' names,\n"
"> such as:\n"
">\n"
"> ~~~\n"
"> William Dyer, Frank Pabodie, Anderson Lake, Valentina Roerich, Frank Danforth\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/06-agg.md:395
msgid ">\n"
"> Can you find a way to order the list by surname?"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:1
# Front Matter
msgid "---\n"
"title: \"Combining Data\"\n"
"teaching: 20\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I combine data from multiple tables?\"\n"
"objectives:\n"
"- \"Explain the operation of a query that joins two tables.\"\n"
"- \"Explain how to restrict the output of a query containing a join to only include meaningful combinations of values.\"\n"
"- \"Write queries that join tables on equal keys.\"\n"
"- \"Explain what primary and foreign keys are, and why they are useful.\"\n"
"keypoints:\n"
"- \"Use JOIN to combine data from two tables.\"\n"
"- \"Use table.field notation to refer to fields when doing joins.\"\n"
"- \"Every fact should be represented in a database exactly once.\"\n"
"- \"A join produces all combinations of records from one table with records from another.\"\n"
"- \"A primary key is a field (or set of fields) whose values uniquely identify the records in a table.\"\n"
"- \"A foreign key is a field (or set of fields) in one table whose values are a primary key in another table.\"\n"
"- \"We can eliminate meaningless combinations of records by matching primary keys and foreign keys between tables.\"\n"
"- \"The most common join condition is matching keys.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:22
msgid "In order to submit our data to a web site\n"
"that aggregates historical meteorological data,\n"
"we might need to format it as\n"
"latitude, longitude, date, quantity, and reading.\n"
"However,\n"
"our latitudes and longitudes are in the `Site` table,\n"
"while the dates of measurements are in the `Visited` table\n"
"and the readings themselves are in the `Survey` table.\n"
"We need to combine these tables somehow."
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:32
msgid "This figure shows the relations between the tables:"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:34
msgid "![Survey Database Structure](../fig/sql-join-structure.svg)"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:36
msgid "The SQL command to do this is `JOIN`.\n"
"To see how it works,\n"
"let's start by joining the `Site` and `Visited` tables:"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:40
# code block
msgid "~~~\n"
"SELECT * FROM Site JOIN Visited;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:45
msgid "|name |lat   |long   |id   |site  |dated     |\n"
"|-----|------|-------|-----|------|----------|\n"
"|DR-1 |-49.85|-128.57|619  |DR-1  |1927-02-08|\n"
"|DR-1 |-49.85|-128.57|622  |DR-1  |1927-02-10|\n"
"|DR-1 |-49.85|-128.57|734  |DR-3  |1930-01-07|\n"
"|DR-1 |-49.85|-128.57|735  |DR-3  |1930-01-12|\n"
"|DR-1 |-49.85|-128.57|751  |DR-3  |1930-02-26|\n"
"|DR-1 |-49.85|-128.57|752  |DR-3  |-null-    |\n"
"|DR-1 |-49.85|-128.57|837  |MSK-4 |1932-01-14|\n"
"|DR-1 |-49.85|-128.57|844  |DR-1  |1932-03-22|\n"
"|DR-3 |-47.15|-126.72|619  |DR-1  |1927-02-08|\n"
"|DR-3 |-47.15|-126.72|622  |DR-1  |1927-02-10|\n"
"|DR-3 |-47.15|-126.72|734  |DR-3  |1930-01-07|\n"
"|DR-3 |-47.15|-126.72|735  |DR-3  |1930-01-12|\n"
"|DR-3 |-47.15|-126.72|751  |DR-3  |1930-02-26|\n"
"|DR-3 |-47.15|-126.72|752  |DR-3  |-null-    |\n"
"|DR-3 |-47.15|-126.72|837  |MSK-4 |1932-01-14|\n"
"|DR-3 |-47.15|-126.72|844  |DR-1  |1932-03-22|\n"
"|MSK-4|-48.87|-123.4 |619  |DR-1  |1927-02-08|\n"
"|MSK-4|-48.87|-123.4 |622  |DR-1  |1927-02-10|\n"
"|MSK-4|-48.87|-123.4 |734  |DR-3  |1930-01-07|\n"
"|MSK-4|-48.87|-123.4 |735  |DR-3  |1930-01-12|\n"
"|MSK-4|-48.87|-123.4 |751  |DR-3  |1930-02-26|\n"
"|MSK-4|-48.87|-123.4 |752  |DR-3  |-null-    |\n"
"|MSK-4|-48.87|-123.4 |837  |MSK-4 |1932-01-14|\n"
"|MSK-4|-48.87|-123.4 |844  |DR-1  |1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:72
msgid "`JOIN` creates\n"
"the [cross product]({{ site.github.url }}/reference.html#cross-product)\n"
"of two tables,\n"
"i.e.,\n"
"it joins each record of one table with each record of the other table\n"
"to give all possible combinations.\n"
"Since there are three records in `Site`\n"
"and eight in `Visited`,\n"
"the join's output has 24 records (3 * 8 = 24) .\n"
"And since each table has three fields,\n"
"the output has six fields (3 + 3 = 6)."
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:84
msgid "What the join *hasn't* done is\n"
"figure out if the records being joined have anything to do with each other.\n"
"It has no way of knowing whether they do or not until we tell it how.\n"
"To do that,\n"
"we add a clause specifying that\n"
"we're only interested in combinations that have the same site name,\n"
"thus we need to use a filter:"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:92
# code block
msgid "~~~\n"
"SELECT * FROM Site JOIN Visited ON Site.name = Visited.site;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:97
msgid "|name |lat   |long   |id   |site |dated     |\n"
"|-----|------|-------|-----|-----|----------|\n"
"|DR-1 |-49.85|-128.57|619  |DR-1 |1927-02-08|\n"
"|DR-1 |-49.85|-128.57|622  |DR-1 |1927-02-10|\n"
"|DR-1 |-49.85|-128.57|844  |DR-1 |1932-03-22|\n"
"|DR-3 |-47.15|-126.72|734  |DR-3 |1930-01-07|\n"
"|DR-3 |-47.15|-126.72|735  |DR-3 |1930-01-12|\n"
"|DR-3 |-47.15|-126.72|751  |DR-3 |1930-02-26|\n"
"|DR-3 |-47.15|-126.72|752  |DR-3 |-null-    |\n"
"|MSK-4|-48.87|-123.4 |837  |MSK-4|1932-01-14|"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:108
msgid "`ON` is very similar to `WHERE`,\n"
"and for all the queries in this lesson you can use them interchangeably.\n"
"There are differences in how they affect [outer joins][outer],\n"
"but that's beyond the scope of this lesson.\n"
"Once we add this to our query,\n"
"the database manager throws away records\n"
"that combined information about two different sites,\n"
"leaving us with just the ones we want."
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:117
msgid "Notice that we used `Table.field` to specify field names\n"
"in the output of the join.\n"
"We do this because tables can have fields with the same name,\n"
"and we need to be specific which ones we're talking about.\n"
"For example,\n"
"if we joined the `Person` and `Visited` tables,\n"
"the result would inherit a field called `id`\n"
"from each of the original tables."
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:126
msgid "We can now use the same dotted notation\n"
"to select the three columns we actually want\n"
"out of our join:"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:130
# code block
msgid "~~~\n"
"SELECT Site.lat, Site.long, Visited.dated\n"
"FROM   Site JOIN Visited\n"
"ON     Site.name = Visited.site;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:137
msgid "|lat   |long   |dated     |\n"
"|------|-------|----------|\n"
"|-49.85|-128.57|1927-02-08|\n"
"|-49.85|-128.57|1927-02-10|\n"
"|-49.85|-128.57|1932-03-22|\n"
"|-47.15|-126.72|-null-    |\n"
"|-47.15|-126.72|1930-01-12|\n"
"|-47.15|-126.72|1930-02-26|\n"
"|-47.15|-126.72|1930-01-07|\n"
"|-48.87|-123.4 |1932-01-14|"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:148
msgid "If joining two tables is good,\n"
"joining many tables must be better.\n"
"In fact,\n"
"we can join any number of tables\n"
"simply by adding more `JOIN` clauses to our query,\n"
"and more `ON` tests to filter out combinations of records\n"
"that don't make sense:"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:156
# code block
msgid "~~~\n"
"SELECT Site.lat, Site.long, Visited.dated, Survey.quant, Survey.reading\n"
"FROM   Site JOIN Visited JOIN Survey\n"
"ON     Site.name = Visited.site\n"
"AND    Visited.id = Survey.taken\n"
"AND    Visited.dated IS NOT NULL;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:165
msgid "|lat   |long   |dated     |quant|reading|\n"
"|------|-------|----------|-----|-------|\n"
"|-49.85|-128.57|1927-02-08|rad  |9.82   |\n"
"|-49.85|-128.57|1927-02-08|sal  |0.13   |\n"
"|-49.85|-128.57|1927-02-10|rad  |7.8    |\n"
"|-49.85|-128.57|1927-02-10|sal  |0.09   |\n"
"|-47.15|-126.72|1930-01-07|rad  |8.41   |\n"
"|-47.15|-126.72|1930-01-07|sal  |0.05   |\n"
"|-47.15|-126.72|1930-01-07|temp |-21.5  |\n"
"|-47.15|-126.72|1930-01-12|rad  |7.22   |\n"
"|-47.15|-126.72|1930-01-12|sal  |0.06   |\n"
"|-47.15|-126.72|1930-01-12|temp |-26.0  |\n"
"|-47.15|-126.72|1930-02-26|rad  |4.35   |\n"
"|-47.15|-126.72|1930-02-26|sal  |0.1    |\n"
"|-47.15|-126.72|1930-02-26|temp |-18.5  |\n"
"|-48.87|-123.4 |1932-01-14|rad  |1.46   |\n"
"|-48.87|-123.4 |1932-01-14|sal  |0.21   |\n"
"|-48.87|-123.4 |1932-01-14|sal  |22.5   |\n"
"|-49.85|-128.57|1932-03-22|rad  |11.25  |"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:185
msgid "We can tell which records from `Site`, `Visited`, and `Survey`\n"
"correspond with each other\n"
"because those tables contain\n"
"[primary keys]({{ site.github.url }}/reference.html#primary-key)\n"
"and [foreign keys]({{ site.github.url }}/reference.html#foreign-key).\n"
"A primary key is a value,\n"
"or combination of values,\n"
"that uniquely identifies each record in a table.\n"
"A foreign key is a value (or combination of values) from one table\n"
"that identifies a unique record in another table.\n"
"Another way of saying this is that\n"
"a foreign key is the primary key of one table\n"
"that appears in some other table.\n"
"In our database,\n"
"`Person.id` is the primary key in the `Person` table,\n"
"while `Survey.person` is a foreign key\n"
"relating the `Survey` table's entries\n"
"to entries in `Person`."
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:204
msgid "Most database designers believe that\n"
"every table should have a well-defined primary key.\n"
"They also believe that this key should be separate from the data itself,\n"
"so that if we ever need to change the data,\n"
"we only need to make one change in one place.\n"
"One easy way to do this is\n"
"to create an arbitrary, unique ID for each record\n"
"as we add it to the database.\n"
"This is actually very common:\n"
"those IDs have names like \"student numbers\" and \"patient numbers\",\n"
"and they almost always turn out to have originally been\n"
"a unique record identifier in some database system or other.\n"
"As the query below demonstrates,\n"
"SQLite [automatically numbers records][rowid] as they're added to tables,\n"
"and we can use those record numbers in queries:"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:220
# code block
msgid "~~~\n"
"SELECT rowid, * FROM Person;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:225
msgid "|rowid|id      |personal |family  |\n"
"|-----|--------|---------|--------|\n"
"|1    |dyer    |William  |Dyer    |\n"
"|2    |pb      |Frank    |Pabodie |\n"
"|3    |lake    |Anderson |Lake    |\n"
"|4    |roe     |Valentina|Roerich |\n"
"|5    |danforth|Frank    |Danforth|"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:233
# blockquote, which can be cascaded
msgid "> ## Listing Radiation Readings"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:234
msgid ">\n"
"> Write a query that lists all radiation readings from the DR-1 site.\n"
" > > ## Solution\n"
" > > \n"
" > > ~~~\n"
" > > SELECT Survey.reading \n"
" > > FROM Site JOIN Visited JOIN Survey \n"
" > > ON Site.name = Visited.site\n"
" > > AND Visited.id = Survey.taken\n"
" > > WHERE Site.name = \"DR-1\" \n"
" > > AND Survey.quant = \"rad\";\n"
" > > ~~~\n"
" > > {: .sql}\n"
" > >\n"
" > > |reading   |\n"
" > > |----------|\n"
" > > |9.82      |\n"
" > > |7.8       |\n"
" > > |11.25     |\n"
" > {: .solution}"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:256
# blockquote, which can be cascaded
msgid "> ## Where's Frank?"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:257
msgid ">\n"
"> Write a query that lists all sites visited by people named \"Frank\".\n"
" > > ## Solution\n"
" > > \n"
" > > ~~~\n"
" > > SELECT DISTINCT Site.name\n"
" > > FROM Site JOIN Visited JOIN Survey JOIN Person\n"
" > > ON Site.name = Visited.site\n"
" > > AND Visited.id = Survey.taken\n"
" > > AND Survey.person = Person.id\n"
" > > WHERE Person.personal = \"Frank\";\n"
" > > ~~~\n"
" > > {: .sql}\n"
" > >\n"
" > > |name   |\n"
" > > |-------|\n"
" > > |DR-3   |\n"
" > {: .solution}"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:277
# blockquote, which can be cascaded
msgid "> ## Reading Queries"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:278
msgid ">\n"
"> Describe in your own words what the following query produces:\n"
">\n"
"> ~~~\n"
"> SELECT Site.name FROM Site JOIN Visited\n"
"> ON Site.lat <- 49.0 AND Site.name = Visited.site AND Visited.dated >= '1932-01-01';\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:288
# blockquote, which can be cascaded
msgid "> ## Who Has Been Where?"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:289
msgid ">\n"
"> Write a query that shows each site with exact location (lat, long) ordered by visited date,\n"
"> followed by personal name and family name of the person who visited the site\n"
"> and the type of measurement taken and its reading. Please avoid all null values.\n"
"> Tip: you should get 15 records with 8 fields.\n"
" > > ## Solution\n"
" > > \n"
" > > ~~~\n"
" > > SELECT Site.name, Site.lat, Site.long, Person.personal, Person.family, Survey.quant, Survey.reading, Visited.dated\n"
" > > FROM Site JOIN Visited JOIN Survey JOIN Person\n"
" > > ON Site.name = Visited.site\n"
" > > AND Visited.id = Survey.taken\n"
" > > AND Survey.person = Person.id\n"
" > > WHERE Survey.person IS NOT NULL\n"
" > > AND Visited.dated IS NOT NULL\n"
" > > ORDER BY Visited.dated;\n"
" > > ~~~\n"
" > > {: .sql}\n"
" > >\n"
" > > name   |  lat        |  long       |  personal   | family   | quant     | reading   |     dated\n"
" > >--------|-------------|-------------|-------------|----------|-----------|-----------|-----------\n"
" > >DR-1    |    -49.85   |   -128.57   |  William    | Dyer     |   rad     |    9.82   |   1927-02-08\n"
" > >DR-1    |    -49.85   |   -128.57   |  William    | Dyer     |   sal     |    0.13   |   1927-02-08\n"
" > >DR-1    |    -49.85   |   -128.57   |  William    | Dyer     |   rad     |    7.8    |   1927-02-10\n"
" > >DR-1    |    -49.85   |   -128.57   |  William    | Dyer     |   sal     |    0.09   |   1927-02-10\n"
" > >DR-3    |    -47.15   |   -126.72   |  Anderson   | Lake     |   sal     |    0.05   |   1930-01-07\n"
" > >DR-3    |    -47.15   |   -126.72   |  Frank      | Pabodie  |   rad     |    8.41   |   1930-01-07\n"
" > >DR-3    |    -47.15   |   -126.72   |  Frank      | Pabodie  |   temp    |    -21.5  |   1930-01-07\n"
" > >DR-3    |    -47.15   |   -126.72   |  Frank      | Pabodie  |   rad     |    7.22   |   1930-01-12\n"
" > >DR-3    |    -47.15   |   -126.72   |  Anderson   | Lake     |   sal     |    0.1    |   1930-02-26\n"
" > >DR-3    |    -47.15   |   -126.72   |  Frank      | Pabodie  |   rad     |    4.35   |   1930-02-26\n"
" > >DR-3    |    -47.15   |   -126.72   |  Frank      | Pabodie  |   temp    |    -18.5  |   1930-02-26\n"
" > >MSK-4   |    -48.87   |   -123.4    |  Anderson   | Lake     |   rad     |    1.46   |   1932-01-14\n"
" > >MSK-4   |    -48.87   |   -123.4    |  Anderson   | Lake     |   sal     |    0.21   |   1932-01-14\n"
" > >MSK-4   |    -48.87   |   -123.4    |  Valentina  | Roerich  |   sal     |    22.5   |   1932-01-14\n"
" > >DR-1    |    -49.85   |   -128.57   |  Valentina  | Roerich  |   rad     |    11.25  |   1932-03-22\n"
" > {: .solution}"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:328
msgid "A good visual explanation of joins can be found [here][joinref]"
msgstr ""

#: sql-novice-survey/_episodes/07-join.md:330
msgid "[outer]: https://en.wikipedia.org/wiki/Join_%28SQL%29#Outer_join\n"
"[rowid]: https://www.sqlite.org/lang_createtable.html#rowid\n"
"[joinref]: https://sql-joins.leopard.in.ua/"
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:1
# Front Matter
msgid "---\n"
"title: \"Data Hygiene\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How should I format data in a database, and why?\"\n"
"objectives:\n"
"- \"Explain what an atomic value is.\"\n"
"- \"Distinguish between atomic and non-atomic values.\"\n"
"- \"Explain why every value in a database should be atomic.\"\n"
"- \"Explain what a primary key is and why every record should have one.\"\n"
"- \"Identify primary keys in database tables.\"\n"
"- \"Explain why database entries should not contain redundant information.\"\n"
"- \"Identify redundant information in databases.\"\n"
"keypoints:\n"
"- \"Every value in a database should be atomic.\"\n"
"- \"Every record should have a unique primary key.\"\n"
"- \"A database should not contain redundant information.\"\n"
"- \"Units and similar metadata should be stored with the data.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:22
msgid "Now that we have seen how joins work, we can see why the relational\n"
"model is so useful and how best to use it.  The first rule is that\n"
"every value should be [atomic]({{ site.github.url }}/reference.html#atomic), i.e., not\n"
"contain parts that we might want to work with separately.  We store\n"
"personal and family names in separate columns instead of putting the\n"
"entire name in one column so that we don't have to use substring\n"
"operations to get the name's components.  More importantly, we store\n"
"the two parts of the name separately because splitting on spaces is\n"
"unreliable: just think of a name like \"Eloise St. Cyr\" or \"Jan Mikkel\n"
"Steubart\"."
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:33
msgid "The second rule is that every record should have a unique primary key.\n"
"This can be a serial number that has no intrinsic meaning,\n"
"one of the values in the record (like the `id` field in the `Person` table),\n"
"or even a combination of values:\n"
"the triple `(taken, person, quant)` from the `Survey` table uniquely identifies every measurement."
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:39
msgid "The third rule is that there should be no redundant information.\n"
"For example,\n"
"we could get rid of the `Site` table and rewrite the `Visited` table like this:"
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:43
msgid "|id   |lat   |long   |dated      |\n"
"|-----|------|-------|-----------|\n"
"|619  |-49.85|-128.57| 1927-02-08|\n"
"|622  |-49.85|-128.57| 1927-02-10|\n"
"|734  |-47.15|-126.72| 1930-01-07|\n"
"|735  |-47.15|-126.72| 1930-01-12|\n"
"|751  |-47.15|-126.72| 1930-02-26|\n"
"|752  |-47.15|-126.72| -null-    |\n"
"|837  |-48.87|-123.40| 1932-01-14|\n"
"|844  |-49.85|-128.57| 1932-03-22|"
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:54
msgid "In fact,\n"
"we could use a single table that recorded all the information about each reading in each row,\n"
"just as a spreadsheet would.\n"
"The problem is that it's very hard to keep data organized this way consistent:\n"
"if we realize that the date of a particular visit to a particular site is wrong,\n"
"we have to change multiple records in the database.\n"
"What's worse,\n"
"we may have to guess which records to change,\n"
"since other sites may also have been visited on that date."
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:64
msgid "The fourth rule is that the units for every value should be stored explicitly.\n"
"Our database doesn't do this,\n"
"and that's a problem:\n"
"Roerich's salinity measurements are several orders of magnitude larger than anyone else's,\n"
"but we don't know if that means she was using parts per million instead of parts per thousand,\n"
"or whether there actually was a saline anomaly at that site in 1932."
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:71
msgid "Stepping back,\n"
"data and the tools used to store it have a symbiotic relationship:\n"
"we use tables and joins because it's efficient,\n"
"provided our data is organized a certain way,\n"
"but organize our data that way because we have tools to manipulate it efficiently.\n"
"As anthropologists say,\n"
"the tool shapes the hand that shapes the tool."
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:79
# blockquote, which can be cascaded
msgid "> ## Identifying Atomic Values"
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:80
msgid ">\n"
"> Which of the following are atomic values? Which are not? Why?\n"
">\n"
"> *   New Zealand\n"
"> *   87 Turing Avenue\n"
"> *   January 25, 1971\n"
"> *   the XY coordinate (0.5, 3.3)\n"
">\n"
"> > ## Solution\n"
"> > New Zealand is the only clear-cut atomic value.\n"
"> >\n"
"> > The address and the XY coordinate contain more than one piece of information\n"
"> > which should be stored separately:\n"
"> > - House number, street name\n"
"> > - X coordinate, Y coordinate\n"
"> >\n"
"> > The date entry is less clear cut, because it contains month, day, and year elements.\n"
"> > However, there is a `DATE` datatype in SQL, and dates should be stored using this format.\n"
"> > If we need to work with the month, day, or year separately, we can use the SQL functions available for our database software\n"
"> > (for example [`EXTRACT`](https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions050.htm) or [`STRFTIME`](http://www.sqlite.org/lang_datefunc.html) for SQLite)."
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:103
# blockquote, which can be cascaded
msgid "> ## Identifying a Primary Key"
msgstr ""

#: sql-novice-survey/_episodes/08-hygiene.md:104
msgid ">\n"
"> What is the primary key in this table?\n"
"> I.e., what value or combination of values uniquely identifies a record?\n"
">\n"
"> |latitude|longitude|date      |temperature|\n"
"> |--------|---------|----------|-----------|\n"
"> |57.3    |-22.5    |2015-01-09|-14.2      |\n"
">\n"
"> > ## Solution\n"
"> > Latitude, longitude, and date are all required to uniquely identify the temperature record."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:1
# Front Matter
msgid "---\n"
"title: \"Creating and Modifying Data\"\n"
"teaching: 15\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I create, modify, and delete tables and data?\"\n"
"objectives:\n"
"- \"Write statements that create tables.\"\n"
"- \"Write statements to insert, modify, and delete records.\"\n"
"keypoints:\n"
"- \"Use CREATE and DROP to create and delete tables.\"\n"
"- \"Use INSERT to add data.\"\n"
"- \"Use UPDATE to modify existing data.\"\n"
"- \"Use DELETE to remove data.\"\n"
"- \"It is simpler and safer to modify data when every record has a unique primary key.\"\n"
"- \"Do not create dangling references by deleting records that other records refer to.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:18
msgid "So far we have only looked at how to get information out of a database,\n"
"both because that is more frequent than adding information,\n"
"and because most other operations only make sense\n"
"once queries are understood.\n"
"If we want to create and modify data,\n"
"we need to know two other sets of commands."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:25
msgid "The first pair are [`CREATE TABLE`][create-table] and [`DROP TABLE`][drop-table].\n"
"While they are written as two words,\n"
"they are actually single commands.\n"
"The first one creates a new table;\n"
"its arguments are the names and types of the table's columns.\n"
"For example,\n"
"the following statements create the four tables in our survey database:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:33
# code block
msgid "~~~\n"
"CREATE TABLE Person(id text, personal text, family text);\n"
"CREATE TABLE Site(name text, lat real, long real);\n"
"CREATE TABLE Visited(id integer, site text, dated text);\n"
"CREATE TABLE Survey(taken integer, person text, quant real, reading real);\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:41
msgid "We can get rid of one of our tables using:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:43
# code block
msgid "~~~\n"
"DROP TABLE Survey;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:48
msgid "Be very careful when doing this:\n"
"if you drop the wrong table, hope that the person maintaining the database has a backup,\n"
"but it's better not to have to rely on it."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:52
msgid "Different database systems support different data types for table columns,\n"
"but most provide the following:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:55
msgid "|data type|  use                                       | \n"
"|---------|  ----------------------------------------- |\n"
"|INTEGER  |  a signed integer                          |\n"
"|REAL     |  a floating point number                   |\n"
"|TEXT     |  a character string                        |\n"
"|BLOB     |  a \"binary large object\", such as an image |"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:62
msgid "Most databases also support Booleans and date/time values;\n"
"SQLite uses the integers 0 and 1 for the former,\n"
"and represents the latter as discussed [earlier]({{ page.root }}/03-filter/#date-types).\n"
"An increasing number of databases also support geographic data types,\n"
"such as latitude and longitude.\n"
"Keeping track of what particular systems do or do not offer,\n"
"and what names they give different data types,\n"
"is an unending portability headache."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:71
msgid "When we create a table,\n"
"we can specify several kinds of constraints on its columns.\n"
"For example,\n"
"a better definition for the `Survey` table would be:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:76
# code block
msgid "~~~\n"
"CREATE TABLE Survey(\n"
"    taken   integer not null, -- where reading taken\n"
"    person  text,             -- may not know who took it\n"
"    quant   real not null,    -- the quantity measured\n"
"    reading real not null,    -- the actual reading\n"
"    primary key(taken, quant),\n"
"    foreign key(taken) references Visited(id),\n"
"    foreign key(person) references Person(id)\n"
");\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:89
msgid "Once again,\n"
"exactly what constraints are available\n"
"and what they're called\n"
"depends on which database manager we are using."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:94
msgid "Once tables have been created,\n"
"we can add, change, and remove records using our other set of commands,\n"
"`INSERT`, `UPDATE`, and `DELETE`."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:98
msgid "The simplest form of `INSERT` statement lists values in order:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:100
# code block
msgid "~~~\n"
"INSERT INTO Site VALUES('DR-1', -49.85, -128.57);\n"
"INSERT INTO Site VALUES('DR-3', -47.15, -126.72);\n"
"INSERT INTO Site VALUES('MSK-4', -48.87, -123.40);\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:107
msgid "We can also insert values into one table directly from another:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:109
# code block
msgid "~~~\n"
"CREATE TABLE JustLatLong(lat text, long text);\n"
"INSERT INTO JustLatLong SELECT lat, long FROM Site;\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:115
msgid "Modifying existing records is done using the `UPDATE` statement.\n"
"To do this we tell the database which table we want to update,\n"
"what we want to change the values to for any or all of the fields,\n"
"and under what conditions we should update the values."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:120
msgid "For example, if we made a mistake when entering the lat and long values\n"
"of the last `INSERT` statement above:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:123
# code block
msgid "~~~\n"
"UPDATE Site SET lat = -47.87, long = -122.40 WHERE name = 'MSK-4';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:128
msgid "Be careful to not forget the `WHERE` clause or the update statement will\n"
"modify *all* of the records in the database."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:131
msgid "Deleting records can be a bit trickier,\n"
"because we have to ensure that the database remains internally consistent.\n"
"If all we care about is a single table,\n"
"we can use the `DELETE` command with a `WHERE` clause\n"
"that matches the records we want to discard.\n"
"For example,\n"
"once we realize that Frank Danforth didn't take any measurements,\n"
"we can remove him from the `Person` table like this:"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:140
# code block
msgid "~~~\n"
"DELETE FROM Person WHERE id = 'danforth';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:145
msgid "But what if we removed Anderson Lake instead?\n"
"Our `Survey` table would still contain seven records\n"
"of measurements he'd taken,\n"
"but that's never supposed to happen:\n"
"`Survey.person` is a foreign key into the `Person` table,\n"
"and all our queries assume there will be a row in the latter\n"
"matching every value in the former."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:153
msgid "This problem is called [referential integrity]({{ site.github.url }}/reference.html#referential-integrity):\n"
"we need to ensure that all references between tables can always be resolved correctly.\n"
"One way to do this is to delete all the records\n"
"that use `'lake'` as a foreign key\n"
"before deleting the record that uses it as a primary key.\n"
"If our database manager supports it,\n"
"we can automate this\n"
"using [cascading delete]({{ site.github.url }}/reference.html#cascading-delete).\n"
"However,\n"
"this technique is outside the scope of this chapter."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:164
# blockquote, which can be cascaded
msgid "> ## Hybrid Storage Models"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:165
msgid ">\n"
"> Many applications use a hybrid storage model\n"
"> instead of putting everything into a database:\n"
"> the actual data (such as astronomical images) is stored in files,\n"
"> while the database stores the files' names,\n"
"> their modification dates,\n"
"> the region of the sky they cover,\n"
"> their spectral characteristics,\n"
"> and so on.\n"
"> This is also how most music player software is built:\n"
"> the database inside the application keeps track of the MP3 files,\n"
"> but the files themselves live on disk."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:179
# blockquote, which can be cascaded
msgid "> ## Replacing NULL"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:180
msgid ">\n"
"> Write an SQL statement to replace all uses of `null` in\n"
"> `Survey.person` with the string `'unknown'`.\n"
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > UPDATE Survey SET person = \"unknown\" WHERE person IS NULL;\n"
"> > ~~~\n"
"> > {: .sql}"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:192
# blockquote, which can be cascaded
msgid "> ## Generating Insert Statements"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:193
msgid ">\n"
"> One of our colleagues has sent us a [CSV]({{ site.github.url }}/reference.html#comma-separated-values-csv) file containing\n"
"> temperature readings by Robert Olmstead, which is formatted like\n"
"> this:\n"
">\n"
"> ~~~\n"
"> Taken,Temp\n"
"> 619,-21.5\n"
"> 622,-15.5\n"
"> ~~~"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:204
msgid ">\n"
"> Write a small Python program that reads this file in and prints out\n"
"> the SQL `INSERT` statements needed to add these records to the\n"
"> survey database.  Note: you will need to add an entry for Olmstead\n"
"> to the `Person` table.  If you are testing your program repeatedly,\n"
"> you may want to investigate SQL's `INSERT or REPLACE` command."
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:212
# blockquote, which can be cascaded
msgid "> ## Backing Up with SQL"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:213
msgid ">\n"
"> SQLite has several administrative commands that aren't part of the\n"
"> SQL standard.  One of them is `.dump`, which prints the SQL commands\n"
"> needed to re-create the database.  Another is `.read`, which reads a\n"
"> file created by `.dump` and restores the database.  A colleague of\n"
"> yours thinks that storing dump files (which are text) in version\n"
"> control is a good way to track and manage changes to the database.\n"
"> What are the pros and cons of this approach?  (Hint: records aren't\n"
"> stored in any particular order.)\n"
">\n"
"> > ## Solution\n"
"> > #### Advantages\n"
"> > - A version control system will be able to show differences between versions\n"
"> > of the dump file; something it can't do for binary files like databases\n"
"> > - A VCS only saves changes between versions, rather than a complete copy of\n"
"> > each version (save disk space)\n"
"> > - The version control log will explain the reason for the changes in each version\n"
"> > of the database\n"
"> >\n"
"> > #### Disadvantages\n"
"> > - Artificial differences between commits because records don't have a fixed order"
msgstr ""

#: sql-novice-survey/_episodes/09-create.md:237
msgid "[create-table]: https://www.sqlite.org/lang_createtable.html\n"
"[drop-table]: https://www.sqlite.org/lang_droptable.html"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:1
# Front Matter
msgid "---\n"
"title: \"Programming with Databases - Python\"\n"
"teaching: 20\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I access databases from programs written in Python?\"\n"
"objectives:\n"
"- \"Write short programs that execute SQL queries.\"\n"
"- \"Trace the execution of a program that contains an SQL query.\"\n"
"- \"Explain why most database applications are written in a general-purpose language rather than in SQL.\"\n"
"keypoints:\n"
"- \"General-purpose languages have libraries for accessing databases.\"\n"
"- \"To connect to a database, a program must use a library specific to that database manager.\"\n"
"- \"These libraries use a connection-and-cursor model.\"\n"
"- \"Programs can read query results in batches or all at once.\"\n"
"- \"Queries should be written using parameter substitution, not string formatting.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:18
msgid "To close,\n"
"let's have a look at how to access a database from\n"
"a general-purpose programming language like Python.\n"
"Other languages use almost exactly the same model:\n"
"library and function names may differ,\n"
"but the concepts are the same."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:25
msgid "Here's a short Python program that selects latitudes and longitudes\n"
"from an SQLite database stored in a file called `survey.db`:"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:28
# code block
msgid "~~~\n"
"import sqlite3\n"
"\n"
"connection = sqlite3.connect(\"survey.db\")\n"
"cursor = connection.cursor()\n"
"cursor.execute(\"SELECT Site.lat, Site.long FROM Site;\")\n"
"results = cursor.fetchall()\n"
"for r in results:\n"
"    print(r)\n"
"cursor.close()\n"
"connection.close()\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:40
#: sql-novice-survey/_episodes/10-prog.md:111
#: sql-novice-survey/_episodes/10-prog.md:171
#: sql-novice-survey/_episodes/10-prog.md:222
#: sql-novice-survey/_episodes/10-prog.md:266
# SC/DC Template label
msgid "{: .python}"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:41
# code block
msgid "~~~\n"
"(-49.85, -128.57)\n"
"(-47.15, -126.72)\n"
"(-48.87, -123.4)\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:46
#: sql-novice-survey/_episodes/10-prog.md:115
#: sql-novice-survey/_episodes/10-prog.md:175
#: sql-novice-survey/_episodes/10-prog.md:226
#: sql-novice-survey/_episodes/10-prog.md:270
#: sql-novice-survey/_episodes/11-prog-R.md:44
#: sql-novice-survey/_episodes/11-prog-R.md:100
#: sql-novice-survey/_episodes/11-prog-R.md:160
#: sql-novice-survey/_episodes/11-prog-R.md:208
#: sql-novice-survey/_episodes/11-prog-R.md:220
#: sql-novice-survey/_episodes/11-prog-R.md:237
#: sql-novice-survey/_episodes/11-prog-R.md:259
# SC/DC Template label
msgid "{: .output}"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:48
msgid "The program starts by importing the `sqlite3` library.\n"
"If we were connecting to MySQL, DB2, or some other database,\n"
"we would import a different library,\n"
"but all of them provide the same functions,\n"
"so that the rest of our program does not have to change\n"
"(at least, not much)\n"
"if we switch from one database to another."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:56
msgid "Line 2 establishes a connection to the database.\n"
"Since we're using SQLite,\n"
"all we need to specify is the name of the database file.\n"
"Other systems may require us to provide a username and password as well.\n"
"Line 3 then uses this connection to create a [cursor]({{ site.github.url }}/reference.html#cursor).\n"
"Just like the cursor in an editor,\n"
"its role is to keep track of where we are in the database."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:64
msgid "On line 4, we use that cursor to ask the database to execute a query for us.\n"
"The query is written in SQL,\n"
"and passed to `cursor.execute` as a string.\n"
"It's our job to make sure that SQL is properly formatted;\n"
"if it isn't,\n"
"or if something goes wrong when it is being executed,\n"
"the database will report an error."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:72
msgid "The database returns the results of the query to us\n"
"in response to the `cursor.fetchall` call on line 5.\n"
"This result is a list with one entry for each record in the result set;\n"
"if we loop over that list (line 6) and print those list entries (line 7),\n"
"we can see that each one is a tuple\n"
"with one element for each field we asked for."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:79
msgid "Finally, lines 8 and 9 close our cursor and our connection,\n"
"since the database can only keep a limited number of these open at one time.\n"
"Since establishing a connection takes time,\n"
"though,\n"
"we shouldn't open a connection,\n"
"do one operation,\n"
"then close the connection,\n"
"only to reopen it a few microseconds later to do another operation.\n"
"Instead,\n"
"it's normal to create one connection that stays open for the lifetime of the program."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:90
#: sql-novice-survey/_episodes/11-prog-R.md:77
msgid "Queries in real applications will often depend on values provided by users.\n"
"For example,\n"
"this function takes a user's ID as a parameter and returns their name:"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:94
# code block
msgid "~~~\n"
"import sqlite3\n"
"\n"
"def get_name(database_file, person_id):\n"
"    query = \"SELECT personal || ' ' || family FROM Person WHERE id='\" + person_id + \"';\"\n"
"\n"
"    connection = sqlite3.connect(database_file)\n"
"    cursor = connection.cursor()\n"
"    cursor.execute(query)\n"
"    results = cursor.fetchall()\n"
"    cursor.close()\n"
"    connection.close()\n"
"\n"
"    return results[0][0]\n"
"\n"
"print(\"Full name for dyer:\", get_name('survey.db', 'dyer'))\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:112
#: sql-novice-survey/_episodes/10-prog.md:172
# code block
msgid "~~~\n"
"Full name for dyer: William Dyer\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:117
#: sql-novice-survey/_episodes/11-prog-R.md:102
msgid "We use string concatenation on the first line of this function\n"
"to construct a query containing the user ID we have been given.\n"
"This seems simple enough,\n"
"but what happens if someone gives us this string as input?"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:122
# code block
msgid "~~~\n"
"dyer'; DROP TABLE Survey; SELECT '\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:125
# SC/DC Template label
msgid "{: .source}"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:127
#: sql-novice-survey/_episodes/11-prog-R.md:112
msgid "It looks like there's garbage after the user's ID,\n"
"but it is very carefully chosen garbage.\n"
"If we insert this string into our query,\n"
"the result is:"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:132
# code block
msgid "~~~\n"
"SELECT personal || ' ' || family FROM Person WHERE id='dyer'; DROP TABLE Survey; SELECT '';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:137
#: sql-novice-survey/_episodes/11-prog-R.md:122
msgid "If we execute this,\n"
"it will erase one of the tables in our database."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:140
msgid "This is called an [SQL injection attack]({{ site.github.url }}/reference.html#sql-injection-attack),\n"
"and it has been used to attack thousands of programs over the years.\n"
"In particular,\n"
"many web sites that take data from users insert values directly into queries\n"
"without checking them carefully first."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:146
msgid "Since a villain might try to smuggle commands into our queries in many different ways,\n"
"the safest way to deal with this threat is\n"
"to replace characters like quotes with their escaped equivalents,\n"
"so that we can safely put whatever the user gives us inside a string.\n"
"We can do this by using a [prepared statement]({{ site.github.url }}/reference.html#prepared-statement)\n"
"instead of formatting our statements as strings.\n"
"Here's what our example program looks like if we do this:"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:154
# code block
msgid "~~~\n"
"import sqlite3\n"
"\n"
"def get_name(database_file, person_id):\n"
"    query = \"SELECT personal || ' ' || family FROM Person WHERE id=?;\"\n"
"\n"
"    connection = sqlite3.connect(database_file)\n"
"    cursor = connection.cursor()\n"
"    cursor.execute(query, [person_id])\n"
"    results = cursor.fetchall()\n"
"    cursor.close()\n"
"    connection.close()\n"
"\n"
"    return results[0][0]\n"
"\n"
"print(\"Full name for dyer:\", get_name('survey.db', 'dyer'))\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:177
msgid "The key changes are in the query string and the `execute` call.\n"
"Instead of formatting the query ourselves,\n"
"we put question marks in the query template where we want to insert values.\n"
"When we call `execute`,\n"
"we provide a list\n"
"that contains as many values as there are question marks in the query.\n"
"The library matches values to question marks in order,\n"
"and translates any special characters in the values\n"
"into their escaped equivalents\n"
"so that they are safe to use."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:188
msgid "We can also use `sqlite3`'s cursor to make changes to our database,\n"
"such as inserting a new name.\n"
"For instance, we can define a new function called `add_name` like so:"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:192
# code block
msgid "~~~\n"
"import sqlite3\n"
"\n"
"def add_name(database_file, new_person):\n"
"    query = \"INSERT INTO Person VALUES (?, ?, ?);\"\n"
"\n"
"    connection = sqlite3.connect(database_file)\n"
"    cursor = connection.cursor()\n"
"    cursor.execute(query, list(new_person))\n"
"    cursor.close()\n"
"    connection.close()\n"
"\n"
"\n"
"def get_name(database_file, person_id):\n"
"    query = \"SELECT personal || ' ' || family FROM Person WHERE id=?;\"\n"
"\n"
"    connection = sqlite3.connect(database_file)\n"
"    cursor = connection.cursor()\n"
"    cursor.execute(query, [person_id])\n"
"    results = cursor.fetchall()\n"
"    cursor.close()\n"
"    connection.close()\n"
"\n"
"    return results[0][0]\n"
"\n"
"# Insert a new name\n"
"add_name('survey.db', ('barrett', 'Mary', 'Barrett'))\n"
"# Check it exists\n"
"print(\"Full name for barrett:\", get_name('survey.db', 'barrett'))\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:223
# code block
msgid "~~~\n"
"IndexError: list index out of range\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:228
msgid "Note that in versions of sqlite3 >= 2.5, the `get_name` function described\n"
"above will fail with an `IndexError: list index out of range`,\n"
"even though we added Mary's\n"
"entry into the table using `add_name`.\n"
"This is because we must perform a `connection.commit()` before closing\n"
"the connection, in order to save our changes to the database."
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:235
# code block
msgid "~~~\n"
"import sqlite3\n"
"\n"
"def add_name(database_file, new_person):\n"
"    query = \"INSERT INTO Person VALUES (?, ?, ?);\"\n"
"\n"
"    connection = sqlite3.connect(database_file)\n"
"    cursor = connection.cursor()\n"
"    cursor.execute(query, list(new_person))\n"
"    cursor.close()\n"
"    connection.commit()\n"
"    connection.close()\n"
"\n"
"\n"
"def get_name(database_file, person_id):\n"
"    query = \"SELECT personal || ' ' || family FROM Person WHERE id=?;\"\n"
"\n"
"    connection = sqlite3.connect(database_file)\n"
"    cursor = connection.cursor()\n"
"    cursor.execute(query, [person_id])\n"
"    results = cursor.fetchall()\n"
"    cursor.close()\n"
"    connection.close()\n"
"\n"
"    return results[0][0]\n"
"\n"
"# Insert a new name\n"
"add_name('survey.db', ('barrett', 'Mary', 'Barrett'))\n"
"# Check it exists\n"
"print(\"Full name for barrett:\", get_name('survey.db', 'barrett'))\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:267
# code block
msgid "~~~\n"
"Full name for barrett: Mary Barrett\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:273
# blockquote, which can be cascaded
msgid "> ## Filling a Table vs. Printing Values"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:274
msgid ">\n"
"> Write a Python program that creates a new database in a file called\n"
"> `original.db` containing a single table called `Pressure`, with a\n"
"> single field called `reading`, and inserts 100,000 random numbers\n"
"> between 10.0 and 25.0.  How long does it take this program to run?\n"
"> How long does it take to run a program that simply writes those\n"
"> random numbers to a file?\n"
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > import sqlite3\n"
"> > # import random number generator\n"
"> > from numpy.random import uniform\n"
"> >\n"
"> > random_numbers = uniform(low=10.0, high=25.0, size=100000)\n"
"> >\n"
"> > connection = sqlite3.connect(\"original.db\")\n"
"> > cursor = connection.cursor()\n"
"> > cursor.execute(\"CREATE TABLE Pressure (reading float not null)\")\n"
"> > query = \"INSERT INTO Pressure values (?);\"\n"
"> >\n"
"> > for number in random_numbers:\n"
"> >     cursor.execute(query, [number])\n"
"> >\n"
"> > cursor.close()\n"
"> > # save changes to file for next exercise\n"
"> > connection.commit()\n"
"> > connection.close()\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > For comparison, the following program writes the random numbers\n"
"> > into the file `random_numbers.txt`:\n"
"> >\n"
"> > ~~~\n"
"> > from numpy.random import uniform\n"
"> >\n"
"> > random_numbers = uniform(low=10.0, high=25.0, size=100000)\n"
"> > with open('random_numbers.txt', 'w') as outfile:\n"
"> >     for number in random_numbers:\n"
"> >         # need to add linebreak \\n\n"
"> >         outfile.write(\"{}\\n\".format(number))\n"
"> > ~~~\n"
"> > {: .python}"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:321
# blockquote, which can be cascaded
msgid "> ## Filtering in SQL vs. Filtering in Python"
msgstr ""

#: sql-novice-survey/_episodes/10-prog.md:322
msgid ">\n"
"> Write a Python program that creates a new database called\n"
"> `backup.db` with the same structure as `original.db` and copies all\n"
"> the values greater than 20.0 from `original.db` to `backup.db`.\n"
"> Which is faster: filtering values in the query, or reading\n"
"> everything into memory and filtering in Python?\n"
">\n"
"> > ## Solution\n"
"> > The first example reads all the data into memory and filters the\n"
"> > numbers using the if statement in Python.\n"
"> >\n"
"> > ~~~\n"
"> > import sqlite3\n"
"> >\n"
"> > connection_original = sqlite3.connect(\"original.db\")\n"
"> > cursor_original = connection_original.cursor()\n"
"> > cursor_original.execute(\"SELECT * FROM Pressure;\")\n"
"> > results = cursor_original.fetchall()\n"
"> > cursor_original.close()\n"
"> > connection_original.close()\n"
"> >\n"
"> > connection_backup = sqlite3.connect(\"backup.db\")\n"
"> > cursor_backup = connection_backup.cursor()\n"
"> > cursor_backup.execute(\"CREATE TABLE Pressure (reading float not null)\")\n"
"> > query = \"INSERT INTO Pressure values (?);\"\n"
"> >\n"
"> > for entry in results:\n"
"> >     # number is saved in first column of the table\n"
"> >     if entry[0] > 20.0:\n"
"> >         cursor_backup.execute(query, entry)\n"
"> >\n"
"> > cursor_backup.close()\n"
"> > connection_backup.commit()\n"
"> > connection_backup.close()\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >\n"
"> > In contrast the following example uses the conditional ``SELECT`` statement\n"
"> > to filter the numbers in SQL.\n"
"> > The only lines that changed are in line 5, where the values are fetched\n"
"> > from `original.db` and the for loop starting in line 15 used to insert\n"
"> > the numbers into `backup.db`.\n"
"> > Note how this version does not require the use of Python's if statement.\n"
"> >\n"
"> > ~~~\n"
"> > import sqlite3\n"
"> >\n"
"> > connection_original = sqlite3.connect(\"original.db\")\n"
"> > cursor_original = connection_original.cursor()\n"
"> > cursor_original.execute(\"SELECT * FROM Pressure WHERE reading > 20.0;\")\n"
"> > results = cursor_original.fetchall()\n"
"> > cursor_original.close()\n"
"> > connection_original.close()\n"
"> >\n"
"> > connection_backup = sqlite3.connect(\"backup.db\")\n"
"> > cursor_backup = connection_backup.cursor()\n"
"> > cursor_backup.execute(\"CREATE TABLE Pressure (reading float not null)\")\n"
"> > query = \"INSERT INTO Pressure values (?);\"\n"
"> >\n"
"> > for entry in results:\n"
"> >     cursor_backup.execute(query, entry)\n"
"> >\n"
"> > cursor_backup.close()\n"
"> > connection_backup.commit()\n"
"> > connection_backup.close()\n"
"> > ~~~\n"
"> > {: .python}\n"
"> >"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:1
# Front Matter
msgid "---\n"
"title: Programming with Databases - R\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I access databases from programs written in R?\"\n"
"objectives:\n"
"- \"Write short programs that execute SQL queries.\"\n"
"- \"Trace the execution of a program that contains an SQL query.\"\n"
"- \"Explain why most database applications are written in a general-purpose language rather than in SQL.\"\n"
"keypoints:\n"
"- \"Data analysis languages have libraries for accessing databases.\"\n"
"- \"To connect to a database, a program must use a library specific to that database manager.\"\n"
"- \"R's libraries can be used to directly query or read from a database.\"\n"
"- \"Programs can read query results in batches or all at once.\"\n"
"- \"Queries should be written using parameter substitution, not string formatting.\"\n"
"- \"R has multiple helper functions to make working with databases easier.\"\n"
"---"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:20
msgid "To close,\n"
"let's have a look at how to access a database from\n"
"a data analysis language like R.\n"
"Other languages use almost exactly the same model:\n"
"library and function names may differ,\n"
"but the concepts are the same."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:27
msgid "Here's a short R program that selects latitudes and longitudes\n"
"from an SQLite database stored in a file called `survey.db`:"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:30
# code block
msgid "~~~\n"
"library(RSQLite)\n"
"connection <- dbConnect(SQLite(), \"survey.db\")\n"
"results <- dbGetQuery(connection, \"SELECT Site.lat, Site.long FROM Site;\")\n"
"print(results)\n"
"dbDisconnect(connection)\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:37
#: sql-novice-survey/_episodes/11-prog-R.md:96
#: sql-novice-survey/_episodes/11-prog-R.md:156
#: sql-novice-survey/_episodes/11-prog-R.md:204
#: sql-novice-survey/_episodes/11-prog-R.md:216
#: sql-novice-survey/_episodes/11-prog-R.md:228
#: sql-novice-survey/_episodes/11-prog-R.md:249
#: sql-novice-survey/_episodes/11-prog-R.md:266
# SC/DC Template label
msgid "{: .r}"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:38
# code block
msgid "~~~\n"
"     lat    long\n"
"1 -49.85 -128.57\n"
"2 -47.15 -126.72\n"
"3 -48.87 -123.40\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:46
msgid "The program starts by importing the `RSQLite` library.\n"
"If we were connecting to MySQL, DB2, or some other database,\n"
"we would import a different library,\n"
"but all of them provide the same functions,\n"
"so that the rest of our program does not have to change\n"
"(at least, not much)\n"
"if we switch from one database to another."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:54
msgid "Line 2 establishes a connection to the database.\n"
"Since we're using SQLite,\n"
"all we need to specify is the name of the database file.\n"
"Other systems may require us to provide a username and password as well."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:59
msgid "On line 3, we retrieve the results from an SQL query.\n"
"It's our job to make sure that SQL is properly formatted;\n"
"if it isn't,\n"
"or if something goes wrong when it is being executed,\n"
"the database will report an error.\n"
"This result is a dataframe with one row for each entry and one column for each column in the database."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:66
msgid "Finally, the last line closes our connection,\n"
"since the database can only keep a limited number of these open at one time.\n"
"Since establishing a connection takes time,\n"
"though,\n"
"we shouldn't open a connection,\n"
"do one operation,\n"
"then close the connection,\n"
"only to reopen it a few microseconds later to do another operation.\n"
"Instead,\n"
"it's normal to create one connection that stays open for the lifetime of the program."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:81
# code block
msgid "~~~\n"
"library(RSQLite)\n"
"\n"
"connection <- dbConnect(SQLite(), \"survey.db\")\n"
"\n"
"getName <- function(personID) {\n"
"  query <- paste0(\"SELECT personal || ' ' || family FROM Person WHERE id =='\",\n"
"                  personID, \"';\")\n"
"  return(dbGetQuery(connection, query))\n"
"}\n"
"\n"
"print(paste(\"full name for dyer:\", getName('dyer')))\n"
"\n"
"dbDisconnect(connection)\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:97
#: sql-novice-survey/_episodes/11-prog-R.md:157
# code block
msgid "~~~ \n"
"full name for dyer: William Dyer\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:107
# code block
msgid "~~~ \n"
"dyer'; DROP TABLE Survey; SELECT '\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:117
# code block
msgid "~~~ \n"
"SELECT personal || ' ' || family FROM Person WHERE id='dyer'; DROP TABLE Survey; SELECT '';\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:125
msgid "This is called an [SQL injection attack]({{ site.github.url }}/reference.html#sql-injection-attack),\n"
"and it has been used to attack thousands of programs over the years.\n"
"In particular,\n"
"many web sites that take data from users insert values directly into queries\n"
"without checking them carefully first.\n"
"A very [relevant XKCD](https://xkcd.com/327/) that explains the \n"
"dangers of using raw input in queries a little more succinctly:"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:133
msgid "![relevant XKCD](https://imgs.xkcd.com/comics/exploits_of_a_mom.png) "
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:135
msgid "Since an unscrupulous parent might try to smuggle commands into our queries in many different ways,\n"
"the safest way to deal with this threat is\n"
"to replace characters like quotes with their escaped equivalents,\n"
"so that we can safely put whatever the user gives us inside a string.\n"
"We can do this by using a [prepared statement]({{ site.github.url }}/reference.html#prepared-statement)\n"
"instead of formatting our statements as strings.\n"
"Here's what our example program looks like if we do this:"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:143
# code block
msgid "~~~ \n"
"library(RSQLite)\n"
"connection <- dbConnect(SQLite(), \"survey.db\")\n"
"\n"
"getName <- function(personID) {\n"
"  query <- \"SELECT personal || ' ' || family FROM Person WHERE id == ?\"\n"
"  return(dbGetPreparedQuery(connection, query, data.frame(personID)))\n"
"}\n"
"\n"
"print(paste(\"full name for dyer:\", getName('dyer')))\n"
"\n"
"dbDisconnect(connection)\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:162
msgid "The key changes are in the query string and the `dbGetQuery` call (we use dbGetPreparedQuery instead).\n"
"Instead of formatting the query ourselves,\n"
"we put question marks in the query template where we want to insert values.\n"
"When we call `dbGetPreparedQuery`,\n"
"we provide a dataframe\n"
"that contains as many values as there are question marks in the query.\n"
"The library matches values to question marks in order,\n"
"and translates any special characters in the values\n"
"into their escaped equivalents\n"
"so that they are safe to use."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:173
# blockquote, which can be cascaded
msgid "> ## Filling a Table vs. Printing Values "
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:174
msgid ">\n"
"> Write an R program that creates a new database in a file called\n"
"> `original.db` containing a single table called `Pressure`, with a\n"
"> single field called `reading`, and inserts 100,000 random numbers\n"
"> between 10.0 and 25.0.  How long does it take this program to run?\n"
"> How long does it take to run a program that simply writes those\n"
"> random numbers to a file?"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:183
# blockquote, which can be cascaded
msgid "> ## Filtering in SQL vs. Filtering in R"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:184
msgid ">\n"
"> Write an R program that creates a new database called\n"
"> `backup.db` with the same structure as `original.db` and copies all\n"
"> the values greater than 20.0 from `original.db` to `backup.db`.\n"
"> Which is faster: filtering values in the query, or reading\n"
"> everything into memory and filtering in R?"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:192
# header
msgid "## Database helper functions in R"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:194
msgid "R's database interface packages (like `RSQLite`) all share \n"
"a common set of helper functions useful for exploring databases and \n"
"reading/writing entire tables at once."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:198
msgid "To view all tables in a database, we can use `dbListTables()`:"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:200
# code block
msgid "~~~ \n"
"connection <- dbConnect(SQLite(), \"survey.db\")\n"
"dbListTables(connection)\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:205
# code block
msgid "~~~\n"
"\"Person\"  \"Site\"    \"Survey\"  \"Visited\"\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:211
msgid "To view all column names of a table, use `dbListFields()`:"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:213
# code block
msgid "~~~\n"
"dbListFields(connection, \"Survey\")\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:217
# code block
msgid "~~~\n"
"\"taken\"   \"person\"  \"quant\"   \"reading\"\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:223
msgid "To read an entire table as a dataframe, use `dbReadTable()`:"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:225
# code block
msgid "~~~\n"
"dbReadTable(connection, \"Person\")\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:229
# code block
msgid "~~~\n"
"        id  personal   family\n"
"1     dyer   William     Dyer\n"
"2       pb     Frank  Pabodie\n"
"3     lake  Anderson     Lake\n"
"4      roe Valentina  Roerich\n"
"5 danforth     Frank Danforth\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:240
msgid "Finally to write an entire table to a database, you can use `dbWriteTable()`. \n"
"Note that we will always want to use the `row.names = FALSE` argument or R \n"
"will write the row names as a separate column. \n"
"In this example we will write R's built-in `iris` dataset as a table in `survey.db`."
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:245
# code block
msgid "~~~\n"
"dbWriteTable(connection, \"iris\", iris, row.names = FALSE)\n"
"head(dbReadTable(connection, \"iris\"))\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:250
# code block
msgid "~~~\n"
"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n"
"1          5.1         3.5          1.4         0.2  setosa\n"
"2          4.9         3.0          1.4         0.2  setosa\n"
"3          4.7         3.2          1.3         0.2  setosa\n"
"4          4.6         3.1          1.5         0.2  setosa\n"
"5          5.0         3.6          1.4         0.2  setosa\n"
"6          5.4         3.9          1.7         0.4  setosa\n"
"~~~"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:261
msgid "And as always, remember to close the database connection when done!"
msgstr ""

#: sql-novice-survey/_episodes/11-prog-R.md:263
# code block
msgid "~~~\n"
"dbDisconnect(connection)\n"
"~~~"
msgstr ""

#: sql-novice-survey/_extras/about.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""

#: sql-novice-survey/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr ""

#: sql-novice-survey/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /discuss/\n"
"---"
msgstr ""

#: sql-novice-survey/_extras/discuss.md:7
msgid "Relational databases are the most widely used by far,\n"
"but other kinds also exist,\n"
"such as the document-oriented database [MongoDB](https://www.mongodb.com/)."
msgstr ""

#: sql-novice-survey/_extras/figures.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Figures\n"
"permalink: /figures/\n"
"---"
msgstr ""

#: sql-novice-survey/_extras/figures.md:6
msgid "{% include all_figures.html %}"
msgstr ""

#: sql-novice-survey/_extras/guide.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"
msgstr ""

#: sql-novice-survey/_extras/guide.md:7
# blockquote, which can be cascaded
msgid "> **database** (dā'tə-bās') noun:"
msgstr ""

#: sql-novice-survey/_extras/guide.md:8
# blockquote, which can be cascaded
msgid "> \"A collection of data arranged for ease and speed of search and retrieval by a computer\""
msgstr ""

#: sql-novice-survey/_extras/guide.md:9
msgid ">\n"
"> — The American Heritage® Science Dictionary"
msgstr ""

#: sql-novice-survey/_extras/guide.md:11
# SC/DC Template label
msgid "{: .quotation}"
msgstr ""

#: sql-novice-survey/_extras/guide.md:13
# unordered list
msgid "*   Three common options for storing data"
msgstr ""

#: sql-novice-survey/_extras/guide.md:14
# unordered list
msgid "*   Text"
msgstr ""

#: sql-novice-survey/_extras/guide.md:15
# unordered list
msgid "    *   Easy to create, work well with version control"
msgstr ""

#: sql-novice-survey/_extras/guide.md:16
# unordered list
msgid "    *   But then we have to build search and analysis tools ourselves"
msgstr ""

#: sql-novice-survey/_extras/guide.md:17
# unordered list
msgid "*   Spreadsheets"
msgstr ""

#: sql-novice-survey/_extras/guide.md:18
# unordered list
msgid "    *   Good for simple analyses"
msgstr ""

#: sql-novice-survey/_extras/guide.md:19
# unordered list
msgid "    *   But don't handle large or complex data sets well"
msgstr ""

#: sql-novice-survey/_extras/guide.md:20
# unordered list
msgid "*   Databases"
msgstr ""

#: sql-novice-survey/_extras/guide.md:21
# unordered list
msgid "    *   Include powerful tools for search and analysis"
msgstr ""

#: sql-novice-survey/_extras/guide.md:22
# unordered list
msgid "    *   Can handle large, complex data sets."
msgstr ""

#: sql-novice-survey/_extras/guide.md:24
# header
msgid "## Overall"
msgstr ""

#: sql-novice-survey/_extras/guide.md:26
msgid "Relational databases are not as widely used in science as in business,\n"
"but they are still a common way to store large data sets with complex structure.\n"
"Even when the data itself isn't in a database,\n"
"the metadata could be:\n"
"for example,\n"
"meteorological data might be stored in files on disk,\n"
"but data about when and where observations were made,\n"
"data ranges,\n"
"and so on could be in a database\n"
"to make it easier for scientists to find what they want to."
msgstr ""

#: sql-novice-survey/_extras/guide.md:37
# unordered list
msgid "*   The first few sections (up to \"Missing Data\") usually go very quickly."
msgstr ""

#: sql-novice-survey/_extras/guide.md:38
msgid "    The pace usually slows down a bit when null values are discussed\n"
"    mostly because learners have a lot of details to keep straight by this point.\n"
"    Things *really* slow down during the discussion of joins,\n"
"    but this is the key idea in the whole lesson:\n"
"    important ideas like primary keys and referential integrity\n"
"    only make sense once learners have seen how they're used in joins.\n"
"    It's worth going over things a couple of times if necessary (with lots of examples)."
msgstr ""

#: sql-novice-survey/_extras/guide.md:46
# unordered list
msgid "*   The sections on creating and modifying data,"
msgstr ""

#: sql-novice-survey/_extras/guide.md:47
msgid "    and programming with databases,\n"
"    can be dropped if time is short.\n"
"    Of the two,\n"
"    people seem to care most about how to add data (which only takes a few minutes to demonstrate)."
msgstr ""

#: sql-novice-survey/_extras/guide.md:52
# unordered list
msgid "*   Simple calculations are actually easier to do in a spreadsheet; the"
msgstr ""

#: sql-novice-survey/_extras/guide.md:53
msgid "    advantages of using a database become clear as soon as filtering\n"
"    and joins are needed.  Instructors may therefore want to show a\n"
"    spreadsheet with the information from the four database tables\n"
"    consolidated into a single sheet, and demonstrate what's needed in\n"
"    both systems to answer questions like, \"What was the average\n"
"    radiation reading in 1931?\""
msgstr ""

#: sql-novice-survey/_extras/guide.md:60
# unordered list
msgid "*   Some advanced learners may have heard that NoSQL databases"
msgstr ""

#: sql-novice-survey/_extras/guide.md:61
msgid "    (i.e., ones that don't use the relational model)\n"
"    are the next big thing,\n"
"    and ask why we're not teaching those.\n"
"    The answers are:\n"
"    1.  Relational databases are far more widely used than NoSQL databases.\n"
"    2.  We have far more experience with relational databases than with any other kind,\n"
"        so we have a better idea of what to teach and how to teach it.\n"
"    3.  NoSQL databases are as different from each other as they are from relational databases.\n"
"        Until a leader emerges, it isn't clear *which* NoSQL database we should teach."
msgstr ""

#: sql-novice-survey/_extras/guide.md:71
# header
msgid "## Resources"
msgstr ""

#: sql-novice-survey/_extras/guide.md:73
# unordered list
msgid "*   `data/*.csv`: CSV versions of data in sample survey database."
msgstr ""

#: sql-novice-survey/_extras/guide.md:74
# unordered list
msgid "*   `bin/create-db.sql`: generate survey database used in examples based on CSV."
msgstr ""

#: sql-novice-survey/_extras/guide.md:76
# header
msgid "## SQLite Setup"
msgstr ""

#: sql-novice-survey/_extras/guide.md:78
msgid "In order to execute the following lessons interactively,\n"
"please install SQLite as mentioned in the setup instructions for your workshop.\n"
"Then:"
msgstr ""

#: sql-novice-survey/_extras/guide.md:82
# code block
msgid "~~~\n"
"$ git clone http://github.com/swcarpentry/sql-novice-survey.git\n"
"$ cd sql-novice-survey\n"
"~~~"
msgstr ""

#: sql-novice-survey/_extras/guide.md:86
#: sql-novice-survey/_extras/guide.md:94
#: sql-novice-survey/_extras/guide.md:108
#: sql-novice-survey/_extras/guide.md:126
# SC/DC Template label
msgid "{: .bash}"
msgstr ""

#: sql-novice-survey/_extras/guide.md:88
msgid "Next,\n"
"create the database that will be used:"
msgstr ""

#: sql-novice-survey/_extras/guide.md:91
# code block
msgid "~~~\n"
"$ sqlite3 survey.sqlite '.read bin/create-db.sql'\n"
"~~~"
msgstr ""

#: sql-novice-survey/_extras/guide.md:96
msgid "This reads commands from `bin/create-db.sql`,\n"
"which sets up the tables and loads data from the CSV files in the `data` directory."
msgstr ""

#: sql-novice-survey/_extras/guide.md:99
msgid "To run commands interactively,\n"
"run SQLite on `survey.sqlite`:"
msgstr ""

#: sql-novice-survey/_extras/guide.md:102
# code block
msgid "~~~\n"
"$ sqlite3 survey.sqlite\n"
"SQLite version 3.8.5 2014-08-15 22:37:57\n"
"Enter \".help\" for usage hints.\n"
"sqlite>\n"
"~~~"
msgstr ""

#: sql-novice-survey/_extras/guide.md:110
# header
msgid "## Troubleshooting"
msgstr ""

#: sql-novice-survey/_extras/guide.md:112
msgid "The command history and line editing features provided by `readline` are\n"
"invaluable with a command-line tool like `sqlite3`. Participants should be\n"
"encouraged strongly to start with a simple SQL statement and then use the\n"
"up-arrow key to go back and add clauses one at a time, or fix problems, rather\n"
"than typing each command from scratch. Unfortunately on some Linux and Mac OS X\n"
"systems participants have found that the arrow keys do not scroll through the\n"
"command history as expected."
msgstr ""

#: sql-novice-survey/_extras/guide.md:120
msgid "A workaround for this it to use the [rlwrap](https://github.com/hanslub42/rlwrap)\n"
"(readline wrapper) command when starting SQLite:"
msgstr ""

#: sql-novice-survey/_extras/guide.md:123
# code block
msgid "~~~\n"
"$ rlwrap sqlite3 survey.sqlite\n"
"~~~"
msgstr ""

#: sql-novice-survey/_extras/guide.md:128
msgid "The `rlwrap` package is available in the standard Fedora repository\n"
"(but wasn't needed when I [@benwaugh] taught this) and appears to be\n"
"available in [Ubuntu](http://packages.ubuntu.com/precise/rlwrap) too,\n"
"and in [OS X using Homebrew](https://news.ycombinator.com/item?id=5087790)."
msgstr ""

#: sql-novice-survey/_includes/links.md:1
msgid "[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[ci]: http://communityin.org/\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html#reporting-guidelines\n"
"[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[concept-maps]: https://carpentries.github.io/instructor-training/05-memory/\n"
"[contrib-covenant]: https://contributor-covenant.org/\n"
"[contributing]: {{ site.github.repository_url }}/blob/gh-pages/CONTRIBUTING.md\n"
"[cran-checkpoint]: https://cran.r-project.org/package=checkpoint\n"
"[cran-knitr]: https://cran.r-project.org/package=knitr\n"
"[cran-stringr]: https://cran.r-project.org/package=stringr\n"
"[email]: mailto:team@carpentries.org\n"
"[github-importer]: https://import.github.com/\n"
"[importer]: https://github.com/new/import\n"
"[jekyll-collection]: https://jekyllrb.com/docs/collections/\n"
"[jekyll-install]: https://jekyllrb.com/docs/installation/\n"
"[jekyll-windows]: http://jekyll-windows.juthilo.com/\n"
"[jekyll]: https://jekyllrb.com/\n"
"[jupyter]: https://jupyter.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example/\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[morea]: https://morea-framework.github.io/\n"
"[numfocus]: https://numfocus.org/\n"
"[osi]: https://opensource.org\n"
"[pandoc]: https://pandoc.org/\n"
"[paper-now]: https://github.com/PeerJ/paper-now\n"
"[python-gapminder]: https://swcarpentry.github.io/python-novice-gapminder/\n"
"[pyyaml]: https://pypi.python.org/pypi/PyYAML\n"
"[r-markdown]: https://rmarkdown.rstudio.com/\n"
"[rstudio]: https://www.rstudio.com/\n"
"[ruby-install-guide]: https://www.ruby-lang.org/en/downloads/\n"
"[ruby-installer]: https://rubyinstaller.org/\n"
"[rubygems]: https://rubygems.org/pages/download/\n"
"[styles]: https://github.com/carpentries/styles/\n"
"[swc-releases]: https://github.com/swcarpentry/swc-releases\n"
"[workshop-repo]: {{ site.workshop_repo }}\n"
"[yaml]: http://yaml.org/"
msgstr ""

#: sql-novice-survey/aio.md:1
# Front Matter
msgid "---\n"
"layout: page \n"
"root: .\n"
"---"
msgstr ""

#: sql-novice-survey/aio.md:5
#: sql-novice-survey/bin/boilerplate/aio.md:3
# inline html
msgid "<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: sql-novice-survey/aio.md:31
#: sql-novice-survey/bin/boilerplate/_extras/figures.md:33
#: sql-novice-survey/bin/boilerplate/aio.md:29
msgid "{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:12
msgid "By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CODE_OF_CONDUCT.md)."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:30
msgid "    you can [send us comments by email][email].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:49
msgid "    please work in <https://github.com/swcarpentry/FIXME>,\n"
"    which can be viewed at <https://swcarpentry.github.io/FIXME>."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:69
msgid "There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas, please see the 'Issues' tab for\n"
"a list of issues associated with this repository,\n"
"or you may also look at the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:104
msgid "If you choose to contribute via GitHub, you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"To manage changes, we follow [GitHub flow][github-flow].\n"
"Each lesson has two maintainers who review issues and pull requests or encourage others to do so.\n"
"The maintainers are community volunteers and have final say over what gets merged into the lesson.\n"
"To use the web interface for contributing to a lesson:"
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:111
# ordered list
msgid "1.  Fork the originating repository to your GitHub profile."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:112
# ordered list
msgid "2.  Within your version of the forked repository, move to the `gh-pages` branch and"
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:113
msgid "create a new branch for each significant change being made.\n"
"3.  Navigate to the file(s) you wish to change within the new branches and make revisions as required.\n"
"4.  Commit all changed files within the appropriate branches.\n"
"5.  Create individual pull requests from each of your changed branches\n"
"to the `gh-pages` branch within the originating repository.\n"
"6.  If you receive feedback, make changes using your issue-specific branches of the forked\n"
"repository and the pull requests will update automatically.\n"
"7.  Repeat as needed until all feedback has been addressed."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:122
msgid "When starting work, please make sure your clone of the originating `gh-pages` branch is up-to-date\n"
"before creating your own revision-specific branch(es) from there.\n"
"Additionally, please only work from your newly-created branch(es) and *not*\n"
"your clone of the originating `gh-pages` branch.\n"
"Lastly, published copies of all the lessons are available in the `gh-pages` branch of the originating\n"
"repository for reference while revising."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:131
msgid "General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][email]."
msgstr ""

#: sql-novice-survey/bin/boilerplate/CONTRIBUTING.md:136
msgid "[email]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://guides.github.com/features/issues/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:1
# header
msgid "# FIXME Lesson title"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:3
msgid "[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/)"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:5
#: sql-novice-survey/bin/boilerplate/_episodes/01-introduction.md:12
#: sql-novice-survey/bin/boilerplate/_extras/discuss.md:4
#: sql-novice-survey/bin/boilerplate/_extras/guide.md:4
#: sql-novice-survey/bin/boilerplate/reference.md:7
#: sql-novice-survey/bin/boilerplate/setup.md:4
msgid "FIXME"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:7
# header
msgid "## Contributing"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:9
msgid "We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any\n"
"questions, concerns, or experience any difficulties along the way."
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:12
msgid "We'd like to ask you to familiarize yourself with our [Contribution Guide](CONTRIBUTING.md) and have a look at\n"
"the [more detailed guidelines][lesson-example] on proper formatting, ways to render the lesson locally, and even\n"
"how to write new episodes."
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:16
# header
msgid "## Maintainer(s)"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:18
# unordered list
msgid "* FIXME"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:20
# header
msgid "## Authors"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:22
msgid "A list of contributors to the lesson can be found in [AUTHORS](AUTHORS)"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:24
# header
msgid "## Citation"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:26
msgid "To cite this lesson, please consult with [CITATION](CITATION)"
msgstr ""

#: sql-novice-survey/bin/boilerplate/README.md:28
msgid "[lesson-example]: https://carpentries.github.io/lesson-example"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_episodes/01-introduction.md:1
# Front Matter
msgid "---\n"
"title: \"Introduction\"\n"
"teaching: 0\n"
"exercises: 0\n"
"questions:\n"
"- \"Key question (FIXME)\"\n"
"objectives:\n"
"- \"First objective. (FIXME)\"\n"
"keypoints:\n"
"- \"First key point. (FIXME)\"\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_extras/about.md:1
# Front Matter
msgid "---\n"
"title: About\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_extras/about.md:4
msgid "{% include carpentries.html %}\n"
"{% include links.md %}"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"title: Discussion\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_extras/figures.md:1
# Front Matter
msgid "---\n"
"title: Figures\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_extras/figures.md:4
# inline html
msgid "<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"          article_here.appendChild(htmlDocArticle.getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: sql-novice-survey/bin/boilerplate/_extras/guide.md:1
# Front Matter
msgid "---\n"
"title: \"Instructor Notes\"\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/aio.md:1
# Front Matter
msgid "---\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/index.md:1
# Front Matter
msgid "---\n"
"layout: lesson\n"
"root: .  # Is the only page that don't follow the partner /:path/index.html\n"
"permalink: index.html  # Is the only page that don't follow the partner /:path/index.html\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/index.md:6
msgid "FIXME: home page introduction"
msgstr ""

#: sql-novice-survey/bin/boilerplate/index.md:8
#: sql-novice-survey/index.md:32
# blockquote, which can be cascaded
msgid "> ## Prerequisites"
msgstr ""

#: sql-novice-survey/bin/boilerplate/index.md:9
msgid ">\n"
"> FIXME"
msgstr ""

#: sql-novice-survey/bin/boilerplate/index.md:11
#: sql-novice-survey/index.md:36
# SC/DC Template label
msgid "{: .prereq}"
msgstr ""

#: sql-novice-survey/bin/boilerplate/reference.md:1
#: sql-novice-survey/reference.md:1
# Front Matter
msgid "---\n"
"layout: reference\n"
"---"
msgstr ""

#: sql-novice-survey/bin/boilerplate/reference.md:5
#: sql-novice-survey/reference.md:5
# header
msgid "## Glossary"
msgstr ""

#: sql-novice-survey/bin/boilerplate/setup.md:1
# Front Matter
msgid "---\n"
"title: Setup\n"
"---"
msgstr ""

#: sql-novice-survey/index.md:1
# Front Matter
msgid "---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""

#: sql-novice-survey/index.md:6
msgid "In the late 1920s and early 1930s,\n"
"William Dyer,\n"
"Frank Pabodie,\n"
"and Valentina Roerich led expeditions to the\n"
"[Pole of Inaccessibility](https://en.wikipedia.org/wiki/Pole_of_inaccessibility)\n"
"in the South Pacific,\n"
"and then onward to Antarctica.\n"
"Two years ago,\n"
"their expeditions were found in a storage locker at Miskatonic University.\n"
"We have scanned and OCR the data they contain,\n"
"and we now want to store that information\n"
"in a way that will make search and analysis easy."
msgstr ""

#: sql-novice-survey/index.md:19
msgid "Three common options for storage are\n"
"text files,\n"
"spreadsheets,\n"
"and databases.\n"
"Text files are easiest to create,\n"
"and work well with version control,\n"
"but then we would have to build search and analysis tools ourselves.\n"
"Spreadsheets are good for doing simple analyses,\n"
"but they don't handle large or complex data sets well.\n"
"Databases, however, include powerful tools for search and analysis,\n"
"and can handle large, complex data sets.\n"
"These lessons will show how to use a database to explore the expeditions' data."
msgstr ""

#: sql-novice-survey/index.md:33
msgid ">\n"
"> * This lesson requires the Unix shell, plus [SQLite3](http://www.sqlite.org/) or [DB Browser for SQLite](http://sqlitebrowser.org/).\n"
"> * Please download the database we will use: [survey.db]({{ page.root }}/files/survey.db)"
msgstr ""

#: sql-novice-survey/reference.md:7
msgid "{:auto_ids}\n"
"aggregation function\n"
":   A function that combines multiple values to produce a single new value (e.g. sum, mean, median)."
msgstr ""

#: sql-novice-survey/reference.md:11
msgid "atomic\n"
":   Describes a value *not* divisible into parts that one might want to\n"
"    work with separately. For example, if one wanted to work with\n"
"    first and last names separately, the values \"Ada\" and \"Lovelace\"\n"
"    would be atomic, but the value \"Ada Lovelace\" would not."
msgstr ""

#: sql-novice-survey/reference.md:17
msgid "cascading delete\n"
":   An [SQL](#sql) constraint requiring that if a given [record](#record) is deleted,\n"
"    all records referencing it (via [foreign key](#foreign-key)) in other [tables](#table)\n"
"    must also be deleted."
msgstr ""

#: sql-novice-survey/reference.md:22
msgid "case insensitive\n"
":   Treating text as if upper and lower case characters were the same.\n"
"    See also: [case sensitive](#case-sensitive)."
msgstr ""

#: sql-novice-survey/reference.md:26
msgid "case sensitive\n"
":   Treating upper and lower case characters as different. See also: [case insensitive](#case-insensitive)."
msgstr ""

#: sql-novice-survey/reference.md:29
msgid "comma-separated values (CSV)\n"
":   A common textual representation for tables in which the values in each row are separated by commas."
msgstr ""

#: sql-novice-survey/reference.md:32
msgid "cross product\n"
":   A pairing of all elements of one set with all elements of another."
msgstr ""

#: sql-novice-survey/reference.md:35
msgid "cursor\n"
":   A pointer into a database that keeps track of outstanding operations."
msgstr ""

#: sql-novice-survey/reference.md:38
msgid "database manager\n"
":   A program that manages a database, such as SQLite."
msgstr ""

#: sql-novice-survey/reference.md:41
msgid "fields\n"
":   A set of data values of a particular type, one for each [record](#record) in a [table](#table)."
msgstr ""

#: sql-novice-survey/reference.md:44
msgid "filter\n"
":   To select only the records that meet certain conditions."
msgstr ""

#: sql-novice-survey/reference.md:47
msgid "foreign key\n"
":   One or more values in a [database table](#table) that identify\n"
"    [records](#record) in another table."
msgstr ""

#: sql-novice-survey/reference.md:51
msgid "prepared statement\n"
":   A template for an [SQL](#sql) query in which some values can be filled in."
msgstr ""

#: sql-novice-survey/reference.md:54
msgid "primary key\n"
":   One or more [fields](#fields) in a [database table](#table) whose values are\n"
"    guaranteed to be unique for each [record](#record), i.e., whose values\n"
"    uniquely identify the entry."
msgstr ""

#: sql-novice-survey/reference.md:59
msgid "query\n"
":   A textual description of a database operation. Queries are expressed in\n"
"    a special-purpose language called [SQL](#sql), and despite the name \"query\",\n"
"    they may modify or delete data as well as interrogate it."
msgstr ""

#: sql-novice-survey/reference.md:64
msgid "record\n"
":   A set of related values making up a single entry in a [database table](#table),\n"
"    typically shown as a row. See also: [field](#field)."
msgstr ""

#: sql-novice-survey/reference.md:68
msgid "referential integrity\n"
":   The internal consistency of values in a database. If an entry in one table\n"
"    contains a [foreign key](#foreign-key), but the corresponding [records](#record)\n"
"    don't exist, referential integrity has been violated."
msgstr ""

#: sql-novice-survey/reference.md:73
msgid "relational database\n"
":   A collection of data organized into [tables](#table)."
msgstr ""

#: sql-novice-survey/reference.md:76
msgid "sentinel value\n"
":   A value in a collection that has a special meaning, such as 999 to mean \"age unknown\"."
msgstr ""

#: sql-novice-survey/reference.md:79
msgid "SQL\n"
":   A special-purpose language for describing operations on [relational databases](#relational-database)."
msgstr ""

#: sql-novice-survey/reference.md:82
msgid "SQL injection attack\n"
":   An attack on a program in which the user's input contains malicious SQL statements.\n"
"    If this text is copied directly into an SQL statement, it will be executed in the database."
msgstr ""

#: sql-novice-survey/reference.md:86
msgid "table\n"
":   A set of data in a [relational database](#relational-database) organized into a set\n"
"    of [records](#record), each having the same named [fields](#field)."
msgstr ""

#: sql-novice-survey/reference.md:90
msgid "wildcard\n"
":   A character used in pattern matching. In SQL's `like` operator, the wildcard \"%\"\n"
"     matches zero or more characters, so that `%able%` matches \"fixable\" and \"tablets\"."
msgstr ""

#: sql-novice-survey/setup.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Setup\n"
"---"
msgstr ""

#: sql-novice-survey/setup.md:5
# header
msgid "# Software"
msgstr ""

#: sql-novice-survey/setup.md:6
msgid "For this course you will need the UNIX shell, plus [SQLite3](http://www.sqlite.org/) or\n"
"[DB Browser for SQLite](http://sqlitebrowser.org/)."
msgstr ""

#: sql-novice-survey/setup.md:9
msgid "If you are running Linux, you may already have SQLite3 installed, otherwise you\n"
"should be able to get it from your package manager (on Debian/Ubuntu, you can\n"
"use the command `apt install sqlite3`)."
msgstr ""

#: sql-novice-survey/setup.md:13
# header
msgid "# Files"
msgstr ""

#: sql-novice-survey/setup.md:14
msgid "Please download the database we'll be using: [survey.db]({{ page.root }}/files/survey.db)"
msgstr ""

