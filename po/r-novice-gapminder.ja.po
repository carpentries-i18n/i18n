# Japanese translation of the Software Carpentry R for Reproducible Scientific Analysis Lesson
# Copyright (C) 2021 Software Carpentry Foundation; Japanese Translation Team
# This file is distributed under the same license as the PACKAGE package.
# Software-Carpentry Japanese-Team <tomkellygenetics@gmail.com>, 2019, 2020, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2018-09-15 22:59:57+0900\n"
"PO-Revision-Date: 2019-08-09 06:17+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: Japanese <tomkellygenetics@gmail.com>\n"
"Language: ja\n"

# Front Matter
#: r-novice-gapminder/CODE_OF_CONDUCT.md:1
#: r-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"permalink: /conduct/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"投稿者の行動規範\"\n"
"root: /ja/\n"
"permalink: /ja/conduct/\n"
"---"

#: r-novice-gapminder/CODE_OF_CONDUCT.md:6
#: r-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:5
msgid ""
"As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""
"プロジェクト貢献者・保持者は、\n"
"[カーペントリーの行動規範](https://carpentries-coc.readthedocs.io/ja/latest/topic_folders/policies/code-of-conduct.html)に基づき行動することを誓います。"

#: r-novice-gapminder/CODE_OF_CONDUCT.md:9
msgid ""
"Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""
"嫌がらせ、ハラスメント行為、その他の悪意ある行動・言動は、\n"
"カーペントリーの[報告ガイドライン](https://carpentries-coc.readthedocs.io/ja/latest/topic_folders/policies/incident-reporting.html)に沿って報告させていただきます。"

#: r-novice-gapminder/CODE_OF_CONDUCT.md:12
#: r-novice-gapminder/bin/boilerplate/CODE_OF_CONDUCT.md:11
#: r-novice-gapminder/bin/boilerplate/_episodes/01-introduction.md:14
#: r-novice-gapminder/bin/boilerplate/_extras/discuss.md:6
#: r-novice-gapminder/bin/boilerplate/_extras/figures.md:40
#: r-novice-gapminder/bin/boilerplate/_extras/guide.md:6
#: r-novice-gapminder/bin/boilerplate/index.md:13
#: r-novice-gapminder/bin/boilerplate/reference.md:9
#: r-novice-gapminder/bin/boilerplate/setup.md:7
msgid "{% include links.md %}"
msgstr "{% include links.md %}"

# header
#: r-novice-gapminder/CONTRIBUTING.md:1
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:1
msgid "# Contributing"
msgstr "# プロジェクトに貢献する"

#: r-novice-gapminder/CONTRIBUTING.md:3
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:3
msgid ""
"[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""
"[SoftwareCarpentry][swc-site]と[DataCarpentry][dc-site]はオープンソースのプロ"
"ジェクトです。\n"
"コミュニティーからの資料提供・ご協力、例えば、\n"
"新しいレッスン、\n"
"既存の資料の修正、\n"
"バグレポート、\n"
"変更点のレビューなど、どんなに些細な変更も歓迎いたします。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:10
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:10
msgid "## Contributor Agreement"
msgstr "## 貢献する方法"

#: r-novice-gapminder/CONTRIBUTING.md:12
msgid ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CONDUCT.md)."
msgstr ""
"このプロジェクトに貢献することにより、\n"
"自身が提供したコンテンツを[私達のライセンス](License.md)に基づき配布する事に"
"同意するものとします。\n"
"ご協力と引き換えに、\n"
"私達はあなたが提供する変更点・問題点などを検討し、\n"
"できるだけ早くコミュニティーの一員になれるよう尽力いたします。\n"
"[Software Carpentry][swc-site]と[Data Carpentry][dc-site]の一員になられた際に"
"は、\n"
"私達の[行動規範](https://docs.carpentries.org/topic_folders/policies/code-of-"
"conduct.html)を遵守する事に同意していただきます。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:20
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:20
msgid "## How to Contribute"
msgstr "## 貢献する方法"

#: r-novice-gapminder/CONTRIBUTING.md:22
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:22
msgid ""
"The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""
"一番簡単に貢献する方法は、\n"
"誤字、言葉遣い、\n"
"間違った内容などを\n"
"issue(イシュー)で報告する事です。\n"
"Issueを報告することによって、自分をコミュニティーに紹介し、\n"
"また、コミュニティーのメンバーと出会う良い機会にもなります。"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:29
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr "1. [GitHub][github]アカウントをお持ちでない場合、"

#: r-novice-gapminder/CONTRIBUTING.md:30
msgid ""
"    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other "
"methods described below."
msgstr ""
"    [メール][contact]にてご連絡して下さい。\n"
"    ですが、\n"
"    以下の方法であればメールよりも早急に対応できる場合がありますので、そちら"
"をお勧め致します。"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:34
msgid "2.  If you have a [GitHub][github] account,"
msgstr "2. [GitHub][github]アカウントをすでにお持ちである方・"

#: r-novice-gapminder/CONTRIBUTING.md:35
msgid ""
"    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue]"
"[new-issue].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""
"    またはアカウントを[新たに作る][github-join]気がある方で、\n"
"    あまりGitに詳しくない・使い慣れていない方は、\n"
"    質問・提案などを[新しいイシュー][new-issue]として開いて下さい。\n"
"    イシューを開くことによって、コミュニティーから誰かをそのイシューに割り当"
"て、\n"
"    スレッド化したディスカッションとして質問・提案に応答させていただくことが"
"できます。"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:41
msgid "3.  If you are comfortable with Git,"
msgstr "3. Gitを使い慣れている方で、"

#: r-novice-gapminder/CONTRIBUTING.md:42
msgid ""
"    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""
"    既存の資料を変更、または追加したい方は、\n"
"    プルリクエスト(Pull Request)にて変更点を提出して下さい。\n"
"    プルリクエストを使った提出方法は、[下記に記載されています](#using-"
"github)。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:46
msgid "## Where to Contribute"
msgstr "## どこへ貢献するか"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:48
msgid "1.  If you wish to change this lesson,"
msgstr "1.  このレッスンの内容を変更したい場合は、"

#: r-novice-gapminder/CONTRIBUTING.md:49
msgid ""
"    please work in <https://github.com/swcarpentry/r-novice-gapminder>,\n"
"    which can be viewed at <https://swcarpentry.github.io/r-novice-gapminder>."
msgstr ""
"    <https://github.com/swcarpentry/r-novice-gapminder>から編集して下さい。\n"
"    ウェブサイトはこちらから観覧いただけます：<https://swcarpentry.github.io/"
"r-novice-gapminder>"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:52
msgid "2.  If you wish to change the example lesson,"
msgstr "2.  模範レッスンの内容を変更したい場合は、"

#: r-novice-gapminder/CONTRIBUTING.md:53
msgid ""
"    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""
"    <https://github.com/carpentries/lesson-example>から編集して下さい。\n"
"    このリポジトリは模範レッスンの内容を記載しており、\n"
"    こちらから観覧できます：<https://carpentries.github.io/lesson-example>."

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:57
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""
"3.  ワークショップのウェブサイトに使われるテンプレートの内容を変更したい場合"
"は、"

#: r-novice-gapminder/CONTRIBUTING.md:58
msgid ""
"    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop "
"websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-"
"template>\n"
"    provide more background on our design choices."
msgstr ""
"    <https://github.com/carpentries/workshop-template>から編集して下さい。\n"
"    このリポジトリのホームページに、ワークショップに使うウェブサイトの設立方"
"法が記載されており、\n"
"    <https://carpentries.github.io/workshop-template>から\n"
"    サイトの詳細なデザイン方針が観覧できます。"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:63
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""
"4.  `_includes`、または`_layouts`に保存されている、レッスンやワークショップの"
"ためのCSSファイル、ツール、"

#: r-novice-gapminder/CONTRIBUTING.md:64
msgid ""
"    or HTML boilerplate for lessons or workshops stored in `_includes` or "
"`_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""
"    HTML boilerplateなどを編集したい場合は、\n"
"    <https://github.com/carpentries/styles>から編集して下さい。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:67
msgid "## What to Contribute"
msgstr "## 貢献していただきたい個所"

#: r-novice-gapminder/CONTRIBUTING.md:69
msgid ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][new-issue]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""
"新しい例を書く、すでにある例の改善、\n"
"ドキュメントのアップデート、\n"
"不明瞭な点、欠点、「動作に不具合がある」といった\n"
"[バグの報告][new-issue]など、\n"
"様々な方法で貢献していただくことができます。\n"
"どういったイシューを開いたら良いかわからない場合は、\n"
"[このリポジトリのイシュー][issues]、\n"
"[Data Carpentryのイシュー][dc-issues]、\n"
"もしくは[Software Carpentryのイシュー][swc-issues]を見てみて下さい。"

#: r-novice-gapminder/CONTRIBUTING.md:79
msgid ""
"Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""
"すでにあるイシューへのコメントや、プルリクエストのレビューなども歓迎いたしま"
"す。\n"
"皆さんで協力したほうが、良い結果につながります。\n"
"また、新しく加入された方の意見やレビューなどは特に重要視しています。\n"
"レッスンの資料を幾度となく見てきた方は特に見落としがちなのですが、\n"
"私達が提供している資料・コンテンツは、初めて資料を見る方などには、理解するの"
"に時間が掛かる場合があるので、\n"
"通常とは違う視点からの意見は大変貴重なのです。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:86
msgid "## What *Not* to Contribute"
msgstr "## 貢献していただきたくない個所"

#: r-novice-gapminder/CONTRIBUTING.md:88
msgid ""
"Our lessons already contain more material than we can cover in a typical "
"workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""
"現在、通常のワークショップの時間内ではカバーしきれないほどの内容量がレッスン"
"の資料に含まれています。\n"
"ですので、新たにレッスンに含められる項目やツールなどは求めておりません。\n"
"どうしても新しい内容を入れたい場合は、\n"
"(a)新しい内容を教えるために掛かるおおよその時間、\n"
"(b)新しい内容を入れる代わりにどの内容を取り出すか、\n"
"そして、取り出す理由をご説明下さい。\n"
"最初の点は、貢献する方々に可能かどうかを見極めていただくためです。\n"
"二つ目の点は、どちらの内容を有線するべきかを考えていただくためです。"

#: r-novice-gapminder/CONTRIBUTING.md:97
msgid ""
"We are also not looking for exercises or other material that only run on one "
"platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux "
"users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""
"上記に加え、一つのプラットホーム・OSでしか使用ができないなどといったプログラ"
"ムのレッスン内容・資料などは求めておりません。\n"
"私達が提供するワークショップでは、Windows、Mac OS X、Linuxなど、違ったOSを使"
"用するユーザーが来ることがあります。\n"
"そのため、新しいレッスンを作る際には、\n"
"先述の三つのOSに対応可能である必要があります。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:102
msgid "## Using GitHub"
msgstr "## GitHubの使い方"

#: r-novice-gapminder/CONTRIBUTING.md:104
msgid ""
"If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""
"GitHubから資料を提供したい場合は、\n"
"[GitHubでオープンソース・プロジェクトに貢献する方法][how-contribute]\n"
"を参照して下さい。\n"
"簡潔にまとめると："

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:109
msgid ""
"1.  The published copy of the lesson is in the `gh-pages` branch of the "
"repository"
msgstr ""
"1.  現在公開されているレッスン内容はリポジトリの`gh-pages`というブランチに保"
"存されています"

#: r-novice-gapminder/CONTRIBUTING.md:110
msgid ""
"    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your "
"`gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""
"    (これはGitHubが自動的に変更点を公開させるためです)。\n"
"    そのため、全てのブランチは`gh-pages`から分岐させ、\n"
"    オリジナルの[リポジトリ][repo]の`gh-pages`を自身が分岐した`gh-pages`のブ"
"ランチにマージ・合流させてから、\n"
"    内容を変更してください。\n"
"    他の内容・個所へ貢献することが難しくなるため、\n"
"    *オリジナルの`gh-pages`から直接内容を変更することはお控え下さい。*"

# ordered list
#: r-novice-gapminder/CONTRIBUTING.md:117
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""
"2.  私達は[GitHub flow][github-flow]を使って変更点などを管理しています："

#: r-novice-gapminder/CONTRIBUTING.md:118
msgid ""
"    1.  Create a new branch in your desktop copy of this repository for each "
"significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository]"
"[repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""
"    1.  自身が持っているオリジナルのリポジトリのコピー(フォーク)に新しいブラ"
"ンチを作り、そのブランチで内容を変更します。\n"
"    2.  作ったブランチ内で変更点をコミットします。\n"
"    3.  そのブランチをGitHubのフォークにプッシュします。\n"
"    4.  自身のフォークからオリジナルの[リポジトリ][repo]へプルリクエストを提"
"出します。\n"
"    5.  頂いたコメントやレビューからの提案で、更に内容を変更する場合は、\n"
"        自分のブランチで内容を変更し、GitHubのフォークにプッシュして下さ"
"い：\n"
"        自動的にプルリクエストの内容がアップデートされます。"

#: r-novice-gapminder/CONTRIBUTING.md:126
msgid ""
"Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""
"全てのレッスンには二人のメインテイナーがおり、彼・彼女らがイシューやプルリク"
"エストを管理・見直す、\n"
"もしくはその他のメンバーに、一緒に見直すように声をかけます。\n"
"メインテイナー達はコミュニティーのボランティアですので、\n"
"最終的に何を変更するかの決定権は、メインテイナーに委ねられています。"

# header
#: r-novice-gapminder/CONTRIBUTING.md:131
msgid "## Other Resources"
msgstr "## その他の資料"

#: r-novice-gapminder/CONTRIBUTING.md:133
msgid ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""
"[Software Carpentry][swc-site]と[Data Carpentry][dc-site]についての一般的な"
"ディスカッションは、\n"
"[ディスカッション用のメーリングリスト][discuss-list]で行われ、\n"
"どなたでも参加できます。\n"
"また、[メール][contact]からでもご連絡いただけます。"

#: r-novice-gapminder/CONTRIBUTING.md:138
msgid ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/r-novice-gapminder/issues/new\n"
"[issues]: https://github.com/swcarpentry/r-novice-gapminder/issues/\n"
"[repo]: https://github.com/swcarpentry/r-novice-gapminder/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/r-novice-gapminder/issues/new\n"
"[issues]: https://github.com/swcarpentry/r-novice-gapminder/issues/\n"
"[repo]: https://github.com/swcarpentry/r-novice-gapminder/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"

# Front Matter
#: r-novice-gapminder/LICENSE.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"ライセンス\"\n"
"root: .\n"
"---"

# header
#: r-novice-gapminder/LICENSE.md:6
msgid "## Instructional Material"
msgstr "## 教材"

#: r-novice-gapminder/LICENSE.md:8
msgid ""
"All Software Carpentry and Data Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""
"ソフトウェアカーペントリーとData Carpentryに関する全ての教材は\n"
"[クリエイティブ・コモンズ 表示ライセンス](https://creativecommons.org/licenses/by/4.0/deed.ja)\n"
"の下で利用可能です。以下は、\n"
"[表示4.0 国際(CC BY 4.0)ライセンスの完全な法的テキスト](https://creativecommons.org/licenses/by/4.0/legalcode.ja)の\n"
"人が読んでわかりやすいようにした要約です。(ライセンスの代わりになるものではありません。）"

#: r-novice-gapminder/LICENSE.md:14
msgid "You are free:"
msgstr "あなたは以下の条件に従う限り、自由に："

# unordered list
#: r-novice-gapminder/LICENSE.md:16
msgid "* to **Share**---copy and redistribute the material in any medium or format"
msgstr "* **共有**---どのようなメディアやフォーマットでも資料を複製したり、再配布できます"

# unordered list
#: r-novice-gapminder/LICENSE.md:17
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr "* **翻案**---マテリアルをリミックスしたり、改変したり、別の作品のベースにしたりできます\n"

#: r-novice-gapminder/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr "営利目的も含め、どのような目的でも。"

#: r-novice-gapminder/LICENSE.md:21
msgid ""
"The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""
"あなたがライセンスの条件に従っている限り、許諾者がこれらの自由を\n"
"取り消すことはできません。"

#: r-novice-gapminder/LICENSE.md:24
msgid "Under the following terms:"
msgstr "あなたの従うべき条件は以下の通りです："

# unordered list
#: r-novice-gapminder/LICENSE.md:26
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr "* **表示**---あなたは 適切なクレジットを表示し (あなたの作品が"

#: r-novice-gapminder/LICENSE.md:27
msgid ""
"  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""
"  ソフトウェアカーペントリーの著作物 (Software Carpentry©) から派生していることを記載して、\n"
"  そして適切な場合は[http://software-carpentry.org](http://software-carpentry.org)へのリンクを表示), \n"
"  [ライセンスへのリンク](https://creativecommons.org/licenses/by/4.0/deed.ja)を\n"
"  提供し、変更があったらその旨を示さなければなりません。\n"
"  これらは合理的であればどのような方法で行っても構いませんが、\n"
"  許諾者があなたやあなたの利用行為を支持していると示唆するような方法は除きます。"

#: r-novice-gapminder/LICENSE.md:34
msgid ""
"**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""
"**追加的な制約は課せません**---あなたは、このライセンスが他の者に\n"
"許諾することを法的に制限するようないかなる法的規定も技術的手段も\n"
"適用してはなりません："

#: r-novice-gapminder/LICENSE.md:38
msgid "Notices:"
msgstr "ご注意："

# unordered list
#: r-novice-gapminder/LICENSE.md:40
msgid "* You do not have to comply with the license for elements of the"
msgstr "* あなたは、資料の中でパブリック・ドメインに属している部分に関して、"

#: r-novice-gapminder/LICENSE.md:41
msgid ""
"  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""
"  あるいはあなたの利用が著作権法上の権利制限規定にもとづく場合には、\n"
"  ライセンスの規定に従う必要はありません。\n"
"* 保証は提供されていません。ライセンスはあなたの利用に\n"
"  必要な全ての許諾を与えないかも知れません。例えば、パブリシティ権、\n"
"  肖像権、人格権 などの他の諸権利はあなたがどのように資料を利用するかを\n"
"制限することがあります。"

# header
#: r-novice-gapminder/LICENSE.md:48
msgid "## Software"
msgstr "## ソフトウェア"

#: r-novice-gapminder/LICENSE.md:50
msgid ""
"Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""
"特に記載がある場合を除いて、ソフトウェアカーペントリーおよびデータカーペントリーが\n"
"提供しているサンプルプログラムやソフトウェアは、\n"
"[OSI][osi]が承認した\n"
"[MITライセンス](https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license)の下で利用可能です。"

#: r-novice-gapminder/LICENSE.md:55
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""
"以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル\n"
"（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェアを\n"
"無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、\n"
"複写、変更、結合、掲載、頒布、サブライセンス、および/または販売する権利、\n"
"およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。"

#: r-novice-gapminder/LICENSE.md:63
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""
"上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または\n"
"重要な部分に記載するものとします。"

#: r-novice-gapminder/LICENSE.md:66
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""
"ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、\n"
"何らの保証もなく提供されます。ここでいう保証とは、商品性、\n"
"特定の目的への適合性、および権利非侵害についての保証も含みますが、\n"
"それに限定されるものではありません。 作者または著作権者は、契約行為、\n"
"不法行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、\n"
"あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請求、\n"
"損害、その他の義務について何らの責任も負わないものとします。"

# header
#: r-novice-gapminder/LICENSE.md:74
msgid "## Trademark"
msgstr "## 商標"

#: r-novice-gapminder/LICENSE.md:76
msgid ""
"\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""
"「Software Carpentry」と「Data Carpentry」およびそれぞれのロゴは[Community\n"
"Initiatives][CI]における登録商標または商標です。"

#: r-novice-gapminder/LICENSE.md:79
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org\n"
"[osg]: https://opensource.jp"

#: r-novice-gapminder/README.md:1
msgid ""
"[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--r--gapminder-E01563.svg)](https://swcarpentry.slack.com/messages/C9Y0M3YKG) "
msgstr ""
"[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--r--gapminder-E01563.svg)](https://swcarpentry.slack.com/messages/C9Y0M3YKG) "

#: r-novice-gapminder/README.md:4
msgid ""
"R for Reproducible Scientific Analysis\n"
"======================================"
msgstr ""
"再現可能な科学的分析のためのR\n"
"======================================"

#: r-novice-gapminder/README.md:7
msgid ""
"An introduction to R for non-programmers using the [Gapminder][gapminder] data.\n"
"Please see <https://swcarpentry.github.io/r-novice-gapminder> for a rendered version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""
"[Gapminder] [gapminder]データを使用している非プログラマー向けのR入門。\n"
"この資料のレンダリング版についてはhttps://swcarpentry.github.io/r-novice-gapminder、資料の書式設定、構築、提出に関する手順についてはレッスンテンプレートのマニュアルを参照してください。 役に立つコマンド。\n"
"\n"
"\n"
"この資料のレンダリング版については、<https://swcarpentry.github.io/r-novice-gapminder>を参照してください。\n"
"[レッスンテンプレートのドキュメント][lesson-example]\n"
"資料のフォーマット、作成、追加するの手順については、\n"
"このディレクトリでmakeを実行して、役立つコマンドのリストを確認してください。"

#: r-novice-gapminder/README.md:13 r-novice-gapminder/index.md:8
msgid ""
"The goal of this lesson is to teach novice programmers to write modular code\n"
"and best practices for using R for data analysis. R is commonly used in many\n"
"scientific disciplines for statistical analysis and its array of third-party\n"
"packages. We find that many scientists who come to Software Carpentry workshops\n"
"use R and want to learn more. The emphasis of these materials is to give\n"
"attendees a strong foundation in the fundamentals of R, and to teach best\n"
"practices for scientific computing: breaking down analyses into modular units,\n"
"task automation, and encapsulation."
msgstr ""
"この講座の目的は、プログラミング初心者に R を使ったデータ解析のためのモジュール化されたコードの書き方と、\n"
"そのベストプラクティスを教えることです。R は多くの科学分野の統計分析や\n"
"サードパーティーパッケージによる様々なデータ解析に使用されています。\n"
"私たちは、ソフトウェアカーペントリーワークショップに参加した多くの科学者が、R を使用し、\n"
"もっと学びたいと思っていると理解しています。この教材は、参加者に R の基本中の基本を\n"
"理解してもらうこと、解析をモジュラーユニットに分割することやタスクの自動化、\n"
"およびカプセル化など、科学的コンピューティングのベストプラクティスを教えることに主眼をおいています。"

#: r-novice-gapminder/README.md:22
msgid ""
"Note that this workshop focuses on the fundamentals of the programming\n"
"language R, and not on statistical analysis."
msgstr ""
"このワークショップは、プログラミング言語 R の基礎を教えることが目的であり、\n"
"統計分析を教えることは含まれていないことに注意してください。"

#: r-novice-gapminder/README.md:25 r-novice-gapminder/index.md:20
msgid "The lesson contains more material than can be taught in a day.  The [instructor notes page]({{ page.root }}/guide) has some suggested lesson plans suitable for a one or half day workshop."
msgstr ""
"レッスンには、1日に教えることができる以上の素材が含まれています。\n"
"[講師ノートのページ]({{ page.root }}/guide)には、\n"
"1日または1日半のワークショップに適したレッスンプランがいくつかあります。"

#: r-novice-gapminder/README.md:27
msgid ""
"A variety of third party packages are used throughout this workshop. These\n"
"are not necessarily the best, nor are they comprehensive, but they are \n"
"packages we find useful, and have been chosen primarily for their \n"
"usability."
msgstr ""
"このワークショップでは、さまざまなサードパーティパッケージが使用されています。\n"
"これらは必ずしも最高のものではなく、包括的でもありませんが、有用であり、\n"
"使いやすさのために主に選ばれたパッケージです。"

#: r-novice-gapminder/README.md:32
msgid "Maintainers:"
msgstr "Maintainers:"

# unordered list
#: r-novice-gapminder/README.md:34
msgid "* [David Mawdsley][mawdsley_david]"
msgstr "* [Tom Kelly][TomKellyGenetics]"

# unordered list
#: r-novice-gapminder/README.md:35
msgid "* [Jeff Oliver][oliver_jeffrey]"
msgstr "* [Joel Nitta][joelnitta]"

# unordered list
#: r-novice-gapminder/README.md:36
msgid "* [Tom Wright][wright_tom]"
msgstr "* [Riku Takei][rikutakei]"

# unordered list
#: r-novice-gapminder/README.md:37
msgid "* [Naupaka Zimmerman][zimmerman_naupaka]"
msgstr ""
"* [Masami Yamaguchi][masamiy]\n"
"* [Maki Arakaki][rkkmk]"

#: r-novice-gapminder/README.md:39
msgid ""
"[gapminder]: http://www.gapminder.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example\n"
"[mawdsley_david]: https://software-carpentry.org/team/#mawdsley_david\n"
"[oliver_jeffrey]: https://software-carpentry.org/team/#oliver_jeffrey\n"
"[wright_tom]: https://software-carpentry.org/team/#wright_thomas\n"
"[zimmerman_naupaka]: https://software-carpentry.org/team/#zimmerman_naupaka"
msgstr ""
"[gapminder]: http://www.gapminder.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example\n"
"[mawdsley_david]: https://software-carpentry.org/team/#mawdsley_david\n"
"[oliver_jeffrey]: https://software-carpentry.org/team/#oliver_jeffrey\n"
"[wright_tom]: https://software-carpentry.org/team/#wright_thomas\n"
"[zimmerman_naupaka]: https://software-carpentry.org/team/#zimmerman_naupaka"

# Front Matter
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 01-rstudio-intro.md in _episodes_rmd/\n"
"title: \"Introduction to R and RStudio\"\n"
"teaching: 45\n"
"exercises: 10\n"
"questions:\n"
"- \"How to find your way around RStudio?\"\n"
"- \"How to interact with R?\"\n"
"- \"How to manage your environment?\"\n"
"- \"How to install packages?\"\n"
"objectives:\n"
"- \"Describe the purpose and use of each pane in the RStudio IDE\"\n"
"- \"Locate buttons and options in the RStudio IDE\"\n"
"- \"Define a variable\"\n"
"- \"Assign data to a variable\"\n"
"- \"Manage a workspace in an interactive R session\"\n"
"- \"Use mathematical and comparison operators\"\n"
"- \"Call functions\"\n"
"- \"Manage packages\"\n"
"keypoints:\n"
"- \"Use RStudio to write and run R programs.\"\n"
"- \"R has the usual arithmetic operators and mathematical functions.\"\n"
"- \"Use `<-` to assign values to variables.\"\n"
"- \"Use `ls()` to list the variables in a program.\"\n"
"- \"Use `rm()` to delete objects in a program.\"\n"
"- \"Use `install.packages()` to install packages (libraries).\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 01-rstudio-intro.md in _episodes_rmd/\n"
"title: \"R と RStudioの入門\"\n"
"teaching: 45\n"
"exercises: 10\n"
"questions:\n"
"- \"RStudio はどのように操作したらよいですか?\"\n"
"- \"R とはどのようにやりとりしたらよいですか?\"\n"
"- \"環境の管理はどうしたらよいですか?\"\n"
"- \"パッケージのインストールはどうしたらよいですか?\"\n"
"objectives:\n"
"- \"RStudio IDE の各ウィンドウの使用目的と使い方が説明出来るようになりましょう\"\n"
"- \"RStudio IDE のボタンやオプションの位置を理解しましょう\"\n"
"- \"変数が定義出来るようになりましょう\"\n"
"- \"変数に値の設定が出来るようになりましょう\"\n"
"- \"R セッションのワークスペース管理が出来るようになりましょう\"\n"
"- \"算術演算子や比較演算子が使えるようになりましょう。\"\n"
"- \"関数が呼び出せるようになりましょう。\"\n"
"- \"パッケージの管理が出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"RStudio で R プロラムの作成と実行を行う。\"\n"
"- \"R は算術演算子や数学関数が使える。\"\n"
"- \"`<-` を使って変数に値を設定する。\"\n"
"- \"`ls()` を使ってプログラム内の変数をリストする。\"\n"
"- \"`rm()` を使ってプログラム内のオブジェクトを消去する。\"\n"
"- \"`install.packages()` を使ってパッケージ(ライブラリ)のインストールを行う。\"\n"
"source: Rmd\n"
"---"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:34
msgid "## Motivation"
msgstr "## 動機"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:36
msgid ""
"Science is a multi-step process: once you've designed an experiment and collected\n"
"data, the real fun begins! This lesson will teach you how to start this process using\n"
"R and RStudio. We will begin with raw data, perform exploratory analyses, and learn\n"
"how to plot results graphically. This example starts with a dataset from\n"
"[gapminder.org](https://www.gapminder.org) containing population information for many\n"
"countries through time. Can you read the data into R? Can you plot the population for\n"
"Senegal? Can you calculate the average income for countries on the continent of Asia?\n"
"By the end of these lessons you will be able to do things like plot the populations\n"
"for all of these countries in under a minute!"
msgstr ""
"科学は複数の段階からなる作業です：実験を計画し、データを収集したら、\n"
"そこから本当の楽しみが始まります！このレッスンでは、その過程をRとRStudioを使って\n"
"どう進めるのかをお伝えします。まず生のデータから、予備解析をし、結果をどう\n"
"グラフ上にプロットするかを学びます。ここでの例は[gapminder.org](https://www.gapminder.org)\n"
"のデータセットを使います。このデータセットには、多くの国の人口の時系列データが入っています。\n"
"データをRに読み込むことができますか？セネガルの人口をプロットできますか？\n"
"アジア大陸にある国の平均所得を計算できますか？\n"
"これらのレッスンの終わるまでに、これらの全ての国の人口をプロットしたりするようなことが\n"
"一分足らずでできるようになるでしょう！"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:46
msgid "## Before Starting The Workshop"
msgstr "## ワークショップを始める前に"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:48
msgid "Please ensure you have the latest version of R and RStudio installed on your machine. This is important, as some packages used in the workshop may not install correctly (or at all) if R is not up to date."
msgstr "RとRStudioの最新バージョンが、自分のコンピューターにインストールされているか確認してください。最新バージョンであることが重要である理由は、ワークショップで使うパッケージには、Rが最新でないと、正常に（または全く）インストールされないものがあるからです。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:50
msgid ""
"[Download and install the latest version of R here](https://www.r-project.org/)\n"
"[Download and install RStudio here](https://www.rstudio.com/)"
msgstr ""
"[ここからRの最新バージョンをダウンロード及びインストール下さい](https://www.r-project.org/)\n"
"[ここからRStudioをダウンロード及びインストール下さい](https://www.rstudio.com/)"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:53
msgid "## Introduction to RStudio"
msgstr "## RStudio入門"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:55
msgid "Welcome to the R portion of the Software Carpentry workshop."
msgstr "Software CarpentryのR部分のワークショップへようこそ。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:57
msgid ""
"Throughout this lesson, we're going to teach you some of the fundamentals of\n"
"the R language as well as some best practices for organizing code for\n"
"scientific projects that will make your life easier."
msgstr ""
"このレッスンでは、R言語の基礎と、知っていると後々かなり楽になる科学的プロジェクトのために\n"
"コードを整える最適な方法をお教えしようと思います。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:61
msgid ""
"We'll be using RStudio: a free, open source R integrated development\n"
"environment. It provides a built in editor, works on all platforms (including\n"
"on servers) and provides many advantages such as integration with version\n"
"control and project management."
msgstr ""
"このレッスンではRStudioを使います。RStudioは、無料であり、Rを組み込んだオープンソースの\n"
"総合開発環境（IDE: Integrated Development Environment）です。RStudioは、全てのプラットフォーム（サーバーも含む）で起動できること、\n"
"エディタが組み込まれていることや、プロジェクト管理やバージョン管理にも対応しているなど、\n"
"良いところがいっぱいがあります。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:68
msgid "**Basic layout**"
msgstr "**基本的なレイアウト**"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:70
msgid "When you first open RStudio, you will be greeted by three panels:"
msgstr "最初にRStudioを開くと、３つのパネルが現れます："

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:72
msgid "  * The interactive R console (entire left)"
msgstr "  * インタラクティブなRコンソール（左側全部）"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:73
msgid "  * Environment/History (tabbed in upper right)"
msgstr "  * 環境／履歴（右上のタブ形式）"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:74
msgid "  * Files/Plots/Packages/Help/Viewer (tabbed in lower right)"
msgstr "  * Files/Plots/Packages/Help/Viewer（右下のタブ形式）"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:76
msgid "![RStudio layout](../fig/01-rstudio.png)"
msgstr "![RStudioレイアウト](../fig/01-rstudio.png)"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:78
msgid ""
"Once you open files, such as R scripts, an editor panel will also open\n"
"in the top left."
msgstr "Rスクリプトなどのファイルを開くと、左上にエディタパネルも開きます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:81
msgid "![RStudio layout with .R file open](../fig/01-rstudio-script.png)"
msgstr "![拡張子.Rのファイルを開いたときのRStudioレイアウト](../fig/01-rstudio-script.png)"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:84
msgid "## Work flow within RStudio"
msgstr "## RStudioでの作業の流れ"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:85
msgid "There are two main ways one can work within RStudio."
msgstr "RStudioで作業する２つの主な方法："

# ordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:87
msgid "1. Test and play within the interactive R console then copy code into"
msgstr "1. インタラクティブなRコンソールで試したり、確認したりした後、コードを"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:88
msgid ""
"a .R file to run later.\n"
"   *  This works well when doing small tests and initially starting off.\n"
"   *  It quickly becomes laborious\n"
"2. Start writing in an .R file and use RStudio's short cut keys for the Run command\n"
"to push the current line, selected lines or modified lines to the\n"
"interactive R console.\n"
"   * This is a great way to start; all your code is saved for later\n"
"   * You will be able to run the file you create from within RStudio\n"
"   or using R's `source()`  function."
msgstr ""
"後で走らせる.Rファイルにコピーする。\n"
"   *  まず始めてみるときや、小規模なテストをするのに適している。\n"
"   *  すぐ面倒になる。\n"
"2. まず.Rファイルに書き、インタラクティブなRコンソールへ、現在の行、選択した行、\n"
"修正した行など送るコマンドを走らせるために、RStudioのショートカットキーを使う。\n"
"   * 始めるのによい方法。全てのコードが後々のために保存される。\n"
"   * 作ったファイルを、RStudioから又は\"source()\"関数を使って走らせることができる。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:98
msgid "> ## Tip: Running segments of your code"
msgstr "> ## ヒント：ひとかたまりのコードを走らせる"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:99
msgid ""
">\n"
"> RStudio offers you great flexibility in running code from within the editor\n"
"> window. There are buttons, menu choices, and keyboard shortcuts. To run the\n"
"> current line, you can \n"
"> 1. click on the `Run` button above the editor panel, or \n"
"> 2. select \"Run Lines\" from the \"Code\" menu, or \n"
"> 3. hit <kbd>Ctrl</kbd>+<kbd>Return</kbd> in Windows or Linux \n"
"> or <kbd>&#8984;</kbd>+<kbd>Return</kbd> on OS X.\n"
"> (This shortcut can also be seen by hovering\n"
"> the mouse over the button). To run a block of code, select it and then `Run`.\n"
"> If you have modified a line of code within a block of code you have just run,\n"
"> there is no need to reselct the section and `Run`, you can use the next button\n"
"> along, `Re-run the previous region`. This will run the previous code block\n"
"> including the modifications you have made."
msgstr ""
">\n"
"> RStudioには、エディタからコードを走らせる色々な方法があります。\n"
"> ボタン、メニュー選択、そしてキーボードのショートカットがあります。\n"
"> 現在の行を走らせるには、\n"
"> 1. エディタパネルの`Run`のボタンをクリックする\n"
"> 2. 「Code」メニューから「Run Lines」を選択する \n"
"> 3. WindowsかLinuxなら、<kbd>Ctrl</kbd>+<kbd>Return</kbd>を押す\n"
"> または、OS Xなら、<kbd>&#8984;</kbd>+<kbd>Return</kbd>。\n"
"> （このショートカットはボタンの上にマウスを合わせると表示される）\n"
"> コードのかたまりを走らせるには、まずその部分を選択してから `Run`を押します。\n"
"> もし、コードのかたまりを走らせた後で、その一部を修正した場合、\n"
"> その部分を選択して`Run`する必要はありません。その場合は次の\n"
"> `Re-run the previous region`ボタンが使えます。これは、前のコードのかたまりを\n"
"> 修正を行った部分を含めて走らせます。"

# SC/DC Template label
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:113
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:179
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:446
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:663
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:764
#: r-novice-gapminder/_episodes/02-project-intro.md:118
#: r-novice-gapminder/_episodes/02-project-intro.md:140
#: r-novice-gapminder/_episodes/02-project-intro.md:224
#: r-novice-gapminder/_episodes/03-seeking-help.md:53
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:50
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:488
#: r-novice-gapminder/_episodes/06-data-subsetting.md:51
#: r-novice-gapminder/_episodes/06-data-subsetting.md:205
#: r-novice-gapminder/_episodes/06-data-subsetting.md:282
#: r-novice-gapminder/_episodes/06-data-subsetting.md:486
#: r-novice-gapminder/_episodes/06-data-subsetting.md:596
#: r-novice-gapminder/_episodes/06-data-subsetting.md:603
#: r-novice-gapminder/_episodes/06-data-subsetting.md:954
#: r-novice-gapminder/_episodes/07-control-flow.md:216
#: r-novice-gapminder/_episodes/07-control-flow.md:350
#: r-novice-gapminder/_episodes/07-control-flow.md:409
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:209
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:275
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:375
#: r-novice-gapminder/_episodes/09-vectorization.md:183
#: r-novice-gapminder/_episodes/09-vectorization.md:260
#: r-novice-gapminder/_episodes/10-functions.md:49
#: r-novice-gapminder/_episodes/10-functions.md:98
#: r-novice-gapminder/_episodes/10-functions.md:528
#: r-novice-gapminder/_episodes/10-functions.md:538
#: r-novice-gapminder/_episodes/10-functions.md:639
#: r-novice-gapminder/_episodes/10-functions.md:673
#: r-novice-gapminder/_episodes/12-plyr.md:403
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:349
#: r-novice-gapminder/_episodes/16-wrap-up.md:47
msgid "{: .callout}"
msgstr "{: .callout}"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:115
msgid "## Introduction to R"
msgstr "## R入門"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:117
msgid ""
"Much of your time in R will be spent in the R interactive\n"
"console. This is where you will run all of your code, and can be a\n"
"useful environment to try out ideas before adding them to an R script\n"
"file. This console in RStudio is the same as the one you would get if\n"
"you typed in `R` in your command-line environment."
msgstr ""
"Rを使う時間のほとんどは、Rのインタラクティブコンソールでの作業となるでしょう。\n"
"ここが、全てのコードを走らせる、また、.Rファイルにコードを加える前にアイディアを\n"
"試してみるのに使える環境となります。\n"
"このRStudioのコンソールが、コマンドライン環境に`R` と入力するのと同じ環境になります。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:123
msgid ""
"The first thing you will see in the R interactive session is a bunch\n"
"of information, followed by a \">\" and a blinking cursor. In many ways\n"
"this is similar to the shell environment you learned about during the\n"
"shell lessons: it operates on the same idea of a \"Read, evaluate,\n"
"print loop\": you type in commands, R tries to execute them, and then\n"
"returns a result."
msgstr ""
"Rインタラクティブセッションでまず目に入ってくるのは、ひとかたまりの情報と\n"
"その後に続く、「>」と点滅するカーソルです。これは多くの観点で、\n"
"シェルのレッスンで学んだシェル環境と似ています。\n"
"つまり、「読み、実行し、出力するループ」の考えと同じように動くので、\n"
"コマンドを入力すれば、Rは、それを実行しようとし、そして結果を返すのです。"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:130
msgid "## Using R as a calculator"
msgstr "## Rを計算機としての使用"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:132
msgid "The simplest thing you could do with R is do arithmetic:"
msgstr "一番単純なRの使い方は、演算です："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:135
msgid ""
"~~~\n"
"1 + 100\n"
"~~~"
msgstr ""
"~~~\n"
"1 + 100\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:138
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:197
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:214
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:232
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:245
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:263
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:283
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:296
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:309
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:322
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:354
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:367
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:380
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:393
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:406
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:419
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:456
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:465
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:484
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:499
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:510
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:531
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:595
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:609
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:624
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:648
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:674
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:721
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:730
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:745
#: r-novice-gapminder/_episodes/03-seeking-help.md:31
#: r-novice-gapminder/_episodes/03-seeking-help.md:63
#: r-novice-gapminder/_episodes/03-seeking-help.md:83
#: r-novice-gapminder/_episodes/03-seeking-help.md:106
#: r-novice-gapminder/_episodes/03-seeking-help.md:115
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:44
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:59
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:89
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:103
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:120
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:134
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:149
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:179
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:194
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:208
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:222
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:236
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:250
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:271
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:281
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:291
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:307
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:337
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:365
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:380
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:400
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:415
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:434
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:470
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:485
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:498
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:513
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:531
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:546
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:561
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:587
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:602
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:618
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:633
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:649
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:663
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:677
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:699
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:713
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:727
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:741
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:755
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:772
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:787
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:823
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:837
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:852
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:873
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:888
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:904
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:918
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:937
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:951
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1004
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1028
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1053
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1075
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1098
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1113
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1128
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1142
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1158
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1173
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1187
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1343
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1361
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1375
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1389
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1403
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1417
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1431
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:48
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:66
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:85
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:100
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:116
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:130
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:146
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:156
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:180
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:195
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:205
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:224
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:260
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:280
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:304
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:323
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:333
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:355
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:379
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:403
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:463
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:497
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:518
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:532
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:546
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:563
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:580
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:596
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:610
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:625
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:641
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:664
#: r-novice-gapminder/_episodes/06-data-subsetting.md:38
#: r-novice-gapminder/_episodes/06-data-subsetting.md:65
#: r-novice-gapminder/_episodes/06-data-subsetting.md:79
#: r-novice-gapminder/_episodes/06-data-subsetting.md:98
#: r-novice-gapminder/_episodes/06-data-subsetting.md:114
#: r-novice-gapminder/_episodes/06-data-subsetting.md:129
#: r-novice-gapminder/_episodes/06-data-subsetting.md:143
#: r-novice-gapminder/_episodes/06-data-subsetting.md:159
#: r-novice-gapminder/_episodes/06-data-subsetting.md:174
#: r-novice-gapminder/_episodes/06-data-subsetting.md:192
#: r-novice-gapminder/_episodes/06-data-subsetting.md:216
#: r-novice-gapminder/_episodes/06-data-subsetting.md:232
#: r-novice-gapminder/_episodes/06-data-subsetting.md:293
#: r-novice-gapminder/_episodes/06-data-subsetting.md:388
#: r-novice-gapminder/_episodes/06-data-subsetting.md:410
#: r-novice-gapminder/_episodes/06-data-subsetting.md:428
#: r-novice-gapminder/_episodes/06-data-subsetting.md:449
#: r-novice-gapminder/_episodes/06-data-subsetting.md:614
#: r-novice-gapminder/_episodes/06-data-subsetting.md:629
#: r-novice-gapminder/_episodes/06-data-subsetting.md:645
#: r-novice-gapminder/_episodes/06-data-subsetting.md:675
#: r-novice-gapminder/_episodes/06-data-subsetting.md:713
#: r-novice-gapminder/_episodes/06-data-subsetting.md:797
#: r-novice-gapminder/_episodes/06-data-subsetting.md:812
#: r-novice-gapminder/_episodes/06-data-subsetting.md:827
#: r-novice-gapminder/_episodes/06-data-subsetting.md:844
#: r-novice-gapminder/_episodes/06-data-subsetting.md:866
#: r-novice-gapminder/_episodes/06-data-subsetting.md:884
#: r-novice-gapminder/_episodes/06-data-subsetting.md:906
#: r-novice-gapminder/_episodes/06-data-subsetting.md:922
#: r-novice-gapminder/_episodes/06-data-subsetting.md:939
#: r-novice-gapminder/_episodes/06-data-subsetting.md:963
#: r-novice-gapminder/_episodes/06-data-subsetting.md:981
#: r-novice-gapminder/_episodes/06-data-subsetting.md:998
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1063
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1085
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1105
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1122
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1137
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1152
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1167
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1275
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1296
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1311
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1326
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1345
#: r-novice-gapminder/_episodes/07-control-flow.md:42
#: r-novice-gapminder/_episodes/07-control-flow.md:56
#: r-novice-gapminder/_episodes/07-control-flow.md:77
#: r-novice-gapminder/_episodes/07-control-flow.md:100
#: r-novice-gapminder/_episodes/07-control-flow.md:122
#: r-novice-gapminder/_episodes/07-control-flow.md:138
#: r-novice-gapminder/_episodes/07-control-flow.md:236
#: r-novice-gapminder/_episodes/07-control-flow.md:246
#: r-novice-gapminder/_episodes/07-control-flow.md:278
#: r-novice-gapminder/_episodes/07-control-flow.md:324
#: r-novice-gapminder/_episodes/07-control-flow.md:369
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:56
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:81
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:95
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:168
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:184
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:197
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:245
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:261
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:285
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:297
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:385
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:418
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:441
#: r-novice-gapminder/_episodes/09-vectorization.md:29
#: r-novice-gapminder/_episodes/09-vectorization.md:47
#: r-novice-gapminder/_episodes/09-vectorization.md:66
#: r-novice-gapminder/_episodes/09-vectorization.md:155
#: r-novice-gapminder/_episodes/09-vectorization.md:170
#: r-novice-gapminder/_episodes/09-vectorization.md:193
#: r-novice-gapminder/_episodes/09-vectorization.md:209
#: r-novice-gapminder/_episodes/10-functions.md:63
#: r-novice-gapminder/_episodes/10-functions.md:75
#: r-novice-gapminder/_episodes/10-functions.md:109
#: r-novice-gapminder/_episodes/10-functions.md:123
#: r-novice-gapminder/_episodes/10-functions.md:175
#: r-novice-gapminder/_episodes/10-functions.md:226
#: r-novice-gapminder/_episodes/10-functions.md:245
#: r-novice-gapminder/_episodes/10-functions.md:268
#: r-novice-gapminder/_episodes/10-functions.md:277
#: r-novice-gapminder/_episodes/10-functions.md:293
#: r-novice-gapminder/_episodes/10-functions.md:344
#: r-novice-gapminder/_episodes/10-functions.md:366
#: r-novice-gapminder/_episodes/10-functions.md:395
#: r-novice-gapminder/_episodes/10-functions.md:405
#: r-novice-gapminder/_episodes/10-functions.md:421
#: r-novice-gapminder/_episodes/10-functions.md:442
#: r-novice-gapminder/_episodes/10-functions.md:469
#: r-novice-gapminder/_episodes/10-functions.md:485
#: r-novice-gapminder/_episodes/10-functions.md:501
#: r-novice-gapminder/_episodes/10-functions.md:547
#: r-novice-gapminder/_episodes/11-writing-data.md:29
#: r-novice-gapminder/_episodes/11-writing-data.md:57
#: r-novice-gapminder/_episodes/11-writing-data.md:105
#: r-novice-gapminder/_episodes/11-writing-data.md:114
#: r-novice-gapminder/_episodes/11-writing-data.md:144
#: r-novice-gapminder/_episodes/11-writing-data.md:160
#: r-novice-gapminder/_episodes/11-writing-data.md:168
#: r-novice-gapminder/_episodes/12-plyr.md:40
#: r-novice-gapminder/_episodes/12-plyr.md:54
#: r-novice-gapminder/_episodes/12-plyr.md:68
#: r-novice-gapminder/_episodes/12-plyr.md:82
#: r-novice-gapminder/_episodes/12-plyr.md:121
#: r-novice-gapminder/_episodes/12-plyr.md:154
#: r-novice-gapminder/_episodes/12-plyr.md:171
#: r-novice-gapminder/_episodes/12-plyr.md:217
#: r-novice-gapminder/_episodes/12-plyr.md:262
#: r-novice-gapminder/_episodes/12-plyr.md:339
#: r-novice-gapminder/_episodes/12-plyr.md:386
#: r-novice-gapminder/_episodes/13-dplyr.md:33
#: r-novice-gapminder/_episodes/13-dplyr.md:47
#: r-novice-gapminder/_episodes/13-dplyr.md:61
#: r-novice-gapminder/_episodes/13-dplyr.md:97
#: r-novice-gapminder/_episodes/13-dplyr.md:105
#: r-novice-gapminder/_episodes/13-dplyr.md:117
#: r-novice-gapminder/_episodes/13-dplyr.md:131
#: r-novice-gapminder/_episodes/13-dplyr.md:152
#: r-novice-gapminder/_episodes/13-dplyr.md:191
#: r-novice-gapminder/_episodes/13-dplyr.md:211
#: r-novice-gapminder/_episodes/13-dplyr.md:262
#: r-novice-gapminder/_episodes/13-dplyr.md:276
#: r-novice-gapminder/_episodes/13-dplyr.md:361
#: r-novice-gapminder/_episodes/13-dplyr.md:374
#: r-novice-gapminder/_episodes/13-dplyr.md:392
#: r-novice-gapminder/_episodes/13-dplyr.md:418
#: r-novice-gapminder/_episodes/13-dplyr.md:446
#: r-novice-gapminder/_episodes/13-dplyr.md:478
#: r-novice-gapminder/_episodes/13-dplyr.md:509
#: r-novice-gapminder/_episodes/13-dplyr.md:527
#: r-novice-gapminder/_episodes/13-dplyr.md:551
#: r-novice-gapminder/_episodes/13-dplyr.md:568
#: r-novice-gapminder/_episodes/14-tidyr.md:56
#: r-novice-gapminder/_episodes/14-tidyr.md:65
#: r-novice-gapminder/_episodes/14-tidyr.md:73
#: r-novice-gapminder/_episodes/14-tidyr.md:138
#: r-novice-gapminder/_episodes/14-tidyr.md:200
#: r-novice-gapminder/_episodes/14-tidyr.md:233
#: r-novice-gapminder/_episodes/14-tidyr.md:260
#: r-novice-gapminder/_episodes/14-tidyr.md:315
#: r-novice-gapminder/_episodes/14-tidyr.md:329
#: r-novice-gapminder/_episodes/14-tidyr.md:343
#: r-novice-gapminder/_episodes/14-tidyr.md:357
#: r-novice-gapminder/_episodes/14-tidyr.md:375
#: r-novice-gapminder/_episodes/14-tidyr.md:393
#: r-novice-gapminder/_episodes/14-tidyr.md:413
#: r-novice-gapminder/_episodes/14-tidyr.md:436
#: r-novice-gapminder/_episodes/14-tidyr.md:460
#: r-novice-gapminder/_episodes/14-tidyr.md:481
#: r-novice-gapminder/_episodes/14-tidyr.md:505
#: r-novice-gapminder/_episodes/14-tidyr.md:581
#: r-novice-gapminder/_episodes/14-tidyr.md:633
msgid "{: .language-r}"
msgstr "{: .language-r}"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:142
msgid ""
"~~~\n"
"[1] 101\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 101\n"
"~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:145
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:161
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:204
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:221
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:252
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:270
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:290
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:303
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:316
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:329
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:361
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:374
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:387
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:400
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:413
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:426
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:472
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:491
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:602
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:616
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:631
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:655
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:713
#: r-novice-gapminder/_episodes/03-seeking-help.md:141
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:69
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:96
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:111
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:127
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:141
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:164
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:186
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:201
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:215
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:229
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:243
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:257
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:298
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:321
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:344
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:387
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:407
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:422
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:441
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:477
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:505
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:520
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:538
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:553
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:568
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:594
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:609
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:625
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:640
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:656
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:670
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:690
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:706
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:720
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:734
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:748
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:762
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:780
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:794
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:830
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:844
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:859
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:881
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:895
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:911
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:925
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:944
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:958
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1011
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1045
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1067
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1082
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1106
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1121
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1135
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1149
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1166
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1180
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1197
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1353
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1368
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1382
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1396
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1410
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1424
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1438
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:58
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:76
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:123
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:137
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:187
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:216
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:235
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:272
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:291
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:315
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:344
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:366
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:394
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:418
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:510
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:525
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:539
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:553
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:570
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:587
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:603
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:617
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:632
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:648
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:677
#: r-novice-gapminder/_episodes/06-data-subsetting.md:46
#: r-novice-gapminder/_episodes/06-data-subsetting.md:73
#: r-novice-gapminder/_episodes/06-data-subsetting.md:87
#: r-novice-gapminder/_episodes/06-data-subsetting.md:106
#: r-novice-gapminder/_episodes/06-data-subsetting.md:122
#: r-novice-gapminder/_episodes/06-data-subsetting.md:136
#: r-novice-gapminder/_episodes/06-data-subsetting.md:150
#: r-novice-gapminder/_episodes/06-data-subsetting.md:167
#: r-novice-gapminder/_episodes/06-data-subsetting.md:182
#: r-novice-gapminder/_episodes/06-data-subsetting.md:199
#: r-novice-gapminder/_episodes/06-data-subsetting.md:224
#: r-novice-gapminder/_episodes/06-data-subsetting.md:240
#: r-novice-gapminder/_episodes/06-data-subsetting.md:301
#: r-novice-gapminder/_episodes/06-data-subsetting.md:396
#: r-novice-gapminder/_episodes/06-data-subsetting.md:418
#: r-novice-gapminder/_episodes/06-data-subsetting.md:436
#: r-novice-gapminder/_episodes/06-data-subsetting.md:457
#: r-novice-gapminder/_episodes/06-data-subsetting.md:637
#: r-novice-gapminder/_episodes/06-data-subsetting.md:661
#: r-novice-gapminder/_episodes/06-data-subsetting.md:690
#: r-novice-gapminder/_episodes/06-data-subsetting.md:721
#: r-novice-gapminder/_episodes/06-data-subsetting.md:805
#: r-novice-gapminder/_episodes/06-data-subsetting.md:820
#: r-novice-gapminder/_episodes/06-data-subsetting.md:835
#: r-novice-gapminder/_episodes/06-data-subsetting.md:852
#: r-novice-gapminder/_episodes/06-data-subsetting.md:875
#: r-novice-gapminder/_episodes/06-data-subsetting.md:897
#: r-novice-gapminder/_episodes/06-data-subsetting.md:913
#: r-novice-gapminder/_episodes/06-data-subsetting.md:930
#: r-novice-gapminder/_episodes/06-data-subsetting.md:970
#: r-novice-gapminder/_episodes/06-data-subsetting.md:990
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1007
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1071
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1096
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1112
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1159
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1180
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1288
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1303
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1318
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1336
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1353
#: r-novice-gapminder/_episodes/07-control-flow.md:63
#: r-novice-gapminder/_episodes/07-control-flow.md:84
#: r-novice-gapminder/_episodes/07-control-flow.md:107
#: r-novice-gapminder/_episodes/07-control-flow.md:129
#: r-novice-gapminder/_episodes/07-control-flow.md:145
#: r-novice-gapminder/_episodes/07-control-flow.md:262
#: r-novice-gapminder/_episodes/07-control-flow.md:309
#: r-novice-gapminder/_episodes/07-control-flow.md:333
#: r-novice-gapminder/_episodes/07-control-flow.md:378
#: r-novice-gapminder/_episodes/09-vectorization.md:36
#: r-novice-gapminder/_episodes/09-vectorization.md:54
#: r-novice-gapminder/_episodes/09-vectorization.md:162
#: r-novice-gapminder/_episodes/09-vectorization.md:177
#: r-novice-gapminder/_episodes/09-vectorization.md:200
#: r-novice-gapminder/_episodes/09-vectorization.md:219
#: r-novice-gapminder/_episodes/10-functions.md:116
#: r-novice-gapminder/_episodes/10-functions.md:130
#: r-novice-gapminder/_episodes/10-functions.md:284
#: r-novice-gapminder/_episodes/10-functions.md:373
#: r-novice-gapminder/_episodes/10-functions.md:434
#: r-novice-gapminder/_episodes/10-functions.md:461
#: r-novice-gapminder/_episodes/10-functions.md:477
#: r-novice-gapminder/_episodes/11-writing-data.md:131
#: r-novice-gapminder/_episodes/11-writing-data.md:185
#: r-novice-gapminder/_episodes/12-plyr.md:61
#: r-novice-gapminder/_episodes/12-plyr.md:75
#: r-novice-gapminder/_episodes/12-plyr.md:89
#: r-novice-gapminder/_episodes/12-plyr.md:183
#: r-novice-gapminder/_episodes/12-plyr.md:247
#: r-novice-gapminder/_episodes/12-plyr.md:329
#: r-novice-gapminder/_episodes/12-plyr.md:366
#: r-novice-gapminder/_episodes/12-plyr.md:397
#: r-novice-gapminder/_episodes/13-dplyr.md:40
#: r-novice-gapminder/_episodes/13-dplyr.md:54
#: r-novice-gapminder/_episodes/13-dplyr.md:68
#: r-novice-gapminder/_episodes/13-dplyr.md:204
#: r-novice-gapminder/_episodes/13-dplyr.md:238
#: r-novice-gapminder/_episodes/13-dplyr.md:406
#: r-novice-gapminder/_episodes/13-dplyr.md:432
#: r-novice-gapminder/_episodes/13-dplyr.md:460
#: r-novice-gapminder/_episodes/14-tidyr.md:86
#: r-novice-gapminder/_episodes/14-tidyr.md:183
#: r-novice-gapminder/_episodes/14-tidyr.md:211
#: r-novice-gapminder/_episodes/14-tidyr.md:244
#: r-novice-gapminder/_episodes/14-tidyr.md:322
#: r-novice-gapminder/_episodes/14-tidyr.md:336
#: r-novice-gapminder/_episodes/14-tidyr.md:350
#: r-novice-gapminder/_episodes/14-tidyr.md:364
#: r-novice-gapminder/_episodes/14-tidyr.md:386
#: r-novice-gapminder/_episodes/14-tidyr.md:406
#: r-novice-gapminder/_episodes/14-tidyr.md:426
#: r-novice-gapminder/_episodes/14-tidyr.md:443
#: r-novice-gapminder/_episodes/14-tidyr.md:471
#: r-novice-gapminder/_episodes/14-tidyr.md:491
#: r-novice-gapminder/_episodes/14-tidyr.md:549
#: r-novice-gapminder/_episodes/14-tidyr.md:626
#: r-novice-gapminder/_episodes/14-tidyr.md:640
msgid "{: .output}"
msgstr "{: .output}"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:147
msgid ""
"And R will print out the answer, with a preceding \"[1]\". Don't worry about this\n"
"for now, we'll explain that later. For now think of it as indicating output."
msgstr ""
"するとRは、「[1]」の後に回答を表示します。「[1]」については後で説明するので、\n"
"今は気にしなくても大丈夫です。今のところ、出力されたものを示すものだと思ってください。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:150
msgid ""
"Like bash, if you type in an incomplete command, R will wait for you to\n"
"complete it:"
msgstr "バッシュのように、Rは、不完全なコマンドが入力されると、それが完成されるまで待ちます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:153
msgid ""
"~~~\n"
"> 1 +\n"
"~~~"
msgstr ""
"~~~\n"
"> 1 +\n"
"~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:156
msgid "{: .r}"
msgstr "{: .r}"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:158
msgid ""
"~~~\n"
"+\n"
"~~~"
msgstr ""
"~~~\n"
"+\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:163
msgid ""
"Any time you hit return and the R session shows a \"+\" instead of a \">\", it\n"
"means it's waiting for you to complete the command. If you want to cancel\n"
"a command you can simply hit \"Esc\" and RStudio will give you back the \">\"\n"
"prompt."
msgstr ""
"Rセッションで改行キーを押す度に、「>」の代わりに「+」が出力される場合、\n"
"コマンドが完成されるのを待っていることを示しています。そのコマンドを取り消したい\n"
"場合は、単純に「Esc」を押せば、RStudioは「>」を返します。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:168
msgid "> ## Tip: Cancelling commands"
msgstr "> ## ヒント：コマンドの取り消し"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:169
msgid ""
">\n"
"> If you're using R from the commandline instead of from within RStudio,\n"
"> you need to use <kbd>Ctrl</kbd>+<kbd>C</kbd> instead of <kbd>Esc</kbd>\n"
"> to cancel the command. This applies to Mac users as well!\n"
">\n"
"> Cancelling a command isn't only useful for killing incomplete commands:\n"
"> you can also use it to tell R to stop running code (for example if it's\n"
"> taking much longer than you expect), or to get rid of the code you're\n"
"> currently writing.\n"
">"
msgstr ""
">\n"
"> RStudioではなく、コマンドラインからRを使う場合、\n"
"> コマンドを取り消す場合、<kbd>Esc</kbd>の代わりに<kbd>Ctrl</kbd>+<kbd>C</kbd>\n"
"> を使う必要があります。これは、Macユーザーも同じです！\n"
">\n"
"> コマンドの取り消しは、不完全なコマンドを消す他にも使えます。\n"
"> 走っているコードを止めてとRに伝えるにも使え（例えば、予想よりも\n"
"> かなり長くかかっている場合）、その他にも、今書いているコードを\n"
"> 消去するにも使えます。\n"
">"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:181
msgid ""
"When using R as a calculator, the order of operations is the same as you\n"
"would have learned back in school."
msgstr ""
"Rを計算機として使う場合、演算の順番は、学校で学んだだろうものと\n"
"同じです。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:184
msgid "From highest to lowest precedence:"
msgstr "一番先に行われる処理から一番後に行われる処理："

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:186
msgid " * Parentheses: `(`, `)`"
msgstr " * 括弧： `(`、`)`"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:187
msgid " * Exponents: `^` or `**`"
msgstr " * 累乗：`^`か`**`"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:188
msgid " * Divide: `/`"
msgstr " * 割る：`/`"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:189
msgid " * Multiply: `*`"
msgstr " * 掛ける：`*`"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:190
msgid " * Add: `+`"
msgstr " * 加える：`+`"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:191
msgid " * Subtract: `-`"
msgstr " * 引く：`-`"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:194
msgid ""
"~~~\n"
"3 + 5 * 2\n"
"~~~"
msgstr ""
"~~~\n"
"3 + 5 * 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:201
msgid ""
"~~~\n"
"[1] 13\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 13\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:206
msgid ""
"Use parentheses to group operations in order to force the order of\n"
"evaluation if it differs from the default, or to make clear what you\n"
"intend."
msgstr ""
"デフォルトと違う順番で計算させたい場合や、意図を明確にしたい場合は、\n"
"演算をまとめるために、括弧を使いましょう。"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:211
msgid ""
"~~~\n"
"(3 + 5) * 2\n"
"~~~"
msgstr ""
"~~~\n"
"(3 + 5) * 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:218
msgid ""
"~~~\n"
"[1] 16\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 16\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:223
msgid ""
"This can get unwieldy when not needed, but  clarifies your intentions.\n"
"Remember that others may later read your code."
msgstr ""
"括弧をつける必要ではないときは、面倒かもしれませんが、そうすることで自分の意図\n"
"するところがはっきり伝わります。\n"
"自分が書いたコードを、後々他の人が読むことになるかもしれないことを忘れないように。"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:227
msgid ""
"~~~\n"
"(3 + (5 * (2 ^ 2))) # hard to read\n"
"3 + 5 * 2 ^ 2       # clear, if you remember the rules\n"
"3 + 5 * (2 ^ 2)     # if you forget some rules, this might help\n"
"~~~"
msgstr ""
"~~~\n"
"(3 + (5 * (2 ^ 2))) # 読みづらい\n"
"3 + 5 * 2 ^ 2       # ルールを覚えている人には明確\n"
"3 + 5 * (2 ^ 2)     # ルールを忘れている人にも伝わるはず\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:235
msgid ""
"The text after each line of code is called a\n"
"\"comment\". Anything that follows after the hash (or octothorpe) symbol\n"
"`#` is ignored by R when it executes code."
msgstr ""
"コードの後の文は、「コメント」と呼ばれます。\n"
"シャープ（ナンバー）記号`#` の後に来るものは、Rがコードを実行する際は無視されます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:239
msgid "Really small or large numbers get a scientific notation:"
msgstr "とても大きい、又は小さい数には、指数表記が使われます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:242
msgid ""
"~~~\n"
"2/10000\n"
"~~~"
msgstr ""
"~~~\n"
"2/10000\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:249
msgid ""
"~~~\n"
"[1] 2e-04\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2e-04\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:254
msgid ""
"Which is shorthand for \"multiplied by `10^XX`\". So `2e-4`\n"
"is shorthand for `2 * 10^(-4)`."
msgstr ""
"これは、「`10^XX`で掛けたもの」を略したものです。つまり`2e-4`は、\n"
"`2 * 10^(-4)`の略です。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:257
msgid "You can write numbers in scientific notation too:"
msgstr "数を指数記号で書くこともできます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:260
msgid ""
"~~~\n"
"5e3  # Note the lack of minus here\n"
"~~~"
msgstr ""
"~~~\n"
"5e3  # マイナスがないことに注意\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:267
msgid ""
"~~~\n"
"[1] 5000\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 5000\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:272
msgid "## Mathematical functions"
msgstr "## 数学関数"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:274
msgid ""
"R has many built in mathematical functions. To call a function,\n"
"we simply type its name, followed by  open and closing parentheses.\n"
"Anything we type inside the parentheses is called the function's\n"
"arguments:"
msgstr ""
"Rには、多くの数学関数が備え付けられています。関数を呼び出すには、\n"
"関数名と始め括弧と終わり括弧を書きます。\n"
"括弧の中に書いたものが、関数の引数となります："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:280
msgid ""
"~~~\n"
"sin(1)  # trigonometry functions\n"
"~~~"
msgstr ""
"~~~\n"
"sin(1)  # 三角関数\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:287
msgid ""
"~~~\n"
"[1] 0.841471\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0.841471\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:293
msgid ""
"~~~\n"
"log(1)  # natural logarithm\n"
"~~~"
msgstr ""
"~~~\n"
"log(1)  # 自然対数\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:300
msgid ""
"~~~\n"
"[1] 0\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:306
msgid ""
"~~~\n"
"log10(10) # base-10 logarithm\n"
"~~~"
msgstr ""
"~~~\n"
"log10(10) # 10を底とする対数\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:313
msgid ""
"~~~\n"
"[1] 1\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:319
msgid ""
"~~~\n"
"exp(0.5) # e^(1/2)\n"
"~~~"
msgstr ""
"~~~\n"
"exp(0.5) # e^(1/2)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:326
msgid ""
"~~~\n"
"[1] 1.648721\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1.648721\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:331
msgid ""
"Don't worry about trying to remember every function in R. You\n"
"can simply look them up on Google, or if you can remember the\n"
"start of the function's name, use the tab completion in RStudio."
msgstr ""
"Rにある全ての関数を覚えようとして心配する必要はありません。\n"
"Googleで検索すればいいですし、関数の始まりさえ覚えていれば\n"
"RStudioのタブ入力補完機能が使えます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:335
msgid ""
"This is one advantage that RStudio has over R on its own, it\n"
"has auto-completion abilities that allow you to more easily\n"
"look up functions, their arguments, and the values that they\n"
"take."
msgstr ""
"これがRStudioが、Rそのものを使うよりもいい理由のひとつです。\n"
"RStudioには、自動補完機能があり、関数、その引数、その取りうる値を\n"
"より簡単に見つけることができます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:340
msgid ""
"Typing a `?` before the name of a command will open the help page\n"
"for that command. As well as providing a detailed description of\n"
"the command and how it works, scrolling to the bottom of the\n"
"help page will usually show a collection of code examples which\n"
"illustrate command usage. We'll go through an example later."
msgstr ""
"コマンド名の前に、`?` を付けることで、そのコマンドのヘルプのページを開くことができます。\n"
"そのコマンドの詳細についての説明やそれがどう動くかだけではなく、ヘルプページの最後まで\n"
"スクロールすると、通常、コマンドの使い方を伝えるコードを用いた事例集が参照できます。\n"
"これについては、後ほど、例で見てみることにしましょう。"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:346
msgid "## Comparing things"
msgstr "## 何かを比較する"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:348
msgid "We can also do comparison in R:"
msgstr "Rを使って比較をすることもできます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:351
msgid ""
"~~~\n"
"1 == 1  # equality (note two equals signs, read as \"is equal to\")\n"
"~~~"
msgstr ""
"~~~\n"
"1 == 1  # 等価（イコールが２つあることに注意。「は、～と等しい」と読む）\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:358
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:371
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:384
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:397
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:410
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:423
#: r-novice-gapminder/_episodes/14-tidyr.md:440
#: r-novice-gapminder/_episodes/14-tidyr.md:637
msgid ""
"~~~\n"
"[1] TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] TRUE\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:364
msgid ""
"~~~\n"
"1 != 2  # inequality (read as \"is not equal to\")\n"
"~~~"
msgstr ""
"~~~\n"
"1 != 2  # 不等価（「は、～と等しくない」と読む）\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:377
msgid ""
"~~~\n"
"1 < 2  # less than\n"
"~~~"
msgstr ""
"~~~\n"
"1 < 2  # より少ない\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:390
msgid ""
"~~~\n"
"1 <= 1  # less than or equal to\n"
"~~~"
msgstr ""
"~~~\n"
"1 <= 1  # より少ない、又は等しい\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:403
msgid ""
"~~~\n"
"1 > 0  # greater than\n"
"~~~"
msgstr ""
"~~~\n"
"1 > 0  # より大きい\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:416
msgid ""
"~~~\n"
"1 >= -9 # greater than or equal to\n"
"~~~"
msgstr ""
"~~~\n"
"1 >= -9 # より大きい、又は等しい\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:428
msgid "> ## Tip: Comparing Numbers"
msgstr "> ##ヒント： 数の比較"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:429
msgid ""
">\n"
"> A word of warning about comparing numbers: you should\n"
"> never use `==` to compare two numbers unless they are\n"
"> integers (a data type which can specifically represent\n"
"> only whole numbers).\n"
">\n"
"> Computers may only represent decimal numbers with a\n"
"> certain degree of precision, so two numbers which look\n"
"> the same when printed out by R, may actually have\n"
"> different underlying representations and therefore be\n"
"> different by a small margin of error (called Machine\n"
"> numeric tolerance).\n"
">\n"
"> Instead you should use the `all.equal` function.\n"
">\n"
"> Further reading: [http://floating-point-gui.de/](http://floating-point-gui.de/)\n"
">"
msgstr ""
">\n"
"> 数を比較するときの注意： 整数型（整数のみを表すデータ型）\n"
"> 以外では、２数の比較に決して `==` を使わないこと。\n"
">\n"
"> コンピュータは、小数点以下の数を限られた精度でしか示せません。\n"
"> かもしれません。すると、二つの数がRで同じように表示されても\n"
"> 実際は、その背後で異なる形で表されており、したがって\n"
"> ごくわずかな誤差（機械の数値許容範囲）があるかもしれません。\n"
">\n"
"> 代わりに、`all.equal` 関数を使うといいでしょう。\n"
">\n"
"> 詳しくは： [http://floating-point-gui.de/](http://floating-point-gui.de/)\n"
">"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:448
msgid "## Variables and assignment"
msgstr "## 変数及び代入"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:450
msgid "We can store values in variables using the assignment operator `<-`, like this:"
msgstr "代入演算子`<-`を用いて、次のように値を変数に入れることができます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:453
msgid ""
"~~~\n"
"x <- 1/40\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 1/40\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:458
msgid ""
"Notice that assignment does not print a value. Instead, we stored it for later\n"
"in something called a **variable**. `x` now contains the **value** `0.025`:"
msgstr ""
"お気づきのように、代入では値は表示されません。代わりに、後々のために\n"
"**変数**と呼ばれるものに、値を入れます。`x` は、今、**値** `0.025`を持っています："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:462
msgid ""
"~~~\n"
"x\n"
"~~~"
msgstr ""
"~~~\n"
"x\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:469
msgid ""
"~~~\n"
"[1] 0.025\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0.025\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:474
msgid ""
"More precisely, the stored value is a *decimal approximation* of\n"
"this fraction called a [floating point number](http://en.wikipedia.org/wiki/Floating_point)."
msgstr ""
"より正確には、記録された値は、[浮動小数点数](http://en.wikipedia.org/wiki/Floating_point)\n"
"と呼ばれる*小数近似 (decimal approximation)*です。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:477
msgid ""
"Look for the `Environment` tab in one of the panes of RStudio, and you will see that `x` and its value\n"
"have appeared. Our variable `x` can be used in place of a number in any calculation that expects a number:"
msgstr ""
"RStudioのパネルの中のひとつ、`Environment` （環境）タブで、`x`とその値が表示されている\n"
"ところを見て下さい。変数`x`は、数を出す演算で数の代わりに使うことができます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:481
msgid ""
"~~~\n"
"log(x)\n"
"~~~"
msgstr ""
"~~~\n"
"log(x)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:488
msgid ""
"~~~\n"
"[1] -3.688879\n"
"~~~"
msgstr ""
"~~~\n"
"[1] -3.688879\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:493
msgid "Notice also that variables can be reassigned:"
msgstr "変数は、再度、代入することもできます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:496
msgid ""
"~~~\n"
"x <- 100\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 100\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:501
msgid "`x` used to contain the value 0.025 and and now it has the value 100."
msgstr "`x`は、0.025という値でしたが、今は、100になりました。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:503
msgid "Assignment values can contain the variable being assigned to:"
msgstr "代入する値は、既に代入されている変数でもいいです："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:506
msgid ""
"~~~\n"
"x <- x + 1 #notice how RStudio updates its description of x on the top right tab\n"
"y <- x * 2\n"
"~~~"
msgstr ""
"~~~\n"
"x <- x + 1 #RStudioが、右上のタブにあるxの詳細をどう更新したかにも御留意下さい\n"
"y <- x * 2\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:512
msgid ""
"The right hand side of the assignment can be any valid R expression.\n"
"The right hand side is *fully evaluated* before the assignment occurs."
msgstr ""
"代入の右側については、Rで使える表現であれば何でも大丈夫です。\n"
"右側については、代入される前に、*計算が完全に実施*されます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:515
msgid ""
"Variable names can contain letters, numbers, underscores and periods. They\n"
"cannot start with a number nor contain spaces at all. Different people use\n"
"different conventions for long variable names, these include"
msgstr ""
"変数名には、文字、数字、下線、ピリオドを含むことができます。\n"
"数から始まることはできず、空白を含むことはできません。\n"
"長い変数名のつけ方は様々です。例えば、"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:519
msgid "  * periods.between.words"
msgstr "  * ピリオドを.単語の.間に入れる"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:520
msgid "  * underscores\\_between_words"
msgstr "  * 下線を\\_単語の_間に入れる"

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:521
msgid "  * camelCaseToSeparateWords"
msgstr "  * 単語の始まりを大文字にする（camelCaseToSeparateWords）"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:523
msgid "What you use is up to you, but **be consistent**."
msgstr "何を使うかは書き手次第ですが、**一貫性を持たせる**ようにしましょう。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:525
msgid "It is also possible to use the `=` operator for assignment:"
msgstr "代入の演算子として、`=`を使うこともできます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:528
msgid ""
"~~~\n"
"x = 1/40\n"
"~~~"
msgstr ""
"~~~\n"
"x = 1/40\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:533
msgid ""
"But this is much less common among R users.  The most important thing is to\n"
"**be consistent** with the operator you use. There are occasionally places\n"
"where it is less confusing to use `<-` than `=`, and it is the most common\n"
"symbol used in the community. So the recommendation is to use `<-`."
msgstr ""
"しかし、これはRユーザーでは、あまり使われていません。重要なのは、\n"
"使用する演算子に**一貫性を持たせる**ことです。場合によっては、\n"
"`=`を使うよりも`<-`を用いる方が誤解が少ないこともあります。\n"
"Rコミュニティーの中で、最もよく使われている方法でもあるので、\n"
"`<-`を使うのがおすすめです。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:538
#: r-novice-gapminder/_episodes/02-project-intro.md:146
#: r-novice-gapminder/_episodes/03-seeking-help.md:147
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:796
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:237
#: r-novice-gapminder/_episodes/06-data-subsetting.md:303
#: r-novice-gapminder/_episodes/07-control-flow.md:147
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:99
#: r-novice-gapminder/_episodes/09-vectorization.md:69
#: r-novice-gapminder/_episodes/10-functions.md:132
#: r-novice-gapminder/_episodes/11-writing-data.md:61
#: r-novice-gapminder/_episodes/12-plyr.md:201
#: r-novice-gapminder/_episodes/13-dplyr.md:154
#: r-novice-gapminder/_episodes/14-tidyr.md:88
msgid "> ## Challenge 1"
msgstr "> ## チャレンジ１"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:539
msgid ""
">\n"
"> Which of the following are valid R variable names?\n"
"> \n"
"> ~~~\n"
"> min_height\n"
"> max.height\n"
"> _age\n"
"> .mass\n"
"> MaxLength\n"
"> min-length\n"
"> 2widths\n"
"> celsius2kelvin\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > The following can be used as R variables:\n"
"> > \n"
"> > ~~~\n"
"> > min_height\n"
"> > max.height\n"
"> > MaxLength\n"
"> > celsius2kelvin\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > The following creates a hidden variable:\n"
"> > \n"
"> > ~~~\n"
"> > .mass\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > The following will not be able to be used to create a variable\n"
"> > \n"
"> > ~~~\n"
"> > _age\n"
"> > min-length\n"
"> > 2widths\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 次のうちどれがRの変数名として使えますか？\n"
"> \n"
"> ~~~\n"
"> min_height\n"
"> max.height\n"
"> _age\n"
"> .mass\n"
"> MaxLength\n"
"> min-length\n"
"> 2widths\n"
"> celsius2kelvin\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> >\n"
"> > Rの変数として使えるものは次のとおりです：\n"
"> > \n"
"> > ~~~\n"
"> > min_height\n"
"> > max.height\n"
"> > MaxLength\n"
"> > celsius2kelvin\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > 次のものは、隠れ変数を作ります：\n"
"> > \n"
"> > ~~~\n"
"> > .mass\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > 次のものは、変数を作るために使えません：\n"
"> > \n"
"> > ~~~\n"
"> > _age\n"
"> > min-length\n"
"> > 2widths\n"
"> > ~~~\n"
"> > {: .language-r}"

# SC/DC Template label
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:581
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:826
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:851
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:868
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:885
#: r-novice-gapminder/_episodes/02-project-intro.md:218
#: r-novice-gapminder/_episodes/03-seeking-help.md:164
#: r-novice-gapminder/_episodes/03-seeking-help.md:246
#: r-novice-gapminder/_episodes/03-seeking-help.md:265
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:460
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:811
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:991
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1331
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1468
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1496
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1521
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1564
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:247
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:451
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:702
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:732
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:750
#: r-novice-gapminder/_episodes/06-data-subsetting.md:376
#: r-novice-gapminder/_episodes/06-data-subsetting.md:526
#: r-novice-gapminder/_episodes/06-data-subsetting.md:768
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1046
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1232
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1259
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1455
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1477
#: r-novice-gapminder/_episodes/07-control-flow.md:192
#: r-novice-gapminder/_episodes/07-control-flow.md:467
#: r-novice-gapminder/_episodes/07-control-flow.md:526
#: r-novice-gapminder/_episodes/07-control-flow.md:559
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:125
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:154
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:232
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:329
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:355
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:487
#: r-novice-gapminder/_episodes/09-vectorization.md:106
#: r-novice-gapminder/_episodes/09-vectorization.md:141
#: r-novice-gapminder/_episodes/09-vectorization.md:350
#: r-novice-gapminder/_episodes/09-vectorization.md:473
#: r-novice-gapminder/_episodes/10-functions.md:152
#: r-novice-gapminder/_episodes/10-functions.md:199
#: r-novice-gapminder/_episodes/10-functions.md:327
#: r-novice-gapminder/_episodes/10-functions.md:569
#: r-novice-gapminder/_episodes/10-functions.md:628
#: r-novice-gapminder/_episodes/11-writing-data.md:79
#: r-novice-gapminder/_episodes/11-writing-data.md:207
#: r-novice-gapminder/_episodes/13-dplyr.md:169
#: r-novice-gapminder/_episodes/13-dplyr.md:349
#: r-novice-gapminder/_episodes/13-dplyr.md:590
#: r-novice-gapminder/_episodes/14-tidyr.md:98
#: r-novice-gapminder/_episodes/14-tidyr.md:300
#: r-novice-gapminder/_episodes/14-tidyr.md:564
msgid "> {: .solution}"
msgstr "> {: .solution}"

# SC/DC Template label
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:582
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:827
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:852
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:869
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:886
#: r-novice-gapminder/_episodes/02-project-intro.md:71
#: r-novice-gapminder/_episodes/02-project-intro.md:154
#: r-novice-gapminder/_episodes/02-project-intro.md:219
#: r-novice-gapminder/_episodes/03-seeking-help.md:165
#: r-novice-gapminder/_episodes/03-seeking-help.md:247
#: r-novice-gapminder/_episodes/03-seeking-help.md:266
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:812
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:992
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1332
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1469
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1497
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1522
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1565
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:248
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:452
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:703
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:733
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:751
#: r-novice-gapminder/_episodes/06-data-subsetting.md:377
#: r-novice-gapminder/_episodes/06-data-subsetting.md:527
#: r-novice-gapminder/_episodes/06-data-subsetting.md:769
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1047
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1233
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1260
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1456
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1478
#: r-novice-gapminder/_episodes/07-control-flow.md:193
#: r-novice-gapminder/_episodes/07-control-flow.md:468
#: r-novice-gapminder/_episodes/07-control-flow.md:527
#: r-novice-gapminder/_episodes/07-control-flow.md:560
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:126
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:155
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:233
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:330
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:356
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:488
#: r-novice-gapminder/_episodes/09-vectorization.md:107
#: r-novice-gapminder/_episodes/09-vectorization.md:142
#: r-novice-gapminder/_episodes/09-vectorization.md:351
#: r-novice-gapminder/_episodes/09-vectorization.md:474
#: r-novice-gapminder/_episodes/10-functions.md:153
#: r-novice-gapminder/_episodes/10-functions.md:200
#: r-novice-gapminder/_episodes/10-functions.md:328
#: r-novice-gapminder/_episodes/10-functions.md:570
#: r-novice-gapminder/_episodes/10-functions.md:629
#: r-novice-gapminder/_episodes/11-writing-data.md:80
#: r-novice-gapminder/_episodes/11-writing-data.md:208
#: r-novice-gapminder/_episodes/12-plyr.md:205
#: r-novice-gapminder/_episodes/12-plyr.md:411
#: r-novice-gapminder/_episodes/12-plyr.md:419
#: r-novice-gapminder/_episodes/12-plyr.md:476
#: r-novice-gapminder/_episodes/13-dplyr.md:170
#: r-novice-gapminder/_episodes/13-dplyr.md:350
#: r-novice-gapminder/_episodes/13-dplyr.md:591
#: r-novice-gapminder/_episodes/14-tidyr.md:99
#: r-novice-gapminder/_episodes/14-tidyr.md:301
#: r-novice-gapminder/_episodes/14-tidyr.md:565
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:189
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:241
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:305
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:332
msgid "{: .challenge}"
msgstr "{: .challenge}"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:584
msgid "## Vectorization"
msgstr "## ベクトル化"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:586
msgid ""
"One final thing to be aware of is that R is *vectorized*, meaning that\n"
"variables and functions can have vectors as values. In contrast to physics and\n"
"mathematics, a vector in R describes a set of values in a certain order of the \n"
"same data type. For example"
msgstr ""
"留意すべきことの最後のひとつは、 Rは*ベクトル化している*ということで、つまり、\n"
"変数と関数が値をベクトルとすることができます。 物理や数学とは対照的に、\n"
"Rのベクトルは、同じデータ型のある順番を持つ値の集合として定義されています。例えば："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:592
msgid ""
"~~~\n"
"1:5\n"
"~~~"
msgstr ""
"~~~\n"
"1:5\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:599
msgid ""
"~~~\n"
"[1] 1 2 3 4 5\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1 2 3 4 5\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:606
msgid ""
"~~~\n"
"2^(1:5)\n"
"~~~"
msgstr ""
"~~~\n"
"2^(1:5)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:613
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:628
msgid ""
"~~~\n"
"[1]  2  4  8 16 32\n"
"~~~"
msgstr ""
"~~~\n"
"[1]  2  4  8 16 32\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:620
msgid ""
"~~~\n"
"x <- 1:5\n"
"2^x\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 1:5\n"
"2^x\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:633
msgid ""
"This is incredibly powerful; we will discuss this further in an\n"
"upcoming lesson."
msgstr "これは、とても使えるのですが、詳しくは後続のレッスンで述べることにします。"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:637
msgid "## Managing your environment"
msgstr "## 環境を管理する"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:639
msgid "There are a few useful commands you can use to interact with the R session."
msgstr "Rセッションで使えるコマンドがいくつかあります。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:641
msgid ""
"`ls` will list all of the variables and functions stored in the global environment\n"
"(your working R session):"
msgstr "`ls`は、グローバル環境（作業中のRセッション）にある全ての変数と関数をリスト化します："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:645
msgid ""
"~~~\n"
"ls()\n"
"~~~"
msgstr ""
"~~~\n"
"ls()\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:652
msgid ""
"~~~\n"
"[1] \"x\" \"y\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"x\" \"y\"\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:657
msgid "> ## Tip: hidden objects"
msgstr "> ## ヒント：隠れたオブジェクト"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:658
msgid ""
">\n"
"> Like in the shell, `ls` will hide any variables or functions starting\n"
"> with a \".\" by default. To list all objects, type `ls(all.names=TRUE)`\n"
"> instead\n"
">"
msgstr ""
">\n"
"> シェルのように、`ls`はデフォルトでは、\".\"で始まる変数と関数を表示しません。\n"
"> 全てのオブジェクトをリスト化するには、代わりに`ls(all.names=TRUE)`と書きます\n"
">"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:665
msgid ""
"Note here that we didn't give any arguments to `ls`, but we still\n"
"needed to give the parentheses to tell R to call the function."
msgstr ""
"ここでは、`ls`に特に引数を与えませんでしたが、それでもRに関数を\n"
"呼び出していることを伝えるために括弧は必要です。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:668
msgid "If we type `ls` by itself, R will print out the source code for that function!"
msgstr "もし`ls`だけを入力すると、Rは、その関数のソースコードを表示してしまいます！"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:671
msgid ""
"~~~\n"
"ls\n"
"~~~"
msgstr ""
"~~~\n"
"ls\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:678
msgid ""
"~~~\n"
"function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n"
"    pattern, sorted = TRUE) \n"
"{\n"
"    if (!missing(name)) {\n"
"        pos <- tryCatch(name, error = function(e) e)\n"
"        if (inherits(pos, \"error\")) {\n"
"            name <- substitute(name)\n"
"            if (!is.character(name)) \n"
"                name <- deparse(name)\n"
"            warning(gettextf(\"%s converted to character string\", \n"
"                sQuote(name)), domain = NA)\n"
"            pos <- name\n"
"        }\n"
"    }\n"
"    all.names <- .Internal(ls(envir, all.names, sorted))\n"
"    if (!missing(pattern)) {\n"
"        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n"
"            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n"
"            if (pattern == \"[\") {\n"
"                pattern <- \"\\\\[\"\n"
"                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n"
"            }\n"
"            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n"
"                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n"
"                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n"
"            }\n"
"        }\n"
"        grep(pattern, all.names, value = TRUE)\n"
"    }\n"
"    else all.names\n"
"}\n"
"<bytecode: 0x7f915e54aec8>\n"
"<environment: namespace:base>\n"
"~~~"
msgstr ""
"~~~\n"
"function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n"
"    pattern, sorted = TRUE) \n"
"{\n"
"    if (!missing(name)) {\n"
"        pos <- tryCatch(name, error = function(e) e)\n"
"        if (inherits(pos, \"error\")) {\n"
"            name <- substitute(name)\n"
"            if (!is.character(name)) \n"
"                name <- deparse(name)\n"
"            warning(gettextf(\"%s converted to character string\", \n"
"                sQuote(name)), domain = NA)\n"
"            pos <- name\n"
"        }\n"
"    }\n"
"    all.names <- .Internal(ls(envir, all.names, sorted))\n"
"    if (!missing(pattern)) {\n"
"        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n"
"            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n"
"            if (pattern == \"[\") {\n"
"                pattern <- \"\\\\[\"\n"
"                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n"
"            }\n"
"            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n"
"                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n"
"                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n"
"            }\n"
"        }\n"
"        grep(pattern, all.names, value = TRUE)\n"
"    }\n"
"    else all.names\n"
"}\n"
"<bytecode: 0x7f915e54aec8>\n"
"<environment: namespace:base>\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:715
msgid "You can use `rm` to delete objects you no longer need:"
msgstr "もう必要ないオブジェクトを消去するには、`rm`が使えます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:718
msgid ""
"~~~\n"
"rm(x)\n"
"~~~"
msgstr ""
"~~~\n"
"rm(x)\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:723
msgid ""
"If you have lots of things in your environment and want to delete all of them,\n"
"you can pass the results of `ls` to the `rm` function:"
msgstr ""
"もし、環境に、色々なものがいっぱいあって、それらを全て消去したい場合、\n"
"`ls`の結果を`rm`関数に渡すことで対応できます。："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:727
msgid ""
"~~~\n"
"rm(list = ls())\n"
"~~~"
msgstr ""
"~~~\n"
"rm(list = ls())\n"
"~~~"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:732
msgid ""
"In this case we've combined the two. Like the order of operations, anything\n"
"inside the innermost parentheses is evaluated first, and so on."
msgstr ""
"ここでは、二つを組み合わせました。演算の順番のように、一番内側の括弧の中のものが、\n"
"まず最初に実行され、実行が続きます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:735
msgid ""
"In this case we've specified that the results of `ls` should be used for the\n"
"`list` argument in `rm`. When assigning values to arguments by name, you *must*\n"
"use the `=` operator!!"
msgstr ""
"ここでは、`ls`の結果を`rm`の引数のリストとして用いるべしと設定しました。\n"
"名前で引数の値を定めるときは、演算子`=`を*必ず*使わなければなりません！"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:739
msgid "If instead we use `<-`, there will be unintended side effects, or you may get an error message:"
msgstr "もし代わりに`<-`を使うと、意図しない副作用が現れるか、エラーメッセージが現れます："

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:742
msgid ""
"~~~\n"
"rm(list <- ls())\n"
"~~~"
msgstr ""
"~~~\n"
"rm(list <- ls())\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:749
msgid ""
"~~~\n"
"Error in rm(list <- ls()): ... must contain names or character strings\n"
"~~~"
msgstr ""
"~~~\n"
"Error in rm(list <- ls()): ... must contain names or character strings\n"
"~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:752
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:157
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:314
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:92
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:107
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:164
#: r-novice-gapminder/_episodes/06-data-subsetting.md:621
#: r-novice-gapminder/_episodes/06-data-subsetting.md:653
#: r-novice-gapminder/_episodes/06-data-subsetting.md:683
#: r-novice-gapminder/_episodes/06-data-subsetting.md:946
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1129
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1144
#: r-novice-gapminder/_episodes/07-control-flow.md:203
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:448
#: r-novice-gapminder/_episodes/10-functions.md:300
msgid "{: .error}"
msgstr "{: .error}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:754
msgid "> ## Tip: Warnings vs. Errors"
msgstr "> ## ヒント：警告かエラーか"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:755
msgid ""
">\n"
"> Pay attention when R does something unexpected! Errors, like above,\n"
"> are thrown when R cannot proceed with a calculation. Warnings on the\n"
"> other hand usually mean that the function has run, but it probably\n"
"> hasn't worked as expected.\n"
">\n"
"> In both cases, the message that R prints out usually give you clues\n"
"> how to fix a problem.\n"
">"
msgstr ""
">\n"
"> Rが予期しないことをした場合、注意が必要です！上記のようなエラーは、\n"
"> Rが演算できない場合に出力されます。一方、警告は、通常、\n"
"> 関数は走ったけれど、予期した形で実行されなかったかもしれない\n"
"> ことを示します。\n"
">\n"
"> 両方の場合、Rが表示するメッセージは、問題をどう修正すればよいのか\n"
"> という糸口を通常与えてくれます。\n"
">"

# header
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:766
msgid "## R Packages"
msgstr "## Rパッケージ"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:768
msgid ""
"It is possible to add functions to R by writing a package, or by\n"
"obtaining a package written by someone else. As of this writing, there\n"
"are over 10,000 packages available on CRAN (the comprehensive R archive\n"
"network). R and RStudio have functionality for managing packages:"
msgstr ""
"パッケージを書くか、誰かが書いたパッケージを使って、Rに関数を加えることができます。\n"
"今現在CRAN  (the comprehensive R archive network)上にある\n"
"10,000 を越えるパッケージが使用可能です。RとRStudioには、パッケージを管理する機能があります："

# unordered list
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:773
msgid "* You can see what packages are installed by typing"
msgstr "* インストールされているパッケージを以下を入力することで見ることができます。"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:774
msgid ""
"  `installed.packages()`\n"
"* You can install packages by typing `install.packages(\"packagename\")`,\n"
"  where `packagename` is the package name, in quotes.\n"
"* You can update installed packages by typing `update.packages()`\n"
"* You can remove a package with `remove.packages(\"packagename\")`\n"
"* You can make a package available for use with `library(packagename)`"
msgstr ""
"  `installed.packages()`\n"
"* パッケージをインストールするには、`install.packages(\"packagename\")`を入力します\n"
"  ここで、`packagename`は、用いる引用符付きのパッケージ名です\n"
"* インストールしたパッケージの更新には、`update.packages()`を入力します\n"
"* パッケージの削除には、`remove.packages(\"packagename\")`を入力します\n"
"* 使用できるパッケージを用いるには、`library(packagename)`を入力します"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:781
#: r-novice-gapminder/_episodes/02-project-intro.md:156
#: r-novice-gapminder/_episodes/03-seeking-help.md:167
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:960
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:420
#: r-novice-gapminder/_episodes/06-data-subsetting.md:488
#: r-novice-gapminder/_episodes/07-control-flow.md:412
#: r-novice-gapminder/_episodes/09-vectorization.md:110
#: r-novice-gapminder/_episodes/10-functions.md:177
#: r-novice-gapminder/_episodes/11-writing-data.md:189
#: r-novice-gapminder/_episodes/12-plyr.md:406
#: r-novice-gapminder/_episodes/13-dplyr.md:281
#: r-novice-gapminder/_episodes/14-tidyr.md:263
msgid "> ## Challenge 2"
msgstr "> ## チャレンジ２"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:782
msgid ""
">\n"
"> What will be the value of each  variable  after each\n"
"> statement in the following program?\n"
">\n"
"> \n"
"> ~~~\n"
"> mass <- 47.5\n"
"> age <- 122\n"
"> mass <- mass * 2.3\n"
"> age <- age - 20\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > mass <- 47.5\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will give a value of 47.5 for the variable mass\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > age <- 122\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will give a value of 122 for the variable age\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > mass <- mass * 2.3\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will multiply the existing value of 47.5 by 2.3 to give a new value of\n"
"> > 109.25 to the variable mass.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > age <- age - 20\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will subtract 20 from the existing value of 122 to give a new value\n"
"> > of 102 to the variable age."
msgstr ""
">\n"
"> 次のプログラムのそれぞれの宣言の後、それぞれの変数の値は\n"
"> 何になるでしょうか？\n"
">\n"
"> \n"
"> ~~~\n"
"> mass <- 47.5\n"
"> age <- 122\n"
"> mass <- mass * 2.3\n"
"> age <- age - 20\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > mass <- 47.5\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > これは、変数massに、47.5の値を与えます\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > age <- 122\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > これは、変数ageに122の値を与えます\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > mass <- mass * 2.3\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > これは、既存の値47.5に2.3を掛けた新しい値\n"
"> > 109.25を変数massに与えます。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > age <- age - 20\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > これは、既存の値の122から20を引いた新しい値\n"
"> > 102を変数ageに与えます。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:830
#: r-novice-gapminder/_episodes/03-seeking-help.md:249
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1199
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:679
#: r-novice-gapminder/_episodes/06-data-subsetting.md:723
#: r-novice-gapminder/_episodes/07-control-flow.md:470
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:211
#: r-novice-gapminder/_episodes/09-vectorization.md:263
#: r-novice-gapminder/_episodes/10-functions.md:302
#: r-novice-gapminder/_episodes/14-tidyr.md:551
msgid "> ## Challenge 3"
msgstr "> ## チャレンジ３"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:831
msgid ""
">\n"
"> Run the code from the previous challenge, and write a command to\n"
"> compare mass to age. Is mass larger than age?\n"
">\n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > One way of answering this question in R is to use the `>` to set up the following:\n"
"> > \n"
"> > ~~~\n"
"> > mass > age\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] TRUE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > This should yield a boolean value of TRUE since 109.25 is greater than 102."
msgstr ""
">\n"
"> チャレンジ２のコードを走らせ、massとageを比較するコマンドを書いて下さい。\n"
"> massはageよりも大きいでしょうか？\n"
">\n"
"> > ## チャレンジ３の解答\n"
"> >\n"
"> > Rを使ってこの質問に回答する方法のひとつは、 次のように`>`を用いることです：\n"
"> > \n"
"> > ~~~\n"
"> > mass > age\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] TRUE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > 109.25は102よりも大きいため、これは、論理型の値、TRUEとなる。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:855
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1440
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:709
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1012
#: r-novice-gapminder/_episodes/07-control-flow.md:529
#: r-novice-gapminder/_episodes/09-vectorization.md:354
#: r-novice-gapminder/_episodes/10-functions.md:554
msgid "> ## Challenge 4"
msgstr "> ## チャレンジ４"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:856
msgid ""
">\n"
"> Clean up your working environment by deleting the mass and age\n"
"> variables.\n"
">\n"
"> > ## Solution to challenge 4\n"
"> >\n"
"> > We can use the `rm` command to accomplish this task\n"
"> > \n"
"> > ~~~\n"
"> > rm(age, mass)\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> massとageの変数を消去し、作業環境をきれいにしよう。\n"
">\n"
"> > ## チャレンジ４の解答\n"
"> >\n"
"> > これを行うには、`rm`コマンドを使います。\n"
"> > \n"
"> > ~~~\n"
"> > rm(age, mass)\n"
"> > ~~~\n"
"> > {: .language-r}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/01-rstudio-intro.md:871
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1472
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:735
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1182
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:463
#: r-novice-gapminder/_episodes/10-functions.md:573
msgid "> ## Challenge 5"
msgstr "> ## チャレンジ５"

#: r-novice-gapminder/_episodes/01-rstudio-intro.md:872
msgid ""
">\n"
"> Install the following packages: `ggplot2`, `plyr`, `gapminder`\n"
">\n"
"> > ## Solution to challenge 5\n"
"> >\n"
"> > We can use the `install.packages()` command to install the required packages.\n"
"> > \n"
"> > ~~~\n"
"> > install.packages(\"ggplot2\")\n"
"> > install.packages(\"plyr\")\n"
"> > install.packages(\"gapminder\")\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 次のパッケージをインストールしよう： `ggplot2`, `plyr`, `gapminder`\n"
">\n"
"> > ## チャレンジ５の解答\n"
"> >\n"
"> > 求められているパッケージをインストールするには、コマンド`install.packages()`が使えます。\n"
"> > \n"
"> > ~~~\n"
"> > install.packages(\"ggplot2\")\n"
"> > install.packages(\"plyr\")\n"
"> > install.packages(\"gapminder\")\n"
"> > ~~~\n"
"> > {: .language-r}"

# Front Matter
#: r-novice-gapminder/_episodes/02-project-intro.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 02-project-intro.md in _episodes_rmd/\n"
"title: \"Project Management With RStudio\"\n"
"teaching: 20\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I manage my projects in R?\"\n"
"objectives:\n"
"- Create self-contained projects in RStudio\n"
"keypoints:\n"
"- \"Use RStudio to create and manage projects with consistent layout.\"\n"
"- \"Treat raw data as read-only.\"\n"
"- \"Treat generated output as disposable.\"\n"
"- \"Separate function definition and application.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 02-project-intro.md in _episodes_rmd/\n"
"title: \"RStudio のプロジェクト管理\"\n"
"teaching: 20\n"
"exercises: 10\n"
"questions:\n"
"- \"R のプロジェクトの管理はどうしたら良いですか?\"\n"
"objectives:\n"
"- RStudio のプロジェクトを作成出来るようになりましょう\n"
"keypoints:\n"
"- \"RStudio でプロジェクトの生成と管理を行う。\"\n"
"- \"生データは読み込み専用とする。\"\n"
"- \"生成された出力は使い捨てとする。\"\n"
"- \"関数定義と適用は別々にする。\"\n"
"source: Rmd\n"
"---"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:21
msgid "## Introduction"
msgstr "## はじめに"

#: r-novice-gapminder/_episodes/02-project-intro.md:23
msgid ""
"The scientific process is naturally incremental, and many projects\n"
"start life as random notes, some code, then a manuscript, and\n"
"eventually everything is a bit mixed together."
msgstr ""
"科学的なプロセスは、徐々に進んでいくものです。プロジェクトの多くは、\n"
"計画性のないメモやいくつかのコードから始まります。そして、原案ができ、\n"
"最終的に、全てが少しづつ混ざり合ってまとまっていくのです。"

#: r-novice-gapminder/_episodes/02-project-intro.md:27
msgid ""
"<blockquote class=\"twitter-tweet\"><p>Managing your projects in a reproducible fashion doesn't just make your science reproducible, it makes your life easier.</p>— Vince Buffalo (@vsbuffalo) <a href=\"https://twitter.com/vsbuffalo/status/323638476153167872\">April 15, 2013</a></blockquote>\n"
"<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>"
msgstr ""
"<blockquote class=\"twitter-tweet\"><p>Managing your projects in a reproducible fashion doesn't just make your science reproducible, it makes your life easier.</p>— Vince Buffalo (@vsbuffalo) <a href=\"https://twitter.com/vsbuffalo/status/323638476153167872\">April 15, 2013</a></blockquote>\n"
"<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>"

#: r-novice-gapminder/_episodes/02-project-intro.md:30
msgid "Most people tend to organize their projects like this:"
msgstr "大抵の人達は、次のようにプロジェクトを整理する傾向にあります："

#: r-novice-gapminder/_episodes/02-project-intro.md:32
msgid "![](../fig/bad_layout.png)"
msgstr "![](../fig/bad_layout.png)"

#: r-novice-gapminder/_episodes/02-project-intro.md:34
msgid "There are many reasons why we should *ALWAYS* avoid this:"
msgstr "このようなことを*絶対*避けるべき理由はいくつもあります："

# ordered list
#: r-novice-gapminder/_episodes/02-project-intro.md:36
msgid "1. It is really hard to tell which version of your data is"
msgstr "1. データのどのバージョンが原本か修正版かを判別することが、とても難しくなります"

#: r-novice-gapminder/_episodes/02-project-intro.md:37
msgid ""
"the original and which is the modified;\n"
"2. It gets really messy because it mixes files with various\n"
"extensions together;\n"
"3. It probably takes you a lot of time to actually find\n"
"things, and relate the correct figures to the exact code\n"
"that has been used to generate it;"
msgstr ""
"1. どれが原本でどれが修正した版のデータか判別するのがとても難しくなる\n"
"2. 幾つもの拡張子の異なるファイルを一緒に混ぜ合わせるため、\n"
"とてもごちゃごちゃしてくる\n"
"3. 探しているものを見つけたり、正しい図とその図を出力する\n"
"コードの対応が分かるようになるのに、時間がかかる"

#: r-novice-gapminder/_episodes/02-project-intro.md:44
msgid "A good project layout will ultimately make your life easier:"
msgstr "プロジェクトのレイアウトが良ければ、最終的に自分が楽になる"

# unordered list
#: r-novice-gapminder/_episodes/02-project-intro.md:46
msgid "* It will help ensure the integrity of your data;"
msgstr "* 自分のデータの整合性を保つ助けになる"

# unordered list
#: r-novice-gapminder/_episodes/02-project-intro.md:47
msgid "* It makes it simpler to share your code with someone else"
msgstr "* 誰か（研究室の仲間、協力者または監督者）と、コードをシェアすることが簡単になります"

#: r-novice-gapminder/_episodes/02-project-intro.md:48
msgid ""
"(a lab-mate, collaborator, or supervisor);\n"
"* It allows you to easily upload your code with your manuscript submission;\n"
"* It makes it easier to pick the project back up after a break."
msgstr ""
"* 原稿の提出と一緒に自分のコードを簡単にアップロードできる\n"
"* しばらく手をつけていなくても、簡単にプロジェクトを再開できる"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:52
msgid "## A possible solution"
msgstr "## 考えられる解決策"

#: r-novice-gapminder/_episodes/02-project-intro.md:54
msgid "Fortunately, there are tools and packages which can help you manage your work effectively."
msgstr "幸いなことに、効果的な作業管理を助けるツールやパッケージがあります"

#: r-novice-gapminder/_episodes/02-project-intro.md:56
msgid ""
"One of the most powerful and useful aspects of RStudio is its project management\n"
"functionality. We'll be using this today to create a self-contained, reproducible\n"
"project."
msgstr ""
"RStudioの最も有能て使えるもののひとつとして、プロジェクト管理機能が挙げられます。\n"
"今日では、必要なものが揃い、再現可能なプロジェクトを作成するために、これが使われているのでしょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:61
msgid "> ## Challenge: Creating a self-contained project"
msgstr "> ## チャレンジ：必要なものが揃ったプロジェクトを作成する"

#: r-novice-gapminder/_episodes/02-project-intro.md:62
msgid ""
">\n"
"> We're going to create a new project in RStudio:\n"
">\n"
"> 1. Click the \"File\" menu button, then \"New Project\".\n"
"> 2. Click \"New Directory\".\n"
"> 3. Click \"Empty Project\".\n"
"> 4. Type in the name of the directory to store your project, e.g. \"my_project\".\n"
"> 5. If available, select the checkbox for \"Create a git repository.\"\n"
"> 6. Click the \"Create Project\" button."
msgstr ""
">\n"
"> RStudioで新しいプロジェクトを作成しよう：\n"
">\n"
"> 1. \"File\" メニューボタンをクリックし、\"New Project\"をクリック\n"
"> 2. \"New Directory\"をクリック\n"
"> 3. \"Empty Project\"をクリック\n"
"> 4. プロジェクトを保存するディレクトリの名前をタイプ（例 \"my_project\"）\n"
"> 5. 可能なら、\"Create a git repository\"のチェックボックスを選択\n"
"> 6. \"Create Project\" ボタンをクリック"

#: r-novice-gapminder/_episodes/02-project-intro.md:73
msgid ""
"Now when we start R in this project directory, or open this project with RStudio,\n"
"all of our work on this project will be entirely self-contained in this directory."
msgstr ""
"このプロジェクトのディレクトリでRをスタートする、またはRStudioでこのプロジェクトを開けば、\n"
"このプロジェクトについての全てのファイルは、このディレクトリにこれで全て揃うことになります。"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:76
msgid "## Best practices for project organization"
msgstr "## プロジェクト管理の最適なやり方"

#: r-novice-gapminder/_episodes/02-project-intro.md:78
msgid ""
"Although there is no \"best\" way to lay out a project, there are some general\n"
"principles to adhere to that will make project management easier:"
msgstr ""
"プロジェクトのレイアウトに「最適」な方法はありませんが、これを守れば、\n"
"プロジェクト管理が簡単になるだろうという一般的な原則がいくつかあります："

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:81
msgid "### Treat data as read only"
msgstr "### データは読み込み専用にしましょう"

#: r-novice-gapminder/_episodes/02-project-intro.md:83
msgid ""
"This is probably the most important goal of setting up a project. Data is\n"
"typically time consuming and/or expensive to collect. Working with them\n"
"interactively (e.g., in Excel) where they can be modified means you are never\n"
"sure of where the data came from, or how it has been modified since collection.\n"
"It is therefore a good idea to treat your data as \"read-only\"."
msgstr ""
"プロジェクトを始めるにあたって、これが多分一番重要なゴールかもしれません。\n"
"データ収集には、多くの時間と費用のいずれか、または両方が掛かることが多いものです。\n"
"データの修正も行える形で読込みも書込みもできる作業（例えば、エクセル）をすると、\n"
"データがどこからきたか、または収集されてからどう修正されてきたかが分からなくなります。\n"
"ですから、データは「読み込むだけ」のものと扱うのがよいというわけです。"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:89
msgid "### Data Cleaning"
msgstr "### データクリーニング"

#: r-novice-gapminder/_episodes/02-project-intro.md:91
msgid ""
"In many cases your data will be \"dirty\": it will need significant preprocessing\n"
"to get into a format R (or any other programming language) will find useful. This\n"
"task is sometimes called \"data munging\". I find it useful to store these scripts\n"
"in a separate folder, and create a second \"read-only\" data folder to hold the\n"
"\"cleaned\" data sets."
msgstr ""
"多くの場合、データは「汚れて」います：\n"
"R（または、他のプログラミング言語）が使える形にするためには、かなりの前処理が必要となるでしょう。\n"
"この作業は、「データ・マンジング」と呼ばれることもあります。 前処理で書いたコードは、\n"
"違うフォルダに保存し、「きれいにした」データセットをこのフォルダに\n"
"置くと便利です。"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:97
msgid "### Treat generated output as disposable"
msgstr "### 生成されたアウトプットを捨てても良いようにしましょう"

#: r-novice-gapminder/_episodes/02-project-intro.md:99
msgid ""
"Anything generated by your scripts should be treated as disposable: it should\n"
"all be able to be regenerated from your scripts."
msgstr ""
"書いたものから生成されたものは、全て捨てても良いものにしましょう。\n"
"つまり、書いたものから生成できるようにしましょう。"

#: r-novice-gapminder/_episodes/02-project-intro.md:102
msgid ""
"There are lots of different ways to manage this output. I find it useful to\n"
"have an output folder with different sub-directories for each separate\n"
"analysis. This makes it easier later, as many of my analyses are exploratory\n"
"and don't end up being used in the final project, and some of the analyses\n"
"get shared between projects."
msgstr ""
"アウトプットを管理する方法は様々です。便利なのは、アウトプットフォルダを作り、\n"
"そこへ分析ごとに作ったサブディレクトリを保存する方法です。\n"
"そうすると後々楽になります。多くの分析は探索的なもので、\n"
"最終的なプロジェクトでは使われませんが、なかにはプロジェクト間で共有される分析もあるからです。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:108
msgid "> ## Tip: Good Enough Practices for Scientific Computing"
msgstr "> ## ヒント：科学的演算の良いと言えるやり方"

#: r-novice-gapminder/_episodes/02-project-intro.md:109
msgid ""
">\n"
"> [Good Enough Practices for Scientific Computing](https://github.com/swcarpentry/good-enough-practices-in-scientific-computing/blob/gh-pages/good-enough-practices-for-scientific-computing.pdf) gives the following recommendations for project organization:\n"
">\n"
"> 1. Put each project in its own directory, which is named after the project.\n"
"> 2. Put text documents associated with the project in the `doc` directory.\n"
"> 3. Put raw data and metadata in the `data` directory, and files generated during cleanup and analysis in a `results` directory.\n"
"> 4. Put source for the project's scripts and programs in the `src` directory, and programs brought in from elsewhere or compiled locally in the `bin` directory.\n"
"> 5. Name all files to reflect their content or function.\n"
">"
msgstr ""
">\n"
"> [Good Enough Practices for Scientific Computing（科学的演算の良いと言えるやり方）](https://github.com/swcarpentry/good-enough-practices-in-scientific-computing/blob/gh-pages/good-enough-practices-for-scientific-computing.pdf) プロジェクトの整理について薦めていることは以下のとおりです。\n"
">\n"
"> 1. それぞれのプロジェクトを独自のディレクトリに置き、プロジェクトから取った名前をつける\n"
"> 2. プロジェクトに関連するテキスト文書を `doc` ディレクトリに置く\n"
"> 3. 生のデータとメタデータを`data`のディレクトリに置き、クリーンアップで生成されたファイルと分析に使ったファイルを `results` ディレクトリに置く\n"
"> 4. プロジェクトで書いたスクリプトとプログラムのソースは、`src` ディレクトリに、違うところから持ってきた、またはローカルで変換されたものは `bin` ディレクトリに置く\n"
"> 5. 全てのファイルを中身や機能を反映する形で名づけること\n"
">"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:120
msgid "### Separate function definition and application"
msgstr "### 関数定義と適用は別々にしましょう"

#: r-novice-gapminder/_episodes/02-project-intro.md:122
msgid "One of the more effective ways to work with R is to start by writing the code you want to run directly in an .R script, and then running the selected lines (either using the keyboard shortcuts in RStudio or clicking the \"Run\" button) in the interactive R console."
msgstr "Rで作業するより効果的な方法のひとつは、まず走らせたいコードを直接.Rスクリプトに書き、それから選択した行をインタラクティブなRコンソールで（RStudioのショートカットキーを使うか、「Run」ボタンをクリックして）走らせることです。"

#: r-novice-gapminder/_episodes/02-project-intro.md:124
msgid ""
"When your project is in its early stages, the initial .R script file usually contains many lines\n"
"of directly executed code. As it matures, reusable chunks get pulled into their\n"
"own functions. It's a good idea to separate these functions into two separate folders; one\n"
"to store useful functions that you'll reuse across analyses and projects, and\n"
"one to store the analysis scripts."
msgstr ""
"プロジェクトの初期段階では、最初の.Rスクリプトファイルには直接実行されるコードの行が多数あるものです。\n"
"プロジェクトが進むにつれて、何度も使える部分は、独自の関数としてまとめられます。\n"
"これらの関数を、色々なプロジェクトや分析で使える関数を保存するフォルダと、この分析のスクリプトを保存するフォルダの２つの異なるフォルダに分けるとよいでしょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:130
msgid "> ## Tip: avoiding duplication"
msgstr "> ## ヒント: 重複を防ぐ"

#: r-novice-gapminder/_episodes/02-project-intro.md:131
msgid ""
">\n"
"> You may find yourself using data or analysis scripts across several projects.\n"
"> Typically you want to avoid duplication to save space and avoid having to\n"
"> make updates to code in multiple places.\n"
">\n"
"> In this case I find it useful to make \"symbolic links\", which are essentially\n"
"> shortcuts to files somewhere else on a filesystem. On Linux and OS X you can\n"
"> use the `ln -s` command, and on Windows you can either create a shortcut or\n"
"> use the `mklink` command from the windows terminal."
msgstr ""
">\n"
"> 複数のプロジェクトで、同じデータや分析のスクリプトを使っていることに気づくことがあるかもしれません\n"
"> 普通は、複数の場所でコードを更新しなければいけない状況を避ける、または省スペースのため、重複を避けようとするでしょう。\n"
">\n"
"> この場合、ファイルシステム上で別の場所にあるファイルへのショートカットとして「symbolic links」を使うとよいでしょう。\n"
"> Linux 及び OS X では、`ln -s` コマンドで、Windowsでは、Windowsのターミナルから`mklink` コマンドで、\n"
"> ショートカットを作ることができます。"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:142
msgid "### Save the data in the data directory"
msgstr "### データディレクトリにデータを保存しましょう"

#: r-novice-gapminder/_episodes/02-project-intro.md:144
msgid "Now we have a good directory structure we will now place/save the data file in the `data/` directory."
msgstr "よいディレクトリ構造ができた後は、データファイルを `data/` ディレクトリに置く、または保管しましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:147
msgid "> Download the gapminder data from [here](https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv)."
msgstr "> ギャップマインダーのデータを[ここから](https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv)ダウンロードしましょう"

#: r-novice-gapminder/_episodes/02-project-intro.md:148
msgid ""
">\n"
"> 1. Download the file (CTRL + S, right mouse click -> \"Save as\", or File -> \"Save page as\")\n"
"> 2. Make sure it's saved under the name `gapminder_data.csv`\n"
"> 3. Save the file in the `data/` folder within your project.\n"
">\n"
"> We will load and inspect these data later."
msgstr ""
">\n"
"> 1. ファイルをダウンロードする（CTRL + S、右マウスクリック -> 「名前を付けて保存する」、またはファイル -> 「ページを名前を付けて保存する」)\n"
"> 2. 確実に `gapminder_data.csv` という名前で保存しましょう\n"
"> 3. プロジェクトの中にある `data/` フォルダに保存しましょう\n"
">\n"
"> このデータは後で読み込んで色々調べます"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:157
msgid "> It is useful to get some general idea about the dataset, directly from the"
msgstr "> Rに読み込む前に、コマンドラインから直接、データセットの概要を得ておくといいでしょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:158
msgid "> command line, before loading it into R. Understanding the dataset better"
msgstr "> データセットをよりよく理解しておくと、データセットをどうRに読み込むか決める際に役に立ちます。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:159
msgid "> will come in handy when making decisions on how to load it in R. Use the command-line"
msgstr "> シェルのコマンドラインを使って、次の問題に答えて下さい："

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:160
msgid "> shell to answer the following questions:"
msgstr ">"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:161
msgid "> 1. What is the size of the file?"
msgstr "> 1. ファイルのサイズは何ですか？"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:162
msgid "> 2. How many rows of data does it contain?"
msgstr "> 2. データは何列入っていますか？"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:163
msgid "> 3. What kinds of values are stored in this file?"
msgstr "> 3. ファイルには、どのような値が保存されていますか？"

#: r-novice-gapminder/_episodes/02-project-intro.md:164
msgid ""
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> > By running these commands in the shell:\n"
"> > \n"
"> > ~~~\n"
"> > ls -lh data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > -rw-r--r--  1 naupaka  staff    80K Sep  2 15:54 data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > The file size is 80K.\n"
"> > \n"
"> > ~~~\n"
"> > wc -l data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     1705 data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > There are 1705 lines. The data looks like:\n"
"> > \n"
"> > ~~~\n"
"> > head data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > country,year,pop,continent,lifeExp,gdpPercap\n"
"> > Afghanistan,1952,8425333,Asia,28.801,779.4453145\n"
"> > Afghanistan,1957,9240934,Asia,30.332,820.8530296\n"
"> > Afghanistan,1962,10267083,Asia,31.997,853.10071\n"
"> > Afghanistan,1967,11537966,Asia,34.02,836.1971382\n"
"> > Afghanistan,1972,13079460,Asia,36.088,739.9811058\n"
"> > Afghanistan,1977,14880372,Asia,38.438,786.11336\n"
"> > Afghanistan,1982,12881816,Asia,39.854,978.0114388\n"
"> > Afghanistan,1987,13867957,Asia,40.822,852.3959448\n"
"> > Afghanistan,1992,16317921,Asia,41.674,649.3413952\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> > 以下のコマンドをシェルで実行すれば答えられます：\n"
"> > \n"
"> > ~~~\n"
"> > ls -lh data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > -rw-r--r--  1 naupaka  staff    80K Sep  2 15:54 data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ファイルサイズは、80K\n"
"> > \n"
"> > ~~~\n"
"> > wc -l data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     1705 data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > 1705行あり、データは次のような形をしています：\n"
"> > \n"
"> > ~~~\n"
"> > head data/gapminder_data.csv\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > country,year,pop,continent,lifeExp,gdpPercap\n"
"> > Afghanistan,1952,8425333,Asia,28.801,779.4453145\n"
"> > Afghanistan,1957,9240934,Asia,30.332,820.8530296\n"
"> > Afghanistan,1962,10267083,Asia,31.997,853.10071\n"
"> > Afghanistan,1967,11537966,Asia,34.02,836.1971382\n"
"> > Afghanistan,1972,13079460,Asia,36.088,739.9811058\n"
"> > Afghanistan,1977,14880372,Asia,38.438,786.11336\n"
"> > Afghanistan,1982,12881816,Asia,39.854,978.0114388\n"
"> > Afghanistan,1987,13867957,Asia,40.822,852.3959448\n"
"> > Afghanistan,1992,16317921,Asia,41.674,649.3413952\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/02-project-intro.md:221
msgid "> ## Tip: command line in R Studio"
msgstr "> ## ヒント：R Studioのコマンドライン"

#: r-novice-gapminder/_episodes/02-project-intro.md:222
msgid ""
">\n"
"> You can quickly open up a shell in RStudio using the **Tools -> Shell...** menu item."
msgstr ""
">\n"
"> RStudioでは、メニュー項目の**Tools -> Shell...**を使って、シェルを素早く開くことができます。"

# header
#: r-novice-gapminder/_episodes/02-project-intro.md:226
msgid "### Version Control"
msgstr "### バージョン・コントロール"

#: r-novice-gapminder/_episodes/02-project-intro.md:228
msgid "It is important to use version control with projects.  Go [here for a good lesson which describes using Git with RStudio](https://swcarpentry.github.io/git-novice/14-supplemental-rstudio/)."
msgstr "プロジェクトでは、バージョン・コントロールを使うことが重要です。 [RStudioでGitを使う良いレッスン](https://swcarpentry.github.io/git-novice/14-supplemental-rstudio/)を参照して下さい。"

# Front Matter
#: r-novice-gapminder/_episodes/03-seeking-help.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 03-seeking-help.md in _episodes_rmd/\n"
"title: \"Seeking Help\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I get help in R?\"\n"
"objectives:\n"
"- \"To be able read R help files for functions and special operators.\"\n"
"- \"To be able to use CRAN task views to identify packages to solve a problem.\"\n"
"- \"To be able to seek help from your peers.\"\n"
"keypoints:\n"
"- \"Use `help()` to get online help in R.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 03-seeking-help.md in _episodes_rmd/\n"
"title: \"ヘルプ機能\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"R のヘルプ機能はありますか?\"\n"
"objectives:\n"
"- \"関数や特別な演算子に関する R のヘルプファイルにアクセス出来るようになりましょう。\"\n"
"- \"CRAN のタスクビューを使って課題が解決出来るようなパッケージの特定が出来るようになりましょう。\"\n"
"- \"あなたの仲間にヘルプを求められるようになりましょう。\"\n"
"keypoints:\n"
"- \"R の `help()` でオンラインヘルプを使用する。\"\n"
"source: Rmd\n"
"---"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:20
msgid "## Reading Help files"
msgstr "## ヘルプファイルを読む"

#: r-novice-gapminder/_episodes/03-seeking-help.md:22
msgid ""
"R, and every package, provide help files for functions. The general syntax to search for help on any\n"
"function, \"function_name\", from a specific function that is in a package loaded into your\n"
"namespace (your interactive R session):"
msgstr ""
"R、そしてその他のパッケージには、関数のヘルプファイルが用意されています。\n"
"一般的な関数のヘルプを検索する構文は、（インタラクティブなRセッションで）自分の名前空間に読み込まれた\n"
"パッケージに存在する特定の関数名、「function_name」を以下のように使って下さい："

# code block
#: r-novice-gapminder/_episodes/03-seeking-help.md:27
msgid ""
"~~~\n"
"?function_name\n"
"help(function_name)\n"
"~~~"
msgstr ""
"~~~\n"
"?function_name\n"
"help(function_name)\n"
"~~~"

#: r-novice-gapminder/_episodes/03-seeking-help.md:33
msgid "This will load up a help page in RStudio (or as plain text in R by itself)."
msgstr "これで、RStudioにヘルプページ（Rの場合は、画面に簡素なテキスト）が表示されます"

#: r-novice-gapminder/_episodes/03-seeking-help.md:35
msgid "Each help page is broken down into sections:"
msgstr "それぞれのヘルプページは、セクションに分けられます："

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:37
msgid " - Description: An extended description of what the function does."
msgstr " - Description（説明）：関数がすることの詳しい説明"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:38
msgid " - Usage: The arguments of the function and their default values."
msgstr " - Usage（使い方）：関数の引数及びデフォルトの値"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:39
msgid " - Arguments: An explanation of the data each argument is expecting."
msgstr " - Arguments（引数）：それぞれの引数が取りうるデータの説明"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:40
msgid " - Details: Any important details to be aware of."
msgstr " - Details（詳細）：気を付けるべき重要な詳細"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:41
msgid " - Value: The data the function returns."
msgstr " - Value（値）：関数が返すデータ"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:42
msgid " - See Also: Any related functions you might find useful."
msgstr " - See Also（ついでにこっちも）：他に役立ちそうな関連する関数"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:43
msgid " - Examples: Some examples for how to use the function."
msgstr " - Examples（例）：関数の使い方の例"

#: r-novice-gapminder/_episodes/03-seeking-help.md:45
msgid "Different functions might have different sections, but these are the main ones you should be aware of."
msgstr "関数によって、違うセクションがあるかもしれませんが、知っておくべき主要なものは以上でしょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:47
msgid "> ## Tip: Reading help files"
msgstr "> ## ヒント：ヘルプファイルを読む"

#: r-novice-gapminder/_episodes/03-seeking-help.md:48
msgid ""
">\n"
"> One of the most daunting aspects of R is the large number of functions\n"
"> available. It would be prohibitive, if not impossible to remember the\n"
"> correct usage for every function you use. Luckily, the help files\n"
"> mean you don't have to!"
msgstr ""
">\n"
"> Rの気が滅入る点は、多くの関数があるという点です。\n"
"> 自分が使う全ての関数の正しい使い方を覚えるのは不可能とまでは言いませんが、かなり大変でしょう。\n"
"> ありがたいことに、ヘルプファイルのおかげで、そんなことをせずに済むのです。"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:55
msgid "## Special Operators"
msgstr "## 特別な演算子"

#: r-novice-gapminder/_episodes/03-seeking-help.md:57
msgid "To seek help on special operators, use quotes:"
msgstr "特別な演算子を検索するためには、引用符を使いましょう："

# code block
#: r-novice-gapminder/_episodes/03-seeking-help.md:60
msgid ""
"~~~\n"
"?\"<-\"\n"
"~~~"
msgstr ""
"~~~\n"
"?\"<-\"\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:65
msgid "## Getting help on packages"
msgstr "## パッケージについてのヘルプを入手する"

#: r-novice-gapminder/_episodes/03-seeking-help.md:67
msgid ""
"Many packages come with \"vignettes\": tutorials and extended example documentation.\n"
"Without any arguments, `vignette()` will list all vignettes for all installed packages;\n"
"`vignette(package=\"package-name\")` will list all available vignettes for\n"
"`package-name`, and `vignette(\"vignette-name\")` will open the specified vignette."
msgstr ""
"多くのパッケージには、「ビニエット（vignette）」があります。これは、使い方の説明や詳細な例を掲載する資料です。\n"
"引数なしに、`vignette()` と入力すると、インストールされているパッケージの全てのビニエットの一覧が表示されます。\n"
"`vignette(package=\"package-name\")` と入力すると、`package-name`についての全てのビニエットの一覧が表示され、\n"
"`vignette(\"vignette-name\")` と入力すると、指定されたビニエットが開きます。"

#: r-novice-gapminder/_episodes/03-seeking-help.md:72
msgid ""
"If a package doesn't have any vignettes, you can usually find help by typing\n"
"`help(\"package-name\")`."
msgstr "もしパッケージにビニエットがひとつもない場合、通常 `help(\"package-name\")` と入力するとヘルプが表示されます。"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:75
msgid "## When you kind of remember the function"
msgstr "## うすら覚えの関数の場合"

#: r-novice-gapminder/_episodes/03-seeking-help.md:77
msgid "If you're not sure what package a function is in, or how it's specifically spelled you can do a fuzzy search:"
msgstr "関数がどのパッケージに入っているか、またはスペルが定かではないとき、あいまい検索をすることもできます："

# code block
#: r-novice-gapminder/_episodes/03-seeking-help.md:80
msgid ""
"~~~\n"
"??function_name\n"
"~~~"
msgstr ""
"~~~\n"
"??function_name\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:85
msgid "## When you have no idea where to begin"
msgstr "## どうしていいか分からない場合"

#: r-novice-gapminder/_episodes/03-seeking-help.md:87
msgid ""
"If you don't know what function or package you need to use\n"
"[CRAN Task Views](http://cran.at.r-project.org/web/views)\n"
"is a specially maintained list of packages grouped into\n"
"fields. This can be a good starting point."
msgstr ""
"関数やパッケージが分からない場合、[CRAN Task Views](http://cran.at.r-project.org/web/views)という\n"
"分野ごとにまとめられたパッケージのリストがあります。\n"
"このページから探し始めるといいかもしれません。"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:92
msgid "## When your code doesn't work: seeking help from your peers"
msgstr "## コードがうまく動作しない：仲間の助けが必要な場合"

#: r-novice-gapminder/_episodes/03-seeking-help.md:94
msgid ""
"If you're having trouble using a function, 9 times out of 10,\n"
"the answers you are seeking have already been answered on\n"
"[Stack Overflow](http://stackoverflow.com/). You can search using\n"
"the `[r]` tag."
msgstr ""
"関数がうまく動かない場合、十中八九、探している問の答えは、\n"
"[Stack Overflow](http://stackoverflow.com/)に掲載されいます。\n"
"`[r]` タグを使って検索ができます。"

#: r-novice-gapminder/_episodes/03-seeking-help.md:99
msgid ""
"If you can't find the answer, there are a few useful functions to\n"
"help you ask a question from your peers:"
msgstr ""
"もし答えが見つからない場合、仲間に質問をする際に\n"
"役に立つ関数がいくつかあります："

# code block
#: r-novice-gapminder/_episodes/03-seeking-help.md:103
msgid ""
"~~~\n"
"?dput\n"
"~~~"
msgstr ""
"~~~\n"
"?dput\n"
"~~~"

#: r-novice-gapminder/_episodes/03-seeking-help.md:108
msgid ""
"Will dump the data you're working with into a format so that it can\n"
"be copy and pasted by anyone else into their R session."
msgstr ""
"これで、あなたが使っているデータを誰にでもコピー・アンド・ペーストしてRセッションで使える\n"
"形式にすることができます。"

# code block
#: r-novice-gapminder/_episodes/03-seeking-help.md:112
msgid ""
"~~~\n"
"sessionInfo()\n"
"~~~"
msgstr ""
"~~~\n"
"sessionInfo()\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/03-seeking-help.md:119
msgid ""
"~~~\n"
"R version 3.5.1 (2018-07-02)\n"
"Platform: x86_64-apple-darwin17.6.0 (64-bit)\n"
"Running under: macOS High Sierra 10.13.6\n"
"\n"
"Matrix products: default\n"
"BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n"
"LAPACK: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n"
"\n"
"locale:\n"
"[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n"
"\n"
"attached base packages:\n"
"[1] stats     graphics  grDevices utils     datasets  methods   base     \n"
"\n"
"other attached packages:\n"
"[1] checkpoint_0.4.3 stringr_1.3.1    knitr_1.20      \n"
"\n"
"loaded via a namespace (and not attached):\n"
"[1] compiler_3.5.1 magrittr_1.5   tools_3.5.1    stringi_1.2.4 \n"
"[5] evaluate_0.11 \n"
"~~~"
msgstr ""
"~~~\n"
"R version 3.5.1 (2018-07-02)\n"
"Platform: x86_64-apple-darwin17.6.0 (64-bit)\n"
"Running under: macOS High Sierra 10.13.6\n"
"\n"
"Matrix products: default\n"
"BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\n"
"LAPACK: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib\n"
"\n"
"locale:\n"
"[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n"
"\n"
"attached base packages:\n"
"[1] stats     graphics  grDevices utils     datasets  methods   base     \n"
"\n"
"other attached packages:\n"
"[1] checkpoint_0.4.3 stringr_1.3.1    knitr_1.20      \n"
"\n"
"loaded via a namespace (and not attached):\n"
"[1] compiler_3.5.1 magrittr_1.5   tools_3.5.1    stringi_1.2.4 \n"
"[5] evaluate_0.11 \n"
"~~~"

#: r-novice-gapminder/_episodes/03-seeking-help.md:143
msgid ""
"Will print out your current version of R, as well as any packages you\n"
"have loaded. This can be useful for others to help reproduce and debug\n"
"your issue."
msgstr ""
"これは、現在使っている R のバージョン、そして読み込まれている全てのパッケージを表示させる関数です。\n"
"他の人が問題点を再現し、バグを見つける際にこの情報が役立つこともあります。"

#: r-novice-gapminder/_episodes/03-seeking-help.md:148
msgid ""
">\n"
"> Look at the help for the `c` function. What kind of vector do you\n"
"> expect you will create if you evaluate the following:\n"
"> \n"
"> ~~~\n"
"> c(1, 2, 3)\n"
"> c('d', 'e', 'f')\n"
"> c(1, 2, 'f')\n"
"> ~~~\n"
"> {: .language-r}\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> > The `c()` function creates a vector, in which all elements are the\n"
"> > same type. In the first case, the elements are numeric, in the\n"
"> > second, they are characters, and in the third they are characters:\n"
"> > the numeric values are \"coerced\" to be characters."
msgstr ""
">\n"
"> それでは、`c` 関数のヘルプを見てみましょう。以下を演算した際、\n"
"> どのようなベクトルが作成されると思いますか：\n"
"> \n"
"> ~~~\n"
"> c(1, 2, 3)\n"
"> c('d', 'e', 'f')\n"
"> c(1, 2, 'f')\n"
"> ~~~\n"
"> {: .language-r}\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> > この `c()` 関数は、全ての要素が同じ型になるようにベクトルを生成します。\n"
"> > 最初の事例では、要素は整数型で、二番目の例では文字列型、\n"
"> > 三番目の例は文字列です。つまり、整数値は「強制的に」\n"
"> > 文字列に変換されるのです。"

#: r-novice-gapminder/_episodes/03-seeking-help.md:168
msgid ""
">\n"
"> Look at the help for the `paste` function. You'll need to use this later.\n"
"> What is the difference between the `sep` and `collapse` arguments?\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> > To look at the help for the `paste()` function, use:\n"
"> > \n"
"> > ~~~\n"
"> > help(\"paste\")\n"
"> > ?paste\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > The difference between `sep` and `collapse` is a little\n"
"> > tricky. The `paste` function accepts any number of arguments, each of which\n"
"> > can be a vector of any length. The `sep` argument specifies the string\n"
"> > used between concatenated terms — by default, a space. The result is a\n"
"> > vector as long as the longest argument supplied to `paste`. In contrast,\n"
"> > `collapse` specifies that after concatenation the elements are *collapsed*\n"
"> > together using the given separator, the result being a single string.\n"
"> > e.g. \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a c\" \"b c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\", sep = \",\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a,c\" \"b,c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\", collapse = \"|\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a c|b c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\", sep = \",\", collapse = \"|\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a,c|b,c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > (For more information,\n"
"> > scroll to the bottom of the `?paste` help page and look at the\n"
"> > examples, or try `example('paste')`.)"
msgstr ""
">\n"
"> `paste` 関数のヘルプを見てみましょう。後でこれが必要になります。\n"
"> `sep` と `collapse` の引数の違いは何でしょうか？\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> > `paste()` 関数のヘルプを見るには、以下を使いましょう：\n"
"> > \n"
"> > ~~~\n"
"> > help(\"paste\")\n"
"> > ?paste\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > `sep` と `collapse` の違いは、少しややこしいです。\n"
"> > `paste`の関数は、それぞれの長さには関係なく、引数をいくつも受け入れることができます。\n"
"> > `sep` の引数は、結合した文字の間に入る文字列を指定するもので、デフォルトはスペースです。\n"
"> > その結果、`paste` に与えられた一番長い引数の長さを持つベクトルが表示されます。\n"
"> > 一方、`collapse` は、指定された区切り値を用いて、結合された後の要素が*連結される*ことを指します。\n"
"> > その結果、一つの文字列が表示されます。\n"
"> > 例： \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a c\" \"b c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\", sep = \",\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a,c\" \"b,c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\", collapse = \"|\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a c|b c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > paste(c(\"a\",\"b\"), \"c\", sep = \",\", collapse = \"|\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"a,c|b,c\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > （より詳細な情報は、\n"
"> > `?paste` のヘルプページの最下部にある例を参照するか、\n"
"> > `example('paste')`を試してみましょう）"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:250
msgid "> Use help to find a function (and its associated parameters) that you could"
msgstr "> ヘルプを使って、列が「\t」（タブ）で区切られ、小数点が「．」（ピリオド）で分けられているcsvファイルを読み込む関数（及び関連する母数）を見つけて下さい。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:251
msgid "> use to load data from a csv file in which columns are delimited with \"\\t\""
msgstr "> csv fileファイルからデータを読み込むもので、列が「\\t」（タブ）で分けられていて、"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:252
msgid "> (tab) and the decimal point is a \".\" (period). This check for decimal"
msgstr "> 国によって小数点を表す記号（コンマかピリオドか）が違うため、"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:253
msgid "> separator is important, especially if you are working with international"
msgstr "> 小数点以下を分けている記号をチェックするのは、"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:254
msgid "> colleagues, because different countries have different conventions for the"
msgstr "> 様々な国の人達と作業をする際など、特に重要になります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:255
msgid "> decimal point (i.e. comma vs period)."
msgstr "> （つまり、コンマかピリオドかの違う）からです。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:256
msgid "> hint: use `??csv` to lookup csv related functions."
msgstr "> ヒント：csvに関係する関数として `??csv` を使いましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:257
msgid "> > ## Solution to Challenge 3"
msgstr "> > ## チャレンジ３の解答"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:258
msgid "> >"
msgstr "> >"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:259
msgid "> > The standard R function for reading tab-delimited files with a period"
msgstr "> > 小数点がピリオドのタブで区切られたファイルを読む標準的なR関数は、"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:260
msgid "> > decimal separator is read.delim(). You can also do this with"
msgstr "> > read.delim() です。他にも、"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:261
msgid "> > `read.table(file, sep=\"\\t\")` (the period is the *default* decimal"
msgstr "> > `read.table(file, sep=\"\\t\")` を使うことができます。`read.table()`では、ピリオドが、"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:262
msgid "> > separator for `read.table()`, although you may have to change"
msgstr "> > *デフォルト*となっていますが、データにハッシュ（#）の文字がある場合などは、`comment.char` の引数を変更する必要があることもあります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:263
msgid "> > the `comment.char` argument as well if your data file contains"
msgstr "> > 例えば、データにハッシュ（#）の文字がある場合"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/03-seeking-help.md:264
msgid "> > hash (#) characters"
msgstr "> > などです。"

# header
#: r-novice-gapminder/_episodes/03-seeking-help.md:268
msgid "## Other ports of call"
msgstr "## その他の参照先"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:270
msgid "* [Quick R](http://www.statmethods.net/)"
msgstr "* [Quick R](http://www.statmethods.net/)"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:271
msgid "* [RStudio cheat sheets](http://www.rstudio.com/resources/cheatsheets/)"
msgstr "* [RStudio cheat sheets](http://www.rstudio.com/resources/cheatsheets/)"

# unordered list
#: r-novice-gapminder/_episodes/03-seeking-help.md:272
msgid "* [Cookbook for R](http://www.cookbook-r.com/)"
msgstr "* [Cookbook for R](http://www.cookbook-r.com/)"

# Front Matter
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 04-data-structures-part1.md in _episodes_rmd/\n"
"title: \"Data Structures\"\n"
"teaching: 40\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I read data in R?\"\n"
"- \"What are the basic data types in R?\"\n"
"- \"How do I represent categorical information in R?\"\n"
"objectives:\n"
"- \"To be aware of the different types of data.\"\n"
"- \"To begin exploring data frames, and understand how they are related to vectors, factors and lists.\"\n"
"- \"To be able to ask questions from R about the type, class, and structure of an object.\"\n"
"keypoints:\n"
"- \"Use `read.csv` to read tabular data in R.\"\n"
"- \"The basic data types in R are double, integer, complex, logical, and character.\"\n"
"- \"Use factors to represent categories in R.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 04-data-structures-part1.md in _episodes_rmd/\n"
"title: \"データの構造\"\n"
"teaching: 40\n"
"exercises: 15\n"
"questions:\n"
"- \"Rにデータをどう読み込ませばいいですか?\"\n"
"- \"R の基本的なデータタイプにはどのようなものがありますか?\"\n"
"- \"R のカテゴリー情報はどのように表現しますか ?\"\n"
"objectives:\n"
"- \"様々なタイプのデータがあることを理解しましょう。\"\n"
"- \"データフレームの基本を理解し、そして、データフレームがベクター、ファクターおよびリストとどのように関係しているかを理解しましょう。\"\n"
"- \"オブジェクトのタイプ、クラス、および構造の確認を R で行えるようになりましょう。\"\n"
"keypoints:\n"
"- \"R のテーブル型のデータの読み込みには `read.csv` を使う。\"\n"
"- \"R の基本的なデータタイプには`double（浮動小数点型）`、`integer（整数型）`、`complex（複素数型）`、`logical（論理型）`、そして`character（文字型）`がある。\"\n"
"- \"R では、データのカテゴリーを表すのに`factor (ファクター)` を使う。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:24
msgid ""
"One of R's most powerful features is its ability to deal with tabular data -\n"
"such as you may already have in a spreadsheet or a CSV file. Let's start by\n"
"making a toy dataset in your `data/` directory, called `feline-data.csv`:"
msgstr ""
"Rのすごい特徴のひとつは、表形式のデータ（既に手元にあるようなスプレッドシートやCSVファイル）が扱えることです。\n"
"まず、 `data/` ディレクトリに `feline-data.csv` というお試しのデータセットを作ってみましょう。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:29
msgid ""
"~~~\n"
"cats <- data.frame(coat = c(\"calico\", \"black\", \"tabby\"), \n"
"                    weight = c(2.1, 5.0,3.2), \n"
"                    likes_string = c(1, 0, 1))\n"
"write.csv(x = cats, file = \"data/feline-data.csv\", row.names = FALSE)\n"
"~~~"
msgstr ""
"~~~\n"
"cats <- data.frame(coat = c(\"calico\", \"black\", \"tabby\"), \n"
"                    weight = c(2.1, 5.0,3.2), \n"
"                    likes_string = c(1, 0, 1))\n"
"write.csv(x = cats, file = \"data/feline-data.csv\", row.names = FALSE)\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:35
msgid ""
"{: .language-r}\n"
"The contents of the new file, `feline-data.csv`:"
msgstr ""
"{: .language-r}\n"
"新しいファイル `feline-data.csv` の内容："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:38
msgid ""
"~~~\n"
"coat,weight,likes_string\n"
"calico,2.1,1\n"
"black,5.0,0\n"
"tabby,3.2,1\n"
"~~~"
msgstr ""
"~~~\n"
"coat,weight,likes_string\n"
"calico,2.1,1\n"
"black,5.0,0\n"
"tabby,3.2,1\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:46
msgid "> ## Tip: Editing Text files in R"
msgstr "> ## ヒント：Rを使ったテキスト形式のファイルの編集"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:47
msgid ""
">\n"
"> Alternatively, you can create `data/feline-data.csv` using a text editor (Nano),\n"
"> or within RStudio with the **File -> New File -> Text File** menu item."
msgstr ""
">\n"
"> あるいは、テキストエディタ（Nano）またはをRStudioのメニューから**File -> New File -> Text File**を使って\n"
"> `data/feline-data.csv` を作成することができます。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:52
msgid "We can load this into R via the following:"
msgstr "以下を使って作ったデータをRへ読み込ませることができます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:55
msgid ""
"~~~\n"
"cats <- read.csv(file = \"data/feline-data.csv\")\n"
"cats\n"
"~~~"
msgstr ""
"~~~\n"
"cats <- read.csv(file = \"data/feline-data.csv\")\n"
"cats\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:63
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:52
msgid ""
"~~~\n"
"    coat weight likes_string\n"
"1 calico    2.1            1\n"
"2  black    5.0            0\n"
"3  tabby    3.2            1\n"
"~~~"
msgstr ""
"~~~\n"
"    coat weight likes_string\n"
"1 calico    2.1            1\n"
"2  black    5.0            0\n"
"3  tabby    3.2            1\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:71
msgid ""
"The `read.table` function is used for reading in tabular data stored in a text\n"
"file where the columns of data are separated by punctuation characters such as\n"
"CSV files (csv = comma-separated values). Tabs and commas are the most common\n"
"punctuation characters used to separate or delimit data points in csv files. \n"
"For convenience R provides 2 other versions of `read.table`. These are: `read.csv`\n"
"for files where the data are separated with commas and `read.delim` for files\n"
"where the data are separated with tabs. Of these three functions `read.csv` is\n"
"the most commonly used.  If needed it is possible to override the default \n"
"delimiting punctuation marks for both `read.csv` and `read.delim`."
msgstr ""
"この`read.table`関数は、CSVファイル（csv = comma-separated values）のように、\n"
"データの列が区読文字で分けられたテキストファイルに収められた表形式データを\n"
"読み込むために使われます。\n"
"タブとコンマは、csvファイルでデータ点を区切る、又は分けるために使われる\n"
"最も一般的な句読文字です。\n"
"便宜上、Rでは、他に２つの`read.table`のバージョンが提供されています。\n"
"ひとつは、データがコンマで分けられているファイルのための `read.csv` 、\n"
"データがタブで分けられているファイルのための `read.delim` です。\n"
"これら３つの関数のうち、`read.csv` が最も広く使われています。\n"
"必要であれば、 `read.csv` と `read.delim`、両方の\n"
"デフォルトの句読記号を置き換えることができます。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:82
msgid ""
"We can begin exploring our dataset right away, pulling out columns by specifying\n"
"them using the `$` operator:"
msgstr "演算子 `$` を使って列を指定し、列を抜き出すことで、すぐにデータセットの探索を始めることができます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:86
msgid ""
"~~~\n"
"cats$weight\n"
"~~~"
msgstr ""
"~~~\n"
"cats$weight\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:93
msgid ""
"~~~\n"
"[1] 2.1 5.0 3.2\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2.1 5.0 3.2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:100
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1095
msgid ""
"~~~\n"
"cats$coat\n"
"~~~"
msgstr ""
"~~~\n"
"cats$coat\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:107
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1102
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1117
msgid ""
"~~~\n"
"[1] calico black  tabby \n"
"Levels: black calico tabby\n"
"~~~"
msgstr ""
"~~~\n"
"[1] calico black  tabby \n"
"Levels: black calico tabby\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:113
msgid "We can do other operations on the columns:"
msgstr "列に他の操作をすることもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:116
msgid ""
"~~~\n"
"## Say we discovered that the scale weighs two Kg light:\n"
"cats$weight + 2\n"
"~~~"
msgstr ""
"~~~\n"
"## 計測器が実際の重さより２キロ少なく測っていることが分かったとしたら：\n"
"cats$weight + 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:124
msgid ""
"~~~\n"
"[1] 4.1 7.0 5.2\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 4.1 7.0 5.2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:131
msgid ""
"~~~\n"
"paste(\"My cat is\", cats$coat)\n"
"~~~"
msgstr ""
"~~~\n"
"paste(\"My cat is\", cats$coat)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:138
msgid ""
"~~~\n"
"[1] \"My cat is calico\" \"My cat is black\"  \"My cat is tabby\" \n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"My cat is calico\" \"My cat is black\"  \"My cat is tabby\" \n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:143
msgid "But what about"
msgstr "でも、こうしたらどうだろう"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:146
msgid ""
"~~~\n"
"cats$weight + cats$coat\n"
"~~~"
msgstr ""
"~~~\n"
"cats$weight + cats$coat\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:153
msgid ""
"~~~\n"
"Warning in Ops.factor(cats$weight, cats$coat): '+' not meaningful for\n"
"factors\n"
"~~~"
msgstr ""
"~~~\n"
"Warning in Ops.factor(cats$weight, cats$coat): '+' not meaningful for\n"
"factors\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:161
msgid ""
"~~~\n"
"[1] NA NA NA\n"
"~~~"
msgstr ""
"~~~\n"
"[1] NA NA NA\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:166
msgid "Understanding what happened here is key to successfully analyzing data in R."
msgstr "ここで何が起こったかを理解することが、データをRでうまく分析する鍵となります。"

# header
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:168
msgid "## Data Types"
msgstr "## データ型"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:170
msgid ""
"If you guessed that the last command will return an error because `2.1` plus\n"
"`\"black\"` is nonsense, you're right - and you already have some intuition for an\n"
"important concept in programming called *data types*. We can ask what type of\n"
"data something is:"
msgstr ""
"最後のコマンドがエラーを返すのは `2.1` 足す `\"black\"` はナンセンスだからだろうと思ったとしたら、\n"
"それは正解で、既にプログラミングにおける*データ型*という重要な概念をある程度分かっていると言えます。\n"
"データ型が何かを知るには、以下を使います："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:176
msgid ""
"~~~\n"
"typeof(cats$weight)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(cats$weight)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:183
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:198
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1379
msgid ""
"~~~\n"
"[1] \"double\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"double\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:188
msgid "There are 5 main types: `double`, `integer`, `complex`, `logical` and `character`."
msgstr "主な型は５つあります：`double（浮動小数点型）`、`integer（整数型）`、`complex（複素数型）`、`logical（論理型）`、そして`character（文字型）`。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:191
msgid ""
"~~~\n"
"typeof(3.14)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(3.14)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:205
msgid ""
"~~~\n"
"typeof(1L) # The L suffix forces the number to be an integer, since by default R uses float numbers\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(1L) # Rはデフォルトでは浮動小数を使いますが、Lの接尾辞により、この数は整数型になります\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:212
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:295
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:745
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:759
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:955
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1132
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:522
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:536
msgid ""
"~~~\n"
"[1] \"integer\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"integer\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:219
msgid ""
"~~~\n"
"typeof(1+1i)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(1+1i)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:226
msgid ""
"~~~\n"
"[1] \"complex\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"complex\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:233
msgid ""
"~~~\n"
"typeof(TRUE)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(TRUE)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:240
msgid ""
"~~~\n"
"[1] \"logical\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"logical\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:247
msgid ""
"~~~\n"
"typeof('banana')\n"
"~~~"
msgstr ""
"~~~\n"
"typeof('banana')\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:254
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:941
msgid ""
"~~~\n"
"[1] \"character\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"character\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:259
msgid ""
"No matter how\n"
"complicated our analyses become, all data in R is interpreted as one of these\n"
"basic data types. This strictness has some really important consequences."
msgstr ""
"どんなに分析が複雑になっても、\n"
"Rにある全てのデータは、この基本データ型のいずれかとして解釈されます。\n"
"この厳格性によって、とても重要なことが後々起こることもあります。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:263
msgid ""
"A user has added details of another cat. This information is in the file\n"
"`data/feline-data_v2.csv`."
msgstr ""
"あるユーザーが他の猫の詳細を加えたとします。\n"
"情報は `data/feline-data_v2.csv` ファイルにあるものです。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:268
msgid ""
"~~~\n"
"file.show(\"data/feline-data_v2.csv\")\n"
"~~~"
msgstr ""
"~~~\n"
"file.show(\"data/feline-data_v2.csv\")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:274
msgid ""
"~~~\n"
"coat,weight,likes_string\n"
"calico,2.1,1\n"
"black,5.0,0\n"
"tabby,3.2,1\n"
"tabby,2.3 or 2.4,1\n"
"~~~"
msgstr ""
"~~~\n"
"coat,weight,likes_string\n"
"calico,2.1,1\n"
"black,5.0,0\n"
"tabby,3.2,1\n"
"tabby,2.3 or 2.4,1\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:283
msgid ""
"Load the new cats data like before, and check what type of data we find in the\n"
"`weight` column:"
msgstr ""
"先ほどのように、この新しい猫の情報を読み込み、 `weight` の列が、\n"
"どんなデータ型が確認してみましょう。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:287
msgid ""
"~~~\n"
"cats <- read.csv(file=\"data/feline-data_v2.csv\")\n"
"typeof(cats$weight)\n"
"~~~"
msgstr ""
"~~~\n"
"cats <- read.csv(file=\"data/feline-data_v2.csv\")\n"
"typeof(cats$weight)\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:300
msgid ""
"Oh no, our weights aren't the double type anymore! If we try to do the same math\n"
"we did on them before, we run into trouble:"
msgstr ""
"なんと、この weight はdouble型ではないじゃありませんか！ 前と同じように計算をしようとすると、\n"
"やっかいなことになります："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:304
msgid ""
"~~~\n"
"cats$weight + 2\n"
"~~~"
msgstr ""
"~~~\n"
"cats$weight + 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:311
msgid ""
"~~~\n"
"Warning in Ops.factor(cats$weight, 2): '+' not meaningful for factors\n"
"~~~"
msgstr ""
"~~~\n"
"Warning in Ops.factor(cats$weight, 2): '+' not meaningful for factors\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:318
msgid ""
"~~~\n"
"[1] NA NA NA NA\n"
"~~~"
msgstr ""
"~~~\n"
"[1] NA NA NA NA\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:323
msgid ""
"What happened? When R reads a csv file into one of these tables, it insists that\n"
"everything in a column be the same basic type; if it can't understand\n"
"*everything* in the column as a double, then *nobody* in the column gets to be a\n"
"double. The table that R loaded our cats data into is something called a\n"
"*data.frame*, and it is our first example of something called a *data\n"
"structure* - that is, a structure which R knows how to build out of the basic\n"
"data types."
msgstr ""
"何が起こったのでしょう？Rは、csvファイルを読み込む際、\n"
"列にある全てのものが同じ基本の型であるべきだと主張します。もし、列の*全て*が、\n"
"double型であることが確認できない場合、その列の*だれも*double型にならないのです。\n"
"Rが読み込んだ猫のデータ表は、*data.frame（データフレーム）*と呼ばれるもので、\n"
"*data structure（データ構造）*、つまりRが基本的なデータ型から構築できるデータの最初の例です。\n"
"どう作成すればよいか知っているものでした。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:331
msgid "We can see that it is a *data.frame* by calling the `class` function on it:"
msgstr "*data.frame*であることを確かめるには、`class`関数を使います："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:334
msgid ""
"~~~\n"
"class(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"class(cats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:341
msgid ""
"~~~\n"
"[1] \"data.frame\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"data.frame\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:346
msgid ""
"In order to successfully use our data in R, we need to understand what the basic\n"
"data structures are, and how they behave. For now, let's remove that extra line\n"
"from our cats data and reload it, while we investigate this behavior further:"
msgstr ""
"データをうまくRで使うためには、基礎的なデータ構造、そしてその構造がどう作用するか\n"
"を理解する必要があります。より理解を深めるために、とりあえず猫のデータから\n"
"追加した１行を削除し、再読み込みしましょう。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:350
msgid "feline-data.csv:"
msgstr "feline-data.csv:"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:352
msgid ""
"```\n"
"coat,weight,likes_string\n"
"calico,2.1,1\n"
"black,5.0,0\n"
"tabby,3.2,1\n"
"```"
msgstr ""
"```\n"
"coat,weight,likes_string\n"
"calico,2.1,1\n"
"black,5.0,0\n"
"tabby,3.2,1\n"
"```"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:359
msgid "And back in RStudio:"
msgstr "RStudioに戻ります："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:362
msgid ""
"~~~\n"
"cats <- read.csv(file=\"data/feline-data.csv\")\n"
"~~~"
msgstr ""
"~~~\n"
"cats <- read.csv(file=\"data/feline-data.csv\")\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:370
msgid "## Vectors and Type Coercion"
msgstr "## ベクトル及び型強制"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:372
msgid ""
"To better understand this behavior, let's meet another of the data structures:\n"
"the *vector*."
msgstr "この動作をより理解するために、もう一つのデータ構造*ベクトル*を紹介します。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:376
msgid ""
"~~~\n"
"my_vector <- vector(length = 3)\n"
"my_vector\n"
"~~~"
msgstr ""
"~~~\n"
"my_vector <- vector(length = 3)\n"
"my_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:384
msgid ""
"~~~\n"
"[1] FALSE FALSE FALSE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] FALSE FALSE FALSE\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:389
msgid ""
"A vector in R is essentially an ordered list of things, with the special\n"
"condition that *everything in the vector must be the same basic data type*. If\n"
"you don't choose the datatype, it'll default to `logical`; or, you can declare\n"
"an empty vector of whatever type you like."
msgstr ""
"Rのベクトルは、本来、*ベクトルの中の全てのものは同じ基本データ型でなければいけない*という特別な条件のある、\n"
"順番を付けられたもののリストです。\n"
"もし、データ型を選ばなければ、デフォルトで`logical`になりますが、好きなデータ型を持つ空のベクトルを\n"
"宣言することもできます。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:396
msgid ""
"~~~\n"
"another_vector <- vector(mode='character', length=3)\n"
"another_vector\n"
"~~~"
msgstr ""
"~~~\n"
"another_vector <- vector(mode='character', length=3)\n"
"another_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:404
msgid ""
"~~~\n"
"[1] \"\" \"\" \"\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"\" \"\" \"\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:409
msgid "You can check if something is a vector:"
msgstr "以下を使えばベクトルかどうかを確かめられます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:412
msgid ""
"~~~\n"
"str(another_vector)\n"
"~~~"
msgstr ""
"~~~\n"
"str(another_vector)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:419
msgid ""
"~~~\n"
" chr [1:3] \"\" \"\" \"\"\n"
"~~~"
msgstr ""
"~~~\n"
" chr [1:3] \"\" \"\" \"\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:424
msgid ""
"The somewhat cryptic output from this command indicates the basic data type\n"
"found in this vector - in this case `chr`, character; an indication of the\n"
"number of things in the vector - actually, the indexes of the vector, in this\n"
"case `[1:3]`; and a few examples of what's actually in the vector - in this case\n"
"empty character strings. If we similarly do"
msgstr ""
"このコマンドから出てきた暗号みたいなアウトプットによると、このベクトルの基本データ型（ここでは `chr` （文字型））、\n"
"数（実際には、ベクトルの添字、この場合 `[1:3]` ）、\n"
"そして中身のいくつかの例示（この場合、空の文字列）が示されています。\n"
"`cats$weight`に同じようなことをすると："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:431
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:820
msgid ""
"~~~\n"
"str(cats$weight)\n"
"~~~"
msgstr ""
"~~~\n"
"str(cats$weight)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:438
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:827
msgid ""
"~~~\n"
" num [1:3] 2.1 5 3.2\n"
"~~~"
msgstr ""
"~~~\n"
" num [1:3] 2.1 5 3.2\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:443
msgid ""
"we see that `cats$weight` is a vector, too - *the columns of data we load into R\n"
"data.frames are all vectors*, and that's the root of why R forces everything in\n"
"a column to be the same basic data type."
msgstr ""
"ここで`cats$weight` もまたベクトルであることが分かります。 \n"
"*Rのデータフレームに読み込まれたデータの列は全てベクトル*で、\n"
"Rが全ての列を同じ基本データ型にする理由です。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:447
msgid "> ## Discussion 1"
msgstr "> ## 議論１"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:448
msgid ""
">\n"
"> Why is R so opinionated about what we put in our columns of data?\n"
"> How does this help us?\n"
">\n"
"> > ## Discussion 1\n"
"> >\n"
"> > By keeping everything in a column the same, we allow ourselves to make simple\n"
"> > assumptions about our data; if you can interpret one entry in the column as a\n"
"> > number, then you can interpret *all* of them as numbers, so we don't have to\n"
"> > check every time. This consistency is what people mean when they talk about \n"
"> > *clean data*; in the long run, strict consistency goes a long way to making \n"
"> > our lives easier in R."
msgstr ""
">\n"
"> なぜRは、データの列に何を置くのかについて意固地なのでしょう。\n"
"> これがどう役立つのでしょう？\n"
">\n"
"> > ## 議論１\n"
"> >\n"
"> > 列の全てを同じにすることで、データについて簡単に仮定することができます。\n"
"> > 列のひとつを数値と解釈できたら、 *全て* を数値と解釈することができるのです。\n"
"> > つまり、毎回確認する必要がないのです。\n"
"> > 人々が*きれいなデータ*と話している時は、このように整合性のあるデータであることを意味しているのです。\n"
"> > 長期的には、この厳格な整合性が後にRを使うのが楽になることに繋がります。 "

# SC/DC Template label
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:461
msgid "{: .discussion}"
msgstr "{: .discussion}"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:463
msgid "You can also make vectors with explicit contents with the combine function:"
msgstr "合成関数で明確な内容を持つベクトルを作ることもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:466
msgid ""
"~~~\n"
"combine_vector <- c(2,6,3)\n"
"combine_vector\n"
"~~~"
msgstr ""
"~~~\n"
"combine_vector <- c(2,6,3)\n"
"combine_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:474
msgid ""
"~~~\n"
"[1] 2 6 3\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2 6 3\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:479
msgid "Given what we've learned so far, what do you think the following will produce?"
msgstr "これまで学んだことを踏まえて、以下は何を生み出すでしょうか。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:482
msgid ""
"~~~\n"
"quiz_vector <- c(2,6,'3')\n"
"~~~"
msgstr ""
"~~~\n"
"quiz_vector <- c(2,6,'3')\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:487
msgid ""
"This is something called *type coercion*, and it is the source of many surprises\n"
"and the reason why we need to be aware of the basic data types and how R will\n"
"interpret them. When R encounters a mix of types (here numeric and character) to\n"
"be combined into a single vector, it will force them all to be the same\n"
"type. Consider:"
msgstr ""
"これは、*型強制*と言われるものです。これが多くの驚きの素であり、\n"
"なぜ起こるのか、理解するには基本データ型とRがそれをどう解釈するかを知っておく必要があります。\n"
"Rが複数の型（ここでは、数値と文字型）がひとつのベクトルに合わさる場面に遭遇した際、\n"
"全てを強制的に同じ型にします。例えば："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:494
msgid ""
"~~~\n"
"coercion_vector <- c('a', TRUE)\n"
"coercion_vector\n"
"~~~"
msgstr ""
"~~~\n"
"coercion_vector <- c('a', TRUE)\n"
"coercion_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:502
msgid ""
"~~~\n"
"[1] \"a\"    \"TRUE\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"a\"    \"TRUE\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:509
msgid ""
"~~~\n"
"another_coercion_vector <- c(0, TRUE)\n"
"another_coercion_vector\n"
"~~~"
msgstr ""
"~~~\n"
"another_coercion_vector <- c(0, TRUE)\n"
"another_coercion_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:517
msgid ""
"~~~\n"
"[1] 0 1\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0 1\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:522
msgid ""
"The coercion rules go: `logical` -> `integer` -> `numeric` -> `complex` ->\n"
"`character`, where -> can be read as *are transformed into*. You can try to\n"
"force coercion against this flow using the `as.` functions:"
msgstr ""
"強制化のルールは、`logical` -> `integer` -> `numeric` -> `complex` ->\n"
"`character` です。ここで、 -> は、*～が変換されるのは～*という意味です。\n"
"この流れに逆らう強制化も、`as.` 関数を使ってできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:527
msgid ""
"~~~\n"
"character_vector_example <- c('0','2','4')\n"
"character_vector_example\n"
"~~~"
msgstr ""
"~~~\n"
"character_vector_example <- c('0','2','4')\n"
"character_vector_example\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:535
msgid ""
"~~~\n"
"[1] \"0\" \"2\" \"4\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"0\" \"2\" \"4\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:542
msgid ""
"~~~\n"
"character_coerced_to_numeric <- as.numeric(character_vector_example)\n"
"character_coerced_to_numeric\n"
"~~~"
msgstr ""
"~~~\n"
"character_coerced_to_numeric <- as.numeric(character_vector_example)\n"
"character_coerced_to_numeric\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:550
msgid ""
"~~~\n"
"[1] 0 2 4\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0 2 4\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:557
msgid ""
"~~~\n"
"numeric_coerced_to_logical <- as.logical(character_coerced_to_numeric)\n"
"numeric_coerced_to_logical\n"
"~~~"
msgstr ""
"~~~\n"
"numeric_coerced_to_logical <- as.logical(character_coerced_to_numeric)\n"
"numeric_coerced_to_logical\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:565
msgid ""
"~~~\n"
"[1] FALSE  TRUE  TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] FALSE  TRUE  TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:570
msgid ""
"As you can see, some surprising things can happen when R forces one basic data\n"
"type into another! Nitty-gritty of type coercion aside, the point is: if your\n"
"data doesn't look like what you thought it was going to look like, type coercion\n"
"may well be to blame; make sure everything is the same type in your vectors and\n"
"your columns of data.frames, or you will get nasty surprises!"
msgstr ""
"ご覧のとおり、Rがある基本のデータ型を他へ変換すると、驚くことが起こります。\n"
"型強制の核心はさておき、ポイントは：もし、データが思っていたものと違っている場合、\n"
"型強制が原因かもしれないという事です。ベクトルの中、データフレームの列を全て同じ型にすること、\n"
"さもなくば、いやなサプライズに会う羽目になるかもしれません。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:576
msgid ""
"But coercion can also be very useful! For example, in our `cats` data\n"
"`likes_string` is numeric, but we know that the 1s and 0s actually represent\n"
"`TRUE` and `FALSE` (a common way of representing them). We should use the\n"
"`logical` datatype here, which has two states: `TRUE` or `FALSE`, which is\n"
"exactly what our data represents. We can 'coerce' this column to be `logical` by\n"
"using the `as.logical` function:"
msgstr ""
"しかし、型強制が役に立つこともあります。例えば、あの猫のデータの中にある、\n"
"`likes_string` は数値型ですが、私達は１と０が 一般的に`TRUE` と `FALSE`を示すことを知っています。\n"
"ここで、データが将に意味するところの`TRUE` 又は `FALSE` を持つ `logical` データ型を使ったほうがいいに決まっています。 \n"
" `as.logical` 関数を使い、この列を `logical` へ 「強制」 できます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:584
msgid ""
"~~~\n"
"cats$likes_string\n"
"~~~"
msgstr ""
"~~~\n"
"cats$likes_string\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:591
msgid ""
"~~~\n"
"[1] 1 0 1\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1 0 1\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:598
msgid ""
"~~~\n"
"cats$likes_string <- as.logical(cats$likes_string)\n"
"cats$likes_string\n"
"~~~"
msgstr ""
"~~~\n"
"cats$likes_string <- as.logical(cats$likes_string)\n"
"cats$likes_string\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:606
msgid ""
"~~~\n"
"[1]  TRUE FALSE  TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"[1]  TRUE FALSE  TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:611
msgid "The combine function, `c()`, will also append things to an existing vector:"
msgstr "合成関数 `c()`は、既存のベクトルに追加することもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:614
msgid ""
"~~~\n"
"ab_vector <- c('a', 'b')\n"
"ab_vector\n"
"~~~"
msgstr ""
"~~~\n"
"ab_vector <- c('a', 'b')\n"
"ab_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:622
msgid ""
"~~~\n"
"[1] \"a\" \"b\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"a\" \"b\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:629
msgid ""
"~~~\n"
"combine_example <- c(ab_vector, 'SWC')\n"
"combine_example\n"
"~~~"
msgstr ""
"~~~\n"
"combine_example <- c(ab_vector, 'SWC')\n"
"combine_example\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:637
msgid ""
"~~~\n"
"[1] \"a\"   \"b\"   \"SWC\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"a\"   \"b\"   \"SWC\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:642
msgid "You can also make series of numbers:"
msgstr "数列を作ることもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:645
msgid ""
"~~~\n"
"mySeries <- 1:10\n"
"mySeries\n"
"~~~"
msgstr ""
"~~~\n"
"mySeries <- 1:10\n"
"mySeries\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:653
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:667
msgid ""
"~~~\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"~~~"
msgstr ""
"~~~\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:660
msgid ""
"~~~\n"
"seq(10)\n"
"~~~"
msgstr ""
"~~~\n"
"seq(10)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:674
msgid ""
"~~~\n"
"seq(1,10, by=0.1)\n"
"~~~"
msgstr ""
"~~~\n"
"seq(1,10, by=0.1)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:681
msgid ""
"~~~\n"
" [1]  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3\n"
"[15]  2.4  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7\n"
"[29]  3.8  3.9  4.0  4.1  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.0  5.1\n"
"[43]  5.2  5.3  5.4  5.5  5.6  5.7  5.8  5.9  6.0  6.1  6.2  6.3  6.4  6.5\n"
"[57]  6.6  6.7  6.8  6.9  7.0  7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9\n"
"[71]  8.0  8.1  8.2  8.3  8.4  8.5  8.6  8.7  8.8  8.9  9.0  9.1  9.2  9.3\n"
"[85]  9.4  9.5  9.6  9.7  9.8  9.9 10.0\n"
"~~~"
msgstr ""
"~~~\n"
" [1]  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3\n"
"[15]  2.4  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7\n"
"[29]  3.8  3.9  4.0  4.1  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.0  5.1\n"
"[43]  5.2  5.3  5.4  5.5  5.6  5.7  5.8  5.9  6.0  6.1  6.2  6.3  6.4  6.5\n"
"[57]  6.6  6.7  6.8  6.9  7.0  7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9\n"
"[71]  8.0  8.1  8.2  8.3  8.4  8.5  8.6  8.7  8.8  8.9  9.0  9.1  9.2  9.3\n"
"[85]  9.4  9.5  9.6  9.7  9.8  9.9 10.0\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:692
msgid "We can ask a few questions about vectors:"
msgstr "ベクトルについて、いくつか質問することもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:695
msgid ""
"~~~\n"
"sequence_example <- seq(10)\n"
"head(sequence_example, n=2)\n"
"~~~"
msgstr ""
"~~~\n"
"sequence_example <- seq(10)\n"
"head(sequence_example, n=2)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:703
msgid ""
"~~~\n"
"[1] 1 2\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:710
msgid ""
"~~~\n"
"tail(sequence_example, n=4)\n"
"~~~"
msgstr ""
"~~~\n"
"tail(sequence_example, n=4)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:717
msgid ""
"~~~\n"
"[1]  7  8  9 10\n"
"~~~"
msgstr ""
"~~~\n"
"[1]  7  8  9 10\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:724
msgid ""
"~~~\n"
"length(sequence_example)\n"
"~~~"
msgstr ""
"~~~\n"
"length(sequence_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:731
msgid ""
"~~~\n"
"[1] 10\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 10\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:738
msgid ""
"~~~\n"
"class(sequence_example)\n"
"~~~"
msgstr ""
"~~~\n"
"class(sequence_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:752
msgid ""
"~~~\n"
"typeof(sequence_example)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(sequence_example)\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:764
msgid "Finally, you can give names to elements in your vector:"
msgstr "ベクトルの要素に名前を付けることもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:767
msgid ""
"~~~\n"
"my_example <- 5:8\n"
"names(my_example) <- c(\"a\", \"b\", \"c\", \"d\")\n"
"my_example\n"
"~~~"
msgstr ""
"~~~\n"
"my_example <- 5:8\n"
"names(my_example) <- c(\"a\", \"b\", \"c\", \"d\")\n"
"my_example\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:776
msgid ""
"~~~\n"
"a b c d \n"
"5 6 7 8 \n"
"~~~"
msgstr ""
"~~~\n"
"a b c d \n"
"5 6 7 8 \n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:784
msgid ""
"~~~\n"
"names(my_example)\n"
"~~~"
msgstr ""
"~~~\n"
"names(my_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:791
msgid ""
"~~~\n"
"[1] \"a\" \"b\" \"c\" \"d\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"a\" \"b\" \"c\" \"d\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:797
msgid ""
">\n"
"> Start by making a vector with the numbers 1 through 26.\n"
"> Multiply the vector by 2, and give the resulting vector\n"
"> names A through Z (hint: there is a built in vector called `LETTERS`)\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x <- 1:26\n"
"> > x <- x * 2\n"
"> > names(x) <- LETTERS\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> １から26までの数値を持つベクトルを作るところから始め、\n"
"> ベクトルに２を掛けましょう。そして、そのベクトルにAからZまでの名前を\n"
"> 与えます（ヒント：`LETTERS` という備え付けのベクトルがあります)\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x <- 1:26\n"
"> > x <- x * 2\n"
"> > names(x) <- LETTERS\n"
"> > ~~~\n"
"> > {: .language-r}"

# header
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:815
msgid "## Data Frames"
msgstr "## データフレーム"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:817
msgid "We said that columns in data.frames were vectors:"
msgstr "先ほどお伝えしたとおり、データフレームの列はベクトルです："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:834
msgid ""
"~~~\n"
"str(cats$likes_string)\n"
"~~~"
msgstr ""
"~~~\n"
"str(cats$likes_string)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:841
msgid ""
"~~~\n"
" logi [1:3] TRUE FALSE TRUE\n"
"~~~"
msgstr ""
"~~~\n"
" logi [1:3] TRUE FALSE TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:846
msgid "These make sense. But what about"
msgstr "これは納得といったところでしょうが、次はどうでしょう"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:849
msgid ""
"~~~\n"
"str(cats$coat)\n"
"~~~"
msgstr ""
"~~~\n"
"str(cats$coat)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:856
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1146
msgid ""
"~~~\n"
" Factor w/ 3 levels \"black\",\"calico\",..: 2 1 3\n"
"~~~"
msgstr ""
"~~~\n"
" Factor w/ 3 levels \"black\",\"calico\",..: 2 1 3\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:861
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:166
msgid "## Factors"
msgstr "## 順序なし因数"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:863
msgid ""
"Another important data structure is called a *factor*. Factors usually look like\n"
"character data, but are typically used to represent categorical information. For\n"
"example, let's make a vector of strings labelling cat colorations for all the\n"
"cats in our study:"
msgstr ""
"もうひとつの重要なデータ構造として、*順序なし因子（factor）*があります。\n"
"順序なし因子は、文字型データのように見えますが、一般的にはカテゴリー情報を表すために使われます。\n"
"例えば、我々の研究の全ての猫の毛色にラベル付けする文字列のベクトルを作ってみましょう："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:869
msgid ""
"~~~\n"
"coats <- c('tabby', 'tortoiseshell', 'tortoiseshell', 'black', 'tabby')\n"
"coats\n"
"~~~"
msgstr ""
"~~~\n"
"coats <- c('tabby', 'tortoiseshell', 'tortoiseshell', 'black', 'tabby')\n"
"coats\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:877
msgid ""
"~~~\n"
"[1] \"tabby\"         \"tortoiseshell\" \"tortoiseshell\" \"black\"        \n"
"[5] \"tabby\"        \n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"tabby\"         \"tortoiseshell\" \"tortoiseshell\" \"black\"        \n"
"[5] \"tabby\"        \n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:885
msgid ""
"~~~\n"
"str(coats)\n"
"~~~"
msgstr ""
"~~~\n"
"str(coats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:892
msgid ""
"~~~\n"
" chr [1:5] \"tabby\" \"tortoiseshell\" \"tortoiseshell\" \"black\" \"tabby\"\n"
"~~~"
msgstr ""
"~~~\n"
" chr [1:5] \"tabby\" \"tortoiseshell\" \"tortoiseshell\" \"black\" \"tabby\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:897
msgid "We can turn a vector into a factor like so:"
msgstr "ベクトルを順序なし因子に変換するには："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:900
msgid ""
"~~~\n"
"CATegories <- factor(coats)\n"
"class(CATegories)\n"
"~~~"
msgstr ""
"~~~\n"
"CATegories <- factor(coats)\n"
"class(CATegories)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:908
msgid ""
"~~~\n"
"[1] \"factor\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"factor\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:915
msgid ""
"~~~\n"
"str(CATegories)\n"
"~~~"
msgstr ""
"~~~\n"
"str(CATegories)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:922
msgid ""
"~~~\n"
" Factor w/ 3 levels \"black\",\"tabby\",..: 2 3 3 1 2\n"
"~~~"
msgstr ""
"~~~\n"
" Factor w/ 3 levels \"black\",\"tabby\",..: 2 3 3 1 2\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:927
msgid ""
"Now R has noticed that there are three possible categories in our data - but it\n"
"also did something surprising; instead of printing out the strings we gave it,\n"
"we got a bunch of numbers instead. R has replaced our human-readable categories\n"
"with numbered indices under the hood, this is necessary as many statistical\n"
"calculations utilise such numerical representations for categorical data:"
msgstr ""
"ここでRは、我々のデータに３つのカテゴリーが存在することに気づきました。\n"
"しかし、それと同時に意外なこともしました。入力した文字列が表示される代わりに、\n"
"数字の羅列が出てきました。Rは、人が読めるカテゴリーを、 内部で番号を振られた添字に変換したのです。\n"
"こうする必要があるのは、統計的な計算で、カテゴリーデータをこのように数字として表して扱うからです。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:934
msgid ""
"~~~\n"
"typeof(coats)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(coats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:948
msgid ""
"~~~\n"
"typeof(CATegories)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(CATegories)\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:961
msgid ""
">\n"
"> Is there a factor in our `cats` data.frame? what is its name?\n"
"> Try using `?read.csv` to figure out how to keep text columns as character\n"
"> vectors instead of factors; then write a command or two to show that the factor\n"
"> in `cats` is actually a character vector when loaded in this way.\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> > One solution is use the argument `stringAsFactors`:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > cats <- read.csv(file=\"data/feline-data.csv\", stringsAsFactors=FALSE)\n"
"> > str(cats$coat)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > Another solution is use the argument `colClasses`\n"
"> > that allow finer control.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > cats <- read.csv(file=\"data/feline-data.csv\", colClasses=c(NA, NA, \"character\"))\n"
"> > str(cats$coat)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > Note: new students find the help files difficult to understand; make sure to let them know\n"
"> > that this is typical, and encourage them to take their best guess based on semantic meaning,\n"
"> > even if they aren't sure."
msgstr ""
">\n"
"> 我々の `cats` データフレームには、順序なし因子がありますか？列の名前は何ですか？\n"
"> `?read.csv` を使って、どうしたら文字の列を順序なし因子ではなく、文字型ベクトルのまま\n"
"> 読み込む方法を見つけ出して下さい。そして、`cats`の中の順序なし因子がこの方法で読み込まれたとき、\n"
"> 順序なし因子ではなく文字型ベクトルであることを証明するコマンドを、ひとつかふたつ書いて下さい。\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> > 一つ目の解答は、`stringAsFactors` を引数として使うことです。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > cats <- read.csv(file=\"data/feline-data.csv\", stringsAsFactors=FALSE)\n"
"> > str(cats$coat)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > もう一つの解答は、更に洗練した操作ができる引数 `colClasses` \n"
"> > を使うことです。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > cats <- read.csv(file=\"data/feline-data.csv\", colClasses=c(NA, NA, \"character\"))\n"
"> > str(cats$coat)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > 補足：初めての方は、ヘルプファイルを難しく感じるかもしれません。これはよくあることですので、\n"
"> > 自信がなくても、書かれたことの意味をうまく予測してみるようにしましょう。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:994
msgid ""
"In modelling functions, it's important to know what the baseline levels are. This\n"
"is assumed to be the first factor, but by default factors are labelled in\n"
"alphabetical order. You can change this by specifying the levels:"
msgstr ""
"モデリングの関数を使う際、基準となっている水準の順位がどれかを知っておくことが大事です。\n"
"最初の順序なし因子が基準値であると仮定されていますが、デフォルトでは、順序なし因子は\n"
"アルファベット順に並べられています。水準の順位を指定することで、順序なし因子の順位を変更できます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:999
msgid ""
"~~~\n"
"mydata <- c(\"case\", \"control\", \"control\", \"case\")\n"
"factor_ordering_example <- factor(mydata, levels = c(\"control\", \"case\"))\n"
"str(factor_ordering_example)\n"
"~~~"
msgstr ""
"~~~\n"
"mydata <- c(\"case\", \"control\", \"control\", \"case\")\n"
"factor_ordering_example <- factor(mydata, levels = c(\"control\", \"case\"))\n"
"str(factor_ordering_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1008
msgid ""
"~~~\n"
" Factor w/ 2 levels \"control\",\"case\": 2 1 1 2\n"
"~~~"
msgstr ""
"~~~\n"
" Factor w/ 2 levels \"control\",\"case\": 2 1 1 2\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1013
msgid ""
"In this case, we've explicitly told R that \"control\" should represented by 1, and\n"
"\"case\" by 2. This designation can be very important for interpreting the\n"
"results of statistical models!"
msgstr ""
"ここでは、 \"control\" は１、\"case\" は2で表されるべきであるとRにはっきり示しています。\n"
"この指定が、統計モデルの結果を解釈する際、とても重要になります。"

# header
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1017
msgid "## Lists"
msgstr "## リスト"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1019
msgid ""
"Another data structure you'll want in your bag of tricks is the `list`. A list\n"
"is simpler in some ways than the other types, because you can put anything you\n"
"want in it:"
msgstr ""
"覚えておきたいもう一つのデータ構造は、 `list` です。\n"
"リストは、他の種類よりも、ある意味シンプルです。その理由は、入れたいものを\n"
"なんでも入れることができるからです："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1024
msgid ""
"~~~\n"
"list_example <- list(1, \"a\", TRUE, 1+4i)\n"
"list_example\n"
"~~~"
msgstr ""
"~~~\n"
"list_example <- list(1, \"a\", TRUE, 1+4i)\n"
"list_example\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1032
msgid ""
"~~~\n"
"[[1]]\n"
"[1] 1\n"
"\n"
"[[2]]\n"
"[1] \"a\"\n"
"\n"
"[[3]]\n"
"[1] TRUE\n"
"\n"
"[[4]]\n"
"[1] 1+4i\n"
"~~~"
msgstr ""
"~~~\n"
"[[1]]\n"
"[1] 1\n"
"\n"
"[[2]]\n"
"[1] \"a\"\n"
"\n"
"[[3]]\n"
"[1] TRUE\n"
"\n"
"[[4]]\n"
"[1] 1+4i\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1049
msgid ""
"~~~\n"
"another_list <- list(title = \"Numbers\", numbers = 1:10, data = TRUE )\n"
"another_list\n"
"~~~"
msgstr ""
"~~~\n"
"another_list <- list(title = \"Numbers\", numbers = 1:10, data = TRUE )\n"
"another_list\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1057
msgid ""
"~~~\n"
"$title\n"
"[1] \"Numbers\"\n"
"\n"
"$numbers\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"\n"
"$data\n"
"[1] TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"$title\n"
"[1] \"Numbers\"\n"
"\n"
"$numbers\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"\n"
"$data\n"
"[1] TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1069
msgid "We can now understand something a bit surprising in our data.frame; what happens if we run:"
msgstr "これで、data.frameの驚くべき特徴を理解することができます。もし以下を走らせたらどうなるでしょう："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1072
msgid ""
"~~~\n"
"typeof(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(cats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1079
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1177
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:584
msgid ""
"~~~\n"
"[1] \"list\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"list\"\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1084
msgid ""
"We see that data.frames look like lists 'under the hood' - this is because a\n"
"data.frame is really a list of vectors and factors, as they have to be - in\n"
"order to hold those columns that are a mix of vectors and factors, the\n"
"data.frame needs something a bit more flexible than a vector to put all the\n"
"columns together into a familiar table.  In other words, a `data.frame` is a\n"
"special list in which all the vectors must have the same length."
msgstr ""
"data.frame は、 実際のところリストと同じように見えます。data.frame は、\n"
"実際のところベクトルと順序なし因子のリストであり、これらから形成しなければならないからです。\n"
"data.frame が、ベクトルと順序なし因子が混ざった列を含む全ての列をひとまとめにし、\n"
"なじみのある表にするためには、ベクトルよりも柔軟な構造が必要だったのです。\n"
"つまり、 `data.frame` は、全てのベクトルの長さが同じでなければならない特別なリストなのです。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1091
msgid ""
"In our `cats` example, we have an integer, a double and a logical variable. As\n"
"we have seen already, each column of data.frame is a vector."
msgstr ""
"我々の `cats` の例では、整数型（integer）、浮動小数型（double）、論理型（logical）の変数があります。\n"
"既に見たように、data.frame のそれぞれの列はベクトルです。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1110
msgid ""
"~~~\n"
"cats[,1]\n"
"~~~"
msgstr ""
"~~~\n"
"cats[,1]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1125
msgid ""
"~~~\n"
"typeof(cats[,1])\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(cats[,1])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1139
msgid ""
"~~~\n"
"str(cats[,1])\n"
"~~~"
msgstr ""
"~~~\n"
"str(cats[,1])\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1151
msgid ""
"Each row is an *observation* of different variables, itself a data.frame, and\n"
"thus can be composed of elements of different types."
msgstr ""
"それぞれの行は、異なる変数の *observation（観測値）* であり、それ自体が data.frame であるため、\n"
"異なる種類の要素で構成されることができます。"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1155
msgid ""
"~~~\n"
"cats[1,]\n"
"~~~"
msgstr ""
"~~~\n"
"cats[1,]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1162
msgid ""
"~~~\n"
"    coat weight likes_string\n"
"1 calico    2.1         TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"    coat weight likes_string\n"
"1 calico    2.1         TRUE\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1170
msgid ""
"~~~\n"
"typeof(cats[1,])\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(cats[1,])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1184
msgid ""
"~~~\n"
"str(cats[1,])\n"
"~~~"
msgstr ""
"~~~\n"
"str(cats[1,])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1191
msgid ""
"~~~\n"
"'data.frame':\t1 obs. of  3 variables:\n"
" $ coat        : Factor w/ 3 levels \"black\",\"calico\",..: 2\n"
" $ weight      : num 2.1\n"
" $ likes_string: logi TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t1 obs. of  3 variables:\n"
" $ coat        : Factor w/ 3 levels \"black\",\"calico\",..: 2\n"
" $ weight      : num 2.1\n"
" $ likes_string: logi TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1200
msgid ""
">\n"
"> There are several subtly different ways to call variables, observations and\n"
"> elements from data.frames:\n"
">\n"
"> - `cats[1]`\n"
"> - `cats[[1]]`\n"
"> - `cats$coat`\n"
"> - `cats[\"coat\"]`\n"
"> - `cats[1, 1]`\n"
"> - `cats[, 1]`\n"
"> - `cats[1, ]`\n"
">\n"
"> Try out these examples and explain what is returned by each one.\n"
">\n"
"> *Hint:* Use the function `typeof()` to examine what is returned in each case.\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> > \n"
"> > ~~~\n"
"> > cats[1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     coat\n"
"> > 1 calico\n"
"> > 2  black\n"
"> > 3  tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > We can think of a data frame as a list of vectors. The single brace `[1]`\n"
"> returns the first slice of the list, as another list. In this case it is the\n"
"> first column of the data frame.\n"
"> > \n"
"> > ~~~\n"
"> > cats[[1]]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico black  tabby \n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > The double brace `[[1]]` returns the contents of the list item. In this case\n"
"> it is the contents of the first column, a _vector_ of type _factor_.\n"
"> > \n"
"> > ~~~\n"
"> > cats$coat\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico black  tabby \n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > This example uses the `$` character to address items by name. _coat_ is the\n"
"> first column of the data frame, again a _vector_ of type _factor_.\n"
"> > \n"
"> > ~~~\n"
"> > cats[\"coat\"]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     coat\n"
"> > 1 calico\n"
"> > 2  black\n"
"> > 3  tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Here we are using a single brace `[\"coat\"]` replacing the index number with\n"
"> the column name. Like example 1, the returned object is a _list_.\n"
"> > \n"
"> > ~~~\n"
"> > cats[1, 1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico\n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > This example uses a single brace, but this time we provide row and column\n"
"> coordinates. The returned object is the value in row 1, column 1. The object\n"
"> is an _integer_ but because it is part of a _vector_ of type _factor_, R\n"
"> displays the label \"calico\" associated with the integer value.\n"
"> > \n"
"> > ~~~\n"
"> > cats[, 1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico black  tabby \n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Like the previous example we use single braces and provide row and column\n"
"> coordinates. The row coordinate is not specified, R interprets this missing\n"
"> value as all the elements in this _column_ _vector_.\n"
"> > \n"
"> > ~~~\n"
"> > cats[1, ]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     coat weight likes_string\n"
"> > 1 calico    2.1         TRUE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Again we use the single brace with row and column coordinates. The column\n"
"> coordinate is not specified. The return value is a _list_ containing all the\n"
"> values in the first row."
msgstr ""
">\n"
"> data.frame から、変数、観測値、要素を呼び出す方法はいくつかあります：\n"
">\n"
"> - `cats[1]`\n"
"> - `cats[[1]]`\n"
"> - `cats$coat`\n"
"> - `cats[\"coat\"]`\n"
"> - `cats[1, 1]`\n"
"> - `cats[, 1]`\n"
"> - `cats[1, ]`\n"
">\n"
"> 上記の例を試してみて、それぞれの例で何が返ってくるかを説明してみましょう。\n"
">\n"
"> *ヒント：* どういった値が返ってくるかを確かめるために、関数 `typeof()` を使いましょう。\n"
">\n"
"> > ## チャレンジ３の解答\n"
"> > \n"
"> > ~~~\n"
"> > cats[1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     coat\n"
"> > 1 calico\n"
"> > 2  black\n"
"> > 3  tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > データフレームを、ベクトルのリストと考えることができます。この角括弧 `[1]`\n"
"> は、リストの最初の一切れを別のリストとして返します。ここでは、\n"
"> データフレームの最初の列となっています。\n"
"> > \n"
"> > ~~~\n"
"> > cats[[1]]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico black  tabby \n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > この二重角括弧 `[[1]]` は、リスト項目の内容を返します。ここでは、\n"
"> 最初の列の内容、_順序なし因子_ の種類の_ベクトル_です。\n"
"> > \n"
"> > ~~~\n"
"> > cats$coat\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico black  tabby \n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > この例では、 `$` 記号を、項目を名前で呼ぶために使っています\n"
"> _coat_ が、データフレームの最初の列であり、これもまた_順序なし因子_ の種類の_ベクトル_です。\n"
"> > \n"
"> > ~~~\n"
"> > cats[\"coat\"]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     coat\n"
"> > 1 calico\n"
"> > 2  black\n"
"> > 3  tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ここでは、列の名前の要素番号の代わりに角括弧 `[\"coat\"]` を使っています。\n"
"> 例１のように、返ってくるオブジェクトは、_リスト_です。\n"
"> > \n"
"> > ~~~\n"
"> > cats[1, 1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico\n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > この例は、角括弧を使っていますが、ここでは行と列の座標を指定します。\n"
"> 返ってくるオブジェクトは、行１、列１の値です。このオブジェクトは、\n"
"> _整数_ ですが、_順序なし因数_の一種の_ベクトル_の一部なので、Rは、\n"
"> 整数値と紐づけられた「calico」のラベルを表示します。 \n"
"> > \n"
"> > ~~~\n"
"> > cats[, 1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] calico black  tabby \n"
"> > Levels: black calico tabby\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >前の例と同じように、角括弧を使い、行と列の座標を指定します。\n"
"> 行の座標は指定されていません。Rは、この欠けている値を、\n"
"> この_列_の_ベクトル_の全ての要素と解釈します。\n"
"> > \n"
"> > ~~~\n"
"> > cats[1, ]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >     coat weight likes_string\n"
"> > 1 calico    2.1         TRUE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > 同じ様に、行と列の座標の入った角括弧を使っています。列の座標は\n"
"> 指定されていません。返ってくる値は、最初の行にある全ての値の_リスト_\n"
"> です。"

# header
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1334
msgid "## Matrices"
msgstr "## 行列"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1336
msgid "Last but not least is the matrix. We can declare a matrix full of zeros:"
msgstr "最後に、行列を紹介します。全てが０の行列を宣言できます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1339
msgid ""
"~~~\n"
"matrix_example <- matrix(0, ncol=6, nrow=3)\n"
"matrix_example\n"
"~~~"
msgstr ""
"~~~\n"
"matrix_example <- matrix(0, ncol=6, nrow=3)\n"
"matrix_example\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1347
msgid ""
"~~~\n"
"     [,1] [,2] [,3] [,4] [,5] [,6]\n"
"[1,]    0    0    0    0    0    0\n"
"[2,]    0    0    0    0    0    0\n"
"[3,]    0    0    0    0    0    0\n"
"~~~"
msgstr ""
"~~~\n"
"     [,1] [,2] [,3] [,4] [,5] [,6]\n"
"[1,]    0    0    0    0    0    0\n"
"[2,]    0    0    0    0    0    0\n"
"[3,]    0    0    0    0    0    0\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1355
msgid "And similar to other data structures, we can ask things about our matrix:"
msgstr "そして、他のデータ構造と同様に、行列に関することを尋ねることもできます："

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1358
msgid ""
"~~~\n"
"class(matrix_example)\n"
"~~~"
msgstr ""
"~~~\n"
"class(matrix_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1365
msgid ""
"~~~\n"
"[1] \"matrix\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"matrix\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1372
msgid ""
"~~~\n"
"typeof(matrix_example)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(matrix_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1386
msgid ""
"~~~\n"
"str(matrix_example)\n"
"~~~"
msgstr ""
"~~~\n"
"str(matrix_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1393
msgid ""
"~~~\n"
" num [1:3, 1:6] 0 0 0 0 0 0 0 0 0 0 ...\n"
"~~~"
msgstr ""
"~~~\n"
" num [1:3, 1:6] 0 0 0 0 0 0 0 0 0 0 ...\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1400
msgid ""
"~~~\n"
"dim(matrix_example)\n"
"~~~"
msgstr ""
"~~~\n"
"dim(matrix_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1407
msgid ""
"~~~\n"
"[1] 3 6\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 3 6\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1414
msgid ""
"~~~\n"
"nrow(matrix_example)\n"
"~~~"
msgstr ""
"~~~\n"
"nrow(matrix_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1421
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:120
msgid ""
"~~~\n"
"[1] 3\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 3\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1428
msgid ""
"~~~\n"
"ncol(matrix_example)\n"
"~~~"
msgstr ""
"~~~\n"
"ncol(matrix_example)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1435
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:567
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:614
msgid ""
"~~~\n"
"[1] 6\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 6\n"
"~~~"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1441
msgid ""
">\n"
"> What do you think will be the result of\n"
"> `length(matrix_example)`?\n"
"> Try it.\n"
"> Were you right? Why / why not?\n"
">\n"
"> > ## Solution to Challenge 4\n"
"> >\n"
"> > What do you think will be the result of\n"
"> > `length(matrix_example)`?\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > matrix_example <- matrix(0, ncol=6, nrow=3)\n"
"> > length(matrix_example)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 18\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Because a matrix is a vector with added dimension attributes, `length`\n"
"> > gives you the total number of elements in the matrix."
msgstr ""
">\n"
"> 次の結果は何になるでしょうか。\n"
"> `length(matrix_example)`?\n"
"> 試してみて下さい。\n"
"> 合っていましたか？なぜ答えが合っていた・合っていなかったのでしょうか？\n"
">\n"
"> > ## チャレンジ４の解答\n"
"> >\n"
"> > 次の結果は何になるでしょうか。\n"
"> > `length(matrix_example)`?\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > matrix_example <- matrix(0, ncol=6, nrow=3)\n"
"> > length(matrix_example)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 18\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > 行列は、次元が追加されたベクトルですので、`length`は\n"
"> > 行列の総要素数を教えてくれます。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1473
msgid ""
">\n"
"> Make another matrix, this time containing the numbers 1:50,\n"
"> with 5 columns and 10 rows.\n"
"> Did the `matrix` function fill your matrix by column, or by\n"
"> row, as its default behaviour?\n"
"> See if you can figure out how to change this.\n"
"> (hint: read the documentation for `matrix`!)\n"
">\n"
"> > ## Solution to Challenge 5\n"
"> >\n"
"> > Make another matrix, this time containing the numbers 1:50,\n"
"> > with 5 columns and 10 rows.\n"
"> > Did the `matrix` function fill your matrix by column, or by\n"
"> > row, as its default behaviour?\n"
"> > See if you can figure out how to change this.\n"
"> > (hint: read the documentation for `matrix`!)\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x <- matrix(1:50, ncol=5, nrow=10)\n"
"> > x <- matrix(1:50, ncol=5, nrow=10, byrow = TRUE) # to fill by row\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> もう一つ行列を作ってみましょう、今回は、1:50の数を含むもので、\n"
"> ５行、10列を持つ行列にしましょう。\n"
"> この `matrix` 関数は、デフォルトでは、行か列、どちらから\n"
"> 行列を埋めましたか？\n"
"> どうしたらこのデフォルト動作を変更できるか探してみて下さい。\n"
">（ヒント： `matrix` のドキュメントを読んでみましょう！)\n"
">\n"
"> > ## チャレンジ５の解答\n"
"> >\n"
"> > もう一つ行列を作ってみましょう、今回は、1:50の数を含むもので、\n"
"> > ５行、10列を持つ行列にしましょう。\n"
"> > この `matrix` 関数は、デフォルトでは、行か列、どちらから\n"
"> > 行列を埋めましたか？\n"
"> > これがどう変化したか理解したか確認してみましょう。\n"
"> > （ヒント： `matrix` のドキュメントを読んでみましょう！)\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x <- matrix(1:50, ncol=5, nrow=10)\n"
"> > x <- matrix(1:50, ncol=5, nrow=10, byrow = TRUE) # to fill by row\n"
"> > ~~~\n"
"> > {: .language-r}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1500
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1236
msgid "> ## Challenge 6"
msgstr "> ## チャレンジ６"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1501
msgid ">  Create a list of length two containing a character vector for each of the sections in this part of the workshop:"
msgstr ">  ワークショップの現パート、それぞれのセクションのために、二つの文字型ベクトルが含まれるリストを作って下さい："

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1502
msgid ""
">\n"
">  - Data types\n"
">  - Data structures\n"
">\n"
">  Populate each character vector with the names of the data types and data\n"
">  structures we've seen so far.\n"
">\n"
"> > ## Solution to Challenge 6\n"
"> > \n"
"> > ~~~\n"
"> > dataTypes <- c('double', 'complex', 'integer', 'character', 'logical')\n"
"> > dataStructures <- c('data.frame', 'vector', 'factor', 'list', 'matrix')\n"
"> > answer <- list(dataTypes, dataStructures)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > Note: it's nice to make a list in big writing on the board or taped to the wall\n"
"> > listing all of these types and structures - leave it up for the rest of the workshop\n"
"> > to remind people of the importance of these basics.\n"
"> >"
msgstr ""
">\n"
">  - データ型\n"
">  - データ構造\n"
">\n"
">  それぞれの文字ベクトルをこれまでみてきたデータ型と\n"
">  データ構造で埋めてください。\n"
">\n"
"> > ## チャレンジ６の解答\n"
"> > \n"
"> > ~~~\n"
"> > dataTypes <- c('double', 'complex', 'integer', 'character', 'logical')\n"
"> > dataStructures <- c('data.frame', 'vector', 'factor', 'list', 'matrix')\n"
"> > answer <- list(dataTypes, dataStructures)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > 補足：ボードや壁に、全ての型と構造を大きな文字で列挙したものを\n"
"> > 貼っておくのは良い方法です －これらの基本の重要性をみなさんに繰り返し伝えるため、\n"
"> > ワークショップが終わるまで残しておきましょう。\n"
"> >"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1525
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1358
msgid "> ## Challenge 7"
msgstr "> ## チャレンジ７"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1526
msgid ""
">\n"
"> Consider the R output of the matrix below:\n"
"> \n"
"> ~~~\n"
">      [,1] [,2]\n"
"> [1,]    4    1\n"
"> [2,]    9    5\n"
"> [3,]   10    7\n"
"> ~~~"
msgstr ""
">\n"
"> 下記の行列のRアウトプットを見てみましょう：\n"
"> \n"
"> ~~~\n"
">      [,1] [,2]\n"
"> [1,]    4    1\n"
"> [2,]    9    5\n"
"> [3,]   10    7\n"
"> ~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1535
#: r-novice-gapminder/_episodes/06-data-subsetting.md:281
#: r-novice-gapminder/_episodes/06-data-subsetting.md:321
#: r-novice-gapminder/_episodes/06-data-subsetting.md:330
#: r-novice-gapminder/_episodes/06-data-subsetting.md:506
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1031
#: r-novice-gapminder/_episodes/09-vectorization.md:241
#: r-novice-gapminder/_episodes/09-vectorization.md:256
#: r-novice-gapminder/_episodes/09-vectorization.md:282
#: r-novice-gapminder/_episodes/10-functions.md:589
msgid "> {: .output}"
msgstr "> {: .output}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1536
msgid "> What was the correct command used to write this matrix? Examine"
msgstr "> この行列を書くために使ったコマンドは何でしたか？"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1537
msgid "> each command and try to figure out the correct one before typing them."
msgstr "> それぞれのコマンドを確かめて、打ち込む前に正しいものが何か分かるようにしましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1538
msgid "> Think about what matrices the other commands will produce."
msgstr "> 他のコマンドでは、どのような行列が作られるかを考えてみましょう。"

#: r-novice-gapminder/_episodes/04-data-structures-part1.md:1539
msgid ""
">\n"
"> 1. `matrix(c(4, 1, 9, 5, 10, 7), nrow = 3)`\n"
"> 2. `matrix(c(4, 9, 10, 1, 5, 7), ncol = 2, byrow = TRUE)`\n"
"> 3. `matrix(c(4, 9, 10, 1, 5, 7), nrow = 2)`\n"
"> 4. `matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)`\n"
">\n"
"> > ## Solution to Challenge 7\n"
"> >\n"
"> > Consider the R output of the matrix below:\n"
"> > \n"
"> > ~~~\n"
"> >      [,1] [,2]\n"
"> > [1,]    4    1\n"
"> > [2,]    9    5\n"
"> > [3,]   10    7\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > What was the correct command used to write this matrix? Examine\n"
"> > each command and try to figure out the correct one before typing them.\n"
"> > Think about what matrices the other commands will produce.\n"
"> > \n"
"> > ~~~\n"
"> > matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 1. `matrix(c(4, 1, 9, 5, 10, 7), nrow = 3)`\n"
"> 2. `matrix(c(4, 9, 10, 1, 5, 7), ncol = 2, byrow = TRUE)`\n"
"> 3. `matrix(c(4, 9, 10, 1, 5, 7), nrow = 2)`\n"
"> 4. `matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)`\n"
">\n"
"> > ## チャレンジ７の解答\n"
"> >\n"
"> > 下記の行列のRアウトプットを見てみましょう：\n"
"> > \n"
"> > ~~~\n"
"> >      [,1] [,2]\n"
"> > [1,]    4    1\n"
"> > [2,]    9    5\n"
"> > [3,]   10    7\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > この行列を書くために使ったコマンドは何でしたか？\n"
"> > それぞれのコマンドを確かめて、打ち込む前に正しいものが何か分かるようにしましょう。\n"
"> > 他のコマンドでは、どのような行列が作られるかを考えてみましょう。\n"
"> > \n"
"> > ~~~\n"
"> > matrix(c(4, 1, 9, 5, 10, 7), ncol = 2, byrow = TRUE)\n"
"> > ~~~\n"
"> > {: .language-r}"

# Front Matter
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 05-data-structures-part2.md in _episodes_rmd/\n"
"title: \"Exploring Data Frames\"\n"
"teaching: 20\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I manipulate a data frame?\"\n"
"objectives:\n"
"- \"Add and remove rows or columns.\"\n"
"- \"Remove rows with `NA` values.\"\n"
"- \"Append two data frames.\"\n"
"- \"Understand what a `factor` is.\"\n"
"- \"Convert a `factor` to a `character` vector and vice versa.\"\n"
"- \"Display basic properties of data frames including size and class of the columns, names, and first few rows.\"\n"
"keypoints:\n"
"- \"Use `cbind()` to add a new column to a data frame.\"\n"
"- \"Use `rbind()` to add a new row to a data frame.\"\n"
"- \"Remove rows from a data frame.\"\n"
"- \"Use `na.omit()` to remove rows from a data frame with `NA` values.\"\n"
"- \"Use `levels()` and `as.character()` to explore and manipulate factors.\"\n"
"- \"Use `str()`, `nrow()`, `ncol()`, `dim()`, `colnames()`, `rownames()`, `head()`, and `typeof()` to understand the structure of a data frame.\"\n"
"- \"Read in a csv file using `read.csv()`.\"\n"
"- \"Understand what `length()` of a data frame represents.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 05-data-structures-part2.md in _episodes_rmd/\n"
"title: \"データフレームの内容を確認\"\n"
"teaching: 20\n"
"exercises: 10\n"
"questions:\n"
"- \"データフレームはどのように操作すればよいですか?\"\n"
"objectives:\n"
"- \"行や列を追加したり削除出来るようになりましょう。\"\n"
"- \"`NA`が入っている行の削除が出来るようになりましょう。\"\n"
"- \"2つのデータフレームをマージできるようになりましょう。\"\n"
"- \"`factor`（ファクター）について理解しましょう。\"\n"
"- \"`factor` を `character`（文字型）に変換、またはその逆の変換が出来るようになりましょう。\"\n"
"- \"データフレームの列のサイズやクラスなどの基本的なプロパティ、および名前や最初の数行の表示が出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"新しい列をデータフレームに追加するときは `cbind()` を使用する。\"\n"
"- \"新しい行をデータフレームに追加するときは `rbind()` を使用する。\"\n"
"- \"データフレームから行を削除するとき\"\n"
"- \"値が `NA` の行をデータフレームから削除するときは `na.omit()` を使用する。\"\n"
"- \"ファクターの内容を確認、および操作するときは `levels()` および `as.character()` を使用する。\"\n"
"- \"データフレームの構造を理解したいときは `str()`, `nrow()`, `ncol()`, `dim()`, `colnames()`, `rownames()`, `head()`, および `typeof()` を使用する。\"\n"
"- \"csv ファイルを読み込むときは `read.csv()`　を使用する。\"\n"
"- \"データフレームの `length()` の出力内容を理解する。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:30
msgid ""
"At this point, you've seen it all: in the last lesson, we toured all the basic\n"
"data types and data structures in R. Everything you do will be a manipulation of\n"
"those tools. But most of the time, the star of the show is the data frame—the table that we created by loading information from a csv file. In this lesson, we'll learn a few more things\n"
"about working with data frames."
msgstr ""
"これでRの基礎を全て見たことになります。このレッスンで、Rの基本的なデータ型、データ構造を習いました。\n"
"これからすることの全ては、これらの道具を用いた操作となります。\n"
"しかし大抵の場合、主役はデータフレーム（CSVファイルから情報を読み込み作成した表）です。\n"
"このレッスンでは、データフレームを使ってどう作業していくかについて更に学んでいきましょう。"

# header
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:35
msgid "## Adding columns and rows in data frames"
msgstr "## データフレームに行と列を追加する"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:37
msgid ""
"We already learned that the columns of a data frame are vectors, so that our\n"
"data are consistent in type throughout the columns. As such, if we want to add a\n"
"new column, we can start by making a new vector:"
msgstr ""
"既に学んだとおり、データフレームの列はベクトルですから、列にあるデータには一貫性があります。\n"
"ですので、新しい列を加えたい場合は、新しいベクトルを作ることから始めることになります："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:44
msgid ""
"~~~\n"
"age <- c(2, 3, 5)\n"
"cats\n"
"~~~"
msgstr ""
"~~~\n"
"age <- c(2, 3, 5)\n"
"cats\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:60
msgid "We can then add this as a column via:"
msgstr "そして、これを以下を使って列に加えます："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:63
msgid ""
"~~~\n"
"cbind(cats, age)\n"
"~~~"
msgstr ""
"~~~\n"
"cbind(cats, age)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:70
msgid ""
"~~~\n"
"    coat weight likes_string age\n"
"1 calico    2.1            1   2\n"
"2  black    5.0            0   3\n"
"3  tabby    3.2            1   5\n"
"~~~"
msgstr ""
"~~~\n"
"    coat weight likes_string age\n"
"1 calico    2.1            1   2\n"
"2  black    5.0            0   3\n"
"3  tabby    3.2            1   5\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:78
msgid "Note that if we tried to add a vector of ages with a different number of entries than the number of rows in the dataframe, it would fail:"
msgstr "もし、データフレームの行の数と一致しない年齢のベクトルを追加しようとすると、失敗します："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:81
msgid ""
"~~~\n"
"age <- c(2, 3, 5, 12)\n"
"cbind(cats, age)\n"
"~~~"
msgstr ""
"~~~\n"
"age <- c(2, 3, 5, 12)\n"
"cbind(cats, age)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:89
msgid ""
"~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 3, 4\n"
"~~~"
msgstr ""
"~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 3, 4\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:96
msgid ""
"~~~\n"
"age <- c(2, 3)\n"
"cbind(cats, age)\n"
"~~~"
msgstr ""
"~~~\n"
"age <- c(2, 3)\n"
"cbind(cats, age)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:104
msgid ""
"~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 3, 2\n"
"~~~"
msgstr ""
"~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 3, 2\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:109
msgid ""
"Why didn't this work? Of course, R wants to see one element in our new column\n"
"for every row in the table:"
msgstr "なぜダメだったのでしょうか？もちろん、Rは新しい列のひとつの要素を、表の中にある全ての行について参照したがるものです。"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:113
msgid ""
"~~~\n"
"nrow(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"nrow(cats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:127
msgid ""
"~~~\n"
"length(age)\n"
"~~~"
msgstr ""
"~~~\n"
"length(age)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:134
msgid ""
"~~~\n"
"[1] 2\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:139
msgid "So for it to work we need to have `nrow(cats)` = `length(age)`. Let's overwite the content of cats with our new data frame."
msgstr "ですから、そうするために、 `nrow(cats)` = `length(age)` である必要があるのです。猫の内容を新しいデータフレームで上書きしましょう。"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:142
msgid ""
"~~~\n"
"age <- c(2, 3, 5)\n"
"cats <- cbind(cats, age)\n"
"~~~"
msgstr ""
"~~~\n"
"age <- c(2, 3, 5)\n"
"cats <- cbind(cats, age)\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:148
msgid ""
"Now how about adding rows? We already know that the rows of a\n"
"data frame are lists:"
msgstr "新しい行を加えてみてはどうでしょうか？既に知っているとおり、データフレームの行はリストです："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:152
msgid ""
"~~~\n"
"newRow <- list(\"tortoiseshell\", 3.3, TRUE, 9)\n"
"cats <- rbind(cats, newRow)\n"
"~~~"
msgstr ""
"~~~\n"
"newRow <- list(\"tortoiseshell\", 3.3, TRUE, 9)\n"
"cats <- rbind(cats, newRow)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:160
msgid ""
"~~~\n"
"Warning in `[<-.factor`(`*tmp*`, ri, value = \"tortoiseshell\"): invalid\n"
"factor level, NA generated\n"
"~~~"
msgstr ""
"~~~\n"
"Warning in `[<-.factor`(`*tmp*`, ri, value = \"tortoiseshell\"): invalid\n"
"factor level, NA generated\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:168
msgid "Here is another thing to look out for: in a `factor`, each different value represents what is called a `level`. In our case, the `factor` \"coat\" has 3 levels: \"black\", \"calico\", and \"tabby\". R will only accept values that match one of the levels. If you add a new value, it will become `NA`."
msgstr "ここで、もうひとつ気を付けなければいけないことは、`順序なし因子型（factor）`の中で、それぞれの値に`水準（level）` と呼ばれるものが付されているということです。つまり、この例では、`順序なし因子型`である「coat（毛皮）」には、「black（黒）」、「calico（三毛）」、「tabby（ぶち）」の３つの水準（level） があり、Rは、この水準のいずれかに一致する値でなければ、受け付けないというわけです。新しい値を加えようとすると、それは`NA`になります。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:170
msgid ""
"The warning is telling us that we unsuccessfully added \"tortoiseshell\" to our\n"
"*coat* factor, but 3.3 (a numeric), TRUE (a logical), and 9 (a numeric) were\n"
"successfully added to *weight*, *likes_string*, and *age*, respectively, since\n"
"those variables are not factors. To successfully add a cat with a\n"
"\"tortoiseshell\" *coat*, add \"tortoiseshell\" as a *level* of the factor:"
msgstr ""
"この注意は、順序なし因子型である「coat（毛皮）」に、「tortoiseshell（錆）」をちゃんと加えられなかった\n"
"ことを伝えているのです。しかし、3.3 （数値型）、TRUE（論理型）、9（数値型）については、\n"
"順序なし因子型ではないため、*weight*、*likes_string*、*age*にそれぞれ正しく加えられています。\n"
"「tortoiseshell」の猫について、*coat*をちゃんと加えるために、「tortoiseshell」をこの順序なし因子の*水準（level）*に加えましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:177
msgid ""
"~~~\n"
"levels(cats$coat)\n"
"~~~"
msgstr ""
"~~~\n"
"levels(cats$coat)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:184
msgid ""
"~~~\n"
"[1] \"black\"  \"calico\" \"tabby\" \n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"black\"  \"calico\" \"tabby\" \n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:191
msgid ""
"~~~\n"
"levels(cats$coat) <- c(levels(cats$coat), \"tortoiseshell\")\n"
"cats <- rbind(cats, list(\"tortoiseshell\", 3.3, TRUE, 9))\n"
"~~~"
msgstr ""
"~~~\n"
"levels(cats$coat) <- c(levels(cats$coat), \"tortoiseshell\")\n"
"cats <- rbind(cats, list(\"tortoiseshell\", 3.3, TRUE, 9))\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:197
msgid ""
"Alternatively, we can change a factor into a character vector; we lose the\n"
"handy categories of the factor, but we can subsequently add any word we want to the\n"
"column without babysitting the factor levels:"
msgstr ""
"あるいは、順序なし因子型を文字型のベクトルに変えることもできます。\n"
"すると、順序なし因子型の便利な分類を失いますが、順序なし因子の水準を\n"
"管理する必要なく、列に好きな語句を追加できます："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:202
msgid ""
"~~~\n"
"str(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"str(cats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:209
msgid ""
"~~~\n"
"'data.frame':\t5 obs. of  4 variables:\n"
" $ coat        : Factor w/ 4 levels \"black\",\"calico\",..: 2 1 3 NA 4\n"
" $ weight      : num  2.1 5 3.2 3.3 3.3\n"
" $ likes_string: int  1 0 1 1 1\n"
" $ age         : num  2 3 5 9 9\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t5 obs. of  4 variables:\n"
" $ coat        : Factor w/ 4 levels \"black\",\"calico\",..: 2 1 3 NA 4\n"
" $ weight      : num  2.1 5 3.2 3.3 3.3\n"
" $ likes_string: int  1 0 1 1 1\n"
" $ age         : num  2 3 5 9 9\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:220
msgid ""
"~~~\n"
"cats$coat <- as.character(cats$coat)\n"
"str(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"cats$coat <- as.character(cats$coat)\n"
"str(cats)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:228
msgid ""
"~~~\n"
"'data.frame':\t5 obs. of  4 variables:\n"
" $ coat        : chr  \"calico\" \"black\" \"tabby\" NA ...\n"
" $ weight      : num  2.1 5 3.2 3.3 3.3\n"
" $ likes_string: int  1 0 1 1 1\n"
" $ age         : num  2 3 5 9 9\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t5 obs. of  4 variables:\n"
" $ coat        : chr  \"calico\" \"black\" \"tabby\" NA ...\n"
" $ weight      : num  2.1 5 3.2 3.3 3.3\n"
" $ likes_string: int  1 0 1 1 1\n"
" $ age         : num  2 3 5 9 9\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:238
msgid "> Let's imagine that 1 human year is equivalent to 7 cat years. "
msgstr "> 人の１年は、猫の７年と同じだと想像してみましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:239
msgid "> 1. Create a vector called `human_age` by multiplying `cats$age` by 7."
msgstr "> 1. `cats$age`を７倍にした、`human_age（人の年齢）`というベクトルを作りましょう"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:240
msgid "> 2. Convert `human_age` to a factor."
msgstr "> 2. `human_age`を順序なし因子型に変換しましょう"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:241
msgid "> 3. Convert `human_age` back to a numeric vector using the `as.numeric()` function. Now divide it by 7 to get the original ages back. Explain what happened."
msgstr "> 3. `human_age` を、`as.numeric()` 関数を用いて、数値型に戻しましょう。そして、もともとの年に戻すために７で割りましょう。何が起こったか説明して下さい。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:242
msgid ""
">\n"
"> > ## Solution to Challenge 1\n"
"> > 1. `human_age <- cats$age * 7`\n"
"> > 2. `human_age <- factor(human_age)`. `as.factor(human_age)` works just as well.\n"
"> > 3. `as.numeric(human_age)` yields `1 2 3 4 4` because factors are stored as integers (here, 1:4), each of which is associated with a label (here, 28, 35, 56, and 63). Converting the factor to a numeric vector gives us the underlying integers, not the labels. If we want the original numbers, we need to convert `human_age` to a character vector and then to a numeric vector (why does this work?). This comes up in real life when we accidentally include a character somewhere in a column of a .csv file supposed to only contain numbers, and forget to set `stringsAsFactors=FALSE` when we read in the data."
msgstr ""
">\n"
"> > ## チャレンジ１の解答\n"
"> > 1. `human_age <- cats$age * 7`\n"
"> > 2. `human_age <- factor(human_age)`. `as.factor(human_age)` でもうまくいきます\n"
"> > 3. `as.numeric(human_age)` からは、`1 2 3 4 4` が返ってきます。なぜなら、順序なし文字型は、それぞれが、ラベル（ここでは、28、35、56、63）に紐づけられた整数型（ここでは、1:4）として蓄積されているからです。順序なし文字型を数値型に変換する際は、ラベルの値ではなく、裏にある整数に変換されるのです。もとの数が欲しい場合は、`human_age`を文字ベクトルにしてから、数値ベクトルにする必要があります（なぜこれでうまくいくのでしょう？）。この問題は、csvファイルの中で数だけを持つはずの列のどこかにうっかり文字を入れてしまい、データを読み込むとき`stringsAsFactors=FALSE`を設定し忘れてしまったときなどに起こります。"

# header
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:250
msgid "## Removing rows"
msgstr "## 行の削除"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:252
msgid ""
"We now know how to add rows and columns to our data frame in R—but in our\n"
"first attempt to add a \"tortoiseshell\" cat to the data frame we have accidentally\n"
"added a garbage row:"
msgstr ""
"Rのデータフレームに行列を加える方法は分かりましたが、猫データフレームに\"tortoiseshell\"を加える最初の試みで、\n"
"うっかり不要な行を加えてしまいました。"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:257
msgid ""
"~~~\n"
"cats\n"
"~~~"
msgstr ""
"~~~\n"
"cats\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:264
msgid ""
"~~~\n"
"           coat weight likes_string age\n"
"1        calico    2.1            1   2\n"
"2         black    5.0            0   3\n"
"3         tabby    3.2            1   5\n"
"4          <NA>    3.3            1   9\n"
"5 tortoiseshell    3.3            1   9\n"
"~~~"
msgstr ""
"~~~\n"
"           coat weight likes_string age\n"
"1        calico    2.1            1   2\n"
"2         black    5.0            0   3\n"
"3         tabby    3.2            1   5\n"
"4          <NA>    3.3            1   9\n"
"5 tortoiseshell    3.3            1   9\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:274
msgid "We can ask for a data frame minus this offending row:"
msgstr "この問題の行を除くようにデータフレームに頼みましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:277
msgid ""
"~~~\n"
"cats[-4, ]\n"
"~~~"
msgstr ""
"~~~\n"
"cats[-4, ]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:284
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:308
msgid ""
"~~~\n"
"           coat weight likes_string age\n"
"1        calico    2.1            1   2\n"
"2         black    5.0            0   3\n"
"3         tabby    3.2            1   5\n"
"5 tortoiseshell    3.3            1   9\n"
"~~~"
msgstr ""
"~~~\n"
"           coat weight likes_string age\n"
"1        calico    2.1            1   2\n"
"2         black    5.0            0   3\n"
"3         tabby    3.2            1   5\n"
"5 tortoiseshell    3.3            1   9\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:293
msgid "Notice the comma with nothing after it to indicate that we want to drop the entire fourth row."
msgstr "コンマの後に何もないのは、４番目の行の全部を削除して欲しいということを示している点に留意しましょう。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:295
msgid ""
"Note: we could also remove both new rows at once by putting the row numbers\n"
"inside of a vector: `cats[c(-4,-5), ]`"
msgstr "注意：ベクトルの中に行番号を入れれば、新しく追加した行を両方削除することもできす：`cats[c(-4,-5), ]`"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:298
msgid "Alternatively, we can drop all rows with `NA` values:"
msgstr "または、`NA`の値がある全ての行を除くこともできます："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:301
msgid ""
"~~~\n"
"na.omit(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"na.omit(cats)\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:317
msgid "Let's reassign the output to `cats`, so that our changes will be permanent:"
msgstr "変更した内容を今後も使えるように、この結果を再度`cats` に入れましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:320
msgid ""
"~~~\n"
"cats <- na.omit(cats)\n"
"~~~"
msgstr ""
"~~~\n"
"cats <- na.omit(cats)\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:325
msgid "## Removing columns  "
msgstr "## 列の削除  "

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:327
msgid "We can also remove columns in our data frame. What if we want to remove the column \"age\". We can remove it in two ways, by variable number or by index.  "
msgstr "データフレームから列を削除することもできます。列「age」を削除したい場合、どうすれば削除できるのでしょう。この場合、要素番号か見出しを使う２つの方法があります。"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:330
msgid ""
"~~~\n"
"cats[,-4]\n"
"~~~"
msgstr ""
"~~~\n"
"cats[,-4]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:337
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:359
msgid ""
"~~~\n"
"           coat weight likes_string\n"
"1        calico    2.1            1\n"
"2         black    5.0            0\n"
"3         tabby    3.2            1\n"
"5 tortoiseshell    3.3            1\n"
"~~~"
msgstr ""
"~~~\n"
"           coat weight likes_string\n"
"1        calico    2.1            1\n"
"2         black    5.0            0\n"
"3         tabby    3.2            1\n"
"5 tortoiseshell    3.3            1\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:346
msgid "Notice the comma with nothing before it, indicating we want to keep all of the rows.  "
msgstr "全ての行を持っていたいということを示すため、コンマの前に何も入っていない点に留意しましょう。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:348
msgid "Alternatively, we can drop the column by using the index name.  "
msgstr "または、要素番号の名前を使って列を削除することもできます："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:351
msgid ""
"~~~\n"
"drop <- names(cats) %in% c(\"age\")\n"
"cats[,!drop]\n"
"~~~"
msgstr ""
"~~~\n"
"drop <- names(cats) %in% c(\"age\")\n"
"cats[,!drop]\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:368
msgid "## Appending to a data frame"
msgstr "## データフレームへの追加"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:370
msgid ""
"The key to remember when adding data to a data frame is that *columns are\n"
"vectors and rows are lists.* We can also glue two data frames\n"
"together with `rbind`:"
msgstr ""
"データフレームにデータを加えるときに覚えておくべき重要なことは、*列はベクトルで、行はリスト* であることです。\n"
"２つのデータフレームを `rbind` を使ってくっつけることもできます："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:375
msgid ""
"~~~\n"
"cats <- rbind(cats, cats)\n"
"cats\n"
"~~~"
msgstr ""
"~~~\n"
"cats <- rbind(cats, cats)\n"
"cats\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:383
msgid ""
"~~~\n"
"            coat weight likes_string age\n"
"1         calico    2.1            1   2\n"
"2          black    5.0            0   3\n"
"3          tabby    3.2            1   5\n"
"5  tortoiseshell    3.3            1   9\n"
"11        calico    2.1            1   2\n"
"21         black    5.0            0   3\n"
"31         tabby    3.2            1   5\n"
"51 tortoiseshell    3.3            1   9\n"
"~~~"
msgstr ""
"~~~\n"
"            coat weight likes_string age\n"
"1         calico    2.1            1   2\n"
"2          black    5.0            0   3\n"
"3          tabby    3.2            1   5\n"
"5  tortoiseshell    3.3            1   9\n"
"11        calico    2.1            1   2\n"
"21         black    5.0            0   3\n"
"31         tabby    3.2            1   5\n"
"51 tortoiseshell    3.3            1   9\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:395
msgid ""
"But now the row names are unnecessarily complicated. We can remove the rownames,\n"
"and R will automatically re-name them sequentially:"
msgstr "しかし、いまや行の名前は必要以上に複雑です。この列名は削除することができます。削除すると、Rは自動的に連続する名称をつけます。"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:399
msgid ""
"~~~\n"
"rownames(cats) <- NULL\n"
"cats\n"
"~~~"
msgstr ""
"~~~\n"
"rownames(cats) <- NULL\n"
"cats\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:407
msgid ""
"~~~\n"
"           coat weight likes_string age\n"
"1        calico    2.1            1   2\n"
"2         black    5.0            0   3\n"
"3         tabby    3.2            1   5\n"
"4 tortoiseshell    3.3            1   9\n"
"5        calico    2.1            1   2\n"
"6         black    5.0            0   3\n"
"7         tabby    3.2            1   5\n"
"8 tortoiseshell    3.3            1   9\n"
"~~~"
msgstr ""
"~~~\n"
"           coat weight likes_string age\n"
"1        calico    2.1            1   2\n"
"2         black    5.0            0   3\n"
"3         tabby    3.2            1   5\n"
"4 tortoiseshell    3.3            1   9\n"
"5        calico    2.1            1   2\n"
"6         black    5.0            0   3\n"
"7         tabby    3.2            1   5\n"
"8 tortoiseshell    3.3            1   9\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:421
msgid ""
">\n"
"> You can create a new data frame right from within R with the following syntax:\n"
"> \n"
"> ~~~\n"
"> df <- data.frame(id = c(\"a\", \"b\", \"c\"),\n"
">                  x = 1:3,\n"
">                  y = c(TRUE, TRUE, FALSE),\n"
">                  stringsAsFactors = FALSE)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> Make a data frame that holds the following information for yourself:\n"
">\n"
"> - first name\n"
"> - last name\n"
"> - lucky number\n"
">\n"
"> Then use `rbind` to add an entry for the people sitting beside you.\n"
"> Finally, use `cbind` to add a column with each person's answer to the question, \"Is it time for coffee break?\"\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> > \n"
"> > ~~~\n"
"> > df <- data.frame(first = c(\"Grace\"),\n"
"> >                  last = c(\"Hopper\"),\n"
"> >                  lucky_number = c(0),\n"
"> >                  stringsAsFactors = FALSE)\n"
"> > df <- rbind(df, list(\"Marie\", \"Curie\", 238) )\n"
"> > df <- cbind(df, coffeetime = c(TRUE,TRUE))\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 新しいデータフレームを、以下の構文で、Rで正しく作成できます：\n"
"> \n"
"> ~~~\n"
"> df <- data.frame(id = c(\"a\", \"b\", \"c\"),\n"
">                  x = 1:3,\n"
">                  y = c(TRUE, TRUE, FALSE),\n"
">                  stringsAsFactors = FALSE)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> 自分で、以下の情報を持つデータフレームを作ってみましょう：\n"
">\n"
"> - first name\n"
"> - last name\n"
"> - lucky number\n"
">\n"
"> そして `rbind` を使って、隣に座っている人の入力したものを加えましょう\n"
"> 最後に `cbind` を使って、「コーヒーブレイクの時間ですか？」という質問への各自の回答を加えましょう\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> > \n"
"> > ~~~\n"
"> > df <- data.frame(first = c(\"Grace\"),\n"
"> >                  last = c(\"Hopper\"),\n"
"> >                  lucky_number = c(0),\n"
"> >                  stringsAsFactors = FALSE)\n"
"> > df <- rbind(df, list(\"Marie\", \"Curie\", 238) )\n"
"> > df <- cbind(df, coffeetime = c(TRUE,TRUE))\n"
"> > ~~~\n"
"> > {: .language-r}"

# header
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:454
msgid "## Realistic example"
msgstr "## 現実的な例"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:455
msgid ""
"So far, you have seen the basics of manipulating data frames with our cat data;\n"
"now let's use those skills to digest a more realistic dataset. Let's read in the\n"
"`gapminder` dataset that we downloaded previously:"
msgstr ""
"これまで、猫のデータフレームで基本的なデータ操作を見てきました。\n"
"ここからは、もっと現実的なデータセットで学んだスキルを試してみましょう。\n"
"前にダウンロードした `gapminder` のデータセットを読み込みましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:460
msgid ""
"~~~\n"
"gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:465
msgid "> ## Miscellaneous Tips"
msgstr "> ## いろいろなヒント"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:466
msgid ""
">\n"
"> * Another type of file you might encounter are tab-separated value files (.tsv). To specify a tab as a separator, use `\"\\\\t\"` or `read.delim()`.\n"
">\n"
"> * Files can also be downloaded directly from the Internet into a local\n"
"> folder of your choice onto your computer using the `download.file` function.\n"
"> The `read.csv` function can then be executed to read the downloaded file from the download location, for example,\n"
"> \n"
"> ~~~\n"
"> download.file(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\", destfile = \"data/gapminder_data.csv\")\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * Alternatively, you can also read in files directly into R from the Internet by replacing the file paths with a web address in `read.csv`. One should note that in doing this no local copy of the csv file is first saved onto your computer. For example,\n"
"> \n"
"> ~~~\n"
"> gapminder <- read.csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * You can read directly from excel spreadsheets without\n"
"> converting them to plain text first by using the [readxl](https://cran.r-project.org/web/packages/readxl/index.html) package."
msgstr ""
">\n"
"> * もう一つの遭遇するかもしれないファイルの種類は、タブで分けられた値のファイル（.tsv）です。タブを値を分けるものとして指定するためには、`\"\\\\t\"` または`read.delim()`を使いましょう。\n"
">\n"
"> * ファイルは、`download.file` 関数を使って、インターネットから直接、自分のコンピューターの\n"
"> お好みのローカルフォルダへダウンロードすることもできます。\n"
"> `read.csv` 関数は、ダウンロードされたファイルをダウンロードされた場所から読み込む形で実行されます。例えば、\n"
"> \n"
"> ~~~\n"
"> download.file(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\", destfile = \"data/gapminder_data.csv\")\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * または、`read.csv` のファイルパスをウェブアドレスに置き換えることで、インターネットからRへ直接読み込むこともできます。こうすると、csvファイルのローカルコピーが、最初に自分のコンピューターに保存されないことに留意する必要があります。例えば、\n"
"> \n"
"> ~~~\n"
"> gapminder <- read.csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * エクセルのシートからテキスト形式に変換することなく、直接読み込むことも、\n"
"> [readxl](https://cran.r-project.org/web/packages/readxl/index.html) パッケージで可能です。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:490
msgid ""
"Let's investigate gapminder a bit; the first thing we should always do is check\n"
"out what the data looks like with `str`:"
msgstr ""
"gapminderを少し見てみましょう。いつも、まずしなければいけないことは、\n"
"データがどうなっているかを`str`で見てみることです："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:494
#: r-novice-gapminder/_episodes/13-dplyr.md:188
#: r-novice-gapminder/_episodes/14-tidyr.md:70
msgid ""
"~~~\n"
"str(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"str(gapminder)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:501
#: r-novice-gapminder/_episodes/13-dplyr.md:195
msgid ""
"~~~\n"
"'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:512
msgid "We can also examine individual columns of the data frame with our `typeof` function:"
msgstr "データフレームのそれぞれの列を `typeof` 関数で調べることもできます："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:515
msgid ""
"~~~\n"
"typeof(gapminder$year)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(gapminder$year)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:529
msgid ""
"~~~\n"
"typeof(gapminder$country)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(gapminder$country)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:543
msgid ""
"~~~\n"
"str(gapminder$country)\n"
"~~~"
msgstr ""
"~~~\n"
"str(gapminder$country)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:550
msgid ""
"~~~\n"
" Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n"
"~~~"
msgstr ""
"~~~\n"
" Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:555
msgid ""
"We can also interrogate the data frame for information about its dimensions;\n"
"remembering that `str(gapminder)` said there were 1704 observations of 6\n"
"variables in gapminder, what do you think the following will produce, and why?"
msgstr ""
"データフレームの次元について見てみることもできます。\n"
" `str(gapminder)` が、gapminderには、6変数について1704の観測値があると言っていたことを念頭に置き、\n"
"以下から何が出てくると思いますか？それはなぜですか？"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:560
msgid ""
"~~~\n"
"length(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"length(gapminder)\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:572
msgid ""
"A fair guess would have been to say that the length of a data frame would be the\n"
"number of rows it has (1704), but this is not the case; remember, a data frame\n"
"is a *list of vectors and factors*:"
msgstr ""
"予想としては、データフレームの長さは行数（1704）だと思うものですが、実はそうではありません。\n"
"データフレームは、*ベクトルと順序なし因子型のリストである*ということを思い出しましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:577
msgid ""
"~~~\n"
"typeof(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"typeof(gapminder)\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:589
msgid ""
"When `length` gave us 6, it's because gapminder is built out of a list of 6\n"
"columns. To get the number of rows and columns in our dataset, try:"
msgstr ""
"`length`が、6と返ってくるのは、gapminderは、6つの列のリストから成っているからです。\n"
"データセットで、行と列の数を知るためには、こうしてみましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:593
msgid ""
"~~~\n"
"nrow(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"nrow(gapminder)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:600
msgid ""
"~~~\n"
"[1] 1704\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1704\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:607
msgid ""
"~~~\n"
"ncol(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"ncol(gapminder)\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:619
msgid "Or, both at once:"
msgstr "または、両方を同時に："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:622
#: r-novice-gapminder/_episodes/14-tidyr.md:326
msgid ""
"~~~\n"
"dim(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"dim(gapminder)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:629
#: r-novice-gapminder/_episodes/14-tidyr.md:319
#: r-novice-gapminder/_episodes/14-tidyr.md:333
msgid ""
"~~~\n"
"[1] 1704    6\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1704    6\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:634
msgid ""
"We'll also likely want to know what the titles of all the columns are, so we can\n"
"ask for them later:"
msgstr "全ての列のタイトルを知りたいと思うことも多いと思うので、後で聞いてみましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:638
msgid ""
"~~~\n"
"colnames(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"colnames(gapminder)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:645
#: r-novice-gapminder/_episodes/14-tidyr.md:361
msgid ""
"~~~\n"
"[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:650
msgid ""
"At this stage, it's important to ask ourselves if the structure R is reporting\n"
"matches our intuition or expectations; do the basic data types reported for each\n"
"column make sense? If not, we need to sort any problems out now before they turn\n"
"into bad surprises down the road, using what we've learned about how R\n"
"interprets data, and the importance of *strict consistency* in how we record our\n"
"data."
msgstr ""
"この段階で、Rが伝える構造が自分の直感や予想と合っているかを自問することが大切です。\n"
"それぞれの列の基本的なデータ型は、思った通りのデータ型になってますか？もしなっていないのなら、今後、予想外の事態を引き起こさないように、\n"
"今の時点で、問題を解決しておく必要があります。そのためには、これまでに学んだ、Rがどのようにデータを解釈するか、\n"
"そしてデータを記録する際の*厳格な整合性*の重要性といった知識を活かしましょう。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:657
msgid ""
"Once we're happy that the data types and structures seem reasonable, it's time\n"
"to start digging into our data proper. Check out the first few lines:"
msgstr ""
"データ型と構造に満足することができたら、データを詳しく見始めることができます。\n"
"最初のいくつかの行を見てみましょう："

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:661
#: r-novice-gapminder/_episodes/14-tidyr.md:410
msgid ""
"~~~\n"
"head(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"head(gapminder)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/05-data-structures-part2.md:668
#: r-novice-gapminder/_episodes/14-tidyr.md:417
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134\n"
"~~~"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:680
msgid ""
">\n"
"> It's good practice to also check the last few lines of your data and some in the middle. How would you do this?\n"
">\n"
"> Searching for ones specifically in the middle isn't too hard but we could simply ask for a few lines at random. How would you code this?\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> > To check the last few lines it's relatively simple as R already has a function for this:\n"
"> > \n"
"> > ~~~\n"
"> > tail(gapminder)\n"
"> > tail(gapminder, n = 15)\n"
"> > ~~~\n"
"> > {: .r}\n"
"> > \n"
"> > What about a few arbitrary rows just for sanity (or insanity depending on your view)?\n"
"> > ## Tip: There are several ways to achieve this.\n"
"> > The solution here presents one form using nested functions. i.e. a function passed as an argument to another function. This might sound like a new concept but you are already using it in fact.\n"
"> > Remember my_dataframe[rows, cols] will print to screen your data frame with the number of rows and columns you asked for (although you might have asked for a range or named columns for example). How would you get the last row if you don't know how many rows your data frame has? R has a function for this. What about getting a (pseudorandom) sample? R also has a function for this.\n"
"> > ~~~\n"
"> > gapminder[sample(nrow(gapminder), 5), ]\n"
"> > ~~~\n"
"> > {: .r}"
msgstr ""
">\n"
"> 最後と中間のいくつかの行を確認するのは良い習慣です。どうしたらこれらの行を見ることができるのでしょう？\n"
">\n"
"> ちょうど真ん中にあるものを探すことは、難しくはありません。しかし、いくつかの行を無作為に尋ねることもできます。これはどうコードにすればよいでしょうか。\n"
">\n"
"> > ## チャレンジ３の解答\n"
"> > 最後のいくつかの行を調べるのは、比較的簡単です。Rには既に関数があるからです：\n"
"> > \n"
"> > ~~~\n"
"> > tail(gapminder)\n"
"> > tail(gapminder, n = 15)\n"
"> > ~~~\n"
"> > {: .r}\n"
"> > \n"
"> > すっきりするために（人によっては、もやっとするかもしれませんが）、いくつかの任意の行については、どうでしょうか。\n"
"> > ## ヒント：これには、いくつか方法があります。\n"
"> > ここでの解答は、関数を入れ子にしたもの（つまり、他の関数に、因数として渡される関数）です。新しい概念のように聞こえるかもしれませんが、実はもう使っています。\n"
"> > my_dataframe[rows, cols] は、（範囲または名前が付いた列を例えば聞いていたかもしれないとしても）質問した行と列の数と共にデータフレームを画面に表示させます。もし、データフレームに、いくつ行があるか知らない場合、どう最後の行を得るのでしょうか。Rには、そのための関数があります。では（疑似ランダム）サンプルを得るにはどうすればよいでしょうか。Rには、そのための関数もあります。\n"
"> > ~~~\n"
"> > gapminder[sample(nrow(gapminder), 5), ]\n"
"> > ~~~\n"
"> > {: .r}"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:706
msgid ""
"To make sure our analysis is reproducible, we should put the code\n"
"into a script file so we can come back to it later."
msgstr "分析を再現可能にするためには、後で使えるようにコードをスクリプトファイルに置く必要があります。"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:710
msgid ""
">\n"
"> Go to file -> new file -> R script, and write an R script\n"
"> to load in the gapminder dataset. Put it in the `scripts/`\n"
"> directory and add it to version control.\n"
">\n"
"> Run the script using the `source` function, using the file path\n"
"> as its argument (or by pressing the \"source\" button in RStudio).\n"
">\n"
"> > ## Solution to Challenge 4\n"
"> > The contents of `scripts/load-gapminder.R`:\n"
"> > \n"
"> > ~~~\n"
"> > download.file(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\", destfile = \"data/gapminder_data.csv\")\n"
"> > gapminder <- read.csv(file = \"data/gapminder_data.csv\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > To run the script and load the data into the `gapminder` variable:\n"
"> > \n"
"> > ~~~\n"
"> > source(file = \"scripts/load-gapminder.R\")\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> まず、file -> new file -> R scriptへ行き、gapminder データセットを\n"
"> 読み込むR scriptを書きましょう。それを、 `scripts/` ディレクトリに置き、\n"
"> バージョン管理に追加しましょう。\n"
">\n"
"> そのスクリプトを `source` 関数を使って走らせましょう。ファイルパスを引数にしましょう\n"
"> （または、RStudioで「source」ボタンを押しましょう).\n"
">\n"
"> > ## チャレンジ４の解答\n"
"> > `scripts/load-gapminder.R`の内容：\n"
"> > \n"
"> > ~~~\n"
"> > download.file(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv\", destfile = \"data/gapminder_data.csv\")\n"
"> > gapminder <- read.csv(file = \"data/gapminder_data.csv\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > `gapminder` 変数にデータを読み込みスクリプトを走らせるためには：\n"
"> > \n"
"> > ~~~\n"
"> > source(file = \"scripts/load-gapminder.R\")\n"
"> > ~~~\n"
"> > {: .language-r}"

#: r-novice-gapminder/_episodes/05-data-structures-part2.md:736
msgid ""
">\n"
"> Read the output of `str(gapminder)` again;\n"
"> this time, use what you've learned about factors, lists and vectors,\n"
"> as well as the output of functions like `colnames` and `dim`\n"
"> to explain what everything that `str` prints out for gapminder means.\n"
"> If there are any parts you can't interpret, discuss with your neighbors!\n"
">\n"
"> > ## Solution to Challenge 5\n"
"> >\n"
"> > The object `gapminder` is a data frame with columns\n"
"> > - `country` and `continent` are factors.\n"
"> > - `year` is an integer vector.\n"
"> > - `pop`, `lifeExp`, and `gdpPercap` are numeric vectors.\n"
"> >"
msgstr ""
">\n"
"> `str(gapminder)` の結果を再び読みましょう。\n"
"> 今度は、順序なし因数、リスト、ベクトルについて学んだことを使いましょう。\n"
"> gapminder が何を意味するか `str` が表示する全てのことを説明するために、\n"
"> `colnames` や `dim` などの出力関数を使いましょう。\n"
"> 理解できないところがあれば、近くの人と話し合ってみましょう。\n"
">\n"
"> > ## チャレンジ５の解答\n"
"> >\n"
"> > `gapminder` というオブジェクトは、データフレームで、\n"
"> > - `country` と `continent` という順序なし因子型、\n"
"> > - `year` という整数型のベクトル、\n"
"> > - `pop`、 `lifeExp`、 `gdpPercap` という数値型のベクトルの行を持っています。\n"
"> >"

# Front Matter
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 06-data-subsetting.md in _episodes_rmd/\n"
"title: Subsetting Data\n"
"teaching: 35\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I work with subsets of data in R?\"\n"
"objectives:\n"
"- \"To be able to subset vectors, factors, matrices, lists, and data frames\"\n"
"- \"To be able to extract individual and multiple elements: by index, by name, using comparison operations\"\n"
"- \"To be able to skip and remove elements from various data structures.\"\n"
"keypoints:\n"
"- \"Indexing in R starts at 1, not 0.\"\n"
"- \"Access individual values by location using `[]`.\"\n"
"- \"Access slices of data using `[low:high]`.\"\n"
"- \"Access arbitrary sets of data using `[c(...)]`.\"\n"
"- \"Use logical operations and logical vectors to access subsets of data.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 06-data-subsetting.md in _episodes_rmd/\n"
"title: データの部分集合化\n"
"teaching: 35\n"
"exercises: 15\n"
"questions:\n"
"- \"データの部分集合化を R で行うにはどのようにすればいいですか?\"\n"
"objectives:\n"
"- \"ベクター、ファクター、マトリックス、リスト、およびデータフレームの部分化が出来るようになりましょう。\"\n"
"- \"インデックス、名前、および比較演算子を使用してデータ内の個々および複数の要素を取り出せるようになりましょう。\"\n"
"- \"様々なデータ構造の要素のスキップや削除が出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"R のインデックスは 0 ではなく 1 から始まる。\"\n"
"- \"`[]` を使用して個々の値にアクセス出来る。\"\n"
"- \"`[下の番号:上の番号]`　を使用してスライスされたデータにアクセス出来る。\"\n"
"- \"`[c(...)]`を使用して任意のデータセットにアクセス出来る。\"\n"
"- \"論理演算や論理ベクターを使用してデータの部分集合にアクセス出来る。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:24
msgid ""
"R has many powerful subset operators. Mastering them will allow you to\n"
"easily perform complex operations on any kind of dataset."
msgstr ""
"Rには便利な部分集合の演算子が多く含まれています。これらをマスターできれば、\n"
"どんなデータセットにも複雑な演算を楽に行えます。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:27
msgid ""
"There are six different ways we can subset any kind of object, and three\n"
"different subsetting operators for the different data structures."
msgstr ""
"オブジェクトを部分集合する方法は６つあり、データ構造を\n"
"部分集合する方法は３つあります。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:30
msgid "Let's start with the workhorse of R: a simple numeric vector."
msgstr "Rの働き頭、数値ベクトルから始めましょう。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:33
msgid ""
"~~~\n"
"x <- c(5.4, 6.2, 7.1, 4.8, 7.5)\n"
"names(x) <- c('a', 'b', 'c', 'd', 'e')\n"
"x\n"
"~~~"
msgstr ""
"~~~\n"
"x <- c(5.4, 6.2, 7.1, 4.8, 7.5)\n"
"names(x) <- c('a', 'b', 'c', 'd', 'e')\n"
"x\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:42
msgid ""
"~~~\n"
"  a   b   c   d   e \n"
"5.4 6.2 7.1 4.8 7.5 \n"
"~~~"
msgstr ""
"~~~\n"
"  a   b   c   d   e \n"
"5.4 6.2 7.1 4.8 7.5 \n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:48
msgid "> ## Atomic vectors"
msgstr "> ## 原子ベクトル"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:49
msgid ""
">\n"
"> In R, simple vectors containing character strings, numbers, or logical values are called *atomic* vectors because they can't be further simplified."
msgstr ""
">\n"
"> Rでは、文字列、数値、論理値を含む単純なベクトルは、*原子（atomic）* ベクトルと呼ばれています。その理由は、原子ベクトルはそれ以上単純化できないからです。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:53
msgid ""
"So now that we've created a dummy vector to play with, how do we get at its\n"
"contents?"
msgstr "練習用のベクトルを作ることができたのですが、どうやってベクトルの中身を使うのでしょう？"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:56
msgid "## Accessing elements using their indices"
msgstr "## 要素番号で要素を使う"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:58
msgid ""
"To extract elements of a vector we can give their corresponding index, starting\n"
"from one:"
msgstr "ベクトルの要素を抽出するためには、対応する１から始まる要素番号を使います："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:62
msgid ""
"~~~\n"
"x[1]\n"
"~~~"
msgstr ""
"~~~\n"
"x[1]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:69
#: r-novice-gapminder/_episodes/06-data-subsetting.md:453
msgid ""
"~~~\n"
"  a \n"
"5.4 \n"
"~~~"
msgstr ""
"~~~\n"
"  a \n"
"5.4 \n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:76
msgid ""
"~~~\n"
"x[4]\n"
"~~~"
msgstr ""
"~~~\n"
"x[4]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:83
msgid ""
"~~~\n"
"  d \n"
"4.8 \n"
"~~~"
msgstr ""
"~~~\n"
"  d \n"
"4.8 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:89
msgid ""
"It may look different, but the square brackets operator is a function. For vectors\n"
"(and matrices), it means \"get me the nth element\"."
msgstr ""
"違うふうに見えるかもしれませんが、各括弧の演算子は関数です。ベクトル（及び行列）の場合は、\n"
"「n番目の要素をちょうだい」ということを意味しています。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:92
msgid "We can ask for multiple elements at once:"
msgstr "複数の要素を一度に頼むこともできます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:95
msgid ""
"~~~\n"
"x[c(1, 3)]\n"
"~~~"
msgstr ""
"~~~\n"
"x[c(1, 3)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:102
#: r-novice-gapminder/_episodes/06-data-subsetting.md:392
msgid ""
"~~~\n"
"  a   c \n"
"5.4 7.1 \n"
"~~~"
msgstr ""
"~~~\n"
"  a   c \n"
"5.4 7.1 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:108
msgid "Or slices of the vector:"
msgstr "または、ベクトルのスライスを頼むこともできます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:111
msgid ""
"~~~\n"
"x[1:4]\n"
"~~~"
msgstr ""
"~~~\n"
"x[1:4]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:118
msgid ""
"~~~\n"
"  a   b   c   d \n"
"5.4 6.2 7.1 4.8 \n"
"~~~"
msgstr ""
"~~~\n"
"  a   b   c   d \n"
"5.4 6.2 7.1 4.8 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:124
msgid "the `:` operator creates a sequence of numbers from the left element to the right."
msgstr "この `:` 演算子は、左から右の要素の一連番号を作ります。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:126
msgid ""
"~~~\n"
"1:4\n"
"~~~"
msgstr ""
"~~~\n"
"1:4\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:133
#: r-novice-gapminder/_episodes/06-data-subsetting.md:147
msgid ""
"~~~\n"
"[1] 1 2 3 4\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1 2 3 4\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:140
msgid ""
"~~~\n"
"c(1, 2, 3, 4)\n"
"~~~"
msgstr ""
"~~~\n"
"c(1, 2, 3, 4)\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:153
msgid "We can ask for the same element multiple times:"
msgstr "同じ要素を何度も頼むこともできます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:156
msgid ""
"~~~\n"
"x[c(1,1,3)]\n"
"~~~"
msgstr ""
"~~~\n"
"x[c(1,1,3)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:163
msgid ""
"~~~\n"
"  a   a   c \n"
"5.4 5.4 7.1 \n"
"~~~"
msgstr ""
"~~~\n"
"  a   a   c \n"
"5.4 5.4 7.1 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:169
msgid "If we ask for an index beyond the length of the vector, R will return a missing value:"
msgstr "もしベクトルの長さ以上の要素番号を頼んだ場合、Rは欠測値を返します："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:171
msgid ""
"~~~\n"
"x[6]\n"
"~~~"
msgstr ""
"~~~\n"
"x[6]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:178
msgid ""
"~~~\n"
"<NA> \n"
"  NA \n"
"~~~"
msgstr ""
"~~~\n"
"<NA> \n"
"  NA \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:184
msgid "This is a vector of length one containing an `NA`, whose name is also `NA`."
msgstr "これは、 `NA` を含む、`NA` という名前の長さ１のベクトルです。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:186
msgid "If we ask for the 0th element, we get an empty vector:"
msgstr "もし、0番目の要素を頼んだ場合、空ベクトルが返ってきます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:189
msgid ""
"~~~\n"
"x[0]\n"
"~~~"
msgstr ""
"~~~\n"
"x[0]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:196
msgid ""
"~~~\n"
"named numeric(0)\n"
"~~~"
msgstr ""
"~~~\n"
"named numeric(0)\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:201
msgid "> ## Vector numbering in R starts at 1"
msgstr "> ## Rのベクトル番号は、１から始まる"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:202
msgid ""
">\n"
"> In many programming languages (C and Python, for example), the first\n"
"> element of a vector has an index of 0. In R, the first element is 1."
msgstr ""
">\n"
"> 多くのプログラミング言語（例えば、C、Python）では、ベクトルの最初の\n"
"> 要素の要素番号は０です。Rでは、最初の要素番号は１です。"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:207
msgid "## Skipping and removing elements"
msgstr "## 要素を飛ばす、削除する"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:209
msgid ""
"If we use a negative number as the index of a vector, R will return\n"
"every element *except* for the one specified:"
msgstr ""
"もし、負の番号をベクトルの要素番号として使った場合、Rは指定された番号\n"
" *以外の* 全ての要素を返します："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:213
msgid ""
"~~~\n"
"x[-2]\n"
"~~~"
msgstr ""
"~~~\n"
"x[-2]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:220
msgid ""
"~~~\n"
"  a   c   d   e \n"
"5.4 7.1 4.8 7.5 \n"
"~~~"
msgstr ""
"~~~\n"
"  a   c   d   e \n"
"5.4 7.1 4.8 7.5 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:226
msgid "We can skip multiple elements:"
msgstr "複数の要素を飛ばすこともできます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:229
msgid ""
"~~~\n"
"x[c(-1, -5)]  # or x[-c(1,5)]\n"
"~~~"
msgstr ""
"~~~\n"
"x[c(-1, -5)]  # or x[-c(1,5)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:236
msgid ""
"~~~\n"
"  b   c   d \n"
"6.2 7.1 4.8 \n"
"~~~"
msgstr ""
"~~~\n"
"  b   c   d \n"
"6.2 7.1 4.8 \n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:242
msgid "> ## Tip: Order of operations"
msgstr "> ## ヒント：演算の順番"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:243
msgid ""
">\n"
"> A common trip up for novices occurs when trying to skip\n"
"> slices of a vector. It's natural to try to negate a\n"
"> sequence like so:\n"
">\n"
"> \n"
"> ~~~\n"
"> x[-1:3]\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> This gives a somewhat cryptic error:\n"
">\n"
"> \n"
"> ~~~\n"
"> Error in x[-1:3]: only 0's may be mixed with negative subscripts\n"
"> ~~~"
msgstr ""
">\n"
"> 初心者によく見られるのが、ベクトルのスライスを飛ばそうとする時に起こる間違いです。\n"
"> 数列をベクトルから削除しようとする場合、次のようにして削除しようとします：\n"
">\n"
"> \n"
"> ~~~\n"
"> x[-1:3]\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> すると、なんだか複雑なエラーが返ってきます：\n"
">\n"
"> \n"
"> ~~~\n"
"> Error in x[-1:3]: only 0's may be mixed with negative subscripts\n"
"> ~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/06-data-subsetting.md:260
msgid "> {: .error}"
msgstr "> {: .error}"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:261
msgid ""
">\n"
"> But remember the order of operations. `:` is really a function.\n"
"> It takes its first argument as -1, and its second as 3,\n"
"> so generates the sequence of numbers: `c(-1, 0, 1, 2, 3)`.\n"
">\n"
"> The correct solution is to wrap that function call in brackets, so\n"
"> that the `-` operator applies to the result:\n"
">\n"
"> \n"
"> ~~~\n"
"> x[-(1:3)]\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">   d   e \n"
"> 4.8 7.5 \n"
"> ~~~"
msgstr ""
">\n"
"> 演算の順番を思い出してみましょう。`:` は、実際には関数なのです。\n"
"> 最初の引数を-1、次の引数を3として認識し、次のような数列を生成します。\n"
"> `c(-1, 0, 1, 2, 3)`\n"
">\n"
"> 正解は、関数を呼ぶ部分を括弧で囲むことです。\n"
"> そうすると関数の結果全てに`-` の演算子が適応されます：\n"
">\n"
"> \n"
"> ~~~\n"
"> x[-(1:3)]\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">   d   e \n"
"> 4.8 7.5 \n"
"> ~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:285
msgid ""
"To remove elements from a vector, we need to assign the result back\n"
"into the variable:"
msgstr "ベクトルから要素を削除するには、結果を変数に戻してやる必要があります。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:289
msgid ""
"~~~\n"
"x <- x[-4]\n"
"x\n"
"~~~"
msgstr ""
"~~~\n"
"x <- x[-4]\n"
"x\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:297
msgid ""
"~~~\n"
"  a   b   c   e \n"
"5.4 6.2 7.1 7.5 \n"
"~~~"
msgstr ""
"~~~\n"
"  a   b   c   e \n"
"5.4 6.2 7.1 7.5 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:304
#: r-novice-gapminder/_episodes/06-data-subsetting.md:489
msgid ""
">\n"
"> Given the following code:\n"
">\n"
"> \n"
"> ~~~\n"
"> x <- c(5.4, 6.2, 7.1, 4.8, 7.5)\n"
"> names(x) <- c('a', 'b', 'c', 'd', 'e')\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">   a   b   c   d   e \n"
"> 5.4 6.2 7.1 4.8 7.5 \n"
"> ~~~"
msgstr ""
">\n"
"> 以下のコードがあるとします：\n"
">\n"
"> \n"
"> ~~~\n"
"> x <- c(5.4, 6.2, 7.1, 4.8, 7.5)\n"
"> names(x) <- c('a', 'b', 'c', 'd', 'e')\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">   a   b   c   d   e \n"
"> 5.4 6.2 7.1 4.8 7.5 \n"
"> ~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:322
msgid ""
">\n"
"> Come up with at least 2 different commands that will produce the following output:\n"
">\n"
"> \n"
"> ~~~\n"
">   b   c   d \n"
"> 6.2 7.1 4.8 \n"
"> ~~~"
msgstr ""
">\n"
"> 以下の出力を得るために、少なくとも２つの異なるコマンドを考えてください：\n"
">\n"
"> \n"
"> ~~~\n"
">   b   c   d \n"
"> 6.2 7.1 4.8 \n"
"> ~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:331
msgid ""
">\n"
"> After you find 2 different commands, compare notes with your neighbour. Did you have different strategies?\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x[2:4]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[-c(1,5)]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[c(2,3,4)]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >"
msgstr ""
">\n"
"> ２つの異なるコマンドを考えた後、隣の人と結果を比べましょう。自分とは違う案でしたか？\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x[2:4]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[-c(1,5)]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[c(2,3,4)]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:379
msgid "## Subsetting by name"
msgstr "## 名前で部分集合を作る"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:381
msgid "We can extract elements by using their name, instead of extracting by index:"
msgstr "要素番号で抜き出す代わりに、名前で要素を抽出することもできます。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:384
msgid ""
"~~~\n"
"x <- c(a=5.4, b=6.2, c=7.1, d=4.8, e=7.5) # we can name a vector 'on the fly'\n"
"x[c(\"a\", \"c\")]\n"
"~~~"
msgstr ""
"~~~\n"
"x <- c(a=5.4, b=6.2, c=7.1, d=4.8, e=7.5) # ベクトルを'その場で'名づけることができます\n"
"x[c(\"a\", \"c\")]\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:398
msgid ""
"This is usually a much more reliable way to subset objects: the\n"
"position of various elements can often change when chaining together\n"
"subsetting operations, but the names will always remain the same!"
msgstr ""
"オブジェクトの部分集合を作るには、この方法の方が確実です：要素の場所は、\n"
"部分集合の演算子を繋いで使うことでよく変わるのですが、\n"
"名前は絶対に変わりません。"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:402
msgid "## Subsetting through other logical operations"
msgstr "## 他の論理演算子を使って部分集合を作る"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:404
msgid "We can also use any logical vector to subset:"
msgstr "どんな論理ベクトルでも部分集合を作ることができます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:407
msgid ""
"~~~\n"
"x[c(FALSE, FALSE, TRUE, FALSE, TRUE)]\n"
"~~~"
msgstr ""
"~~~\n"
"x[c(FALSE, FALSE, TRUE, FALSE, TRUE)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:414
#: r-novice-gapminder/_episodes/06-data-subsetting.md:432
msgid ""
"~~~\n"
"  c   e \n"
"7.1 7.5 \n"
"~~~"
msgstr ""
"~~~\n"
"  c   e \n"
"7.1 7.5 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:420
msgid ""
"Since comparison operators (e.g. `>`, `<`, `==`) evaluate to logical vectors, we can also\n"
"use them to succinctly subset vectors: the following statement gives\n"
"the same result as the previous one."
msgstr ""
"比較演算子（例えば、 `>`、`<`、 `==`）は、その結果が論理ベクトルになるので、\n"
"簡潔にベクトルの部分集合を作ることができます。\n"
"つまり、以下の宣言は、前と同じ結果を返します。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:425
msgid ""
"~~~\n"
"x[x > 7]\n"
"~~~"
msgstr ""
"~~~\n"
"x[x > 7]\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:438
msgid ""
"Breaking it down, this statement first evaluates `x>7`, generating\n"
"a logical vector `c(FALSE, FALSE, TRUE, FALSE, TRUE)`, and then\n"
"selects the elements of `x` corresponding to the `TRUE` values."
msgstr ""
"分割すると、この宣言は最初に `x>7` を計算し、論理ベクトル\n"
"`c(FALSE, FALSE, TRUE, FALSE, TRUE)` を作ります。それから、\n"
"`TRUE` の値に対応する要素を `x` から選択しています。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:442
msgid ""
"We can use `==` to mimic the previous method of indexing by name\n"
"(remember you have to use `==` rather than `=` for comparisons):"
msgstr ""
"名前で特定するという既出の方法を真似するため、 `==` を使うこともできます。\n"
"（比較には、 `=` ではなく、 `==` を使わないといけません）："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:446
msgid ""
"~~~\n"
"x[names(x) == \"a\"]\n"
"~~~"
msgstr ""
"~~~\n"
"x[names(x) == \"a\"]\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:459
msgid "> ## Tip: Combining logical conditions"
msgstr "> ## ヒント：論理条件を組み合わせる"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:460
msgid ""
">\n"
"> We often want to combine multiple logical\n"
"> criteria. For example, we might want to find all the countries that are\n"
"> located in Asia **or** Europe **and** have life expectancies within a certain\n"
"> range. Several operations for combining logical vectors exist in R:\n"
">\n"
">  * `&`, the \"logical AND\" operator: returns `TRUE` if both the left and right\n"
">    are `TRUE`.\n"
">  * `|`, the \"logical OR\" operator: returns `TRUE`, if either the left or right\n"
">    (or both) are `TRUE`.\n"
">\n"
"> You may sometimes see `&&` and `||` instead of `&` and `|`. These two-character operators\n"
"> only look at the first element of each vector and ignore the\n"
"> remaining elements. In general you should not use the two-character\n"
"> operators in data analysis; save them\n"
"> for programming, i.e. deciding whether to execute a statement.\n"
">\n"
">  * `!`, the \"logical NOT\" operator: converts `TRUE` to `FALSE` and `FALSE` to\n"
">    `TRUE`. It can negate a single logical condition (eg `!TRUE` becomes\n"
">    `FALSE`), or a whole vector of conditions(eg `!c(TRUE, FALSE)` becomes\n"
">    `c(FALSE, TRUE)`).\n"
">\n"
"> Additionally, you can compare the elements within a single vector using the\n"
"> `all` function (which returns `TRUE` if every element of the vector is `TRUE`)\n"
"> and the `any` function (which returns `TRUE` if one or more elements of the\n"
"> vector are `TRUE`)."
msgstr ""
">\n"
"> 複数の論理基準を組み合わせたい場合はよくあります。\n"
"> 例えば、アジア**または** ヨーロッパに位置し、**なおかつ** ある一定の範囲の平均余命\n"
"> の国を見つけたいとします。\n"
"> Rにが論理ベクトルを複数組み合わせる演算子があります：\n"
">\n"
">  * `&`、「論理積」演算子：もし左と右の両方が `TRUE` であれば、`TRUE`\n"
">  * `|`、「論理和」 演算子：もし左と右のどちらか（または両方）が `TRUE` であれば、`TRUE`\n"
">\n"
"> `&` 及び `|` の代わりに、 `&&` 及び `||` を見かけることもあるでしょう。\n"
"> この二重になっている演算子は、それぞれのベクトルの最初の要素だけを見て、残りを無視するものです。\n"
"> 一般的に、この二重になっている演算子はデータ分析では使わずに、\n"
"> プログラミングの際に（つまり、ある宣言を実行するかどうかを決める際に）\n"
"> 使うことをおすすめします。\n"
">\n"
">  * `!`、「論理否定」演算子：`TRUE` を `FALSE` に、 `FALSE` を`TRUE`に変換します。\n"
">    否定できるのは、一つの論理条件（例 `!TRUE` が `FALSE`へ）\n"
">    または、条件のベクトル全体（例 `!c(TRUE, FALSE)` が、\n"
">    `c(FALSE, TRUE)` へ）です。\n"
">\n"
"> 加えて、`all` 関数（ベクトルの全ての要素が `TRUE` である場合、`TRUE` を返す)及び\n"
"> `any` 関数（ベクトルのうち最低１つ、`TRUE` がある場合、`TRUE`を返す)を使って\n"
"> ひとつのベクトルの中にある要素を比較することもできます。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:507
msgid ""
">\n"
"> Write a subsetting command to return the values in x that are greater than 4 and less than 7.\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x_subset <- x[x<7 & x>4]\n"
"> > print(x_subset)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   a   b   d \n"
"> > 5.4 6.2 4.8 \n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> 4よりも大きく7より小さいxの値を返す部分集合を作るコマンドを書きましょう。\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x_subset <- x[x<7 & x>4]\n"
"> > print(x_subset)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   a   b   d \n"
"> > 5.4 6.2 4.8 \n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:530
msgid "> ## Tip: Non-unique names"
msgstr "> ## ヒント：同じ名前がある場合"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:531
msgid ""
">\n"
"> You should be aware that it is possible for multiple elements in a\n"
"> vector to have the same name. (For a data frame, columns can have\n"
"> the same name --- although R tries to avoid this --- but row names\n"
"> must be unique.) Consider these examples:\n"
">\n"
">\n"
">~~~\n"
"> x <- 1:3\n"
"> x\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">[1] 1 2 3\n"
">~~~"
msgstr ""
">\n"
"> ベクトルの中の要素に、同じ名前を持つものがあるかもしれないということを知っておく必要があります。\n"
"> （データフレームでは、--- Rは避けようとしますが --- 列に同じ名前を付けることもできます。\n"
"> 一方で、行の名前は全て違う必要があります）\n"
"> これらの例を考えてみましょう：\n"
">\n"
">\n"
">~~~\n"
"> x <- 1:3\n"
"> x\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">[1] 1 2 3\n"
">~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/06-data-subsetting.md:549
#: r-novice-gapminder/_episodes/06-data-subsetting.md:565
#: r-novice-gapminder/_episodes/06-data-subsetting.md:580
#: r-novice-gapminder/_episodes/06-data-subsetting.md:595
msgid ">{: .output}"
msgstr ">{: .output}"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:550
msgid ""
">\n"
">\n"
">\n"
">~~~\n"
"> names(x) <- c('a', 'a', 'a')\n"
"> x\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">a a a \n"
">1 2 3 \n"
">~~~"
msgstr ""
">\n"
">\n"
">\n"
">~~~\n"
"> names(x) <- c('a', 'a', 'a')\n"
"> x\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">a a a \n"
">1 2 3 \n"
">~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:566
msgid ""
">\n"
">\n"
">\n"
">~~~\n"
"> x['a']  # only returns first value\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">a \n"
">1 \n"
">~~~"
msgstr ""
">\n"
">\n"
">\n"
">~~~\n"
"> x['a']  # 最初の値しか返さない\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">a \n"
">1 \n"
">~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:581
msgid ""
">\n"
">\n"
">\n"
">~~~\n"
"> x[names(x) == 'a']  # returns all three values\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">a a a \n"
">1 2 3 \n"
">~~~"
msgstr ""
">\n"
">\n"
">\n"
">~~~\n"
"> x[names(x) == 'a']  # ３つ全ての値を返す\n"
">~~~\n"
">{: .language-r}\n"
">\n"
">\n"
">\n"
">~~~\n"
">a a a \n"
">1 2 3 \n"
">~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:598
msgid "> ## Tip: Getting help for operators"
msgstr "> ## ヒント：演算子についてのヘルプを見る"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:599
msgid ""
">\n"
"> Remember you can search for help on operators by wrapping them in quotes:\n"
"> `help(\"%in%\")` or `?\"%in%\"`.\n"
">"
msgstr ""
">\n"
"> 演算子を引用符で囲むことで、演算子についてのヘルプを検索できることを覚えておきましょう：\n"
"> `help(\"%in%\")` または `?\"%in%\"`.\n"
">"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:605
msgid "## Skipping named elements"
msgstr "## 名前のある要素を飛ばす"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:607
msgid "Skipping or removing named elements is a little harder. If we try to skip one named element by negating the string, R complains (slightly obscurely) that it doesn't know how to take the negative of a string:"
msgstr "名前のある要素を飛ばしたり削除したりすることは少しだけ難しくなります。もし、ある文字列にマイナス記号を付けて飛ばそうとすると、Rは文字列にマイナス記号を付ける方法を知らないと（若干控えめに）抗議するでしょう："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:610
msgid ""
"~~~\n"
"x <- c(a=5.4, b=6.2, c=7.1, d=4.8, e=7.5) # we start again by naming a vector 'on the fly'\n"
"x[-\"a\"]\n"
"~~~"
msgstr ""
"~~~\n"
"x <- c(a=5.4, b=6.2, c=7.1, d=4.8, e=7.5) # まず、ベクトルにその場で名前を付けることから始めます\n"
"x[-\"a\"]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:618
msgid ""
"~~~\n"
"Error in -\"a\": invalid argument to unary operator\n"
"~~~"
msgstr ""
"~~~\n"
"Error in -\"a\": invalid argument to unary operator\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:623
msgid "However, we can use the `!=` (not-equals) operator to construct a logical vector that will do what we want:"
msgstr "でも、`!=` （不等号）演算子を使えば、やってもらいたかったことをしてくれる論理ベクトルが作れます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:626
msgid ""
"~~~\n"
"x[names(x) != \"a\"]\n"
"~~~"
msgstr ""
"~~~\n"
"x[names(x) != \"a\"]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:633
#: r-novice-gapminder/_episodes/06-data-subsetting.md:657
msgid ""
"~~~\n"
"  b   c   d   e \n"
"6.2 7.1 4.8 7.5 \n"
"~~~"
msgstr ""
"~~~\n"
"  b   c   d   e \n"
"6.2 7.1 4.8 7.5 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:639
msgid "Skipping multiple named indices is a little bit harder still. Suppose we want to drop the `\"a\"` and `\"c\"` elements, so we try this:"
msgstr "複数の名前のある要素番号を飛ばすことは、少しですが、さらに難しくなります。`\"a\"` と`\"c\"` の要素を削除したいとき、以下を試したとしましょう："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:642
msgid ""
"~~~\n"
"x[names(x)!=c(\"a\",\"c\")]\n"
"~~~"
msgstr ""
"~~~\n"
"x[names(x)!=c(\"a\",\"c\")]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:649
#: r-novice-gapminder/_episodes/06-data-subsetting.md:679
msgid ""
"~~~\n"
"Warning in names(x) != c(\"a\", \"c\"): longer object length is not a multiple\n"
"of shorter object length\n"
"~~~"
msgstr ""
"~~~\n"
"Warning in names(x) != c(\"a\", \"c\"): longer object length is not a multiple\n"
"of shorter object length\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:663
msgid "R did *something*, but it gave us a warning that we ought to pay attention to - and it apparently *gave us the wrong answer* (the `\"c\"` element is still included in the vector)!"
msgstr "Rは *何か* をしたのですが、私達が注目しなければならない警告も出しました。結果としては、どうやら *間違った回答* が帰ってきたみたいです（`\"c\"` の要素が、ベクトルに含まれています）！"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:665
msgid "So what does `!=` actually do in this case? That's an excellent question."
msgstr "ではいったい、 `!=` は、ここで実際に何をしたのでしょう。これは素晴らしい質問です。"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:667
msgid "### Recycling"
msgstr "### 再利用"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:669
msgid "Let's take a look at the comparison component of this code:"
msgstr "このコードの比較する部分を見てみましょう："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:672
msgid ""
"~~~\n"
"names(x) != c(\"a\", \"c\")\n"
"~~~"
msgstr ""
"~~~\n"
"names(x) != c(\"a\", \"c\")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:687
msgid ""
"~~~\n"
"[1] FALSE  TRUE  TRUE  TRUE  TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] FALSE  TRUE  TRUE  TRUE  TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:692
msgid ""
"Why does R give `FALSE` as the third element of this vector, when `names(x)[3] != \"c\"` is obviously false?\n"
"When you use `!=`, R tries to compare each element\n"
"of the left argument with the corresponding element of its right\n"
"argument. What happens when you compare vectors of different lengths?"
msgstr ""
"Rは、`names(x)[3] != \"c\"` が明らかに間違いであるときに、このベクトルの３番目の要素をなぜ`TRUE` にしたのでしょうか。\n"
"`!=` を使うとき、Rは左側の引数のそれぞれの要素を右側のそれぞれの要素と比較しようとします。\n"
"違う長さのベクトルを比較しようとすると、何が起こるのでしょう？"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:697
msgid "![Inequality testing](../fig/06-rmd-inequality.1.png)"
msgstr "![Inequality testing](../fig/06-rmd-inequality.1.png)"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:699
msgid "When one vector is shorter than the other, it gets *recycled*:"
msgstr "もし、もう一つのベクトルよりも短いベクトルがあったとき、そのベクトルは*再利用されます*："

#: r-novice-gapminder/_episodes/06-data-subsetting.md:701
msgid "![Inequality testing: results of recycling](../fig/06-rmd-inequality.2.png)"
msgstr "![Inequality testing: results of recycling](../fig/06-rmd-inequality.2.png)"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:703
msgid ""
"In this case R **repeats** `c(\"a\", \"c\")` as many times as necessary to match `names(x)`, i.e. we get `c(\"a\",\"c\",\"a\",\"c\",\"a\")`. Since the recycled `\"a\"`\n"
"doesn't match the third element of `names(x)`, the value of `!=` is `TRUE`.\n"
"Because in this case the longer vector length (5) isn't a multiple of the shorter vector length (2), R printed a warning message. If we had been unlucky and `names(x)` had contained six elements, R would *silently* have done the wrong thing (i.e., not what we intended it to do). This recycling rule can can introduce hard-to-find and subtle bugs!"
msgstr ""
"この場合、Rは `c(\"a\", \"c\")` を `names(x)` に合わせるのに必要な分だけ**繰り返します**。つまり、`c(\"a\",\"c\",\"a\",\"c\",\"a\")`となります。\n"
"再利用された`\"a\"` は、 `names(x)` の３番目の要素と一致しないため、 `!=` の値は、`TRUE` なのです。\n"
"この場合、長い方のベクトルの長さ（５）は、短い方のベクトルの長さ（２）と一致しないので、Rは、警告メッセージを出力しました。もしも運悪く`names(x)` が６つの要素を持っていた場合、Rは*警告せずに* 間違った（意図していなかった）ことを行っていたでしょう。この再利用のルールは、見つけるのがとても難しく、とらえがたいバグをもたらすことがあります！"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:707
msgid "The way to get R to do what we really want (match *each* element of the left argument with *all* of the elements of the right argument) it to use the `%in%` operator. The `%in%` operator goes through each element of its left argument, in this case the names of `x`, and asks, \"Does this element occur in the second argument?\". Here, since we want to *exclude* values, we also need a `!` operator to change \"in\" to \"not in\":"
msgstr "Rに本当にやってもらいたいこと（左の引数の *それぞれの* 要素を、右の引数の要素の *全て* にマッチさせること）をしてもらうには、 `%in%` 演算子を使う必要があります。`%in%` 演算子は、左の引数のそれぞれの要素、ここでは `x` の名前にひとつずつ 「この要素は、２番目の引数にあるかな」と尋ねていきます。ここで、値を *除く* ため、「中にある（in）」を「中にない（not in）」に変える `!` 演算子が必要です。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:710
msgid ""
"~~~\n"
"x[! names(x) %in% c(\"a\",\"c\") ]\n"
"~~~"
msgstr ""
"~~~\n"
"x[! names(x) %in% c(\"a\",\"c\") ]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:717
msgid ""
"~~~\n"
"  b   d   e \n"
"6.2 4.8 7.5 \n"
"~~~"
msgstr ""
"~~~\n"
"  b   d   e \n"
"6.2 4.8 7.5 \n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:724
msgid ""
">\n"
"> Selecting elements of a vector that match any of a list of components\n"
"> is a very common data analysis task. For example, the gapminder data set\n"
"> contains `country` and `continent` variables, but no information between\n"
"> these two scales. Suppose we want to pull out information from southeast\n"
"> Asia: how do we set up an operation to produce a logical vector that\n"
"> is `TRUE` for all of the countries in southeast Asia and `FALSE` otherwise?\n"
">\n"
"> Suppose you have these data:\n"
"> \n"
"> ~~~\n"
"> seAsia <- c(\"Myanmar\",\"Thailand\",\"Cambodia\",\"Vietnam\",\"Laos\")\n"
"> ## read in the gapminder data that we downloaded in episode 2\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\", header=TRUE)\n"
"> ## extract the `country` column from a data frame (we'll see this later);\n"
"> ## convert from a factor to a character;\n"
"> ## and get just the non-repeated elements\n"
"> countries <- unique(as.character(gapminder$country))\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> There's a wrong way (using only `==`), which will give you a warning;\n"
"> a clunky way (using the logical operators `==` and `|`); and\n"
"> an elegant way (using `%in%`). See whether you can come up with all three\n"
"> and explain how they (don't) work.\n"
"> \n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > - The **wrong** way to do this problem is `countries==seAsia`. This\n"
"> > gives a warning (`\"In countries == seAsia : longer object length is not a multiple of shorter object length\"`) and the wrong answer (a vector of all\n"
"> > `FALSE` values), because none of the recycled values of `seAsia` happen\n"
"> > to line up correctly with matching values in `country`.\n"
"> > - The **clunky** (but technically correct) way to do this problem is\n"
"> > \n"
"> > ~~~\n"
"> >  (countries==\"Myanmar\" | countries==\"Thailand\" |\n"
"> >  countries==\"Cambodia\" | countries == \"Vietnam\" | countries==\"Laos\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > (or `countries==seAsia[1] | countries==seAsia[2] | ...`). This\n"
"> > gives the correct values, but hopefully you can see how awkward it\n"
"> > is (what if we wanted to select countries from a much longer list?).\n"
"> > - The best way to do this problem is `countries %in% seAsia`, which\n"
"> > is both correct and easy to type (and read)."
msgstr ""
">\n"
"> データ分析をするにあたって、リスト内にある要素をベクトルの中から選択するのは\n"
"> よくあることです。例えば、gapminderのデータセットには、\n"
"> `国（country）` 及び `大陸（continent）` 変数があるけれども、これら２つの目盛りの間\n"
"> をつなぐ情報はありません。例えば東南アジアの情報を引き出したい場合、\n"
"> 全ての東南アジアの国を `TRUE` とし、その他を`FALSE`とする論理ベクトルを作る処理を\n"
"> どのように構築するのでしょう？\n"
">\n"
"> 次のようなデータを持っているとします：\n"
"> \n"
"> ~~~\n"
"> seAsia <- c(\"Myanmar\",\"Thailand\",\"Cambodia\",\"Vietnam\",\"Laos\")\n"
"> ## エピソード２でダウンロードしたgapminderのデータを読み込む\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\", header=TRUE)\n"
"> ## `country` 列をデータフレームから読み込む（これを後で見ます）\n"
"> ## 順序なし因子を文字列へ変換します\n"
"> ## すると、繰り返していない要素だけを得られます\n"
"> countries <- unique(as.character(gapminder$country))\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 警告が出てくる、間違った方法（ `==` のみを使う）、\n"
"> 粗削りな方法（論理演算子 `==` 及び `|` を使う）、\n"
"> 洗練された方法（ `%in%` を使う）があります。\n"
"> これら３つの方法それぞれの例を考え、それぞれがどう動く（動かない）か説明してください。\n"
"> \n"
"> > ## チャレンジ３の解答\n"
"> >\n"
"> > - この問題に対する**誤った** 方法は、`countries==seAsia` です。\n"
"> > これには、警告（`\"In countries == seAsia : longer object length is not a multiple of shorter object length\"`）が出ると共に、\n"
"> > 誤った回答（全てが `FALSE` の値を持つベクトル）をもたらします。なぜなら、`seAsia` の再利用された値のどれも、\n"
"> > `country` の値と正しく一致する並びになっていないからです。\n"
"> > - この問題に対する**粗削りな** （でも技術的には合っている）方法は、\n"
"> > \n"
"> > ~~~\n"
"> >  (countries==\"Myanmar\" | countries==\"Thailand\" |\n"
"> >  countries==\"Cambodia\" | countries == \"Vietnam\" | countries==\"Laos\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > （または `countries==seAsia[1] | countries==seAsia[2] | ...`）。\n"
"> > これは正しい値を返すのですが、この方法がどれだけ不格好であるか理解できれば上出来です\n"
"> > （もっと長いリストから国を選ぶ場合は、この方法だったらどうなっていたでしょう？）。\n"
"> > - この問題に対する一番良い方法は、`countries %in% seAsia` で、\n"
"> > 正しい回答でもあり、タイプする（読む）のも楽です。"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:771
msgid "## Handling special values"
msgstr "## 特別な値を扱う"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:773
msgid ""
"At some point you will encounter functions in R that cannot handle missing, infinite,\n"
"or undefined data."
msgstr "ある時点で、欠測値、無限値、未定義のデータを扱えないRの関数に出会うことでしょう。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:776
msgid "There are a number of special functions you can use to filter out this data:"
msgstr "データをフィルターするために使える特別な関数がいくつかあります："

# unordered list
#: r-novice-gapminder/_episodes/06-data-subsetting.md:778
msgid " * `is.na` will return all positions in a vector, matrix, or data.frame"
msgstr " * `is.na` は、ベクトル、行列、データフレームで、"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:779
msgid ""
"   containing `NA` (or `NaN`)\n"
" * likewise, `is.nan`, and `is.infinite` will do the same for `NaN` and `Inf`.\n"
" * `is.finite` will return all positions in a vector, matrix, or data.frame\n"
"   that do not contain `NA`, `NaN` or `Inf`.\n"
" * `na.omit` will filter out all missing values from a vector"
msgstr ""
"   全ての`NA` （または `NaN` ）を含む位置を返します\n"
" * これと同じことを `NaN` 及び `Inf` にするのが `is.nan` 及び `is.infinite` です\n"
" * `is.finite` は、ベクトル、行列、データフレームで、\n"
"   全ての`NA`, `NaN` または `Inf`を含まない位置を返します\n"
" * `na.omit` は、ベクトルから欠損値をフィルターし、除きます"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:785
msgid "## Factor subsetting"
msgstr "## 順序のない因子の部分集合を作る"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:787
msgid ""
"Now that we've explored the different ways to subset vectors, how\n"
"do we subset the other data structures?"
msgstr ""
"これまで部分集合ベクトルを作る色々な方法をやってみましたが、\n"
"他のデータ構造の部分集合を作るにはどうすればいいでしょう。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:790
msgid "Factor subsetting works the same way as vector subsetting."
msgstr "順序なし因子の部分集合を作る方法は、ベクトルの部分集合を作る方法と同じです。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:793
msgid ""
"~~~\n"
"f <- factor(c(\"a\", \"a\", \"b\", \"c\", \"c\", \"d\"))\n"
"f[f == \"a\"]\n"
"~~~"
msgstr ""
"~~~\n"
"f <- factor(c(\"a\", \"a\", \"b\", \"c\", \"c\", \"d\"))\n"
"f[f == \"a\"]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:801
msgid ""
"~~~\n"
"[1] a a\n"
"Levels: a b c d\n"
"~~~"
msgstr ""
"~~~\n"
"[1] a a\n"
"Levels: a b c d\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:809
msgid ""
"~~~\n"
"f[f %in% c(\"b\", \"c\")]\n"
"~~~"
msgstr ""
"~~~\n"
"f[f %in% c(\"b\", \"c\")]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:816
msgid ""
"~~~\n"
"[1] b c c\n"
"Levels: a b c d\n"
"~~~"
msgstr ""
"~~~\n"
"[1] b c c\n"
"Levels: a b c d\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:824
msgid ""
"~~~\n"
"f[1:3]\n"
"~~~"
msgstr ""
"~~~\n"
"f[1:3]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:831
msgid ""
"~~~\n"
"[1] a a b\n"
"Levels: a b c d\n"
"~~~"
msgstr ""
"~~~\n"
"[1] a a b\n"
"Levels: a b c d\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:837
msgid ""
"Skipping elements will not remove the level\n"
"even if no more of that category exists in the factor:"
msgstr "要素を飛ばし、その順序なし因子に該当カテゴリーが存在しない場合であっても、水準は削除されません："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:841
msgid ""
"~~~\n"
"f[-3]\n"
"~~~"
msgstr ""
"~~~\n"
"f[-3]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:848
msgid ""
"~~~\n"
"[1] a a c c d\n"
"Levels: a b c d\n"
"~~~"
msgstr ""
"~~~\n"
"[1] a a c c d\n"
"Levels: a b c d\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:854
msgid "## Matrix subsetting"
msgstr "## 行列の部分周到を作る"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:856
msgid ""
"Matrices are also subsetted using the `[` function. In this case\n"
"it takes two arguments: the first applying to the rows, the second\n"
"to its columns:"
msgstr ""
"行列も `[` 関数を使うことで部分集合を作ることができます。この場合、\n"
"２つの引数があります。最初の引数は適応する行を、２番目の引数は適応する列を指します："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:861
msgid ""
"~~~\n"
"set.seed(1)\n"
"m <- matrix(rnorm(6*4), ncol=4, nrow=6)\n"
"m[3:4, c(3,1)]\n"
"~~~"
msgstr ""
"~~~\n"
"set.seed(1)\n"
"m <- matrix(rnorm(6*4), ncol=4, nrow=6)\n"
"m[3:4, c(3,1)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:870
msgid ""
"~~~\n"
"            [,1]       [,2]\n"
"[1,]  1.12493092 -0.8356286\n"
"[2,] -0.04493361  1.5952808\n"
"~~~"
msgstr ""
"~~~\n"
"            [,1]       [,2]\n"
"[1,]  1.12493092 -0.8356286\n"
"[2,] -0.04493361  1.5952808\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:877
msgid ""
"You can leave the first or second arguments blank to retrieve all the\n"
"rows or columns respectively:"
msgstr "それぞれ全ての列または行を取ってくるためには、最初または２番目の引数を空のままにしておきましょう："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:881
msgid ""
"~~~\n"
"m[, c(3,4)]\n"
"~~~"
msgstr ""
"~~~\n"
"m[, c(3,4)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:888
msgid ""
"~~~\n"
"            [,1]        [,2]\n"
"[1,] -0.62124058  0.82122120\n"
"[2,] -2.21469989  0.59390132\n"
"[3,]  1.12493092  0.91897737\n"
"[4,] -0.04493361  0.78213630\n"
"[5,] -0.01619026  0.07456498\n"
"[6,]  0.94383621 -1.98935170\n"
"~~~"
msgstr ""
"~~~\n"
"            [,1]        [,2]\n"
"[1,] -0.62124058  0.82122120\n"
"[2,] -2.21469989  0.59390132\n"
"[3,]  1.12493092  0.91897737\n"
"[4,] -0.04493361  0.78213630\n"
"[5,] -0.01619026  0.07456498\n"
"[6,]  0.94383621 -1.98935170\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:899
msgid ""
"If we only access one row or column, R will automatically convert the result\n"
"to a vector:"
msgstr "１つの列または行にアクセスした場合、Rは結果を自動的にベクトルに変換します："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:903
msgid ""
"~~~\n"
"m[3,]\n"
"~~~"
msgstr ""
"~~~\n"
"m[3,]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:910
msgid ""
"~~~\n"
"[1] -0.8356286  0.5757814  1.1249309  0.9189774\n"
"~~~"
msgstr ""
"~~~\n"
"[1] -0.8356286  0.5757814  1.1249309  0.9189774\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:915
msgid ""
"If you want to keep the output as a matrix, you need to specify a *third* argument;\n"
"`drop = FALSE`:"
msgstr ""
"もし、アウトプットを行列のままにしておきたいなら、*３番目の* 因数、\n"
"`drop = FALSE` が必要です："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:919
msgid ""
"~~~\n"
"m[3, , drop=FALSE]\n"
"~~~"
msgstr ""
"~~~\n"
"m[3, , drop=FALSE]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:926
msgid ""
"~~~\n"
"           [,1]      [,2]     [,3]      [,4]\n"
"[1,] -0.8356286 0.5757814 1.124931 0.9189774\n"
"~~~"
msgstr ""
"~~~\n"
"           [,1]      [,2]     [,3]      [,4]\n"
"[1,] -0.8356286 0.5757814 1.124931 0.9189774\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:932
msgid ""
"Unlike vectors, if we try to access a row or column outside of the matrix,\n"
"R will throw an error:"
msgstr "ベクトルと違って、行列の外の行や列にアクセスしようとすると、Rはエラーを返します："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:936
msgid ""
"~~~\n"
"m[, c(3,6)]\n"
"~~~"
msgstr ""
"~~~\n"
"m[, c(3,6)]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:943
msgid ""
"~~~\n"
"Error in m[, c(3, 6)]: subscript out of bounds\n"
"~~~"
msgstr ""
"~~~\n"
"Error in m[, c(3, 6)]: subscript out of bounds\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:948
msgid "> ## Tip: Higher dimensional arrays"
msgstr "> ## ヒント：高次元列"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:949
msgid ""
">\n"
"> when dealing with multi-dimensional arrays, each argument to `[`\n"
"> corresponds to a dimension. For example, a 3D array, the first three\n"
"> arguments correspond to the rows, columns, and depth dimension.\n"
">"
msgstr ""
">\n"
"> 多次元列を扱う際、`[` のそれぞれの引数は、次元に対応しています。 \n"
"> 例えば、3次元列は、最初の３つの引数が、行、列、次元の深さに対応してます。\n"
">"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:956
msgid ""
"Because matrices are vectors, we can\n"
"also subset using only one argument:"
msgstr "行列はベクトルなので、１つの引数だけを使って部分集合を作ることもできます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:960
msgid ""
"~~~\n"
"m[5]\n"
"~~~"
msgstr ""
"~~~\n"
"m[5]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:967
msgid ""
"~~~\n"
"[1] 0.3295078\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0.3295078\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:973
msgid ""
"This usually isn't useful, and often confusing to read. However it is useful to note that matrices\n"
"are laid out in *column-major format* by default. That is the elements of the\n"
"vector are arranged column-wise:"
msgstr ""
"これは、普段使うには役に立たず、読むときにも混乱を招きます。ですが、行列は *列順序（column-major format）* で\n"
"デフォルト配置されるということを覚えておくといいでしょう。つまり、ベクトルの要素は、列にある順番で配置されています。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:978
msgid ""
"~~~\n"
"matrix(1:6, nrow=2, ncol=3)\n"
"~~~"
msgstr ""
"~~~\n"
"matrix(1:6, nrow=2, ncol=3)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:985
msgid ""
"~~~\n"
"     [,1] [,2] [,3]\n"
"[1,]    1    3    5\n"
"[2,]    2    4    6\n"
"~~~"
msgstr ""
"~~~\n"
"     [,1] [,2] [,3]\n"
"[1,]    1    3    5\n"
"[2,]    2    4    6\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:992
msgid "If you wish to populate the matrix by row, use `byrow=TRUE`:"
msgstr "もし、行列を行の順番で埋めていきたい場合は、 `byrow=TRUE` を使います："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:995
msgid ""
"~~~\n"
"matrix(1:6, nrow=2, ncol=3, byrow=TRUE)\n"
"~~~"
msgstr ""
"~~~\n"
"matrix(1:6, nrow=2, ncol=3, byrow=TRUE)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1002
msgid ""
"~~~\n"
"     [,1] [,2] [,3]\n"
"[1,]    1    2    3\n"
"[2,]    4    5    6\n"
"~~~"
msgstr ""
"~~~\n"
"     [,1] [,2] [,3]\n"
"[1,]    1    2    3\n"
"[2,]    4    5    6\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1009
msgid ""
"Matrices can also be subsetted using their rownames and column names\n"
"instead of their row and column indices."
msgstr "行列もまた、行及び列の要素番号の代わりに、名前で部分集合を作ることができます。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1013
msgid ""
">\n"
"> Given the following code:\n"
">\n"
"> \n"
"> ~~~\n"
"> m <- matrix(1:18, nrow=3, ncol=6)\n"
"> print(m)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">      [,1] [,2] [,3] [,4] [,5] [,6]\n"
"> [1,]    1    4    7   10   13   16\n"
"> [2,]    2    5    8   11   14   17\n"
"> [3,]    3    6    9   12   15   18\n"
"> ~~~"
msgstr ""
">\n"
"> 以下のコードがあるとします：\n"
">\n"
"> \n"
"> ~~~\n"
"> m <- matrix(1:18, nrow=3, ncol=6)\n"
"> print(m)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">      [,1] [,2] [,3] [,4] [,5] [,6]\n"
"> [1,]    1    4    7   10   13   16\n"
"> [2,]    2    5    8   11   14   17\n"
"> [3,]    3    6    9   12   15   18\n"
"> ~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1032
msgid ""
">\n"
"> 1. Which of the following commands will extract the values 11 and 14?\n"
">\n"
"> A. `m[2,4,2,5]`\n"
">\n"
"> B. `m[2:5]`\n"
">\n"
"> C. `m[4:5,2]`\n"
">\n"
"> D. `m[2,c(4,5)]`\n"
">\n"
"> > ## Solution to challenge 4\n"
"> >\n"
"> > D"
msgstr ""
">\n"
"> 1. 次のコマンドのうち、11と14を抜き出すことができるコマンドはどれでしょう？\n"
">\n"
"> A. `m[2,4,2,5]`\n"
">\n"
"> B. `m[2:5]`\n"
">\n"
"> C. `m[4:5,2]`\n"
">\n"
"> D. `m[2,c(4,5)]`\n"
">\n"
"> > ## チャレンジ４の解答\n"
"> >\n"
"> > D"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1050
msgid "## List subsetting"
msgstr "## リストの分部集合を作る"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1052
msgid ""
"Now we'll introduce some new subsetting operators. There are three functions\n"
"used to subset lists. We've already seen these when learning about atomic vectors and matrices:  `[`, `[[`, and `$`."
msgstr ""
"ここで新しい部分集合を作る演算子を紹介します。リストの部分集合を作る関数は３つあります。\n"
"原子ベクトルと行列について学んだ時に、既に見たものです： `[` 、 `[[` 、`$`"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1055
msgid ""
"Using `[` will always return a list. If you want to *subset* a list, but not\n"
"*extract* an element, then you will likely use `[`."
msgstr ""
" `[` を使えばいつもリストが返ってきます。リストの *部分集合* を作りたいけれども、\n"
"要素を *抜き出したい* わけではないときは、おそらく `[` を使うことが多いでしょう。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1059
msgid ""
"~~~\n"
"xlist <- list(a = \"Software Carpentry\", b = 1:10, data = head(iris))\n"
"xlist[1]\n"
"~~~"
msgstr ""
"~~~\n"
"xlist <- list(a = \"Software Carpentry\", b = 1:10, data = head(iris))\n"
"xlist[1]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1067
msgid ""
"~~~\n"
"$a\n"
"[1] \"Software Carpentry\"\n"
"~~~"
msgstr ""
"~~~\n"
"$a\n"
"[1] \"Software Carpentry\"\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1073
msgid "This returns a *list with one element*."
msgstr "これは、 *１つの要素を持つリスト* です。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1075
msgid ""
"We can subset elements of a list exactly the same way as atomic\n"
"vectors using `[`. Comparison operations however won't work as\n"
"they're not recursive, they will try to condition on the data structures\n"
"in each element of the list, not the individual elements within those\n"
"data structures."
msgstr ""
"`[` を使って原子ベクトルを作ったのと全く同じ方法で、リストの要素から部分集合を作ることができます。\n"
"しかし、比較処理は反復的ではないため、使えません。比較処理は、リストのそれぞれの要素のデータ構造にある、個々の要素ではなく、\n"
"データ構造に条件付けをしようとするからです。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1082
msgid ""
"~~~\n"
"xlist[1:2]\n"
"~~~"
msgstr ""
"~~~\n"
"xlist[1:2]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1089
msgid ""
"~~~\n"
"$a\n"
"[1] \"Software Carpentry\"\n"
"\n"
"$b\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"~~~"
msgstr ""
"~~~\n"
"$a\n"
"[1] \"Software Carpentry\"\n"
"\n"
"$b\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1098
msgid ""
"To extract individual elements of a list, you need to use the double-square\n"
"bracket function: `[[`."
msgstr "リストの個々の要素を抜き出すためには、二重角括弧 `[[` を使う必要があります："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1102
msgid ""
"~~~\n"
"xlist[[1]]\n"
"~~~"
msgstr ""
"~~~\n"
"xlist[[1]]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1109
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1156
msgid ""
"~~~\n"
"[1] \"Software Carpentry\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"Software Carpentry\"\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1114
msgid "Notice that now the result is a vector, not a list."
msgstr "ここで結果がリストではなく、ベクトルとなっていることに気をつけましょう。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1116
msgid "You can't extract more than one element at once:"
msgstr "１つの要素を同時に抜き出すことはできません："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1119
msgid ""
"~~~\n"
"xlist[[1:2]]\n"
"~~~"
msgstr ""
"~~~\n"
"xlist[[1:2]]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1126
msgid ""
"~~~\n"
"Error in xlist[[1:2]]: subscript out of bounds\n"
"~~~"
msgstr ""
"~~~\n"
"Error in xlist[[1:2]]: subscript out of bounds\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1131
msgid "Nor use it to skip elements:"
msgstr "また、要素を飛ばすこともできません："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1134
msgid ""
"~~~\n"
"xlist[[-1]]\n"
"~~~"
msgstr ""
"~~~\n"
"xlist[[-1]]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1141
msgid ""
"~~~\n"
"Error in xlist[[-1]]: attempt to select more than one element in get1index <real>\n"
"~~~"
msgstr ""
"~~~\n"
"Error in xlist[[-1]]: attempt to select more than one element in get1index <real>\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1146
msgid "But you can use names to both subset and extract elements:"
msgstr "でも両方の部分集合の名前を使って、要素を抽出することはできます："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1149
msgid ""
"~~~\n"
"xlist[[\"a\"]]\n"
"~~~"
msgstr ""
"~~~\n"
"xlist[[\"a\"]]\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1161
msgid "The `$` function is a shorthand way for extracting elements by name:"
msgstr " `$` 関数は、簡単に名前で要素を抽出できるものです。"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1164
msgid ""
"~~~\n"
"xlist$data\n"
"~~~"
msgstr ""
"~~~\n"
"xlist$data\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1171
msgid ""
"~~~\n"
"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n"
"1          5.1         3.5          1.4         0.2  setosa\n"
"2          4.9         3.0          1.4         0.2  setosa\n"
"3          4.7         3.2          1.3         0.2  setosa\n"
"4          4.6         3.1          1.5         0.2  setosa\n"
"5          5.0         3.6          1.4         0.2  setosa\n"
"6          5.4         3.9          1.7         0.4  setosa\n"
"~~~"
msgstr ""
"~~~\n"
"  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n"
"1          5.1         3.5          1.4         0.2  setosa\n"
"2          4.9         3.0          1.4         0.2  setosa\n"
"3          4.7         3.2          1.3         0.2  setosa\n"
"4          4.6         3.1          1.5         0.2  setosa\n"
"5          5.0         3.6          1.4         0.2  setosa\n"
"6          5.4         3.9          1.7         0.4  setosa\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1183
msgid "> Given the following list:"
msgstr "> 以下のリストがあるとします："

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1184
msgid ""
">\n"
"> \n"
"> ~~~\n"
"> xlist <- list(a = \"Software Carpentry\", b = 1:10, data = head(iris))\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> Using your knowledge of both list and vector subsetting, extract the number 2 from xlist.\n"
"> Hint: the number 2 is contained within the \"b\" item in the list.\n"
">\n"
"> > ## Solution to challenge 5\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > xlist$b[2]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 2\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > xlist[[2]][2]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 2\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > xlist[[\"b\"]][2]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 2\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> \n"
"> ~~~\n"
"> xlist <- list(a = \"Software Carpentry\", b = 1:10, data = head(iris))\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> リストとベクトルの部分集合を作る知識を使って、xlistから、数字の2を抜き出してみましょう。\n"
"> ヒント：数字の2は、リスト「b」の中にあります。\n"
">\n"
"> > ## チャレンジ５の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > xlist$b[2]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 2\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > xlist[[2]][2]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 2\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > xlist[[\"b\"]][2]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 2\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1237
msgid "> Given a linear model:"
msgstr "> 以下のような線形モデルあるとします："

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1238
msgid ""
">\n"
"> \n"
"> ~~~\n"
"> mod <- aov(pop ~ lifeExp, data=gapminder)\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> Extract the residual degrees of freedom (hint: `attributes()` will help you)\n"
">\n"
"> > ## Solution to challenge 6\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > attributes(mod) ## `df.residual` is one of the names of `mod`\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > ~~~\n"
"> > mod$df.residual\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> \n"
"> ~~~\n"
"> mod <- aov(pop ~ lifeExp, data=gapminder)\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 残差の自由度を抜き出してみましょう（ヒント： `attributes()` が役立つはずです）\n"
">\n"
"> > ## チャレンジ６の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > attributes(mod) ## `df.residual` は、`mod` の名前のひとつです\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > ~~~\n"
"> > mod$df.residual\n"
"> > ~~~\n"
"> > {: .language-r}"

# header
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1263
msgid "## Data frames"
msgstr "## データフレーム"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1265
msgid ""
"Remember the data frames are lists underneath the hood, so similar rules\n"
"apply. However they are also two dimensional objects:"
msgstr ""
"データフレームの中身は実はリストなので、リストと同じようなルールがあてはまることを覚えておきましょう。\n"
"しかし、データフレームは２次元のオブジェクトでもあります。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1268
msgid ""
"`[` with one argument will act the same way as for lists, where each list\n"
"element corresponds to a column. The resulting object will be a data frame:"
msgstr ""
"1つの引数しかない `[` は、リストと同じような働きがあり、それぞれのリストの要素が列に対応します。\n"
"その結果、返されるオブジェクトはデータフレームになります："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1272
msgid ""
"~~~\n"
"head(gapminder[3])\n"
"~~~"
msgstr ""
"~~~\n"
"head(gapminder[3])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1279
msgid ""
"~~~\n"
"       pop\n"
"1  8425333\n"
"2  9240934\n"
"3 10267083\n"
"4 11537966\n"
"5 13079460\n"
"6 14880372\n"
"~~~"
msgstr ""
"~~~\n"
"       pop\n"
"1  8425333\n"
"2  9240934\n"
"3 10267083\n"
"4 11537966\n"
"5 13079460\n"
"6 14880372\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1290
msgid "Similarly, `[[` will act to extract *a single column*:"
msgstr "同様に、 `[[` は、 *単一の列* を抜き出す働きをするものです："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1293
msgid ""
"~~~\n"
"head(gapminder[[\"lifeExp\"]])\n"
"~~~"
msgstr ""
"~~~\n"
"head(gapminder[[\"lifeExp\"]])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1300
msgid ""
"~~~\n"
"[1] 28.801 30.332 31.997 34.020 36.088 38.438\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 28.801 30.332 31.997 34.020 36.088 38.438\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1305
msgid "And `$` provides a convenient shorthand to extract columns by name:"
msgstr "そして `$` は、簡単に列名で列を抽出できるものです："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1308
msgid ""
"~~~\n"
"head(gapminder$year)\n"
"~~~"
msgstr ""
"~~~\n"
"head(gapminder$year)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1315
msgid ""
"~~~\n"
"[1] 1952 1957 1962 1967 1972 1977\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1952 1957 1962 1967 1972 1977\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1320
msgid "With two arguments, `[` behaves the same way as for matrices:"
msgstr "２つの引数を使えば、 `[` は、行列と同じような働きをします："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1323
msgid ""
"~~~\n"
"gapminder[1:3,]\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder[1:3,]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1330
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1338
msgid ""
"If we subset a single row, the result will be a data frame (because\n"
"the elements are mixed types):"
msgstr ""
"もし、１つの行を部分集合する場合、結果はデータフレームになります\n"
"（理由は、要素には色々なデータ型が混ざっているからです）："

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1342
msgid ""
"~~~\n"
"gapminder[3,]\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder[3,]\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1349
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"~~~"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1355
msgid ""
"But for a single column the result will be a vector (this can\n"
"be changed with the third argument, `drop = FALSE`)."
msgstr ""
"しかし、１つの行についての結果は、ベクトルになります\n"
"（これは、３番目の引数を `drop = FALSE` とすれば変えられます)。"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1359
msgid ""
">\n"
"> Fix each of the following common data frame subsetting errors:\n"
">\n"
"> 1. Extract observations collected for the year 1957\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$year = 1957,]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 2. Extract all columns except 1 through to 4\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[,-1:4]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 3. Extract the rows where the life expectancy is longer the 80 years\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$lifeExp > 80]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 4. Extract the first row, and the fourth and fifth columns\n"
">   (`lifeExp` and `gdpPercap`).\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[1, 4, 5]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 5. Advanced: extract rows that contain information for the years 2002\n"
">    and 2007\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$year == 2002 | 2007,]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> > ## Solution to challenge 7\n"
"> >\n"
"> > Fix each of the following common data frame subsetting errors:\n"
"> >\n"
"> > 1. Extract observations collected for the year 1957\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[gapminder$year = 1957,]\n"
"> >    gapminder[gapminder$year == 1957,]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 2. Extract all columns except 1 through to 4\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[,-1:4]\n"
"> >    gapminder[,-c(1:4)]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 3. Extract the rows where the life expectancy is longer the 80 years\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[gapminder$lifeExp > 80]\n"
"> >    gapminder[gapminder$lifeExp > 80,]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 4. Extract the first row, and the fourth and fifth columns\n"
"> >   (`lifeExp` and `gdpPercap`).\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[1, 4, 5]\n"
"> >    gapminder[1, c(4, 5)]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 5. Advanced: extract rows that contain information for the years 2002\n"
"> >    and 2007\n"
"> >\n"
"> >     \n"
"> >     ~~~\n"
"> >     # gapminder[gapminder$year == 2002 | 2007,]\n"
"> >     gapminder[gapminder$year == 2002 | gapminder$year == 2007,]\n"
"> >     gapminder[gapminder$year %in% c(2002, 2007),]\n"
"> >     ~~~\n"
"> >     {: .language-r}"
msgstr ""
">\n"
"> 以下の一般的なデータフレームの部分集合を作る際のエラーを修正しましょう：\n"
">\n"
"> 1. 1957年に集められた観測値を抜き出す\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$year = 1957,]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 2. 1から4を除く全ての列を抜き出す\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[,-1:4]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 3. 平均余命が80歳以上の行を抜き出す\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$lifeExp > 80]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 4. 最初の行の4番目と5番目の列を抜き出す\n"
">   (`lifeExp` と `gdpPercap`).\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[1, 4, 5]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 5. 上級：2002年と2007年の情報を含む行を抜き出す\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$year == 2002 | 2007,]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> > ## チャレンジ７の解答\n"
"> >\n"
"> > 以下の一般的なデータフレームの部分集合を作る際のエラーを修正しましょう：\n"
"\n"
"> >\n"
"> > 1. 1957年に集められた観測値を抜き出す\n"
"\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[gapminder$year = 1957,]\n"
"> >    gapminder[gapminder$year == 1957,]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 2. 1から4を除く全ての列を抜き出す\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[,-1:4]\n"
"> >    gapminder[,-c(1:4)]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 3. 平均余命が80歳以上の行を抜き出す\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[gapminder$lifeExp > 80]\n"
"> >    gapminder[gapminder$lifeExp > 80,]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 4. 最初の行の4番目と5番目の列を抜き出す\n"
"> >   (`lifeExp` と `gdpPercap`).\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[1, 4, 5]\n"
"> >    gapminder[1, c(4, 5)]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 5. 上級：2002年と2007年の情報を含む行を抜き出す\n"
"> >\n"
"> >     \n"
"> >     ~~~\n"
"> >     # gapminder[gapminder$year == 2002 | 2007,]\n"
"> >     gapminder[gapminder$year == 2002 | gapminder$year == 2007,]\n"
"> >     gapminder[gapminder$year %in% c(2002, 2007),]\n"
"> >     ~~~\n"
"> >     {: .language-r}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/06-data-subsetting.md:1458
msgid "> ## Challenge 8"
msgstr "> ## チャレンジ８"

#: r-novice-gapminder/_episodes/06-data-subsetting.md:1459
msgid ""
">\n"
"> 1. Why does `gapminder[1:20]` return an error? How does it differ from `gapminder[1:20, ]`?\n"
">\n"
">\n"
"> 2. Create a new `data.frame` called `gapminder_small` that only contains rows 1 through 9\n"
"> and 19 through 23. You can do this in one or two steps.\n"
">\n"
"> > ## Solution to challenge 8\n"
"> >\n"
"> > 1.  `gapminder` is a data.frame so needs to be subsetted on two dimensions. `gapminder[1:20, ]` subsets the data to give the first 20 rows and all columns.\n"
"> >\n"
"> > 2. \n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > gapminder_small <- gapminder[c(1:9, 19:23),]\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 1. なぜ、 `gapminder[1:20]` は、エラーを返すのでしょうか？ `gapminder[1:20, ]` とどう違うのでしょう？\n"
">\n"
">\n"
"> 2. 新しく `gapminder_small` という、1から9の行だけを含む `data.frame` を作ってください。\n"
"> これは、１つまたは２つの手順でできます。\n"
">\n"
"> > ## チャレンジ８の解答\n"
"> >\n"
"> > 1.  `gapminder` は、データフレームなので、２つの次元の部分集合を作る必要があります。 `gapminder[1:20, ]` は、最初から20番目の行までについて全ての列を引き出します。\n"
"> >\n"
"> > 2. \n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > gapminder_small <- gapminder[c(1:9, 19:23),]\n"
"> > ~~~\n"
"> > {: .language-r}"

# Front Matter
#: r-novice-gapminder/_episodes/07-control-flow.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 07-control-flow.md in _episodes_rmd/\n"
"title: Control Flow\n"
"teaching: 45\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I make data-dependent choices in R?\"\n"
"- \"How can I repeat operations in R?\"\n"
"objectives:\n"
"- \"Write conditional statements with `if()` and `else()`.\"\n"
"- \"Write and understand `for()` loops.\"\n"
"keypoints:\n"
"- \"Use `if` and `else` to make choices.\"\n"
"- \"Use `for` to repeat operations.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 07-control-flow.md in _episodes_rmd/\n"
"title: 実行の制御\n"
"teaching: 45\n"
"exercises: 20\n"
"questions:\n"
"- \"R でデータに依存した選択を行うにはどうすればよいですか?\"\n"
"- \"R で処理を繰り返すにはどうすればよいですか?\"\n"
"objectives:\n"
"- \"`if()` と `else()`　で条件文が書けるようになりましょう。\"\n"
"- \"`for()` ループを理解して使えるようになりましょう。\"\n"
"keypoints:\n"
"- \"選択の際は `if` と `else` を使う。\"\n"
"- \"繰り返す処理には `for` を使う。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/07-control-flow.md:21
msgid ""
"Often when we're coding we want to control the flow of our actions. This can be done\n"
"by setting actions to occur only if a condition or a set of conditions are met.\n"
"Alternatively, we can also set an action to occur a particular number of times."
msgstr ""
"コードを書く際、実行の流れを制御する必要がよくあります。\n"
"これは、ある条件、または一連の条件が満たされたときに実行されるようにすればできます。\n"
"あるいは、決まった回数実行されるよう設定することもできます。"

#: r-novice-gapminder/_episodes/07-control-flow.md:25
msgid ""
"There are several ways you can control flow in R.\n"
"For conditional statements, the most commonly used approaches are the constructs:"
msgstr ""
"Rでは、流れを制御する方法がいくつかあります。\n"
"条件付きの宣言で、最もよく使われるのが構文（constructs）です："

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:29
msgid ""
"~~~\n"
"# if\n"
"if (condition is true) {\n"
"  perform action\n"
"}\n"
"\n"
"# if ... else\n"
"if (condition is true) {\n"
"  perform action\n"
"} else {  # that is, if the condition is false,\n"
"  perform alternative action\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"# if\n"
"if (condition is true) {\n"
"  perform action\n"
"}\n"
"\n"
"# if ... else\n"
"if (condition is true) { # 条件が満たされた場合\n"
"  アクションを行う\n"
"} else {  # つまり、条件が満たされなかった場合\n"
"  別のアクションを行う\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:44
msgid "Say, for example, that we want R to print a message if a variable `x` has a particular value:"
msgstr "例えばRに、もし変数 `x` が特定の値を持っていた場合、メッセージを表示させたいとします。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:47
msgid ""
"~~~\n"
"x <- 8\n"
"\n"
"if (x >= 10) {\n"
"  print(\"x is greater than or equal to 10\")\n"
"}\n"
"\n"
"x\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 8\n"
"\n"
"if (x >= 10) {\n"
"  print(\"x is greater than or equal to 10\")\n"
"}\n"
"\n"
"x\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:60
msgid ""
"~~~\n"
"[1] 8\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 8\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:65
msgid "The print statement does not appear in the console because x is not greater than 10. To print a different message for numbers less than 10, we can add an `else` statement."
msgstr "xは10より大きくないため、表示された宣言はコンソール上に表示されません。10より小さい場合に違ったメッセージを表示させるためには、 `else` 宣言を追加しなければなりません。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:68
msgid ""
"~~~\n"
"x <- 8\n"
"\n"
"if (x >= 10) {\n"
"  print(\"x is greater than or equal to 10\")\n"
"} else {\n"
"  print(\"x is less than 10\")\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 8\n"
"\n"
"if (x >= 10) {\n"
"  print(\"x is greater than or equal to 10\")\n"
"} else {\n"
"  print(\"x is less than 10\")\n"
"}\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:81
msgid ""
"~~~\n"
"[1] \"x is less than 10\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"x is less than 10\"\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:86
msgid "You can also test multiple conditions by using `else if`."
msgstr " `else if` を使うと、複数の条件を試すこともできます。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:89
msgid ""
"~~~\n"
"x <- 8\n"
"\n"
"if (x >= 10) {\n"
"  print(\"x is greater than or equal to 10\")\n"
"} else if (x > 5) {\n"
"  print(\"x is greater than 5, but less than 10\")\n"
"} else {\n"
"  print(\"x is less than 5\")\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 8\n"
"\n"
"if (x >= 10) {\n"
"  print(\"x is greater than or equal to 10\")\n"
"} else if (x > 5) {\n"
"  print(\"x is greater than 5, but less than 10\")\n"
"} else {\n"
"  print(\"x is less than 5\")\n"
"}\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:104
msgid ""
"~~~\n"
"[1] \"x is greater than 5, but less than 10\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"x is greater than 5, but less than 10\"\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:109
msgid ""
"**Important:** when R evaluates the condition inside `if()` statements, it is\n"
"looking for a logical element, i.e., `TRUE` or `FALSE`. This can cause some\n"
"headaches for beginners. For example:"
msgstr ""
"**重要：** Rが `if()` 宣言の中の条件を計算する際、論理要素（ `TRUE` か `FALSE` ）を探します。\n"
"初心者には複雑なので、混乱してしまうかもしれません。例えば："

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:114
msgid ""
"~~~\n"
"x  <-  4 == 3\n"
"if (x) {\n"
"  \"4 equals 3\"\n"
"} else {\n"
"  \"4 does not equal 3\"          \n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"x  <-  4 == 3\n"
"if (x) {\n"
"  \"4 equals 3\"\n"
"} else {\n"
"  \"4 does not equal 3\"          \n"
"}\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:126
msgid ""
"~~~\n"
"[1] \"4 does not equal 3\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"4 does not equal 3\"\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:131
msgid "As we can see, the not equal message was printed because the vector x is `FALSE`"
msgstr "ここで見られるように、ベクトル x が `FALSE` であるため、不等号のメッセージが表示されました。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:134
msgid ""
"~~~\n"
"x <- 4 == 3\n"
"x\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 4 == 3\n"
"x\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:142
msgid ""
"~~~\n"
"[1] FALSE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] FALSE\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:148
msgid ""
">\n"
"> Use an `if()` statement to print a suitable message\n"
"> reporting whether there are any records from 2002 in\n"
"> the `gapminder` dataset.\n"
"> Now do the same for 2012.\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> > We will first see a solution to Challenge 1 which does not use the `any()` function.\n"
"> > We first obtain a logical vector describing which element of `gapminder$year` is equal to `2002`:\n"
"> > \n"
"> > ~~~\n"
"> > gapminder[(gapminder$year == 2002),]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > Then, we count the number of rows of the data.frame `gapminder` that correspond to the 2002:\n"
"> > \n"
"> > ~~~\n"
"> > rows2002_number <- nrow(gapminder[(gapminder$year == 2002),])\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > The presence of any record for the year 2002 is equivalent to the request that `rows2002_number` is one or more:\n"
"> > \n"
"> > ~~~\n"
"> > rows2002_number >= 1\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > Putting all together, we obtain:\n"
"> > \n"
"> > ~~~\n"
"> > if(nrow(gapminder[(gapminder$year == 2002),]) >= 1){\n"
"> >    print(\"Record(s) for the year 2002 found.\")\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > All this can be done more quickly with `any()`. The logical condition can be expressed as:\n"
"> > \n"
"> > ~~~\n"
"> > if(any(gapminder$year == 2002)){\n"
"> >    print(\"Record(s) for the year 2002 found.\")\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >"
msgstr ""
">\n"
"> `if()` 宣言を使って、`gapminder` のデータセットに2002年の記録があるかどうかを伝える\n"
"> 適当なメッセージを表示してください。\n"
"> 2012年についても、同じことをしてください。\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> > `any()` を使わないチャレンジ１の解答をまず見てみましょう。\n"
"> > 最初に、`gapminder$year` の内、どの要素が `2002` と等しいかを記した論理ベクトルを手に入れます：\n"
"> > \n"
"> > ~~~\n"
"> > gapminder[(gapminder$year == 2002),]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > そして、データフレーム `gapminder` の2002と対応する行の数を数えます：\n"
"> > \n"
"> > ~~~\n"
"> > rows2002_number <- nrow(gapminder[(gapminder$year == 2002),])\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > 2002年の記録が存在するということは、 `rows2002_number` が１以上あるということです：\n"
"> > \n"
"> > ~~~\n"
"> > rows2002_number >= 1\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > 全てを合わせると、以下になります：\n"
"> > \n"
"> > ~~~\n"
"> > if(nrow(gapminder[(gapminder$year == 2002),]) >= 1){\n"
"> >    print(\"Record(s) for the year 2002 found.\")\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > `any()` を使えば、もっと早くできます。論理条件は、次のように書けます：\n"
"> > \n"
"> > ~~~\n"
"> > if(any(gapminder$year == 2002)){\n"
"> >    print(\"Record(s) for the year 2002 found.\")\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >"

#: r-novice-gapminder/_episodes/07-control-flow.md:196
msgid "Did anyone get a warning message like this?"
msgstr "次のような警告メッセージをもらった人はいますか？"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:199
msgid ""
"~~~\n"
"Warning in if (gapminder$year == 2012) {: the condition has length > 1 and\n"
"only the first element will be used\n"
"~~~"
msgstr ""
"~~~\n"
"Warning in if (gapminder$year == 2012) {: the condition has length > 1 and\n"
"only the first element will be used\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:205
msgid ""
"If your condition evaluates to a vector with more than one logical element,\n"
"the function `if()` will still run, but will only evaluate the condition in the first\n"
"element. Here you need to make sure your condition is of length 1."
msgstr ""
"もし、１つ以上の要素を持つベクトルを評価する条件の場合、\n"
"関数 `if()` は実行されるのですが、最初の要素の条件しか評価しません。\n"
"ここでは、確実に条件の長さは１であるようにする必要があります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/07-control-flow.md:209
msgid "> ## Tip: `any()` and `all()`"
msgstr "> ## ヒント：`any()` と `all()`"

#: r-novice-gapminder/_episodes/07-control-flow.md:210
msgid ""
">\n"
"> The `any()` function will return TRUE if at least one\n"
"> TRUE value is found within a vector, otherwise it will return `FALSE`.\n"
"> This can be used in a similar way to the `%in%` operator.\n"
"> The function `all()`, as the name suggests, will only return `TRUE` if all values in\n"
"> the vector are `TRUE`."
msgstr ""
">\n"
"> `any()` 関数は、ベクトルの中に少なくとも１つ `TRUE` の値がある場合、 `TRUE` を返し、\n"
"> そうでない場合は、 `FALSE` を返します。\n"
"> これは、 `%in%` 演算子でも同様に使えます。\n"
"> 関数 `all()` は、その名前が示唆しているように、ベクトル内の全ての値が `TRUE` である時のみ、\n"
"> `TRUE` となります。"

# header
#: r-novice-gapminder/_episodes/07-control-flow.md:218
msgid "## Repeating operations"
msgstr "## 繰り返し行う処理"

#: r-novice-gapminder/_episodes/07-control-flow.md:220
msgid ""
"If you want to iterate over\n"
"a set of values, when the order of iteration is important, and perform the\n"
"same operation on each, a `for()` loop will do the job.\n"
"We saw `for()` loops in the shell lessons earlier. This is the most\n"
"flexible of looping operations, but therefore also the hardest to use\n"
"correctly. Avoid using `for()` loops unless the order of iteration is important:\n"
"i.e. the calculation at each iteration depends on the results of previous iterations."
msgstr ""
"一連の値に繰り返し同じ演算をしたい場合、\n"
"そして繰り返す順番も重要である場合は、 \n"
" `for()` ループを使いましょう。\n"
" `for()` ループは、先ほどシェルのレッスンで見ましたね。これは、最も柔軟な\n"
"ループの演算子ですが、それゆえ、正しく使うのが最も難しいです。\n"
"繰り返す順番が重要（つまり直前の繰り返しの結果をもとに、次\n"
"の演算を行う場合）でない限り、 `for()` ループを使うのを避けましょう。"

#: r-novice-gapminder/_episodes/07-control-flow.md:228
msgid "The basic structure of a `for()` loop is:"
msgstr "`for()` ループの基本構造は："

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:231
msgid ""
"~~~\n"
"for(iterator in set of values){\n"
"  do a thing\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"for(iterator in set of values){\n"
"  do a thing\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:238
msgid "For example:"
msgstr "例えば："

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:241
msgid ""
"~~~\n"
"for(i in 1:10){\n"
"  print(i)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"for(i in 1:10){\n"
"  print(i)\n"
"}\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:250
msgid ""
"~~~\n"
"[1] 1\n"
"[1] 2\n"
"[1] 3\n"
"[1] 4\n"
"[1] 5\n"
"[1] 6\n"
"[1] 7\n"
"[1] 8\n"
"[1] 9\n"
"[1] 10\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1\n"
"[1] 2\n"
"[1] 3\n"
"[1] 4\n"
"[1] 5\n"
"[1] 6\n"
"[1] 7\n"
"[1] 8\n"
"[1] 9\n"
"[1] 10\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:264
msgid ""
"The `1:10` bit creates a vector on the fly; you can iterate\n"
"over any other vector as well."
msgstr ""
"`1:10` の部分は、ベクトルをその場で作るものです。\n"
"他のベクトルの中身を繰り返すこともできます。"

#: r-novice-gapminder/_episodes/07-control-flow.md:267
msgid ""
"We can use a `for()` loop nested within another `for()` loop to iterate over two things at\n"
"once."
msgstr ""
"`for()` ループを、もうひとつの `for()` ループと入れ子となる形にすれば、\n"
"２つ同時に繰り返すこともできます。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:271
msgid ""
"~~~\n"
"for(i in 1:5){\n"
"  for(j in c('a', 'b', 'c', 'd', 'e')){\n"
"    print(paste(i,j))\n"
"  }\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"for(i in 1:5){\n"
"  for(j in c('a', 'b', 'c', 'd', 'e')){\n"
"    print(paste(i,j))\n"
"  }\n"
"}\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:282
msgid ""
"~~~\n"
"[1] \"1 a\"\n"
"[1] \"1 b\"\n"
"[1] \"1 c\"\n"
"[1] \"1 d\"\n"
"[1] \"1 e\"\n"
"[1] \"2 a\"\n"
"[1] \"2 b\"\n"
"[1] \"2 c\"\n"
"[1] \"2 d\"\n"
"[1] \"2 e\"\n"
"[1] \"3 a\"\n"
"[1] \"3 b\"\n"
"[1] \"3 c\"\n"
"[1] \"3 d\"\n"
"[1] \"3 e\"\n"
"[1] \"4 a\"\n"
"[1] \"4 b\"\n"
"[1] \"4 c\"\n"
"[1] \"4 d\"\n"
"[1] \"4 e\"\n"
"[1] \"5 a\"\n"
"[1] \"5 b\"\n"
"[1] \"5 c\"\n"
"[1] \"5 d\"\n"
"[1] \"5 e\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"1 a\"\n"
"[1] \"1 b\"\n"
"[1] \"1 c\"\n"
"[1] \"1 d\"\n"
"[1] \"1 e\"\n"
"[1] \"2 a\"\n"
"[1] \"2 b\"\n"
"[1] \"2 c\"\n"
"[1] \"2 d\"\n"
"[1] \"2 e\"\n"
"[1] \"3 a\"\n"
"[1] \"3 b\"\n"
"[1] \"3 c\"\n"
"[1] \"3 d\"\n"
"[1] \"3 e\"\n"
"[1] \"4 a\"\n"
"[1] \"4 b\"\n"
"[1] \"4 c\"\n"
"[1] \"4 d\"\n"
"[1] \"4 e\"\n"
"[1] \"5 a\"\n"
"[1] \"5 b\"\n"
"[1] \"5 c\"\n"
"[1] \"5 d\"\n"
"[1] \"5 e\"\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:311
msgid "Rather than printing the results, we could write the loop output to a new object."
msgstr "結果を表示させずに、ループの結果を新しいオブジェクトに書き込むこともできます。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:314
msgid ""
"~~~\n"
"output_vector <- c()\n"
"for(i in 1:5){\n"
"  for(j in c('a', 'b', 'c', 'd', 'e')){\n"
"    temp_output <- paste(i, j)\n"
"    output_vector <- c(output_vector, temp_output)\n"
"  }\n"
"}\n"
"output_vector\n"
"~~~"
msgstr ""
"~~~\n"
"output_vector <- c()\n"
"for(i in 1:5){\n"
"  for(j in c('a', 'b', 'c', 'd', 'e')){\n"
"    temp_output <- paste(i, j)\n"
"    output_vector <- c(output_vector, temp_output)\n"
"  }\n"
"}\n"
"output_vector\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:328
msgid ""
"~~~\n"
" [1] \"1 a\" \"1 b\" \"1 c\" \"1 d\" \"1 e\" \"2 a\" \"2 b\" \"2 c\" \"2 d\" \"2 e\" \"3 a\"\n"
"[12] \"3 b\" \"3 c\" \"3 d\" \"3 e\" \"4 a\" \"4 b\" \"4 c\" \"4 d\" \"4 e\" \"5 a\" \"5 b\"\n"
"[23] \"5 c\" \"5 d\" \"5 e\"\n"
"~~~"
msgstr ""
"~~~\n"
" [1] \"1 a\" \"1 b\" \"1 c\" \"1 d\" \"1 e\" \"2 a\" \"2 b\" \"2 c\" \"2 d\" \"2 e\" \"3 a\"\n"
"[12] \"3 b\" \"3 c\" \"3 d\" \"3 e\" \"4 a\" \"4 b\" \"4 c\" \"4 d\" \"4 e\" \"5 a\" \"5 b\"\n"
"[23] \"5 c\" \"5 d\" \"5 e\"\n"
"~~~"

#: r-novice-gapminder/_episodes/07-control-flow.md:335
msgid ""
"This approach can be useful, but 'growing your results' (building\n"
"the result object incrementally) is computationally inefficient, so avoid\n"
"it when you are iterating through a lot of values."
msgstr ""
"このアプローチが役に立つこともありますが、'結果を太らせる' （結果のオブジェクトを\n"
"徐々に積み上げる）と、演算する上で非効率になります。\n"
"ゆえに、多くの値の間を繰り返すときは避けましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/07-control-flow.md:339
msgid "> ## Tip: don't grow your results"
msgstr "> ## ヒント：結果を太らせないようにしましょう"

#: r-novice-gapminder/_episodes/07-control-flow.md:340
msgid ""
">\n"
"> One of the biggest things that trips up novices and\n"
"> experienced R users alike, is building a results object\n"
"> (vector, list, matrix, data frame) as your for loop progresses.\n"
"> Computers are very bad at handling this, so your calculations\n"
"> can very quickly slow to a crawl. It's much better to define\n"
"> an empty results object before hand of the appropriate dimensions.\n"
"> So if you know the end result will be stored in a matrix like above,\n"
"> create an empty matrix with 5 row and 5 columns, then at each iteration\n"
"> store the results in the appropriate location."
msgstr ""
">\n"
"> 初心者、そして経験のあるRユーザーがよくつまずいてしまう\n"
"> ループの使い方の一つが、結果のオブジェクト\n"
">（ベクトル、リスト、行列、データフレームなど）をループするたびに作ってしまうことです。\n"
"> コンピュータはこれを扱うのがとても下手で、すぐに計算が\n"
"> 遅くなってしまいます。適当な次元を持つ空の結果オブジェクトを\n"
"> 前もって宣言しておく方が効率的です。\n"
"> もし、上記のように、最後の結果が行列に蓄積されるのを知っていたら、\n"
"> 5行、5列の数列を作成しておいて、それぞれの繰り返しで適切な場所へ結果を\n"
"> 保存しましょう。"

#: r-novice-gapminder/_episodes/07-control-flow.md:352
msgid ""
"A better way is to define your (empty) output object before filling in the values.\n"
"For this example, it looks more involved, but is still more efficient."
msgstr ""
"よりよい方法は、（空の）出力オブジェクトを、値を埋める前に宣言することです。\n"
"この例では、より複雑に見えますが、より効率的です。"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:356
msgid ""
"~~~\n"
"output_matrix <- matrix(nrow=5, ncol=5)\n"
"j_vector <- c('a', 'b', 'c', 'd', 'e')\n"
"for(i in 1:5){\n"
"  for(j in 1:5){\n"
"    temp_j_value <- j_vector[j]\n"
"    temp_output <- paste(i, temp_j_value)\n"
"    output_matrix[i, j] <- temp_output\n"
"  }\n"
"}\n"
"output_vector2 <- as.vector(output_matrix)\n"
"output_vector2\n"
"~~~"
msgstr ""
"~~~\n"
"output_matrix <- matrix(nrow=5, ncol=5)\n"
"j_vector <- c('a', 'b', 'c', 'd', 'e')\n"
"for(i in 1:5){\n"
"  for(j in 1:5){\n"
"    temp_j_value <- j_vector[j]\n"
"    temp_output <- paste(i, temp_j_value)\n"
"    output_matrix[i, j] <- temp_output\n"
"  }\n"
"}\n"
"output_vector2 <- as.vector(output_matrix)\n"
"output_vector2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/07-control-flow.md:373
msgid ""
"~~~\n"
" [1] \"1 a\" \"2 a\" \"3 a\" \"4 a\" \"5 a\" \"1 b\" \"2 b\" \"3 b\" \"4 b\" \"5 b\" \"1 c\"\n"
"[12] \"2 c\" \"3 c\" \"4 c\" \"5 c\" \"1 d\" \"2 d\" \"3 d\" \"4 d\" \"5 d\" \"1 e\" \"2 e\"\n"
"[23] \"3 e\" \"4 e\" \"5 e\"\n"
"~~~"
msgstr ""
"~~~\n"
" [1] \"1 a\" \"2 a\" \"3 a\" \"4 a\" \"5 a\" \"1 b\" \"2 b\" \"3 b\" \"4 b\" \"5 b\" \"1 c\"\n"
"[12] \"2 c\" \"3 c\" \"4 c\" \"5 c\" \"1 d\" \"2 d\" \"3 d\" \"4 d\" \"5 d\" \"1 e\" \"2 e\"\n"
"[23] \"3 e\" \"4 e\" \"5 e\"\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/07-control-flow.md:380
msgid "> ## Tip: While loops"
msgstr "> ## ヒント：while ループ"

#: r-novice-gapminder/_episodes/07-control-flow.md:381
msgid ""
">\n"
">\n"
"> Sometimes you will find yourself needing to repeat an operation until a certain\n"
"> condition is met. You can do this with a `while()` loop.\n"
">\n"
"> \n"
"> ~~~\n"
"> while(this condition is true){\n"
">   do a thing\n"
"> }\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> As an example, here's a while loop\n"
"> that generates random numbers from a uniform distribution (the `runif()` function)\n"
"> between 0 and 1 until it gets one that's less than 0.1.\n"
">\n"
"> ~~~\n"
"> z <- 1\n"
"> while(z > 0.1){\n"
">   z <- runif(1)\n"
">   print(z)\n"
"> }\n"
"> ~~~"
msgstr ""
">\n"
">\n"
"> 時には、ある条件が満たされるまで繰り返す必要があります。\n"
"> これは、 `while()` ループを使えばできます。\n"
">\n"
"> \n"
"> ~~~\n"
"> while(this condition is true){\n"
">   do a thing\n"
"> }\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 例として、このwhileループは\n"
"> 一様分布（`runif()` 関数）から0.1よりも小さい数を得るまで、\n"
"> ０から１の間で乱数を生成します。\n"
">\n"
"> ~~~\n"
"> z <- 1\n"
"> while(z > 0.1){\n"
">   z <- runif(1)\n"
">   print(z)\n"
"> }\n"
"> ~~~"

# SC/DC Template label
#: r-novice-gapminder/_episodes/07-control-flow.md:405
msgid "> {: .r}"
msgstr "> {: .r}"

#: r-novice-gapminder/_episodes/07-control-flow.md:406
msgid ""
">\n"
"> `while()` loops will not always be appropriate. You have to be particularly careful\n"
"> that you don't end up in an infinite loop because your condition is never met."
msgstr ""
">\n"
"> `while()` ループは、いつも適当であるとは言えません。特に、条件が決して満たされないことによる\n"
"> 無限ループに陥らないように注意する必要があります。"

#: r-novice-gapminder/_episodes/07-control-flow.md:413
msgid ""
">\n"
"> Compare the objects output_vector and\n"
"> output_vector2. Are they the same? If not, why not?\n"
"> How would you change the last block of code to make output_vector2\n"
"> the same as output_vector?\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> > We can check whether the two vectors are identical using the `all()` function:\n"
"> > \n"
"> > ~~~\n"
"> > all(output_vector == output_vector2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > However, all the elements of `output_vector` can be found in `output_vector2`:\n"
"> > \n"
"> > ~~~\n"
"> > all(output_vector %in% output_vector2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > and vice versa:\n"
"> > \n"
"> > ~~~\n"
"> > all(output_vector2 %in% output_vector)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > therefore, the element in `output_vector` and `output_vector2` are just sorted in a different order.\n"
"> > This is because `as.vector()` outputs the elements of an input matrix going over its column.\n"
"> > Taking a look at `output_matrix`, we can notice that we want its elements by rows.\n"
"> > The solution is to transpose the `output_matrix`. We can do it either by calling the transpose function\n"
"> > `t()` or by inputing the elements in the right order.\n"
"> > The first solution requires to change the original\n"
"> > \n"
"> > ~~~\n"
"> > output_vector2 <- as.vector(output_matrix)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > into\n"
"> > \n"
"> > ~~~\n"
"> > output_vector2 <- as.vector(t(output_matrix))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > The second solution requires to change\n"
"> > \n"
"> > ~~~\n"
"> > output_matrix[i, j] <- temp_output\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > into\n"
"> > \n"
"> > ~~~\n"
"> > output_matrix[j, i] <- temp_output\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> `output_vector` と `output_vector2` のオブジェクトを比較してみましょう。\n"
"> 同じですか？もし違ったら、なぜそうなったのでしょう？\n"
"> `output_vector2` の最後のコードのかたまりを `output_vector` と同じにするには、どう変えればいいのでしょうか？\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> > ２つのベクトルが同じかを調べるために、 `all()` 関数を使いましょう：\n"
"> > \n"
"> > ~~~\n"
"> > all(output_vector == output_vector2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > しかし、 `output_vector` の全ての要素は、 `output_vector2` にあります：\n"
"> > \n"
"> > ~~~\n"
"> > all(output_vector %in% output_vector2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > そして、その逆もしかり。\n"
"> > \n"
"> > ~~~\n"
"> > all(output_vector2 %in% output_vector)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > ですので、`output_vector` と `output_vector2` の要素は、違う順番で蓄積されただけみたいです。\n"
"> > 理由は、 `as.vector()` は列ごとに行列から要素を出力するからです。\n"
"> > `output_matrix` を見てみると、要素を行ごとに出力して欲しいことに気づくでしょう。\n"
"> > 解決方法は、 `output_matrix` を転置することです。転置関数 `t()` を使うか、\n"
"> > 要素を正しい順番で入力するか、いずれかの方法で対応可能です。\n"
"> > 最初の解決方法は、元の形である\n"
"> > \n"
"> > ~~~\n"
"> > output_vector2 <- as.vector(output_matrix)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > を、次のように変えないといけません：\n"
"> > \n"
"> > ~~~\n"
"> > output_vector2 <- as.vector(t(output_matrix))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > 二番目の解決方法は、以下を：\n"
"> > \n"
"> > ~~~\n"
"> > output_matrix[i, j] <- temp_output\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > 次のように変えます：\n"
"> > \n"
"> > ~~~\n"
"> > output_matrix[j, i] <- temp_output\n"
"> > ~~~\n"
"> > {: .language-r}"

#: r-novice-gapminder/_episodes/07-control-flow.md:471
msgid ""
">\n"
"> Write a script that loops through the `gapminder` data by continent and prints out\n"
"> whether the mean life expectancy is smaller or larger than 50\n"
"> years.\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> >\n"
"> > **Step 1**:  We want to make sure we can extract all the unique values of the continent vector\n"
"> > \n"
"> > ~~~\n"
"> > gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> > unique(gapminder$continent)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > **Step 2**: We also need to loop over each of these continents and calculate the average life expectancy for each `subset` of data.\n"
"> > We can do that as follows:\n"
"> >\n"
"> > 1. Loop over each of the unique values of 'continent'\n"
"> > 2. For each value of continent, create a temporary variable storing the life exepectancy for that subset,\n"
"> > 3. Return the calculated life expectancy to the user by printing the output:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > for( iContinent in unique(gapminder$continent) ){\n"
"> >    tmp <- mean(subset(gapminder, continent==iContinent)$lifeExp)\n"
"> >    cat(\"Average Life Expectancy in\", iContinent, \"is\", tmp, \"\\n\")\n"
"> >    rm(tmp)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > **Step 3**: The exercise only wants the output printed if the average life expectancy is less than 50 or greater than 50. So we need to add an `if` condition before printing.\n"
"> > So we need to add an `if` condition before printing, which evaluates whether the calculated average life expectancy is above or below a threshold, and print an output conditional on the result.\n"
"> > We need to amend (3) from above:\n"
"> >\n"
"> > 3a. If the calculated life expectancy is less than some threshold (50 years), return the continent and a statement that life expectancy is less than threshold, otherwise return the continent and   a statement that life expectancy is greater than threshold,:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > thresholdValue <- 50\n"
"> > \n"
"> > for( iContinent in unique(gapminder$continent) ){\n"
"> >    tmp <- mean(subset(gapminder, continent==iContinent)$lifeExp)\n"
"> >    \n"
"> >    if(tmp < thresholdValue){\n"
"> >        cat(\"Average Life Expectancy in\", iContinent, \"is less than\", thresholdValue, \"\\n\")\n"
"> >    }\n"
"> >    else{\n"
"> >        cat(\"Average Life Expectancy in\", iContinent, \"is greater than\", thresholdValue, \"\\n\")\n"
"> >         } # end if else condition\n"
"> >    rm(tmp)\n"
"> >    } # end for loop\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> `gapminder` データを大陸ごとにループし、平均余命が50歳以上かどうかを表示する\n"
"> スクリプトを書きましょう。\n"
">\n"
"> > ## チャレンジ３の解答\n"
"> >\n"
"> > **手順1**：大陸ベクトルから、確実に全ての固有の値を抜き出せるかを確かめましょう。\n"
"> > \n"
"> > ~~~\n"
"> > gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> > unique(gapminder$continent)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > **手順2**：これらの大陸のそれぞれにループをし、その `部分集合` データごとに平均余命を出す必要があります。\n"
"> > それは次のようにすればできます：\n"
"> >\n"
"> > 1. '大陸（continent）' の固有の値のそれぞれについてループする\n"
"> > 2. 大陸のそれぞれの値ごとに、部分集合の平均余命を蓄積する一時的な変数を作る\n"
"> > 3. 計算した平均余命を返し、 出力を表示させる：\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > for( iContinent in unique(gapminder$continent) ){\n"
"> >    tmp <- mean(subset(gapminder, continent==iContinent)$lifeExp)\n"
"> >    cat(\"Average Life Expectancy in\", iContinent, \"is\", tmp, \"\\n\")\n"
"> >    rm(tmp)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > **手順3**：この演習では、平均余命が50歳以上かどうかの結果だけを出力するものでした。\n"
"> > ゆえに、結果を表示させる前に `if` 条件をつけて、演算された平均余命が基準値以上か、基準値未満かを判別し、結果によって正しい出力を表示させる必要があります。\n"
"> > これを踏まえて、上の (3) を修正する必要があります：\n"
"> >\n"
"> > 3a. もし計算された平均余命が、ある基準（50歳）未満の場合、大陸と平均余命は基準未満であるという宣言を、そうでない場合は、大陸と平均余命は基準値以上であるという宣言を返す：\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > thresholdValue <- 50\n"
"> > \n"
"> > for( iContinent in unique(gapminder$continent) ){\n"
"> >    tmp <- mean(subset(gapminder, continent==iContinent)$lifeExp)\n"
"> >    \n"
"> >    if(tmp < thresholdValue){\n"
"> >        cat(\"Average Life Expectancy in\", iContinent, \"is less than\", thresholdValue, \"\\n\")\n"
"> >    }\n"
"> >    else{\n"
"> >        cat(\"Average Life Expectancy in\", iContinent, \"is greater than\", thresholdValue, \"\\n\")\n"
"> >         } # end if else condition\n"
"> >    rm(tmp)\n"
"> >    } # end for loop\n"
"> > ~~~\n"
"> > {: .language-r}"

#: r-novice-gapminder/_episodes/07-control-flow.md:530
msgid ""
">\n"
"> Modify the script from Challenge 3 to loop over each\n"
"> country. This time print out whether the life expectancy is\n"
"> smaller than 50, between 50 and 70, or greater than 70.\n"
">\n"
"> > ## Solution to Challenge 4\n"
"> >  We modify our solution to Challenge 3 by now adding two thresholds, `lowerThreshold` and `upperThreshold` and extending our if-else statements:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >  lowerThreshold <- 50\n"
"> >  upperThreshold <- 70\n"
"> >  \n"
"> > for( iCountry in unique(gapminder$country) ){\n"
"> >     tmp <- mean(subset(gapminder, country==iCountry)$lifeExp)\n"
"> >     \n"
"> >     if(tmp < lowerThreshold){\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is less than\", lowerThreshold, \"\\n\")\n"
"> >     }\n"
"> >     else if(tmp > lowerThreshold && tmp < upperThreshold){\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is between\", lowerThreshold, \"and\", upperThreshold, \"\\n\")\n"
"> >     }\n"
"> >     else{\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is greater than\", upperThreshold, \"\\n\")\n"
"> >     }\n"
"> >     rm(tmp)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> チャレンジ３のスクリプトをそれぞれの国ごとにループする形に直してください。\n"
"> 今回は、平均余命は50歳未満か、50歳以上70歳未満か、70歳以上かを\n"
"> 表示しましょう。\n"
">\n"
"> > ## チャレンジ４の解答\n"
"> > チャレンジ３の解答を、 `lowerThreshold` と `upperThreshold` の２つの基準値を加え、if-else 宣言を拡張する形で修正します：\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >  lowerThreshold <- 50\n"
"> >  upperThreshold <- 70\n"
"> >  \n"
"> > for( iCountry in unique(gapminder$country) ){\n"
"> >     tmp <- mean(subset(gapminder, country==iCountry)$lifeExp)\n"
"> >     \n"
"> >     if(tmp < lowerThreshold){\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is less than\", lowerThreshold, \"\\n\")\n"
"> >     }\n"
"> >     else if(tmp > lowerThreshold && tmp < upperThreshold){\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is between\", lowerThreshold, \"and\", upperThreshold, \"\\n\")\n"
"> >     }\n"
"> >     else{\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is greater than\", upperThreshold, \"\\n\")\n"
"> >     }\n"
"> >     rm(tmp)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/07-control-flow.md:562
msgid "> ## Challenge 5 - Advanced"
msgstr "> ## チャレンジ5 - 上級"

#: r-novice-gapminder/_episodes/07-control-flow.md:563
msgid ""
">\n"
"> Write a script that loops over each country in the `gapminder` dataset,\n"
"> tests whether the country starts with a 'B', and graphs life expectancy\n"
"> against time as a line graph if the mean life expectancy is under 50 years.\n"
">\n"
"> > ## Solution for Challenge 5\n"
"> >\n"
"> > We will use the `grep` command that was introduced in the Unix Shell lesson to find countries that start with \"B.\"\n"
"> > Lets understand how to do this first.\n"
"> > Following from the Unix shell section we may be tempted to try the following\n"
"> > \n"
"> > ~~~\n"
"> > grep(\"^B\", unique(gapminder$country))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > But when we evaluate this command it returns the indices of the factor variable `country` that start with \"B.\"\n"
"> > To get the values, we must add the `value=TRUE` option to the `grep` command:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > grep(\"^B\", unique(gapminder$country), value=TRUE)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > We will now store these countries in a variable called candidateCountries, and then loop over each entry in the variable.\n"
"> > Inside the loop, we evaluate the average life expectancy for each country, and if the average life expectancy is less than 50 we use base-plot to plot the evolution of average life expectancy:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > thresholdValue <- 50\n"
"> > candidateCountries <- grep(\"^B\", unique(gapminder$country), value=TRUE)\n"
"> > \n"
"> > for( iCountry in candidateCountries){\n"
"> >     tmp <- mean(subset(gapminder, country==iCountry)$lifeExp)\n"
"> >     \n"
"> >     if(tmp < thresholdValue){\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is less than\", thresholdValue, \"plotting life expectancy graph... \\n\")\n"
"> >         \n"
"> >         with(subset(gapminder, country==iCountry),\n"
"> >                 plot(year,lifeExp,\n"
"> >                      type=\"o\",\n"
"> >                      main = paste(\"Life Expectancy in\", iCountry, \"over time\"),\n"
"> >                      ylab = \"Life Expectancy\",\n"
"> >                      xlab = \"Year\"\n"
"> >                    ) # end plot\n"
"> >               ) # end with\n"
"> >     } # end for loop\n"
"> >     rm(tmp)\n"
"> >  }```\n"
"> > > {: .solution}\n"
"> > {: .challenge}\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> `gapminder` データセットで、それぞれの国ごとにループするスクリプトを書き、\n"
"> 国が 'B' で始まるかどうかをテストし、平均余命が50歳以下の場合、平均余命を\n"
"> 時間ごとの移り変わりで示した線グラフを書きましょう。\n"
">\n"
"> > ## チャレンジ5の解答\n"
"> >\n"
"> > シェルのレッスンで紹介した`grep` コマンドを「B」で始まる国を見つけるために使います。\n"
"> > まず、これをどうやって使うかを理解しましょう。\n"
"> > シェル節に従って、以下を試してみようと思うかもしれません：\n"
"> > \n"
"> > ~~~\n"
"> > grep(\"^B\", unique(gapminder$country))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > でも、このコマンドを演算すると、順序なし因子変数 `country` の「B」で始まる要素番号を返します。\n"
"> > 値を得るためには、 `grep` コマンドの`value=TRUE` オプションを加える必要があります：\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > grep(\"^B\", unique(gapminder$country), value=TRUE)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > これらの国々をcandidateCountriesと呼ぶ変数に蓄積し、その変数のそれぞれをループするようにしましょう。\n"
"> > そのループの中で、それぞれの国の平均余命を演算子、もし平均余命が50歳未満でったら、平均余命の進展をみるために、`with()` と`subset()`を使い、base-plotを用いてプロットしましょう：\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > thresholdValue <- 50\n"
"> > candidateCountries <- grep(\"^B\", unique(gapminder$country), value=TRUE)\n"
"> > \n"
"> > for( iCountry in candidateCountries){\n"
"> >     tmp <- mean(subset(gapminder, country==iCountry)$lifeExp)\n"
"> >     \n"
"> >     if(tmp < thresholdValue){\n"
"> >         cat(\"Average Life Expectancy in\", iCountry, \"is less than\", thresholdValue, \"plotting life expectancy graph... \\n\")\n"
"> >         \n"
"> >         with(subset(gapminder, country==iCountry),\n"
"> >                 plot(year,lifeExp,\n"
"> >                      type=\"o\",\n"
"> >                      main = paste(\"Life Expectancy in\", iCountry, \"over time\"),\n"
"> >                      ylab = \"Life Expectancy\",\n"
"> >                      xlab = \"Year\"\n"
"> >                    ) # end plot\n"
"> >               ) # end with\n"
"> >     } # end for loop\n"
"> >     rm(tmp)\n"
"> >  }```\n"
"> > > {: .solution}\n"
"> > {: .challenge}\n"
"> > ~~~\n"
"> > {: .language-r}"

# Front Matter
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 08-plot-ggplot2.md in _episodes_rmd/\n"
"title: Creating Publication-Quality Graphics with ggplot2\n"
"teaching: 60\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I create publication-quality graphics in R?\"\n"
"objectives:\n"
"- \"To be able to use ggplot2 to generate publication quality graphics.\"\n"
"- \"To apply geometry, aesthetic, and statisics layers to a ggplot plot.\"\n"
"- \"To manipulate the aesthetics of a plot usng different colors, shapes, and lines.\"\n"
"- \"To improve data visualization through transforming scales and paneling by group.\"\n"
"- \"To save a plot created with ggplot to disk.\"\n"
"keypoints:\n"
"- \"Use `ggplot2` to create plots.\"\n"
"- \"Think about graphics in layers: aesthetics, geometry, statistics, scale transformation, and grouping.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 08-plot-ggplot2.md in _episodes_rmd/\n"
"title: ggplot2 を用いたパブリッシュ出来る品質のグラフィックスの作成\n"
"teaching: 60\n"
"exercises: 20\n"
"questions:\n"
"- \"R でパブリッシュ出来る品質のグラフィックを作成するにはどうすればよいですか？\"\n"
"objectives:\n"
"- \"ggplot2 を用いたパブリッシュ可能なグラフィックスの生成\"\n"
"- \"ジオメトリ（点、線などの形状）、エステティック（審美）、および統計のレイヤーを ggplot プロットに適用出来るようになりましょう。\"\n"
"- \"様々な色、形、線を用いた、プロットの審美面の操作が出来るようになりましょう。\"\n"
"- \"スケール変換とグループ化による、より良いデータ視覚化が出来るようになりましょう。\"\n"
"- \"ggplot で作成したプロットのディスク保存が出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"プロットを作成するために`ggplot2`を用います\"\n"
"- \"エステティック、ジオメトリ、統計、スケール変換、グループ化など、レイヤー単位でグラフィックスを考えてみましょう。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:23
msgid ""
"Plotting our data is one of the best ways to\n"
"quickly explore it and the various relationships\n"
"between variables."
msgstr "データをプロットすることは、データとその変数間の様々な関係をクイックに探索する最良の方法の一つです。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:27
msgid ""
"There are three main plotting systems in R,\n"
"the [base plotting system][base], the [lattice][lattice]\n"
"package, and the [ggplot2][ggplot2] package."
msgstr ""
"Rには、主に3つのプロットシステムがあります。\n"
"[R組み込みplot関数][base]、 [lattice][lattice]\n"
"パッケージ、[ggplot2][ggplot2] パッケージです。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:31
msgid ""
"[base]: http://www.statmethods.net/graphs/index.html\n"
"[lattice]: http://www.statmethods.net/advgraphs/trellis.html\n"
"[ggplot2]: http://www.statmethods.net/advgraphs/ggplot2.html"
msgstr ""
"[base]: http://www.statmethods.net/graphs/index.html\n"
"[lattice]: http://www.statmethods.net/advgraphs/trellis.html\n"
"[ggplot2]: http://www.statmethods.net/advgraphs/ggplot2.html"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:35
msgid ""
"Today we'll be learning about the ggplot2 package, because\n"
"it is the most effective for creating publication quality\n"
"graphics."
msgstr ""
"今回、私たちはggplot2パッケージについて学んでいきます。\n"
"なぜなら、ggplot2パッケージは出版品質並のグラフィック作成に最も効果的だからです。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:39
msgid ""
"ggplot2 is built on the grammar of graphics, the idea that any plot can be\n"
"expressed from the same set of components: a **data** set, a\n"
"**coordinate system**, and a set of **geoms**--the visual representation of data\n"
"points."
msgstr ""
"ggplot2はthe grammar of graphics(グラフィックス文法)に基づいており、\n"
"一貫した構成記述体系（データセット、座標系、そして一連の配置）でプロットを\n"
"表現することができます。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:44
msgid ""
"The key to understanding ggplot2 is thinking about a figure in layers.\n"
"This idea may be familiar to you if you have used image editing programs like Photoshop, Illustrator, or\n"
"Inkscape."
msgstr ""
"ggplot2を理解するための鍵は、レイヤーについて考えることです。\n"
"このアイディアは、Photoshop、Illustrator、Inkscapeなどの画像編集ソフトを使用する場面でお馴染みかもしれません。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:48
msgid "Let's start off with an example:"
msgstr "それでは、例題から始めましょう。:"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:51
msgid ""
"~~~\n"
"library(\"ggplot2\")\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point()\n"
"~~~"
msgstr ""
"~~~\n"
"library(\"ggplot2\")\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:58
msgid "<img src=\"../fig/rmd-08-lifeExp-vs-gdpPercap-scatter-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lifeExp-vs-gdpPercap-scatter-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:60
msgid ""
"So the first thing we do is call the `ggplot` function. This function lets R\n"
"know that we're creating a new plot, and any of the arguments we give the\n"
"`ggplot` function are the *global* options for the plot: they apply to all\n"
"layers on the plot."
msgstr ""
"最初に行うことは`ggplot`関数を呼び出すことです。\n"
"この関数は、新しいプロットを作成していることをRに知らせます。\n"
"`ggplot`関数に与える引数は、いずれもそのプロットのグローバルオプションであり、すべてのレイヤーに適用されます。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:65
msgid ""
"We've passed in two arguments to `ggplot`. First, we tell `ggplot` what data we\n"
"want to show on our figure, in this example the gapminder data we read in\n"
"earlier. For the second argument we passed in the `aes` function, which\n"
"tells `ggplot` how variables in the **data** map to *aesthetic* properties of\n"
"the figure, in this case the **x** and **y** locations. Here we told `ggplot` we\n"
"want to plot the \"gdpPercap\" column of the gapminder data frame on the x-axis, and\n"
"the \"lifeExp\" column on the y-axis. Notice that we didn't need to explicitly\n"
"pass `aes` these columns (e.g. `x = gapminder[, \"gdpPercap\"]`), this is because\n"
"`ggplot` is smart enough to know to look in the **data** for that column!"
msgstr ""
"ggplotに2つの引数を渡しました。\n"
"一つ目の引数は、`ggplot`に、どのデータを図に表示するかを示します。この例は、前に読み込んだgapminderデータです。\n"
"二つ目の引数には、`aes` 関数を渡しました。\n"
"この関数は、データの変数が図のエステティック属性にどのようにマッピングされるか`ggplot`に指示します。\n"
"この場合では、**x** と**y**を指定しています。\n"
"ここでは、`ggplot`に対して、x軸にgapminderデータフレームの“gdpPercap”列を、\n"
"y軸には“lifeExp”列をプロットするように指示しました。\n"
"`ggplot`がその列のデータを調べるのに十分な知識を持っているため、これらの列に明示的に`aes`を渡す必要はありません。\n"
"（例えば`x = gapminder [、 \"gdpPercap\"]`など。）"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:75
msgid "By itself, the call to `ggplot` isn't enough to draw a figure:"
msgstr "以下のように、ggplotを呼び出すだけでは図を描くことはできません。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:78
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:83
msgid "<img src=\"../fig/rmd-08-unnamed-chunk-2-1.png\" title=\"plot of chunk unnamed-chunk-2\" alt=\"plot of chunk unnamed-chunk-2\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-unnamed-chunk-2-1.png\" title=\"plot of chunk unnamed-chunk-2\" alt=\"plot of chunk unnamed-chunk-2\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:85
msgid ""
"We need to tell `ggplot` how we want to visually represent the data, which we\n"
"do by adding a new **geom** layer. In our example, we used `geom_point`, which\n"
"tells `ggplot` we want to visually represent the relationship between **x** and\n"
"**y** as a scatterplot of points:"
msgstr ""
"`ggplot`にデータを視覚的に表現する方法を指示する必要があります。\n"
"これは新しい**geom**レイヤを追加することで行います。\n"
"この例では、`geom_point`を使用しました。\n"
"これは`ggplot`に点の散布図としてxとyの関係を視覚的に表現するように指示します。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:91
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point()\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:97
msgid "<img src=\"../fig/rmd-08-lifeExp-vs-gdpPercap-scatter2-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter2\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter2\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lifeExp-vs-gdpPercap-scatter2-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter2\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter2\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:100
msgid ""
">\n"
"> Modify the example so that the figure shows how life expectancy has\n"
"> changed over time:\n"
">\n"
"> \n"
"> ~~~\n"
"> ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> Hint: the gapminder dataset has a column called \"year\", which should appear\n"
"> on the x-axis.\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > Here is one possible solution:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = year, y = lifeExp)) + geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch1-sol-1.png\" title=\"plot of chunk ch1-sol\" alt=\"plot of chunk ch1-sol\" style=\"display: block; margin: auto;\" />\n"
"> >"
msgstr ""
">\n"
"> 次の例を変更して、時間とともに平均余命がどのように変化しているかを図示して下さい。\n"
"> changed over time:\n"
">\n"
"> \n"
"> ~~~\n"
"> ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> ヒント：gapminderデータセットには「year」という列がありますので、\n"
">「year」列をx軸に指定して下さい。\n"
">\n"
"\n"
"> > ## チャレンジ1の回答例\n"
"> >\n"
"> > これは１つの回答例です。:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = year, y = lifeExp)) + geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch1-sol-1.png\" title=\"plot of chunk ch1-sol\" alt=\"plot of chunk ch1-sol\" style=\"display: block; margin: auto;\" />\n"
"> >"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:128
msgid ""
">\n"
"> ## Challenge 2\n"
">\n"
"> In the previous examples and challenge we've used the `aes` function to tell\n"
"> the scatterplot **geom** about the **x** and **y** locations of each point.\n"
"> Another *aesthetic* property we can modify is the point *color*. Modify the\n"
"> code from the previous challenge to **color** the points by the \"continent\"\n"
"> column. What trends do you see in the data? Are they what you expected?\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > In the previous examples and challenge we've used the `aes` function to tell\n"
"> > the scatterplot **geom** about the **x** and **y** locations of each point.\n"
"> > Another *aesthetic* property we can modify is the point *color*. Modify the\n"
"> > code from the previous challenge to **color** the points by the \"continent\"\n"
"> > column. What trends do you see in the data? Are they what you expected?\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = year, y = lifeExp, color=continent)) +\n"
"> >   geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch2-sol-1.png\" title=\"plot of chunk ch2-sol\" alt=\"plot of chunk ch2-sol\" style=\"display: block; margin: auto;\" />\n"
"> >"
msgstr ""
">\n"
"> ## チャレンジ ２\n"
">\n"
">先の例題とチャレンジでは、`aes` 関数を使用して、各点の**x**と**y**の位置について散布図**geom**を指定しました。\n"
">修正できるもう1つのエステティック属性は、点の色です。\n"
">先のチャレンジのコードを修正して、“continent” 列で点に色付けして下さい。\n"
">データにどはどのような傾向が見られますか？\n"
">それらの傾向は、あなたが期待したものですか？\n"
">\n"
"> > ## チャレンジ 2の回答例\n"
"> >\n"
">>先の例題とチャレンジでは、`aes` 関数を使用して、各点の**x**と**y**の位置について散布図**geom**を指定しました。\n"
">>修正できるもう1つのエステティック属性は、点の色です。\n"
">>先のチャレンジのコードを修正して、“continent” 列で点に色付けして下さい。\n"
">>データにどはどのような傾向が見られますか？\n"
">>それらの傾向は、あなたが期待したものですか？\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = year, y = lifeExp, color=continent)) +\n"
"> >   geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch2-sol-1.png\" title=\"plot of chunk ch2-sol\" alt=\"plot of chunk ch2-sol\" style=\"display: block; margin: auto;\" />\n"
"> >"

# header
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:158
msgid "## Layers"
msgstr "## レイヤー"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:160
msgid ""
"Using a scatterplot probably isn't the best for visualizing change over time.\n"
"Instead, let's tell `ggplot` to visualize the data as a line plot:"
msgstr ""
"散布図を使用することは、時間経過による変化を視覚化するのに、おそらく最適ではありません。\n"
"代わりに、データを線グラフとして可視化するようggplotに指示しましょう。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:164
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +\n"
"  geom_line()\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +\n"
"  geom_line()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:170
msgid "<img src=\"../fig/rmd-08-lifeExp-line-1.png\" title=\"plot of chunk lifeExp-line\" alt=\"plot of chunk lifeExp-line\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lifeExp-line-1.png\" title=\"plot of chunk lifeExp-line\" alt=\"plot of chunk lifeExp-line\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:172
msgid ""
"Instead of adding a `geom_point` layer, we've added a `geom_line` layer. We've\n"
"added the **by** *aesthetic*, which tells `ggplot` to draw a line for each\n"
"country."
msgstr ""
"`geom_point`レイヤーを追加する代わりに、`geom_line`レイヤーを追加しました。\n"
"*by**エステティックを追加し、各国ごとに線を描くよう`ggplot`に指示します。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:176
msgid ""
"But what if we want to visualize both lines and points on the plot? We can\n"
"simply add another layer to the plot:"
msgstr ""
"しかし、線と点の両方をプロット上に視覚化したい場合はどうすればよいでしょうか？\n"
"プロットに別のレイヤーを追加するだけです。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:180
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +\n"
"  geom_line() + geom_point()\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +\n"
"  geom_line() + geom_point()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:186
msgid "<img src=\"../fig/rmd-08-lifeExp-line-point-1.png\" title=\"plot of chunk lifeExp-line-point\" alt=\"plot of chunk lifeExp-line-point\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lifeExp-line-point-1.png\" title=\"plot of chunk lifeExp-line-point\" alt=\"plot of chunk lifeExp-line-point\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:188
msgid ""
"It's important to note that each layer is drawn on top of the previous layer. In\n"
"this example, the points have been drawn *on top of* the lines. Here's a\n"
"demonstration:"
msgstr ""
"各レイヤーは、前のレイヤーの上に描画されることに注意することが重要です。\n"
"この例では、点は線の上に描画されています。これはデモです。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:193
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country)) +\n"
"  geom_line(aes(color=continent)) + geom_point()\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country)) +\n"
"  geom_line(aes(color=continent)) + geom_point()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:199
msgid "<img src=\"../fig/rmd-08-lifeExp-layer-example-1-1.png\" title=\"plot of chunk lifeExp-layer-example-1\" alt=\"plot of chunk lifeExp-layer-example-1\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lifeExp-layer-example-1-1.png\" title=\"plot of chunk lifeExp-layer-example-1\" alt=\"plot of chunk lifeExp-layer-example-1\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:201
msgid ""
"In this example, the *aesthetic* mapping of **color** has been moved from the\n"
"global plot options in `ggplot` to the `geom_line` layer so it no longer applies\n"
"to the points. Now we can clearly see that the points are drawn on top of the\n"
"lines."
msgstr ""
"この例では、**color**エステティックマッピングが、`ggplot`のグローバルプロットオプションから`geom_line`レイヤーに移動されたため、\n"
"点には色が適用されなくなりました。\n"
"これで、点が線の上に描画されていることがわかります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:206
msgid "> ## Tip: Setting an aesthetic to a value instead of a mapping"
msgstr "> ## ヒント：エステティック属性に、マッピングの代わりに値を設定する"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:207
msgid ""
">\n"
"> So far, we've seen how to use an aesthetic (such as **color**) as a *mapping* to a variable in the data. For example, when we use `geom_line(aes(color=continent))`, ggplot will give a different color to each continent. But what if we want to change the colour of all lines to blue? You may think that `geom_line(aes(color=\"blue\"))` should work, but it doesn't. Since we don't want to create a mapping to a specific variable, we simply move the color specification outside of the `aes()` function, like this: `geom_line(color=\"blue\")`."
msgstr ""
">\n"
"> これまでは、データの変数のマッピングとしてエステティック属性（**color**など）を使用する方法を見てきました。たとえば、`geom_line(aes(color = continent))`を使用すると、`ggplot`は各大陸に異なる色を与えます。\n"
"しかし、すべての線の色を青に変更したい場合はどうすればよいでしょうか？\n"
"'geom_line(aes(color = \"blue\"))'で動作すると思うかもしれませんが、そうではありません。\n"
"特定の変数へのマッピングを作成したくないので、`geom_line(color=\"blue\")`のように`aes()`関数を除いて色の指定をします。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:212
msgid ""
">\n"
"> Switch the order of the point and line layers from the previous example. What\n"
"> happened?\n"
">\n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > Switch the order of the point and line layers from the previous example. What\n"
"> > happened?\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country)) +\n"
"> >  geom_point() + geom_line(aes(color=continent))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch3-sol-1.png\" title=\"plot of chunk ch3-sol\" alt=\"plot of chunk ch3-sol\" style=\"display: block; margin: auto;\" />\n"
"> >\n"
"> > The lines now get drawn over the points!\n"
"> >"
msgstr ""
">\n"
"> 先の例の点と線のレイヤーの順序を入れ替えてみましょう。何が起こりますか？\n"
">\n"
"> > ## チャレンジ 3の回答例\n"
"> >\n"
"> > 先の例の点と線のレイヤーの順序を入れ替えてみましょう。何が起こりますか？\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country)) +\n"
"> >  geom_point() + geom_line(aes(color=continent))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch3-sol-1.png\" title=\"plot of chunk ch3-sol\" alt=\"plot of chunk ch3-sol\" style=\"display: block; margin: auto;\" />\n"
"> >\n"
"> > The lines now get drawn over the points!\n"
"> >"

# header
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:235
msgid "## Transformations and statistics"
msgstr "## 変換と統計"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:237
msgid ""
"Ggplot also makes it easy to overlay statistical models over the data. To\n"
"demonstrate we'll go back to our first example:"
msgstr ""
"ggplot2を使用すると、統計モデルをデータに適用することが容易になります。\n"
"デモのために、最初の例に戻ります。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:241
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, color=continent)) +\n"
"  geom_point()\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, color=continent)) +\n"
"  geom_point()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:247
msgid "<img src=\"../fig/rmd-08-lifeExp-vs-gdpPercap-scatter3-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter3\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter3\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lifeExp-vs-gdpPercap-scatter3-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter3\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter3\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:249
msgid ""
"Currently it's hard to see the relationship between the points due to some strong\n"
"outliers in GDP per capita. We can change the scale of units on the x axis using\n"
"the *scale* functions. These control the mapping between the data values and\n"
"visual values of an aesthetic. We can also modify the transparency of the\n"
"points, using the *alpha* function, which is especially helpful when you have\n"
"a large amount of data which is very clustered."
msgstr ""
"現在、1人当たりGDPのいくつかの強い外れ値により、点と点の関係性を見ることが難しくなっています。\n"
"*scale*関数を用いて、x軸上の単位のスケールを変更することができます。\n"
"これらは、データの値とエステティックな視覚的値との間のマッピングを制御します。\n"
"また、*alpha*関数を使用して点の透明度を変更することができます。\n"
"これは、大量のデータが非常に密集している場合、特に役立ちます。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:257
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point(alpha = 0.5) + scale_x_log10()\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point(alpha = 0.5) + scale_x_log10()\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:263
msgid "<img src=\"../fig/rmd-08-axis-scale-1.png\" title=\"plot of chunk axis-scale\" alt=\"plot of chunk axis-scale\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-axis-scale-1.png\" title=\"plot of chunk axis-scale\" alt=\"plot of chunk axis-scale\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:265
msgid ""
"The `log10` function applied a transformation to the values of the gdpPercap\n"
"column before rendering them on the plot, so that each multiple of 10 now only\n"
"corresponds to an increase in 1 on the transformed scale, e.g. a GDP per capita\n"
"of 1,000 is now 3 on the y axis, a value of 10,000 corresponds to 4 on the y\n"
"axis and so on. This makes it easier to visualize the spread of data on the\n"
"x-axis."
msgstr ""
"gdpPercap列の値をプロットに描画する前に、`log10`関数による変換を適用したので、\n"
"10の各倍数は変換されたスケールの1の増加に対応します。\n"
"例えば、1人当たりGDPの値1,000はy軸の３、10,000はy軸の４に対応します。\n"
"これにより、x軸上のデータの広がりを視覚化することが容易になります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:272
msgid "> ## Tip Reminder: Setting an aesthetic to a value instead of a mapping"
msgstr "> ## ヒントのリマインダ：エステティック属性に、マッピングの代わりに値を設定する"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:273
msgid ""
">\n"
"> Notice that we used `geom_point(alpha = 0.5)`. As the previous tip mentioned, using a setting outside of the `aes()` function will cause this value to be used for all points, which is what we want in this case. But just like any other aesthetic setting, *alpha* can also be mapped to a variable in the data. For example, we can give a different transparency to each continent with `geom_point(aes(alpha = continent))`."
msgstr ""
">\n"
"> `geom_point(alpha = 0.5)`を使用したことに注目してください。\n"
"先のヒントで触れたように、`aes()`関数以外の設定を使用すると、この値がすべての点で使用されます。\n"
"この場合、この値が必要です。しかし、他のエステティック設定と同様に、*alpha*はデータ内の変数にマッピングすることもできます。\n"
"たとえば、`geom_point(aes(alpha = continent))`を使用して、各大陸に異なる透明度を与えることができます。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:277
msgid ""
"We can fit a simple relationship to the data by adding another layer,\n"
"`geom_smooth`:"
msgstr "`geom_smooth`という別のレイヤーを追加することで、データに単純な関係を当てはめることができます。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:281
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point() + scale_x_log10() + geom_smooth(method=\"lm\")\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point() + scale_x_log10() + geom_smooth(method=\"lm\")\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:287
msgid "<img src=\"../fig/rmd-08-lm-fit-1.png\" title=\"plot of chunk lm-fit\" alt=\"plot of chunk lm-fit\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lm-fit-1.png\" title=\"plot of chunk lm-fit\" alt=\"plot of chunk lm-fit\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:289
msgid ""
"We can make the line thicker by *setting* the **size** aesthetic in the\n"
"`geom_smooth` layer:"
msgstr ""
"`geom_smooth`レイヤーで**size**エステティック属性を設定することによって、\n"
"線を太くすることができます。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:293
msgid ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point() + scale_x_log10() + geom_smooth(method=\"lm\", size=1.5)\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"  geom_point() + scale_x_log10() + geom_smooth(method=\"lm\", size=1.5)\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:299
msgid "<img src=\"../fig/rmd-08-lm-fit2-1.png\" title=\"plot of chunk lm-fit2\" alt=\"plot of chunk lm-fit2\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-lm-fit2-1.png\" title=\"plot of chunk lm-fit2\" alt=\"plot of chunk lm-fit2\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:301
msgid ""
"There are two ways an *aesthetic* can be specified. Here we *set* the **size**\n"
"aesthetic by passing it as an argument to `geom_smooth`. Previously in the\n"
"lesson we've used the `aes` function to define a *mapping* between data\n"
"variables and their visual representation."
msgstr ""
"エステティック属性を指定する方法は2つあります。\n"
"ここでは、**size**エステティック属性の設定を'geom_smooth'の引数として渡しています。\n"
"これまでのレッスンでは、データの変数とその視覚表現の間のマッピングを定義するために`aes`関数を使用しました。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:306
msgid "> ## Challenge 4a"
msgstr "> ## チャレンジ 4a"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:307
msgid ""
">\n"
"> Modify the color and size of the points on the point layer in the previous\n"
"> example.\n"
">\n"
"> Hint: do not use the `aes` function.\n"
">\n"
"> > ## Solution to challenge 4a\n"
"> >\n"
"> > Modify the color and size of the points on the point layer in the previous\n"
"> > example.\n"
"> >\n"
"> > Hint: do not use the `aes` function.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"> >  geom_point(size=3, color=\"orange\") + scale_x_log10() +\n"
"> >  geom_smooth(method=\"lm\", size=1.5)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch4a-sol-1.png\" title=\"plot of chunk ch4a-sol\" alt=\"plot of chunk ch4a-sol\" style=\"display: block; margin: auto;\" />"
msgstr ""
">\n"
">前の例を用いて、点レイヤー上の点の色とサイズを変更して下さい。\n"
">\n"
">\n"
">ヒント：'aes'関数を使用しないでください。\n"
">\n"
"> > ## チャレンジ 4aの回答例\n"
"> >\n"
"> >前の例を用いて、点レイヤー上の点の色とサイズを変更して下さい。\n"
"> >\n"
"> >\n"
"> > ヒント：'aes'関数を使用しないでください。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +\n"
"> >  geom_point(size=3, color=\"orange\") + scale_x_log10() +\n"
"> >  geom_smooth(method=\"lm\", size=1.5)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch4a-sol-1.png\" title=\"plot of chunk ch4a-sol\" alt=\"plot of chunk ch4a-sol\" style=\"display: block; margin: auto;\" />"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:333
msgid "> ## Challenge 4b"
msgstr "> ## チャレンジ 4b"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:334
msgid ""
">\n"
"> Modify your solution to Challenge 4a so that the\n"
"> points are now a different shape and are colored by continent with new\n"
"> trendlines.  Hint: The color argument can be used inside the aesthetic.\n"
">\n"
"> > ## Solution to challenge 4b\n"
"> >\n"
"> > Modify Challenge 4 so that the points are now a different shape and are\n"
"> > colored by continent with new trendlines.\n"
"> >\n"
"> > Hint: The color argument can be used inside the aesthetic.\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n"
"> > geom_point(size=3, shape=17) + scale_x_log10() +\n"
"> > geom_smooth(method=\"lm\", size=1.5)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> ><img src=\"../fig/rmd-08-ch4b-sol-1.png\" title=\"plot of chunk ch4b-sol\" alt=\"plot of chunk ch4b-sol\" style=\"display: block; margin: auto;\" />"
msgstr ""
">\n"
"> 点を異なる形にし、また大陸毎に色分けと傾向線の描画をするために、\n"
"> チャレンジ4aの回答を変更して下さい。\n"
"> ヒント：color引数は、aes関数内で使用することができます。\n"
">\n"
"> > ## チャレンジ 4bの回答例\n"
"> >\n"
"> > 点を異なる形にし、また大陸毎に色分けと傾向線の描画をするために、\n"
"> > チャレンジ4aの回答を変更して下さい。\n"
"> >\n"
"> > ヒント：color引数は、aes関数内で使用することができます。\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n"
"> > geom_point(size=3, shape=17) + scale_x_log10() +\n"
"> > geom_smooth(method=\"lm\", size=1.5)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> ><img src=\"../fig/rmd-08-ch4b-sol-1.png\" title=\"plot of chunk ch4b-sol\" alt=\"plot of chunk ch4b-sol\" style=\"display: block; margin: auto;\" />"

# header
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:359
msgid "## Multi-panel figures"
msgstr "## 複数パネルの図"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:361
msgid ""
"Earlier we visualized the change in life expectancy over time across all\n"
"countries in one plot. Alternatively, we can split this out over multiple panels\n"
"by adding a layer of **facet** panels. Focusing only on those countries with\n"
"names that start with the letter \"A\" or \"Z\"."
msgstr ""
"先の例では、すべての国の平均余命の変化を1つのプロットで視覚化しました。\n"
"一方、**facet**パネルのレイヤーを追加することで、複数のパネルに分割することができます。\n"
"名前が“A”または“Z”で始まる国にのみ焦点を当てます。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:366
#: r-novice-gapminder/_episodes/10-functions.md:92
#: r-novice-gapminder/_episodes/10-functions.md:631
msgid "> ## Tip"
msgstr "> ## ヒント"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:367
msgid ""
">\n"
"> We start by subsetting the data.  We use the `substr` function to\n"
"> pull out a part of a character string; in this case, the letters that occur\n"
"> in positions `start` through `stop`, inclusive, of the `gapminder$country`\n"
"> vector. The operator `%in%` allows us to make multiple comparisons rather\n"
"> than write out long subsetting conditions (in this case,\n"
"> `starts.with %in% c(\"A\", \"Z\")` is equivalent to\n"
"> `starts.with == \"A\" | starts.with == \"Z\"`)"
msgstr ""
">\n"
">データのサブセットからスタートします。 \n"
">`substr`関数を使って文字列の一部を抜き出します。\n"
">この場合、`gapminder$country`ベクトルの`start`から`stop`の位置にある文字が抜き出されます。\n"
">演算子`％in％`では、長いサブセット条件を書き出すのではなく、複数の比較を行うことができます。\n"
">（この場合、`starts.with %in% c(\"A\", \"Z\")`は`starts.with == \"A\" | starts.with == \"Z\"`です。）"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:379
msgid ""
"~~~\n"
"starts.with <- substr(gapminder$country, start = 1, stop = 1)\n"
"az.countries <- gapminder[starts.with %in% c(\"A\", \"Z\"), ]\n"
"ggplot(data = az.countries, aes(x = year, y = lifeExp, color=continent)) +\n"
"  geom_line() + facet_wrap( ~ country)\n"
"~~~"
msgstr ""
"~~~\n"
"starts.with <- substr(gapminder$country, start = 1, stop = 1)\n"
"az.countries <- gapminder[starts.with %in% c(\"A\", \"Z\"), ]\n"
"ggplot(data = az.countries, aes(x = year, y = lifeExp, color=continent)) +\n"
"  geom_line() + facet_wrap( ~ country)\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:387
msgid "<img src=\"../fig/rmd-08-facet-1.png\" title=\"plot of chunk facet\" alt=\"plot of chunk facet\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-facet-1.png\" title=\"plot of chunk facet\" alt=\"plot of chunk facet\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:389
msgid ""
"The `facet_wrap` layer took a \"formula\" as its argument, denoted by the tilde\n"
"(~). This tells R to draw a panel for each unique value in the country column\n"
"of the gapminder dataset."
msgstr ""
"`facet_wrap`レイヤーは引数として“formula”をとり、チルダ(~)で表記されます。\n"
"これは、gapminderデータセットのcountry列にある各々の一意な値のパネルを描画するようRに指示します。"

# header
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:393
msgid "## Modifying text"
msgstr "## テキストの変更"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:395
msgid ""
"To clean this figure up for a publication we need to change some of the text\n"
"elements. The x-axis is too cluttered, and the y axis should read\n"
"\"Life expectancy\", rather than the column name in the data frame."
msgstr ""
"分析結果の発表に向けてこの図を整理するにあたり、いくつかのテキスト要素を変更する必要があります。 \n"
"x軸はあまりにも雑然としており、y軸はデータフレームの列名ではなく、“Life expectancy”と読み替えるべきです。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:399
msgid ""
"We can do this by adding a couple of different layers. The **theme** layer\n"
"controls the axis text, and overall text size. Labels for the axes, plot \n"
"title and any legend can be set using the `labs` function. Legend titles\n"
"are set using the same names we used in the `aes` specification. Thus below\n"
"the color legend title is set using `color = \"Continent\"`, while the title \n"
"of a fill legend would be set using `fill = \"MyTitle\"`. "
msgstr ""
"これを行うには、いくつかのレイヤーを追加する必要があります。\n"
"**theme** レイヤーは、軸テキストと全体のテキストサイズを制御します。\n"
"軸、プロットタイトル、および任意の凡例のラベルは、`labs`関数を使用して設定できます。\n"
"凡例のタイトルは、`aes`関数で使用したものと同じ名前を設定します。\n"
"したがって、color凡例のタイトルは`color = \"Continent\"`を用いて設定され、\n"
"fill凡例のタイトルは`fill = \"任意のタイトル\"`を使用して設定されます。"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:407
msgid ""
"~~~\n"
"ggplot(data = az.countries, aes(x = year, y = lifeExp, color=continent)) +\n"
"  geom_line() + facet_wrap( ~ country) +\n"
"  labs(\n"
"    x = \"Year\",              # x axis title\n"
"    y = \"Life expectancy\",   # y axis title\n"
"    title = \"Figure 1\",      # main title of figure\n"
"    color = \"Continent\"      # title of legend\n"
"  ) +\n"
"  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())\n"
"~~~"
msgstr ""
"~~~\n"
"ggplot(data = az.countries, aes(x = year, y = lifeExp, color=continent)) +\n"
"  geom_line() + facet_wrap( ~ country) +\n"
"  labs(\n"
"    x = \"Year\",              # x axis title\n"
"    y = \"Life expectancy\",   # y axis title\n"
"    title = \"Figure 1\",      # main title of figure\n"
"    color = \"Continent\"      # title of legend\n"
"  ) +\n"
"  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:420
msgid "<img src=\"../fig/rmd-08-theme-1.png\" title=\"plot of chunk theme\" alt=\"plot of chunk theme\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-08-theme-1.png\" title=\"plot of chunk theme\" alt=\"plot of chunk theme\" style=\"display: block; margin: auto;\" />"

# header
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:423
msgid "## Exporting the plot"
msgstr "## プロットのエクスポート"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:425
msgid "The `ggsave()` function allows you to export a plot created with ggplot. You can specify the dimension and resolution of your plot by adjusting the appropriate arguments (`width`, `height` and `dpi`) to create high quality graphics for publication. In order to save the plot from above, we first assign it to a variable `lifeExp_plot`, then tell `ggsave` to save that plot in `png` format to a directory called `results`. (Make sure you have a `results/` folder in your working directory.)"
msgstr ""
"`ggsave()`関数を使用すると、ggplotで作成したプロットをエクスポートすることができます。\n"
"出版、公開のための高品質グラフィックを作成するために、\n"
"適切な引数（`width`、`height`、および`dpi`）を調整してプロットの寸法と解像度を指定できます。\n"
"上記のように、そのプロットを保存するには、最初にそのプロットを変数`lifeExp_plot`に割り当て、\n"
"`ggsave`にそのプロットを`png`形式で`results`というディレクトリに保存するよう指示します。\n"
"（作業ディレクトリに'results /'フォルダがあることを確認してください。）"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:428
msgid ""
"~~~\n"
"lifeExp_plot <- ggplot(data = az.countries, aes(x = year, y = lifeExp, color=continent)) +\n"
"  geom_line() + facet_wrap( ~ country) +\n"
"  labs(\n"
"    x = \"Year\",              # x axis title\n"
"    y = \"Life expectancy\",   # y axis title\n"
"    title = \"Figure 1\",      # main title of figure\n"
"    color = \"Continent\"      # title of legend\n"
"  ) +\n"
"  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())\n"
"\n"
"ggsave(filename = \"results/lifeExp.png\", plot = lifeExp_plot, width = 12, height = 10, dpi = 300, units = \"cm\")\n"
"~~~"
msgstr ""
"~~~\n"
"lifeExp_plot <- ggplot(data = az.countries, aes(x = year, y = lifeExp, color=continent)) +\n"
"  geom_line() + facet_wrap( ~ country) +\n"
"  labs(\n"
"    x = \"Year\",              # x axis title\n"
"    y = \"Life expectancy\",   # y axis title\n"
"    title = \"Figure 1\",      # main title of figure\n"
"    color = \"Continent\"      # title of legend\n"
"  ) +\n"
"  theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())\n"
"\n"
"ggsave(filename = \"results/lifeExp.png\", plot = lifeExp_plot, width = 12, height = 10, dpi = 300, units = \"cm\")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:445
msgid ""
"~~~\n"
"Error in grDevices::dev.off(): QuartzBitmap_Output - unable to open file 'results/lifeExp.png'\n"
"~~~"
msgstr ""
"~~~\n"
"Error in grDevices::dev.off(): QuartzBitmap_Output - unable to open file 'results/lifeExp.png'\n"
"~~~"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:450
msgid "There are two nice things about `ggsave`. First, it defaults to the last plot, so if you omit the `plot` argument it will automatically save the last plot you created with `ggplot`. Secondly, it tries to determine the format you want to save your plot in from the file extension you provide for the filename (for example `.png` or `.pdf`). If you need to, you can specify the format explicitly in the `device` argument."
msgstr ""
"`ggsave`には素晴らしい点が二つあります。\n"
"一つ目は、最後のプロットがデフォルトになるので、`plot`引数を省略すると、`ggplot`で作成した最後のプロットが自動的に保存されることです。\n"
"二つ目は、ファイル名に指定したファイル拡張子（例：`.png`または`.pdf`）からプロットを保存するフォーマットを決定しようとします。\n"
"必要な場合は、`device`引数に明示的にフォーマットを指定できます。"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:452
msgid ""
"This is a taste of what you can do with `ggplot2`. RStudio provides a\n"
"really useful [cheat sheet][cheat] of the different layers available, and more\n"
"extensive documentation is available on the [ggplot2 website][ggplot-doc].\n"
"Finally, if you have no idea how to change something, a quick Google search will\n"
"usually send you to a relevant question and answer on Stack Overflow with reusable\n"
"code to modify!"
msgstr ""
"これまで学んできたことは、ggplot2でできることの一部です。\n"
"RStudioは、利用可能な様々なレイヤーについて、とても便利なチートシートを提供しています。\n"
"更なる詳細なドキュメントは、[ggplot2のwebサイト][ggplot-doc]で入手できます。\n"
"最後に、何を変更すればよいかわからない場合、Google検索を実行してみて下さい。\n"
"大抵の場合、Stack Overflow(スタックオーバーフロー)上で適切な質問と回答が、再利用可能なコードと共に見つかります！"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:459
msgid ""
"[cheat]: http://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf\n"
"[ggplot-doc]: http://docs.ggplot2.org/current/"
msgstr ""
"[cheat]: http://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf\n"
"[ggplot-doc]: http://docs.ggplot2.org/current/"

#: r-novice-gapminder/_episodes/08-plot-ggplot2.md:464
msgid ""
">\n"
"> Create a density plot of GDP per capita, filled by continent.\n"
">\n"
"> Advanced:\n"
">  - Transform the x axis to better visualise the data spread.\n"
">  - Add a facet layer to panel the density plots by year.\n"
">\n"
"> > ## Solution to challenge 5\n"
"> >\n"
"> > Create a density plot of GDP per capita, filled by continent.\n"
"> >\n"
"> > Advanced:\n"
"> >  - Transform the x axis to better visualise the data spread.\n"
"> >  - Add a facet layer to panel the density plots by year.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap, fill=continent)) +\n"
"> >  geom_density(alpha=0.6) + facet_wrap( ~ year) + scale_x_log10()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch5-sol-1.png\" title=\"plot of chunk ch5-sol\" alt=\"plot of chunk ch5-sol\" style=\"display: block; margin: auto;\" />"
msgstr ""
">\n"
"> 大陸で塗りつぶされた、1人当たりGDPの密度プロットを作成して下さい。\n"
">\n"
"> 上級編\n"
">  - データの広がりをより良く視覚化するためにx軸を変換して下さい。\n"
">  - １年毎の密度プロットをパネルに追加して下さい。\n"
">\n"
"> > ## チャレンジ 5の回答例\n"
"> >\n"
"> > 大陸で塗りつぶされた、1人当たりGDPの密度プロットを作成して下さい。\n"
"> >\n"
"> >上級編\n"
">>  - データの広がりをより良く視覚化するためにx軸を変換して下さい。\n"
">>  - １年毎の密度プロットをパネルに追加して下さい。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap, fill=continent)) +\n"
"> >  geom_density(alpha=0.6) + facet_wrap( ~ year) + scale_x_log10()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-08-ch5-sol-1.png\" title=\"plot of chunk ch5-sol\" alt=\"plot of chunk ch5-sol\" style=\"display: block; margin: auto;\" />"

# Front Matter
#: r-novice-gapminder/_episodes/09-vectorization.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 09-vectorization.md in _episodes_rmd/\n"
"title: Vectorization\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I operate on all the elements of a vector at once?\"\n"
"objectives:\n"
"- \"To understand vectorized operations in R.\"\n"
"keypoints:\n"
"- \"Use vectorized operations instead of loops.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 09-vectorization.md in _episodes_rmd/\n"
"title: ベクトル化\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"ベクトルの全要素はどうしたら一括で操作出来ますか?\"\n"
"objectives:\n"
"- \"R におけるベクトル化された操作を理解しましょう。\"\n"
"keypoints:\n"
"- \"ループの代わりにベクトル化を利用します。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/09-vectorization.md:18
msgid ""
"Most of R's functions are vectorized, meaning that the function will\n"
"operate on all elements of a vector without needing to loop through\n"
"and act on each element one at a time. This makes writing code more\n"
"concise, easy to read, and less error prone."
msgstr ""
"Rの関数はほとんどがベクトル化されており、関数はベクトルの全ての要素を最初から操作してくれるので、ベクトルの要素ごとにいちいちループする必要がありません。\n"
"おかげで簡潔で読み易く、エラーの少ないコードを書くことができます。"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:25
msgid ""
"~~~\n"
"x <- 1:4\n"
"x * 2\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 1:4\n"
"x * 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:33
msgid ""
"~~~\n"
"[1] 2 4 6 8\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2 4 6 8\n"
"~~~"

#: r-novice-gapminder/_episodes/09-vectorization.md:38
msgid "The multiplication happened to each element of the vector."
msgstr "積はベクトルの要素ごとに実行されました。"

#: r-novice-gapminder/_episodes/09-vectorization.md:40
msgid "We can also add two vectors together:"
msgstr "2つのベクトルを足し合わせることもできます:"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:43
msgid ""
"~~~\n"
"y <- 6:9\n"
"x + y\n"
"~~~"
msgstr ""
"~~~\n"
"y <- 6:9\n"
"x + y\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:51
msgid ""
"~~~\n"
"[1]  7  9 11 13\n"
"~~~"
msgstr ""
"~~~\n"
"[1]  7  9 11 13\n"
"~~~"

#: r-novice-gapminder/_episodes/09-vectorization.md:56
msgid "Each element of `x` was added to its corresponding element of `y`:"
msgstr "この場合 `x` の各要素が対応する `y`の要素に足されます。"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:59
msgid ""
"~~~\n"
"x:  1  2  3  4\n"
"    +  +  +  +\n"
"y:  6  7  8  9\n"
"---------------\n"
"    7  9 11 13\n"
"~~~"
msgstr ""
"~~~\n"
"x:  1  2  3  4\n"
"    +  +  +  +\n"
"y:  6  7  8  9\n"
"---------------\n"
"    7  9 11 13\n"
"~~~"

#: r-novice-gapminder/_episodes/09-vectorization.md:70
msgid ""
">\n"
"> Let's try this on the `pop` column of the `gapminder` dataset.\n"
">\n"
"> Make a new column in the `gapminder` data frame that\n"
"> contains population in units of millions of people.\n"
"> Check the head or tail of the data frame to make sure\n"
"> it worked.\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > Let's try this on the `pop` column of the `gapminder` dataset.\n"
"> >\n"
"> > Make a new column in the `gapminder` data frame that\n"
"> > contains population in units of millions of people.\n"
"> > Check the head or tail of the data frame to make sure\n"
"> > it worked.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > gapminder$pop_millions <- gapminder$pop / 1e6\n"
"> > head(gapminder)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >       country year      pop continent lifeExp gdpPercap pop_millions\n"
"> > 1 Afghanistan 1952  8425333      Asia  28.801  779.4453     8.425333\n"
"> > 2 Afghanistan 1957  9240934      Asia  30.332  820.8530     9.240934\n"
"> > 3 Afghanistan 1962 10267083      Asia  31.997  853.1007    10.267083\n"
"> > 4 Afghanistan 1967 11537966      Asia  34.020  836.1971    11.537966\n"
"> > 5 Afghanistan 1972 13079460      Asia  36.088  739.9811    13.079460\n"
"> > 6 Afghanistan 1977 14880372      Asia  38.438  786.1134    14.880372\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> `gapminder` データセットの `pop` 列でこれに挑戦してみましょう。\n"
">\n"
"> `gapminder` データフレームに百万人単位の人口を示す列を追加しましょう。\n"
"> データフレームの先頭か最後を確認して、追加に成功したか確認しましょう。\n"
">\n"
"> > ## チャレンジ1の解答\n"
"> >\n"
"> > `gapminder` データセットの `pop` 列でこれをやってみましょう。\n"
"> >\n"
"> > `gapminder` データフレームに百万人単位の人口を示す列を追加しましょう。\n"
"> > データフレームの先頭か最後を確認して、追加に成功したか確認しましょう。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > gapminder$pop_millions <- gapminder$pop / 1e6\n"
"> > head(gapminder)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >       country year      pop continent lifeExp gdpPercap pop_millions\n"
"> > 1 Afghanistan 1952  8425333      Asia  28.801  779.4453     8.425333\n"
"> > 2 Afghanistan 1957  9240934      Asia  30.332  820.8530     9.240934\n"
"> > 3 Afghanistan 1962 10267083      Asia  31.997  853.1007    10.267083\n"
"> > 4 Afghanistan 1967 11537966      Asia  34.020  836.1971    11.537966\n"
"> > 5 Afghanistan 1972 13079460      Asia  36.088  739.9811    13.079460\n"
"> > 6 Afghanistan 1977 14880372      Asia  38.438  786.1134    14.880372\n"
"> > ~~~\n"
"> > {: .output}"

#: r-novice-gapminder/_episodes/09-vectorization.md:111
msgid ""
">\n"
"> On a single graph, plot population, in\n"
"> millions, against year, for all countries. Don't worry about\n"
">identifying which country is which.\n"
">\n"
"> Repeat the exercise, graphing only for China, India, and\n"
">Indonesia. Again, don't worry about which is which.\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > Refresh your plotting skills by plotting population in millions against year.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(gapminder, aes(x = year, y = pop_millions)) +\n"
"> >  geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-09-ch2-sol-1.png\" title=\"plot of chunk ch2-sol\" alt=\"plot of chunk ch2-sol\" style=\"display: block; margin: auto;\" />\n"
"> > \n"
"> > ~~~\n"
"> > countryset <- c(\"China\",\"India\",\"Indonesia\")\n"
"> > ggplot(gapminder[gapminder$country %in% countryset,],\n"
"> >        aes(x = year, y = pop_millions)) +\n"
"> >   geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-09-ch2-sol-2.png\" title=\"plot of chunk ch2-sol\" alt=\"plot of chunk ch2-sol\" style=\"display: block; margin: auto;\" />"
msgstr ""
">\n"
"> 一つの図に、100万人単位の人口を年ごとにプロットしてみましょう。\n"
"> 国ごとの区別はつかなくていいです。\n"
">\n"
"> 練習を繰り返して、中国とインドとインドネシアだけを含む図を\n"
"> 作ってみましょう。\n"
"> 先程と同じく、国ごとの区別はつかなくていいです。\n"
">\n"
"> > ## チャレンジ2の解答\n"
"> >\n"
"> >   100万人単位の人口を年ごとにプロットして、作図方法を復習しましょう。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(gapminder, aes(x = year, y = pop_millions)) +\n"
"> >  geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-09-ch2-sol-1.png\" title=\"plot of chunk ch2-sol\" alt=\"plot of chunk ch2-sol\" style=\"display: block; margin: auto;\" />\n"
"> > \n"
"> > ~~~\n"
"> > countryset <- c(\"China\",\"India\",\"Indonesia\")\n"
"> > ggplot(gapminder[gapminder$country %in% countryset,],\n"
"> >        aes(x = year, y = pop_millions)) +\n"
"> >   geom_point()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-09-ch2-sol-2.png\" title=\"plot of chunk ch2-sol\" alt=\"plot of chunk ch2-sol\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/09-vectorization.md:145
msgid ""
"Comparison operators, logical operators, and many functions are also\n"
"vectorized:"
msgstr "比較演算子や論理演算子に加え、多くの関数もベクトル化されています。"

#: r-novice-gapminder/_episodes/09-vectorization.md:149
msgid "**Comparison operators**"
msgstr "**比較演算子**"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:152
msgid ""
"~~~\n"
"x > 2\n"
"~~~"
msgstr ""
"~~~\n"
"x > 2\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:159
msgid ""
"~~~\n"
"[1] FALSE FALSE  TRUE  TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] FALSE FALSE  TRUE  TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/09-vectorization.md:164
msgid "**Logical operators**"
msgstr "**論理演算子**"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:166
msgid ""
"~~~\n"
"a <- x > 3  # or, for clarity, a <- (x > 3)\n"
"a\n"
"~~~"
msgstr ""
"~~~\n"
"a <- x > 3  # より明確な書き方は a <- (x > 3)\n"
"a\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:174
msgid ""
"~~~\n"
"[1] FALSE FALSE FALSE  TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"[1] FALSE FALSE FALSE  TRUE\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:179
msgid "> ## Tip: some useful functions for logical vectors"
msgstr "> ## Tip: 論理ベクトルに使える便利な関数"

#: r-novice-gapminder/_episodes/09-vectorization.md:180
msgid ""
">\n"
"> `any()` will return `TRUE` if *any* element of a vector is `TRUE`\n"
"> `all()` will return `TRUE` if *all* elements of a vector are `TRUE`"
msgstr ""
">\n"
"> `any()`  はベクトルの要素に一つでも `TRUE` があれば `TRUE` を返します。\n"
"> `all()` はベクトルの要素が全て `TRUE` であれば `TRUE` を返します。"

#: r-novice-gapminder/_episodes/09-vectorization.md:185
msgid "Most functions also operate element-wise on vectors:"
msgstr "ほとんどの関数はベクトルを要素ごとに処理します。"

#: r-novice-gapminder/_episodes/09-vectorization.md:187
msgid "**Functions**"
msgstr "**関数**"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:189
msgid ""
"~~~\n"
"x <- 1:4\n"
"log(x)\n"
"~~~"
msgstr ""
"~~~\n"
"x <- 1:4\n"
"log(x)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:197
msgid ""
"~~~\n"
"[1] 0.0000000 0.6931472 1.0986123 1.3862944\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 0.0000000 0.6931472 1.0986123 1.3862944\n"
"~~~"

#: r-novice-gapminder/_episodes/09-vectorization.md:202
msgid "Vectorized operations work element-wise on matrices:"
msgstr "ベクトル化された操作は行列を要素ごとに処理します:"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:205
msgid ""
"~~~\n"
"m <- matrix(1:12, nrow=3, ncol=4)\n"
"m * -1\n"
"~~~"
msgstr ""
"~~~\n"
"m <- matrix(1:12, nrow=3, ncol=4)\n"
"m * -1\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/09-vectorization.md:213
msgid ""
"~~~\n"
"     [,1] [,2] [,3] [,4]\n"
"[1,]   -1   -4   -7  -10\n"
"[2,]   -2   -5   -8  -11\n"
"[3,]   -3   -6   -9  -12\n"
"~~~"
msgstr ""
"~~~\n"
"     [,1] [,2] [,3] [,4]\n"
"[1,]   -1   -4   -7  -10\n"
"[2,]   -2   -5   -8  -11\n"
"[3,]   -3   -6   -9  -12\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:222
msgid "> ## Tip: element-wise vs. matrix multiplication"
msgstr "> ## Tip: 要素ごとの積 vs. 行列の積"

#: r-novice-gapminder/_episodes/09-vectorization.md:223
msgid ""
">\n"
"> Very important: the operator `*` gives you element-wise multiplication!\n"
"> To do matrix multiplication, we need to use the `%*%` operator:\n"
">\n"
"> \n"
"> ~~~\n"
"> m %*% matrix(1, nrow=4, ncol=1)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">      [,1]\n"
"> [1,]   22\n"
"> [2,]   26\n"
"> [3,]   30\n"
"> ~~~"
msgstr ""
">\n"
"> 非常に重要: `*` 演算子は要素ごとの積を行います！\n"
"> 行列の積を行うには `%*%` 演算子を使う必要があります:\n"
">\n"
"> \n"
"> ~~~\n"
"> m %*% matrix(1, nrow=4, ncol=1)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">      [,1]\n"
"> [1,]   22\n"
"> [2,]   26\n"
"> [3,]   30\n"
"> ~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:242
#: r-novice-gapminder/_episodes/09-vectorization.md:243
#: r-novice-gapminder/_episodes/09-vectorization.md:244
#: r-novice-gapminder/_episodes/09-vectorization.md:249
#: r-novice-gapminder/_episodes/09-vectorization.md:250
#: r-novice-gapminder/_episodes/09-vectorization.md:251
msgid "> "
msgstr "> "

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:245
#: r-novice-gapminder/_episodes/09-vectorization.md:247
#: r-novice-gapminder/_episodes/09-vectorization.md:252
#: r-novice-gapminder/_episodes/09-vectorization.md:255
msgid "> ~~~"
msgstr "> ~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:246
msgid "> matrix(1:4, nrow=1) %*% matrix(1:4, ncol=1)"
msgstr "> matrix(1:4, nrow=1) %*% matrix(1:4, ncol=1)"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:248
msgid "> {: .language-r}"
msgstr "> {: .language-r}"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:253
msgid ">      [,1]"
msgstr ">      [,1]"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/09-vectorization.md:254
msgid "> [1,]   30"
msgstr "> [1,]   30"

#: r-novice-gapminder/_episodes/09-vectorization.md:257
msgid ""
">\n"
"> For more on matrix algebra, see the [Quick-R reference\n"
"> guide](http://www.statmethods.net/advstats/matrix.html)"
msgstr ""
">\n"
"> 更に行列代数について知るには [Quick-R reference guide](http://www.statmethods.net/advstats/matrix.html)\n"
"> を参照して下さい"

#: r-novice-gapminder/_episodes/09-vectorization.md:264
msgid ""
">\n"
"> Given the following matrix:\n"
">\n"
"> \n"
"> ~~~\n"
"> m <- matrix(1:12, nrow=3, ncol=4)\n"
"> m\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">      [,1] [,2] [,3] [,4]\n"
"> [1,]    1    4    7   10\n"
"> [2,]    2    5    8   11\n"
"> [3,]    3    6    9   12\n"
"> ~~~"
msgstr ""
">\n"
"> 以下の行列が与えられたとします:\n"
">\n"
"> \n"
"> ~~~\n"
"> m <- matrix(1:12, nrow=3, ncol=4)\n"
"> m\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">      [,1] [,2] [,3] [,4]\n"
"> [1,]    1    4    7   10\n"
"> [2,]    2    5    8   11\n"
"> [3,]    3    6    9   12\n"
"> ~~~"

#: r-novice-gapminder/_episodes/09-vectorization.md:283
msgid ""
">\n"
"> Write down what you think will happen when you run:\n"
">\n"
"> 1. `m ^ -1`\n"
"> 2. `m * c(1, 0, -1)`\n"
"> 3. `m > c(0, 20)`\n"
"> 4. `m * c(1, 0, -1, 2)`\n"
">\n"
"> Did you get the output you expected? If not, ask a helper!\n"
">\n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > Given the following matrix:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > m <- matrix(1:12, nrow=3, ncol=4)\n"
"> > m\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >      [,1] [,2] [,3] [,4]\n"
"> > [1,]    1    4    7   10\n"
"> > [2,]    2    5    8   11\n"
"> > [3,]    3    6    9   12\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> >\n"
"> > Write down what you think will happen when you run:\n"
"> >\n"
"> > 1. `m ^ -1`\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >           [,1]      [,2]      [,3]       [,4]\n"
"> > [1,] 1.0000000 0.2500000 0.1428571 0.10000000\n"
"> > [2,] 0.5000000 0.2000000 0.1250000 0.09090909\n"
"> > [3,] 0.3333333 0.1666667 0.1111111 0.08333333\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > 2. `m * c(1, 0, -1)`\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >      [,1] [,2] [,3] [,4]\n"
"> > [1,]    1    4    7   10\n"
"> > [2,]    0    0    0    0\n"
"> > [3,]   -3   -6   -9  -12\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > 3. `m > c(0, 20)`\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >       [,1]  [,2]  [,3]  [,4]\n"
"> > [1,]  TRUE FALSE  TRUE FALSE\n"
"> > [2,] FALSE  TRUE FALSE  TRUE\n"
"> > [3,]  TRUE FALSE  TRUE FALSE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >"
msgstr ""
">\n"
"> 以下を実行すると何が起きるか書いて下さい:\n"
">\n"
"> 1. `m ^ -1`\n"
"> 2. `m * c(1, 0, -1)`\n"
"> 3. `m > c(0, 20)`\n"
"> 4. `m * c(1, 0, -1, 2)`\n"
">\n"
"> 思った通りの出力が得られましたか？違っていたことがあれば、ヘルパーになぜ間違っていたか聞いてみましょう。\n"
">\n"
"> > ## チャレンジ3の解答\n"
"> >\n"
"> > 以下の行列が与えられたとします:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > m <- matrix(1:12, nrow=3, ncol=4)\n"
"> > m\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >      [,1] [,2] [,3] [,4]\n"
"> > [1,]    1    4    7   10\n"
"> > [2,]    2    5    8   11\n"
"> > [3,]    3    6    9   12\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> >\n"
"> > 以下を実行すると何が起きるか書き出して下さい:\n"
"> >\n"
"> > 1. `m ^ -1`\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >           [,1]      [,2]      [,3]       [,4]\n"
"> > [1,] 1.0000000 0.2500000 0.1428571 0.10000000\n"
"> > [2,] 0.5000000 0.2000000 0.1250000 0.09090909\n"
"> > [3,] 0.3333333 0.1666667 0.1111111 0.08333333\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > 2. `m * c(1, 0, -1)`\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >      [,1] [,2] [,3] [,4]\n"
"> > [1,]    1    4    7   10\n"
"> > [2,]    0    0    0    0\n"
"> > [3,]   -3   -6   -9  -12\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > 3. `m > c(0, 20)`\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >       [,1]  [,2]  [,3]  [,4]\n"
"> > [1,]  TRUE FALSE  TRUE FALSE\n"
"> > [2,] FALSE  TRUE FALSE  TRUE\n"
"> > [3,]  TRUE FALSE  TRUE FALSE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >"

#: r-novice-gapminder/_episodes/09-vectorization.md:355
msgid ""
">\n"
"> We're interested in looking at the sum of the\n"
"> following sequence of fractions:\n"
">\n"
"> \n"
"> ~~~\n"
">  x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> This would be tedious to type out, and impossible for high values of\n"
"> n.  Use vectorisation to compute x when n=100. What is the sum when\n"
"> n=10,000?\n"
">\n"
"> > ##  Challenge 4\n"
"> >\n"
"> > We're interested in looking at the sum of the\n"
"> > following sequence of fractions:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >  x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > This would be tedious to type out, and impossible for\n"
"> > high values of n.\n"
"> > Can you use vectorisation to compute x, when n=100?\n"
"> > How about when n=10,000?\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > sum(1/(1:100)^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.634984\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > sum(1/(1:1e04)^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > n <- 10000\n"
"> > sum(1/(1:n)^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can also obtain the same results using a function:\n"
"> > \n"
"> > ~~~\n"
"> > inverse_sum_of_squares <- function(n) {\n"
"> >   sum(1/(1:n)^2)\n"
"> > }\n"
"> > inverse_sum_of_squares(100)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.634984\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > inverse_sum_of_squares(10000)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > n <- 10000\n"
"> > inverse_sum_of_squares(n)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >"
msgstr ""
">\n"
"> 以下の分数の数列の総和が知りたいとします:\n"
">\n"
"> \n"
"> ~~~\n"
">  x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> これをタイプするのは面倒な上に、nが大きいと不可能です。\n"
"> ベクトル化を用いて n = 100 の場合を計算しましょう。\n"
"> n = 10,000 の時の総和はいくつでしょうか？\n"
">\n"
"> > ##  チャレンジ4\n"
"> >\n"
"> > 以下の分数の数列の総和が知りたいとします:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >  x = 1/(1^2) + 1/(2^2) + 1/(3^2) + ... + 1/(n^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > これをタイプするのは面倒な上に、nが大きいと不可能です。\n"
"> > ベクトル化を用いて n = 100 の場合を計算しましょう。\n"
"> > n = 10,000 の時の総和はいくつでしょうか？\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > sum(1/(1:100)^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.634984\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > sum(1/(1:1e04)^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > n <- 10000\n"
"> > sum(1/(1:n)^2)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > 同じ結果を関数を利用して得ることもできます:\n"
"> > \n"
"> > ~~~\n"
"> > inverse_sum_of_squares <- function(n) {\n"
"> >   sum(1/(1:n)^2)\n"
"> > }\n"
"> > inverse_sum_of_squares(100)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.634984\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > inverse_sum_of_squares(10000)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > n <- 10000\n"
"> > inverse_sum_of_squares(n)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] 1.644834\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >"

# Front Matter
#: r-novice-gapminder/_episodes/10-functions.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 10-functions.md in _episodes_rmd/\n"
"title: Functions Explained\n"
"teaching: 45\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I write a new function in R?\"\n"
"objectives:\n"
"- \"Define a function that takes arguments.\"\n"
"- \"Return a value from a function.\"\n"
"- \"Check argument conditions with `stopifnot()` in functions.\"\n"
"- \"Test a function.\"\n"
"- \"Set default values for function arguments.\"\n"
"- \"Explain why we should divide programs into small, single-purpose functions.\"\n"
"keypoints:\n"
"- \"Use `function` to define a new function in R.\"\n"
"- \"Use parameters to pass values into functions.\"\n"
"- \"Use `stopifnot()` to flexibly check function arguments in R.\"\n"
"- \"Load functions into programs using `source()`.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 10-functions.md in _episodes_rmd/\n"
"title: 関数について\n"
"teaching: 45\n"
"exercises: 15\n"
"questions:\n"
"- \"R で関数はどのように書きますか?\"\n"
"objectives:\n"
"- \"引数を持つ関数を定義しましょう。\"\n"
"- \"関数から値を返しましょう。\"\n"
"- \"関数の中で `stopifnot()` を使って引数の状態を検査しましょう。\"\n"
"- \"関数をテストしましょう。\"\n"
"- \"関数の引数に既定値を指定しましょう。\"\n"
"- \"なぜプログラムを小さな一つの目的を持つ関数に分けるべきか説明出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"`function` を使って R で新しい関数を定義する。\"\n"
"- \"パラメーターを用いて関数に値を渡す。\"\n"
"- \"`stopifnot()` を使って R の関数の引数を柔軟に検査する。\"\n"
"- \"`source()` を使ってプログラムに関数を読み込む。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/10-functions.md:27
msgid ""
"If we only had one data set to analyze, it would probably be faster to load the\n"
"file into a spreadsheet and use that to plot simple statistics. However, the\n"
"gapminder data is updated periodically, and we may want to pull in that new\n"
"information later and re-run our analysis again. We may also obtain similar data\n"
"from a different source in the future."
msgstr ""
"分析したいデータセットが一つだけなら、ファイルを表計算ソフトで読み込み、単純な統計値をプロットした方が早いでしょう。\n"
"しかし、gapmider データは定期的に更新されるので、後から新しい情報を読み込み分析し直したくなります。\n"
"また、将来的には似たようなデータを違う場所から入手することもあるでしょう。"

#: r-novice-gapminder/_episodes/10-functions.md:33
msgid ""
"In this lesson, we'll learn how to write a function so that we can repeat\n"
"several operations with a single command."
msgstr "この講義では関数の書き方を学ぶことで、同じ操作を一つのコマンドで繰り返せるようになります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/10-functions.md:36
msgid "> ## What is a function?"
msgstr "> ## 関数とは何でしょう？"

#: r-novice-gapminder/_episodes/10-functions.md:37
msgid ""
">\n"
"> Functions gather a sequence of operations into a whole, preserving it for\n"
"> ongoing use. Functions provide:\n"
">\n"
"> * a name we can remember and invoke it by\n"
"> * relief from the need to remember the individual operations\n"
"> * a defined set of inputs and expected outputs\n"
"> * rich connections to the larger programming environment\n"
">\n"
"> As the basic building block of most programming languages, user-defined\n"
"> functions constitute \"programming\" as much as any single abstraction can. If\n"
"> you have written a function, you are a computer programmer."
msgstr ""
">\n"
"> 関数は連続した操作を一つに纏め、後から使うときのために保存しておきます。\n"
"> 関数は以下の機能を提供します。:\n"
">\n"
"> * 記憶可能で実行可能な名前\n"
"> * 各操作を覚える必要性からの解放\n"
"> * 入力と出力の組み合わせを定義\n"
"> * より大規模なプログラミング環境への接続性の高さ\n"
">\n"
"> ほとんどのプログラミング言語における基本的なブロックの構築がそうであるように\n"
"> ユーザーが定義する関数はどんな単純なことであれ抽象化する「プログラミング」により成り立ちます。\n"
"> 関数を書いた時点であなたはコンピュータープログラマーです。"

# header
#: r-novice-gapminder/_episodes/10-functions.md:51
msgid "## Defining a function"
msgstr "## 関数を定義しましょう。"

#: r-novice-gapminder/_episodes/10-functions.md:53
msgid ""
"Let's open a new R script file in the `functions/` directory and call it\n"
"functions-lesson.R."
msgstr "`functions/` ディレクトリ内に新しく functions-lesson.R と名付けた R スクリプトを作成して開きましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:57
msgid ""
"~~~\n"
"my_sum <- function(a, b) {\n"
"  the_sum <- a + b\n"
"  return(the_sum)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"my_sum <- function(a, b) {\n"
"  the_sum <- a + b\n"
"  return(the_sum)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:65
msgid ""
"Let's define a function `fahr_to_kelvin()` that converts temperatures from\n"
"Fahrenheit to Kelvin:"
msgstr "華氏をケルビンに変換する `fahr_to_kelvin()` という関数を定義しましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:69
#: r-novice-gapminder/_episodes/10-functions.md:220
msgid ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:77
msgid ""
"We define `fahr_to_kelvin()` by assigning it to the output of `function`. The\n"
"list of argument names are contained within parentheses.   Next, the\n"
"[body]({{ page.root }}/reference/#function-body) of the function--the\n"
"statements that are executed when it runs--is contained within curly braces\n"
"(`{}`). The statements in the body are indented by two spaces. This makes the\n"
"code easier to read but does not affect how the code operates."
msgstr ""
"`fahr_to_kelvin()` を定義するには、`fahr_to_kelvin` に `function` の出力を指定します。\n"
"引数名の一覧は括弧の中に書きます。\n"
"次に関数の[本文 (body)]({{ page.root }}/reference/#function-body) として\n"
"走らせた時の実行内容を波括弧 (`{}`) の中に記述します。\n"
"本文はスペース二つでインデントしておきます。\n"
"これによりコードの操作内容を変更せずに可読性を向上させます。"

#: r-novice-gapminder/_episodes/10-functions.md:84
msgid "It is useful to think of creating functions like writing a cookbook. First you define the \"ingredients\" that your function needs. In this case, we only need one ingredient to use our function: \"temp\". After we list our ingredients, we then say what we will do with them, in this case, we are taking our ingredient and applying a set of mathmatical operators to it. "
msgstr ""
"関数を作ることは料理本を書くようなものだと思うといいでしょう。\n"
"まず、必要な「材料」を決めます。\n"
"今回の関数に必要な材料は「temp」一つだけです。\n"
"材料を列挙したら、材料を使って何をするかを決めます。\n"
"今回は材料に対して数学的な演算を行います。"

#: r-novice-gapminder/_episodes/10-functions.md:86
msgid ""
"When we call the function, the values we pass to it as arguments are assigned to\n"
"those variables so that we can use them inside the function. Inside the\n"
"function, we use a [return\n"
"statement]({{ page.root }}/reference/#return-statement) to send a result back to\n"
"whoever asked for it."
msgstr ""
"関数を呼び出す時、引数に指定した値は関数内で用いられる変数に与えられます。\n"
"関数の中では関数を呼び出した相手に結果を送るために [return\n"
"文]({{ page.root }}/reference/#return-statement) を用います。"

#: r-novice-gapminder/_episodes/10-functions.md:93
msgid ""
">\n"
"> One feature unique to R is that the return statement is not required.\n"
"> R automatically returns whichever variable is on the last line of the body\n"
"> of the function. But for clarity, we will explicitly define the\n"
"> return statement."
msgstr ""
">\n"
"> return 文が不要なことは R の変わった特徴の一つです。\n"
"> R では関数の本文の最終行に記述された変数が自動的に返り値になります。\n"
"> しかし、わかりやすくするために return 文を明示的に記述します。"

#: r-novice-gapminder/_episodes/10-functions.md:101
msgid ""
"Let's try running our function.\n"
"Calling our own function is no different from calling any other function:"
msgstr ""
"関数を実行してみましょう。\n"
"自分の関数を呼び出す方法は他の関数を呼び出す方法と同じです。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:105
msgid ""
"~~~\n"
"# freezing point of water\n"
"fahr_to_kelvin(32)\n"
"~~~"
msgstr ""
"~~~\n"
"# 水の凝固点\n"
"fahr_to_kelvin(32)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:113
#: r-novice-gapminder/_episodes/10-functions.md:281
msgid ""
"~~~\n"
"[1] 273.15\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 273.15\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:119
msgid ""
"~~~\n"
"# boiling point of water\n"
"fahr_to_kelvin(212)\n"
"~~~"
msgstr ""
"~~~\n"
"# 水の沸点\n"
"fahr_to_kelvin(212)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:127
msgid ""
"~~~\n"
"[1] 373.15\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 373.15\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:133
msgid ""
">\n"
"> Write a function called `kelvin_to_celsius()` that takes a temperature in\n"
"> Kelvin and returns that temperature in Celsius.\n"
">\n"
"> Hint: To convert from Kelvin to Celsius you subtract 273.15\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > Write a function called `kelvin_to_celsius` that takes a temperature in Kelvin\n"
"> > and returns that temperature in Celsius\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > kelvin_to_celsius <- function(temp) {\n"
"> >  celsius <- temp - 273.15\n"
"> >  return(celsius)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> ケルビンを入力するとセ氏を返す `kelvin_to_celsius()` という関数を書いて下さい。\n"
">\n"
"> ヒント: ケルビンをセ氏に換算するには 273.15 を引きます。\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> >\n"
"> > ケルビンを入力するとセ氏を返す `kelvin_to_celsius()` という関数を書いて下さい。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > kelvin_to_celsius <- function(temp) {\n"
"> >  celsius <- temp - 273.15\n"
"> >  return(celsius)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"

# header
#: r-novice-gapminder/_episodes/10-functions.md:155
msgid "## Combining functions"
msgstr "## 関数を組み合わせましょう"

#: r-novice-gapminder/_episodes/10-functions.md:157
msgid ""
"The real power of functions comes from mixing, matching and combining them\n"
"into ever-larger chunks to get the effect we want."
msgstr "関数の真髄を発揮するのは、関数を混ぜ合わせ組み合わせてより多きな塊にすることで、望み通りの効果を得る時です。"

#: r-novice-gapminder/_episodes/10-functions.md:160
msgid ""
"Let's define two functions that will convert temperature from Fahrenheit to\n"
"Kelvin, and Kelvin to Celsius:"
msgstr "華氏をケルビンに変換する関数とケルビンをセ氏に変換する関数の2つを定義しましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:164
msgid ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"\n"
"kelvin_to_celsius <- function(temp) {\n"
"  celsius <- temp - 273.15\n"
"  return(celsius)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"\n"
"kelvin_to_celsius <- function(temp) {\n"
"  celsius <- temp - 273.15\n"
"  return(celsius)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:178
msgid ""
">\n"
"> Define the function to convert directly from Fahrenheit to Celsius,\n"
"> by reusing the two functions above (or using your own functions if you\n"
"> prefer).\n"
">\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > Define the function to convert directly from Fahrenheit to Celsius,\n"
"> > by reusing these two functions above\n"
"> >\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > fahr_to_celsius <- function(temp) {\n"
"> >   temp_k <- fahr_to_kelvin(temp)\n"
"> >   result <- kelvin_to_celsius(temp_k)\n"
"> >   return(result)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 先の2つの関数を再利用するか自分で定義した関数を利用して\n"
"> 華氏を直接セ氏に変換する関数を定義して下さい。\n"
">\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> > 先の2つの関数を再利用して華氏を直接セ氏に変換する関数を定義して下さい。\n"
"> >\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > fahr_to_celsius <- function(temp) {\n"
"> >   temp_k <- fahr_to_kelvin(temp)\n"
"> >   result <- kelvin_to_celsius(temp_k)\n"
"> >   return(result)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"

# header
#: r-novice-gapminder/_episodes/10-functions.md:202
msgid "## Interlude: Defensive Programming"
msgstr "## 幕間: 防衛的プログラミング"

#: r-novice-gapminder/_episodes/10-functions.md:204
msgid ""
"Now that we've begun to appreciate how writing functions provides an efficient\n"
"way to make R code re-usable and modular, we should note that it is important\n"
"to ensure that functions only work in their intended use-cases. Checking\n"
"function parameters is related to the concept of _defensive programming_.\n"
"Defensive programming encourages us to frequently check conditions and throw an\n"
"error if something is wrong. These checks are referred to as assertion\n"
"statements because we want to assert some condition is `TRUE` before proceeding.\n"
"They make it easier to debug because they give us a better idea of where the\n"
"errors originate."
msgstr ""
"関数を書くことで R のコードを効率的に再利用したりモジュール化する方法を理解し始めたところですが、\n"
"関数は想定した用途でのみ機能するように確実に設計することが重要です。\n"
"関数の引数を検査することは*防衛的プログラミング*の考え方に繋がります。\n"
"防衛的プログラミングでは状況を頻繁に検査し何かおかしなことがあればエラーを返すことを推奨します。\n"
"このような検査は、プログラム実行を継続する前に現状が `TRUE` であることをアサート（表明・断言）するので、アサーション文と呼ばれます。\n"
"アサーション文により、エラーがどこで起きているか分かりやすくなりデバッグが容易になります。"

# header
#: r-novice-gapminder/_episodes/10-functions.md:214
msgid "### Checking conditions with `stopifnot()`"
msgstr "### `stopifnot()` を用いて状態を検査しましょう"

#: r-novice-gapminder/_episodes/10-functions.md:216
msgid ""
"Let's start by re-examining `fahr_to_kelvin()`, our function for converting\n"
"temperatures from Fahrenheit to Kelvin. It was defined like so:"
msgstr ""
"華氏をケルビンに変換する `fahr_to_kelvin()` 関数について再検討してみましょう。\n"
"この関数の定義は以下の通りです。"

#: r-novice-gapminder/_episodes/10-functions.md:228
msgid ""
"For this function to work as intended, the argument `temp` must be a `numeric`\n"
"value; otherwise, the mathematical procedure for converting between the two\n"
"temperature scales will not work. To create an error, we can use the function\n"
"`stop()`. For example, since the argument `temp` must be a `numeric` vector, we\n"
"could check for this condition with an `if` statement and throw an error if the\n"
"condition was violated. We could augment our function above like so:"
msgstr ""
"この関数が意図した通りに機能するには、`temp` 引数は数値でなければなりません。\n"
"さもなくば、片方の温度の尺度からもう一方へ変換する計算過程が機能しません。\n"
"エラーを返すためには、`stop` 関数を使います。\n"
"例えば、`temp` 引数は数値ベクトルである必要があるので、\n"
"`if` 文により `temp` が数値ベクトルであるか確認し、違反していればエラーを返すようにします。\n"
"先述の関数の場合は以下のように増補します。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:236
msgid ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  if (!is.numeric(temp)) {\n"
"    stop(\"temp must be a numeric vector.\")\n"
"  }\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  if (!is.numeric(temp)) {\n"
"    stop(\"temp must be a numeric vector.\")\n"
"  }\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:247
msgid ""
"If we had multiple conditions or arguments to check, it would take many lines\n"
"of code to check all of them. Luckily R provides the convenience function\n"
"`stopifnot()`. We can list as many requirements that should evaluate to `TRUE`;\n"
"`stopifnot()` throws an error if it finds one that is `FALSE`. Listing these\n"
"conditions also serves a secondary purpose as extra documentation for the\n"
"function."
msgstr ""
"複数の状態や引数を検査する必要があると、全てを検査するためのコードは何行にも渡ります。\n"
"幸いなことに R は `stopifnot` という便利な関数を提供しています。\n"
"`TRUE` と評価されるべき要件を必要なだけ列挙すると、\n"
"`stopifnot()` は一つでも `FALSE` がある場合にエラーを返します。\n"
"検査項目を列挙すると、追加のドキュメント化という2つ目の目的としても機能します。"

#: r-novice-gapminder/_episodes/10-functions.md:254
msgid ""
"Let's try out defensive programming with `stopifnot()` by adding assertions to\n"
"check the input to our function `fahr_to_kelvin()`."
msgstr ""
"`stopifnot()` を用いて `fahr_to_kelvin()` に入力を検査するアサーション文を追加し、\n"
"防衛的プログラミングに挑戦しましょう。"

#: r-novice-gapminder/_episodes/10-functions.md:257
msgid ""
"We want to assert the following: `temp` is a numeric vector. We may do that like\n"
"so:"
msgstr ""
"`temp` が数値ベクトルであることをアサートしたいとします。\n"
"以下のようにしましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:261
msgid ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  stopifnot(is.numeric(temp))\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"fahr_to_kelvin <- function(temp) {\n"
"  stopifnot(is.numeric(temp))\n"
"  kelvin <- ((temp - 32) * (5 / 9)) + 273.15\n"
"  return(kelvin)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:270
msgid "It still works when given proper input."
msgstr "入力が適切であればこれでも機能します。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:273
msgid ""
"~~~\n"
"# freezing point of water\n"
"fahr_to_kelvin(temp = 32)\n"
"~~~"
msgstr ""
"~~~\n"
"# 水の凝固点\n"
"fahr_to_kelvin(temp = 32)\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:286
msgid "But fails instantly if given improper input."
msgstr "しかし不適切な入力があるとすぐに失敗します。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:289
msgid ""
"~~~\n"
"# Metric is a factor instead of numeric\n"
"fahr_to_kelvin(temp = as.factor(32))\n"
"~~~"
msgstr ""
"~~~\n"
"# Metric is a factor instead of numeric\n"
"fahr_to_kelvin(temp = as.factor(32))\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:297
msgid ""
"~~~\n"
"Error in fahr_to_kelvin(temp = as.factor(32)): is.numeric(temp) is not TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"Error in fahr_to_kelvin(temp = as.factor(32)): is.numeric(temp) is not TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:303
msgid ""
">\n"
"> Use defensive programming to ensure that our `fahr_to_celsius()` function\n"
"> throws an error immediately if the argument `temp` is specified\n"
"> inappropriately.\n"
">\n"
">\n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > Extend our previous definition of the function by adding in an explicit call\n"
"> > to `stopifnot()`. Since `fahr_to_celsius()` is a composition of two other\n"
"> > functions, checking inside here makes adding checks to the two component\n"
"> > functions redundant.\n"
"> >\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > fahr_to_celsius <- function(temp) {\n"
"> >   stopifnot(!is.numeric(temp))\n"
"> >   temp_k <- fahr_to_kelvin(temp)\n"
"> >   result <- kelvin_to_celsius(temp_k)\n"
"> >   return(result)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> 防衛的プログラミングにより、`fahr_to_celsius()` 関数の `temp` 引数に不適切な\n"
"> 値が指定されたらすぐにエラーを返すよう念押しして下さい。\n"
">\n"
">\n"
"> > ## チャレンジ３の解答\n"
"> >\n"
"> > 明示的に `stopifnot()` を呼ぶことで先述の関数の定義を拡張しましょう。\n"
"> > `fahr_to_celsius()` は2つの他の関数から構成されているので、\n"
">> ここでの検査は2つの関数の検査に追加され冗長になります。\n"
"> >\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > fahr_to_celsius <- function(temp) {\n"
"> >   stopifnot(!is.numeric(temp))\n"
"> >   temp_k <- fahr_to_kelvin(temp)\n"
"> >   result <- kelvin_to_celsius(temp_k)\n"
"> >   return(result)\n"
"> > }\n"
"> > ~~~\n"
"> > {: .language-r}"

# header
#: r-novice-gapminder/_episodes/10-functions.md:330
msgid "## More on combining functions"
msgstr "## もっと関数を組み合わせましょう"

#: r-novice-gapminder/_episodes/10-functions.md:332
msgid ""
"Now, we're going to define a function that calculates the Gross Domestic Product\n"
"of a nation from the data available in our dataset:"
msgstr "ここで我々のデータセットで利用できるデータからある国の国内総生産を計算するための関数を定義します。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:336
msgid ""
"~~~\n"
"# Takes a dataset and multiplies the population column\n"
"# with the GDP per capita column.\n"
"calcGDP <- function(dat) {\n"
"  gdp <- dat$pop * dat$gdpPercap\n"
"  return(gdp)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"# データセットを受け取り、人口の列と一人あたりのGDPをかけます。\n"
"calcGDP <- function(dat) {\n"
"  gdp <- dat$pop * dat$gdpPercap\n"
"  return(gdp)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:346
msgid ""
"We define `calcGDP()` by assigning it to the output of `function`. The list of\n"
"argument names are contained within parentheses. Next, the body of the function \n"
"-- the statements executed when you call the function -- is contained within\n"
"curly braces (`{}`)."
msgstr ""
"`calcGDP()` を定義するために、`function` の結果を `calcGDP` に代入します。\n"
"引数の名前の一覧は括弧に中に書きます。\n"
"次に、本文 -- 関数を読んだ時に実行される命令文 -- は波括弧 (`{}`) の中に書きます。"

#: r-novice-gapminder/_episodes/10-functions.md:351
msgid ""
"We've indented the statements in the body by two spaces. This makes the code\n"
"easier to read but does not affect how it operates."
msgstr ""
"本文中の命令文は2つのスペースでインデントしました。\n"
"これにより関数の動作に影響を及ぼさずに可読性を向上できます。"

#: r-novice-gapminder/_episodes/10-functions.md:354
msgid ""
"When we call the function, the values we pass to it are assigned to the\n"
"arguments, which become variables inside the body of the function."
msgstr ""
"関数を呼び出す時に、関数に渡した値は引数に指定され、\n"
"関数の本文中における変数になります。"

#: r-novice-gapminder/_episodes/10-functions.md:357
msgid ""
"Inside the function, we use the `return()` function to send back the result.\n"
"This `return()` function is optional: R will automatically return the results of\n"
"whatever command is executed on the last line of the function."
msgstr ""
"関数の中では `return()` 関数を用いて結果を返します。\n"
"`return()` 関数は必須ではなく、R は 関数の最終行で実行されたコマンドの結果を自動的に返します。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:363
msgid ""
"~~~\n"
"calcGDP(head(gapminder))\n"
"~~~"
msgstr ""
"~~~\n"
"calcGDP(head(gapminder))\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:370
msgid ""
"~~~\n"
"[1]  6567086330  7585448670  8758855797  9648014150  9678553274 11697659231\n"
"~~~"
msgstr ""
"~~~\n"
"[1]  6567086330  7585448670  8758855797  9648014150  9678553274 11697659231\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:375
msgid ""
"That's not very informative. Let's add some more arguments so we can extract\n"
"that per year and country."
msgstr "これでは情報に乏しいです。いくつか引数を追加して、年ごとと国ごとの情報を得られるようにしましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:379
#: r-novice-gapminder/_episodes/12-plyr.md:24
msgid ""
"~~~\n"
"# Takes a dataset and multiplies the population column\n"
"# with the GDP per capita column.\n"
"calcGDP <- function(dat, year=NULL, country=NULL) {\n"
"  if(!is.null(year)) {\n"
"    dat <- dat[dat$year %in% year, ]\n"
"  }\n"
"  if (!is.null(country)) {\n"
"    dat <- dat[dat$country %in% country,]\n"
"  }\n"
"  gdp <- dat$pop * dat$gdpPercap\n"
"\n"
"  new <- cbind(dat, gdp=gdp)\n"
"  return(new)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"# データセットを受け取り、人口の列と一人あたりのGDPの列をかけます。\n"
"calcGDP <- function(dat, year=NULL, country=NULL) {\n"
"  if(!is.null(year)) {\n"
"    dat <- dat[dat$year %in% year, ]\n"
"  }\n"
"  if (!is.null(country)) {\n"
"    dat <- dat[dat$country %in% country,]\n"
"  }\n"
"  gdp <- dat$pop * dat$gdpPercap\n"
"\n"
"  new <- cbind(dat, gdp=gdp)\n"
"  return(new)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:397
msgid ""
"If you've been writing these functions down into a separate R script\n"
"(a good idea!), you can load in the functions into our R session by using the\n"
"`source()` function:"
msgstr ""
"もしこれらの関数を別の R スクリプトに書いているなら (グッドアイディア！)、\n"
"`source()` 関数を使って関数を R セッションに読み込むことができます。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:402
msgid ""
"~~~\n"
"source(\"functions/functions-lesson.R\")\n"
"~~~"
msgstr ""
"~~~\n"
"source(\"functions/functions-lesson.R\")\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:407
msgid ""
"Ok, so there's a lot going on in this function now. In plain English, the\n"
"function now subsets the provided data by year if the year argument isn't empty,\n"
"then subsets the result by country if the country argument isn't empty. Then it \n"
"calculates the GDP for whatever subset emerges from the previous two steps. The \n"
"function then adds the GDP as a new column to the subsetted data and returns\n"
"this as the final result. You can see that the output is much more informative\n"
"than a vector of numbers."
msgstr ""
"さて、この関数の中では色々なことが起きています。\n"
"平文にすると、この関数は `year` 引数を指定されている場合に、指定した値でデータを絞り込みます。\n"
"次にその結果を、`country` 引数が指定されている場合に指定した値で絞り込みます。\n"
"そしてこの2つの段階を経て現れたデータに対してGDPを計算します。\n"
"更にこの関数は、絞り込んだデータに新しくGDPの列を追加し、最終結果として返します。\n"
"出力が単に数値のベクトルだった時よりもはるかに情報に富んでいることがわかるでしょう。"

#: r-novice-gapminder/_episodes/10-functions.md:415
msgid "Let's take a look at what happens when we specify the year:"
msgstr "`year` を指定した時に何が起きるか見てみましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:418
msgid ""
"~~~\n"
"head(calcGDP(gapminder, year=2007))\n"
"~~~"
msgstr ""
"~~~\n"
"head(calcGDP(gapminder, year=2007))\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:425
msgid ""
"~~~\n"
"       country year      pop continent lifeExp  gdpPercap          gdp\n"
"12 Afghanistan 2007 31889923      Asia  43.828   974.5803  31079291949\n"
"24     Albania 2007  3600523    Europe  76.423  5937.0295  21376411360\n"
"36     Algeria 2007 33333216    Africa  72.301  6223.3675 207444851958\n"
"48      Angola 2007 12420476    Africa  42.731  4797.2313  59583895818\n"
"60   Argentina 2007 40301927  Americas  75.320 12779.3796 515033625357\n"
"72   Australia 2007 20434176   Oceania  81.235 34435.3674 703658358894\n"
"~~~"
msgstr ""
"~~~\n"
"       country year      pop continent lifeExp  gdpPercap          gdp\n"
"12 Afghanistan 2007 31889923      Asia  43.828   974.5803  31079291949\n"
"24     Albania 2007  3600523    Europe  76.423  5937.0295  21376411360\n"
"36     Algeria 2007 33333216    Africa  72.301  6223.3675 207444851958\n"
"48      Angola 2007 12420476    Africa  42.731  4797.2313  59583895818\n"
"60   Argentina 2007 40301927  Americas  75.320 12779.3796 515033625357\n"
"72   Australia 2007 20434176   Oceania  81.235 34435.3674 703658358894\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:436
msgid "Or for a specific country:"
msgstr "また `country` を指定するとどうなるでしょうか。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:439
msgid ""
"~~~\n"
"calcGDP(gapminder, country=\"Australia\")\n"
"~~~"
msgstr ""
"~~~\n"
"calcGDP(gapminder, country=\"Australia\")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:446
msgid ""
"~~~\n"
"     country year      pop continent lifeExp gdpPercap          gdp\n"
"61 Australia 1952  8691212   Oceania  69.120  10039.60  87256254102\n"
"62 Australia 1957  9712569   Oceania  70.330  10949.65 106349227169\n"
"63 Australia 1962 10794968   Oceania  70.930  12217.23 131884573002\n"
"64 Australia 1967 11872264   Oceania  71.100  14526.12 172457986742\n"
"65 Australia 1972 13177000   Oceania  71.930  16788.63 221223770658\n"
"66 Australia 1977 14074100   Oceania  73.490  18334.20 258037329175\n"
"67 Australia 1982 15184200   Oceania  74.740  19477.01 295742804309\n"
"68 Australia 1987 16257249   Oceania  76.320  21888.89 355853119294\n"
"69 Australia 1992 17481977   Oceania  77.560  23424.77 409511234952\n"
"70 Australia 1997 18565243   Oceania  78.830  26997.94 501223252921\n"
"71 Australia 2002 19546792   Oceania  80.370  30687.75 599847158654\n"
"72 Australia 2007 20434176   Oceania  81.235  34435.37 703658358894\n"
"~~~"
msgstr ""
"~~~\n"
"     country year      pop continent lifeExp gdpPercap          gdp\n"
"61 Australia 1952  8691212   Oceania  69.120  10039.60  87256254102\n"
"62 Australia 1957  9712569   Oceania  70.330  10949.65 106349227169\n"
"63 Australia 1962 10794968   Oceania  70.930  12217.23 131884573002\n"
"64 Australia 1967 11872264   Oceania  71.100  14526.12 172457986742\n"
"65 Australia 1972 13177000   Oceania  71.930  16788.63 221223770658\n"
"66 Australia 1977 14074100   Oceania  73.490  18334.20 258037329175\n"
"67 Australia 1982 15184200   Oceania  74.740  19477.01 295742804309\n"
"68 Australia 1987 16257249   Oceania  76.320  21888.89 355853119294\n"
"69 Australia 1992 17481977   Oceania  77.560  23424.77 409511234952\n"
"70 Australia 1997 18565243   Oceania  78.830  26997.94 501223252921\n"
"71 Australia 2002 19546792   Oceania  80.370  30687.75 599847158654\n"
"72 Australia 2007 20434176   Oceania  81.235  34435.37 703658358894\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:463
msgid "Or both:"
msgstr "あるいは両方指定してみましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:466
msgid ""
"~~~\n"
"calcGDP(gapminder, year=2007, country=\"Australia\")\n"
"~~~"
msgstr ""
"~~~\n"
"calcGDP(gapminder, year=2007, country=\"Australia\")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:473
msgid ""
"~~~\n"
"     country year      pop continent lifeExp gdpPercap          gdp\n"
"72 Australia 2007 20434176   Oceania  81.235  34435.37 703658358894\n"
"~~~"
msgstr ""
"~~~\n"
"     country year      pop continent lifeExp gdpPercap          gdp\n"
"72 Australia 2007 20434176   Oceania  81.235  34435.37 703658358894\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:479
msgid "Let's walk through the body of the function:"
msgstr "関数の本文を順番に見ていきましょう。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:482
msgid ""
"~~~\n"
"calcGDP <- function(dat, year=NULL, country=NULL) {\n"
"~~~"
msgstr ""
"~~~\n"
"calcGDP <- function(dat, year=NULL, country=NULL) {\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:487
msgid ""
"Here we've added two arguments, `year`, and `country`. We've set\n"
"*default arguments* for both as `NULL` using the `=` operator\n"
"in the function definition. This means that those arguments will\n"
"take on those values unless the user specifies otherwise."
msgstr ""
"ここで `year` と `country` の二つの引数を追加しました。\n"
"`=` 演算子を関数定義時に用いることで、両者の*既定値*には `NULL` を指定しています。\n"
"これにより、ユーザーが値を指定しない限り、これらの引数の値は `NULL` になることを意味します。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:493
msgid ""
"~~~\n"
"  if(!is.null(year)) {\n"
"    dat <- dat[dat$year %in% year, ]\n"
"  }\n"
"  if (!is.null(country)) {\n"
"    dat <- dat[dat$country %in% country,]\n"
"  }\n"
"~~~"
msgstr ""
"~~~\n"
"  if(!is.null(year)) {\n"
"    dat <- dat[dat$year %in% year, ]\n"
"  }\n"
"  if (!is.null(country)) {\n"
"    dat <- dat[dat$country %in% country,]\n"
"  }\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:503
msgid ""
"Here, we check whether each additional argument is set to `null`, and whenever\n"
"they're not `null` overwrite the dataset stored in `dat` with a subset given by \n"
"the non-`null` argument."
msgstr ""
"ここでは、追加した引数それぞれについて値が `NULL` であるか確認し、\n"
"`NULL` でなければ `dat` に格納されたデータセットを非 `NULL` な引数の値を用いて絞り込み上書きします。"

#: r-novice-gapminder/_episodes/10-functions.md:507
msgid ""
"I did this so that our function is more flexible for later. We can ask it to\n"
"calculate the GDP for:"
msgstr ""
"こうして関数を柔軟なものにすることで、後々使いやすくしました。\n"
"この関数を用いて、以下の様々な場合のGDPを計算できます。"

# unordered list
#: r-novice-gapminder/_episodes/10-functions.md:510
msgid " * The whole dataset;"
msgstr " * データセット全体"

# unordered list
#: r-novice-gapminder/_episodes/10-functions.md:511
msgid " * A single year;"
msgstr " * ある年"

# unordered list
#: r-novice-gapminder/_episodes/10-functions.md:512
msgid " * A single country;"
msgstr " * ある国"

# unordered list
#: r-novice-gapminder/_episodes/10-functions.md:513
msgid " * A single combination of year and country."
msgstr " * ある年とある国の組み合わせ"

#: r-novice-gapminder/_episodes/10-functions.md:515
msgid ""
"By using `%in%` instead, we can also give multiple years or countries to those\n"
"arguments."
msgstr "代わりに `%in%` を使うことによって、`year` と `country` に複数の値を指定できるようになっています。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/10-functions.md:518
msgid "> ## Tip: Pass by value"
msgstr "> ## Tip: 値渡し"

#: r-novice-gapminder/_episodes/10-functions.md:519
msgid ""
">\n"
"> Functions in R almost always make copies of the data to operate on\n"
"> inside of a function body. When we modify `dat` inside the function\n"
"> we are modifying the copy of the gapminder dataset stored in `dat`,\n"
"> not the original variable we gave as the first argument.\n"
">\n"
"> This is called \"pass-by-value\" and it makes writing code much safer:\n"
"> you can always be sure that whatever changes you make within the\n"
"> body of the function, stay inside the body of the function."
msgstr ""
">\n"
"> R の関数は関数本文中で操作するためのデータを、ほぼ必ずコピーします。\n"
"> 関数の中で `dat` を変更するということは、\n"
"> `dat` に格納された gapminder データセットのコピーを変更するということであり、\n"
"> 第一引数に指定した元の変数を変更することはありません。\n"
">\n"
"> この挙動は \"値渡し\" と呼ばれ、コードの記述をより安全なものにします。\n"
"> つまり、関数内での変更は常に関数内での出来事に留まります。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/10-functions.md:530
msgid "> ## Tip: Function scope"
msgstr "> ## Tip: 関数のスコープ"

#: r-novice-gapminder/_episodes/10-functions.md:531
msgid ""
">\n"
"> Another important concept is scoping: any variables (or functions!) you\n"
"> create or modify inside the body of a function only exist for the lifetime\n"
"> of the function's execution. When we call `calcGDP()`, the variables `dat`,\n"
"> `gdp` and `new` only exist inside the body of the function. Even if we\n"
"> have variables of the same name in our interactive R session, they are\n"
"> not modified in any way when executing a function."
msgstr ""
"> スコープはもう一つの重要な概念です。\n"
"> 関数の本文中で作成したり変更したいかなる変数 (関数を含む！) は、\n"
"> 関数を実行している間だけ存在します。`calcGDP()` を呼んだ時に、\n"
"> `dat`、`gdp`、そして `new` という変数は関数の本文中でのみ存在します。\n"
"> 対話的な R のセッションにおいて同名の変数が存在していたとして、\n"
"> それらは関数実行時に変更されることはありません。"

# code block
#: r-novice-gapminder/_episodes/10-functions.md:541
msgid ""
"~~~\n"
"  gdp <- dat$pop * dat$gdpPercap\n"
"  new <- cbind(dat, gdp=gdp)\n"
"  return(new)\n"
"}\n"
"~~~"
msgstr ""
"~~~\n"
"  gdp <- dat$pop * dat$gdpPercap\n"
"  new <- cbind(dat, gdp=gdp)\n"
"  return(new)\n"
"}\n"
"~~~"

#: r-novice-gapminder/_episodes/10-functions.md:549
msgid ""
"Finally, we calculated the GDP on our new subset, and created a new data frame\n"
"with that column added. This means when we call the function later we can see\n"
"the context for the returned GDP values, which is much better than in our first \n"
"attempt where we got a vector of numbers."
msgstr ""
"最終的に、絞り込んだデータからGDPを計算し、その結果を列に追加した新しいデータフレームを作成しました。\n"
"これは関数を呼び出した後でも返り値のGDPの値が持つ文脈がわかることを意味します。\n"
"従って、最初に試した数値のベクトルを返す方法よりもずっと良いものです。"

#: r-novice-gapminder/_episodes/10-functions.md:555
msgid ""
">\n"
"> Test out your GDP function by calculating the GDP for New Zealand in 1987. How\n"
"> does this differ from New Zealand's GDP in 1952?\n"
">\n"
"> > ## Solution to challenge 4\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >   calcGDP(gapminder, year = c(1952, 1987), country = \"New Zealand\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > GDP for New Zealand in 1987: 65050008703\n"
"> >\n"
"> > GDP for New Zealand in 1952: 21058193787"
msgstr ""
">\n"
"> GDP を計算する関数をテストするため、1987年の New Zealand の GDP を計算して下さい。\n"
"> 1952 年の New Zealand の GDP とはどう違いますか？\n"
">\n"
"> > ## チャレンジ４の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> >   calcGDP(gapminder, year = c(1952, 1987), country = \"New Zealand\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > 1987年の New Zealand の GDP: 65050008703\n"
"> >\n"
"> > 1952年の New Zealand の GDP: 21058193787"

#: r-novice-gapminder/_episodes/10-functions.md:574
msgid ""
">\n"
"> The `paste()` function can be used to combine text together, e.g:\n"
">\n"
"> \n"
"> ~~~\n"
"> best_practice <- c(\"Write\", \"programs\", \"for\", \"people\", \"not\", \"computers\")\n"
"> paste(best_practice, collapse=\" \")\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
"> [1] \"Write programs for people not computers\"\n"
"> ~~~"
msgstr ""
">\n"
"> `paste()` 関数を使うと文字列を一繋ぎにできます。例えば\n"
">\n"
"> \n"
"> ~~~\n"
"> best_practice <- c(\"Write\", \"programs\", \"for\", \"people\", \"not\", \"computers\")\n"
"> paste(best_practice, collapse=\" \")\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
"> [1] \"Write programs for people not computers\"\n"
"> ~~~"

#: r-novice-gapminder/_episodes/10-functions.md:590
msgid ""
">\n"
">  Write a function called `fence()` that takes two vectors as arguments, called\n"
"> `text` and `wrapper`, and prints out the text wrapped with the `wrapper`:\n"
">\n"
"> \n"
"> ~~~\n"
"> fence(text=best_practice, wrapper=\"***\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> *Note:* the `paste()` function has an argument called `sep`, which specifies\n"
"> the separator between text. The default is a space: \" \". The default for\n"
"> `paste0()` is no space \"\".\n"
">\n"
"> > ## Solution to challenge 5\n"
"> >\n"
"> >  Write a function called `fence()` that takes two vectors as arguments,\n"
"> > called `text` and `wrapper`, and prints out the text wrapped with the\n"
"> > `wrapper`:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > fence <- function(text, wrapper){\n"
"> >   text <- c(wrapper, text, wrapper)\n"
"> >   result <- paste(text, collapse = \" \")\n"
"> >   return(result)\n"
"> > }\n"
"> > best_practice <- c(\"Write\", \"programs\", \"for\", \"people\", \"not\", \"computers\")\n"
"> > fence(text=best_practice, wrapper=\"***\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"*** Write programs for people not computers ***\"\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> `text` と `wrapper` という引数を持ち、`text` を `wapper` で囲む `fence()` という関数を定義して下さい。\n"
">\n"
"> \n"
"> ~~~\n"
"> fence(text=best_practice, wrapper=\"***\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> *Note:* `paste()` 関数では `sep` 引数を用いて文字列の間に入る文字列を指定できます。\n"
"> `paste0()` の場合 `sep` の既定値は \"\" です。\n"
">\n"
"> > ## チャレンジ5の解答\n"
"> >\n"
"> >  `text` と `wrapper` という引数を持ち、`text` を `wapper` で囲む `fence()` という関数を定義して下さい。\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > fence <- function(text, wrapper){\n"
"> >   text <- c(wrapper, text, wrapper)\n"
"> >   result <- paste(text, collapse = \" \")\n"
"> >   return(result)\n"
"> > }\n"
"> > best_practice <- c(\"Write\", \"programs\", \"for\", \"people\", \"not\", \"computers\")\n"
"> > fence(text=best_practice, wrapper=\"***\")\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"*** Write programs for people not computers ***\"\n"
"> > ~~~\n"
"> > {: .output}"

#: r-novice-gapminder/_episodes/10-functions.md:632
msgid ""
">\n"
"> R has some unique aspects that can be exploited when performing more\n"
"> complicated operations. We will not be writing anything that requires\n"
"> knowledge of these more advanced concepts. In the future when you are\n"
"> comfortable writing functions in R, you can learn more by reading the\n"
"> [R Language Manual][man] or this [chapter][] from\n"
"> [Advanced R Programming][adv-r] by Hadley Wickham."
msgstr ""
">\n"
"> R より複雑な演算を行う時に利用できる変わった機能があります。\n"
"> ここでは発展的な概念を知っておく必要のあることは書きません。\n"
"> 将来的に R で関数を書くことに慣れたら、\n"
"> [R Language Manual][man] や Hadley Wickham による\n"
"> [Advanced R Programming][adv-r] のこの[章][]を読んで学んで下さい。"

#: r-novice-gapminder/_episodes/10-functions.md:641
msgid ""
"[man]: http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Environment-objects\n"
"[chapter]: http://adv-r.had.co.nz/Environments.html\n"
"[adv-r]: http://adv-r.had.co.nz/"
msgstr ""
"[man]: http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Environment-objects\n"
"[章]: http://adv-r.had.co.nz/Environments.html\n"
"[adv-r]: http://adv-r.had.co.nz/"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/10-functions.md:646
msgid "> ## Tip: Testing and documenting"
msgstr "> ## Tip: テストとドキュメント"

#: r-novice-gapminder/_episodes/10-functions.md:647
msgid ""
">\n"
"> It's important to both test functions and document them:\n"
"> Documentation helps you, and others, understand what the\n"
"> purpose of your function is, and how to use it, and its\n"
"> important to make sure that your function actually does\n"
"> what you think.\n"
">\n"
"> When you first start out, your workflow will probably look a lot\n"
"> like this:\n"
">\n"
">  1. Write a function\n"
">  2. Comment parts of the function to document its behaviour\n"
">  3. Load in the source file\n"
">  4. Experiment with it in the console to make sure it behaves\n"
">     as you expect\n"
">  5. Make any necessary bug fixes\n"
">  6. Rinse and repeat.\n"
">\n"
"> Formal documentation for functions, written in separate `.Rd`\n"
"> files, gets turned into the documentation you see in help\n"
"> files. The [roxygen2][] package allows R coders to write documentation\n"
"> alongside the function code and then process it into the appropriate `.Rd`\n"
"> files. You will want to switch to this more formal method of writing\n"
"> documentation when you start writing more complicated R projects.\n"
">\n"
"> Formal automated tests can be written using the [testthat][] package."
msgstr ""
">\n"
"> 関数をテストし、ドキュメントを整備することは重要です。\n"
"> ドキュメントはあなたや他の人が関数の用途や用法を理解する助けになります。\n"
"> また、関数が意図した通りに動作することを確認することは重要です。\n"
"> 始めるにあたって、作業手順は多くの場合以下のようなものになるでしょう。\n"
">\n"
"> 1. 関数を書く\n"
"> 2. 関数の部分的な挙動についてドキュメント代わりにコメントする\n"
"> 3. ソースファイルを読み込む\n"
"> 4. コンソール上で実験し、意図した通りに動作するか確認する\n"
"> 5. 適宜バグの修正を行う\n"
"> 6. これらを繰り返す。\n"
">\n"
"> 別途 `.Rd` ファイルに記述された正式な関数のドキュメントは、\n"
"> ヘルプファイルを見た時のドキュメントになります。\n"
"> [roxygen2][] パッケージを使うと、開発者は R の関数のすぐ側にドキュメントを書き、\n"
"> 適切な `.Rd` ファイルに加工することができます。\n"
"> より複雑なプロジェクトを R で扱うようになると、このようにより正式な手法を使って\n"
"> ドキュメントを整備したくなるでしょう。\n"
">\n"
"> 正式な自動化されたテストを書くには [testthat][] パッケージを使います。"

#: r-novice-gapminder/_episodes/10-functions.md:675
msgid ""
"[roxygen2]: http://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html\n"
"[testthat]: http://r-pkgs.had.co.nz/tests.html"
msgstr ""
"[roxygen2]: http://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html\n"
"[testthat]: http://r-pkgs.had.co.nz/tests.html"

# Front Matter
#: r-novice-gapminder/_episodes/11-writing-data.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 11-writing-data.md in _episodes_rmd/\n"
"title: Writing Data\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I save plots and data created in R?\"\n"
"objectives:\n"
"- \"To be able to write out plots and data from R.\"\n"
"keypoints:\n"
"- \"Save plots from RStudio using the 'Export' button.\"\n"
"- \"Use `write.table` to save tabular data.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 11-writing-data.md in _episodes_rmd/\n"
"title: データの書き込み\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"R で作成したプロットやデータを保存するにはどうすればよいですか?\"\n"
"objectives:\n"
"- \"R からプロットやデータを書き出せるようになりましょう。\"\n"
"keypoints:\n"
"- \"'Export' ボタンを使って RStudio からプロットの保存が出来る。\"\n"
"- \"`write.table` を使って表形式のデータの保存が出来る。\"\n"
"source: Rmd\n"
"---"

# header
#: r-novice-gapminder/_episodes/11-writing-data.md:20
msgid "## Saving plots"
## 図の保存

#: r-novice-gapminder/_episodes/11-writing-data.md:22
msgid ""
"You have already seen how to save the most recent plot you create in `ggplot2`,\n"
"using the command `ggsave`. As a refresher:"
msgstr ""
"`ggsave` 関数を使って、`ggplot2` を用いて作った直近の図を保存する方法は既に学んだ通りです。\n"
"おさらいしておきましょう。"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:26
msgid ""
"~~~\n"
"ggsave(\"My_most_recent_plot.pdf\")\n"
"~~~"
msgstr ""
"~~~\n"
"ggsave(\"My_most_recent_plot.pdf\")\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:31
msgid ""
"You can save a plot from within RStudio using the 'Export' button\n"
"in the 'Plot' window. This will give you the option of saving as a\n"
".pdf or as .png, .jpg or other image formats."
msgstr ""
"RStudio から図を保存するには \"Plot\" ウィンドウにある \"Export\" ボタンを使います。\n"
"この機能を使うと、図を .pdf や .png、.jpg など様々な画像形式で保存することができます。

#: r-novice-gapminder/_episodes/11-writing-data.md:35
msgid ""
"Sometimes you will want to save plots without creating them in the\n"
"'Plot' window first. Perhaps you want to make a pdf document with\n"
"multiple pages: each one a different plot, for example. Or perhaps\n"
"you're looping through multiple subsets of a file, plotting data from\n"
"each subset, and you want to save each plot, but obviously can't stop\n"
"the loop to click 'Export' for each one."
msgstr ""
"図を \"Plot\" ウィンドウに表示することなく保存したいこともあるでしょう。\n"
"ページごとに一つの図を含むような複数のページから成る PDF を出力したいこともあるでしょう。\n"
"あるいはループを使ってファイル中のデータの絞り込み条件を変えながら複数の図を作成していて、\n"
"一つずつ保存するためにいちいちループを止めて \"Export\" ボタンを押すことが不可能な場合もあるでしょう。"

#: r-novice-gapminder/_episodes/11-writing-data.md:42
msgid ""
"In this case you can use a more flexible approach. The function\n"
"`pdf` creates a new pdf device. You can control the size and resolution\n"
"using the arguments to this function."
msgstr ""
"このような場合、より柔軟な方法を使います。\n"
"`pdf` 関数は新たに PDF デバイスを作ります。\n"
"この関数に引数を指定することで、サイズや解像度を調整できます。"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:47
msgid ""
"~~~\n"
"pdf(\"Life_Exp_vs_time.pdf\", width=12, height=4)\n"
"ggplot(data=gapminder, aes(x=year, y=lifeExp, colour=country)) +\n"
"  geom_line() +\n"
"  theme(legend.position = \"none\")\n"
"\n"
"# You then have to make sure to turn off the pdf device!\n"
"\n"
"dev.off()\n"
"~~~"
msgstr ""
"~~~\n"
"pdf(\"Life_Exp_vs_time.pdf\", width=12, height=4)\n"
"ggplot(data=gapminder, aes(x=year, y=lifeExp, colour=country)) +\n"
"  geom_line() +\n"
"  theme(legend.position = \"none\")\n"
"\n"
"# PDF デバイスを確実に終了しておく必要があります！\n"
"\n"
"dev.off()\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:59
msgid "Open up this document and have a look."
msgstr "このドキュメントを開いて内容を確認してみましょう。"

#: r-novice-gapminder/_episodes/11-writing-data.md:62
msgid ""
">\n"
"> Rewrite your 'pdf' command to print a second\n"
"> page in the pdf, showing a facet plot (hint: use `facet_grid`)\n"
"> of the same data with one panel per continent.\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > pdf(\"Life_Exp_vs_time.pdf\", width = 12, height = 4)\n"
"> > p <- ggplot(data = gapminder, aes(x = year, y = lifeExp, colour = country)) +\n"
"> >   geom_line() +\n"
"> >   theme(legend.position = \"none\")\n"
"> > p\n"
"> > p + facet_grid(. ~continent)\n"
"> > dev.off()\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"

"> `pdf` コマンドを書き直して、2ページ目に同じデータを `continent` ごとにファセットした図を出力してみましょう (ヒント:  `facet_grid` を使います)。\n"
"> > ## チャレンジ1の解答\n"
"> > ## Solution to challenge 1\n"
"> `pdf` コマンドを書き直して、2ページ目に同じデータを `continent` ごとにファセットした図を出力してみましょう (ヒント:  `facet_grid` を使います)。\n"
"> > ## チャレンジ1の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > pdf(\"Life_Exp_vs_time.pdf\", width = 12, height = 4)\n"
"> > p <- ggplot(data = gapminder, aes(x = year, y = lifeExp, colour = country)) +\n"
"> >   geom_line() +\n"
"> >   theme(legend.position = \"none\")\n"
"> > p\n"
"> > p + facet_grid(. ~continent)\n"
"> > dev.off()\n"
"> > ~~~\n"
"> > {: .language-r}"

#: r-novice-gapminder/_episodes/11-writing-data.md:83
msgid ""
"The commands `jpeg`, `png` etc. are used similarly to produce\n"
"documents in different formats."
msgstr ""
"同様にして `jepg` や `png` などのコマンドを使うことで、他の形式のドキュメントを作成できます。"

# header
#: r-novice-gapminder/_episodes/11-writing-data.md:86
msgid "## Writing data"
msgstr "## データの出力"

#: r-novice-gapminder/_episodes/11-writing-data.md:88
msgid "At some point, you'll also want to write out data from R."
msgstr "R からデータを出力したいこともあります。"

#: r-novice-gapminder/_episodes/11-writing-data.md:90
msgid ""
"We can use the `write.table` function for this, which is\n"
"very similar to `read.table` from before."
msgstr ""
"これには、既に使った `read.table` 関数とよく似た `write.table` 関数を使います。"

#: r-novice-gapminder/_episodes/11-writing-data.md:93
msgid ""
"Let's create a data-cleaning script, for this analysis, we\n"
"only want to focus on the gapminder data for Australia:"
msgstr ""
"データを綺麗にするスクリプトを書きましょう。\n"
"今回の分析では、gapminder データの中のオーストラリアに該当する部分だけを使います。"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:97
"Let's switch back to the shell to take a look at the data to make sure it looks\n"
"OK:"
msgstr ""
"シェルに戻ってデータが正しく出力されているか確認しましょう。"
"OK:"

msgid ""
"~~~\n"
"aust_subset <- gapminder[gapminder$country == \"Australia\",]\n"
"\n"
"write.table(aust_subset,\n"
"  file=\"cleaned-data/gapminder-aus.csv\",\n"
"  sep=\",\"\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"aust_subset <- gapminder[gapminder$country == \"Australia\",]\n"
"\n"
"write.table(aust_subset,\n"
"  file=\"cleaned-data/gapminder-aus.csv\",\n"
"  sep=\",\"\n"
")\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:107
msgid ""
"Let's switch back to the shell to take a look at the data to make sure it looks\n"
"OK:"
msgstr ""
"シェルに戻ってデータが正しく出力されているか確認しましょう"
"OK:"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:111
msid ""
"Hmm, that's not quite what we wanted. Where did all these\n"
"quotation marks come from? Also the row numbers are\n"
"meaningless."
msgstr ""
"どうやら望んだ通りに出力されていません。引用符はどこから来たのでしょうか。\n"
"また、行番号には意味がありません。"


#: r-novice-gapminder/_episodes/11-writing-data.md:165
msgid ""
"~~~\n"
"head cleaned-data/gapminder-aus.csv\n"
"~~~"
msgstr ""
"~~~\n"
"head cleaned-data/gapminder-aus.csv\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:119
msgid ""
"~~~\n"
"\"country\",\"year\",\"pop\",\"continent\",\"lifeExp\",\"gdpPercap\"\n"
"\"61\",\"Australia\",1952,8691212,\"Oceania\",69.12,10039.59564\n"
"\"62\",\"Australia\",1957,9712569,\"Oceania\",70.33,10949.64959\n"
"\"63\",\"Australia\",1962,10794968,\"Oceania\",70.93,12217.22686\n"
"\"64\",\"Australia\",1967,11872264,\"Oceania\",71.1,14526.12465\n"
"\"65\",\"Australia\",1972,13177000,\"Oceania\",71.93,16788.62948\n"
"\"66\",\"Australia\",1977,14074100,\"Oceania\",73.49,18334.19751\n"
"\"67\",\"Australia\",1982,15184200,\"Oceania\",74.74,19477.00928\n"
"\"68\",\"Australia\",1987,16257249,\"Oceania\",76.32,21888.88903\n"
"\"69\",\"Australia\",1992,17481977,\"Oceania\",77.56,23424.76683\n"
"~~~"
msgstr ""
"~~~\n"
"\"country\",\"year\",\"pop\",\"continent\",\"lifeExp\",\"gdpPercap\"\n"
"\"61\",\"Australia\",1952,8691212,\"Oceania\",69.12,10039.59564\n"
"\"62\",\"Australia\",1957,9712569,\"Oceania\",70.33,10949.64959\n"
"\"63\",\"Australia\",1962,10794968,\"Oceania\",70.93,12217.22686\n"
"\"64\",\"Australia\",1967,11872264,\"Oceania\",71.1,14526.12465\n"
"\"65\",\"Australia\",1972,13177000,\"Oceania\",71.93,16788.62948\n"
"\"66\",\"Australia\",1977,14074100,\"Oceania\",73.49,18334.19751\n"
"\"67\",\"Australia\",1982,15184200,\"Oceania\",74.74,19477.00928\n"
"\"68\",\"Australia\",1987,16257249,\"Oceania\",76.32,21888.88903\n"
"\"69\",\"Australia\",1992,17481977,\"Oceania\",77.56,23424.76683\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:133
msgid ""
"Hmm, that's not quite what we wanted. Where did all these\n"
"quotation marks come from? Also the row numbers are\n"
"meaningless."
msgstr ""
"どうやら望んだ通りに出力されていません。引用符はどこから来たのでしょうか。\n"
"また、行番号には意味がありません。"

#: r-novice-gapminder/_episodes/11-writing-data.md:137
msgid ""
"Let's look at the help file to work out how to change this\n"
"behaviour."
msgstr ""
msgstr "ヘルプファイルを見てこの動作を変更しましょう。"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:141
msgid ""
"~~~\n"
"?write.table\n"
"~~~"
msgstr ""
"~~~\n"
"?write.table\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:146
msgid ""
"By default R will wrap character vectors with quotation marks\n"
"when writing out to file. It will also write out the row and\n"
"column names."
msgstr ""
"既定では、R は文字列をファイルに出力する時に引用符で囲みます。\n"
"また、行と列の名前も出力します。"

#: r-novice-gapminder/_episodes/11-writing-data.md:150
msgid "Let's fix this:"
msgstr "以下のように修正しましょう。"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:153
msgid ""
"~~~\n"
"write.table(\n"
"  gapminder[gapminder$country == \"Australia\",],\n"
"  file=\"cleaned-data/gapminder-aus.csv\",\n"
"  sep=\",\", quote=FALSE, row.names=FALSE\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"write.table(\n"
"  gapminder[gapminder$country == \"Australia\",],\n"
"  file=\"cleaned-data/gapminder-aus.csv\",\n"
"  sep=\",\", quote=FALSE, row.names=FALSE\n"
")\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:162
msgid "Now lets look at the data again using our shell skills:"
msgstr "もう一度シェルを使ってデータを確認してみましょう。"

# code block
#: r-novice-gapminder/_episodes/11-writing-data.md:173
msgid ""
"~~~\n"
"country,year,pop,continent,lifeExp,gdpPercap\n"
"Australia,1952,8691212,Oceania,69.12,10039.59564\n"
"Australia,1957,9712569,Oceania,70.33,10949.64959\n"
"Australia,1962,10794968,Oceania,70.93,12217.22686\n"
"Australia,1967,11872264,Oceania,71.1,14526.12465\n"
"Australia,1972,13177000,Oceania,71.93,16788.62948\n"
"Australia,1977,14074100,Oceania,73.49,18334.19751\n"
"Australia,1982,15184200,Oceania,74.74,19477.00928\n"
"Australia,1987,16257249,Oceania,76.32,21888.88903\n"
"Australia,1992,17481977,Oceania,77.56,23424.76683\n"
"~~~"
msgstr ""
"~~~\n"
"country,year,pop,continent,lifeExp,gdpPercap\n"
"Australia,1952,8691212,Oceania,69.12,10039.59564\n"
"Australia,1957,9712569,Oceania,70.33,10949.64959\n"
"Australia,1962,10794968,Oceania,70.93,12217.22686\n"
"Australia,1967,11872264,Oceania,71.1,14526.12465\n"
"Australia,1972,13177000,Oceania,71.93,16788.62948\n"
"Australia,1977,14074100,Oceania,73.49,18334.19751\n"
"Australia,1982,15184200,Oceania,74.74,19477.00928\n"
"Australia,1987,16257249,Oceania,76.32,21888.88903\n"
"Australia,1992,17481977,Oceania,77.56,23424.76683\n"
"~~~"

#: r-novice-gapminder/_episodes/11-writing-data.md:187
msgid "That looks better!"
msgstr "よくなりました！"

#: r-novice-gapminder/_episodes/11-writing-data.md:190
msgid ""
">\n"
"> Write a data-cleaning script file that subsets the gapminder\n"
"> data to include only data points collected since 1990.\n"
">\n"
"> Use this script to write out the new subset to a file\n"
"> in the `cleaned-data/` directory.\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > write.table(\n"
"> >   gapminder[gapminder$year > 1990, ],\n"
"> >   file = \"cleaned-data/gapminder-after1990.csv\",\n"
"> >   sep = \",\", quote = FALSE, row.names = FALSE\n"
"> > )\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> gapminder データを1990年以降のデータのみに絞り込むスクリプトを書いて下さい。\n"
">\n"
"> このスクリプトを使って絞り込んだ結果を `cleaned-data/` ディレクトリ中のファイルに出力しましょう。\n"
"> > ## チャレンジ2の解答\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > write.table(\n"
"> >   gapminder[gapminder$year > 1990, ],\n"
"> >   file = \"cleaned-data/gapminder-after1990.csv\",\n"
"> >   sep = \",\", quote = FALSE, row.names = FALSE\n"
"> > )\n"
"> > ~~~\n"
"> > {: .language-r}"

# Front Matter
#: r-novice-gapminder/_episodes/12-plyr.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 12-plyr.md in _episodes_rmd/\n"
"title: Splitting and Combining Data Frames with plyr\n"
"teaching: 30\n"
"exercises: 30\n"
"questions:\n"
"- \"How can I do different calculations on different sets of data?\"\n"
"objectives:\n"
"- \"To be able to use the split-apply-combine strategy for data analysis.\"\n"
"keypoints:\n"
"- \"Use the `plyr` package to split data, apply functions to subsets, and combine the results.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 12-plyr.md in _episodes_rmd/\n"
"title: plyr によるデータフレームの分離と併合\n"
"teaching: 30\n"
"exercises: 30\n"
"questions:\n"
"- \"異なるデータセットに異なる計算を施すにはどうすればよいですか?\"\n"
"objectives:\n"
"- \"`split-apply-combine （分離-施工-併合）` をデータ分析に使えるようになりましょう。\"\n"
"keypoints:\n"
"- \"`plyer` パッケージを使用して、データの分離、部分化されたデータに関数の適用、そして結果を併合する。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/12-plyr.md:18
msgid ""
"Previously we looked at how you can use functions to simplify your code.\n"
"We defined the `calcGDP` function, which takes the gapminder dataset,\n"
"and multiplies the population and GDP per capita column. We also defined\n"
"additional arguments so we could filter by `year` and `country`:"
msgstr ""
"ここまでに、関数がコードをシンプルにするために使えるということをお伝えしました。\n"
"gapminder データセットを使って、人口の列と１人当たりのGDP(国内総生産)の列を掛ける\n"
"関数 `calcGDP` を定義し、更に、\n"
"`year` と `country` でフィルターできる引数を追加で、定義しましたよね。"

#: r-novice-gapminder/_episodes/12-plyr.md:42
msgid ""
"A common task you'll encounter when working with data, is that you'll want to\n"
"run calculations on different groups within the data. In the above, we were\n"
"simply calculating the GDP by multiplying two columns together. But what if\n"
"we wanted to calculated the mean GDP per continent?"
msgstr ""
"データを使うときに、データにあるグループごとに計算を実行してみたいと思うことが、よくあります。\n"
"先ほどの例では、単純に二つの列を掛け合わせることでGDPを計算しました。\n"
"では、大陸ごとに平均GDPを計算したいときは、どうすればよいでしょうか。"

#: r-novice-gapminder/_episodes/12-plyr.md:47
msgid "We could run `calcGDP` and then take the mean of each continent:"
msgstr "`calcGDP` を実行してから、それぞれの大陸の平均をとることもできます："

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:50
msgid ""
"~~~\n"
"withGDP <- calcGDP(gapminder)\n"
"mean(withGDP[withGDP$continent == \"Africa\", \"gdp\"])\n"
"~~~"
msgstr ""
"~~~\n"
"withGDP <- calcGDP(gapminder)\n"
"mean(withGDP[withGDP$continent == \"Africa\", \"gdp\"])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:58
msgid ""
"~~~\n"
"[1] 20904782844\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 20904782844\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:65
msgid ""
"~~~\n"
"mean(withGDP[withGDP$continent == \"Americas\", \"gdp\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(withGDP[withGDP$continent == \"Americas\", \"gdp\"])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:72
msgid ""
"~~~\n"
"[1] 379262350210\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 379262350210\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:79
msgid ""
"~~~\n"
"mean(withGDP[withGDP$continent == \"Asia\", \"gdp\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(withGDP[withGDP$continent == \"Asia\", \"gdp\"])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:86
msgid ""
"~~~\n"
"[1] 227233738153\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 227233738153\n"
"~~~"

#: r-novice-gapminder/_episodes/12-plyr.md:91
msgid ""
"But this isn't very *nice*. Yes, by using a function, you have reduced a\n"
"substantial amount of repetition. That **is** nice. But there is still\n"
"repetition. Repeating yourself will cost you time, both now and later, and\n"
"potentially introduce some nasty bugs."
msgstr ""
"でも、これはあまり*おススメ*ではありません。そうです。ある関数を使えば、\n"
"いくつもの繰り返し作業を減らすことができます。それ **は**、おススメです。\n"
"それでも、繰り返し作業はあります。繰り返し作業は、その時点だけでなく\n"
"その後も、時間を食います。そして、嫌なバグが起こる原因にもなりえます。"

#: r-novice-gapminder/_episodes/12-plyr.md:96
msgid ""
"We could write a new function that is flexible like `calcGDP`, but this\n"
"also takes a substantial amount of effort and testing to get right."
msgstr ""
"`calcGDP` のような、新しい関数を書くこともできます。\n"
"でも、ちゃんとしたものを作るには、かなりの労力と確認が必要になるでしょう。"

#: r-novice-gapminder/_episodes/12-plyr.md:99
msgid "The abstract problem we're encountering here is know as \"split-apply-combine\":"
msgstr "ここで直面している抽象的な問題は、 「split-apply-combine（分けてー適用してーまとめる）」ものとしてよく知られています："

#: r-novice-gapminder/_episodes/12-plyr.md:101
msgid "![Split apply combine](../fig/12-plyr-fig1.png)"
msgstr "![Split apply combine](../fig/12-plyr-fig1.png)"

#: r-novice-gapminder/_episodes/12-plyr.md:103
msgid ""
"We want to *split* our data into groups, in this case continents, *apply*\n"
"some calculations on that group, then optionally *combine* the results\n"
"together afterwards."
msgstr ""
"データを（この例では大陸別に）グループ *分け* し、そのグループへある計算を\n"
" *適用*し、できればその後に、結果を *まとめ* たいのです。"

# header
#: r-novice-gapminder/_episodes/12-plyr.md:107
msgid "## The `plyr` package"
msgstr "## `plyr` パッケージ"

#: r-novice-gapminder/_episodes/12-plyr.md:109
msgid ""
"For those of you who have used R before, you might be familiar with the\n"
"`apply` family of functions. While R's built in functions do work, we're\n"
"going to introduce you to another method for solving the \"split-apply-combine\"\n"
"problem. The [plyr](http://had.co.nz/plyr/) package provides a set of\n"
"functions that we find more user friendly for solving this problem."
msgstr ""
"Rを使ったことがある人なら、`apply`系の関数は、既にご存知かもしれません。\n"
"Rに元々ある関数でもよいのですが、この「split-apply-combine」問題を解決する\n"
"他の方法を紹介しましょう。\n"
"[plyr](http://had.co.nz/plyr/) パッケージには、よりお手軽に、\n"
"この問題を解決できる関数たちがあります。"

#: r-novice-gapminder/_episodes/12-plyr.md:115
msgid "We installed this package in an earlier challenge. Let's load it now:"
msgstr "このパッケージを、以前のチャレンジで、インストールしましたので、ここでロードしてみましょう："

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:118
msgid ""
"~~~\n"
"library(\"plyr\")\n"
"~~~"
msgstr ""
"~~~\n"
"library(\"plyr\")\n"
"~~~"

#: r-novice-gapminder/_episodes/12-plyr.md:123
msgid ""
"Plyr has functions for operating on `lists`, `data.frames` and `arrays`\n"
"(matrices, or n-dimensional vectors). Each function performs:"
msgstr ""
"Plyrには、`lists（リスト）`、`data.frames（データフレーム）` 及び `arrays（列）`（行列またはn-次元のベクトル）\n"
"に実行できる関数があります。それぞれの関数は以下を実行します："

# ordered list
#: r-novice-gapminder/_episodes/12-plyr.md:126
msgid "1. A **split**ting operation"
msgstr "1. **分ける** 作業"

# ordered list
#: r-novice-gapminder/_episodes/12-plyr.md:127
msgid "2. **Apply** a function on each split in turn."
msgstr "2. 分割したそれぞれへの関数の **適用**"

# ordered list
#: r-novice-gapminder/_episodes/12-plyr.md:128
msgid "3. Re**combine** output data as a single data object."
msgstr "3. 出力データを再度ひとつのデータオブジェクトとして**まとめる**"

#: r-novice-gapminder/_episodes/12-plyr.md:130
msgid ""
"The functions are named based on the data structure they expect as input,\n"
"and the data structure you want returned as output: [a]rray, [l]ist, or\n"
"[d]ata.frame. The first letter corresponds to the input data structure,\n"
"the second letter to the output data structure, and then the rest of the\n"
"function is named \"ply\"."
msgstr ""
"関数は、入力されるだろうデータ構造と出力予定のデータ構造に基づき名付けられています。\n"
"つまり、[a]rray、[l]ist、または[d]ata.frameのことです。最初の文字が、入力データ構造、\n"
"次の文字が出力データ構造、そして、残りが「ply」と名付けられた関数です。"

#: r-novice-gapminder/_episodes/12-plyr.md:136
msgid ""
"This gives us 9 core functions **ply.  There are an additional three functions\n"
"which will only perform the split and apply steps, and not any combine step.\n"
"They're named by their input data type and represent null output by a `_` (see\n"
"table)"
msgstr ""
"これが **plyの９つの中心的な関数です。加えて、分けて適用することだけで、まとめを実行しない\n"
"関数が３つあります。それらは、入力データ型と出力データがないことを示す\n"
" `_` から名付けられています（表参照）。"

#: r-novice-gapminder/_episodes/12-plyr.md:141
msgid ""
"Note here that plyr's use of \"array\" is different to R's,\n"
"an array in ply can include a vector or matrix."
msgstr ""
"ここで、plyrの「array」の使用法は、Rの使用法と違うことに気をつけましょう。\n"
"plyのarrayは、ベクトルや行列も含めます。"

#: r-novice-gapminder/_episodes/12-plyr.md:144
msgid "![Full apply suite](../fig/12-plyr-fig2.png)"
msgstr "![Full apply suite](../fig/12-plyr-fig2.png)"

#: r-novice-gapminder/_episodes/12-plyr.md:147
msgid ""
"Each of the xxply functions (`daply`, `ddply`, `llply`, `laply`, ...) has the\n"
"same structure and has 4 key features and structure:"
msgstr ""
"xxply関数（`daply` 、 `ddply` 、 `llply` 、 `laply`、などなど）は、\n"
"同じ構造で、４つの重要な特徴と構造を持っています："

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:151
msgid ""
"~~~\n"
"xxply(.data, .variables, .fun)\n"
"~~~"
msgstr ""
"~~~\n"
"xxply(.data, .variables, .fun)\n"
"~~~"

# unordered list
#: r-novice-gapminder/_episodes/12-plyr.md:156
msgid "* The first letter of the function name gives the input type and the second gives the output type."
msgstr "* 関数名の最初の文字が、入力型、次の文字が出力型を示します。"

# unordered list
#: r-novice-gapminder/_episodes/12-plyr.md:157
msgid "* .data - gives the data object to be processed"
msgstr "* .data －処理されるデータオブジェクトを示します。"

# unordered list
#: r-novice-gapminder/_episodes/12-plyr.md:158
msgid "* .variables - identifies the splitting variables"
msgstr "* .variables－分割する変数を指定します。"

# unordered list
#: r-novice-gapminder/_episodes/12-plyr.md:159
msgid "* .fun - gives the function to be called on each piece"
msgstr "* .fun－それぞれに適用する関数を示します。"

#: r-novice-gapminder/_episodes/12-plyr.md:161
msgid "Now we can quickly calculate the mean GDP per continent:"
msgstr "それでは、大陸別の平均GDPを計算してみましょう："

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:164
msgid ""
"~~~\n"
"ddply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = \"continent\",\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"ddply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = \"continent\",\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:175
msgid ""
"~~~\n"
"  continent           V1\n"
"1    Africa  20904782844\n"
"2  Americas 379262350210\n"
"3      Asia 227233738153\n"
"4    Europe 269442085301\n"
"5   Oceania 188187105354\n"
"~~~"
msgstr ""
"~~~\n"
"  continent           V1\n"
"1    Africa  20904782844\n"
"2  Americas 379262350210\n"
"3      Asia 227233738153\n"
"4    Europe 269442085301\n"
"5   Oceania 188187105354\n"
"~~~"

#: r-novice-gapminder/_episodes/12-plyr.md:185
msgid "Let's walk through the previous code:"
msgstr "このコードを、ひとつずつ見てみましょう："

# unordered list
#: r-novice-gapminder/_episodes/12-plyr.md:187
msgid "- The `ddply` function feeds in a `data.frame` (function starts with **d**) and"
msgstr "- `ddply` 関数は、`data.frame` を使い（関数は、**d**から始まりますね）、"

#: r-novice-gapminder/_episodes/12-plyr.md:188
msgid ""
"returns another `data.frame` (2nd letter is a **d**) i\n"
"- the first argument we gave was the data.frame we wanted to operate on: in this\n"
"  case the gapminder data. We called `calcGDP` on it first so that it would have\n"
"  the additional `gdp` column added to it.\n"
"- The second argument indicated our split criteria: in this case the \"continent\"\n"
"  column. Note that we gave the name of the column, not the values of the column like we had done previously with subsetting. Plyr takes care of these\n"
"  implementation details for you.\n"
"- The third argument is the function we want to apply to each grouping of the\n"
"  data. We had to define our own short function here: each subset of the data\n"
"  gets stored in `x`, the first argument of our function. This is an anonymous\n"
"  function: we haven't defined it elsewhere, and it has no name. It only exists\n"
"  in the scope of our call to `ddply`."
msgstr ""
"もうひとつの`data.frame`を出力します（２番目の文字は、**d**ですね）\n"
"- 最初の引数は、使いたいdata.frameでしたね。つまり、ここでは、\n"
"gapminderデータです。そこに、`gdp`（国内総生産） の列を加えるために、まず `calcGDP` を使いましょう。\n"
"- 次の引数は、分割基準を、つまり、ここでは「continent」（大陸）列です。\n"
"   以前、分部集合に分けるときに使った値の名前ではなく、ここでは列の名前を使うことに気を付けましょう。Plyrが細かい実行上の詳細を、代わりに処理してくれますので。\n"
"- ３番目の引数は、データのそれぞれのグループに当てはめる関数です。\n"
"  ここで、自分で短い関数を定義しておかなければなりません。\n"
"  データのそれぞれの部分集合が、その関数の最初の引数の`x` に保存されます。\n"
"  これは、名前のない関数です。つまり、他のところで定義していないもので、名前がないものです。それは、 `ddply` が呼び出されている間だけ、存在します。"

#: r-novice-gapminder/_episodes/12-plyr.md:202
msgid ""
">\n"
"> Calculate the average life expectancy per continent. Which has the longest?\n"
"> Which had the shortest?"
msgstr ""
">\n"
"> 大陸別の平均余命を計算してみましょう。一番長いのはどこでしょうか。\n"
"> 一番短いのはどこでしょうか。"

#: r-novice-gapminder/_episodes/12-plyr.md:207
msgid "What if we want a different type of output data structure?:"
msgstr "他のデータ構造型での出力が良い場合は、どうすればよいでしょうか。"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:210
msgid ""
"~~~\n"
"dlply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = \"continent\",\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"dlply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = \"continent\",\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:221
msgid ""
"~~~\n"
"$Africa\n"
"[1] 20904782844\n"
"\n"
"$Americas\n"
"[1] 379262350210\n"
"\n"
"$Asia\n"
"[1] 227233738153\n"
"\n"
"$Europe\n"
"[1] 269442085301\n"
"\n"
"$Oceania\n"
"[1] 188187105354\n"
"\n"
"attr(,\"split_type\")\n"
"[1] \"data.frame\"\n"
"attr(,\"split_labels\")\n"
"  continent\n"
"1    Africa\n"
"2  Americas\n"
"3      Asia\n"
"4    Europe\n"
"5   Oceania\n"
"~~~"
msgstr ""
"~~~\n"
"$Africa\n"
"[1] 20904782844\n"
"\n"
"$Americas\n"
"[1] 379262350210\n"
"\n"
"$Asia\n"
"[1] 227233738153\n"
"\n"
"$Europe\n"
"[1] 269442085301\n"
"\n"
"$Oceania\n"
"[1] 188187105354\n"
"\n"
"attr(,\"split_type\")\n"
"[1] \"data.frame\"\n"
"attr(,\"split_labels\")\n"
"  continent\n"
"1    Africa\n"
"2  Americas\n"
"3      Asia\n"
"4    Europe\n"
"5   Oceania\n"
"~~~"

#: r-novice-gapminder/_episodes/12-plyr.md:249
msgid ""
"We called the same function again, but changed the second letter to an `l`, so\n"
"the output was returned as a list."
msgstr ""
"また同じ関数を呼び出しましたが、２番目の文字を `l` に変えたので、\n"
"出力されたのは、リストでした。"

#: r-novice-gapminder/_episodes/12-plyr.md:252
msgid "We can specify multiple columns to group by:"
msgstr "以下で、グループにまとめる列を指定します："

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:255
msgid ""
"~~~\n"
"ddply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = c(\"continent\", \"year\"),\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"ddply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = c(\"continent\", \"year\"),\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:266
msgid ""
"~~~\n"
"   continent year           V1\n"
"1     Africa 1952   5992294608\n"
"2     Africa 1957   7359188796\n"
"3     Africa 1962   8784876958\n"
"4     Africa 1967  11443994101\n"
"5     Africa 1972  15072241974\n"
"6     Africa 1977  18694898732\n"
"7     Africa 1982  22040401045\n"
"8     Africa 1987  24107264108\n"
"9     Africa 1992  26256977719\n"
"10    Africa 1997  30023173824\n"
"11    Africa 2002  35303511424\n"
"12    Africa 2007  45778570846\n"
"13  Americas 1952 117738997171\n"
"14  Americas 1957 140817061264\n"
"15  Americas 1962 169153069442\n"
"16  Americas 1967 217867530844\n"
"17  Americas 1972 268159178814\n"
"18  Americas 1977 324085389022\n"
"19  Americas 1982 363314008350\n"
"20  Americas 1987 439447790357\n"
"21  Americas 1992 489899820623\n"
"22  Americas 1997 582693307146\n"
"23  Americas 2002 661248623419\n"
"24  Americas 2007 776723426068\n"
"25      Asia 1952  34095762661\n"
"26      Asia 1957  47267432088\n"
"27      Asia 1962  60136869012\n"
"28      Asia 1967  84648519224\n"
"29      Asia 1972 124385747313\n"
"30      Asia 1977 159802590186\n"
"31      Asia 1982 194429049919\n"
"32      Asia 1987 241784763369\n"
"33      Asia 1992 307100497486\n"
"34      Asia 1997 387597655323\n"
"35      Asia 2002 458042336179\n"
"36      Asia 2007 627513635079\n"
"37    Europe 1952  84971341466\n"
"38    Europe 1957 109989505140\n"
"39    Europe 1962 138984693095\n"
"40    Europe 1967 173366641137\n"
"41    Europe 1972 218691462733\n"
"42    Europe 1977 255367522034\n"
"43    Europe 1982 279484077072\n"
"44    Europe 1987 316507473546\n"
"45    Europe 1992 342703247405\n"
"46    Europe 1997 383606933833\n"
"47    Europe 2002 436448815097\n"
"48    Europe 2007 493183311052\n"
"49   Oceania 1952  54157223944\n"
"50   Oceania 1957  66826828013\n"
"51   Oceania 1962  82336453245\n"
"52   Oceania 1967 105958863585\n"
"53   Oceania 1972 134112109227\n"
"54   Oceania 1977 154707711162\n"
"55   Oceania 1982 176177151380\n"
"56   Oceania 1987 209451563998\n"
"57   Oceania 1992 236319179826\n"
"58   Oceania 1997 289304255183\n"
"59   Oceania 2002 345236880176\n"
"60   Oceania 2007 403657044512\n"
"~~~"
msgstr ""
"~~~\n"
"   continent year           V1\n"
"1     Africa 1952   5992294608\n"
"2     Africa 1957   7359188796\n"
"3     Africa 1962   8784876958\n"
"4     Africa 1967  11443994101\n"
"5     Africa 1972  15072241974\n"
"6     Africa 1977  18694898732\n"
"7     Africa 1982  22040401045\n"
"8     Africa 1987  24107264108\n"
"9     Africa 1992  26256977719\n"
"10    Africa 1997  30023173824\n"
"11    Africa 2002  35303511424\n"
"12    Africa 2007  45778570846\n"
"13  Americas 1952 117738997171\n"
"14  Americas 1957 140817061264\n"
"15  Americas 1962 169153069442\n"
"16  Americas 1967 217867530844\n"
"17  Americas 1972 268159178814\n"
"18  Americas 1977 324085389022\n"
"19  Americas 1982 363314008350\n"
"20  Americas 1987 439447790357\n"
"21  Americas 1992 489899820623\n"
"22  Americas 1997 582693307146\n"
"23  Americas 2002 661248623419\n"
"24  Americas 2007 776723426068\n"
"25      Asia 1952  34095762661\n"
"26      Asia 1957  47267432088\n"
"27      Asia 1962  60136869012\n"
"28      Asia 1967  84648519224\n"
"29      Asia 1972 124385747313\n"
"30      Asia 1977 159802590186\n"
"31      Asia 1982 194429049919\n"
"32      Asia 1987 241784763369\n"
"33      Asia 1992 307100497486\n"
"34      Asia 1997 387597655323\n"
"35      Asia 2002 458042336179\n"
"36      Asia 2007 627513635079\n"
"37    Europe 1952  84971341466\n"
"38    Europe 1957 109989505140\n"
"39    Europe 1962 138984693095\n"
"40    Europe 1967 173366641137\n"
"41    Europe 1972 218691462733\n"
"42    Europe 1977 255367522034\n"
"43    Europe 1982 279484077072\n"
"44    Europe 1987 316507473546\n"
"45    Europe 1992 342703247405\n"
"46    Europe 1997 383606933833\n"
"47    Europe 2002 436448815097\n"
"48    Europe 2007 493183311052\n"
"49   Oceania 1952  54157223944\n"
"50   Oceania 1957  66826828013\n"
"51   Oceania 1962  82336453245\n"
"52   Oceania 1967 105958863585\n"
"53   Oceania 1972 134112109227\n"
"54   Oceania 1977 154707711162\n"
"55   Oceania 1982 176177151380\n"
"56   Oceania 1987 209451563998\n"
"57   Oceania 1992 236319179826\n"
"58   Oceania 1997 289304255183\n"
"59   Oceania 2002 345236880176\n"
"60   Oceania 2007 403657044512\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:332
msgid ""
"~~~\n"
"daply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = c(\"continent\", \"year\"),\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"daply(\n"
" .data = calcGDP(gapminder),\n"
" .variables = c(\"continent\", \"year\"),\n"
" .fun = function(x) mean(x$gdp)\n"
")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:343
msgid ""
"~~~\n"
"          year\n"
"continent          1952         1957         1962         1967\n"
"  Africa     5992294608   7359188796   8784876958  11443994101\n"
"  Americas 117738997171 140817061264 169153069442 217867530844\n"
"  Asia      34095762661  47267432088  60136869012  84648519224\n"
"  Europe    84971341466 109989505140 138984693095 173366641137\n"
"  Oceania   54157223944  66826828013  82336453245 105958863585\n"
"          year\n"
"continent          1972         1977         1982         1987\n"
"  Africa    15072241974  18694898732  22040401045  24107264108\n"
"  Americas 268159178814 324085389022 363314008350 439447790357\n"
"  Asia     124385747313 159802590186 194429049919 241784763369\n"
"  Europe   218691462733 255367522034 279484077072 316507473546\n"
"  Oceania  134112109227 154707711162 176177151380 209451563998\n"
"          year\n"
"continent          1992         1997         2002         2007\n"
"  Africa    26256977719  30023173824  35303511424  45778570846\n"
"  Americas 489899820623 582693307146 661248623419 776723426068\n"
"  Asia     307100497486 387597655323 458042336179 627513635079\n"
"  Europe   342703247405 383606933833 436448815097 493183311052\n"
"  Oceania  236319179826 289304255183 345236880176 403657044512\n"
"~~~"
msgstr ""
"~~~\n"
"          year\n"
"continent          1952         1957         1962         1967\n"
"  Africa     5992294608   7359188796   8784876958  11443994101\n"
"  Americas 117738997171 140817061264 169153069442 217867530844\n"
"  Asia      34095762661  47267432088  60136869012  84648519224\n"
"  Europe    84971341466 109989505140 138984693095 173366641137\n"
"  Oceania   54157223944  66826828013  82336453245 105958863585\n"
"          year\n"
"continent          1972         1977         1982         1987\n"
"  Africa    15072241974  18694898732  22040401045  24107264108\n"
"  Americas 268159178814 324085389022 363314008350 439447790357\n"
"  Asia     124385747313 159802590186 194429049919 241784763369\n"
"  Europe   218691462733 255367522034 279484077072 316507473546\n"
"  Oceania  134112109227 154707711162 176177151380 209451563998\n"
"          year\n"
"continent          1992         1997         2002         2007\n"
"  Africa    26256977719  30023173824  35303511424  45778570846\n"
"  Americas 489899820623 582693307146 661248623419 776723426068\n"
"  Asia     307100497486 387597655323 458042336179 627513635079\n"
"  Europe   342703247405 383606933833 436448815097 493183311052\n"
"  Oceania  236319179826 289304255183 345236880176 403657044512\n"
"~~~"

#: r-novice-gapminder/_episodes/12-plyr.md:368
msgid ""
"You can use these functions in place of `for` loops (and its usually faster to\n"
"do so).\n"
"To replace a for loop, put the code that was in the body of the `for` loop inside an anonymous function."
msgstr ""
"これらの関数は `for` ループの代わりに使えます（その方が、普通は早いです）。\n"
"そうするには、`for` ループの本体の中にあったコードを名無し関数に入れましょう。"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:373
msgid ""
"~~~\n"
"d_ply(\n"
"  .data=gapminder,\n"
"  .variables = \"continent\",\n"
"  .fun = function(x) {\n"
"    meanGDPperCap <- mean(x$gdpPercap)\n"
"    print(paste(\n"
"      \"The mean GDP per capita for\", unique(x$continent),\n"
"      \"is\", format(meanGDPperCap, big.mark=\",\")\n"
"   ))\n"
"  }\n"
")\n"
"~~~"
msgstr ""
"~~~\n"
"d_ply(\n"
"  .data=gapminder,\n"
"  .variables = \"continent\",\n"
"  .fun = function(x) {\n"
"    meanGDPperCap <- mean(x$gdpPercap)\n"
"    print(paste(\n"
"      \"The mean GDP per capita for\", unique(x$continent),\n"
"      \"is\", format(meanGDPperCap, big.mark=\",\")\n"
"   ))\n"
"  }\n"
")\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/12-plyr.md:390
msgid ""
"~~~\n"
"[1] \"The mean GDP per capita for Africa is 2,193.755\"\n"
"[1] \"The mean GDP per capita for Americas is 7,136.11\"\n"
"[1] \"The mean GDP per capita for Asia is 7,902.15\"\n"
"[1] \"The mean GDP per capita for Europe is 14,469.48\"\n"
"[1] \"The mean GDP per capita for Oceania is 18,621.61\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"The mean GDP per capita for Africa is 2,193.755\"\n"
"[1] \"The mean GDP per capita for Americas is 7,136.11\"\n"
"[1] \"The mean GDP per capita for Asia is 7,902.15\"\n"
"[1] \"The mean GDP per capita for Europe is 14,469.48\"\n"
"[1] \"The mean GDP per capita for Oceania is 18,621.61\"\n"
"~~~"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/12-plyr.md:399
msgid "> ## Tip: printing numbers"
msgstr "> ## ヒント：数を出力する"

#: r-novice-gapminder/_episodes/12-plyr.md:400
msgid ""
">\n"
"> The `format` function can be used to make numeric\n"
"> values \"pretty\" for printing out in messages."
msgstr ""
">\n"
"> `format` 関数を使えば、数値をメッセージの中で「いい感じ」に\n"
"> 出力できます。"

#: r-novice-gapminder/_episodes/12-plyr.md:407
msgid ""
">\n"
"> Calculate the average life expectancy per continent and year. Which had the\n"
"> longest and shortest in 2007? Which had the greatest change in between 1952\n"
"> and 2007?"
msgstr ""
">\n"
"> 年次の大陸別平均余命を計算しましょう。2007年に\n"
"> 一番長かったのは、短かったのは、どこでしょうか。\n"
"> 1952年から2007にかけて変化が一番大きかったのはどこでしょうか。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/12-plyr.md:414
#: r-novice-gapminder/_episodes/13-dplyr.md:572
msgid "> ## Advanced Challenge"
msgstr "> ## 上級チャレンジ"

#: r-novice-gapminder/_episodes/12-plyr.md:415
msgid ""
">\n"
"> Calculate the difference in mean life expectancy between\n"
"> the years 1952 and 2007 from the output of challenge 2\n"
"> using one of the `plyr` functions."
msgstr ""
">\n"
"> `plyr` 関数のひとつを使って、チャレンジ２の出力から、\n"
"> 2007年と1952年の平均余命の差を計算しましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/12-plyr.md:421
msgid "> ## Alternate Challenge if class seems lost"
msgstr "> ## チャレンジの別バージョン（クラスがなくなっていた場合）"

#: r-novice-gapminder/_episodes/12-plyr.md:422
msgid ""
">\n"
"> Without running them, which of the following will calculate the average\n"
"> life expectancy per continent:\n"
">\n"
"> 1.\n"
"> \n"
"> ~~~\n"
"> ddply(\n"
">   .data = gapminder,\n"
">   .variables = gapminder$continent,\n"
">   .fun = function(dataGroup) {\n"
">      mean(dataGroup$lifeExp)\n"
">   }\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 2.\n"
"> \n"
"> ~~~\n"
"> ddply(\n"
">   .data = gapminder,\n"
">   .variables = \"continent\",\n"
">   .fun = mean(dataGroup$lifeExp)\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 3.\n"
"> \n"
"> ~~~\n"
"> ddply(\n"
">   .data = gapminder,\n"
">   .variables = \"continent\",\n"
">   .fun = function(dataGroup) {\n"
">      mean(dataGroup$lifeExp)\n"
">   }\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 4.\n"
"> \n"
"> ~~~\n"
"> adply(\n"
">   .data = gapminder,\n"
">   .variables = \"continent\",\n"
">   .fun = function(dataGroup) {\n"
">      mean(dataGroup$lifeExp)\n"
">   }\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">"
msgstr ""
">\n"
"> 実行せずに、以下の中から、大陸別の平均余命を計算するものを選んでみましょう。\n"
"> ：\n"
">\n"
"> 1.\n"
"> \n"
"> ~~~\n"
"> ddply(\n"
">   .data = gapminder,\n"
">   .variables = gapminder$continent,\n"
">   .fun = function(dataGroup) {\n"
">      mean(dataGroup$lifeExp)\n"
">   }\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 2.\n"
"> \n"
"> ~~~\n"
"> ddply(\n"
">   .data = gapminder,\n"
">   .variables = \"continent\",\n"
">   .fun = mean(dataGroup$lifeExp)\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 3.\n"
"> \n"
"> ~~~\n"
"> ddply(\n"
">   .data = gapminder,\n"
">   .variables = \"continent\",\n"
">   .fun = function(dataGroup) {\n"
">      mean(dataGroup$lifeExp)\n"
">   }\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> 4.\n"
"> \n"
"> ~~~\n"
"> adply(\n"
">   .data = gapminder,\n"
">   .variables = \"continent\",\n"
">   .fun = function(dataGroup) {\n"
">      mean(dataGroup$lifeExp)\n"
">   }\n"
"> )\n"
"> ~~~\n"
"> {: .language-r}\n"
">"

# Front Matter
#: r-novice-gapminder/_episodes/13-dplyr.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 13-dplyr.md in _episodes_rmd/\n"
"title: Dataframe Manipulation with dplyr\n"
"teaching: 40\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I manipulate dataframes without repeating myself?\"\n"
"objectives:\n"
"- \" To be able to use the six main dataframe manipulation 'verbs' with pipes in  `dplyr`.\"\n"
"- \" To understand how `group_by()` and `summarize()` can be combined to summarize datasets.\"\n"
"- \" Be able to analyze a subset of data using logical filtering.\"\n"
"keypoints:\n"
"- \"Use the `dplyr` package to manipulate dataframes.\"\n"
"- \"Use `select()` to choose variables from a dataframe.\"\n"
"- \"Use `filter()` to choose data based on values.\"\n"
"- \"Use `group_by()` and `summarize()` to work with subsets of data.\"\n"
"- \"Use `mutate()` to create new variables.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 13-dplyr.md in _episodes_rmd/\n"
"title: dplyrによるデータフレームの操作\n"
"teaching: 40\n"
"exercises: 15\n"
"questions:\n"
"- \"同じ作業を繰り返すことなく、データフレームを操作するにはどうすればよいです?\"\n"
"objectives:\n"
"- \"`dplyr` にある6つの操作をパイプを使用して出来るようになりましょう。\"\n"
"- \"データセットを要約するために `group_by()` と `summarize()` 併用出来ることを理解しましょう。\"\n"
"- \"論理フィルターを使用してデータのサブセットを分析出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"`dplyr` パッケージを使用してデータフレームの操作を行う。\"\n"
"- \"データフレームから変数を選択する際は `select()` を使用する。\"\n"
"- \"値を基にデータを選択する際は `filter()` を使用する。\"\n"
"- \"部分化されたデータを操作する際は `group_by()` や `summarize()` を使用する。\"\n"
"- \"新しい変数を作成する際は `mutate()` を使用する。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/13-dplyr.md:24
msgid ""
"Manipulation of dataframes means many things to many researchers, we often\n"
"select certain observations (rows) or variables (columns), we often group the\n"
"data by a certain variable(s), or we even calculate summary statistics. We can\n"
"do these operations using the normal base R operations:"
msgstr ""
"多くの研究者にとって、データフレームの操作は、多くのことを意味します。\n"
"よくあるのは、特定の観測値（行）もしくは変数（列）の選択、 特定の変数でのデータのグループ化、\n"
"更には要約する統計値の計算です。\n"
"これらは、普通のRの基本操作で実行できます："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:30
msgid ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Africa\", \"gdpPercap\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Africa\", \"gdpPercap\"])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:37
msgid ""
"~~~\n"
"[1] 2193.755\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2193.755\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:44
msgid ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Americas\", \"gdpPercap\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Americas\", \"gdpPercap\"])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:51
msgid ""
"~~~\n"
"[1] 7136.11\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 7136.11\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:58
msgid ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Asia\", \"gdpPercap\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Asia\", \"gdpPercap\"])\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:65
msgid ""
"~~~\n"
"[1] 7902.15\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 7902.15\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:70
msgid ""
"But this isn't very *nice* because there is a fair bit of repetition. Repeating\n"
"yourself will cost you time, both now and later, and potentially introduce some\n"
"nasty bugs."
msgstr ""
"でも、これはあまり*おススメ*ではありません。繰り返しがかなりあるからです。\n"
"繰り返し作業は、時間を食います。そして、嫌なバグを起こる原因にもなりえます。"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:74
msgid "## The `dplyr` package"
msgstr "## `dplyr` パッケージ"

#: r-novice-gapminder/_episodes/13-dplyr.md:76
msgid ""
"Luckily, the [`dplyr`](https://cran.r-project.org/web/packages/dplyr/dplyr.pdf)\n"
"package provides a number of very useful functions for manipulating dataframes\n"
"in a way that will reduce the above repetition, reduce the probability of making\n"
"errors, and probably even save you some typing. As an added bonus, you might\n"
"even find the `dplyr` grammar easier to read."
msgstr ""
"嬉しいことに、[`dplyr`](https://cran.r-project.org/web/packages/dplyr/dplyr.pdf)\n"
"パッケージには、データフレーム操作に非常に役立つ関数がいくつもあります。\n"
"それを使うと、先ほどみたような繰り返しを減らし、エラーを起こす確率を減らし、\n"
"タイピングする必要性さえも恐らく減らせます。\n"
"更には、`dplyr` の書き方は、とても分かりやすいかもしれません。"

#: r-novice-gapminder/_episodes/13-dplyr.md:82
msgid ""
"Here we're going to cover 6 of the most commonly used functions as well as using\n"
"pipes (`%>%`) to combine them."
msgstr ""
"ここでは、特によく使われる６つの関数と、\n"
"それらを組み合わせるためのパイプ（`%>%`）を紹介します。\n"
"."

# ordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:85
msgid "1. `select()`"
msgstr "1. `select()`"

# ordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:86
msgid "2. `filter()`"
msgstr "2. `filter()`"

# ordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:87
msgid "3. `group_by()`"
msgstr "3. `group_by()`"

# ordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:88
msgid "4. `summarize()`"
msgstr "4. `summarize()`"

# ordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:89
msgid "5. `mutate()`"
msgstr "5. `mutate()`"

#: r-novice-gapminder/_episodes/13-dplyr.md:91
msgid "If you have have not installed this package earlier, please do so:"
msgstr "もし、このパッケージをまだインストールしていないようでしたら、ここでしておきましょう："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:94
msgid ""
"~~~\n"
"install.packages('dplyr')\n"
"~~~"
msgstr ""
"~~~\n"
"install.packages('dplyr')\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:99
msgid "Now let's load the package:"
msgstr "パッケージをロードしましょう："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:102
msgid ""
"~~~\n"
"library(\"dplyr\")\n"
"~~~"
msgstr ""
"~~~\n"
"library(\"dplyr\")\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:107
msgid "## Using select()"
msgstr "## select() の使用"

#: r-novice-gapminder/_episodes/13-dplyr.md:109
msgid ""
"If, for example, we wanted to move forward with only a few of the variables in\n"
"our dataframe we could use the `select()` function. This will keep only the\n"
"variables you select."
msgstr ""
"例えば、 データフレームにある、いくつかの変数だけを使って進めたい場合、\n"
"使えるかもしれないのは、`select()` 関数です。\n"
"これを使えば、選択した変数だけをキープすることができます。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:114
msgid ""
"~~~\n"
"year_country_gdp <- select(gapminder,year,country,gdpPercap)\n"
"~~~"
msgstr ""
"~~~\n"
"year_country_gdp <- select(gapminder,year,country,gdpPercap)\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:119
msgid "![](../fig/13-dplyr-fig1.png)"
msgstr "![](../fig/13-dplyr-fig1.png)"

#: r-novice-gapminder/_episodes/13-dplyr.md:121
msgid ""
"If we open up `year_country_gdp` we'll see that it only contains the year,\n"
"country and gdpPercap. Above we used 'normal' grammar, but the strengths of\n"
"`dplyr` lie in combining several functions using pipes. Since the pipes grammar\n"
"is unlike anything we've seen in R before, let's repeat what we've done above\n"
"using pipes."
msgstr ""
"もし `year_country_gdp` を開いたら、year、country 及び gdpPercap しかないでしょう。\n"
"これまでは、 '普通の' 書き方を使いましたが、`dplyr` の強みは、複数の関数を\n"
"パイプを使って、組み合わせられることです。\n"
"パイプの書き方は、これまでRで見てきたものとは、\n"
"全く違いますので、上記でしたことをパイプを使って、やってみましょう。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:128
msgid ""
"~~~\n"
"year_country_gdp <- gapminder %>% select(year,country,gdpPercap)\n"
"~~~"
msgstr ""
"~~~\n"
"year_country_gdp <- gapminder %>% select(year,country,gdpPercap)\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:133
msgid ""
"To help you understand why we wrote that in that way, let's walk through it step\n"
"by step. First we summon the gapminder dataframe and pass it on, using the pipe\n"
"symbol `%>%`, to the next step, which is the `select()` function. In this case\n"
"we don't specify which data object we use in the `select()` function since in\n"
"gets that from the previous pipe. **Fun Fact**: There is a good chance you have\n"
"encountered pipes before in the shell. In R, a pipe symbol is `%>%` while in the\n"
"shell it is `|` but the concept is the same!"
msgstr ""
"こう書いた理由を理解しやすくするために、ひとつずつ見ていきましょう。\n"
"始めに、gapminder データフレームを呼び出し、パイプの記号`%>%` を使って、\n"
"次の `select()` 関数を使うステップに引き渡します。どのデータオブジェクトを\n"
"`select()` 関数で使うかについては、前のパイプから分かるため、ここでは指定しません。\n"
"**面白い事実**：シェルで、パイプに既に出会っている可能性が高いはずです。\n"
"Rでは、パイプの記号は `%>%` で、シェルでは、 `|` ですが、コンセプトは同じです。"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:141
msgid "## Using filter()"
msgstr "## filter() の使用"

#: r-novice-gapminder/_episodes/13-dplyr.md:143
msgid ""
"If we now wanted to move forward with the above, but only with European\n"
"countries, we can combine `select` and `filter`"
msgstr "欧州のみで、上記を進めたいとしたら、 `select` と `filter` を組み合わせましょう。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:147
msgid ""
"~~~\n"
"year_country_gdp_euro <- gapminder %>%\n"
"    filter(continent==\"Europe\") %>%\n"
"    select(year,country,gdpPercap)\n"
"~~~"
msgstr ""
"~~~\n"
"year_country_gdp_euro <- gapminder %>%\n"
"    filter(continent==\"Europe\") %>%\n"
"    select(year,country,gdpPercap)\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:155
msgid ""
">\n"
"> Write a single command (which can span multiple lines and includes pipes) that\n"
"> will produce a dataframe that has the African values for `lifeExp`, `country`\n"
"> and `year`, but not for other Continents.  How many rows does your dataframe\n"
"> have and why?\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> >~~~\n"
"> >year_country_lifeExp_Africa <- gapminder %>%\n"
"> >                            filter(continent==\"Africa\") %>%\n"
"> >                            select(year,country,lifeExp)\n"
"> >~~~\n"
"> >{: .language-r}"
msgstr ""
">\n"
"> アフリカの`lifeExp`、 `country` 及び `year` を持ち、他の大陸を含まないデータフレームを\n"
"> 作るコマンドをひとつ書いてみましょう（複数の行になっても、パイプを使っても大丈夫です）\n"
"> データフレームには、何行ありますか。なぜそうなるのでしょうか。\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> >\n"
"> >~~~\n"
"> >year_country_lifeExp_Africa <- gapminder %>%\n"
"> >                            filter(continent==\"Africa\") %>%\n"
"> >                            select(year,country,lifeExp)\n"
"> >~~~\n"
"> >{: .language-r}"

#: r-novice-gapminder/_episodes/13-dplyr.md:172
msgid ""
"As with last time, first we pass the gapminder dataframe to the `filter()`\n"
"function, then we pass the filtered version of the gapminder dataframe to the\n"
"`select()` function. **Note:** The order of operations is very important in this\n"
"case. If we used 'select' first, filter would not be able to find the variable\n"
"continent since we would have removed it in the previous step."
msgstr ""
"以前行ったように、gapminder データフレームを `filter()` 関数に引き渡し、\n"
"フィルターされた バージョンのgapminder データフレームを、 `select()` 関数に引き渡します。\n"
"**注意：** ここでは、操作手順がとても重要です。\n"
"まず 'select' を使うと、その前のステップで、大陸の変数が削除されているため、\n"
"filter で大陸の変数を見つけることができないことでしょう。"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:178
msgid "## Using group_by() and summarize()"
msgstr "## group_by() と summarize() の使用"

#: r-novice-gapminder/_episodes/13-dplyr.md:180
msgid ""
"Now, we were supposed to be reducing the error prone repetitiveness of what can\n"
"be done with base R, but up to now we haven't done that since we would have to\n"
"repeat the above for each continent. Instead of `filter()`, which will only pass\n"
"observations that meet your criteria (in the above: `continent==\"Europe\"`), we\n"
"can use `group_by()`, which will essentially use every unique criteria that you\n"
"could have used in filter."
msgstr ""
"ここでは、Rの基本的な機能を用いたエラーが起こりやすい繰り返し作業を減らすはずでした。\n"
"でも、まだそれが達成できていません。上記では、それぞれの大陸ごとに同じことを繰り返さなければならないからです。\n"
"繰り返しを無くすために、（上記の `continent==\"Europe\"` のように）条件にあったデータのみを引き渡す `filter()` の代わりに、\n"
"filterでも使える、それぞれの一意の条件を元に一気にデータを分ける `group_by()` を使うこともできます。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:208
msgid ""
"~~~\n"
"str(gapminder %>% group_by(continent))\n"
"~~~"
msgstr ""
"~~~\n"
"str(gapminder %>% group_by(continent))\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:215
msgid ""
"~~~\n"
"Classes 'grouped_df', 'tbl_df', 'tbl' and 'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
" - attr(*, \"vars\")= chr \"continent\"\n"
" - attr(*, \"drop\")= logi TRUE\n"
" - attr(*, \"indices\")=List of 5\n"
"  ..$ : int  24 25 26 27 28 29 30 31 32 33 ...\n"
"  ..$ : int  48 49 50 51 52 53 54 55 56 57 ...\n"
"  ..$ : int  0 1 2 3 4 5 6 7 8 9 ...\n"
"  ..$ : int  12 13 14 15 16 17 18 19 20 21 ...\n"
"  ..$ : int  60 61 62 63 64 65 66 67 68 69 ...\n"
" - attr(*, \"group_sizes\")= int  624 300 396 360 24\n"
" - attr(*, \"biggest_group_size\")= int 624\n"
" - attr(*, \"labels\")='data.frame':\t5 obs. of  1 variable:\n"
"  ..$ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 2 3 4 5\n"
"  ..- attr(*, \"vars\")= chr \"continent\"\n"
"  ..- attr(*, \"drop\")= logi TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"Classes 'grouped_df', 'tbl_df', 'tbl' and 'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
" - attr(*, \"vars\")= chr \"continent\"\n"
" - attr(*, \"drop\")= logi TRUE\n"
" - attr(*, \"indices\")=List of 5\n"
"  ..$ : int  24 25 26 27 28 29 30 31 32 33 ...\n"
"  ..$ : int  48 49 50 51 52 53 54 55 56 57 ...\n"
"  ..$ : int  0 1 2 3 4 5 6 7 8 9 ...\n"
"  ..$ : int  12 13 14 15 16 17 18 19 20 21 ...\n"
"  ..$ : int  60 61 62 63 64 65 66 67 68 69 ...\n"
" - attr(*, \"group_sizes\")= int  624 300 396 360 24\n"
" - attr(*, \"biggest_group_size\")= int 624\n"
" - attr(*, \"labels\")='data.frame':\t5 obs. of  1 variable:\n"
"  ..$ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 2 3 4 5\n"
"  ..- attr(*, \"vars\")= chr \"continent\"\n"
"  ..- attr(*, \"drop\")= logi TRUE\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:239
msgid ""
"You will notice that the structure of the dataframe where we used `group_by()`\n"
"(`grouped_df`) is not the same as the original `gapminder` (`data.frame`). A\n"
"`grouped_df` can be thought of as a `list` where each item in the `list`is a\n"
"`data.frame` which contains only the rows that correspond to the a particular\n"
"value `continent` (at least in the example above)."
msgstr ""
"`group_by()` （`grouped_df`）で用いたデータフレームのデータ構造は、もともとの `gapminder` （`data.frame`）とは異なることに気づいたことでしょう。\n"
"`grouped_df` は、 `list` のようなものです。その `list` にある各項目は、\n"
"（少なくとも上記の例では）特定の `continent` の値が対応する列のみを含む `data.frame` \n"
"になります。"

#: r-novice-gapminder/_episodes/13-dplyr.md:245
msgid "![](../fig/13-dplyr-fig2.png)"
msgstr "![](../fig/13-dplyr-fig2.png)"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:247
msgid "## Using summarize()"
msgstr "## summarize() の使用"

#: r-novice-gapminder/_episodes/13-dplyr.md:249
msgid ""
"The above was a bit on the uneventful side but `group_by()` is much more\n"
"exciting in conjunction with `summarize()`. This will allow us to create new\n"
"variable(s) by using functions that repeat for each of the continent-specific\n"
"data frames. That is to say, using the `group_by()` function, we split our\n"
"original dataframe into multiple pieces, then we can run functions\n"
"(e.g. `mean()` or `sd()`) within `summarize()`."
msgstr ""
"上記は、少し物足りないかもしれませんが、`group_by()` は、`summarize()` と共に使えば\n"
"本当にすばらしいのです。それぞれの大陸のデータフレームごとに繰り返す関数を使って、\n"
"新たな変数を作ることができます。\n"
"つまり、 `group_by()` 関数を使って、もともとのデータフレームを、いくつかのデータに分け、\n"
"`summarize()` の中で、関数（たとえば `mean()` や `sd()`）を実行することができるのです。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:257
msgid ""
"~~~\n"
"gdp_bycontinents <- gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_bycontinents <- gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap))\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:264
msgid "![](../fig/13-dplyr-fig3.png)"
msgstr "![](../fig/13-dplyr-fig3.png)"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:267
msgid ""
"~~~\n"
"continent mean_gdpPercap\n"
"     <fctr>          <dbl>\n"
"1    Africa       2193.755\n"
"2  Americas       7136.110\n"
"3      Asia       7902.150\n"
"4    Europe      14469.476\n"
"5   Oceania      18621.609\n"
"~~~"
msgstr ""
"~~~\n"
"continent mean_gdpPercap\n"
"     <fctr>          <dbl>\n"
"1    Africa       2193.755\n"
"2  Americas       7136.110\n"
"3      Asia       7902.150\n"
"4    Europe      14469.476\n"
"5   Oceania      18621.609\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:278
msgid ""
"That allowed us to calculate the mean gdpPercap for each continent, but it gets\n"
"even better."
msgstr ""
"これにより、それぞれの大陸の平均gdpPercapを計算することができますが、\n"
"更に、すばらしいことがあるのです。"

#: r-novice-gapminder/_episodes/13-dplyr.md:282
msgid ""
">\n"
">\n"
"> Calculate the average life expectancy per country. Which has the longest average life\n"
"> expectancy and which has the shortest average life expectancy?\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry <- gapminder %>%\n"
"> >    group_by(country) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp))\n"
"> >lifeExp_bycountry %>%\n"
"> >    filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 2 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <fct>               <dbl>\n"
"> >1 Iceland              76.5\n"
"> >2 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> Another way to do this is to use the `dplyr` function `arrange()`, which\n"
"> arranges the rows in a data frame according to the order of one or more\n"
"> variables from the data frame.  It has similar syntax to other functions from\n"
"> the `dplyr` package. You can use `desc()` inside `arrange()` to sort in\n"
"> descending order.\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(mean_lifeExp) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <fct>               <dbl>\n"
"> >1 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(desc(mean_lifeExp)) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country mean_lifeExp\n"
"> >  <fct>          <dbl>\n"
"> >1 Iceland         76.5\n"
"> >~~~\n"
"> >{: .output}"
msgstr ""
">\n"
">\n"
"> 国別平均余命を計算しましょう。平均余命が、一番長い国と一番短い国は、\n"
"> それぞれどこでしょうか。\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry <- gapminder %>%\n"
"> >    group_by(country) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp))\n"
"> >lifeExp_bycountry %>%\n"
"> >    filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 2 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <fct>               <dbl>\n"
"> >1 Iceland              76.5\n"
"> >2 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> もうひとつの方法は、 `dplyr` の関数 `arrange()` を使うことです。\n"
"> これは、データフレームのひとつ又は複数の変数の順序に従って、\n"
"> データフレームの列を配置するものです。 書き方は、`dplyr` パッケージの\n"
"> 他の関数と似ています。降順で並べたいときは、 `arrange()` の中に、\n"
"> `desc()` を使えばよいのです。\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(mean_lifeExp) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <fct>               <dbl>\n"
"> >1 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(desc(mean_lifeExp)) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country mean_lifeExp\n"
"> >  <fct>          <dbl>\n"
"> >1 Iceland         76.5\n"
"> >~~~\n"
"> >{: .output}"

#: r-novice-gapminder/_episodes/13-dplyr.md:352
msgid "The function `group_by()` allows us to group by multiple variables. Let's group by `year` and `continent`."
msgstr ""
" `group_by()` の関数では、複数の変数でグループ化するこもできます。\n"
" `year` と `continent` でグループ分けしてみましょう。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:356
msgid ""
"~~~\n"
"gdp_bycontinents_byyear <- gapminder %>%\n"
"    group_by(continent,year) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_bycontinents_byyear <- gapminder %>%\n"
"    group_by(continent,year) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap))\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:363
msgid "That is already quite powerful, but it gets even better! You're not limited to defining 1 new variable in `summarize()`."
msgstr "これでも、かなり役に立ちますが、更にすごいことに、`summarize()` の中で新しく定義できる変数は、１つに限らないのです。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:366
msgid ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"    group_by(continent,year) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap),\n"
"              sd_gdpPercap=sd(gdpPercap),\n"
"              mean_pop=mean(pop),\n"
"              sd_pop=sd(pop))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"    group_by(continent,year) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap),\n"
"              sd_gdpPercap=sd(gdpPercap),\n"
"              mean_pop=mean(pop),\n"
"              sd_pop=sd(pop))\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:376
msgid "## count() and n()"
msgstr "## count() 及び n()"

#: r-novice-gapminder/_episodes/13-dplyr.md:378
msgid ""
"A very common operation is to count the number of observations for each\n"
"group. The `dplyr` package comes with two related functions that help with this."
msgstr ""
"よくありがちな操作は、各グループの観測値の数を数えることですが、\n"
"'dplyr' パッケージには、これに役立つ関数が２つあります。"

#: r-novice-gapminder/_episodes/13-dplyr.md:381
msgid ""
"For instance, if we wanted to check the number of countries included in the\n"
"dataset for the year 2002, we can use the `count()` function. It takes the name\n"
"of one or more columns that contain the groups we are interested in, and we can\n"
"optionally sort the results in descending order by adding `sort=TRUE`:"
msgstr ""
"例えば、2002年のデータセットにある国の数を確認したい場合、 `count()` 関数が使えます。\n"
"興味のあるグループのひとつかいくつかの行の名前を取り、\n"
" `sort=TRUE` を加えることで、結果を降順に並べることもできます："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:387
msgid ""
"~~~\n"
"gapminder %>%\n"
"    filter(year == 2002) %>%\n"
"    count(continent, sort = TRUE)\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    filter(year == 2002) %>%\n"
"    count(continent, sort = TRUE)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:396
msgid ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent     n\n"
"  <fct>     <int>\n"
"1 Africa       52\n"
"2 Asia         33\n"
"3 Europe       30\n"
"4 Americas     25\n"
"5 Oceania       2\n"
"~~~"
msgstr ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent     n\n"
"  <fct>     <int>\n"
"1 Africa       52\n"
"2 Asia         33\n"
"3 Europe       30\n"
"4 Americas     25\n"
"5 Oceania       2\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:408
msgid ""
"If we need to use the number of observations in calculations, the `n()` function\n"
"is useful. For instance, if we wanted to get the standard error of the life\n"
"expectency per continent:"
msgstr ""
"演算の際の観測値の数が必要な場合 `n()` 関数が使えます。\n"
"例えば、大陸別平均余命の標準誤差を得たいとします："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:413
msgid ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:422
msgid ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent se_le\n"
"  <fct>     <dbl>\n"
"1 Africa    0.366\n"
"2 Americas  0.540\n"
"3 Asia      0.596\n"
"4 Europe    0.286\n"
"5 Oceania   0.775\n"
"~~~"
msgstr ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent se_le\n"
"  <fct>     <dbl>\n"
"1 Africa    0.366\n"
"2 Americas  0.540\n"
"3 Asia      0.596\n"
"4 Europe    0.286\n"
"5 Oceania   0.775\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:434
msgid "You can also chain together several summary operations; in this case calculating the `minimum`, `maximum`, `mean` and `se` of each continent's per-country life-expectancy:"
msgstr "いくつかの要約計算を、つなぎ合わせることもできます。つまり、ここでは各大陸の国別平均余命の `minimum` 、 `maximum` 、 `mean` 及び `se` となります："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:437
msgid ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(\n"
"      mean_le = mean(lifeExp),\n"
"      min_le = min(lifeExp),\n"
"      max_le = max(lifeExp),\n"
"      se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(\n"
"      mean_le = mean(lifeExp),\n"
"      min_le = min(lifeExp),\n"
"      max_le = max(lifeExp),\n"
"      se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:450
msgid ""
"~~~\n"
"# A tibble: 5 x 5\n"
"  continent mean_le min_le max_le se_le\n"
"  <fct>       <dbl>  <dbl>  <dbl> <dbl>\n"
"1 Africa       48.9   23.6   76.4 0.366\n"
"2 Americas     64.7   37.6   80.7 0.540\n"
"3 Asia         60.1   28.8   82.6 0.596\n"
"4 Europe       71.9   43.6   81.8 0.286\n"
"5 Oceania      74.3   69.1   81.2 0.775\n"
"~~~"
msgstr ""
"~~~\n"
"# A tibble: 5 x 5\n"
"  continent mean_le min_le max_le se_le\n"
"  <fct>       <dbl>  <dbl>  <dbl> <dbl>\n"
"1 Africa       48.9   23.6   76.4 0.366\n"
"2 Americas     64.7   37.6   80.7 0.540\n"
"3 Asia         60.1   28.8   82.6 0.596\n"
"4 Europe       71.9   43.6   81.8 0.286\n"
"5 Oceania      74.3   69.1   81.2 0.775\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:462
msgid "## Using mutate()"
msgstr "## mutate() の使用"

#: r-novice-gapminder/_episodes/13-dplyr.md:464
msgid "We can also create new variables prior to (or even after) summarizing information using `mutate()`."
msgstr "情報を要約する前に（もしくは後にでも）、 `mutate()` を使えば、新しい変数を作ることができます。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:467
msgid ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"    mutate(gdp_billion=gdpPercap*pop/10^9) %>%\n"
"    group_by(continent,year) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap),\n"
"              sd_gdpPercap=sd(gdpPercap),\n"
"              mean_pop=mean(pop),\n"
"              sd_pop=sd(pop),\n"
"              mean_gdp_billion=mean(gdp_billion),\n"
"              sd_gdp_billion=sd(gdp_billion))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"    mutate(gdp_billion=gdpPercap*pop/10^9) %>%\n"
"    group_by(continent,year) %>%\n"
"    summarize(mean_gdpPercap=mean(gdpPercap),\n"
"              sd_gdpPercap=sd(gdpPercap),\n"
"              mean_pop=mean(pop),\n"
"              sd_pop=sd(pop),\n"
"              mean_gdp_billion=mean(gdp_billion),\n"
"              sd_gdp_billion=sd(gdp_billion))\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:480
msgid "## Connect mutate with logical filtering: ifelse"
msgstr "## 論理フィルター ifelse とmutate の併用"

#: r-novice-gapminder/_episodes/13-dplyr.md:482
msgid ""
"When creating new variables, we can hook this with a logical condition. A simple combination of\n"
"`mutate()` and `ifelse()` facilitates filtering right where it is needed: in the moment of creating something new.\n"
"This easy-to-read statement is a fast and powerful way of discarding certain data (even though the overall dimension\n"
"of the data frame will not change) or for updating values depending on this given condition."
msgstr ""
"新しい変数を作る時、論理条件を付けることができます。\n"
"似たような組み合わせの `mutate()` と `ifelse()` は、まさに必要な場面、つまり\n"
"新しいものを作る時に、フィルターすることができます。\n"
"この簡単に読めるコードが、（データフレーム全体の次元を変えずに）あるデータを\n"
"排除するための早くて役に立つ方法であり、\n"
"与えられた条件によって値を更新する方法なのです。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:488
msgid ""
"~~~\n"
"## keeping all data but \"filtering\" after a certain condition\n"
"# calculate GDP only for people with a life expectation above 25\n"
"gdp_pop_bycontinents_byyear_above25 <- gapminder %>%\n"
"    mutate(gdp_billion = ifelse(lifeExp > 25, gdpPercap * pop / 10^9, NA)) %>%\n"
"    group_by(continent, year) %>%\n"
"    summarize(mean_gdpPercap = mean(gdpPercap),\n"
"              sd_gdpPercap = sd(gdpPercap),\n"
"              mean_pop = mean(pop),\n"
"              sd_pop = sd(pop),\n"
"              mean_gdp_billion = mean(gdp_billion),\n"
"              sd_gdp_billion = sd(gdp_billion))\n"
"\n"
"## updating only if certain condition is fullfilled\n"
"# for life expectations above 40 years, the gpd to be expected in the future is scaled\n"
"gdp_future_bycontinents_byyear_high_lifeExp <- gapminder %>%\n"
"    mutate(gdp_futureExpectation = ifelse(lifeExp > 40, gdpPercap * 1.5, gdpPercap)) %>%\n"
"    group_by(continent, year) %>%\n"
"    summarize(mean_gdpPercap = mean(gdpPercap),\n"
"              mean_gdpPercap_expected = mean(gdp_futureExpectation))\n"
"~~~"
msgstr ""
"~~~\n"
"## keeping all data but \"filtering\" after a certain condition\n"
"# calculate GDP only for people with a life expectation above 25\n"
"gdp_pop_bycontinents_byyear_above25 <- gapminder %>%\n"
"    mutate(gdp_billion = ifelse(lifeExp > 25, gdpPercap * pop / 10^9, NA)) %>%\n"
"    group_by(continent, year) %>%\n"
"    summarize(mean_gdpPercap = mean(gdpPercap),\n"
"              sd_gdpPercap = sd(gdpPercap),\n"
"              mean_pop = mean(pop),\n"
"              sd_pop = sd(pop),\n"
"              mean_gdp_billion = mean(gdp_billion),\n"
"              sd_gdp_billion = sd(gdp_billion))\n"
"\n"
"## updating only if certain condition is fullfilled\n"
"# for life expectations above 40 years, the gpd to be expected in the future is scaled\n"
"gdp_future_bycontinents_byyear_high_lifeExp <- gapminder %>%\n"
"    mutate(gdp_futureExpectation = ifelse(lifeExp > 40, gdpPercap * 1.5, gdpPercap)) %>%\n"
"    group_by(continent, year) %>%\n"
"    summarize(mean_gdpPercap = mean(gdpPercap),\n"
"              mean_gdpPercap_expected = mean(gdp_futureExpectation))\n"
"~~~"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:511
msgid "## Combining `dplyr` and `ggplot2`"
msgstr "## `dplyr` と `ggplot2` の併用"

#: r-novice-gapminder/_episodes/13-dplyr.md:513
msgid ""
"In the plotting lesson we looked at how to make a multi-panel figure by adding\n"
"a layer of facet panels using `ggplot2`. Here is the code we used (with some\n"
"extra comments):"
msgstr ""
"プロットのレッスンでは、 `ggplot2` を使って、ファセットパネルの層を加えることで、\n"
"複数パネルの図を示す方法を見ました。\n"
"以下が、（いくつかコメントを足してありますが）使用したコードです："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:518
msgid ""
"~~~\n"
"# Get the start letter of each country\n"
"starts.with <- substr(gapminder$country, start = 1, stop = 1)\n"
"# Filter countries that start with \"A\" or \"Z\"\n"
"az.countries <- gapminder[starts.with %in% c(\"A\", \"Z\"), ]\n"
"# Make the plot\n"
"ggplot(data = az.countries, aes(x = year, y = lifeExp, color = continent)) +\n"
"  geom_line() + facet_wrap( ~ country)\n"
"~~~"
msgstr ""
"~~~\n"
"# Get the start letter of each country\n"
"starts.with <- substr(gapminder$country, start = 1, stop = 1)\n"
"# Filter countries that start with \"A\" or \"Z\"\n"
"az.countries <- gapminder[starts.with %in% c(\"A\", \"Z\"), ]\n"
"# Make the plot\n"
"ggplot(data = az.countries, aes(x = year, y = lifeExp, color = continent)) +\n"
"  geom_line() + facet_wrap( ~ country)\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:529
msgid "<img src=\"../fig/rmd-13-unnamed-chunk-21-1.png\" title=\"plot of chunk unnamed-chunk-21\" alt=\"plot of chunk unnamed-chunk-21\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-13-unnamed-chunk-21-1.png\" title=\"plot of chunk unnamed-chunk-21\" alt=\"plot of chunk unnamed-chunk-21\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/13-dplyr.md:531
msgid ""
"This code makes the right plot but it also creates some variables (`starts.with`\n"
"and `az.countries`) that we might not have any other uses for. Just as we used\n"
"`%>%` to pipe data along a chain of `dplyr` functions we can use it to pass data\n"
"to `ggplot()`. Because `%>%` replaces the first argument in a function we don't\n"
"need to specify the `data =` argument in the `ggplot()` function. By combining\n"
"`dplyr` and `ggplot2` functions we can make the same figure without creating any\n"
"new variables or modifying the data."
msgstr ""
"このコードは、正しいプロットを作りますが、他に使い道のない、変数（`starts.with`\n"
"及び `az.countries`）も作ります。 `dplyr` 関数のチェーンで、 `%>%` を使って、\n"
"データをパイプしたように、 `ggplot()` へデータを引き渡すこともできます。\n"
"なぜならば `%>%` は、関数の最初の引数を置き換えるため、\n"
" `ggplot()` 関数の中の、 `data =` 因数を指定する必要がありません。\n"
" `dplyr` と `ggplot2` 関数を組み合わせることで、同じ図を、新しい変数を作ったり、\n"
"データを修正することなく作成できます。"

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:540
msgid ""
"~~~\n"
"gapminder %>%\n"
"   # Get the start letter of each country\n"
"   mutate(startsWith = substr(country, start = 1, stop = 1)) %>%\n"
"   # Filter countries that start with \"A\" or \"Z\"\n"
"   filter(startsWith %in% c(\"A\", \"Z\")) %>%\n"
"   # Make the plot\n"
"   ggplot(aes(x = year, y = lifeExp, color = continent)) +\n"
"   geom_line() +\n"
"   facet_wrap( ~ country)\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"   # Get the start letter of each country\n"
"   mutate(startsWith = substr(country, start = 1, stop = 1)) %>%\n"
"   # Filter countries that start with \"A\" or \"Z\"\n"
"   filter(startsWith %in% c(\"A\", \"Z\")) %>%\n"
"   # Make the plot\n"
"   ggplot(aes(x = year, y = lifeExp, color = continent)) +\n"
"   geom_line() +\n"
"   facet_wrap( ~ country)\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:553
msgid "<img src=\"../fig/rmd-13-unnamed-chunk-22-1.png\" title=\"plot of chunk unnamed-chunk-22\" alt=\"plot of chunk unnamed-chunk-22\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-13-unnamed-chunk-22-1.png\" title=\"plot of chunk unnamed-chunk-22\" alt=\"plot of chunk unnamed-chunk-22\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/13-dplyr.md:555
msgid ""
"Using `dplyr` functions also helps us simplify things, for example we could\n"
"combine the first two steps:"
msgstr ""
" `dplyr` 関数を使うことで、物事が簡単になります。例えば、\n"
"最初の２つの段階を組み合わせることができます："

# code block
#: r-novice-gapminder/_episodes/13-dplyr.md:559
msgid ""
"~~~\n"
"gapminder %>%\n"
"    # Filter countries that start with \"A\" or \"Z\"\n"
"\tfilter(substr(country, start = 1, stop = 1) %in% c(\"A\", \"Z\")) %>%\n"
"\t# Make the plot\n"
"\tggplot(aes(x = year, y = lifeExp, color = continent)) +\n"
"\tgeom_line() +\n"
"\tfacet_wrap( ~ country)\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    # Filter countries that start with \"A\" or \"Z\"\n"
"\tfilter(substr(country, start = 1, stop = 1) %in% c(\"A\", \"Z\")) %>%\n"
"\t# Make the plot\n"
"\tggplot(aes(x = year, y = lifeExp, color = continent)) +\n"
"\tgeom_line() +\n"
"\tfacet_wrap( ~ country)\n"
"~~~"

#: r-novice-gapminder/_episodes/13-dplyr.md:570
msgid "<img src=\"../fig/rmd-13-unnamed-chunk-23-1.png\" title=\"plot of chunk unnamed-chunk-23\" alt=\"plot of chunk unnamed-chunk-23\" style=\"display: block; margin: auto;\" />"
msgstr "<img src=\"../fig/rmd-13-unnamed-chunk-23-1.png\" title=\"plot of chunk unnamed-chunk-23\" alt=\"plot of chunk unnamed-chunk-23\" style=\"display: block; margin: auto;\" />"

#: r-novice-gapminder/_episodes/13-dplyr.md:573
msgid ""
">\n"
"> Calculate the average life expectancy in 2002 of 2 randomly selected countries\n"
"> for each continent. Then arrange the continent names in reverse order.\n"
"> **Hint:** Use the `dplyr` functions `arrange()` and `sample_n()`, they have\n"
"> similar syntax to other dplyr functions.\n"
">\n"
"> > ## Solution to Advanced Challenge\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_2countries_bycontinents <- gapminder %>%\n"
"> >    filter(year==2002) %>%\n"
"> >    group_by(continent) %>%\n"
"> >    sample_n(2) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp)) %>%\n"
"> >    arrange(desc(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}"
msgstr ""
">\n"
"> 各大陸から無作為に選ばれた２つの国の2002年の平均余命を計算し、\n"
"> 大陸名を、逆の順番に並べましょう。\n"
"> **ヒント：** `dplyr` 関数 `arrange()` 及び `sample_n()` を使いましょう。\n"
"> 書き方は、他の dplyr 関数と同じです。\n"
">\n"
"> > ## 上級チャレンジの解答\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_2countries_bycontinents <- gapminder %>%\n"
"> >    filter(year==2002) %>%\n"
"> >    group_by(continent) %>%\n"
"> >    sample_n(2) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp)) %>%\n"
"> >    arrange(desc(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}"

# header
#: r-novice-gapminder/_episodes/13-dplyr.md:593
#: r-novice-gapminder/_episodes/14-tidyr.md:645
msgid "## Other great resources"
msgstr "## その他役に立つ資料"

# unordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:595
msgid "* [R for Data Science](http://r4ds.had.co.nz/)"
msgstr "* [R for Data Science](http://r4ds.had.co.nz/)"

# unordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:596
#: r-novice-gapminder/_episodes/14-tidyr.md:648
msgid "* [Data Wrangling Cheat sheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)"
msgstr "* [Data Wrangling Cheat sheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)"

# unordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:597
msgid "* [Introduction to dplyr](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)"
msgstr "* [Introduction to dplyr](https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html)"

# unordered list
#: r-novice-gapminder/_episodes/13-dplyr.md:598
#: r-novice-gapminder/_episodes/14-tidyr.md:650
msgid "* [Data wrangling with R and RStudio](https://www.rstudio.com/resources/webinars/data-wrangling-with-r-and-rstudio/)"
msgstr "* [Data wrangling with R and RStudio](https://www.rstudio.com/resources/webinars/data-wrangling-with-r-and-rstudio/)"

# Front Matter
#: r-novice-gapminder/_episodes/14-tidyr.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 14-tidyr.md in _episodes_rmd/\n"
"title: Dataframe Manipulation with tidyr\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I change the format of dataframes?\"\n"
"objectives:\n"
"- \"To be understand the concepts of 'long' and 'wide' data formats and be able to convert between them with `tidyr`.\"\n"
"keypoints:\n"
"- \"Use the `tidyr` package to change the layout of dataframes.\"\n"
"- \"Use `gather()` to go from wide to long format.\"\n"
"- \"Use `spread()` to go from long to wide format.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 14-tidyr.md in _episodes_rmd/\n"
"title: tidyr によるデータフレームの操作\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"データフレームのフォーマットを変更するにはどのようにすればよいですか?\"\n"
"objectives:\n"
"- \" 「横長」と「縦長」のデータ形式を理解し、`tidyr`を使用して、その変換が出来るようになりましょう。\"\n"
"keypoints:\n"
"- \"データフレームの形式を変更するには `tidyr` を使用する。\"\n"
"- \"「横長」から「縦長」に変換するには `gather()` を使用する。\"\n"
"- \"「縦長」から「横長」に変換するには `spread()` を使用する。\"\n"
"source: Rmd\n"
"---"

#: r-novice-gapminder/_episodes/14-tidyr.md:20
msgid ""
"Researchers often want to manipulate their data from the 'wide' to the 'long'\n"
"format, or vice-versa. The 'long' format is where:"
msgstr ""
"研究者には「横長」データを「縦長」データに（又はその逆を）したいと\n"
"思うことがよくあります。 「縦長」形式とは："

# unordered list
#: r-novice-gapminder/_episodes/14-tidyr.md:23
msgid " - each column is a variable"
msgstr " - 各列が変数"

# unordered list
#: r-novice-gapminder/_episodes/14-tidyr.md:24
msgid " - each row is an observation"
msgstr " - 各行が観測値"

#: r-novice-gapminder/_episodes/14-tidyr.md:26
msgid ""
"In the 'long' format, you usually have 1 column for the observed variable and\n"
"the other columns are ID variables."
msgstr "「縦長」形式では、普通、観測値は１列で、残りの列はIDの変数になります。"

#: r-novice-gapminder/_episodes/14-tidyr.md:30
msgid ""
"For the 'wide' format each row is often a site/subject/patient and you have\n"
"multiple observation variables containing the same type of data. These can be\n"
"either repeated observations over time, or observation of multiple variables (or\n"
"a mix of both). You may find data input may be simpler or some other\n"
"applications may prefer the 'wide' format. However, many of `R`'s functions have\n"
"been designed assuming you have 'long' format data. This tutorial will help you\n"
"efficiently transform your data regardless of original format."
msgstr ""
"「横長」形式は、それぞれの行には、場所／主題／患者があり、同じようなデータ型の\n"
"複数の観測変数があります。 時間を変えて繰り返し観測した値や、\n"
"複数の観測変数（又は、その両方）が、これに該当します。\n"
"データ入力がより単純と感じたり、「縦長」形式の方が良いという\n"
"アプリケーションもあるでしょうが、「R」の関数の多くは、\n"
"「縦長」形式データを前提として作られています。ここでは、\n"
"元々の形式に関係なくデータを効率的に変換する方法を学びましょう。"

#: r-novice-gapminder/_episodes/14-tidyr.md:38
msgid "![](../fig/14-tidyr-fig1.png)"
msgstr "![](../fig/14-tidyr-fig1.png)"

#: r-novice-gapminder/_episodes/14-tidyr.md:40
msgid ""
"These data formats mainly affect readability. For humans, the wide format is\n"
"often more intuitive since we can often see more of the data on the screen due\n"
"to its shape. However, the long format is more machine readable and is closer\n"
"to the formatting of databases. The ID variables in our dataframes are similar to\n"
"the fields in a database and observed variables are like the database values."
msgstr ""
"これらのデータ形式は、主に読みやすさに影響します。画面の形状上、より多くのデータが見られる\n"
"横長形式を、人間は直感的に選好しやすいところですが、縦長形式の方が機械が読みやすく、\n"
"データベースの形式に近いのです。データフレームにある ID 変数は、データベースにあるフィールドの\n"
"ようなものであり、観測された変数はデータべースの値のようなものです。"

# header
#: r-novice-gapminder/_episodes/14-tidyr.md:46
msgid "## Getting started"
msgstr "## 手始めに"

#: r-novice-gapminder/_episodes/14-tidyr.md:48
msgid ""
"First install the packages if you haven't already done so (you probably\n"
"installed dplyr in the previous lesson):"
msgstr ""
"まず、パッケージをインストールしましょう、もしまだやっていなければですが\n"
"（おそらく、前の dplyr のレッスンで、インストールしているかと思います）："

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:52
msgid ""
"~~~\n"
"#install.packages(\"tidyr\")\n"
"#install.packages(\"dplyr\")\n"
"~~~"
msgstr ""
"~~~\n"
"#install.packages(\"tidyr\")\n"
"#install.packages(\"dplyr\")\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:58
msgid "Load the packages"
msgstr "パーッケージをロードしましょう。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:61
msgid ""
"~~~\n"
"library(\"tidyr\")\n"
"library(\"dplyr\")\n"
"~~~"
msgstr ""
"~~~\n"
"library(\"tidyr\")\n"
"library(\"dplyr\")\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:67
msgid "First, lets look at the structure of our original gapminder dataframe:"
msgstr "始めに、そもそもの gapminder データフレームのデータ構造を見てみましょう："

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:77
msgid ""
"~~~\n"
"'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:89
msgid ""
">\n"
"> Is gapminder a purely long, purely wide, or some intermediate format?\n"
">\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> > The original gapminder data.frame is in an intermediate format. It is not\n"
"> > purely long since it had multiple observation variables\n"
"> > (`pop`,`lifeExp`,`gdpPercap`)."
msgstr ""
">\n"
"> gapminder は、横長のみ、縦長のみ、又はその中間の形式でしょうか。\n"
">\n"
">\n"
"> > ## チャレンジ１の解答\n"
"> >\n"
"> > 元々の gapminder data.frame は、中間の形式です。\n"
"> > 複数の観測変数（`pop`,`lifeExp`,`gdpPercap`）があるため、\n"
"> > 縦長のみのデータとは言えません。"

#: r-novice-gapminder/_episodes/14-tidyr.md:102
msgid ""
"Sometimes, as with the gapminder dataset, we have multiple types of observed\n"
"data. It is somewhere in between the purely 'long' and 'wide' data formats. We\n"
"have 3 \"ID variables\" (`continent`, `country`, `year`) and 3 \"Observation\n"
"variables\" (`pop`,`lifeExp`,`gdpPercap`). I usually prefer my data in this\n"
"intermediate format in most cases despite not having ALL observations in 1\n"
"column given that all 3 observation variables have different units. There are\n"
"few operations that would need us to stretch out this dataframe any longer\n"
"(i.e. 4 ID variables and 1 Observation variable)."
msgstr ""
"ときどき gapminder データセットのように、観測データが複数の型の場合があります。\n"
"これは「縦長」と「横長」のデータ形式の中間のようなものです。\n"
"３つの「ID variables」（`continent`, `country`, `year`）と、３つの「観測変数」\n"
"（`pop`,`lifeExp`,`gdpPercap`）がありますね。３つの観測変数が、全ての違う\n"
"単位であり、全ての変数が１列になってはいませんが、個人的には、自分のデータを、\n"
"この中間形式にしたいと思うことが多いです。このデータフレームをより縦に広げたい\n"
"（つまり、４つの ID 変数と１観測変数にしたい）というときに使える操作は、\n"
"ほとんどありません。"

#: r-novice-gapminder/_episodes/14-tidyr.md:111
msgid ""
"While using many of the functions in R, which are often vector based, you\n"
"usually do not want to do mathematical operations on values with different\n"
"units. For example, using the purely long format, a single mean for all of the\n"
"values of population, life expectancy, and GDP would not be meaningful since it\n"
"would return the mean of values with 3 incompatible units. The solution is that\n"
"we first manipulate the data either by grouping (see the lesson on `dplyr`), or\n"
"we change the structure of the dataframe.  **Note:** Some plotting functions in\n"
"R actually work better in the wide format data."
msgstr ""
"一方で、R の関数の多くは、ベクトルに基づいているものがほとんどであり、ふつうは\n"
"単位が異なる値に、数理的演算をすることは避けたいと思うでしょう。\n"
"例えば、縦長の形式のみを使って、人口、平均余命及びGDPの値の全てを使って、\n"
"ひとつ平均値を出しても、意味がないでしょう。３つの比較できない単位の値の平均と\n"
"なるのですから。解決方法は、データをまずグループ化（`dplyr` のレッスンを参照)するか、\n"
"データフレームの形式を変えることでしょう。  **注：** Rのプロット関数の中には、\n"
"横長形式のデータの方がよいものもあります。"

# header
#: r-novice-gapminder/_episodes/14-tidyr.md:120
msgid "## From wide to long format with gather()"
msgstr "## gather() を使って、横長から縦長形式へ"

#: r-novice-gapminder/_episodes/14-tidyr.md:122
msgid ""
"Until now, we've been using the nicely formatted original gapminder dataset, but\n"
"'real' data (i.e. our own research data) will never be so well organized. Here\n"
"let's start with the wide format version of the gapminder dataset."
msgstr ""
"ここまでは、元々の gapminder データセットの形式を整えてきましたが、\n"
"'本物の' データ（つまり、研究データ）が、ちゃんと整理されていることは\n"
"ほとんどないでしょう。ここで、gapminderデータセットの横長形式から、始めてみましょう。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/14-tidyr.md:126
msgid "> Download the wide version of the gapminder data from [here](https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv)"
msgstr "> 横長バージョンの gapminder データを [ここ](https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv)からダウンロードしましょう。"

#: r-novice-gapminder/_episodes/14-tidyr.md:127
msgid "and save it in your data folder."
msgstr "そしてフォルダーに保存します。"

#: r-novice-gapminder/_episodes/14-tidyr.md:129
msgid ""
"We'll load the data file and look at it.  Note: we don't want our continent and\n"
"country columns to be factors, so we use the stringsAsFactors argument for\n"
"`read.csv()` to disable that."
msgstr ""
"データファイルをロードして見てみましょう。  注：大陸と国の列は、因子型にはしたくありません。\n"
"そこで、そうならないように、`read.csv()`に stringsAsFactors 引数を使いましょう。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:134
msgid ""
"~~~\n"
"gap_wide <- read.csv(\"data/gapminder_wide.csv\", stringsAsFactors = FALSE)\n"
"str(gap_wide)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_wide <- read.csv(\"data/gapminder_wide.csv\", stringsAsFactors = FALSE)\n"
"str(gap_wide)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:142
msgid ""
"~~~\n"
"'data.frame':\t142 obs. of  38 variables:\n"
" $ continent     : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country       : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ gdpPercap_1952: num  2449 3521 1063 851 543 ...\n"
" $ gdpPercap_1957: num  3014 3828 960 918 617 ...\n"
" $ gdpPercap_1962: num  2551 4269 949 984 723 ...\n"
" $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...\n"
" $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...\n"
" $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...\n"
" $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...\n"
" $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...\n"
" $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...\n"
" $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...\n"
" $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...\n"
" $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...\n"
" $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...\n"
" $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...\n"
" $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...\n"
" $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...\n"
" $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...\n"
" $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...\n"
" $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...\n"
" $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...\n"
" $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...\n"
" $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...\n"
" $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...\n"
" $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...\n"
" $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...\n"
" $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...\n"
" $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...\n"
" $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...\n"
" $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...\n"
" $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...\n"
" $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...\n"
" $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...\n"
" $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...\n"
" $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...\n"
" $ pop_2002      : int  31287142 10866106 7026113 1630347 12251209 7021078 15929988 4048013 8835739 614382 ...\n"
" $ pop_2007      : int  33333216 12420476 8078314 1639131 14326203 8390505 17696293 4369038 10238807 710960 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t142 obs. of  38 variables:\n"
" $ continent     : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country       : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ gdpPercap_1952: num  2449 3521 1063 851 543 ...\n"
" $ gdpPercap_1957: num  3014 3828 960 918 617 ...\n"
" $ gdpPercap_1962: num  2551 4269 949 984 723 ...\n"
" $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...\n"
" $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...\n"
" $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...\n"
" $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...\n"
" $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...\n"
" $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...\n"
" $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...\n"
" $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...\n"
" $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...\n"
" $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...\n"
" $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...\n"
" $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...\n"
" $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...\n"
" $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...\n"
" $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...\n"
" $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...\n"
" $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...\n"
" $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...\n"
" $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...\n"
" $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...\n"
" $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...\n"
" $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...\n"
" $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...\n"
" $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...\n"
" $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...\n"
" $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...\n"
" $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...\n"
" $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...\n"
" $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...\n"
" $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...\n"
" $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...\n"
" $ pop_2002      : int  31287142 10866106 7026113 1630347 12251209 7021078 15929988 4048013 8835739 614382 ...\n"
" $ pop_2007      : int  33333216 12420476 8078314 1639131 14326203 8390505 17696293 4369038 10238807 710960 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:185
msgid "![](../fig/14-tidyr-fig2.png)"
msgstr "![](../fig/14-tidyr-fig2.png)"

#: r-novice-gapminder/_episodes/14-tidyr.md:187
msgid ""
"The first step towards getting our nice intermediate data format is to first\n"
"convert from the wide to the long format. The `tidyr` function `gather()` will\n"
"'gather' your observation variables into a single variable."
msgstr ""
"我々の目指す中間形式のデータに向かう最初のステップは、\n"
"横長から縦長形式への変換です。 `tidyr` 関数の `gather()` を使えば、\n"
"観測変数をひとつの変数に '集める（gather）' することができます。"

#: r-novice-gapminder/_episodes/14-tidyr.md:191
msgid "![](../fig/14-tidyr-fig3.png)"
msgstr "![](../fig/14-tidyr-fig3.png)"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:194
msgid ""
"~~~\n"
"gap_long <- gap_wide %>%\n"
"    gather(obstype_year, obs_values, starts_with('pop'),\n"
"           starts_with('lifeExp'), starts_with('gdpPercap'))\n"
"str(gap_long)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_long <- gap_wide %>%\n"
"    gather(obstype_year, obs_values, starts_with('pop'),\n"
"           starts_with('lifeExp'), starts_with('gdpPercap'))\n"
"str(gap_long)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:204
msgid ""
"~~~\n"
"'data.frame':\t5112 obs. of  4 variables:\n"
" $ continent   : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country     : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ obstype_year: chr  \"pop_1952\" \"pop_1952\" \"pop_1952\" \"pop_1952\" ...\n"
" $ obs_values  : num  9279525 4232095 1738315 442308 4469979 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t5112 obs. of  4 variables:\n"
" $ continent   : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country     : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ obstype_year: chr  \"pop_1952\" \"pop_1952\" \"pop_1952\" \"pop_1952\" ...\n"
" $ obs_values  : num  9279525 4232095 1738315 442308 4469979 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:213
msgid ""
"Here we have used piping syntax which is similar to what we were doing in the\n"
"previous lesson with dplyr. In fact, these are compatible and you can use a mix\n"
"of tidyr and dplyr functions by piping them together"
msgstr ""
"ここでは、以前 dplyr のレッスンの中で行ったようなパイプの書き方を使いました。\n"
"実は、tidyr と dplyr 関数は互換性があり、パイプで繋ぐことで、一緒に使うことが\n"
"できるのです。"

#: r-novice-gapminder/_episodes/14-tidyr.md:217
msgid ""
"Inside `gather()` we first name the new column for the new ID variable\n"
"(`obstype_year`), the name for the new amalgamated observation variable\n"
"(`obs_value`), then the names of the old observation variable. We could have\n"
"typed out all the observation variables, but as in the `select()` function (see\n"
"`dplyr` lesson), we can use the `starts_with()` argument to select all variables\n"
"that starts with the desired character string. Gather also allows the alternative\n"
"syntax of using the `-` symbol to identify which variables are not to be\n"
"gathered (i.e. ID variables)"
msgstr ""
"始めに、新しいID変数（`obstype_year`）のための新しい列、新しくまとめた\n"
"観測変数（`obs_value`）、及び古い観測変数を `gather()` の中で名付けましょう。 \n"
"全ての観測変数をタイプすることもできますが、 `select()` 関数（`dplyr` レッスン参照）\n"
"でしたように、引数 `starts_with()` で目的の文字列で始まる全ての変数を選びましょう。\n"
"Gather には、集めない変数（つまりID変数）を特定する、`-` シンボルを使う\n"
"別の書き方もあります。"

#: r-novice-gapminder/_episodes/14-tidyr.md:226
msgid "![](../fig/14-tidyr-fig4.png)"
msgstr "![](../fig/14-tidyr-fig4.png)"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:229
msgid ""
"~~~\n"
"gap_long <- gap_wide %>% gather(obstype_year,obs_values,-continent,-country)\n"
"str(gap_long)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_long <- gap_wide %>% gather(obstype_year,obs_values,-continent,-country)\n"
"str(gap_long)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:237
msgid ""
"~~~\n"
"'data.frame':\t5112 obs. of  4 variables:\n"
" $ continent   : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country     : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ obstype_year: chr  \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" ...\n"
" $ obs_values  : num  2449 3521 1063 851 543 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t5112 obs. of  4 variables:\n"
" $ continent   : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country     : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ obstype_year: chr  \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" ...\n"
" $ obs_values  : num  2449 3521 1063 851 543 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:246
msgid ""
"That may seem trivial with this particular dataframe, but sometimes you have 1\n"
"ID variable and 40 Observation variables with irregular variables names. The\n"
"flexibility is a huge time saver!"
msgstr ""
"これは、このデータフレームでは、取るに足らないことかもしれませんが、\n"
"１つの ID 変数と40の変則的な変数名を持つ観測変数がある場合も時にはあります。\n"
"柔軟性があることで、かなり時間が節約できるのです！"

#: r-novice-gapminder/_episodes/14-tidyr.md:251
msgid ""
"Now `obstype_year` actually contains 2 pieces of information, the observation\n"
"type (`pop`,`lifeExp`, or `gdpPercap`) and the `year`. We can use the\n"
"`separate()` function to split the character strings into multiple variables"
msgstr ""
"ここで `obstype_year` には、実は2種類の情報が含まれています。\n"
"観測値の形（`pop`、`lifeExp`、又は`gdpPercap`）及び `year` です。 \n"
"文字列を複数の変数に分割するには、 `separate()` 関数が使えます。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:256
msgid ""
"~~~\n"
"gap_long <- gap_long %>% separate(obstype_year,into=c('obs_type','year'),sep=\"_\")\n"
"gap_long$year <- as.integer(gap_long$year)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_long <- gap_long %>% separate(obstype_year,into=c('obs_type','year'),sep=\"_\")\n"
"gap_long$year <- as.integer(gap_long$year)\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:264
msgid ""
">\n"
"> Using `gap_long`, calculate the mean life expectancy, population, and gdpPercap for each continent.\n"
">**Hint:** use the `group_by()` and `summarize()` functions we learned in the `dplyr` lesson\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> >~~~\n"
"> >gap_long %>% group_by(continent,obs_type) %>%\n"
"> >    summarize(means=mean(obs_values))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 15 x 3\n"
"> ># Groups:   continent [?]\n"
"> >   continent obs_type       means\n"
"> >   <chr>     <chr>          <dbl>\n"
"> > 1 Africa    gdpPercap     2194. \n"
"> > 2 Africa    lifeExp         48.9\n"
"> > 3 Africa    pop        9916003. \n"
"> > 4 Americas  gdpPercap     7136. \n"
"> > 5 Americas  lifeExp         64.7\n"
"> > 6 Americas  pop       24504795. \n"
"> > 7 Asia      gdpPercap     7902. \n"
"> > 8 Asia      lifeExp         60.1\n"
"> > 9 Asia      pop       77038722. \n"
"> >10 Europe    gdpPercap    14469. \n"
"> >11 Europe    lifeExp         71.9\n"
"> >12 Europe    pop       17169765. \n"
"> >13 Oceania   gdpPercap    18622. \n"
"> >14 Oceania   lifeExp         74.3\n"
"> >15 Oceania   pop        8874672. \n"
"> >~~~\n"
"> >{: .output}"
msgstr ""
">\n"
"> `gap_long` を使って、各大陸の平均余命、人口及びgdpPercapを計算しましょう。\n"
">**ヒント：** `dplyr` で習った `group_by()` と `summarize()` 関数を使いましょう。\n"
">\n"
"> > ## チャレンジ２の解答\n"
"> >\n"
"> >~~~\n"
"> >gap_long %>% group_by(continent,obs_type) %>%\n"
"> >    summarize(means=mean(obs_values))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 15 x 3\n"
"> ># Groups:   continent [?]\n"
"> >   continent obs_type       means\n"
"> >   <chr>     <chr>          <dbl>\n"
"> > 1 Africa    gdpPercap     2194. \n"
"> > 2 Africa    lifeExp         48.9\n"
"> > 3 Africa    pop        9916003. \n"
"> > 4 Americas  gdpPercap     7136. \n"
"> > 5 Americas  lifeExp         64.7\n"
"> > 6 Americas  pop       24504795. \n"
"> > 7 Asia      gdpPercap     7902. \n"
"> > 8 Asia      lifeExp         60.1\n"
"> > 9 Asia      pop       77038722. \n"
"> >10 Europe    gdpPercap    14469. \n"
"> >11 Europe    lifeExp         71.9\n"
"> >12 Europe    pop       17169765. \n"
"> >13 Oceania   gdpPercap    18622. \n"
"> >14 Oceania   lifeExp         74.3\n"
"> >15 Oceania   pop        8874672. \n"
"> >~~~\n"
"> >{: .output}"

# header
#: r-novice-gapminder/_episodes/14-tidyr.md:303
msgid "## From long to intermediate format with spread()"
msgstr "## spread() で縦長から中間形式へ"

#: r-novice-gapminder/_episodes/14-tidyr.md:305
msgid ""
"It is always good to check work. So, let's use the opposite of `gather()` to\n"
"spread our observation variables back out with the aptly named `spread()`. We\n"
"can then spread our `gap_long()` to the original intermediate format or the\n"
"widest format. Let's start with the intermediate format."
msgstr ""
"仕事を確認することは、とても良いことです。 `gather()` の反対の名は体を表す `spread()` を使って、\n"
"観測変数を元通りに広げてみましょう。そこから `gap_long()` を、元々の中間形式、又は、\n"
"一番横長な形式に広げることもできます。まずは、中間形式から始めましょう。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:311
msgid ""
"~~~\n"
"gap_normal <- gap_long %>% spread(obs_type,obs_values)\n"
"dim(gap_normal)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_normal <- gap_long %>% spread(obs_type,obs_values)\n"
"dim(gap_normal)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:340
msgid ""
"~~~\n"
"names(gap_normal)\n"
"~~~"
msgstr ""
"~~~\n"
"names(gap_normal)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:347
msgid ""
"~~~\n"
"[1] \"continent\" \"country\"   \"year\"      \"gdpPercap\" \"lifeExp\"   \"pop\"      \n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"continent\" \"country\"   \"year\"      \"gdpPercap\" \"lifeExp\"   \"pop\"      \n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:354
msgid ""
"~~~\n"
"names(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"names(gapminder)\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:366
msgid ""
"Now we've got an intermediate dataframe `gap_normal` with the same dimensions as\n"
"the original `gapminder`, but the order of the variables is different. Let's fix\n"
"that before checking if they are `all.equal()`."
msgstr ""
"元々の `gapminder` と同じ次元を持つ、中間形式のデータフレーム `gap_normal` ができましたが、\n"
"変数の順番が違います。 このふたつが、 `all.equal()` かを調べる前に、これを直しましょう。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:371
msgid ""
"~~~\n"
"gap_normal <- gap_normal[,names(gapminder)]\n"
"all.equal(gap_normal,gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_normal <- gap_normal[,names(gapminder)]\n"
"all.equal(gap_normal,gapminder)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:379
msgid ""
"~~~\n"
"[1] \"Component \\\"country\\\": 1704 string mismatches\"              \n"
"[2] \"Component \\\"pop\\\": Mean relative difference: 1.634504\"      \n"
"[3] \"Component \\\"continent\\\": 1212 string mismatches\"            \n"
"[4] \"Component \\\"lifeExp\\\": Mean relative difference: 0.203822\"  \n"
"[5] \"Component \\\"gdpPercap\\\": Mean relative difference: 1.162302\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"Component \\\"country\\\": 1704 string mismatches\"              \n"
"[2] \"Component \\\"pop\\\": Mean relative difference: 1.634504\"      \n"
"[3] \"Component \\\"continent\\\": 1212 string mismatches\"            \n"
"[4] \"Component \\\"lifeExp\\\": Mean relative difference: 0.203822\"  \n"
"[5] \"Component \\\"gdpPercap\\\": Mean relative difference: 1.162302\"\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:390
msgid ""
"~~~\n"
"head(gap_normal)\n"
"~~~"
msgstr ""
"~~~\n"
"head(gap_normal)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:397
msgid ""
"~~~\n"
"  country year      pop continent lifeExp gdpPercap\n"
"1 Algeria 1952  9279525    Africa  43.077  2449.008\n"
"2 Algeria 1957 10270856    Africa  45.685  3013.976\n"
"3 Algeria 1962 11000948    Africa  48.303  2550.817\n"
"4 Algeria 1967 12760499    Africa  51.407  3246.992\n"
"5 Algeria 1972 14760787    Africa  54.518  4182.664\n"
"6 Algeria 1977 17152804    Africa  58.014  4910.417\n"
"~~~"
msgstr ""
"~~~\n"
"  country year      pop continent lifeExp gdpPercap\n"
"1 Algeria 1952  9279525    Africa  43.077  2449.008\n"
"2 Algeria 1957 10270856    Africa  45.685  3013.976\n"
"3 Algeria 1962 11000948    Africa  48.303  2550.817\n"
"4 Algeria 1967 12760499    Africa  51.407  3246.992\n"
"5 Algeria 1972 14760787    Africa  54.518  4182.664\n"
"6 Algeria 1977 17152804    Africa  58.014  4910.417\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:428
msgid ""
"We're almost there, the original was sorted by `country`, `continent`, then\n"
"`year`."
msgstr "もうすぐです。元々のは、 `country` 、 `continent` 、そして `year` でソートされていました。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:432
msgid ""
"~~~\n"
"gap_normal <- gap_normal %>% arrange(country,continent,year)\n"
"all.equal(gap_normal,gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_normal <- gap_normal %>% arrange(country,continent,year)\n"
"all.equal(gap_normal,gapminder)\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:445
msgid ""
"That's great! We've gone from the longest format back to the intermediate and we\n"
"didn't introduce any errors in our code."
msgstr ""
"すばらしい！一番縦に長い形式から、中間形式に戻し、コードにエラーが\n"
"でることもありませんでした。"

#: r-novice-gapminder/_episodes/14-tidyr.md:448
msgid ""
"Now lets convert the long all the way back to the wide. In the wide format, we\n"
"will keep country and continent as ID variables and spread the observations\n"
"across the 3 metrics (`pop`,`lifeExp`,`gdpPercap`) and time (`year`). First we\n"
"need to create appropriate labels for all our new variables (time*metric\n"
"combinations) and we also need to unify our ID variables to simplify the process\n"
"of defining `gap_wide`"
msgstr ""
"さぁ、縦長のものを、全て横長に戻しましょう。横長の形式で、\n"
"国と大陸を、ID変数として置いておいて、３行列（`pop`、`lifeExp`、`gdpPercap`）\n"
"及び時間（`year`）に観測値を分けていきましょう。まず、全ての変数（time*metric の組み合わせ）\n"
"に適当なラベルを付ける必要があります。また、`gap_wide` を定義する処理を簡単にするために、\n"
"ID変数たちを統合する必要もあります。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:456
msgid ""
"~~~\n"
"gap_temp <- gap_long %>% unite(var_ID,continent,country,sep=\"_\")\n"
"str(gap_temp)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_temp <- gap_long %>% unite(var_ID,continent,country,sep=\"_\")\n"
"str(gap_temp)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:464
msgid ""
"~~~\n"
"'data.frame':\t5112 obs. of  4 variables:\n"
" $ var_ID    : chr  \"Africa_Algeria\" \"Africa_Angola\" \"Africa_Benin\" \"Africa_Botswana\" ...\n"
" $ obs_type  : chr  \"gdpPercap\" \"gdpPercap\" \"gdpPercap\" \"gdpPercap\" ...\n"
" $ year      : int  1952 1952 1952 1952 1952 1952 1952 1952 1952 1952 ...\n"
" $ obs_values: num  2449 3521 1063 851 543 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t5112 obs. of  4 variables:\n"
" $ var_ID    : chr  \"Africa_Algeria\" \"Africa_Angola\" \"Africa_Benin\" \"Africa_Botswana\" ...\n"
" $ obs_type  : chr  \"gdpPercap\" \"gdpPercap\" \"gdpPercap\" \"gdpPercap\" ...\n"
" $ year      : int  1952 1952 1952 1952 1952 1952 1952 1952 1952 1952 ...\n"
" $ obs_values: num  2449 3521 1063 851 543 ...\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:475
msgid ""
"~~~\n"
"gap_temp <- gap_long %>%\n"
"    unite(ID_var,continent,country,sep=\"_\") %>%\n"
"    unite(var_names,obs_type,year,sep=\"_\")\n"
"str(gap_temp)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_temp <- gap_long %>%\n"
"    unite(ID_var,continent,country,sep=\"_\") %>%\n"
"    unite(var_names,obs_type,year,sep=\"_\")\n"
"str(gap_temp)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:485
msgid ""
"~~~\n"
"'data.frame':\t5112 obs. of  3 variables:\n"
" $ ID_var    : chr  \"Africa_Algeria\" \"Africa_Angola\" \"Africa_Benin\" \"Africa_Botswana\" ...\n"
" $ var_names : chr  \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" ...\n"
" $ obs_values: num  2449 3521 1063 851 543 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t5112 obs. of  3 variables:\n"
" $ ID_var    : chr  \"Africa_Algeria\" \"Africa_Angola\" \"Africa_Benin\" \"Africa_Botswana\" ...\n"
" $ var_names : chr  \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" \"gdpPercap_1952\" ...\n"
" $ obs_values: num  2449 3521 1063 851 543 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:493
msgid ""
"Using `unite()` we now have a single ID variable which is a combination of\n"
"`continent`,`country`,and we have defined variable names. We're now ready to\n"
"pipe in `spread()`"
msgstr ""
"`unite()` を使い、`continent`と`country`を組み合わせ、ID 変数をひとつ作り、\n"
"変数名を定義しました。 `spread()` でパイプを使う準備が整いました。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:498
msgid ""
"~~~\n"
"gap_wide_new <- gap_long %>%\n"
"    unite(ID_var,continent,country,sep=\"_\") %>%\n"
"    unite(var_names,obs_type,year,sep=\"_\") %>%\n"
"    spread(var_names,obs_values)\n"
"str(gap_wide_new)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_wide_new <- gap_long %>%\n"
"    unite(ID_var,continent,country,sep=\"_\") %>%\n"
"    unite(var_names,obs_type,year,sep=\"_\") %>%\n"
"    spread(var_names,obs_values)\n"
"str(gap_wide_new)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:509
msgid ""
"~~~\n"
"'data.frame':\t142 obs. of  37 variables:\n"
" $ ID_var        : chr  \"Africa_Algeria\" \"Africa_Angola\" \"Africa_Benin\" \"Africa_Botswana\" ...\n"
" $ gdpPercap_1952: num  2449 3521 1063 851 543 ...\n"
" $ gdpPercap_1957: num  3014 3828 960 918 617 ...\n"
" $ gdpPercap_1962: num  2551 4269 949 984 723 ...\n"
" $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...\n"
" $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...\n"
" $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...\n"
" $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...\n"
" $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...\n"
" $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...\n"
" $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...\n"
" $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...\n"
" $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...\n"
" $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...\n"
" $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...\n"
" $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...\n"
" $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...\n"
" $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...\n"
" $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...\n"
" $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...\n"
" $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...\n"
" $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...\n"
" $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...\n"
" $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...\n"
" $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...\n"
" $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...\n"
" $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...\n"
" $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...\n"
" $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...\n"
" $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...\n"
" $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...\n"
" $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...\n"
" $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...\n"
" $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...\n"
" $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...\n"
" $ pop_2002      : num  31287142 10866106 7026113 1630347 12251209 ...\n"
" $ pop_2007      : num  33333216 12420476 8078314 1639131 14326203 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t142 obs. of  37 variables:\n"
" $ ID_var        : chr  \"Africa_Algeria\" \"Africa_Angola\" \"Africa_Benin\" \"Africa_Botswana\" ...\n"
" $ gdpPercap_1952: num  2449 3521 1063 851 543 ...\n"
" $ gdpPercap_1957: num  3014 3828 960 918 617 ...\n"
" $ gdpPercap_1962: num  2551 4269 949 984 723 ...\n"
" $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...\n"
" $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...\n"
" $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...\n"
" $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...\n"
" $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...\n"
" $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...\n"
" $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...\n"
" $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...\n"
" $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...\n"
" $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...\n"
" $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...\n"
" $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...\n"
" $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...\n"
" $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...\n"
" $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...\n"
" $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...\n"
" $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...\n"
" $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...\n"
" $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...\n"
" $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...\n"
" $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...\n"
" $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...\n"
" $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...\n"
" $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...\n"
" $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...\n"
" $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...\n"
" $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...\n"
" $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...\n"
" $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...\n"
" $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...\n"
" $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...\n"
" $ pop_2002      : num  31287142 10866106 7026113 1630347 12251209 ...\n"
" $ pop_2007      : num  33333216 12420476 8078314 1639131 14326203 ...\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:552
msgid ""
">\n"
"> Take this 1 step further and create a `gap_ludicrously_wide` format data by spreading over countries, year and the 3 metrics?\n"
">**Hint** this new dataframe should only have 5 rows.\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> >\n"
"> >~~~\n"
"> >gap_ludicrously_wide <- gap_long %>%\n"
"> >    unite(var_names,obs_type,year,country,sep=\"_\") %>%\n"
"> >    spread(var_names,obs_values)\n"
"> >~~~\n"
"> >{: .language-r}"
msgstr ""
">\n"
"> この一つ先に進み、 `gap_ludicrously_wide` を作り、国、年及び３つの行列に展開したデータを作りましょう。\n"
">**ヒント** この新しいデータフレームには、５行しかありません。\n"
">\n"
"> > ## チャレンジ３の解答\n"
"> >\n"
"> >~~~\n"
"> >gap_ludicrously_wide <- gap_long %>%\n"
"> >    unite(var_names,obs_type,year,country,sep=\"_\") %>%\n"
"> >    spread(var_names,obs_values)\n"
"> >~~~\n"
"> >{: .language-r}"

#: r-novice-gapminder/_episodes/14-tidyr.md:567
msgid ""
"Now we have a great 'wide' format dataframe, but the `ID_var` could be more\n"
"usable, let's separate it into 2 variables with `separate()`"
msgstr ""
"今、とても '横長な' 形式のデータフレームがありますが、 `ID_var` は、より使えるようにできるはずです。\n"
"`separate()` を使って、２変数に分けてみましょう。"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:572
msgid ""
"~~~\n"
"gap_wide_betterID <- separate(gap_wide_new,ID_var,c(\"continent\",\"country\"),sep=\"_\")\n"
"gap_wide_betterID <- gap_long %>%\n"
"    unite(ID_var, continent,country,sep=\"_\") %>%\n"
"    unite(var_names, obs_type,year,sep=\"_\") %>%\n"
"    spread(var_names, obs_values) %>%\n"
"    separate(ID_var, c(\"continent\",\"country\"),sep=\"_\")\n"
"str(gap_wide_betterID)\n"
"~~~"
msgstr ""
"~~~\n"
"gap_wide_betterID <- separate(gap_wide_new,ID_var,c(\"continent\",\"country\"),sep=\"_\")\n"
"gap_wide_betterID <- gap_long %>%\n"
"    unite(ID_var, continent,country,sep=\"_\") %>%\n"
"    unite(var_names, obs_type,year,sep=\"_\") %>%\n"
"    spread(var_names, obs_values) %>%\n"
"    separate(ID_var, c(\"continent\",\"country\"),sep=\"_\")\n"
"str(gap_wide_betterID)\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:585
msgid ""
"~~~\n"
"'data.frame':\t142 obs. of  38 variables:\n"
" $ continent     : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country       : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ gdpPercap_1952: num  2449 3521 1063 851 543 ...\n"
" $ gdpPercap_1957: num  3014 3828 960 918 617 ...\n"
" $ gdpPercap_1962: num  2551 4269 949 984 723 ...\n"
" $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...\n"
" $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...\n"
" $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...\n"
" $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...\n"
" $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...\n"
" $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...\n"
" $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...\n"
" $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...\n"
" $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...\n"
" $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...\n"
" $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...\n"
" $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...\n"
" $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...\n"
" $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...\n"
" $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...\n"
" $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...\n"
" $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...\n"
" $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...\n"
" $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...\n"
" $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...\n"
" $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...\n"
" $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...\n"
" $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...\n"
" $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...\n"
" $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...\n"
" $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...\n"
" $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...\n"
" $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...\n"
" $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...\n"
" $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...\n"
" $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...\n"
" $ pop_2002      : num  31287142 10866106 7026113 1630347 12251209 ...\n"
" $ pop_2007      : num  33333216 12420476 8078314 1639131 14326203 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t142 obs. of  38 variables:\n"
" $ continent     : chr  \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n"
" $ country       : chr  \"Algeria\" \"Angola\" \"Benin\" \"Botswana\" ...\n"
" $ gdpPercap_1952: num  2449 3521 1063 851 543 ...\n"
" $ gdpPercap_1957: num  3014 3828 960 918 617 ...\n"
" $ gdpPercap_1962: num  2551 4269 949 984 723 ...\n"
" $ gdpPercap_1967: num  3247 5523 1036 1215 795 ...\n"
" $ gdpPercap_1972: num  4183 5473 1086 2264 855 ...\n"
" $ gdpPercap_1977: num  4910 3009 1029 3215 743 ...\n"
" $ gdpPercap_1982: num  5745 2757 1278 4551 807 ...\n"
" $ gdpPercap_1987: num  5681 2430 1226 6206 912 ...\n"
" $ gdpPercap_1992: num  5023 2628 1191 7954 932 ...\n"
" $ gdpPercap_1997: num  4797 2277 1233 8647 946 ...\n"
" $ gdpPercap_2002: num  5288 2773 1373 11004 1038 ...\n"
" $ gdpPercap_2007: num  6223 4797 1441 12570 1217 ...\n"
" $ lifeExp_1952  : num  43.1 30 38.2 47.6 32 ...\n"
" $ lifeExp_1957  : num  45.7 32 40.4 49.6 34.9 ...\n"
" $ lifeExp_1962  : num  48.3 34 42.6 51.5 37.8 ...\n"
" $ lifeExp_1967  : num  51.4 36 44.9 53.3 40.7 ...\n"
" $ lifeExp_1972  : num  54.5 37.9 47 56 43.6 ...\n"
" $ lifeExp_1977  : num  58 39.5 49.2 59.3 46.1 ...\n"
" $ lifeExp_1982  : num  61.4 39.9 50.9 61.5 48.1 ...\n"
" $ lifeExp_1987  : num  65.8 39.9 52.3 63.6 49.6 ...\n"
" $ lifeExp_1992  : num  67.7 40.6 53.9 62.7 50.3 ...\n"
" $ lifeExp_1997  : num  69.2 41 54.8 52.6 50.3 ...\n"
" $ lifeExp_2002  : num  71 41 54.4 46.6 50.6 ...\n"
" $ lifeExp_2007  : num  72.3 42.7 56.7 50.7 52.3 ...\n"
" $ pop_1952      : num  9279525 4232095 1738315 442308 4469979 ...\n"
" $ pop_1957      : num  10270856 4561361 1925173 474639 4713416 ...\n"
" $ pop_1962      : num  11000948 4826015 2151895 512764 4919632 ...\n"
" $ pop_1967      : num  12760499 5247469 2427334 553541 5127935 ...\n"
" $ pop_1972      : num  14760787 5894858 2761407 619351 5433886 ...\n"
" $ pop_1977      : num  17152804 6162675 3168267 781472 5889574 ...\n"
" $ pop_1982      : num  20033753 7016384 3641603 970347 6634596 ...\n"
" $ pop_1987      : num  23254956 7874230 4243788 1151184 7586551 ...\n"
" $ pop_1992      : num  26298373 8735988 4981671 1342614 8878303 ...\n"
" $ pop_1997      : num  29072015 9875024 6066080 1536536 10352843 ...\n"
" $ pop_2002      : num  31287142 10866106 7026113 1630347 12251209 ...\n"
" $ pop_2007      : num  33333216 12420476 8078314 1639131 14326203 ...\n"
"~~~"

# code block
#: r-novice-gapminder/_episodes/14-tidyr.md:630
msgid ""
"~~~\n"
"all.equal(gap_wide, gap_wide_betterID)\n"
"~~~"
msgstr ""
"~~~\n"
"all.equal(gap_wide, gap_wide_betterID)\n"
"~~~"

#: r-novice-gapminder/_episodes/14-tidyr.md:642
msgid "There and back again!"
msgstr "そこにまた戻りました！"

# unordered list
#: r-novice-gapminder/_episodes/14-tidyr.md:647
msgid "* [R for Data Science](http://r4ds.had.co.nz/index.html)"
msgstr "* [R for Data Science](http://r4ds.had.co.nz/index.html)"

# unordered list
#: r-novice-gapminder/_episodes/14-tidyr.md:649
msgid "* [Introduction to tidyr](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)"
msgstr "* [Introduction to tidyr](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)"

# Front Matter
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 15-knitr-markdown.md in _episodes_rmd/\n"
"title: Producing Reports With knitr\n"
"teaching: 60\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I integrate software and reports?\"\n"
"objectives:\n"
"- Value of reproducible reports\n"
"- Basics of Markdown\n"
"- R code chunks\n"
"- Chunk options\n"
"- Inline R code\n"
"- Other output formats\n"
"keypoints:\n"
"- \"Mix reporting written in R Markdown with software written in R.\"\n"
"- \"Specify chunk options to control formatting.\"\n"
"- \"Use `knitr` to convert these documents into PDF and other formats.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 15-knitr-markdown.md in _episodes_rmd/\n"
"title: knitr によるレポートの作成\n"
"teaching: 60\n"
"exercises: 15\n"
"questions:\n"
"- \"ソフトウェアとレポートはどのように統合すればよいですか?\"\n"
"objectives:\n"
"- 再現可能なレポートの意義\n"
"- Markdown の基礎\n"
"- R コードのチャンク\n"
"- チャンクのオプション\n"
"- 文中の R コード\n"
"- 他の出力フォーマット\n"
"keypoints:\n"
"- \"R のマークダウンと R で作成されたソフトウェアが混在するレポート\"\n"
"- \"フォーマット制御のために　Specify chunk オプションを指定する。\"\n"
"- \"`knitr` を使用してドキュメントを PDF およびほかのフォーマットに出来る。\"\n"
"source: Rmd\n"
"---"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:26
msgid "## Data analysis reports"
msgstr "## データ分析報告"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:28
msgid ""
"Data analysts tend to write a lot of reports, describing their\n"
"analyses and results, for their collaborators or to document their\n"
"work for future reference."
msgstr ""
"データ分析家は、協力者や、将来参照する文章として、分析及び結果を記した\n"
"報告を数多く書く傾向にあります。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:32
msgid ""
"When I was first starting out, I'd write an R script with all of my\n"
"work, and would just send an email to my collaborator, describing the\n"
"results and attaching various graphs. In discussing the results, there\n"
"would often be confusion about which graph was which."
msgstr ""
"私が始めたばかりの頃は、全ての仕事についてRスクリプトを書いて、\n"
"結果を説明し、様々なグラフを添付したメールを協力者に送信していました。\n"
"結果を議論する際、どのグラフについて話しているのか混乱してしまうことがよくありました。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:37
msgid ""
"I moved to writing formal reports, with Word or LaTeX, but I'd have to\n"
"spend a lot of time getting the figures to look right. Mostly, the\n"
"concern is about page breaks."
msgstr ""
"WordやLaTeXで正式な報告を書く様になったのですが、図を正しく表示\n"
"するためにかなり多くの時間を費やしました。大抵の場合、ページ分けで\n"
"つまずきました。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:41
msgid ""
"Everything is easier now that I create a web page (as an html\n"
"file). It can be one long stream, so I can use tall figures that\n"
"wouldn't ordinary fit on one page. Scrolling is your friend."
msgstr ""
"今では、ウェブページ（htmlファイル）を作るようになり全てが楽になりました。\n"
"ひとつの長いページなるので、普通ではひとつのページに収まらないような高さの図\n"
"でもはみ出さずに入れることができます。「スクロールは友達」ですね。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:46
msgid "## Literate programming"
msgstr "## 読み書きできるプログラミング"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:48
msgid ""
"Ideally, such analysis reports are _reproducible_ documents: If an\n"
"error is discovered, or if some additional subjects are added to the\n"
"data, you can just re-compile the report and get the new or corrected\n"
"results (versus having to reconstruct figures, paste them into\n"
"a Word document, and further hand-edit various detailed results)."
msgstr ""
"分析報告書のようなものは、_再現できる_ 文書であることが理想です。つまり、\n"
"エラーが見つかった場合や、データに追加があった場合など、単に報告書を\n"
"再コンパイルすることで、新しい、または正しい結果が得られるという形です\n"
"（再現できない文書の場合、図を再作成し、Word文書に貼り付け、更に手作業で\n"
"様々な詳細結果に手を加えなえればなりません）。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:54
msgid ""
"The key tool for R is [knitr](http://yihui.name/knitr/), which allows\n"
"you to create a document that is a mixture of text and some chunks of\n"
"code. When the document is processed by knitr, chunks of R code will\n"
"be executed, and graphs or other results inserted."
msgstr ""
"Rでカギとなるツールは [knitr](http://yihui.name/knitr/) です。これは、\n"
"コードと文章が混ざった文書を作成してくれるものです。\n"
"文書がknitrで処理される際にRコードが実行され、\n"
"グラフや他の結果が文書に挿入されます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:59
msgid "This sort of idea has been called \"literate programming\"."
msgstr "こういうものを「読み書きできるプログラミング（literate programming）」と呼びます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:61
msgid ""
"knitr allows you to mix basically any sort of text with any sort of\n"
"code, but we recommend that you use R Markdown, which mixes Markdown\n"
"with R. Markdown is a light-weight mark-up language for creating web\n"
"pages."
msgstr ""
"knitrは、基本的にどんなテキストやコードでも組み合わせられるのですが、\n"
"RにMarkdownを合体させた、R Markdownがお勧めです。\n"
"Markdownは、ウェブページを作るための軽量なマークアップ言語です。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:67
msgid "## Creating an R Markdown file"
msgstr "## R Markdownファイルの作成"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:69
msgid ""
"Within R Studio, click File &rarr; New File &rarr; R Markdown and\n"
"you'll get a dialog box like this:"
msgstr ""
"R Studioで、File &rarr; New File &rarr; R Markdown をクリックしましょう。\n"
"すると、次のようなダイアログボックスが出ます："

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:72
msgid "![](../fig/New_R_Markdown.png)"
msgstr "![](../fig/New_R_Markdown.png)"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:74
msgid "You can stick with the default (HTML output), but give it a title."
msgstr "デフォルト（HTML output）のままでよいので、タイトルを付けましょう。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:77
msgid "## Basic components of R Markdown"
msgstr "## R Markdownの基本構成要素"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:79
msgid ""
"The initial chunk of text contains instructions for R: you give the\n"
"thing a title, author, and date, and tell it that you're going to want\n"
"to produce html output (in other words, a web page)."
msgstr ""
"最初のテキストの塊は、Rへの説明となります。つまり、\n"
"タイトル、著者者、日付といったものを書き込み、\n"
"html（つまりウェブページを）出力したいということを伝えましょう。"

# code block
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:83
msgid ""
"```\n"
"---\n"
"title: \"Initial R Markdown document\"\n"
"author: \"Karl Broman\"\n"
"date: \"April 23, 2015\"\n"
"output: html_document\n"
"---\n"
"```"
msgstr ""
"```\n"
"---\n"
"title: \"Initial R Markdown document\"\n"
"author: \"Karl Broman\"\n"
"date: \"April 23, 2015\"\n"
"output: html_document\n"
"---\n"
"```"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:92
msgid ""
"You can delete any of those fields if you don't want them\n"
"included. The double-quotes aren't strictly _necessary_ in this case.\n"
"They're mostly needed if you want to include a colon in the title."
msgstr ""
"入れたくなければ、これらのフィールドのいずれも消すことができます。\n"
"二重引用符は、厳密には _必須_ ではありません。\n"
"大抵は、タイトルにコロンを含めたいときに使います。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:96
msgid ""
"RStudio creates the document with some example text to get you\n"
"started. Note below that there are chunks like"
msgstr ""
"RStudioは、始めやすいように、例がいくつか入れられてある文書を作成します。\n"
"以下のような「チャンク（chunk）」がすでにあるかと思います："

# inline html
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:99
msgid ""
"<pre>\n"
"&#96;&#96;&#96;{r}\n"
"summary(cars)\n"
"&#96;&#96;&#96;\n"
"</pre>"
msgstr ""
"<pre>\n"
"&#96;&#96;&#96;{r}\n"
"summary(cars)\n"
"&#96;&#96;&#96;\n"
"</pre>"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:105
msgid ""
"These are chunks of R code that will be executed by knitr and replaced\n"
"by their results. More on this later."
msgstr ""
"これらはRコードの「チャンク」（塊）で、knitrによってコードが実行され、結果に置き換えられます。\n"
"また後ほど、詳しくお伝えします。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:108
msgid ""
"Also note the web address that's put between angle brackets (`< >`) as\n"
"well as the double-asterisks in `**Knit**`. This is\n"
"[Markdown](http://daringfireball.net/projects/markdown/syntax)."
msgstr ""
"`**Knit**` の中にある、二重アスタリスクとかぎ括弧（ `< >` ）の間に置かれているウェブアドレスが\n"
"あるのが分かるでしょうか。これが、[Markdown](http://daringfireball.net/projects/markdown/syntax)なのです。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:112
msgid "## Markdown"
msgstr "## Markdown"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:114
msgid ""
"Markdown is a system for writing web pages by marking up the text much\n"
"as you would in an email rather than writing html code. The marked-up\n"
"text gets _converted_ to html, replacing the marks with the proper\n"
"html code."
msgstr ""
"Markdownは、メールを書くような感覚でテキストに印をつけていきながら、htmlコードを使わずに\n"
"ウェブページを書くための言語です。印がつけられた（marked-up）\n"
"テキストは、マークが指し示す正しいhtmlコードに置き換えられながら、htmlに _変換_ されます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:119
msgid ""
"For now, let's delete all of the stuff that's there and write a bit of\n"
"markdown."
msgstr "とりあえず、ここにあるものを全部消して、少しMarkdownを書いてみましょう。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:122
msgid ""
"You make things **bold** using two asterisks, like this: `**bold**`,\n"
"and you make things _italics_ by using underscores, like this:\n"
"`_italics_`."
msgstr ""
"二重アスタリスクを使って、 **太字** に（例 `**bold**`）、\n"
"下線を使って、 _斜体_ にすることができます（例 `_italics_`）。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:126
msgid ""
"You can make a bulleted list by writing a list with hyphens or\n"
"asterisks, like this:"
msgstr "ハイフンやアスタリスクを使って、箇条書きを書くこともできます。例えば："

# code block
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:129
msgid ""
"```\n"
"* bold with double-asterisks\n"
"* italics with underscores\n"
"* code-type font with backticks\n"
"```"
msgstr ""
"```\n"
"* 太字は、二重アスタリスクで\n"
"* 斜体は、下線で\n"
"* コードタイプのフォントは括弧で\n"
"```"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:135
msgid "or like this:"
msgstr "または、このように："

# code block
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:137
msgid ""
"```\n"
"- bold with double-asterisks\n"
"- italics with underscores\n"
"- code-type font with backticks\n"
"```"
msgstr ""
"```\n"
"- 太字は、二重アスタリスクで\n"
"- 斜体は、下線で\n"
"- コードタイプのフォントは括弧で\n"
"```"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:143
msgid "Each will appear as:"
msgstr "それぞれ、以下の形で表示されます："

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:145
msgid "- bold with double-asterisks"
msgstr "- 太字は、二重アスタリスクで"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:146
msgid "- italics with underscores"
msgstr "- 斜体は、下線で"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:147
msgid "- code-type font with backticks"
msgstr "- コードタイプのフォントは括弧で"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:149
msgid "(I prefer hyphens over asterisks, myself.)"
msgstr "（私はハイフンよりもアスタリスクの方が好きですが）"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:151
msgid ""
"You can make a numbered list by just using numbers. You can use the\n"
"same number over and over if you want:"
msgstr ""
"数字を使って番号付きリストを作ることもできます。\n"
"同じ番号を何度でも好きなだけ使えます："

# code block
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:154
msgid ""
"```\n"
"1. bold with double-asterisks\n"
"1. italics with underscores\n"
"1. code-type font with backticks\n"
"```"
msgstr ""
"```\n"
"1. 太字は、二重アスタリスクで\n"
"1. 斜体は、下線で\n"
"1. コードタイプのフォントは括弧で\n"
"```"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:160
msgid "This will appear as:"
msgstr "これは、次のように表示されます："

# ordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:162
msgid "1. bold with double-asterisks"
msgstr "1. 太字は、二重アスタリスクで"

# ordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:163
msgid "1. italics with underscores"
msgstr "1. 斜体は、下線で"

# ordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:164
msgid "1. code-type font with backticks"
msgstr "1. コードタイプのフォントは括弧で"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:166
msgid ""
"You can make section headers of different sizes by initiating a line\n"
"with some number of `#` symbols:"
msgstr "行の頭に `#` 印を好きな数つけることで、色々なサイズの文節の題名を作ることができます："

# code block
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:169
msgid ""
"```\n"
"# Title\n"
"## Main section\n"
"### Sub-section\n"
"#### Sub-sub section\n"
"```"
msgstr ""
"```\n"
"# タイトル\n"
"## 主文節\n"
"### 副文節\n"
"#### 更なる副文節\n"
"```"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:176
msgid ""
"You _compile_ the R Markdown document to an html webpage by clicking\n"
"the \"Knit HTML\" in the upper-left. And note the little question mark\n"
"next to it; click the question mark and you'll get a \"Markdown Quick\n"
"Reference\" (with the Markdown syntax) as well to the RStudio\n"
"documentation on R Markdown."
msgstr ""
"左上にある「Knit HTML」をクリックすることで、R Markdown文書をhtml ウェブサイトへ _コンパイル_ する\n"
"ことができます。その隣に、小さな疑問符があるのが分かると思います。その疑問符をクリックしてみると、\n"
"R MarkdownについてのRStudio文書と、「Markdown Quick Reference」（Markdownのシンタックス付き）\n"
"が出てきます。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:182
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:234
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:301
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:329
msgid "> ## Challenge"
msgstr "> ## チャレンジ1"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:183
msgid ""
">\n"
"> Create a new R Markdown document. Delete all of the R code chunks\n"
"> and write a bit of Markdown (some sections, some italicized\n"
"> text, and an itemized list).\n"
">\n"
"> Convert the document to a webpage."
msgstr ""
">\n"
"> 新しいR Markdown文書を作りましょう。Rコードのチャンクを全て消して、\n"
"> Markdown（いくつかの文節、斜体テキスト、箇条書き）\n"
"> を書いてみましょう。\n"
">\n"
"> この文書をウェブサイトにしてみましょう。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:192
msgid "## A bit more Markdown"
msgstr "## もうちょっとMarkdownについて"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:194
msgid ""
"You can make a hyperlink like this:\n"
"`[text to show](http://the-web-page.com)`."
msgstr ""
"次のような、ハイパーリンクを作ることができます：\n"
"`[表示するテキスト](http://the-web-page.com)`."

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:197
msgid "You can include an image file like this: `![caption](http://url/for/file)`"
msgstr "このようなイメージを含めることもできます：`![caption](http://url/for/file)`"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:199
msgid ""
"You can do subscripts (e.g., F~2~) with `F~2` and superscripts (e.g.,\n"
"F^2^) with `F^2^`."
msgstr "下付き文字 （例 F~2~）は `F~2` で、上付き文字（例 F^2^）は `F^2^` でできます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:202
msgid ""
"If you know how to write equations in\n"
"[LaTeX](http://www.latex-project.org/), you'll be glad to know that\n"
"you can use `$ $` and `$$ $$` to insert math equations, like\n"
"`$E = mc^2$` and"
msgstr ""
"[LaTeX](http://www.latex-project.org/)の等式の書き方を知っていれば、\n"
"`$ $` と `$$ $$` で数式を挿入することができます。\n"
"例えば、 `$E = mc^2$` や、"

# code block
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:207
msgid ""
"```\n"
"$$y = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon$$\n"
"```"
msgstr ""
"```\n"
"$$y = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon$$\n"
"```"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:213
msgid "## R code chunks"
msgstr "## Rコードの「チャンク（塊）」"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:215
msgid ""
"Markdown is interesting and useful, but the real power comes from\n"
"mixing markdown with chunks of R code. This is R Markdown. When\n"
"processed, the R code will be executed; if they produce figures, the\n"
"figures will be inserted in the final document."
msgstr ""
"Markdownは役に立つし、興味深くもあるのですが、一番重要な機能は、RコードとMarkdownを組み合わせられることなのです。\n"
"それが、R Markdownです。処理すると、Rコードが実行され、図が作られ、最終的な文書に挿入されます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:220
msgid "The main code chunks look like this:"
msgstr "メインのコードチャンクは、こんな感じです："

# inline html
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:222
msgid ""
"<pre>\n"
"&#96;&#96;&#96;{r load_data}\n"
"gapminder <- read.csv(\"~/Desktop/gapminder.csv\")\n"
"&#96;&#96;&#96;\n"
"</pre>"
msgstr ""
"<pre>\n"
"&#96;&#96;&#96;{r load_data}\n"
"gapminder <- read.csv(\"~/Desktop/gapminder.csv\")\n"
"&#96;&#96;&#96;\n"
"</pre>"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:228
msgid ""
"That is, you place a chunk of R code between <code>&#96;&#96;&#96;{r chunk_name}</code>\n"
"and <code>&#96;&#96;&#96;</code>. It's a good idea to give each chunk\n"
"a name, as they will help you to fix errors and, if any graphs are\n"
"produced, the file names are based on the name of the code chunk that\n"
"produced them."
msgstr ""
"つまり、Rコードを<code>&#96;&#96;&#96;{r chunk_name}</code>\n"
"と<code>&#96;&#96;&#96;</code>の間に置くことでコードの「チャンク（chunk・塊）」を作ります。それぞれのチャンクに重複しない名前を付けておくといいでしょう。\n"
"そうすると、エラーを修正するときに役立ちますし、グラフのファイル名は、生成されたコードのチャンクの名前に基づいて付けられるからです。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:235
msgid ""
">\n"
"> Add code chunks to\n"
">\n"
"> - Load the ggplot2 package\n"
"> - Read the gapminder data\n"
"> - Create a plot"
msgstr ""
">\n"
"> 以下を行うコードチャンクを加えましょう\n"
">\n"
"> - ggplot2 パッケージの読み込み\n"
"> - gapminder データの読み込み\n"
"> - プロットの作成"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:243
msgid "## How things get compiled"
msgstr "## どうコンパイルされるか"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:245
msgid ""
"When you press the \"Knit HTML\" button, the R Markdown document is\n"
"processed by [knitr](http://yihui.name/knitr) and a plain Markdown\n"
"document is produced (as well as, potentially, a set of figure files): the R code is executed\n"
"and replaced by both the input and the output; if figures are\n"
"produced, links to those figures are included."
msgstr ""
"「Knit HTML」ボタンを押すと、R Markdown文書は[knitr](http://yihui.name/knitr)\n"
"によって処理され、単純なMarkdown文書が（一連の図のファイルと共に）生成されます。\n"
"Rコードは実行され、入力と出力に置き換えられます。図が生成された場合、\n"
"これらの図へのリンクが挿入されます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:251
msgid ""
"The Markdown and figure documents are then processed by the tool\n"
"[pandoc](http://pandoc.org/), which converts the Markdown file into an\n"
"html file, with the figures embedded."
msgstr ""
"Markdownと図の文書は、[pandoc](http://pandoc.org/) というツールで処理され、\n"
"Markdownファイルは、図の埋め込まれたhtmlファイルに変換されます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:255
msgid "<img src=\"../fig/rmd-15-rmd_to_html_fig-1.png\" title=\"plot of chunk rmd_to_html_fig\" alt=\"plot of chunk rmd_to_html_fig\" style=\"display: block; margin: auto auto auto 0;\" />"
msgstr "<img src=\"../fig/rmd-15-rmd_to_html_fig-1.png\" title=\"plot of chunk rmd_to_html_fig\" alt=\"plot of chunk rmd_to_html_fig\" style=\"display: block; margin: auto auto auto 0;\" />"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:260
msgid "## Chunk options"
msgstr "## チャンクのオプション"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:262
msgid ""
"There are a variety of options to affect how the code chunks are\n"
"treated."
msgstr "コードのチャンクがどう扱われるかは、様々なオプションによって決められます。"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:265
msgid "- Use `echo=FALSE` to avoid having the code itself shown."
msgstr "- コード自体を見せないためには、 `echo=FALSE` を使います"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:266
msgid "- Use `results=\"hide\"` to avoid having any results printed."
msgstr "- 結果を表示しないためには、 `results=\"hide\"` を使います"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:267
msgid "- Use `eval=FALSE` to have the code shown but not evaluated."
msgstr "- コードを演算せず表示するためには、 `eval=FALSE` を使います"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:268
msgid "- Use `warning=FALSE` and `message=FALSE` to hide any warnings or"
msgstr "- 警告やメッセージを隠す場合は、 `warning=FALSE` と `message=FALSE` を使います"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:269
msgid ""
"  messages produced.\n"
"- Use `fig.height` and `fig.width` to control the size of the figures\n"
"  produced (in inches)."
msgstr "- 生成される図の大きさを（インチで）管理するためには、 `fig.height` と `fig.width` を使います"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:273
msgid "So you might write:"
msgstr "なので、書くとすれば："

# inline html
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:275
msgid ""
"<pre>\n"
"&#96;&#96;&#96;{r load_libraries, echo=FALSE, message=FALSE}\n"
"library(\"dplyr\")\n"
"library(\"ggplot2\")\n"
"&#96;&#96;&#96;\n"
"</pre>"
msgstr ""
"<pre>\n"
"&#96;&#96;&#96;{r load_libraries, echo=FALSE, message=FALSE}\n"
"library(\"dplyr\")\n"
"library(\"ggplot2\")\n"
"&#96;&#96;&#96;\n"
"</pre>"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:282
msgid ""
"Often there will be particular options that you'll want to use\n"
"repeatedly; for this, you can set _global_ chunk options, like so:"
msgstr ""
"使いたいオプションを別のチャンクでも使いたい場合は、\n"
" _global_options_ を使います。例えば："

# inline html
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:285
msgid ""
"<pre>\n"
"&#96;&#96;&#96;{r global_options, echo=FALSE}\n"
"knitr::opts_chunk$set(fig.path=\"Figs/\", message=FALSE, warning=FALSE,\n"
"                      echo=FALSE, results=\"hide\", fig.width=11)\n"
"&#96;&#96;&#96;\n"
"</pre>"
msgstr ""
"<pre>\n"
"&#96;&#96;&#96;{r global_options, echo=FALSE}\n"
"knitr::opts_chunk$set(fig.path=\"Figs/\", message=FALSE, warning=FALSE,\n"
"                      echo=FALSE, results=\"hide\", fig.width=11)\n"
"&#96;&#96;&#96;\n"
"</pre>"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:292
msgid ""
"The `fig.path` option defines where the figures will be saved. The `/`\n"
"here is really important; without it, the figures would be saved in\n"
"the standard place but just with names that begin with `Figs`."
msgstr ""
" `fig.path` オプションは、図のファイルがどこに保存されるかを定義します。\n"
"ここでの `/` はとても重要で、もしこれがなければ、図は標準的な場所に\n"
"保存されますが、 `Figs` で始まる名前のファイルだけになります。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:296
msgid ""
"If you have multiple R Markdown files in a common directory, you might\n"
"want to use `fig.path` to define separate prefixes for the figure file\n"
"names, like `fig.path=\"Figs/cleaning-\"` and `fig.path=\"Figs/analysis-\"`."
msgstr ""
"共有ディレクトリにR Markdownファイルが複数ある場合は、\n"
" `fig.path` を図のファイル名と異なる接頭語を付けるために使うといいかもしれません。\n"
"例えば、`fig.path=\"Figs/cleaning-\"` と `fig.path=\"Figs/analysis-\"` とすれば、\n"
"それぞれ `\"cleaning-\"` と `\"analysis-\"` で始まる図のファイルが `\"Figs/\"` ディレクトリに保存されます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:302
msgid ""
">\n"
"> Use chunk options to control the size of a figure and to hide the\n"
"> code."
msgstr ""
">\n"
"> 図の大きさを管理し、コードを隠すチャンクのオプションを使ってみましょう。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:308
msgid "## Inline R code"
msgstr "## 文中のRコード"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:310
msgid ""
"You can make _every_ number in your report reproducible. Use\n"
"<code>&#96;r</code> and <code>&#96;</code> for an in-line code chunk,\n"
"like so: <code>&#96;r round(some_value, 2)&#96;</code>. The code will be\n"
"executed and replaced with the _value_ of the result."
msgstr ""
"報告書にある、_全て_ の数を再現可能なものにすることができます。\n"
"<code>&#96;r</code> と <code>&#96;</code> を文中のコードのチャンクに入れてみましょう。\n"
"例えば、 <code>&#96;r round(some_value, 2)&#96;</code>。このコードはコンパイル時に\n"
"実行され、結果の _値_ に置き換えられます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:315
msgid "Don't let these in-line chunks get split across lines."
msgstr "この文中のチャンクを、複数の行に分けて入れないようにしましょう。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:317
msgid ""
"Perhaps precede the paragraph with a larger code chunk that does\n"
"calculations and defines things, with `include=FALSE` for that larger\n"
"chunk (which is the same as `echo=FALSE` and `results=\"hide\"`)."
msgstr ""
"こういう場合は、パラグラフの前に`include=FALSE`\n"
"（ `echo=FALSE` と `results=\"hide\"` の組み合わせと同じ）のオプションを設定した、\n"
"定義や演算を行うコードチャンクを作っておきましょう。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:321
msgid ""
"I'm very particular about rounding in such situations. I may want\n"
"`2.0`, but `round(2.03, 1)` will give just `2`."
msgstr ""
"私は四捨五入に関しては、神経質になりがちです。\n"
"`2.0` が欲しくても、`round(2.03, 1)` ではただの `2` が出てきてしまいます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:324
msgid ""
"The\n"
"[`myround`](https://github.com/kbroman/broman/blob/master/R/myround.R)\n"
"function in my [R/broman](https://github.com/kbroman) package handles\n"
"this."
msgstr ""
"[R/broman](https://github.com/kbroman)パッケージにある、\n"
"[`myround`](https://github.com/kbroman/broman/blob/master/R/myround.R)関数が、\n"
"この問題に対処してくれます。"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:330
msgid ""
">\n"
"> Try out a bit of in-line R code."
msgstr ""
">\n"
"> 文中のRコードを少し試してみましょう。"

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:335
msgid "## Other output options"
msgstr "## その他の出力オプション"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:337
msgid ""
"You can also convert R Markdown to a PDF or a Word document. Click the\n"
"little triangle next to the \"Knit HTML\" button to get a drop-down\n"
"menu. Or you could put `pdf_document` or `word_document` in the header\n"
"of the file."
msgstr ""
"R MarkdownをPDFやWord文書に変換することもできます。\n"
"ドロップダウンメニューを表示させるために、「Knit HTML」の横にある小さい三角をクリックしましょう。\n"
"または、 `pdf_document` や `word_document` をファイルの最初のヘッダー（header）に入れておくこともできます。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:342
msgid "> ## Tip: Creating PDF documents"
msgstr "> ## ヒント：PDFドキュメントの作成"

#: r-novice-gapminder/_episodes/15-knitr-markdown.md:343
msgid ""
">\n"
"> Creating .pdf documents may require installation of some extra software. If\n"
"> required this is detailed in an error message.\n"
">\n"
"> - [TeX installers for Windows](https://miktex.org/2.9/setup).\n"
"> - [TeX installers for macOS](https://tug.org/mactex)."
msgstr ""
">\n"
"> `.pdf` 文書を作成するためには、いくつかソフトウェアをインストールしなければいけないかもしれません。\n"
"> これらのソフトが必要な場合は、エラーメッセージの中に詳細が述べられています。\n"
">\n"
"> - [Windows向けのTeXインストーラー](https://miktex.org/2.9/setup).\n"
"> - [macOS向けのTeXインストーラー](https://tug.org/mactex)."

# header
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:352
msgid "## Resources"
msgstr "## 資料"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:354
msgid "- [Knitr in a knutshell tutorial](http://kbroman.org/knitr_knutshell)"
msgstr "- [Knitr in a knutshell tutorial](http://kbroman.org/knitr_knutshell)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:355
msgid "- [Dynamic Documents with R and knitr](http://www.amazon.com/exec/obidos/ASIN/1482203537/7210-20) (book)"
msgstr "- [Dynamic Documents with R and knitr](http://www.amazon.com/exec/obidos/ASIN/1482203537/7210-20) (book)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:356
msgid "- [R Markdown documentation](http://rmarkdown.rstudio.com)"
msgstr "- [R Markdown documentation](http://rmarkdown.rstudio.com)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:357
msgid "- [R Markdown cheat sheet](http://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)"
msgstr "- [R Markdown cheat sheet](http://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:358
msgid "* [Getting started with R Markdown](https://www.rstudio.com/resources/webinars/getting-started-with-r-markdown/)"
msgstr "* [Getting started with R Markdown](https://www.rstudio.com/resources/webinars/getting-started-with-r-markdown/)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:359
msgid "* [Reproducible Reporting](https://www.rstudio.com/resources/webinars/reproducible-reporting/)"
msgstr "* [Reproducible Reporting](https://www.rstudio.com/resources/webinars/reproducible-reporting/)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:360
msgid "* [The Ecosystem of R Markdown](https://www.rstudio.com/resources/webinars/the-ecosystem-of-r-markdown/)"
msgstr "* [The Ecosystem of R Markdown](https://www.rstudio.com/resources/webinars/the-ecosystem-of-r-markdown/)"

# unordered list
#: r-novice-gapminder/_episodes/15-knitr-markdown.md:361
msgid "* [Introducing Bookdown](https://www.rstudio.com/resources/webinars/introducing-bookdown/)"
msgstr "* [Introducing Bookdown](https://www.rstudio.com/resources/webinars/introducing-bookdown/)"

# Front Matter
#: r-novice-gapminder/_episodes/16-wrap-up.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 16-wrap-up.md in _episodes_rmd/\n"
"title: Writing Good Software\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I write software that other people can use?\"\n"
"objectives:\n"
"- \"Describe best practices for writing R and explain the justification for each.\"\n"
"keypoints:\n"
"- \"Keep your project folder structured, organized and tidy.\"\n"
"- \"Document what and why, not how.\"\n"
"- \"Break programs into short single-purpose functions.\"\n"
"- \"Write re-runnable tests.\"\n"
"- \"Don't repeat yourself.\"\n"
"- \"Don't repeat yourself.\"\n"
"- \"Be consistent in naming, indentation, and other aspects of style.\"\n"
"source: Rmd\n"
"---"
msgstr ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 16-wrap-up.md in _episodes_rmd/\n"
"title: 良いソフトウェアの作成\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"他の人も使えるソフトウェアを書くにはどうしたらよいですか?\"\n"
"objectives:\n"
"- \"R のプログラミングのベストプラクティスとその理由が説明できるようになりましょう。\"\n"
"keypoints:\n"
"- \"常にプロジェクトフォルダーを構造化し、整理し、片づけておく。\"\n"
"- \"どうやって、ではなく、何であるかとなぜであるかを文書化しておく。\"\n"
"- \"プログラムは一つの用途に絞られた短い関数に分割する。\"\n"
"- \"繰り返し行えるテスト内容を書いておく。\"\n"
"- \"同じことを繰り返さない。\"\n"
"- \"同じことを繰り返さない。\"\n"
"- \"名前やインデント、そして他のスタイルに関して一貫性を保つ。\"\n"
"source: Rmd\n"
"---"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:22
msgid "## Structure your project folder"
msgstr "## プロジェクトフォルダーを構造化する"

#: r-novice-gapminder/_episodes/16-wrap-up.md:24
msgid "Keep your project folder structured, organized and tidy, by creating subfolders for your code files, manuals, data, binaries, output plots, etc. It can be done completely manually, or with the help of RStudio's `New Project` functionality, or a desginated package, such as `ProjectTemplate`."
msgstr "プロジェクトフォルダーを、コードファイル、マニュアル、データ、バイナリー、プロットの出力などのサブフォルダーを作ることで、構造化し、整理し、片づけておきましょう。全部手作業でできますが、RStudioの `New Project` 機能、または、`ProjectTemplate` のように、その目的で作られたパッケージの助けを借りることもできます。"

# blockquote, which can be cascaded
#: r-novice-gapminder/_episodes/16-wrap-up.md:26
msgid "> ## Tip: ProjectTemplate - a possible solution"
msgstr "> ## ヒント：解決策の一つ：ProjectTemplate"

#: r-novice-gapminder/_episodes/16-wrap-up.md:27
msgid ""
">\n"
"> One way to automate the management of projects is to install the third-party package, `ProjectTemplate`.\n"
"> This package will set up an ideal directory structure for project management.\n"
"> This is very useful as it enables you to have your analysis pipeline/workflow organised and structured.\n"
"> Together with the default RStudio project functionality and Git you will be able to keep track of your\n"
"> work as well as be able to share your work with collaborators.\n"
">\n"
"> 1. Install `ProjectTemplate`.\n"
"> 2. Load the library\n"
"> 3. Initialise the project:\n"
">\n"
"> \n"
"> ```r\n"
"> install.packages(\"ProjectTemplate\")\n"
"> library(\"ProjectTemplate\")\n"
"> create.project(\"../my_project\", merge.strategy = \"allow.non.conflict\")\n"
"> ```\n"
">\n"
"> For more information on ProjectTemplate and its functionality visit the\n"
"> home page [ProjectTemplate](http://projecttemplate.net/index.html)"
msgstr ""
">\n"
"> プロジェクトの管理を自動化する方法のひとつは、第三者パッケージである `ProjectTemplate` をインストールすることです。\n"
"> このパッケージは、プロジェクト管理に理想的なディレクトリ構造を作成します。\n"
"> 自分の分析パイプライン（またはワークフロー）が整理、構造化されるので、これはとても役に立ちます。\n"
"> RStudioのデフォルトプロジェクト機能とGitと組み合わせれば、自分の作業の履歴を保存し、他の共同作業者とシェアすることもできます。\n"
">\n"
"> 1. `ProjectTemplate` をダウンロードする\n"
"> 2. ライブラリを読み込む\n"
"> 3. プロジェクトを開始する：\n"
">\n"
"> \n"
"> ```r\n"
"> install.packages(\"ProjectTemplate\")\n"
"> library(\"ProjectTemplate\")\n"
"> create.project(\"../my_project\", merge.strategy = \"allow.non.conflict\")\n"
"> ```\n"
">\n"
"> ProjectTemplate及びその機能についての更なる情報は、\n"
"> 次のホームページから入手可能です： [ProjectTemplate](http://projecttemplate.net/index.html)"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:50
msgid "## Make code readable"
msgstr "## コードを読めるようにする"

#: r-novice-gapminder/_episodes/16-wrap-up.md:52
msgid ""
"The most important part of writing code is making it readable and understandable.\n"
"You want someone else to be able to pick up your code and be able to understand\n"
"what it does: more often than not this someone will be you 6 months down the line,\n"
"who will otherwise be cursing past-self."
msgstr ""
"コードを書く際に一番重要なのが、読みやすくて理解のしやすくすることです。\n"
"他の誰が自分のコードを取り上げ、何をするものかを理解してもらわなければなりません。\n"
"多くの場合、この誰かさんは、6か月後の自分なので、もしコードが読めない、\n"
"理解できない場合は、昔の自分に悪態をつくことになるでしょう。"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:57
msgid "## Documentation: tell us what and why, not how"
msgstr "## 文書化：「どうやって」ではなく「なぜ」を伝えて下さい"

#: r-novice-gapminder/_episodes/16-wrap-up.md:59
msgid ""
"When you first start out, your comments will often describe what a command does,\n"
"since you're still learning yourself and it can help to clarify concepts and\n"
"remind you later. However, these comments aren't particularly useful later on\n"
"when you don't remember what problem your code is trying to solve. Try to also\n"
"include comments that tell you *why* you're solving a problem, and *what* problem\n"
"that is. The *how* can come after that: it's an implementation detail you ideally\n"
"shouldn't have to worry about."
msgstr ""
"初めのころは、コメントにそのコマンドが何をするかを記したものが多いはずです。\n"
"なぜならば、学び始めたばかりで、概念をはっきりさせるのに役立ち、後で思い出せるからです。\n"
"しかしながら、後々、それらのコメントは、コードがどんな問題を解決しようとしていたのかを思い出そうと\n"
"する際には役に立ちません。 自分は*何* の問題を、 *なぜ* 解こうとしているのかを、コメントに含めるようにしましょう。\n"
"*どうやって* 問題を解いたのかについては、その後の話です。導入の詳細は、理想的にはそこまで心配する必要はありません。"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:67
msgid "## Keep your code modular"
msgstr "## コードをモジュール化しましょう"

#: r-novice-gapminder/_episodes/16-wrap-up.md:69
msgid ""
"Our recommendation is that you should separate your functions from your analysis\n"
"scripts, and store them in a separate file that you `source` when you open the R\n"
"session in your project. This approach is nice because it leaves you with an\n"
"uncluttered analysis script, and a repository of useful functions that can be\n"
"loaded into any analysis script in your project. It also lets you group related\n"
"functions together easily."
msgstr ""
"関数を分析スクリプトと分けて、別のファイルに保存しておき、\n"
"プロジェクトでRのセッションを開いたときに、 `source` することをオススメします。\n"
"このアプローチを取ると、分析スクリプトに無駄がなくなり、プロジェクト内のどの分析スクリプトでも\n"
"使える関数をストックする場所ができるので、便利です。\n"
"また、同じような関数をまとめるのが簡単になります。"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:76
msgid "## Break down problem into bite size pieces"
msgstr "## 問題をひとくち大に分ける"

#: r-novice-gapminder/_episodes/16-wrap-up.md:78
msgid ""
"When you first start out, problem solving and function writing can be daunting\n"
"tasks, and hard to separate from code inexperience. Try to break down your\n"
"problem into digestible chunks and worry about the implementation details later:\n"
"keep breaking down the problem into smaller and smaller functions until you\n"
"reach a point where you can code a solution, and build back up from there."
msgstr ""
"初めは、問題解決と関数の記述は気が滅入るタスクで、\n"
"コードの経験不足とは別の問題として分けることができないと思うかもしれません。問題を消化できる塊に分け、\n"
"導入の詳細についての心配は後回しにしましょう：\n"
"問題をコードで解決できるまで、どんどん小さい関数に分けていきしましょう。\n"
"そして、解決されたものを積み上げていけば、問題を解決できるでしょう。"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:84
msgid "## Know that your code is doing the right thing"
msgstr "## コードが正しいことをしているか確かめましょう"

#: r-novice-gapminder/_episodes/16-wrap-up.md:86
msgid "Make sure to test your functions!"
msgstr "関数をテストすることを、くれぐれも忘れないように！"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:88
msgid "## Don't repeat yourself"
msgstr "## 同じことを繰り返さないようにしましょう"

#: r-novice-gapminder/_episodes/16-wrap-up.md:90
msgid ""
"Functions enable easy reuse within a project. If you see blocks of similar\n"
"lines of code through your project, those are usually candidates for being\n"
"moved into functions."
msgstr ""
"関数は、プロジェクトの中で簡単に再利用できます。もし、プロジェクトで同じようなコードの行の塊を\n"
"見つけたら、それらを関数に移す候補にしましょう。"

#: r-novice-gapminder/_episodes/16-wrap-up.md:94
msgid ""
"If your calculations are performed through a series of functions, then the\n"
"project becomes more modular and easier to change. This is especially the case\n"
"for which a particular input always gives a particular output."
msgstr ""
"もし、計算が一連の関数で行われていた場合、プロジェクトはよりモジュール化され、変更するのが簡単になります。\n"
"これは、特定のインプットが必ず特定のアウトプットを返す場合など、特にそうです。"

# header
#: r-novice-gapminder/_episodes/16-wrap-up.md:98
msgid "## Remember to be stylish"
msgstr "## 常にスタイリッシュであろうとする"

#: r-novice-gapminder/_episodes/16-wrap-up.md:100
msgid "Apply consistent style to your code."
msgstr "自分のコードに一貫性のあるスタイルを適用しましょう。"

# Front Matter
#: r-novice-gapminder/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"

#: r-novice-gapminder/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr "{% include carpentries.html %}"

# Front Matter
#: r-novice-gapminder/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /discuss/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /discuss/\n"
"---"

#: r-novice-gapminder/_extras/discuss.md:6
msgid "Please see [our other R lesson][r-gap] for a different presentation of these concepts."
msgstr "Please see [our other R lesson][r-gap] for a different presentation of these concepts."

#: r-novice-gapminder/_extras/discuss.md:8
msgid "[r-gap]: https://swcarpentry.github.io/r-novice-gapminder/"
msgstr "[r-gap]: https://swcarpentry.github.io/r-novice-gapminder/"

# Front Matter
#: r-novice-gapminder/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"

# header
#: r-novice-gapminder/_extras/guide.md:7
msgid "## Timing"
msgstr "## Timing"

#: r-novice-gapminder/_extras/guide.md:9
msgid ""
"Leave about 30 minutes at the start of each workshop and another 15 mins\n"
"at the start of each session for technical difficulties like WiFi and\n"
"installing things (even if you asked students to install in advance, longer if\n"
"not)."
msgstr ""
"Leave about 30 minutes at the start of each workshop and another 15 mins\n"
"at the start of each session for technical difficulties like WiFi and\n"
"installing things (even if you asked students to install in advance, longer if\n"
"not)."

# header
#: r-novice-gapminder/_extras/guide.md:14
msgid "## Lesson Plans"
msgstr "## Lesson Plans"

#: r-novice-gapminder/_extras/guide.md:16
msgid ""
"The lesson contains much more material than can be taught in a day.\n"
"Instructors will need to pick an appropriate subset of episodes to use\n"
"in a standard one day course. "
msgstr ""
"The lesson contains much more material than can be taught in a day.\n"
"Instructors will need to pick an appropriate subset of episodes to use\n"
"in a standard one day course. "

#: r-novice-gapminder/_extras/guide.md:20
msgid "Some suggested paths through the material are:"
msgstr "Some suggested paths through the material are:"

#: r-novice-gapminder/_extras/guide.md:22
msgid "(suggested by [@liz-is](https://github.com/swcarpentry/r-novice-gapminder/issues/104#issuecomment-276529213))"
msgstr "(suggested by [@liz-is](https://github.com/swcarpentry/r-novice-gapminder/issues/104#issuecomment-276529213))"

# unordered list
#: r-novice-gapminder/_extras/guide.md:24
#: r-novice-gapminder/_extras/guide.md:46
msgid "* 01 Introduction to R and RStudio"
msgstr "* 01 Introduction to R and RStudio"

# unordered list
#: r-novice-gapminder/_extras/guide.md:25
msgid "* 04 Data Structures"
msgstr "* 04 Data Structures"

# unordered list
#: r-novice-gapminder/_extras/guide.md:26
#: r-novice-gapminder/_extras/guide.md:48
msgid "* 05 Exploring Data Frames (\"Realistic example\" section onwards)"
msgstr "* 05 Exploring Data Frames (\"Realistic example\" section onwards)"

# unordered list
#: r-novice-gapminder/_extras/guide.md:27
#: r-novice-gapminder/_extras/guide.md:50
msgid "* 08 Creating Publication-Quality Graphics with ggplot2"
msgstr "* 08 Creating Publication-Quality Graphics with ggplot2"

# unordered list
#: r-novice-gapminder/_extras/guide.md:28
msgid "* 10 Functions Explained"
msgstr "* 10 Functions Explained"

# unordered list
#: r-novice-gapminder/_extras/guide.md:29
msgid "* 13 Dataframe Manipulation with dplyr"
msgstr "* 13 Dataframe Manipulation with dplyr"

# unordered list
#: r-novice-gapminder/_extras/guide.md:30
msgid "* 15 Producing Reports With knitr"
msgstr "* 15 Producing Reports With knitr"

#: r-novice-gapminder/_extras/guide.md:32
msgid ""
"(suggested by [@naupaka](https://github.com/swcarpentry/r-novice-gapminder/issues/104#issuecomment-312547509))\n"
"* 01 Introduction to R and RStudio\n"
"* 02 Project Management With RStudio\n"
"* 03 Seeking Help\n"
"* 04 Data Structures\n"
"* 05 Exploring Data Frames\n"
"* 06 Subsetting Data\n"
"* 09 Vectorization\n"
"* 08 Creating Publication-Quality Graphics with ggplot2 *OR*\n"
"  13 Dataframe Manipulation with dplyr\n"
"* 15 Producing Reports With knitr"
msgstr ""
"(suggested by [@naupaka](https://github.com/swcarpentry/r-novice-gapminder/issues/104#issuecomment-312547509))\n"
"* 01 Introduction to R and RStudio\n"
"* 02 Project Management With RStudio\n"
"* 03 Seeking Help\n"
"* 04 Data Structures\n"
"* 05 Exploring Data Frames\n"
"* 06 Subsetting Data\n"
"* 09 Vectorization\n"
"* 08 Creating Publication-Quality Graphics with ggplot2 *OR*\n"
"  13 Dataframe Manipulation with dplyr\n"
"* 15 Producing Reports With knitr"

#: r-novice-gapminder/_extras/guide.md:44
msgid "A half day course could consist of (suggested by [@karawoo](https://github.com/swcarpentry/r-novice-gapminder/issues/104#issuecomment-277599864)):"
msgstr "A half day course could consist of (suggested by [@karawoo](https://github.com/swcarpentry/r-novice-gapminder/issues/104#issuecomment-277599864)):"

# unordered list
#: r-novice-gapminder/_extras/guide.md:47
msgid "* 04 Data Structures (only creating vectors with `c()`)"
msgstr "* 04 Data Structures (only creating vectors with `c()`)"

# unordered list
#: r-novice-gapminder/_extras/guide.md:49
msgid "* 06 Subsetting Data (excluding factor, matrix and list subsetting)"
msgstr "* 06 Subsetting Data (excluding factor, matrix and list subsetting)"

# header
#: r-novice-gapminder/_extras/guide.md:52
msgid "## Setting up git in RStudio"
msgstr "## Setting up git in RStudio"

#: r-novice-gapminder/_extras/guide.md:54
msgid ""
"There can be difficulties linking git to RStudio depending on the\n"
"operating system and the version of the operating system. To make sure\n"
"Git is properly installed and configured, the learners should go to\n"
"the Options window in the RStudio application."
msgstr ""
"There can be difficulties linking git to RStudio depending on the\n"
"operating system and the version of the operating system. To make sure\n"
"Git is properly installed and configured, the learners should go to\n"
"the Options window in the RStudio application."

# unordered list
#: r-novice-gapminder/_extras/guide.md:59
msgid "* **Mac OS X:**"
msgstr "* **Mac OS X:**"

# unordered list
#: r-novice-gapminder/_extras/guide.md:60
msgid "  * Go RStudio -> Preferences... -> Git/SVN"
msgstr "  * Go RStudio -> Preferences... -> Git/SVN"

# unordered list
#: r-novice-gapminder/_extras/guide.md:61
msgid "  * Check and see whether there is a path to a file in the \"Git executable\" window. If not, the next challenge is figuring out where Git is located."
msgstr "  * Check and see whether there is a path to a file in the \"Git executable\" window. If not, the next challenge is figuring out where Git is located."

# unordered list
#: r-novice-gapminder/_extras/guide.md:62
msgid "  * In the terminal enter `which git` and you will get a path to the git executable. In the \"Git executable\" window you may have difficulties finding the directory since OS X hides many of the operating system files. While the file selection window is open, pressing \"Command-Shift-G\" will pop up a text entry box where you will be able to type or paste in the full path to your git executable: e.g. /usr/bin/git or whatever else it might be."
msgstr "  * In the terminal enter `which git` and you will get a path to the git executable. In the \"Git executable\" window you may have difficulties finding the directory since OS X hides many of the operating system files. While the file selection window is open, pressing \"Command-Shift-G\" will pop up a text entry box where you will be able to type or paste in the full path to your git executable: e.g. /usr/bin/git or whatever else it might be."

# unordered list
#: r-novice-gapminder/_extras/guide.md:63
msgid "* **Windows:**"
msgstr "* **Windows:**"

# unordered list
#: r-novice-gapminder/_extras/guide.md:64
msgid "  * Go Tools -> Global options... -> Git/SVN"
msgstr "  * Go Tools -> Global options... -> Git/SVN"

# unordered list
#: r-novice-gapminder/_extras/guide.md:65
msgid "  * If you use the Software Carpentry Installer, then 'git.exe' should be installed at `C:/Program Files/Git/bin/git.exe`."
msgstr "  * If you use the Software Carpentry Installer, then 'git.exe' should be installed at `C:/Program Files/Git/bin/git.exe`."

#: r-novice-gapminder/_extras/guide.md:67
msgid "To prevent the learners from having to re-enter their password each time they push a commit to GitHub, this command (which can be run from a bash prompt) will make it so they only have to enter their password once:"
msgstr "To prevent the learners from having to re-enter their password each time they push a commit to GitHub, this command (which can be run from a bash prompt) will make it so they only have to enter their password once:"

# code block
#: r-novice-gapminder/_extras/guide.md:69
msgid ""
"~~~\n"
"$ git config --global credential.helper 'cache --timeout=10000000'\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global credential.helper 'cache --timeout=10000000'\n"
"~~~"

# SC/DC Template label
#: r-novice-gapminder/_extras/guide.md:72
msgid "{: .bash}"
msgstr "{: .bash}"

# header
#: r-novice-gapminder/_extras/guide.md:74
msgid "## Pulling in Data"
msgstr "## Pulling in Data"

#: r-novice-gapminder/_extras/guide.md:76
msgid ""
"The easiest way to get the data used in this lesson during a workshop is to have\n"
"attendees download the raw data from [gapminder-data][gapminder-data] and\n"
"[gapminder-data-wide][gapminder-data-wide]."
msgstr ""
"The easiest way to get the data used in this lesson during a workshop is to have\n"
"attendees download the raw data from [gapminder-data][gapminder-data] and\n"
"[gapminder-data-wide][gapminder-data-wide]."

#: r-novice-gapminder/_extras/guide.md:80
msgid "Attendees can use the `File - Save As` dialog in their browser to save the file."
msgstr "Attendees can use the `File - Save As` dialog in their browser to save the file."

# header
#: r-novice-gapminder/_extras/guide.md:82
msgid "## Overall"
msgstr "## Overall"

#: r-novice-gapminder/_extras/guide.md:84
msgid ""
"Make sure to emphasize good practices: put code in scripts, and make\n"
"sure they're version controlled. Encourage students to create script\n"
"files for challenges."
msgstr ""
"Make sure to emphasize good practices: put code in scripts, and make\n"
"sure they're version controlled. Encourage students to create script\n"
"files for challenges."

#: r-novice-gapminder/_extras/guide.md:88
msgid ""
"If you're working in a cloud environment, get them to upload the\n"
"gapminder data after the second lesson."
msgstr ""
"If you're working in a cloud environment, get them to upload the\n"
"gapminder data after the second lesson."

#: r-novice-gapminder/_extras/guide.md:91
msgid ""
"Make sure to emphasize that matrices are vectors underneath the hood\n"
"and data frames are lists underneath the hood: this will explain a\n"
"lot of the esoteric behaviour encountered in basic operations."
msgstr ""
"Make sure to emphasize that matrices are vectors underneath the hood\n"
"and data frames are lists underneath the hood: this will explain a\n"
"lot of the esoteric behaviour encountered in basic operations."

#: r-novice-gapminder/_extras/guide.md:95
msgid ""
"Vector recycling and function stacks are probably best explained\n"
"with diagrams on a whiteboard."
msgstr ""
"Vector recycling and function stacks are probably best explained\n"
"with diagrams on a whiteboard."

#: r-novice-gapminder/_extras/guide.md:98
msgid ""
"Be sure to actually go through examples of an R help page: help files\n"
"can be intimidating at first, but knowing how to read them is tremendously\n"
"useful."
msgstr ""
"Be sure to actually go through examples of an R help page: help files\n"
"can be intimidating at first, but knowing how to read them is tremendously\n"
"useful."

#: r-novice-gapminder/_extras/guide.md:102
msgid "Be sure to show the CRAN task views, look at one of the topics."
msgstr "Be sure to show the CRAN task views, look at one of the topics."

#: r-novice-gapminder/_extras/guide.md:104
msgid ""
"There's a lot of content: move quickly through the earlier lessons. Their\n"
"extensiveness is mostly for purposes of learning by osmosis: so that their\n"
"memory will trigger later when they encounter a problem or some esoteric behaviour."
msgstr ""
"There's a lot of content: move quickly through the earlier lessons. Their\n"
"extensiveness is mostly for purposes of learning by osmosis: so that their\n"
"memory will trigger later when they encounter a problem or some esoteric behaviour."

#: r-novice-gapminder/_extras/guide.md:108
msgid "Key lessons to take time on:"
msgstr "Key lessons to take time on:"

# unordered list
#: r-novice-gapminder/_extras/guide.md:110
msgid "* Data subsetting - conceptually difficult for novices"
msgstr "* Data subsetting - conceptually difficult for novices"

# unordered list
#: r-novice-gapminder/_extras/guide.md:111
msgid "* Functions - learners especially struggle with this"
msgstr "* Functions - learners especially struggle with this"

# unordered list
#: r-novice-gapminder/_extras/guide.md:112
msgid "* Data structures - worth being thorough, but you can go through it quickly."
msgstr "* Data structures - worth being thorough, but you can go through it quickly."

#: r-novice-gapminder/_extras/guide.md:114
msgid ""
"Don't worry about being correct or knowing the material back-to-front. Use\n"
"mistakes as teaching moments: the most vital skill you can impart is how to\n"
"debug and recover from unexpected errors."
msgstr ""
"Don't worry about being correct or knowing the material back-to-front. Use\n"
"mistakes as teaching moments: the most vital skill you can impart is how to\n"
"debug and recover from unexpected errors."

#: r-novice-gapminder/_extras/guide.md:118
msgid "[gapminder-data]: https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv"
msgstr "[gapminder-data]: https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_data.csv"

#: r-novice-gapminder/_extras/guide.md:120
msgid "[gapminder-data-wide]: https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv"
msgstr "[gapminder-data-wide]: https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv"

#: r-novice-gapminder/_includes/links.md:1
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[ci]: http://communityin.org/\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html#reporting-guidelines\n"
"[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[concept-maps]: https://carpentries.github.io/instructor-training/05-memory/\n"
"[contrib-covenant]: https://contributor-covenant.org/\n"
"[contributing]: {{ site.github.repository_url }}/blob/gh-pages/CONTRIBUTING.md\n"
"[cran-checkpoint]: https://cran.r-project.org/package=checkpoint\n"
"[cran-knitr]: https://cran.r-project.org/package=knitr\n"
"[cran-stringr]: https://cran.r-project.org/package=stringr\n"
"[email]: mailto:team@carpentries.org\n"
"[github-importer]: https://import.github.com/\n"
"[importer]: https://github.com/new/import\n"
"[jekyll-collection]: https://jekyllrb.com/docs/collections/\n"
"[jekyll-install]: https://jekyllrb.com/docs/installation/\n"
"[jekyll-windows]: http://jekyll-windows.juthilo.com/\n"
"[jekyll]: https://jekyllrb.com/\n"
"[jupyter]: https://jupyter.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example/\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[morea]: https://morea-framework.github.io/\n"
"[numfocus]: https://numfocus.org/\n"
"[osi]: https://opensource.org\n"
"[pandoc]: https://pandoc.org/\n"
"[paper-now]: https://github.com/PeerJ/paper-now\n"
"[python-gapminder]: https://swcarpentry.github.io/python-novice-gapminder/\n"
"[pyyaml]: https://pypi.python.org/pypi/PyYAML\n"
"[r-markdown]: https://rmarkdown.rstudio.com/\n"
"[rstudio]: https://www.rstudio.com/\n"
"[ruby-install-guide]: https://www.ruby-lang.org/en/downloads/\n"
"[ruby-installer]: https://rubyinstaller.org/\n"
"[rubygems]: https://rubygems.org/pages/download/\n"
"[styles]: https://github.com/carpentries/styles/\n"
"[swc-releases]: https://github.com/swcarpentry/swc-releases\n"
"[workshop-repo]: {{ site.workshop_repo }}\n"
"[yaml]: http://yaml.org/"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[ci]: http://communityin.org/\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html#reporting-guidelines\n"
"[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[concept-maps]: https://carpentries.github.io/instructor-training/05-memory/\n"
"[contrib-covenant]: https://contributor-covenant.org/\n"
"[contributing]: {{ site.github.repository_url }}/blob/gh-pages/CONTRIBUTING.md\n"
"[cran-checkpoint]: https://cran.r-project.org/package=checkpoint\n"
"[cran-knitr]: https://cran.r-project.org/package=knitr\n"
"[cran-stringr]: https://cran.r-project.org/package=stringr\n"
"[email]: mailto:team@carpentries.org\n"
"[github-importer]: https://import.github.com/\n"
"[importer]: https://github.com/new/import\n"
"[jekyll-collection]: https://jekyllrb.com/docs/collections/\n"
"[jekyll-install]: https://jekyllrb.com/docs/installation/\n"
"[jekyll-windows]: http://jekyll-windows.juthilo.com/\n"
"[jekyll]: https://jekyllrb.com/\n"
"[jupyter]: https://jupyter.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example/\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[morea]: https://morea-framework.github.io/\n"
"[numfocus]: https://numfocus.org/\n"
"[osi]: https://opensource.org\n"
"[pandoc]: https://pandoc.org/\n"
"[paper-now]: https://github.com/PeerJ/paper-now\n"
"[python-gapminder]: https://swcarpentry.github.io/python-novice-gapminder/\n"
"[pyyaml]: https://pypi.python.org/pypi/PyYAML\n"
"[r-markdown]: https://rmarkdown.rstudio.com/\n"
"[rstudio]: https://www.rstudio.com/\n"
"[ruby-install-guide]: https://www.ruby-lang.org/en/downloads/\n"
"[ruby-installer]: https://rubyinstaller.org/\n"
"[rubygems]: https://rubygems.org/pages/download/\n"
"[styles]: https://github.com/carpentries/styles/\n"
"[swc-releases]: https://github.com/swcarpentry/swc-releases\n"
"[workshop-repo]: {{ site.workshop_repo }}\n"
"[yaml]: http://yaml.org/"

# Front Matter
#: r-novice-gapminder/aio.md:1
msgid ""
"---\n"
"layout: page \n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page \n"
"root: .\n"
"---"

# inline html
#: r-novice-gapminder/aio.md:5 r-novice-gapminder/bin/boilerplate/aio.md:3
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

#: r-novice-gapminder/aio.md:31
#: r-novice-gapminder/bin/boilerplate/_extras/figures.md:33
#: r-novice-gapminder/bin/boilerplate/aio.md:29
msgid ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:12
msgid ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CODE_OF_CONDUCT.md)."
msgstr ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CODE_OF_CONDUCT.md)."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:30
msgid ""
"    you can [send us comments by email][email].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""
"    you can [send us comments by email][email].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:49
msgid ""
"    please work in <https://github.com/swcarpentry/FIXME>,\n"
"    which can be viewed at <https://swcarpentry.github.io/FIXME>."
msgstr ""
"    please work in <https://github.com/swcarpentry/FIXME>,\n"
"    which can be viewed at <https://swcarpentry.github.io/FIXME>."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:69
msgid ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas, please see the 'Issues' tab for\n"
"a list of issues associated with this repository,\n"
"or you may also look at the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas, please see the 'Issues' tab for\n"
"a list of issues associated with this repository,\n"
"or you may also look at the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:104
msgid ""
"If you choose to contribute via GitHub, you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"To manage changes, we follow [GitHub flow][github-flow].\n"
"Each lesson has two maintainers who review issues and pull requests or encourage others to do so.\n"
"The maintainers are community volunteers and have final say over what gets merged into the lesson.\n"
"To use the web interface for contributing to a lesson:"
msgstr ""
"If you choose to contribute via GitHub, you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"To manage changes, we follow [GitHub flow][github-flow].\n"
"Each lesson has two maintainers who review issues and pull requests or encourage others to do so.\n"
"The maintainers are community volunteers and have final say over what gets merged into the lesson.\n"
"To use the web interface for contributing to a lesson:"

# ordered list
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:111
msgid "1.  Fork the originating repository to your GitHub profile."
msgstr "1.  Fork the originating repository to your GitHub profile."

# ordered list
#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:112
msgid "2.  Within your version of the forked repository, move to the `gh-pages` branch and"
msgstr "2.  Within your version of the forked repository, move to the `gh-pages` branch and"

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:113
msgid ""
"create a new branch for each significant change being made.\n"
"3.  Navigate to the file(s) you wish to change within the new branches and make revisions as required.\n"
"4.  Commit all changed files within the appropriate branches.\n"
"5.  Create individual pull requests from each of your changed branches\n"
"to the `gh-pages` branch within the originating repository.\n"
"6.  If you receive feedback, make changes using your issue-specific branches of the forked\n"
"repository and the pull requests will update automatically.\n"
"7.  Repeat as needed until all feedback has been addressed."
msgstr ""
"create a new branch for each significant change being made.\n"
"3.  Navigate to the file(s) you wish to change within the new branches and make revisions as required.\n"
"4.  Commit all changed files within the appropriate branches.\n"
"5.  Create individual pull requests from each of your changed branches\n"
"to the `gh-pages` branch within the originating repository.\n"
"6.  If you receive feedback, make changes using your issue-specific branches of the forked\n"
"repository and the pull requests will update automatically.\n"
"7.  Repeat as needed until all feedback has been addressed."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:122
msgid ""
"When starting work, please make sure your clone of the originating `gh-pages` branch is up-to-date\n"
"before creating your own revision-specific branch(es) from there.\n"
"Additionally, please only work from your newly-created branch(es) and *not*\n"
"your clone of the originating `gh-pages` branch.\n"
"Lastly, published copies of all the lessons are available in the `gh-pages` branch of the originating\n"
"repository for reference while revising."
msgstr ""
"When starting work, please make sure your clone of the originating `gh-pages` branch is up-to-date\n"
"before creating your own revision-specific branch(es) from there.\n"
"Additionally, please only work from your newly-created branch(es) and *not*\n"
"your clone of the originating `gh-pages` branch.\n"
"Lastly, published copies of all the lessons are available in the `gh-pages` branch of the originating\n"
"repository for reference while revising."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:131
msgid ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][email]."
msgstr ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][email]."

#: r-novice-gapminder/bin/boilerplate/CONTRIBUTING.md:136
msgid ""
"[email]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://guides.github.com/features/issues/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""
"[email]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://guides.github.com/features/issues/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"

# header
#: r-novice-gapminder/bin/boilerplate/README.md:1
msgid "# FIXME Lesson title"
msgstr "# FIXME Lesson title"

#: r-novice-gapminder/bin/boilerplate/README.md:3
msgid "[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/)"
msgstr "[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/)"

#: r-novice-gapminder/bin/boilerplate/README.md:5
#: r-novice-gapminder/bin/boilerplate/_episodes/01-introduction.md:12
#: r-novice-gapminder/bin/boilerplate/_extras/discuss.md:4
#: r-novice-gapminder/bin/boilerplate/_extras/guide.md:4
#: r-novice-gapminder/bin/boilerplate/reference.md:7
#: r-novice-gapminder/bin/boilerplate/setup.md:4
msgid "FIXME"
msgstr "FIXME"

# header
#: r-novice-gapminder/bin/boilerplate/README.md:7
msgid "## Contributing"
msgstr "## Contributing"

#: r-novice-gapminder/bin/boilerplate/README.md:9
msgid ""
"We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any\n"
"questions, concerns, or experience any difficulties along the way."
msgstr ""
"We welcome all contributions to improve the lesson! Maintainers will do their best to help you if you have any\n"
"questions, concerns, or experience any difficulties along the way."

#: r-novice-gapminder/bin/boilerplate/README.md:12
msgid ""
"We'd like to ask you to familiarize yourself with our [Contribution Guide](CONTRIBUTING.md) and have a look at\n"
"the [more detailed guidelines][lesson-example] on proper formatting, ways to render the lesson locally, and even\n"
"how to write new episodes."
msgstr ""
"We'd like to ask you to familiarize yourself with our [Contribution Guide](CONTRIBUTING.md) and have a look at\n"
"the [more detailed guidelines][lesson-example] on proper formatting, ways to render the lesson locally, and even\n"
"how to write new episodes."

# header
#: r-novice-gapminder/bin/boilerplate/README.md:16
msgid "## Maintainer(s)"
msgstr "## Maintainer(s)"

# unordered list
#: r-novice-gapminder/bin/boilerplate/README.md:18
msgid "* FIXME"
msgstr "* FIXME"

# header
#: r-novice-gapminder/bin/boilerplate/README.md:20
msgid "## Authors"
msgstr "## Authors"

#: r-novice-gapminder/bin/boilerplate/README.md:22
msgid "A list of contributors to the lesson can be found in [AUTHORS](AUTHORS)"
msgstr "A list of contributors to the lesson can be found in [AUTHORS](AUTHORS)"

# header
#: r-novice-gapminder/bin/boilerplate/README.md:24
msgid "## Citation"
msgstr "## Citation"

#: r-novice-gapminder/bin/boilerplate/README.md:26
msgid "To cite this lesson, please consult with [CITATION](CITATION)"
msgstr "To cite this lesson, please consult with [CITATION](CITATION)"

#: r-novice-gapminder/bin/boilerplate/README.md:28
msgid "[lesson-example]: https://carpentries.github.io/lesson-example"
msgstr "[lesson-example]: https://carpentries.github.io/lesson-example"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/_episodes/01-introduction.md:1
msgid ""
"---\n"
"title: \"Introduction\"\n"
"teaching: 0\n"
"exercises: 0\n"
"questions:\n"
"- \"Key question (FIXME)\"\n"
"objectives:\n"
"- \"First objective. (FIXME)\"\n"
"keypoints:\n"
"- \"First key point. (FIXME)\"\n"
"---"
msgstr ""
"---\n"
"title: \"Introduction\"\n"
"teaching: 0\n"
"exercises: 0\n"
"questions:\n"
"- \"Key question (FIXME)\"\n"
"objectives:\n"
"- \"First objective. (FIXME)\"\n"
"keypoints:\n"
"- \"First key point. (FIXME)\"\n"
"---"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/_extras/about.md:1
msgid ""
"---\n"
"title: About\n"
"---"
msgstr ""
"---\n"
"title: About\n"
"---"

#: r-novice-gapminder/bin/boilerplate/_extras/about.md:4
msgid ""
"{% include carpentries.html %}\n"
"{% include links.md %}"
msgstr ""
"{% include carpentries.html %}\n"
"{% include links.md %}"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/_extras/discuss.md:1
msgid ""
"---\n"
"title: Discussion\n"
"---"
msgstr ""
"---\n"
"title: Discussion\n"
"---"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/_extras/figures.md:1
msgid ""
"---\n"
"title: Figures\n"
"---"
msgstr ""
"---\n"
"title: Figures\n"
"---"

# inline html
#: r-novice-gapminder/bin/boilerplate/_extras/figures.md:4
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"          article_here.appendChild(htmlDocArticle.getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"          article_here.appendChild(htmlDocArticle.getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/_extras/guide.md:1
msgid ""
"---\n"
"title: \"Instructor Notes\"\n"
"---"
msgstr ""
"---\n"
"title: \"Instructor Notes\"\n"
"---"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/aio.md:1
msgid ""
"---\n"
"---"
msgstr ""
"---\n"
"---"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that don't follow the partner /:path/index.html\n"
"permalink: index.html  # Is the only page that don't follow the partner /:path/index.html\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that don't follow the partner /:path/index.html\n"
"permalink: index.html  # Is the only page that don't follow the partner /:path/index.html\n"
"---"

#: r-novice-gapminder/bin/boilerplate/index.md:6
msgid "FIXME: home page introduction"
msgstr "FIXME: home page introduction"

# blockquote, which can be cascaded
#: r-novice-gapminder/bin/boilerplate/index.md:8 r-novice-gapminder/index.md:27
msgid "> ## Prerequisites"
msgstr "> ## 予備知識"

#: r-novice-gapminder/bin/boilerplate/index.md:9
msgid ""
">\n"
"> FIXME"
msgstr ""
">\n"
"> FIXME"

# SC/DC Template label
#: r-novice-gapminder/bin/boilerplate/index.md:11
#: r-novice-gapminder/index.md:32
msgid "{: .prereq}"
msgstr "{: .prereq}"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/reference.md:1
msgid ""
"---\n"
"layout: reference\n"
"---"
msgstr ""
"---\n"
"layout: reference\n"
"---"

# header
#: r-novice-gapminder/bin/boilerplate/reference.md:5
#: r-novice-gapminder/reference.md:253
msgid "## Glossary"
msgstr "## Glossary"

# Front Matter
#: r-novice-gapminder/bin/boilerplate/setup.md:1
msgid ""
"---\n"
"title: Setup\n"
"---"
msgstr ""
"---\n"
"title: Setup\n"
"---"

# Front Matter
#: r-novice-gapminder/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"

#: r-novice-gapminder/index.md:6
msgid "Introduction to R for non-programmers using gapminder data."
msgstr "ブログラマーでない人のための gapminder データを用いた R 入門。"

#: r-novice-gapminder/index.md:17
msgid ""
"Note that this workshop will focus on teaching the fundamentals of the\n"
"programming language R, and will not teach statistical analysis."
msgstr ""
"このワークショップは、プログラミング言語 R の基礎を教えることが目的であり、\n"
"統計分析を教えることは含まれていないことに注意してください。"

#: r-novice-gapminder/index.md:22
msgid ""
"A variety of third party packages are used throughout this workshop. These\n"
"are not necessarily the best, nor are they comprehensive, but they are\n"
"packages we find useful, and have been chosen primarily for their\n"
"usability."
msgstr ""
"このワークショップでは、さまざまなサードパーティパッケージが使用されています。\n"
"これらは必ずしも最高だからという理由ではなく、汎用的という訳でもありませんが、有用であり、\n"
"主に使いやすさという観点から選ばれたパッケージです。"

#: r-novice-gapminder/index.md:28
msgid ""
">\n"
"> Understand that computers store data and instructions (programs, scripts etc.) in files.\n"
"> Files are organised in directories (folders).\n"
"> Know how to access files not in the working directory by specifying the path."
msgstr ""
">\n"
"> コンピュータがデータと命令（プログラムやスクリプト等）をファイルに保存することを理解していること。\n"
"> ファイルはディレクトリ（フォルダ）によって構成されていることを理解していること。\n"
"> パスを指定することによって、作業ディレクトリにないファイルにアクセスする方法を理解していること。"

# Front Matter
#: r-novice-gapminder/reference.md:1
msgid ""
"---\n"
"layout: reference\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: reference\n"
"root: .\n"
"---"

# header
#: r-novice-gapminder/reference.md:6
msgid "## Reference"
msgstr "## Reference"

# header
#: r-novice-gapminder/reference.md:8
msgid "## [Introduction to R and RStudio]({{ page.root }}/01-rstudio-intro/)"
msgstr "## [Introduction to R and RStudio]({{ page.root }}/01-rstudio-intro/)"

# unordered list
#: r-novice-gapminder/reference.md:10
msgid " - Use the escape key to cancel incomplete commands or running code"
msgstr " - Use the escape key to cancel incomplete commands or running code"

#: r-novice-gapminder/reference.md:11
msgid ""
"   (Ctrl+C) if you're using R from the shell.\n"
" - Basic arithmetic operations follow standard order of precedence:\n"
"   - Brackets: `(`, `)`\n"
"   - Exponents: `^` or `**`\n"
"   - Divide: `/`\n"
"   - Multiply: `*`\n"
"   - Add: `+`\n"
"   - Subtract: `-`\n"
" - Scientific notation is available, e.g: `2e-3`\n"
" - Anything to the right of a `#` is a comment, R will ignore this!\n"
" - Functions are denoted by `function_name()`. Expressions inside the\n"
"   brackets are evaluated before being passed to the function, and\n"
"   functions can be nested.\n"
" - Mathematical functions: `exp`, `sin`, `log`, `log10`, `log2` etc.\n"
" - Comparison operators: `<`, `<=`, `>`, `>=`, `==`, `!=`\n"
" - Use `all.equal` to compare numbers!\n"
" - `<-` is the assignment operator. Anything to the right is evaluate, then\n"
"   stored in a variable named to the left.\n"
" - `ls` lists all variables and functions you've created\n"
" - `rm` can be used to remove them\n"
" - When assigning values to function arguments, you _must_ use `=`."
msgstr ""
"   (Ctrl+C) if you're using R from the shell.\n"
" - Basic arithmetic operations follow standard order of precedence:\n"
"   - Brackets: `(`, `)`\n"
"   - Exponents: `^` or `**`\n"
"   - Divide: `/`\n"
"   - Multiply: `*`\n"
"   - Add: `+`\n"
"   - Subtract: `-`\n"
" - Scientific notation is available, e.g: `2e-3`\n"
" - Anything to the right of a `#` is a comment, R will ignore this!\n"
" - Functions are denoted by `function_name()`. Expressions inside the\n"
"   brackets are evaluated before being passed to the function, and\n"
"   functions can be nested.\n"
" - Mathematical functions: `exp`, `sin`, `log`, `log10`, `log2` etc.\n"
" - Comparison operators: `<`, `<=`, `>`, `>=`, `==`, `!=`\n"
" - Use `all.equal` to compare numbers!\n"
" - `<-` is the assignment operator. Anything to the right is evaluate, then\n"
"   stored in a variable named to the left.\n"
" - `ls` lists all variables and functions you've created\n"
" - `rm` can be used to remove them\n"
" - When assigning values to function arguments, you _must_ use `=`."

# header
#: r-novice-gapminder/reference.md:33
msgid "## [Project management with RStudio]({{ page.root }}/02-project-intro/)"
msgstr "## [Project management with RStudio]({{ page.root }}/02-project-intro/)"

# unordered list
#: r-novice-gapminder/reference.md:35
msgid " - To create a new project, go to File -> New Project"
msgstr " - To create a new project, go to File -> New Project"

# unordered list
#: r-novice-gapminder/reference.md:36
msgid " - Install the `packrat` package to create self-contained projects"
msgstr " - Install the `packrat` package to create self-contained projects"

# unordered list
#: r-novice-gapminder/reference.md:37
msgid " - `install.packages` to install packages from CRAN"
msgstr " - `install.packages` to install packages from CRAN"

# unordered list
#: r-novice-gapminder/reference.md:38
msgid " - `library` to load a package into R"
msgstr " - `library` to load a package into R"

# unordered list
#: r-novice-gapminder/reference.md:39
msgid " - `packrat::status` to check whether all packages referenced in your"
msgstr " - `packrat::status` to check whether all packages referenced in your"

#: r-novice-gapminder/reference.md:40
msgid "   scripts have been installed."
msgstr "   scripts have been installed."

# header
#: r-novice-gapminder/reference.md:42
msgid "## [Seeking help]({{ page.root }}/03-seeking-help/)"
msgstr "## [Seeking help]({{ page.root }}/03-seeking-help/)"

# unordered list
#: r-novice-gapminder/reference.md:44
msgid "- To access help for a function type `?function_name` or `help(function_name)`"
msgstr "- To access help for a function type `?function_name` or `help(function_name)`"

# unordered list
#: r-novice-gapminder/reference.md:45
msgid "- Use quotes for special operators e.g. `?\"+\"`"
msgstr "- Use quotes for special operators e.g. `?\"+\"`"

# unordered list
#: r-novice-gapminder/reference.md:46
msgid "- Use fuzzy search if you can't remember a name '??search_term'"
msgstr "- Use fuzzy search if you can't remember a name '??search_term'"

# unordered list
#: r-novice-gapminder/reference.md:47
msgid "- [CRAN task views](http://cran.at.r-project.org/web/views) are a good starting point."
msgstr "- [CRAN task views](http://cran.at.r-project.org/web/views) are a good starting point."

# unordered list
#: r-novice-gapminder/reference.md:48
msgid "- [Stack Overflow](http://stackoverflow.com/) is a good place to get help with your code."
msgstr "- [Stack Overflow](http://stackoverflow.com/) is a good place to get help with your code."

# unordered list
#: r-novice-gapminder/reference.md:49
msgid "    - `?dput` will dump data you are working from so others can load it easily."
msgstr "    - `?dput` will dump data you are working from so others can load it easily."

# unordered list
#: r-novice-gapminder/reference.md:50
msgid "    - `sessionInfo()` will give details of your setup that others may need for debugging."
msgstr "    - `sessionInfo()` will give details of your setup that others may need for debugging."

# header
#: r-novice-gapminder/reference.md:52
msgid "## [Data structures]({{ page.root }}/04-data-structures-part1/)"
msgstr "## [Data structures]({{ page.root }}/04-data-structures-part1/)"

#: r-novice-gapminder/reference.md:54
msgid "Individual values in R must be one of 5 **data types**, multiple values can be grouped in **data structures**."
msgstr "Individual values in R must be one of 5 **data types**, multiple values can be grouped in **data structures**."

#: r-novice-gapminder/reference.md:56
msgid " **Data types**"
msgstr " **Data types**"

# unordered list
#: r-novice-gapminder/reference.md:58
msgid " - `typeof(object)` gives information about an items data type."
msgstr " - `typeof(object)` gives information about an items data type."

# unordered list
#: r-novice-gapminder/reference.md:59
msgid " - There are 5 main data types:"
msgstr " - There are 5 main data types:"

# unordered list
#: r-novice-gapminder/reference.md:60
msgid "    - `?numeric` real (decimal) numbers"
msgstr "    - `?numeric` real (decimal) numbers"

# unordered list
#: r-novice-gapminder/reference.md:61
msgid "    - `?integer` whole numbers only"
msgstr "    - `?integer` whole numbers only"

# unordered list
#: r-novice-gapminder/reference.md:62
msgid "    - `?character` text"
msgstr "    - `?character` text"

# unordered list
#: r-novice-gapminder/reference.md:63
msgid "    - `?complex` complex numbers"
msgstr "    - `?complex` complex numbers"

# unordered list
#: r-novice-gapminder/reference.md:64
msgid "    - `?logical` TRUE or FALSE values"
msgstr "    - `?logical` TRUE or FALSE values"

#: r-novice-gapminder/reference.md:66
msgid "    **Special types:**"
msgstr "    **Special types:**"

# unordered list
#: r-novice-gapminder/reference.md:68
msgid "     - `?NA` missing values"
msgstr "     - `?NA` missing values"

# unordered list
#: r-novice-gapminder/reference.md:69
msgid "     - `?NaN` \"not a number\" for undefined values (e.g. `0/0`)."
msgstr "     - `?NaN` \"not a number\" for undefined values (e.g. `0/0`)."

# unordered list
#: r-novice-gapminder/reference.md:70
msgid "     - `?Inf`, `-Inf` infinity."
msgstr "     - `?Inf`, `-Inf` infinity."

# unordered list
#: r-novice-gapminder/reference.md:71
msgid "     - `?NULL` a data structure that doesn't exist"
msgstr "     - `?NULL` a data structure that doesn't exist"

#: r-novice-gapminder/reference.md:73
msgid ""
"    `NA` can occur in any atomic vector. `NaN`, and `Inf` can only\n"
"    occur in complex, integer or numeric type vectors. Atomic vectors\n"
"    are the building blocks for all other data structures. A `NULL` value\n"
"    will occur in place of an entire data structure (but can occur as list\n"
"    elements)."
msgstr ""
"    `NA` can occur in any atomic vector. `NaN`, and `Inf` can only\n"
"    occur in complex, integer or numeric type vectors. Atomic vectors\n"
"    are the building blocks for all other data structures. A `NULL` value\n"
"    will occur in place of an entire data structure (but can occur as list\n"
"    elements)."

#: r-novice-gapminder/reference.md:80
msgid ""
" **Basic data structures in R:**\n"
"  - atomic `?vector` (can only contain one type)\n"
"  - `?list` (containers for other objects)\n"
"  - `?data.frame` two dimensional objects whose columns can contain different types of data\n"
"  - `?matrix` two dimensional objects that can contain only one type of data.\n"
"  - `?factor` vectors that contain predefined categorical data.\n"
"  - `?array` multi-dimensional objects that can only contain one type of data"
msgstr ""
" **Basic data structures in R:**\n"
"  - atomic `?vector` (can only contain one type)\n"
"  - `?list` (containers for other objects)\n"
"  - `?data.frame` two dimensional objects whose columns can contain different types of data\n"
"  - `?matrix` two dimensional objects that can contain only one type of data.\n"
"  - `?factor` vectors that contain predefined categorical data.\n"
"  - `?array` multi-dimensional objects that can only contain one type of data"

#: r-novice-gapminder/reference.md:88
msgid ""
" Remember that matrices are really atomic vectors underneath the hood, and that\n"
"data.frames are really lists underneath the hood (this explains some of the weirder\n"
"behaviour of R)."
msgstr ""
" Remember that matrices are really atomic vectors underneath the hood, and that\n"
"data.frames are really lists underneath the hood (this explains some of the weirder\n"
"behaviour of R)."

#: r-novice-gapminder/reference.md:92
msgid ""
" **[Vectors]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?vector()` All items in a vector must be the same type.\n"
" - Items can be converted from one type to another using *coercion*.\n"
" - The concatenate function 'c()' will append items to a vector.\n"
" - `seq(from=0, to=1, by=1)` will create a sequence of numbers.\n"
" - Items in a vector can be named using the `names()` function."
msgstr ""
" **[Vectors]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?vector()` All items in a vector must be the same type.\n"
" - Items can be converted from one type to another using *coercion*.\n"
" - The concatenate function 'c()' will append items to a vector.\n"
" - `seq(from=0, to=1, by=1)` will create a sequence of numbers.\n"
" - Items in a vector can be named using the `names()` function."

#: r-novice-gapminder/reference.md:99
msgid ""
" **[Factors]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?factor()` Factors are a data structure designed to store categorical data.\n"
" - `levels()` shows the valid values that can be stored in a vector of type factor."
msgstr ""
" **[Factors]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?factor()` Factors are a data structure designed to store categorical data.\n"
" - `levels()` shows the valid values that can be stored in a vector of type factor."

#: r-novice-gapminder/reference.md:103
msgid ""
" **[Lists]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?list()` Lists are a data structure designed to store data of different types."
msgstr ""
" **[Lists]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?list()` Lists are a data structure designed to store data of different types."

#: r-novice-gapminder/reference.md:106
msgid ""
" **[Matrices]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?matrix()` Matrices are a data structure designed to store 2-dimensional data."
msgstr ""
" **[Matrices]({{ page.root }}/04-data-structures-part1/)**\n"
" - `?matrix()` Matrices are a data structure designed to store 2-dimensional data."

#: r-novice-gapminder/reference.md:109
msgid ""
" **[Data Frames]({{ page.root }}/05-data-structures-part2/)**\n"
" - `?data.frame` is a key data structure. It is a `list` of `vectors`.\n"
" - `cbind()` will add a column (vector) to a data.frame.\n"
" - `rbind()` will add a row (list) to a data.frame."
msgstr ""
" **[Data Frames]({{ page.root }}/05-data-structures-part2/)**\n"
" - `?data.frame` is a key data structure. It is a `list` of `vectors`.\n"
" - `cbind()` will add a column (vector) to a data.frame.\n"
" - `rbind()` will add a row (list) to a data.frame."

#: r-novice-gapminder/reference.md:114
msgid ""
" **Useful functions for querying data structures:**\n"
" - `?str` structure, prints out a summary of the whole data structure\n"
" - `?typeof` tells you the type inside an atomic vector\n"
" - `?class` what is the data structure?\n"
" - `?head` print the first `n` elements (rows for two-dimensional objects)\n"
" - `?tail` print the last `n` elements (rows for two-dimensional objects)\n"
" - `?rownames`, `?colnames`, `?dimnames` retrieve or modify the row names\n"
"   and column names of an object.\n"
" - `?names` retrieve or modify the names of an atomic vector or list (or\n"
"   columns of a data.frame).\n"
" - `?length` get the number of elements in an atomic vector\n"
" - `?nrow`, `?ncol`, `?dim` get the dimensions of a n-dimensional object\n"
"   (Won't work on atomic vectors or lists)."
msgstr ""
" **Useful functions for querying data structures:**\n"
" - `?str` structure, prints out a summary of the whole data structure\n"
" - `?typeof` tells you the type inside an atomic vector\n"
" - `?class` what is the data structure?\n"
" - `?head` print the first `n` elements (rows for two-dimensional objects)\n"
" - `?tail` print the last `n` elements (rows for two-dimensional objects)\n"
" - `?rownames`, `?colnames`, `?dimnames` retrieve or modify the row names\n"
"   and column names of an object.\n"
" - `?names` retrieve or modify the names of an atomic vector or list (or\n"
"   columns of a data.frame).\n"
" - `?length` get the number of elements in an atomic vector\n"
" - `?nrow`, `?ncol`, `?dim` get the dimensions of a n-dimensional object\n"
"   (Won't work on atomic vectors or lists)."

# header
#: r-novice-gapminder/reference.md:128
msgid "## [Exploring Data Frames]({{ page.root }}/05-data-structures-part2/)"
msgstr "## [Exploring Data Frames]({{ page.root }}/05-data-structures-part2/)"

# unordered list
#: r-novice-gapminder/reference.md:130
msgid " - `read.csv` to read in data in a regular structure"
msgstr " - `read.csv` to read in data in a regular structure"

# unordered list
#: r-novice-gapminder/reference.md:131
msgid "   - `sep` argument to specify the separator"
msgstr "   - `sep` argument to specify the separator"

# unordered list
#: r-novice-gapminder/reference.md:132
msgid "     - \",\" for comma separated"
msgstr "     - \",\" for comma separated"

# unordered list
#: r-novice-gapminder/reference.md:133
msgid "     - \"\\t\" for tab separated"
msgstr "     - \"\\t\" for tab separated"

# unordered list
#: r-novice-gapminder/reference.md:134
msgid "   - Other arguments:"
msgstr "   - Other arguments:"

# unordered list
#: r-novice-gapminder/reference.md:135
msgid "     - `header=TRUE` if there is a header row"
msgstr "     - `header=TRUE` if there is a header row"

# header
#: r-novice-gapminder/reference.md:137
msgid "## [Subsetting data]({{ page.root }}/06-data-subsetting/)"
msgstr "## [Subsetting data]({{ page.root }}/06-data-subsetting/)"

# unordered list
#: r-novice-gapminder/reference.md:139
msgid " - Elements can be accessed by:"
msgstr " - Elements can be accessed by:"

# unordered list
#: r-novice-gapminder/reference.md:140
msgid "   - Index"
msgstr "   - Index"

# unordered list
#: r-novice-gapminder/reference.md:141
msgid "   - Name"
msgstr "   - Name"

# unordered list
#: r-novice-gapminder/reference.md:142
msgid "   - Logical vectors"
msgstr "   - Logical vectors"

# unordered list
#: r-novice-gapminder/reference.md:144
msgid "- `[` single square brackets:"
msgstr "- `[` single square brackets:"

# unordered list
#: r-novice-gapminder/reference.md:145
msgid "   - *extract* single elements or *subset* vectors"
msgstr "   - *extract* single elements or *subset* vectors"

# unordered list
#: r-novice-gapminder/reference.md:146
msgid "    - e.g.`x[1]` extracts the first item from vector x."
msgstr "    - e.g.`x[1]` extracts the first item from vector x."

# unordered list
#: r-novice-gapminder/reference.md:147
msgid "   - *extract* single elements of a list. The returned value will be another `list()`."
msgstr "   - *extract* single elements of a list. The returned value will be another `list()`."

# unordered list
#: r-novice-gapminder/reference.md:148
msgid "   - *extract* columns from a data.frame"
msgstr "   - *extract* columns from a data.frame"

# unordered list
#: r-novice-gapminder/reference.md:149
msgid " - `[` with two arguments to:"
msgstr " - `[` with two arguments to:"

# unordered list
#: r-novice-gapminder/reference.md:150
msgid "   - *extract* rows and/or columns of"
msgstr "   - *extract* rows and/or columns of"

# unordered list
#: r-novice-gapminder/reference.md:151
msgid "     - matrices"
msgstr "     - matrices"

# unordered list
#: r-novice-gapminder/reference.md:152
msgid "     - data.frames"
msgstr "     - data.frames"

# unordered list
#: r-novice-gapminder/reference.md:153
msgid "     - e.g. `x[1,2]` will extract the value in row 1, column 2."
msgstr "     - e.g. `x[1,2]` will extract the value in row 1, column 2."

# unordered list
#: r-novice-gapminder/reference.md:154
msgid "     - e.g. `x[2,:]` will extract the entire second column of values."
msgstr "     - e.g. `x[2,:]` will extract the entire second column of values."

# unordered list
#: r-novice-gapminder/reference.md:156
msgid " - `[[` double square brackets to extract items from lists."
msgstr " - `[[` double square brackets to extract items from lists."

# unordered list
#: r-novice-gapminder/reference.md:157
msgid " - `$` to access columns or list elements by name"
msgstr " - `$` to access columns or list elements by name"

# unordered list
#: r-novice-gapminder/reference.md:158
msgid " - negative indices skip elements"
msgstr " - negative indices skip elements"

# header
#: r-novice-gapminder/reference.md:160
msgid "## [Control flow]({{ page.root }}/07-control-flow/)"
msgstr "## [Control flow]({{ page.root }}/07-control-flow/)"

# unordered list
#: r-novice-gapminder/reference.md:162
msgid " - Use `if` condition to start a conditional statement, `else if` condition to provide"
msgstr " - Use `if` condition to start a conditional statement, `else if` condition to provide"

#: r-novice-gapminder/reference.md:163
msgid ""
"   additional tests, and `else` to provide a default\n"
" - The bodies of the branches of conditional statements must be indented.\n"
" - Use `==` to test for equality.\n"
" - `X && Y` is only true if both X and Y are `TRUE`.\n"
" - `X || Y` is true if either X or Y, or both, are `TRUE`.\n"
" - Zero is considered `FALSE`; all other numbers are considered `TRUE`\n"
" - Nest loops to operate on multi-dimensional data."
msgstr ""
"   additional tests, and `else` to provide a default\n"
" - The bodies of the branches of conditional statements must be indented.\n"
" - Use `==` to test for equality.\n"
" - `X && Y` is only true if both X and Y are `TRUE`.\n"
" - `X || Y` is true if either X or Y, or both, are `TRUE`.\n"
" - Zero is considered `FALSE`; all other numbers are considered `TRUE`\n"
" - Nest loops to operate on multi-dimensional data."

# header
#: r-novice-gapminder/reference.md:171
msgid "## [Creating publication quality graphics]({{ page.root }}/08-plot-ggplot2/)"
msgstr "## [Creating publication quality graphics]({{ page.root }}/08-plot-ggplot2/)"

# unordered list
#: r-novice-gapminder/reference.md:173
msgid " - figures can be created with the grammar of graphics:"
msgstr " - figures can be created with the grammar of graphics:"

# unordered list
#: r-novice-gapminder/reference.md:174
msgid "   - `library(ggplot2)`"
msgstr "   - `library(ggplot2)`"

# unordered list
#: r-novice-gapminder/reference.md:175
msgid "   - `ggplot` to create the base figure"
msgstr "   - `ggplot` to create the base figure"

# unordered list
#: r-novice-gapminder/reference.md:176
msgid "   - `aes`thetics specify the data axes, shape, color, and data size"
msgstr "   - `aes`thetics specify the data axes, shape, color, and data size"

# unordered list
#: r-novice-gapminder/reference.md:177
msgid "   - `geom`etry functions specify the type of plot, e.g. `point`, `line`, `density`, `box`"
msgstr "   - `geom`etry functions specify the type of plot, e.g. `point`, `line`, `density`, `box`"

# unordered list
#: r-novice-gapminder/reference.md:178
msgid "   - `geom`etry functions also add statistical transforms, e.g. `geom_smooth`"
msgstr "   - `geom`etry functions also add statistical transforms, e.g. `geom_smooth`"

# unordered list
#: r-novice-gapminder/reference.md:179
msgid "   - `scale` functions change the mapping from data to aesthetics"
msgstr "   - `scale` functions change the mapping from data to aesthetics"

# unordered list
#: r-novice-gapminder/reference.md:180
msgid "   - `facet` functions stratify the figure into panels"
msgstr "   - `facet` functions stratify the figure into panels"

# unordered list
#: r-novice-gapminder/reference.md:181
msgid "   - `aes`thetics apply to individual layers, or can be set for the whole plot"
msgstr "   - `aes`thetics apply to individual layers, or can be set for the whole plot"

#: r-novice-gapminder/reference.md:182
msgid ""
"     inside `ggplot`.\n"
"   - `theme` functions change the overall look of the plot\n"
"   - order of layers matters!\n"
"   - `ggsave` to save a figure."
msgstr ""
"     inside `ggplot`.\n"
"   - `theme` functions change the overall look of the plot\n"
"   - order of layers matters!\n"
"   - `ggsave` to save a figure."

# header
#: r-novice-gapminder/reference.md:187
msgid "## [Vectorization]({{ page.root }}/09-vectorization/)"
msgstr "## [ベクトル化]({{ page.root }}/09-vectorization/)"

# unordered list
#: r-novice-gapminder/reference.md:189
msgid "- Most functions and operations apply to each element of a vector"
msgstr "- ほとんどの関数や演算はベクトルの要素ごとに実行されます。"

# unordered list
#: r-novice-gapminder/reference.md:190
msgid "- `*` applies element-wise to matrices"
msgstr "- `*` は行列に対して要素ごとに実行されます。"

# unordered list
#: r-novice-gapminder/reference.md:191
msgid "- `%*%` for true matrix multiplication"
msgstr "- 本来の行列の積を求めるには `%*%` を使います。"

# unordered list
#: r-novice-gapminder/reference.md:192
msgid "- `any()` will return `TRUE` if any element of a vector is `TRUE`"
msgstr "- `any()` はベクトルの要素の中に一つでも `TRUE` があれば `TRUE` を返します。"

# unordered list
#: r-novice-gapminder/reference.md:193
msgid "- `all()` will return `TRUE` if *all* elements of a vector are `TRUE`"
msgstr "- `all()` はベクトルの要素が*全て* `TRUE` であれば `TRUE` を返します。"

# header
#: r-novice-gapminder/reference.md:195
msgid "## [Functions explained]({{ page.root }}/10-functions/)"
msgstr "## [関数について]({{ page.root }}/10-functions/)"

# unordered list
#: r-novice-gapminder/reference.md:197
msgid "  - `?\"function\"`"
msgstr "  - `?\"function\"`"

# unordered list
#: r-novice-gapminder/reference.md:198
msgid "  - Put code whose parameters change frequently in a function, then call it with"
msgstr "  - 何度もパラメータを変えながら実行するコードを関数にし、"

#: r-novice-gapminder/reference.md:199
msgid ""
"    different parameter values to customize its behavior.\n"
"  - The last line of a function is returned, or you can use `return` explicitly\n"
"  - Any code written in the body of the function will preferably look for variables defined inside the function.\n"
"  - Document Why, then What, then lastly How (if the code isn't self explanatory)"
msgstr ""
"    作った関数をパラメータの値を変えることで挙動を変更しながら呼び出しましょう。\n"
"  - 関数の最終行か、明示的に `return` を用いた部分が返り値になります。\n"
"  - 関数の本文中に記述したコードはいずれも、関数内で定義された変数から探し始めます。\n"
"  - コードの内容が自明ではない時は、ドキュメントに「なぜ」、次に「何」、そして最後に「どう」を記述しましょう。"

# header
#: r-novice-gapminder/reference.md:204
msgid "## [Writing data]({{ page.root }}/11-writing-data/)"
msgstr "## [データの出力]({{ page.root }}/11-writing-data/)"

# unordered list
#: r-novice-gapminder/reference.md:206
msgid " - `write.table` to write out objects in regular format"
msgstr " - `write.table` を使ってオブジェクトを一般的な形式に出力しましょう。"
# unordered list
#: r-novice-gapminder/reference.md:207
msgid " - set `quote=FALSE` so that text isn't wrapped in `\"` marks"
msgstr " - `quote=FALSE` を指定して文字列が引用符に囲われないようにしましょう。"

# header
#: r-novice-gapminder/reference.md:209
msgid "## [Split-apply-combine]({{ page.root }}/12-plyr/)"
msgstr "## [Split-apply-combine]({{ page.root }}/12-plyr/)"

# unordered list
#: r-novice-gapminder/reference.md:211
msgid " - Use the `xxply` family of functions to apply functions to groups within"
msgstr " - Use the `xxply` family of functions to apply functions to groups within"

#: r-novice-gapminder/reference.md:212
msgid ""
"   some data.\n"
" - the first letter, `a`rray , `d`ata.frame or `l`ist corresponds to the input data\n"
" - the second letter denotes the output data structure\n"
" - Anonymous functions (those not assigned a name) are used inside the `plyr` family\n"
"   of functions on groups within data."
msgstr ""
"   some data.\n"
" - the first letter, `a`rray , `d`ata.frame or `l`ist corresponds to the input data\n"
" - the second letter denotes the output data structure\n"
" - Anonymous functions (those not assigned a name) are used inside the `plyr` family\n"
"   of functions on groups within data."

# header
#: r-novice-gapminder/reference.md:218
msgid "## [Dataframe manipulation with dplyr]({{ page.root }}/13-dplyr/)"
msgstr "## [Dataframe manipulation with dplyr]({{ page.root }}/13-dplyr/)"

# unordered list
#: r-novice-gapminder/reference.md:219
msgid " - `library(dplyr)`"
msgstr " - `library(dplyr)`"

# unordered list
#: r-novice-gapminder/reference.md:220
msgid " - `?select` to extract variables by name."
msgstr " - `?select` to extract variables by name."

# unordered list
#: r-novice-gapminder/reference.md:221
msgid " - `?filter` return rows with matching conditions."
msgstr " - `?filter` return rows with matching conditions."

# unordered list
#: r-novice-gapminder/reference.md:222
msgid " - `?group_by` group data by one of more variables."
msgstr " - `?group_by` group data by one of more variables."

# unordered list
#: r-novice-gapminder/reference.md:223
msgid " - `?summarize` summarize multiple values to a single value."
msgstr " - `?summarize` summarize multiple values to a single value."

# unordered list
#: r-novice-gapminder/reference.md:224
msgid " - `?mutate` add new variables to a data.frame."
msgstr " - `?mutate` add new variables to a data.frame."

# unordered list
#: r-novice-gapminder/reference.md:225
msgid " - Combine operations using the `?\"%>%\"` pipe operator."
msgstr " - Combine operations using the `?\"%>%\"` pipe operator."

# header
#: r-novice-gapminder/reference.md:227
msgid "## [Dataframe manipulation with tidyr]({{ page.root }}/14-tidyr/)"
msgstr "## [Dataframe manipulation with tidyr]({{ page.root }}/14-tidyr/)"

# unordered list
#: r-novice-gapminder/reference.md:228
msgid "- `library(tidyr)`"
msgstr "- `library(tidyr)`"

# unordered list
#: r-novice-gapminder/reference.md:229
msgid "- '?gather' convert data from *wide* to *long* format."
msgstr "- '?gather' convert data from *wide* to *long* format."

# unordered list
#: r-novice-gapminder/reference.md:230
msgid "- '?spread' convert data from *long* to *wide* format."
msgstr "- '?spread' convert data from *long* to *wide* format."

# unordered list
#: r-novice-gapminder/reference.md:231
msgid "- '?separate' split a single value into multiple values."
msgstr "- '?separate' split a single value into multiple values."

# unordered list
#: r-novice-gapminder/reference.md:232
msgid "- '?unite' merge multiple values into a single value."
msgstr "- '?unite' merge multiple values into a single value."

# header
#: r-novice-gapminder/reference.md:234
msgid "## [Producing reports with knitr]({{ page.root }}/15-knitr-markdown/)"
msgstr "## [Producing reports with knitr]({{ page.root }}/15-knitr-markdown/)"

# unordered list
#: r-novice-gapminder/reference.md:235
msgid "- Value of reproducible reports"
msgstr "- Value of reproducible reports"

# unordered list
#: r-novice-gapminder/reference.md:236
msgid "- Basics of Markdown"
msgstr "- Basics of Markdown"

# unordered list
#: r-novice-gapminder/reference.md:237
msgid "- R code chunks"
msgstr "- R code chunks"

# unordered list
#: r-novice-gapminder/reference.md:238
msgid "- Chunk options"
msgstr "- Chunk options"

# unordered list
#: r-novice-gapminder/reference.md:239
msgid "- Inline R code"
msgstr "- Inline R code"

# unordered list
#: r-novice-gapminder/reference.md:240
msgid "- Other output formats"
msgstr "- Other output formats"

# header
#: r-novice-gapminder/reference.md:242
msgid "## [Best practices for writing good code]({{ page.root }}/16-wrap-up/)"
msgstr "## [Best practices for writing good code]({{ page.root }}/16-wrap-up/)"

# unordered list
#: r-novice-gapminder/reference.md:244
msgid " * Program defensively, i.e., assume that errors are going to arise, and write code to detect them when they do."
msgstr " * Program defensively, i.e., assume that errors are going to arise, and write code to detect them when they do."

# unordered list
#: r-novice-gapminder/reference.md:245
msgid " * Write tests before writing code in order to help determine exactly what that code is supposed to do."
msgstr " * Write tests before writing code in order to help determine exactly what that code is supposed to do."

# unordered list
#: r-novice-gapminder/reference.md:246
msgid " * Know what code is supposed to do before trying to debug it."
msgstr " * Know what code is supposed to do before trying to debug it."

# unordered list
#: r-novice-gapminder/reference.md:247
msgid " * Make it fail every time."
msgstr " * Make it fail every time."

# unordered list
#: r-novice-gapminder/reference.md:248
msgid " * Make it fail fast."
msgstr " * Make it fail fast."

# unordered list
#: r-novice-gapminder/reference.md:249
msgid " * Change one thing at a time, and for a reason."
msgstr " * Change one thing at a time, and for a reason."

# unordered list
#: r-novice-gapminder/reference.md:250
msgid " * Keep track of what you've done."
msgstr " * Keep track of what you've done."

# unordered list
#: r-novice-gapminder/reference.md:251
msgid " * Be humble"
msgstr " * Be humble"

#: r-novice-gapminder/reference.md:255
msgid ""
"{:auto_ids}\n"
"argument\n"
":   A value given to a function or program when it runs.\n"
"    The term is often used interchangeably (and inconsistently) with [parameter](#parameter)."
msgstr ""
"{:auto_ids}\n"
"argument\n"
":   A value given to a function or program when it runs.\n"
"    The term is often used interchangeably (and inconsistently) with [parameter](#parameter)."

#: r-novice-gapminder/reference.md:260
msgid ""
"assign\n"
":   To give a value a name by associating a variable with it."
msgstr ""
"assign\n"
":   To give a value a name by associating a variable with it."

#: r-novice-gapminder/reference.md:263
msgid ""
"body\n"
":   (of a function): the statements that are executed when a function runs."
msgstr ""
"body\n"
":   (of a function): the statements that are executed when a function runs."

#: r-novice-gapminder/reference.md:266
msgid ""
"comment\n"
":   A remark in a program that is intended to help human readers understand what is going on,\n"
"    but is ignored by the computer.\n"
"    Comments in Python, R, and the Unix shell start with a `#` character and run to the end of the line;\n"
"    comments in SQL start with `--`,\n"
"    and other languages have other conventions."
msgstr ""
"comment\n"
":   A remark in a program that is intended to help human readers understand what is going on,\n"
"    but is ignored by the computer.\n"
"    Comments in Python, R, and the Unix shell start with a `#` character and run to the end of the line;\n"
"    comments in SQL start with `--`,\n"
"    and other languages have other conventions."

#: r-novice-gapminder/reference.md:273
msgid ""
"comma-separated values\n"
":   (CSV) A common textual representation for tables\n"
"    in which the values in each row are separated by commas."
msgstr ""
"comma-separated values\n"
":   (CSV) A common textual representation for tables\n"
"    in which the values in each row are separated by commas."

#: r-novice-gapminder/reference.md:277
msgid ""
"delimiter\n"
":   A character or characters used to separate individual values,\n"
"    such as the commas between columns in a [CSV](#comma-separated-values) file."
msgstr ""
"delimiter\n"
":   A character or characters used to separate individual values,\n"
"    such as the commas between columns in a [CSV](#comma-separated-values) file."

#: r-novice-gapminder/reference.md:281
msgid ""
"documentation\n"
":   Human-language text written to explain what software does,\n"
"    how it works, or how to use it."
msgstr ""
"documentation\n"
":   Human-language text written to explain what software does,\n"
"    how it works, or how to use it."

#: r-novice-gapminder/reference.md:285
msgid ""
"floating-point number\n"
":   A number containing a fractional part and an exponent.\n"
"    See also: [integer](#integer)."
msgstr ""
"floating-point number\n"
":   A number containing a fractional part and an exponent.\n"
"    See also: [integer](#integer)."

#: r-novice-gapminder/reference.md:289
msgid ""
"for loop\n"
":   A loop that is executed once for each value in some kind of set, list, or range.\n"
"    See also: [while loop](#while-loop)."
msgstr ""
"for loop\n"
":   A loop that is executed once for each value in some kind of set, list, or range.\n"
"    See also: [while loop](#while-loop)."

#: r-novice-gapminder/reference.md:293
msgid ""
"index\n"
":   A subscript that specifies the location of a single value in a collection,\n"
"    such as a single pixel in an image."
msgstr ""
"index\n"
":   A subscript that specifies the location of a single value in a collection,\n"
"    such as a single pixel in an image."

#: r-novice-gapminder/reference.md:297
msgid ""
"integer\n"
":   A whole number, such as -12343. See also: [floating-point number](#floating-point-number)."
msgstr ""
"integer\n"
":   A whole number, such as -12343. See also: [floating-point number](#floating-point-number)."

#: r-novice-gapminder/reference.md:300
msgid ""
"library\n"
":   In R, the directory(ies) where [packages](#package) are stored."
msgstr ""
"library\n"
":   In R, the directory(ies) where [packages](#package) are stored."

#: r-novice-gapminder/reference.md:303
msgid ""
"package\n"
":   A collection of R functions, data and compiled code in a well-defined format. Packages are stored in a [library](#library) and loaded using the library() function."
msgstr ""
"package\n"
":   A collection of R functions, data and compiled code in a well-defined format. Packages are stored in a [library](#library) and loaded using the library() function."

#: r-novice-gapminder/reference.md:306
msgid ""
"parameter\n"
":   A variable named in the function's declaration that is used to hold a value passed into the call.\n"
"    The term is often used interchangeably (and inconsistently) with [argument](#argument)."
msgstr ""
"parameter\n"
":   A variable named in the function's declaration that is used to hold a value passed into the call.\n"
"    The term is often used interchangeably (and inconsistently) with [argument](#argument)."

#: r-novice-gapminder/reference.md:310
msgid ""
"return statement\n"
":   A statement that causes a function to stop executing and return a value to its caller immediately."
msgstr ""
"return statement\n"
":   A statement that causes a function to stop executing and return a value to its caller immediately."

#: r-novice-gapminder/reference.md:313
msgid ""
"sequence\n"
":   A collection of information that is presented in a specific order."
msgstr ""
"sequence\n"
":   A collection of information that is presented in a specific order."

#: r-novice-gapminder/reference.md:316
msgid ""
"shape\n"
":   An array's dimensions, represented as a vector.\n"
"    For example, a 5×3 array's shape is `(5,3)`."
msgstr ""
"shape\n"
":   An array's dimensions, represented as a vector.\n"
"    For example, a 5×3 array's shape is `(5,3)`."

#: r-novice-gapminder/reference.md:320
msgid ""
"string\n"
":   Short for \"character string\",\n"
"    a [sequence](#sequence) of zero or more characters."
msgstr ""
"string\n"
":   Short for \"character string\",\n"
"    a [sequence](#sequence) of zero or more characters."

#: r-novice-gapminder/reference.md:324
msgid ""
"syntax error\n"
":   A programming error that occurs when statements are in an order or contain characters\n"
"    not expected by the programming language."
msgstr ""
"syntax error\n"
":   A programming error that occurs when statements are in an order or contain characters\n"
"    not expected by the programming language."

#: r-novice-gapminder/reference.md:328
msgid ""
"type\n"
":   The classification of something in a program (for example, the contents of a variable)\n"
"    as a kind of number (e.g. [floating-point](#float), [integer](#integer)), [string](#string),\n"
"    or something else. In R the command typeof() is used to query a variables type."
msgstr ""
"type\n"
":   The classification of something in a program (for example, the contents of a variable)\n"
"    as a kind of number (e.g. [floating-point](#float), [integer](#integer)), [string](#string),\n"
"    or something else. In R the command typeof() is used to query a variables type."

#: r-novice-gapminder/reference.md:333
msgid ""
"while loop\n"
":   A loop that keeps executing as long as some condition is true.\n"
"    See also: [for loop](#for-loop)."
msgstr ""
"while loop\n"
":   A loop that keeps executing as long as some condition is true.\n"
"    See also: [for loop](#for-loop)."

# Front Matter
#: r-novice-gapminder/setup.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Setup\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: セットアップ\n"
"root: .\n"
"---"

#: r-novice-gapminder/setup.md:7
msgid "This lesson assumes you have the R, RStudio software installed on your computer."
msgstr "このレッスンは、あなたのコンピューターにRとRStudioがインストールされていることを前提としています。"

#: r-novice-gapminder/setup.md:9
msgid "R can be downloaded [here](https://cran.r-project.org/mirrors.html)."
msgstr "Rは[ここ](https://cran.r-project.org/mirrors.html)からダウンロードできます。"

#: r-novice-gapminder/setup.md:11
msgid ""
"RStudio is an environment for developing using R.\n"
"It can be downloaded [here](https://www.rstudio.com/products/rstudio/download/).\n"
"You will need the Desktop version for your computer."
msgstr ""
"RStudioは、Rを用いる開発のための環境です。\n"
"RStudioは[ここ](https://www.rstudio.com/products/rstudio/download/)からダウンロードできます。\n"
"あなたのコンピューターにはデスクトップバージョンが必要です。"
