# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# David Perez-Suarez <dps.helio@gmail.com>, 2020, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-11-23 11:42:44+0900\n"
"PO-Revision-Date: 2018-08-18 20:47+0100\n"
"Last-Translator: David Pérez-Suárez <dps.helio@gmail.com>\n"
"Language-Team: Spanish <dps.helio@gmail.com>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.1.1\n"

# Front Matter
#: git-novice/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"permalink: /conduct/\n"
"---"
msgstr ""

#: git-novice/CODE_OF_CONDUCT.md:6 git-novice/_locale/es/CODE_OF_CONDUCT.md:6
msgid ""
"As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""

#: git-novice/CODE_OF_CONDUCT.md:9 git-novice/_locale/es/CODE_OF_CONDUCT.md:9
msgid ""
"Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""

#: git-novice/CODE_OF_CONDUCT.md:12 git-novice/_locale/es/CODE_OF_CONDUCT.md:12
msgid "{% include links.md %}"
msgstr ""

# header
#: git-novice/CONTRIBUTING.md:1
msgid "# Contributing"
msgstr "# Contribuyendo"

#: git-novice/CONTRIBUTING.md:3
msgid ""
"[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source "
"projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""
"[Software Carpentry][swc-site] y [Data Carpentry][dc-site] son ​\n"
"proyectos de código abierto, y damos la bienvenida a contribuciones \n"
"de todo tipo: nuevas lecciones, correcciones al material existente, \n"
"informes de errores, y revisiones de cambios propuestos son todas\n"
"bienvenidas."

# header
#: git-novice/CONTRIBUTING.md:10
msgid "## Contributor Agreement"
msgstr "## Acuerdo de Colaboración"

#: git-novice/CONTRIBUTING.md:12
msgid ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE."
"md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly "
"as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"agrees to abide by our [code of conduct](https://docs.carpentries.org/"
"topic_folders/policies/code-of-conduct.html)."
msgstr ""
"Al contribuir, aceptas que podemos redistribuir tu trabajo bajo\n"
"[nuestra licencia](LICENCIA.md). A cambio, abordaremos tus problemas \n"
"y/o evaluaremos tu propuesta de cambio tan pronto como podamos, y \n"
"te ayudaremos a convertirte en miembro de nuestra comunidad. Todos los \n"
"involucrados en [Software Carpentry][swc-site] y \n"
"[Data Carpentry][dc-site]\n"
"aceptan cumplir con nuestro [código de conducta](CONDUCT.md)."

# header
#: git-novice/CONTRIBUTING.md:20
msgid "## How to Contribute"
msgstr "## Cómo contribuir"

#: git-novice/CONTRIBUTING.md:22
msgid ""
"The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""
"La forma más fácil de comenzar es presentar un problema para \n"
"poder corregirlo, como un error ortográfico, algunas palabras no claras,\n"
"o un error fáctico. Contribuir es una buena forma de presentarte \n"
"y conocer a algunos de los miembros de nuestra comunidad."

# ordered list
#: git-novice/CONTRIBUTING.md:29
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr "1. Si no tienes una cuenta de [GitHub][github],"

#: git-novice/CONTRIBUTING.md:30
msgid ""
"    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other "
"methods described below."
msgstr ""
" puedes [enviarnos comentarios por correo electrónico][contacto]. Sin "
"embargo, podremos responder más rápidamente si usas uno de los otros métodos "
"descritos a continuación."

# ordered list
#: git-novice/CONTRIBUTING.md:34
msgid "2.  If you have a [GitHub][github] account,"
msgstr "2. Si tienes una cuenta de[GitHub][github],"

#: git-novice/CONTRIBUTING.md:35
msgid ""
"    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue]"
"[new-issue].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""
" o estás dispuesto a [crear una][github-join], pero no sabes como usar git, "
"puedes informar de problemas o sugerir mejoras al [crear un problema o "
"**issue**][nuevo-problema]. Esto nos permite asignar la tarea a alguien y "
"responderle en un hilo de discusión."

# ordered list
#: git-novice/CONTRIBUTING.md:41
msgid "3.  If you are comfortable with Git,"
msgstr "3. Si te sientes cómodo con Git,"

#: git-novice/CONTRIBUTING.md:42
msgid ""
"    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""
" y te gustaría agregar o cambiar material, puedes enviar una solicitud de "
"inclusión o **pull request** (PR). Las  instrucciones para hacerlo [se "
"incluyen a continuación](#using-github)."

# header
#: git-novice/CONTRIBUTING.md:46
msgid "## Where to Contribute"
msgstr "## Donde Contribuir"

# ordered list
#: git-novice/CONTRIBUTING.md:48
msgid "1.  If you wish to change this lesson,"
msgstr "1. Si deseas cambiar esta lección,"

#: git-novice/CONTRIBUTING.md:49
msgid ""
"    please work in <https://github.com/swcarpentry/git-novice>,\n"
"    which can be viewed at <https://swcarpentry.github.io/git-novice>."
msgstr ""
" por favor trabaja en <https://github.com/swcarpentry/git-novice-es>, que se "
"puede ver en <https://swcarpentry.github.io/git-novice-es>."

# ordered list
#: git-novice/CONTRIBUTING.md:52
msgid "2.  If you wish to change the example lesson,"
msgstr "2. Si deseas cambiar la lección de ejemplo,"

#: git-novice/CONTRIBUTING.md:53
msgid ""
"    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""
" por favor trabaja en <https://github.com/carpentries/lesson-example>, que "
"documenta el formato de nuestras lecciones y se puede ver en <https://"
"carpentries.github.io/lesson-example>."

# ordered list
#: git-novice/CONTRIBUTING.md:57
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""
"3. Si deseas cambiar la plantilla utilizada para los sitios web del taller,"

#: git-novice/CONTRIBUTING.md:58
msgid ""
"    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop "
"websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-"
"template>\n"
"    provide more background on our design choices."
msgstr ""
" por favor trabaja en <https://github.com/carpentries/workshop-template>. La "
"página de inicio de ese repositorio explica cómo configurar los sitios web "
"de los talleres, mientras que las páginas adicionales en <https://"
"carpentries.github.io/workshop-template> proporcionan más información sobre "
"nuestros criterios de diseño."

# ordered list
#: git-novice/CONTRIBUTING.md:63
msgid "4.  If you wish to change CSS style files, tools,"
msgstr "4. Si deseas cambiar los archivos de estilo CSS, herramientas,"

#: git-novice/CONTRIBUTING.md:64
msgid ""
"    or HTML boilerplate for lessons or workshops stored in `_includes` or "
"`_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""
"    o texto estándar HTML para lecciones o talleres almacenados en "
"`_includes` o` _layouts`, por favor trabaja en <https://github.com/"
"carpentries/styles>."

# header
#: git-novice/CONTRIBUTING.md:67
msgid "## What to Contribute"
msgstr "## Qué aportar"

#: git-novice/CONTRIBUTING.md:69
msgid ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][new-issue]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""
"Hay muchas maneras de contribuir, desde escribir nuevos ejercicios y\n"
"mejorar los existentes hasta actualizar o completar la documentación y\n"
"enviando [informes de error o **issues**][nuevo-problema] sobre cosas que "
"no\n"
"funcionan, no son claras o faltan. Si estás buscando ideas, por favor\n"
"revisa [la lista de problemas para este repositorio][issues], o la de los \n"
"problemas de los proyectos [Data Carpentry][dc-issues] y \n"
"[Software Carpentry][swc-issues]."

#: git-novice/CONTRIBUTING.md:79
msgid ""
"Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""
"Los comentarios sobre problemas y revisiones de solicitudes de\n"
"inclusión son igualmente bienvenidos: somos más inteligentes juntos\n"
"que por nuestra cuenta. Los comentarios de principiantes y recién \n"
"llegados son particularmente valiosos: es fácil para las personas\n"
"que han estado usando estas lecciones por un tiempo, olvidar lo \n"
"impenetrable que puede ser parte de este material, por lo que los \n"
"ojos frescos son siempre bienvenidos."

# header
#: git-novice/CONTRIBUTING.md:86
msgid "## What *Not* to Contribute"
msgstr "## Qué *No* contribuir"

#: git-novice/CONTRIBUTING.md:88
msgid ""
"Our lessons already contain more material than we can cover in a typical "
"workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""
"Nuestras lecciones ya contienen más material de lo que podemos cubrir\n"
"en un taller típico, por lo que usualmente *no* buscamos más \n"
"conceptos o herramientas para agregarles. Como regla general, si quieres\n"
"presentar una nueva idea, debes (a) estimar cuánto tiempo tomará \n"
"enseñarla y (b) explicar lo que sacarías para darle espacio. El primero\n"
"anima a los contribuyentes a ser honestos acerca de los requisitos;\n"
"el segundo, pensar bien las prioridades."

#: git-novice/CONTRIBUTING.md:97
msgid ""
"We are also not looking for exercises or other material that only run on one "
"platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux "
"users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""
"Tampoco buscamos ejercicios u otro material que sólo se ejecute en \n"
"una plataforma. Nuestros talleres suelen contener una mezcla de \n"
"usuarios de Windows, Mac OS X y Linux; para ser utilizable, nuestras \n"
"lecciones deben correr igualmente bien en las tres plataformas."

# header
#: git-novice/CONTRIBUTING.md:102
msgid "## Using GitHub"
msgstr "## Usando GitHub"

#: git-novice/CONTRIBUTING.md:104 git-novice/_locale/es/CONTRIBUTING.md:84
#, fuzzy
msgid ""
"If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""
"Si eliges contribuir a través de GitHub, es posible que desees mirar\n"
"[Cómo contribuir a un proyecto de código abierto en GitHub][cómo-contribuir]."

# ordered list
#: git-novice/CONTRIBUTING.md:109
msgid ""
"1.  The published copy of the lesson is in the `gh-pages` branch of the "
"repository"
msgstr ""
"1. La copia publicada de la lección está en la rama `gh-pages` del "
"repositorio "

#: git-novice/CONTRIBUTING.md:110
msgid ""
"    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your "
"`gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""
"(para que GitHub la regenere automáticamente). Por favor crea todas las "
"ramas de eso, y fusiona la rama `gh-pages` del [repositorio maestro][repo] "
"en la rama` gh-pages` antes de comenzar a trabajar. Por favor, *no* trabajes "
"directamente en su rama `gh-pages`, ya que eso te dificultará trabajar en "
"otras contribuciones."

# ordered list
#: git-novice/CONTRIBUTING.md:117
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr "2. Usamos [GitHub flow] [github-flow] para gestionar los cambios:"

#: git-novice/CONTRIBUTING.md:118
msgid ""
"    1.  Create a new branch in your desktop copy of this repository for each "
"significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository]"
"[repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""
"   1. Crea una nueva rama en tu copia de escritorio de este repositorio para "
"cada cambio significativo.\n"
"   2. Confirma (**commit**) el cambio en esa rama.\n"
"   3. Empuja esa rama a su tenedor de este repositorio en GitHub.\n"
"   4. Envía una solicitud de inserción (**pull request**) desde esa rama al "
"[repositorio principal] [repo].\n"
"   5. Si recibe comentarios,\n"
"      haz cambios en tu escritorio y envíalos (**push**) a tu rama en "
"GitHub:\n"
"      la solicitud de inserción se actualizará automáticamente."

#: git-novice/CONTRIBUTING.md:126
msgid ""
"Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""
"Cada lección tiene dos mantenedores que revisan problemas y solicitudes \n"
"inserción o animan a otros a hacerlos. Los mantenedores son \n"
"voluntarios de la comunidad, y tener la última palabra sobre lo que \n"
"se incluye en la lección."

# header
#: git-novice/CONTRIBUTING.md:131
msgid "## Other Resources"
msgstr "## Otros recursos"

#: git-novice/CONTRIBUTING.md:133
msgid ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""
"La discusión general de [Software Carpentry][swc-site] y \n"
"[Data Carpentry][dc-site] ocurre en la \n"
"[lista de distribución de discusiones][lista-de-discusión], \n"
"a la cual todos son bienvenidos. También puedes \n"
"[contactarnos por correo electrónico][contacto]."

#: git-novice/CONTRIBUTING.md:138
msgid ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"
msgstr ""
"[contacto]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[lista-de-discusión]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[cómo-contribuir]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[nuevo-problema]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"

# Front Matter
#: git-novice/LICENSE.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

# header
#: git-novice/LICENSE.md:6
msgid "## Instructional Material"
msgstr "### Material didáctico"

#: git-novice/LICENSE.md:8
msgid ""
"All Software Carpentry and Data Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""
"Todo el material de instrucción de Software Carpentry and Data Carpentry "
"está\n"
"disponible bajo la licencia [Creative Commons Attribution][cc-por-humano]. "
"El siguiente es un resumen de licencia\n"
"(y no un sustituto) del [texto legal completo de CC BY 4.0\n"
"licencia][cc-by-legal]."

#: git-novice/LICENSE.md:14
msgid "You are free:"
msgstr "Puedes libremente:"

# unordered list
#: git-novice/LICENSE.md:16
msgid ""
"* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""
"* **Compartir** --- copiar y redistribuir el material en cualquier medio o "
"formato"

# unordered list
#: git-novice/LICENSE.md:17
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""
"* **Adaptar** --- remezclar, transformar y construir a partir del material"

#: git-novice/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr "para cualquier propósito, incluso comercialmente."

#: git-novice/LICENSE.md:21
msgid ""
"The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""
"El licenciante no puede revocar estas libertades mientras se siga las\n"
"condiciones de la licencia."

#: git-novice/LICENSE.md:24
msgid "Under the following terms:"
msgstr "Bajo los siguientes términos:"

# unordered list
#: git-novice/LICENSE.md:26
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""
"* **Atribución** --- Debes otorgar crédito a éste material de manera "
"adecuada (mencionando que"

#: git-novice/LICENSE.md:27
msgid ""
"  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  https://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""
"  su trabajo se deriva del trabajo que es Copyright de © Software\n"
"  Carpentry y, donde sea práctico, agrega un enlace a\n"
"  http://software-carpentry.org/), proporciona un [enlace a la\n"
"  licencia][cc-por-humano], e indica si se realizaron cambios. Puedes "
"hacerlo en cualquier forma razonable, \n"
"  pero no de forma tal que sugiera que tú o el uso del material derivado "
"tienen el respaldo del licenciante. "

#: git-novice/LICENSE.md:34
msgid ""
"**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""
"**Sin restricciones adicionales** --- No puedes aplicar términos legales o\n"
"medidas tecnológicas que restrinjan a otros hacer\n"
"todo lo que la licencia permite. "

#: git-novice/LICENSE.md:38
msgid "Notices:"
msgstr "Avisos:"

# unordered list
#: git-novice/LICENSE.md:40
msgid "* You do not have to comply with the license for elements of the"
msgstr ""
"* No tiene que cumplir con la licencia con los materiales que estén en el "
"dominio público "

#: git-novice/LICENSE.md:41
msgid ""
"  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""
"  o cuando su uso esté permitido por una excepción o limitación aplicable. \n"
"* No se dan garantías. La licencia puede no darle todos los\n"
"  permisos necesarios para su uso previsto. Por ejemplo, otros\n"
"  derechos como la publicidad, la privacidad, o los derechos morales pueden "
"limitar la forma en que\n"
"  uses el material."

# header
#: git-novice/LICENSE.md:48 git-novice/_locale/es/LICENSE.md:45
msgid "## Software"
msgstr "## Software"

#: git-novice/LICENSE.md:50
msgid ""
"Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under "
"the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""
"Salvo que se indique lo contrario, los programas de ejemplo y otro software\n"
"proporcionado por Software Carpentry y Data Carpentry están disponibles bajo "
"el\n"
"[OSI][osi]-aprobado\n"
"[Licencia de MIT][mit-license]."

#: git-novice/LICENSE.md:55
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""
"Se concede permiso, de forma gratuita, a cualquier persona que obtenga\n"
"una copia de este software y los archivos de documentación asociados (el\n"
"\"Software\"), para tratar el Software sin restricciones, incluyendo\n"
"sin limitación, los derechos de uso, copia, modificación, fusión, "
"publicación,\n"
"distribuir, sublicenciar y / o vender copias del Software, y\n"
"Permitir a las personas a quienes se les proporciona el Software que lo "
"hagan, sujeto a\n"
"las siguientes condiciones:"

#: git-novice/LICENSE.md:63
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""
"El aviso de copyright anterior y este aviso de permiso serán\n"
"incluido en todas las copias o porciones sustanciales del software."

#: git-novice/LICENSE.md:66
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""
"EL SOFTWARE SE PROPORCIONA \"TAL CUAL\", SIN GARANTÍA DE NINGÚN TIPO,\n"
"EXPRESO O IMPLICADO, INCLUIDAS, ENTRE OTRAS, LAS GARANTÍAS DE\n"
"COMERCIABILIDAD, APTITUD PARA UN PROPÓSITO PARTICULAR Y\n"
"NO INFRACCIÓN EN NINGÚN CASO SERÁN LOS AUTORES O LOS TITULARES DE LOS "
"DERECHOS DE AUTOR\n"
"RESPONSABLE POR CUALQUIER RECLAMO, DAÑOS U OTRA RESPONSABILIDAD, YA SEA EN "
"ACCIÓN\n"
"DEL CONTRATO, EXTRACONTRACTUAL O DE OTRO TIPO, DERIVADOS, FUERA DE O EN "
"CONEXIÓN\n"
"CON EL SOFTWARE O EL USO U OTROS TRATOS EN EL SOFTWARE."

# header
#: git-novice/LICENSE.md:74
msgid "## Trademark"
msgstr "## Marca registrada"

#: git-novice/LICENSE.md:76
msgid ""
"\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""
"\"Software Carpentry\" y \"Data Carpentry\" y sus respectivos logos\n"
"son marcas registradas de [Community Initiatives][ci]."

#: git-novice/LICENSE.md:79
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""
"[cc-por-humano]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"

#: git-novice/README.md:1
msgid ""
"[![Create a Slack Account with us](https://img.shields.io/badge/"
"Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite."
"herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git-E01563."
"svg)](https://swcarpentry.slack.com/messages/C91JS49HD) "
msgstr ""
"[![Create a Slack Account with us](https://img.shields.io/badge/"
"Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite."
"herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git--es-"
"E01563.svg)](https://swcarpentry.slack.com/messages/C9X42NTQC) "

#: git-novice/README.md:4 git-novice/_locale/es/README.md:4
msgid ""
"git-novice\n"
"=========="
msgstr ""
"git-novice\n"
"=========="

#: git-novice/README.md:7
msgid ""
"An introduction to version control for novices using Git.\n"
"Please see <https://swcarpentry.github.io/git-novice/> for a rendered "
"version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""
"Una introdución para principiantes sobre control de versiones usando Git.\n"
"Puedes encontrar la traducción de este material en <https://swcarpentry."
"github.io/git-novice-es/>\n"
"y también puedes ver el [modelo de documentación][lesson-example]\n"
"para las instrucciones de formato y como mejorar el material, \n"
"o también puedes run `make` en este directorio para ver una lista de "
"comandos útiles."

#: git-novice/README.md:13 git-novice/_locale/es/README.md:13
msgid "Maintainers:"
msgstr ""

# unordered list
#: git-novice/README.md:15 git-novice/_locale/es/README.md:15
msgid "* [Ivan Gonzalez][gonzalez_ivan]: [@iglpdc](https://github.com/iglpdc)"
msgstr "* [Ivan Gonzalez][gonzalez_ivan]: [@iglpdc](https://github.com/iglpdc)"

# unordered list
#: git-novice/README.md:16
#, fuzzy
msgid "* [Nima Hejazi][hejazi_nima]: [@nhejazi](https://github.com/nhejazi)"
msgstr ""
"* [Rayna Harris][harris_rayna]: [@raynamharris](https://github.com/"
"raynamharris)"

# unordered list
#: git-novice/README.md:17
msgid "* [Daisie Huang][huang_daisie]: [@daisieh](https://github.com/daisieh)"
msgstr ""
"* [Clara Llebot Lorente][llebot_clara]: [@clarallebot](https://github.com/"
"clarallebot)"

# unordered list
#: git-novice/README.md:18
msgid "* [Kat Koziar][koziar_kat]: [@kekoziar](https://github.com/kekoziar)"
msgstr " "

# unordered list
#: git-novice/README.md:19
msgid "* [Madicken Munk][munk_madicken]: [@munkm](https://github.com/munkm)"
msgstr " "

#: git-novice/README.md:21
msgid ""
"[gonzalez_ivan]: https://software-carpentry.org/team/#gonzalez_ivan\n"
"[hejazi_nima]: https://software-carpentry.org/team/#hejazi_nima\n"
"[huang_daisie]: https://software-carpentry.org/team/#huang_daisie\n"
"[koziar_kat]: https://software-carpentry.org/team/#koziar_kat\n"
"[munk_madicken]: https://software-carpentry.org/team/#munk_madicken\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example"
msgstr ""
"[llebot_clara]: https://software-carpentry.org/team/#llebot_clara\n"
"[gonzalez_ivan]: https://software-carpentry.org/team/#gonzalez_ivan\n"
"[harris_rayna]: http://software-carpentry.org/team/#harris_rayna\n"
"[lesson-example]: https://carpentries.github.io/lesson-example"

# Front Matter
#: git-novice/_episodes/01-basics.md:1
msgid ""
"---\n"
"title: Automated Version Control\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What is version control and why should I use it?\"\n"
"objectives:\n"
"- \"Understand the benefits of an automated version control system.\"\n"
"- \"Understand the basics of how Git works.\"\n"
"keypoints:\n"
"- \"Version control is like an unlimited 'undo'.\"\n"
"- \"Version control also allows many people to work in parallel.\"\n"
"---"
msgstr ""
"---\n"
"title: Control Automatizado de Versiones\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué es el control de versiones y por qué se deberá usar?\"\n"
"objectives:\n"
"- \"Comprender los beneficios de usar un sistema automático de control de "
"versiones.\"\n"
"- \"Comprender los fundamentos básicos del funcionamiento de Git.\"\n"
"keypoints:\n"
"- \"El control de versiones es como un 'deshacer' sin límites.\"\n"
"- \"El control de versiones permite que mucha gente trabaje en lo mismo en "
"paralelo.\"\n"
"---"

#: git-novice/_episodes/01-basics.md:15
msgid ""
"We'll start by exploring how version control can be used\n"
"to keep track of what one person did and when.\n"
"Even if you aren't collaborating with other people,\n"
"automated version control is much better than this situation:"
msgstr ""
"Empezaremos por explorar cómo el control de versiones puede ser usado\n"
"para hacer un seguimiento de lo que hizo una persona y cuándo.\n"
"Incluso si no se está colaborando con otras personas, \n"
"el control automatizado de versiones es mucho mejor que la siguiente "
"situación:"

#: git-novice/_episodes/01-basics.md:20
#: git-novice/_locale/es/_episodes/01-basics.md:20
msgid ""
"[![Piled Higher and Deeper by Jorge Cham, http://www.phdcomics.com/comics/"
"archive_print.php?comicid=1531](../fig/phd101212s.png)](http://www.phdcomics."
"com)"
msgstr ""

#: git-novice/_episodes/01-basics.md:22
#: git-novice/_locale/es/_episodes/01-basics.md:22
msgid "\"Piled Higher and Deeper\" by Jorge Cham, http://www.phdcomics.com"
msgstr ""

#: git-novice/_episodes/01-basics.md:24
msgid ""
"We've all been in this situation before: it seems ridiculous to have\n"
"multiple nearly-identical versions of the same document. Some word\n"
"processors let us deal with this a little better, such as Microsoft\n"
"Word's [Track Changes](https://support.office.com/en-us/article/Track-"
"changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), Google "
"Docs' [version\n"
"history](https://support.google.com/docs/answer/190843?hl=en), or "
"LibreOffice's [Recording and Displaying Changes](https://help.libreoffice."
"org/Common/Recording_and_Displaying_Changes)."
msgstr ""
"Todos hemos estado en esta situación alguna vez: parece ridículo tener \n"
"varias versiones casi idénticas del mismo documento. Algunos procesadores de "
"texto \n"
"nos permiten lidiar con esto un poco mejor, como por ejemplo el [*Track "
"Changes* de Microsoft Word](https://support.office.com/en-us/article/Track-"
"changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), el [historial de "
"versiones de Google](https://support.google.com/docs/answer/190843?hl=en) o "
"la [grabación y visualización de cambios de LibreOffice](https://help."
"libreoffice.org/Common/Recording_and_Displaying_Changes)."

#: git-novice/_episodes/01-basics.md:30
msgid ""
"Version control systems start with a base version of the document and\n"
"then record changes you make each step of the way. You can\n"
"think of it as a recording of your progress: you can rewind to start at the "
"base\n"
"document and play back each change you made, eventually arriving at your\n"
"more recent version."
msgstr ""
"Los sistemas de control de versiones comienzan con una versión básica del "
"documento y \n"
"luego van guardando sólo los cambios que se hicieron en cada paso del "
"proceso. Se puede \n"
"pensar en ello como en una cinta: si se rebobina la cinta y se inicia de "
"nuevo en el documento \n"
"base, se puede reproducir cada cambio y terminar con la versión más reciente."

#: git-novice/_episodes/01-basics.md:36
#: git-novice/_locale/es/_episodes/01-basics.md:33
msgid "![Changes Are Saved Sequentially](../fig/play-changes.svg)"
msgstr ""

#: git-novice/_episodes/01-basics.md:38
msgid ""
"Once you think of changes as separate from the document itself, you\n"
"can then think about \"playing back\" different sets of changes on the base "
"document, ultimately\n"
"resulting in different versions of that document. For example, two users can "
"make independent\n"
"sets of changes on the same document. "
msgstr ""
"Una vez que piensas en los cambios como separados del documento en sí, "
"entonces se puede pensar en \"deshacer\" diferentes conjuntos de cambios en "
"el documento base y obtener así diferentes versiones del documento. Por "
"ejemplo, dos usuarios pueden hacer conjuntos independientes de cambios "
"basados en el mismo documento."

#: git-novice/_episodes/01-basics.md:43
#: git-novice/_locale/es/_episodes/01-basics.md:37
msgid "![Different Versions Can be Saved](../fig/versions.svg)"
msgstr ""

#: git-novice/_episodes/01-basics.md:45
msgid ""
"Unless there are conflicts, you can even incorporate two sets of changes "
"into the same base document."
msgstr ""
"A menos que haya conflictos, se puede incluso tener dos conjuntos de cambios "
"en el mismo documento base."

#: git-novice/_episodes/01-basics.md:47
#: git-novice/_locale/es/_episodes/01-basics.md:41
msgid "![Multiple Versions Can be Merged](../fig/merge.svg)"
msgstr ""

#: git-novice/_episodes/01-basics.md:49
msgid ""
"A version control system is a tool that keeps track of these changes for "
"us,\n"
"effectively creating different versions of our files. It allows us to\n"
"decide which changes will be made to the next version (each record of these "
"changes is called a\n"
"[commit]({{ page.root }}/reference#commit)), and keeps useful metadata about "
"them. The\n"
"complete history of commits for a particular project and their metadata make "
"up\n"
"a [repository]({{ page.root }}/reference#repository). Repositories can be "
"kept in sync\n"
"across different computers, facilitating collaboration among different "
"people."
msgstr ""
"Un sistema de control de versiones es una herramienta que realiza un "
"seguimiento de estos cambios para nosotros y\n"
"nos ayuda a controlar la versión y fusionar nuestros archivos. Nos permite\n"
"decidir qué cambios conforman la siguiente versión, a lo que llamamos hacer "
"un\n"
"[**commit**]({{ page.root }}/reference/#commit), y mantiene metadatos útiles "
"sobre dichos cambios. El\n"
"historial completo de **commits** para un proyecto en particular y sus "
"metadatos forman un\n"
"[repositorio]({{ page.root }}/reference/#repository). Los repositorios "
"pueden mantenerse sincronizados\n"
"en diferentes computadoras, facilitando así la colaboración entre diferentes "
"personas."

# blockquote, which can be cascaded
#: git-novice/_episodes/01-basics.md:57
msgid "> ## The Long History of Version Control Systems"
msgstr "> ## La larga historia de los sistemas de control de versiones "

#: git-novice/_episodes/01-basics.md:58
msgid ""
">\n"
"> Automated version control systems are nothing new.\n"
"> Tools like RCS, CVS, or Subversion have been around since the early 1980s "
"and are used by many large companies.\n"
"> However, many of these are now considered legacy systems (i.e., outdated) "
"due to various limitations in their capabilities.\n"
"> More modern systems, such as Git and [Mercurial](https://swcarpentry."
"github.io/hg-novice/),\n"
"> are *distributed*, meaning that they do not need a centralized server to "
"host the repository.\n"
"> These modern systems also include powerful merging tools that make it "
"possible for multiple authors to work on\n"
"> the same files concurrently."
msgstr ""
">\n"
"> Los sistemas automatizados de control de versiones no son nada nuevo.\n"
"> Herramientas como RCS, CVS o Subversion han existido desde principios de "
"los 1980  y son utilizadas por muchas grandes empresas.\n"
"> Sin embargo, muchos de estos han sido relegados debido a lo limitado de su "
"capacidad.\n"
"> En particular, los sistemas más modernos, como Git y [Mercurial](http://"
"swcarpentry.github.io/hg-novice/) \n"
"> son *distribuidos*, lo que significa que no necesitan un servidor "
"centralizado para alojar el repositorio. \n"
"> Estos sistemas modernos también incluyen potentes herramientas de fusión "
"que hacen posible que múltiples autores trabajen dentro de \n"
"> los mismos archivos simultáneamente."

# SC/DC Template label
#: git-novice/_episodes/01-basics.md:66 git-novice/_episodes/02-setup.md:70
#: git-novice/_episodes/02-setup.md:100 git-novice/_episodes/02-setup.md:134
#: git-novice/_episodes/02-setup.md:145 git-novice/_episodes/04-changes.md:208
#: git-novice/_episodes/04-changes.md:360
#: git-novice/_episodes/04-changes.md:499
#: git-novice/_episodes/04-changes.md:514
#: git-novice/_episodes/04-changes.md:564
#: git-novice/_episodes/04-changes.md:596
#: git-novice/_episodes/05-history.md:291
#: git-novice/_episodes/05-history.md:324 git-novice/_episodes/07-github.md:76
#: git-novice/_episodes/07-github.md:147 git-novice/_episodes/07-github.md:170
#: git-novice/_episodes/07-github.md:183 git-novice/_episodes/08-collab.md:26
#: git-novice/_episodes/08-collab.md:143 git-novice/_episodes/10-open.md:101
#: git-novice/_episodes/13-hosting.md:67
#: git-novice/_episodes/14-supplemental-rstudio.md:44
#: git-novice/_episodes/14-supplemental-rstudio.md:90
#: git-novice/_episodes/14-supplemental-rstudio.md:108
#: git-novice/_extras/discuss.md:115
#: git-novice/_locale/es/_episodes/01-basics.md:60
#: git-novice/_locale/es/_episodes/02-setup.md:70
#: git-novice/_locale/es/_episodes/02-setup.md:98
#: git-novice/_locale/es/_episodes/02-setup.md:130
#: git-novice/_locale/es/_episodes/02-setup.md:141
#: git-novice/_locale/es/_episodes/04-changes.md:206
#: git-novice/_locale/es/_episodes/04-changes.md:357
#: git-novice/_locale/es/_episodes/04-changes.md:496
#: git-novice/_locale/es/_episodes/04-changes.md:509
#: git-novice/_locale/es/_episodes/04-changes.md:559
#: git-novice/_locale/es/_episodes/04-changes.md:592
#: git-novice/_locale/es/_episodes/05-history.md:288
#: git-novice/_locale/es/_episodes/05-history.md:321
#: git-novice/_locale/es/_episodes/07-github.md:61
#: git-novice/_locale/es/_episodes/07-github.md:128
#: git-novice/_locale/es/_episodes/07-github.md:151
#: git-novice/_locale/es/_episodes/07-github.md:164
#: git-novice/_locale/es/_episodes/08-collab.md:20
#: git-novice/_locale/es/_episodes/08-collab.md:123
#: git-novice/_locale/es/_episodes/10-open.md:57
#: git-novice/_locale/es/_episodes/13-hosting.md:70
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:36
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:76
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:92
#: git-novice/_locale/es/_extras/discuss.md:115
msgid "{: .callout}"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/01-basics.md:68
msgid "> ## Paper Writing"
msgstr "> ## ¿Qué harías en las siguientes situaciones?"

#: git-novice/_episodes/01-basics.md:69
msgid ""
">\n"
"> *   Imagine you drafted an excellent paragraph for a paper you are "
"writing, but later ruin it. How would you retrieve\n"
">     the *excellent* version of your conclusion? Is it even possible?\n"
">\n"
"> *   Imagine you have 5 co-authors. How would you manage the changes and "
"comments they make to your paper?\n"
">     If you use LibreOffice Writer or Microsoft Word, what happens if you "
"accept changes made using the\n"
">     `Track Changes` option? Do you have a history of those changes?"
msgstr ""
">\n"
"> * Imagina que has redactado un excelente párrafo para un artículo que "
"estás escribiendo, pero más tarde lo estropeas. ¿Cómo recuperarías \n"
">   aquella *excelente* versión de la conclusión? ¿Es esto posible?\n"
">\n"
"> * Imagina que tienes 5 coautores. ¿Cómo administrarías los cambios y "
"comentarios que ellos hagan en el artículo? \n"
">   Si usas LibreOffice Writer o Microsoft Word, ¿qué sucede si aceptas los "
"cambios realizados con la opción \n"
">   `Track Changes`? ¿Tienes un historial de esos cambios? "

# SC/DC Template label
#: git-novice/_episodes/01-basics.md:76 git-novice/_episodes/03-create.md:127
#: git-novice/_episodes/03-create.md:148 git-novice/_episodes/04-changes.md:619
#: git-novice/_episodes/04-changes.md:643
#: git-novice/_episodes/04-changes.md:703
#: git-novice/_episodes/04-changes.md:757
#: git-novice/_episodes/04-changes.md:818
#: git-novice/_episodes/05-history.md:354
#: git-novice/_episodes/05-history.md:377
#: git-novice/_episodes/05-history.md:430
#: git-novice/_episodes/05-history.md:440
#: git-novice/_episodes/05-history.md:448
#: git-novice/_episodes/05-history.md:487 git-novice/_episodes/06-ignore.md:175
#: git-novice/_episodes/06-ignore.md:195 git-novice/_episodes/06-ignore.md:218
#: git-novice/_episodes/06-ignore.md:239 git-novice/_episodes/06-ignore.md:259
#: git-novice/_episodes/07-github.md:218 git-novice/_episodes/07-github.md:231
#: git-novice/_episodes/07-github.md:241 git-novice/_episodes/07-github.md:263
#: git-novice/_episodes/07-github.md:274 git-novice/_episodes/08-collab.md:148
#: git-novice/_episodes/08-collab.md:171 git-novice/_episodes/08-collab.md:182
#: git-novice/_episodes/08-collab.md:189
#: git-novice/_episodes/09-conflict.md:325
#: git-novice/_episodes/09-conflict.md:495
#: git-novice/_episodes/09-conflict.md:537 git-novice/_episodes/10-open.md:109
#: git-novice/_episodes/10-open.md:121 git-novice/_episodes/11-licensing.md:65
#: git-novice/_episodes/11-licensing.md:78
#: git-novice/_episodes/13-hosting.md:75 git-novice/_episodes/13-hosting.md:82
#: git-novice/_episodes/14-supplemental-rstudio.md:127
#: git-novice/_locale/es/_episodes/01-basics.md:70
#: git-novice/_locale/es/_episodes/03-create.md:122
#: git-novice/_locale/es/_episodes/03-create.md:143
#: git-novice/_locale/es/_episodes/04-changes.md:615
#: git-novice/_locale/es/_episodes/04-changes.md:639
#: git-novice/_locale/es/_episodes/04-changes.md:699
#: git-novice/_locale/es/_episodes/04-changes.md:751
#: git-novice/_locale/es/_episodes/04-changes.md:812
#: git-novice/_locale/es/_episodes/05-history.md:351
#: git-novice/_locale/es/_episodes/05-history.md:374
#: git-novice/_locale/es/_episodes/05-history.md:427
#: git-novice/_locale/es/_episodes/05-history.md:436
#: git-novice/_locale/es/_episodes/05-history.md:444
#: git-novice/_locale/es/_episodes/05-history.md:484
#: git-novice/_locale/es/_episodes/06-ignore.md:175
#: git-novice/_locale/es/_episodes/06-ignore.md:194
#: git-novice/_locale/es/_episodes/06-ignore.md:218
#: git-novice/_locale/es/_episodes/06-ignore.md:239
#: git-novice/_locale/es/_episodes/06-ignore.md:258
#: git-novice/_locale/es/_episodes/07-github.md:197
#: git-novice/_locale/es/_episodes/07-github.md:210
#: git-novice/_locale/es/_episodes/07-github.md:220
#: git-novice/_locale/es/_episodes/07-github.md:242
#: git-novice/_locale/es/_episodes/07-github.md:253
#: git-novice/_locale/es/_episodes/08-collab.md:128
#: git-novice/_locale/es/_episodes/08-collab.md:138
#: git-novice/_locale/es/_episodes/08-collab.md:147
#: git-novice/_locale/es/_episodes/08-collab.md:151
#: git-novice/_locale/es/_episodes/09-conflict.md:319
#: git-novice/_locale/es/_episodes/09-conflict.md:487
#: git-novice/_locale/es/_episodes/09-conflict.md:530
#: git-novice/_locale/es/_episodes/10-open.md:65
#: git-novice/_locale/es/_episodes/10-open.md:70
#: git-novice/_locale/es/_episodes/11-licensing.md:36
#: git-novice/_locale/es/_episodes/11-licensing.md:46
#: git-novice/_locale/es/_episodes/13-hosting.md:78
#: git-novice/_locale/es/_episodes/13-hosting.md:85
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:111
msgid "{: .challenge}"
msgstr ""

# Front Matter
#: git-novice/_episodes/02-setup.md:1
msgid ""
"---\n"
"title: Setting Up Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I get set up to use Git?\"\n"
"objectives:\n"
"- \"Configure `git` the first time it is used on a computer.\"\n"
"- \"Understand the meaning of the `--global` configuration flag.\"\n"
"keypoints:\n"
"-   \"Use `git config` with the `--global` option to configure a user name, "
"email address, editor, and other preferences once per machine.\"\n"
"---"
msgstr ""
"---\n"
"title: Configurando Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo me preparo para utilizar Git?\"\n"
"objectives:\n"
"- \"Configurar `git` la primera vez que utilice la computadora.\"\n"
"- \"Comprender el significado del flag de configuración `--global`.\"\n"
"keypoints:\n"
"-   \"Use `git config` para configurar un nombre de usuario, email, editor, "
"y otras preferencias.\"\n"
"---"

#: git-novice/_episodes/02-setup.md:14
msgid ""
"When we use Git on a new computer for the first time,\n"
"we need to configure a few things. Below are a few examples\n"
"of configurations we will set as we get started with Git:"
msgstr ""
"Cuando usamos Git en una computadora por primera vez, \n"
"es necesario configurar algunas cosas. A continuación se presentan algunos "
"ejemplos \n"
"de configuraciones que estableceremos a medida que trabajemos con Git:"

# unordered list
#: git-novice/_episodes/02-setup.md:18
msgid "*   our name and email address,"
msgstr "*   nombre y correo electrónico,"

# unordered list
#: git-novice/_episodes/02-setup.md:19
msgid "*   what our preferred text editor is,"
msgstr "*   cuál es nuestro editor de texto preferido,"

# unordered list
#: git-novice/_episodes/02-setup.md:20
msgid ""
"*   and that we want to use these settings globally (i.e. for every project)."
msgstr ""
"*   y que queremos utilizar estos ajustes globalmente (es decir, para cada "
"proyecto)."

#: git-novice/_episodes/02-setup.md:22
msgid ""
"On a command line, Git commands are written as `git verb`,\n"
"where `verb` is what we actually want to do. So here is how\n"
"Dracula sets up his new laptop:"
msgstr ""
"En la línea de comandos, los comandos de Git se escriben como `git verb`, \n"
"donde` verb` es lo que queremos hacer. Así es como \n"
"Drácula configura su nueva computadora:"

# code block
#: git-novice/_episodes/02-setup.md:26
#: git-novice/_locale/es/_episodes/02-setup.md:26
msgid ""
"~~~\n"
"$ git config --global user.name \"Vlad Dracula\"\n"
"$ git config --global user.email \"vlad@tran.sylvan.ia\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --global user.name \"Vlad Dracula\"\n"
"$ git config --global user.email \"vlad@tran.sylvan.ia\"\n"
"~~~"

#: git-novice/_episodes/02-setup.md:30 git-novice/_episodes/02-setup.md:110
#: git-novice/_episodes/03-create.md:24 git-novice/_episodes/03-create.md:32
#: git-novice/_episodes/03-create.md:40 git-novice/_episodes/03-create.md:48
#: git-novice/_episodes/03-create.md:66 git-novice/_episodes/04-changes.md:27
#: git-novice/_episodes/04-changes.md:34 git-novice/_episodes/04-changes.md:47
#: git-novice/_episodes/04-changes.md:60 git-novice/_episodes/04-changes.md:70
#: git-novice/_episodes/04-changes.md:83 git-novice/_episodes/04-changes.md:105
#: git-novice/_episodes/04-changes.md:112
#: git-novice/_episodes/04-changes.md:135
#: git-novice/_episodes/04-changes.md:166
#: git-novice/_episodes/04-changes.md:181
#: git-novice/_episodes/04-changes.md:218
#: git-novice/_episodes/04-changes.md:232
#: git-novice/_episodes/04-changes.md:260
#: git-novice/_episodes/04-changes.md:295
#: git-novice/_episodes/04-changes.md:317
#: git-novice/_episodes/04-changes.md:374
#: git-novice/_episodes/04-changes.md:386
#: git-novice/_episodes/04-changes.md:410
#: git-novice/_episodes/04-changes.md:422
#: git-novice/_episodes/04-changes.md:444
#: git-novice/_episodes/04-changes.md:457
#: git-novice/_episodes/04-changes.md:470 git-novice/_episodes/05-history.md:31
#: git-novice/_episodes/05-history.md:45 git-novice/_episodes/05-history.md:68
#: git-novice/_episodes/05-history.md:77 git-novice/_episodes/05-history.md:96
#: git-novice/_episodes/05-history.md:137
#: git-novice/_episodes/05-history.md:158
#: git-novice/_episodes/05-history.md:181
#: git-novice/_episodes/05-history.md:194
#: git-novice/_episodes/05-history.md:215
#: git-novice/_episodes/05-history.md:235
#: git-novice/_episodes/05-history.md:240
#: git-novice/_episodes/05-history.md:250
#: git-novice/_episodes/05-history.md:273 git-novice/_episodes/06-ignore.md:23
#: git-novice/_episodes/06-ignore.md:30 git-novice/_episodes/06-ignore.md:56
#: git-novice/_episodes/06-ignore.md:75 git-novice/_episodes/06-ignore.md:98
#: git-novice/_episodes/06-ignore.md:111 git-novice/_episodes/06-ignore.md:128
#: git-novice/_episodes/07-github.md:50 git-novice/_episodes/07-github.md:86
#: git-novice/_episodes/07-github.md:96 git-novice/_episodes/07-github.md:113
#: git-novice/_episodes/07-github.md:190 git-novice/_episodes/08-collab.md:45
#: git-novice/_episodes/08-collab.md:59 git-novice/_episodes/08-collab.md:70
#: git-novice/_episodes/08-collab.md:83 git-novice/_episodes/08-collab.md:109
#: git-novice/_episodes/09-conflict.md:29
#: git-novice/_episodes/09-conflict.md:44
#: git-novice/_episodes/09-conflict.md:60
#: git-novice/_episodes/09-conflict.md:71
#: git-novice/_episodes/09-conflict.md:92
#: git-novice/_episodes/09-conflict.md:108
#: git-novice/_episodes/09-conflict.md:121
#: git-novice/_episodes/09-conflict.md:146
#: git-novice/_episodes/09-conflict.md:167
#: git-novice/_episodes/09-conflict.md:197
#: git-novice/_episodes/09-conflict.md:215
#: git-novice/_episodes/09-conflict.md:232
#: git-novice/_episodes/09-conflict.md:244
#: git-novice/_episodes/09-conflict.md:264
#: git-novice/_episodes/09-conflict.md:285 git-novice/_extras/discuss.md:24
#: git-novice/_extras/discuss.md:48 git-novice/_extras/discuss.md:58
#: git-novice/_extras/discuss.md:65 git-novice/_extras/discuss.md:72
#: git-novice/_extras/discuss.md:91 git-novice/_extras/discuss.md:101
#: git-novice/_extras/discuss.md:149 git-novice/_extras/discuss.md:167
#: git-novice/_extras/discuss.md:183 git-novice/_extras/discuss.md:233
#: git-novice/_extras/discuss.md:242 git-novice/_extras/discuss.md:257
#: git-novice/_extras/discuss.md:277 git-novice/_extras/discuss.md:291
#: git-novice/_extras/discuss.md:299 git-novice/_extras/discuss.md:322
#: git-novice/_extras/discuss.md:340 git-novice/_extras/discuss.md:351
#: git-novice/_extras/discuss.md:359 git-novice/_extras/discuss.md:370
#: git-novice/_extras/discuss.md:386 git-novice/_extras/discuss.md:401
#: git-novice/_extras/discuss.md:409 git-novice/_extras/discuss.md:437
#: git-novice/_extras/discuss.md:457
#: git-novice/_locale/es/_episodes/02-setup.md:30
#: git-novice/_locale/es/_episodes/02-setup.md:107
#: git-novice/_locale/es/_episodes/03-create.md:22
#: git-novice/_locale/es/_episodes/03-create.md:30
#: git-novice/_locale/es/_episodes/03-create.md:38
#: git-novice/_locale/es/_episodes/03-create.md:46
#: git-novice/_locale/es/_episodes/03-create.md:62
#: git-novice/_locale/es/_episodes/04-changes.md:27
#: git-novice/_locale/es/_episodes/04-changes.md:34
#: git-novice/_locale/es/_episodes/04-changes.md:45
#: git-novice/_locale/es/_episodes/04-changes.md:58
#: git-novice/_locale/es/_episodes/04-changes.md:68
#: git-novice/_locale/es/_episodes/04-changes.md:81
#: git-novice/_locale/es/_episodes/04-changes.md:103
#: git-novice/_locale/es/_episodes/04-changes.md:110
#: git-novice/_locale/es/_episodes/04-changes.md:133
#: git-novice/_locale/es/_episodes/04-changes.md:164
#: git-novice/_locale/es/_episodes/04-changes.md:179
#: git-novice/_locale/es/_episodes/04-changes.md:216
#: git-novice/_locale/es/_episodes/04-changes.md:230
#: git-novice/_locale/es/_episodes/04-changes.md:258
#: git-novice/_locale/es/_episodes/04-changes.md:293
#: git-novice/_locale/es/_episodes/04-changes.md:315
#: git-novice/_locale/es/_episodes/04-changes.md:371
#: git-novice/_locale/es/_episodes/04-changes.md:383
#: git-novice/_locale/es/_episodes/04-changes.md:407
#: git-novice/_locale/es/_episodes/04-changes.md:419
#: git-novice/_locale/es/_episodes/04-changes.md:441
#: git-novice/_locale/es/_episodes/04-changes.md:454
#: git-novice/_locale/es/_episodes/04-changes.md:467
#: git-novice/_locale/es/_episodes/05-history.md:31
#: git-novice/_locale/es/_episodes/05-history.md:45
#: git-novice/_locale/es/_episodes/05-history.md:66
#: git-novice/_locale/es/_episodes/05-history.md:75
#: git-novice/_locale/es/_episodes/05-history.md:94
#: git-novice/_locale/es/_episodes/05-history.md:135
#: git-novice/_locale/es/_episodes/05-history.md:156
#: git-novice/_locale/es/_episodes/05-history.md:179
#: git-novice/_locale/es/_episodes/05-history.md:192
#: git-novice/_locale/es/_episodes/05-history.md:213
#: git-novice/_locale/es/_episodes/05-history.md:233
#: git-novice/_locale/es/_episodes/05-history.md:238
#: git-novice/_locale/es/_episodes/05-history.md:248
#: git-novice/_locale/es/_episodes/05-history.md:271
#: git-novice/_locale/es/_episodes/06-ignore.md:23
#: git-novice/_locale/es/_episodes/06-ignore.md:30
#: git-novice/_locale/es/_episodes/06-ignore.md:56
#: git-novice/_locale/es/_episodes/06-ignore.md:75
#: git-novice/_locale/es/_episodes/06-ignore.md:98
#: git-novice/_locale/es/_episodes/06-ignore.md:111
#: git-novice/_locale/es/_episodes/06-ignore.md:128
#: git-novice/_locale/es/_episodes/07-github.md:40
#: git-novice/_locale/es/_episodes/07-github.md:70
#: git-novice/_locale/es/_episodes/07-github.md:79
#: git-novice/_locale/es/_episodes/07-github.md:94
#: git-novice/_locale/es/_episodes/07-github.md:171
#: git-novice/_locale/es/_episodes/08-collab.md:36
#: git-novice/_locale/es/_episodes/08-collab.md:49
#: git-novice/_locale/es/_episodes/08-collab.md:60
#: git-novice/_locale/es/_episodes/08-collab.md:73
#: git-novice/_locale/es/_episodes/08-collab.md:95
#: git-novice/_locale/es/_episodes/09-conflict.md:23
#: git-novice/_locale/es/_episodes/09-conflict.md:38
#: git-novice/_locale/es/_episodes/09-conflict.md:54
#: git-novice/_locale/es/_episodes/09-conflict.md:65
#: git-novice/_locale/es/_episodes/09-conflict.md:86
#: git-novice/_locale/es/_episodes/09-conflict.md:102
#: git-novice/_locale/es/_episodes/09-conflict.md:115
#: git-novice/_locale/es/_episodes/09-conflict.md:140
#: git-novice/_locale/es/_episodes/09-conflict.md:161
#: git-novice/_locale/es/_episodes/09-conflict.md:191
#: git-novice/_locale/es/_episodes/09-conflict.md:209
#: git-novice/_locale/es/_episodes/09-conflict.md:226
#: git-novice/_locale/es/_episodes/09-conflict.md:238
#: git-novice/_locale/es/_episodes/09-conflict.md:258
#: git-novice/_locale/es/_episodes/09-conflict.md:279
#: git-novice/_locale/es/_extras/discuss.md:24
#: git-novice/_locale/es/_extras/discuss.md:48
#: git-novice/_locale/es/_extras/discuss.md:58
#: git-novice/_locale/es/_extras/discuss.md:65
#: git-novice/_locale/es/_extras/discuss.md:72
#: git-novice/_locale/es/_extras/discuss.md:91
#: git-novice/_locale/es/_extras/discuss.md:101
#: git-novice/_locale/es/_extras/discuss.md:149
#: git-novice/_locale/es/_extras/discuss.md:167
#: git-novice/_locale/es/_extras/discuss.md:183
#: git-novice/_locale/es/_extras/discuss.md:233
#: git-novice/_locale/es/_extras/discuss.md:242
#: git-novice/_locale/es/_extras/discuss.md:257
#: git-novice/_locale/es/_extras/discuss.md:277
#: git-novice/_locale/es/_extras/discuss.md:291
#: git-novice/_locale/es/_extras/discuss.md:299
#: git-novice/_locale/es/_extras/discuss.md:322
#: git-novice/_locale/es/_extras/discuss.md:340
#: git-novice/_locale/es/_extras/discuss.md:351
#: git-novice/_locale/es/_extras/discuss.md:359
#: git-novice/_locale/es/_extras/discuss.md:370
#: git-novice/_locale/es/_extras/discuss.md:386
#: git-novice/_locale/es/_extras/discuss.md:401
#: git-novice/_locale/es/_extras/discuss.md:409
#: git-novice/_locale/es/_extras/discuss.md:437
#: git-novice/_locale/es/_extras/discuss.md:457
#: git-novice/_locale/es/setup.md:16 git-novice/setup.md:17
msgid "{: .language-bash}"
msgstr ""

#: git-novice/_episodes/02-setup.md:32
msgid ""
"Please use your own name and email address instead of Dracula's. This user "
"name and email will be associated with your subsequent Git activity,\n"
"which means that any changes pushed to\n"
"[GitHub](https://github.com/),\n"
"[BitBucket](https://bitbucket.org/),\n"
"[GitLab](https://gitlab.com/) or\n"
"another Git host server\n"
"in a later lesson will include this information."
msgstr ""
"Utiliza tu propio nombre y dirección de correo electrónico en lugar de los "
"de Drácula. El nombre de usuario y el correo electrónico se asociarán con tu "
"actividad posterior de Git, \n"
"lo que significa que cualquier cambio realizado en\n"
"[GitHub] (http://github.com/), \n"
"[BitBucket] (http://bitbucket.org/), \n"
"[GitLab] (http://gitlab.com/) u\n"
"otro servidor de Git \n"
"en una lección posterior incluirá esta información."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:40
msgid "> ## Line Endings"
msgstr "> ## Finales de línea"

#: git-novice/_episodes/02-setup.md:41
msgid ""
">\n"
"> As with other keys, when you hit <kbd>Return</kbd> on your keyboard,\n"
"> your computer encodes this input as a character.\n"
"> For reasons that are long to explain, different operating systems\n"
"> use different character(s) to represent the end of a line.\n"
"> (You may also hear these referred to as newlines or line breaks.)\n"
"> Because Git uses these characters to compare files,\n"
"> it may cause unexpected issues when editing a file on different machines.\n"
">\n"
"> You can change the way Git recognizes and encodes line endings\n"
"> using the `core.autocrlf` command to `git config`.\n"
"> The following settings are recommended:\n"
">\n"
"> On macOS and Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> And on Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf true\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> You can read more about this issue \n"
"> [on this GitHub page](https://help.github.com/articles/dealing-with-line-"
"endings/)."
msgstr ""
">\n"
"> Al igual que con otras teclas, cuando haces click en la tecla 'Enter' de "
"tu teclado,\n"
"> tu computadora codifica este input como un caracter.\n"
"> Por razones que son demasiado largas para explicar aquí, diferentes "
"sistemas operativos \n"
"> usan diferentes caracteres para representar el final de una línea.\n"
"> (También son conocidas como *newlines* o *line breaks*.)\n"
"> Como Git usa éstos caracteres para comparar archivos,\n"
"> esto puede causar problemas inesperados cuando se edita un archivo en "
"máquinas diferentes. \n"
"> \n"
"> Puedes cambiar el modo en que Git reconoce y codifica finales de línea\n"
"> usando el comando `core.autocrlf` con `git config`.\n"
"> Se recomiendan las siguientes configuraciones:\n"
">\n"
"> En OS X y Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Y en Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf true\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> Puedes leer más sobre este tema \n"
"> [en esta página de GitHub](https://help.github.com/articles/dealing-with-"
"line-endings/)."

#: git-novice/_episodes/02-setup.md:72
msgid ""
"For these lessons, we will be interacting with [GitHub](https://github.com/) "
"and so the email address used should be the same as the one used when "
"setting up your GitHub account. If you are concerned about privacy, please "
"review [GitHub's instructions for keeping your email address private][git-"
"privacy]. \n"
"If you elect to use a private email address with GitHub, then use that same "
"email address for the `user.email` value, e.g. `username@users.noreply."
"github.com` replacing `username` with your GitHub one. You can change the "
"email address later on by using the `git config` command again."
msgstr ""
"Para estas lecciones, estaremos interactuando con [GitHub] (http://github."
"com/), por lo tanto la dirección de correo electrónico utilizada debe ser la "
"misma que utilizaste al configurar tu cuenta de GitHub. Si te preocupa la "
"privacidad, revisa [las instrucciones de GitHub para mantener tu dirección "
"de correo electrónico privada] [git-privacy].\n"
"Si eliges utilizar una dirección de correo electrónico privada con GitHub, "
"usa la misma dirección de correo electrónico para el valor `user.email`, por "
"ejemplo, `username@users.noreply.github.com`  reemplazando` username` con tu "
"nombre de usuario de GitHub. Puedes cambiar la dirección de correo "
"electrónico posteriormente utilizando el comando `git config` nuevamente."

#: git-novice/_episodes/02-setup.md:75
msgid "Dracula also has to set his favorite text editor, following this table:"
msgstr ""
"Drácula también tiene que establecer su editor de texto favorito, siguiendo "
"esta tabla:"

#: git-novice/_episodes/02-setup.md:77
#: git-novice/_locale/es/_episodes/02-setup.md:77
msgid ""
"| Editor             | Configuration command                            |\n"
"|:-------------------|:-------------------------------------------------|\n"
"| Atom | `$ git config --global core.editor \"atom --wait\"`|\n"
"| nano               | `$ git config --global core.editor \"nano -w\"`    |\n"
"| BBEdit (Mac, with command line tools) | `$ git config --global core.editor "
"\"bbedit -w\"`    |\n"
"| Sublime Text (Mac) | `$ git config --global core.editor \"/Applications/"
"Sublime\\ Text.app/Contents/SharedSupport/bin/subl -n -w\"` |\n"
"| Sublime Text (Win, 32-bit install) | `$ git config --global core.editor "
"\"'c:/program files (x86)/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Sublime Text (Win, 64-bit install) | `$ git config --global core.editor "
"\"'c:/program files/sublime text 3/sublime_text.exe' -w\"` |\n"
"| Notepad++ (Win, 32-bit install)    | `$ git config --global core.editor "
"\"'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -"
"nosession -noPlugin\"`|\n"
"| Notepad++ (Win, 64-bit install)    | `$ git config --global core.editor "
"\"'c:/program files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession "
"-noPlugin\"`|\n"
"| Kate (Linux)       | `$ git config --global core.editor \"kate\"`       |\n"
"| Gedit (Linux)      | `$ git config --global core.editor \"gedit --wait --"
"new-window\"`   |\n"
"| Scratch (Linux)       | `$ git config --global core.editor \"scratch-text-"
"editor\"`  |\n"
"| Emacs              | `$ git config --global core.editor \"emacs\"`   |\n"
"| Vim                | `$ git config --global core.editor \"vim\"`   |"
msgstr ""

#: git-novice/_episodes/02-setup.md:93
msgid ""
"It is possible to reconfigure the text editor for Git whenever you want to "
"change it."
msgstr ""
"Es posible reconfigurar el editor de texto para Git siempre que quieras."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:95
msgid "> ## Exiting Vim"
msgstr "> ## Saliendo de Vim"

#: git-novice/_episodes/02-setup.md:96
msgid ""
">\n"
"> Note that Vim is the default editor for many programs. If you haven't used "
"Vim before and wish to exit a session without saving\n"
"your changes, press <kbd>Esc</kbd> then type `:q!` and hit <kbd>Return</"
"kbd>.\n"
"> If you want to save your changes and quit, press <kbd>Esc</kbd> then type "
"`:wq` and hit <kbd>Return</kbd>."
msgstr ""
">\n"
">Ten en cuenta que `vim` es el editor por defecto para muchos programas, si "
"no has utilizado` vim` antes y deseas salir de una sesión, presiona la tecla "
"`Esc` y posteriormente escribe `: q!` y `Enter`."

#: git-novice/_episodes/02-setup.md:102
msgid ""
"The four commands we just ran above only need to be run once: the flag `--"
"global` tells Git\n"
"to use the settings for every project, in your user account, on this "
"computer."
msgstr ""
"Los cuatro comandos que acabamos de ejecutar sólo se tienen que ejecutar una "
"vez: la flag `--global` le dice a Git que use la configuración para cada "
"proyecto, en tu cuenta de usuario, en esta computadora."

#: git-novice/_episodes/02-setup.md:105
msgid "You can check your settings at any time:"
msgstr "Puedes comprobar tu configuración en cualquier momento:"

# code block
#: git-novice/_episodes/02-setup.md:107
#: git-novice/_locale/es/_episodes/02-setup.md:104
msgid ""
"~~~\n"
"$ git config --list\n"
"~~~"
msgstr ""
"~~~\n"
"$ git config --list\n"
"~~~"

#: git-novice/_episodes/02-setup.md:112
msgid ""
"You can change your configuration as many times as you want: just use the\n"
"same commands to choose another editor or update your email address."
msgstr ""
"Puedes cambiar la configuración tantas veces como quieras: sólo usa los "
"mismos comandos para elegir otro editor o actualizar tu correo electrónico."

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:115 git-novice/_episodes/07-github.md:127
#: git-novice/_locale/es/_episodes/02-setup.md:111
#: git-novice/_locale/es/_episodes/07-github.md:108
msgid "> ## Proxy"
msgstr ""

#: git-novice/_episodes/02-setup.md:116
msgid ""
">\n"
"> In some networks you need to use a\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). If this is the case, "
"you\n"
"> may also need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> To disable the proxy, use\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> En algunas redes es necesario usar un\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). Si este es el caso, "
"es\n"
"> posible que también necesites proporcionarle a Git el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Para deshabilitar el proxy, utiliza\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_episodes/02-setup.md:136
msgid "> ## Git Help and Manual"
msgstr "> ## Ayuda y manual de Git"

#: git-novice/_episodes/02-setup.md:137
msgid ""
">\n"
"> Always remember that if you forget a `git` command, you can access the "
"list of commands by using `-h` and access the Git manual by using `--"
"help` :\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Ten presente que si no recuerdas algún comando de  `git`, puedes acceder a "
"la lista de comandos utilizando la opción `-h` y al manual de Git con la "
"flag `--help` :\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}"

#: git-novice/_episodes/02-setup.md:147
#: git-novice/_locale/es/_episodes/02-setup.md:143
msgid ""
"[git-privacy]: https://help.github.com/articles/keeping-your-email-address-"
"private/"
msgstr ""

# Front Matter
#: git-novice/_episodes/03-create.md:1
msgid ""
"---\n"
"title: Creating a Repository\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where does Git store information?\"\n"
"objectives:\n"
"- \"Create a local Git repository.\"\n"
"keypoints:\n"
"- \"`git init` initializes a repository.\"\n"
"- \"Git stores all of its repository data in the `.git` directory.\"\n"
"---"
msgstr ""
"---\n"
"title: Creando un repositorio\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Dónde almacena Git la información?\"\n"
"objectives:\n"
"- \"Crear un repositorio local de Git.\"\n"
"keypoints:\n"
"- \"`git init` inicializa un repositorio.\"\n"
"---"

#: git-novice/_episodes/03-create.md:14
msgid ""
"Once Git is configured,\n"
"we can start using it."
msgstr ""
"Una vez que Git está configurado,\n"
"podemos comenzar a usarlo."

#: git-novice/_episodes/03-create.md:17
msgid ""
"First, let's create a directory in `Desktop` folder for our work and then "
"move into that directory:"
msgstr ""
"Vamos a crear un directorio para nuestro trabajo y nos movemos dentro de ese "
"directorio:"

# code block
#: git-novice/_episodes/03-create.md:19
msgid ""
"~~~\n"
"$ cd ~/Desktop\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"

#: git-novice/_episodes/03-create.md:26
msgid ""
"Then we tell Git to make `planets` a [repository]({{ page.root }}/"
"reference#repository)—a place where\n"
"Git can store versions of our files:"
msgstr ""
"Después le indicamos a Git hacer de `planets` un [repository]({{ page."
"root }}/reference/#repository)— un lugar donde\n"
"Git puede almacenar las versiones de nuestros archivos:"

# code block
#: git-novice/_episodes/03-create.md:29
#: git-novice/_locale/es/_episodes/03-create.md:27
msgid ""
"~~~\n"
"$ git init\n"
"~~~"
msgstr ""
"~~~\n"
"$ git init\n"
"~~~"

#: git-novice/_episodes/03-create.md:34
msgid ""
"If we use `ls` to show the directory's contents,\n"
"it appears that nothing has changed:"
msgstr ""
"Si usamos `ls` para mostrar el contenido del directorio,\n"
"parece que nada ha cambiado:"

# code block
#: git-novice/_episodes/03-create.md:37 git-novice/_episodes/04-changes.md:57
#: git-novice/_locale/es/_episodes/03-create.md:35
#: git-novice/_locale/es/_episodes/04-changes.md:55
msgid ""
"~~~\n"
"$ ls\n"
"~~~"
msgstr ""

#: git-novice/_episodes/03-create.md:42
msgid ""
"But if we add the `-a` flag to show everything,\n"
"we can see that Git has created a hidden directory within `planets` called `."
"git`:"
msgstr ""
"Pero si agregamos la flag `-a` para mostrar todo,\n"
"podemos ver que Git ha creado un directorio oculto dentro de `planets` "
"llamado `.git`:"

# code block
#: git-novice/_episodes/03-create.md:45
#: git-novice/_locale/es/_episodes/03-create.md:43
msgid ""
"~~~\n"
"$ ls -a\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/03-create.md:50
msgid ""
"~~~\n"
".\t..\t.git\n"
"~~~"
msgstr ""

# SC/DC Template label
#: git-novice/_episodes/03-create.md:53 git-novice/_episodes/03-create.md:78
#: git-novice/_episodes/04-changes.md:65 git-novice/_episodes/04-changes.md:75
#: git-novice/_episodes/04-changes.md:96 git-novice/_episodes/04-changes.md:125
#: git-novice/_episodes/04-changes.md:142
#: git-novice/_episodes/04-changes.md:172
#: git-novice/_episodes/04-changes.md:190
#: git-novice/_episodes/04-changes.md:224
#: git-novice/_episodes/04-changes.md:244
#: git-novice/_episodes/04-changes.md:271
#: git-novice/_episodes/04-changes.md:307
#: git-novice/_episodes/04-changes.md:323
#: git-novice/_episodes/04-changes.md:381
#: git-novice/_episodes/04-changes.md:398
#: git-novice/_episodes/04-changes.md:434
#: git-novice/_episodes/04-changes.md:450
#: git-novice/_episodes/04-changes.md:463
#: git-novice/_episodes/04-changes.md:491 git-novice/_episodes/05-history.md:38
#: git-novice/_episodes/05-history.md:57 git-novice/_episodes/05-history.md:89
#: git-novice/_episodes/05-history.md:113
#: git-novice/_episodes/05-history.md:149
#: git-novice/_episodes/05-history.md:170
#: git-novice/_episodes/05-history.md:186
#: git-novice/_episodes/05-history.md:206
#: git-novice/_episodes/05-history.md:222
#: git-novice/_episodes/05-history.md:245
#: git-novice/_episodes/05-history.md:264 git-novice/_episodes/06-ignore.md:43
#: git-novice/_episodes/06-ignore.md:62 git-novice/_episodes/06-ignore.md:85
#: git-novice/_episodes/06-ignore.md:104 git-novice/_episodes/06-ignore.md:118
#: git-novice/_episodes/06-ignore.md:142 git-novice/_episodes/07-github.md:102
#: git-novice/_episodes/07-github.md:125 git-novice/_episodes/07-github.md:197
#: git-novice/_episodes/08-collab.md:64 git-novice/_episodes/08-collab.md:76
#: git-novice/_episodes/08-collab.md:94 git-novice/_episodes/08-collab.md:124
#: git-novice/_episodes/09-conflict.md:36
#: git-novice/_episodes/09-conflict.md:52
#: git-novice/_episodes/09-conflict.md:66
#: git-novice/_episodes/09-conflict.md:82
#: git-novice/_episodes/09-conflict.md:100
#: git-novice/_episodes/09-conflict.md:114
#: git-novice/_episodes/09-conflict.md:132
#: git-novice/_episodes/09-conflict.md:159
#: git-novice/_episodes/09-conflict.md:179
#: git-novice/_episodes/09-conflict.md:205
#: git-novice/_episodes/09-conflict.md:227
#: git-novice/_episodes/09-conflict.md:237
#: git-novice/_episodes/09-conflict.md:255
#: git-novice/_episodes/09-conflict.md:278
#: git-novice/_episodes/09-conflict.md:293 git-novice/_extras/discuss.md:35
#: git-novice/_extras/discuss.md:157 git-novice/_extras/discuss.md:175
#: git-novice/_extras/discuss.md:190 git-novice/_extras/discuss.md:203
#: git-novice/_extras/discuss.md:248 git-novice/_extras/discuss.md:267
#: git-novice/_extras/discuss.md:311 git-novice/_extras/discuss.md:332
#: git-novice/_extras/discuss.md:380 git-novice/_extras/discuss.md:426
#: git-novice/_extras/discuss.md:447
#: git-novice/_locale/es/_episodes/03-create.md:51
#: git-novice/_locale/es/_episodes/03-create.md:73
#: git-novice/_locale/es/_episodes/04-changes.md:63
#: git-novice/_locale/es/_episodes/04-changes.md:73
#: git-novice/_locale/es/_episodes/04-changes.md:94
#: git-novice/_locale/es/_episodes/04-changes.md:123
#: git-novice/_locale/es/_episodes/04-changes.md:140
#: git-novice/_locale/es/_episodes/04-changes.md:170
#: git-novice/_locale/es/_episodes/04-changes.md:188
#: git-novice/_locale/es/_episodes/04-changes.md:222
#: git-novice/_locale/es/_episodes/04-changes.md:242
#: git-novice/_locale/es/_episodes/04-changes.md:269
#: git-novice/_locale/es/_episodes/04-changes.md:305
#: git-novice/_locale/es/_episodes/04-changes.md:321
#: git-novice/_locale/es/_episodes/04-changes.md:378
#: git-novice/_locale/es/_episodes/04-changes.md:395
#: git-novice/_locale/es/_episodes/04-changes.md:431
#: git-novice/_locale/es/_episodes/04-changes.md:447
#: git-novice/_locale/es/_episodes/04-changes.md:460
#: git-novice/_locale/es/_episodes/04-changes.md:488
#: git-novice/_locale/es/_episodes/05-history.md:38
#: git-novice/_locale/es/_episodes/05-history.md:57
#: git-novice/_locale/es/_episodes/05-history.md:87
#: git-novice/_locale/es/_episodes/05-history.md:111
#: git-novice/_locale/es/_episodes/05-history.md:147
#: git-novice/_locale/es/_episodes/05-history.md:168
#: git-novice/_locale/es/_episodes/05-history.md:184
#: git-novice/_locale/es/_episodes/05-history.md:204
#: git-novice/_locale/es/_episodes/05-history.md:220
#: git-novice/_locale/es/_episodes/05-history.md:243
#: git-novice/_locale/es/_episodes/05-history.md:262
#: git-novice/_locale/es/_episodes/06-ignore.md:43
#: git-novice/_locale/es/_episodes/06-ignore.md:62
#: git-novice/_locale/es/_episodes/06-ignore.md:85
#: git-novice/_locale/es/_episodes/06-ignore.md:104
#: git-novice/_locale/es/_episodes/06-ignore.md:118
#: git-novice/_locale/es/_episodes/06-ignore.md:142
#: git-novice/_locale/es/_episodes/07-github.md:85
#: git-novice/_locale/es/_episodes/07-github.md:106
#: git-novice/_locale/es/_episodes/07-github.md:178
#: git-novice/_locale/es/_episodes/08-collab.md:54
#: git-novice/_locale/es/_episodes/08-collab.md:66
#: git-novice/_locale/es/_episodes/08-collab.md:84
#: git-novice/_locale/es/_episodes/08-collab.md:110
#: git-novice/_locale/es/_episodes/09-conflict.md:30
#: git-novice/_locale/es/_episodes/09-conflict.md:46
#: git-novice/_locale/es/_episodes/09-conflict.md:60
#: git-novice/_locale/es/_episodes/09-conflict.md:76
#: git-novice/_locale/es/_episodes/09-conflict.md:94
#: git-novice/_locale/es/_episodes/09-conflict.md:108
#: git-novice/_locale/es/_episodes/09-conflict.md:126
#: git-novice/_locale/es/_episodes/09-conflict.md:153
#: git-novice/_locale/es/_episodes/09-conflict.md:173
#: git-novice/_locale/es/_episodes/09-conflict.md:199
#: git-novice/_locale/es/_episodes/09-conflict.md:221
#: git-novice/_locale/es/_episodes/09-conflict.md:231
#: git-novice/_locale/es/_episodes/09-conflict.md:249
#: git-novice/_locale/es/_episodes/09-conflict.md:272
#: git-novice/_locale/es/_episodes/09-conflict.md:287
#: git-novice/_locale/es/_extras/discuss.md:35
#: git-novice/_locale/es/_extras/discuss.md:157
#: git-novice/_locale/es/_extras/discuss.md:175
#: git-novice/_locale/es/_extras/discuss.md:190
#: git-novice/_locale/es/_extras/discuss.md:203
#: git-novice/_locale/es/_extras/discuss.md:248
#: git-novice/_locale/es/_extras/discuss.md:267
#: git-novice/_locale/es/_extras/discuss.md:311
#: git-novice/_locale/es/_extras/discuss.md:332
#: git-novice/_locale/es/_extras/discuss.md:380
#: git-novice/_locale/es/_extras/discuss.md:426
#: git-novice/_locale/es/_extras/discuss.md:447
msgid "{: .output}"
msgstr ""

#: git-novice/_episodes/03-create.md:55
msgid ""
"Git uses this special sub-directory to store all the information about the "
"project, \n"
"including all files and sub-directories located within the project's "
"directory.\n"
"If we ever delete the `.git` sub-directory,\n"
"we will lose the project's history."
msgstr ""
"Git utiliza este subdirectorio especial para almacenar toda la información "
"del proyecto, incluyendo todos los archivos y subdirectorios. Si alguna vez "
"borramos el directorio `.git`,\n"
"perderemos la historia del proyecto."

#: git-novice/_episodes/03-create.md:60
msgid ""
"We can check that everything is set up correctly\n"
"by asking Git to tell us the status of our project:"
msgstr ""
"Podemos revisar que todo esté configurado correctamente\n"
"pidiendo a Git que nos informe el estado de nuestro proyecto:"

# code block
#: git-novice/_episodes/03-create.md:63 git-novice/_episodes/04-changes.md:80
#: git-novice/_episodes/04-changes.md:109
#: git-novice/_episodes/04-changes.md:163
#: git-novice/_episodes/04-changes.md:229
#: git-novice/_episodes/04-changes.md:454
#: git-novice/_episodes/05-history.md:191
#: git-novice/_episodes/05-history.md:247 git-novice/_episodes/06-ignore.md:27
#: git-novice/_episodes/06-ignore.md:72
#: git-novice/_locale/es/_episodes/03-create.md:59
#: git-novice/_locale/es/_episodes/04-changes.md:78
#: git-novice/_locale/es/_episodes/04-changes.md:107
#: git-novice/_locale/es/_episodes/04-changes.md:161
#: git-novice/_locale/es/_episodes/04-changes.md:227
#: git-novice/_locale/es/_episodes/04-changes.md:451
#: git-novice/_locale/es/_episodes/05-history.md:189
#: git-novice/_locale/es/_episodes/05-history.md:245
#: git-novice/_locale/es/_episodes/06-ignore.md:27
#: git-novice/_locale/es/_episodes/06-ignore.md:72
msgid ""
"~~~\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_episodes/03-create.md:68
msgid ""
"If you are using a different version of `git`, the exact\n"
"wording of the output might be slightly different."
msgstr ""
"Si estás utilizando una versión de git distinta a la que yo utilizo, el "
"output puede ser ligeramente distinto. "

# code block
#: git-novice/_episodes/03-create.md:71
#: git-novice/_locale/es/_episodes/03-create.md:66
msgid ""
"~~~\n"
"# On branch master\n"
"#\n"
"# Initial commit\n"
"#\n"
"nothing to commit (create/copy files and use \"git add\" to track)\n"
"~~~"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:80
msgid "> ## Places to Create Git Repositories"
msgstr "> ## Lugares para crear un repositorio Git"

#: git-novice/_episodes/03-create.md:81
msgid ""
">\n"
"> Along with tracking information about planets (the project we have already "
"created), \n"
"> Dracula would also like to track information about moons.\n"
"> Despite Wolfman's concerns, Dracula creates a `moons` project inside his "
"`planets` \n"
"> project with the following sequence of commands:\n"
">\n"
"> ~~~\n"
"> $ cd ~/Desktop   # return to Desktop directory\n"
"> $ cd planets     # go into planets directory, which is already a Git "
"repository\n"
"> $ ls -a          # ensure the .git sub-directory is still present in the "
"planets directory\n"
"> $ mkdir moons    # make a sub-directory planets/moons\n"
"> $ cd moons       # go into moons sub-directory\n"
"> $ git init       # make the moons sub-directory a Git repository\n"
"> $ ls -a          # ensure the .git sub-directory is present indicating we "
"have created a new Git repository\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Is the `git init` command, run inside the `moons` sub-directory, required "
"for \n"
"> tracking files stored in the `moons` sub-directory?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > No. Dracula does not need to make the `moons` sub-directory a Git "
"repository \n"
"> > because the `planets` repository will track all files, sub-directories, "
"and \n"
"> > sub-directory files under the `planets` directory.  Thus, in order to "
"track \n"
"> > all information about moons, Dracula only needed to add the `moons` sub-"
"directory\n"
"> > to the `planets` directory.\n"
"> > \n"
"> > Additionally, Git repositories can interfere with each other if they are "
"\"nested\":\n"
"> > the outer repository will try to version-control\n"
"> > the inner repository. Therefore, it's best to create each new Git\n"
"> > repository in a separate directory. To be sure that there is no "
"conflicting\n"
"> > repository in the directory, check the output of `git status`. If it "
"looks\n"
"> > like the following, you are good to go to create a new repository as "
"shown\n"
"> > above:\n"
"> >\n"
"> > ~~~\n"
"> > $ git status\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > fatal: Not a git repository (or any of the parent directories): .git\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

# SC/DC Template label
#: git-novice/_episodes/03-create.md:126 git-novice/_episodes/03-create.md:147
#: git-novice/_episodes/04-changes.md:618
#: git-novice/_episodes/04-changes.md:642
#: git-novice/_episodes/04-changes.md:702
#: git-novice/_episodes/04-changes.md:756
#: git-novice/_episodes/04-changes.md:817
#: git-novice/_episodes/05-history.md:429 git-novice/_episodes/06-ignore.md:174
#: git-novice/_episodes/06-ignore.md:194 git-novice/_episodes/06-ignore.md:217
#: git-novice/_episodes/06-ignore.md:238 git-novice/_episodes/06-ignore.md:258
#: git-novice/_episodes/07-github.md:217 git-novice/_episodes/07-github.md:230
#: git-novice/_episodes/07-github.md:240 git-novice/_episodes/07-github.md:262
#: git-novice/_episodes/07-github.md:273 git-novice/_episodes/08-collab.md:170
#: git-novice/_episodes/09-conflict.md:494
#: git-novice/_episodes/09-conflict.md:536
#: git-novice/_episodes/14-supplemental-rstudio.md:126
#: git-novice/_locale/es/_episodes/03-create.md:76
#: git-novice/_locale/es/_episodes/03-create.md:121
#: git-novice/_locale/es/_episodes/03-create.md:142
#: git-novice/_locale/es/_episodes/04-changes.md:614
#: git-novice/_locale/es/_episodes/04-changes.md:638
#: git-novice/_locale/es/_episodes/04-changes.md:698
#: git-novice/_locale/es/_episodes/04-changes.md:750
#: git-novice/_locale/es/_episodes/04-changes.md:811
#: git-novice/_locale/es/_episodes/05-history.md:426
#: git-novice/_locale/es/_episodes/06-ignore.md:174
#: git-novice/_locale/es/_episodes/06-ignore.md:193
#: git-novice/_locale/es/_episodes/06-ignore.md:217
#: git-novice/_locale/es/_episodes/06-ignore.md:238
#: git-novice/_locale/es/_episodes/06-ignore.md:257
#: git-novice/_locale/es/_episodes/07-github.md:196
#: git-novice/_locale/es/_episodes/07-github.md:209
#: git-novice/_locale/es/_episodes/07-github.md:219
#: git-novice/_locale/es/_episodes/07-github.md:241
#: git-novice/_locale/es/_episodes/07-github.md:252
#: git-novice/_locale/es/_episodes/08-collab.md:137
#: git-novice/_locale/es/_episodes/09-conflict.md:486
#: git-novice/_locale/es/_episodes/09-conflict.md:529
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:110
msgid "> {: .solution}"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:129
msgid "> ## Correcting `git init` Mistakes"
msgstr "> ## Corrigiendo errores de `git init`"

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:130
msgid ""
"> Wolfman explains to Dracula how a nested repository is redundant and may "
"cause confusion"
msgstr ""
"> Wolfman le explica a Dracula cómo un repositorio anidado es redudante y "
"puede causar problemas ms adelante."

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:131
msgid ""
"> down the road. Dracula would like to remove the nested repository. How can "
"Dracula undo "
msgstr "> Dracula quiere eliminar el repositorio anidado."

# blockquote, which can be cascaded
#: git-novice/_episodes/03-create.md:132
msgid "> his last `git init` in the `moons` sub-directory?"
msgstr ""
"> Cómo puede Dracula deshacer el último `git init` en el sub-directorio "
"`moons`?"

#: git-novice/_episodes/03-create.md:133
msgid ""
">\n"
"> > ## Solution -- USE WITH CAUTION!\n"
"> >\n"
"> > To recover from this little mistake, Dracula can just remove the `.git`\n"
"> > folder in the moons subdirectory by running the following command from "
"inside the `planets` directory:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > But be careful! Running this command in the wrong directory, will "
"remove\n"
"> > the entire Git history of a project you might want to keep. Therefore, "
"always check your current directory using the\n"
"> > command `pwd`."
msgstr ""
">\n"
"> > ## Solución - USAR CON CUIDADO!\n"
"> >\n"
"> > Para deshacerse de este pequeño error, Dracula puede simplemente "
"eliminar el directorio `.git`\n"
"> > del subdirectorio `moons`. Para ello puede ejecutar el siguiente comando "
"desde el interior del directorio `moons`:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ¡Pero ten cuidado! Ejecutar este comando en el directorio incorrecto "
"eliminará\n"
"> > toda la historia git de un proyecto que podrías querer conservar. \n"
"> > Por lo tanto, revisa siempre tu directorio actual usando el comando "
"`pwd`."

# Front Matter
#: git-novice/_episodes/04-changes.md:1
msgid ""
"---\n"
"title: Tracking Changes\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I record changes in Git?\"\n"
"- \"How do I check the status of my version control repository?\"\n"
"- \"How do I record notes about what changes I made and why?\"\n"
"objectives:\n"
"- \"Go through the modify-add-commit cycle for one or more files.\"\n"
"- \"Explain where information is stored at each stage of that cycle.\"\n"
"- \"Distinguish between descriptive and non-descriptive commit messages.\"\n"
"keypoints:\n"
"- \"`git status` shows the status of a repository.\"\n"
"- \"Files can be stored in a project's working directory (which users see), "
"the staging area (where the next commit is being built up) and the local "
"repository (where commits are permanently recorded).\"\n"
"- \"`git add` puts files in the staging area.\"\n"
"- \"`git commit` saves the staged content as a new commit in the local "
"repository.\"\n"
"- \"Write a commit message that accurately describes your changes.\"\n"
"---"
msgstr ""
"---\n"
"title: Rastreando Cambios\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo registro cambios en Git?\"\n"
"- \"¿Cómo reviso el estatus de mi repositorio de control de versiones?\"\n"
"- \"¿Cómo registro notas acerca de los cambios que he hecho y por qué?\"\n"
"objectives:\n"
"- \"Ir a través del ciclo modificar-agregar-commit para uno o más archivos."
"\"\n"
"- \"Explicar dónde se almacena la información en cada etapa del flujo de "
"trabajo de un **commit** de Git.\"\n"
"- \"Distinguir entre mensajes descriptivos y no-descriptivos de un "
"**commit**.\"\n"
"keypoints:\n"
"- \"`git status` muestra el estatus de un repositorio.\"\n"
"- \"Los archivos pueden ser almacenados en un directorio de trabajo del "
"proyecto (el cual ven los usuarios), el **staging area** (donde el siguiente "
"**commit** está siendo construido) y el repositorio local (donde los "
"**commits** son registrados permanentemente).\"\n"
"- \"`git add` pone archivos en el **staging area**.\"\n"
"- \"`git commit` guarda el contenido del **staging area** como un nuevo "
"**commit** en el repositorio local.\"\n"
"- \"Siempre escribe un mensaje de registro cuando hagas un **commit** con "
"cambios.\"\n"
"---"

#: git-novice/_episodes/04-changes.md:21
msgid ""
"First let's make sure we're still in the right directory.\n"
"You should be in the `planets` directory."
msgstr ""
"Primero asegúrate que estamos aún en el directorio correcto.\n"
"Deberías estar en el directorio `planets`."

# code block
#: git-novice/_episodes/04-changes.md:24
#: git-novice/_locale/es/_episodes/04-changes.md:24
msgid ""
"~~~\n"
"$ pwd\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:29
msgid "If you are still in `moons`, navigate back up to `planets`"
msgstr "Si aún estás en `moons` navega de regreso a `planets`"

# code block
#: git-novice/_episodes/04-changes.md:31
#: git-novice/_locale/es/_episodes/04-changes.md:31
msgid ""
"~~~\n"
"$ cd ..\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:36
msgid ""
"Let's create a file called `mars.txt` that contains some notes\n"
"about the Red Planet's suitability as a base.\n"
"We'll use `nano` to edit the file;\n"
"you can use whatever editor you like.\n"
"In particular, this does not have to be the `core.editor` you set globally "
"earlier. \n"
"But remember, the.language-bash command to create or edit a new file will "
"depend on the editor you choose (it might not be `nano`). \n"
"For a refresher on text editors, check out [\"Which Editor?\"](https://"
"swcarpentry.github.io/shell-novice/03-create/) in [The Unix Shell](https://"
"swcarpentry.github.io/shell-novice/) lesson."
msgstr ""
"Vamos a crear un archivo llamado `mars.txt` que contiene algunas notas\n"
"sobre la aptitud del Planeta Rojo como base.\n"
"Usaremos `nano` para editar el archivo;\n"
"puedes usar el editor que prefieras.\n"
"En particular, éste no tiene que ser el `core.editor` que definiste "
"globalmente con anterioridad. Pero recuerda, los comandos **bash** para "
"crear o editar un nuevo archivo van a depender del editor que tú escojas "
"(podría no ser `nano`). Para un repaso sobre editores de texto, echa un "
"vistazo a [\"¿Qué editor usar?\"](https://swcarpentry.github.io/shell-novice-"
"es/03-create/) en la lección [La terminal de Unix](https://swcarpentry."
"github.io/shell-novice-es) ."

# code block
#: git-novice/_episodes/04-changes.md:44
#: git-novice/_locale/es/_episodes/04-changes.md:42
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:49
msgid "Type the text below into the `mars.txt` file:"
msgstr "Ingresa el texto siguiente en el archivo `mars.txt`:"

# code block
#: git-novice/_episodes/04-changes.md:51 git-novice/_episodes/04-changes.md:72
#: git-novice/_episodes/05-history.md:242 git-novice/_extras/discuss.md:154
#: git-novice/_locale/es/_episodes/04-changes.md:49
#: git-novice/_locale/es/_episodes/04-changes.md:70
#: git-novice/_locale/es/_episodes/05-history.md:240
#: git-novice/_locale/es/_extras/discuss.md:154
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:55
msgid "`mars.txt` now contains a single line, which we can see by running:"
msgstr ""
"`mars.txt` ahora contiene una sola línea, la cual podemos ver ejecutando:"

# code block
#: git-novice/_episodes/04-changes.md:62
#: git-novice/_locale/es/_episodes/04-changes.md:60
msgid ""
"~~~\n"
"mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:67 git-novice/_episodes/05-history.md:237
#: git-novice/_episodes/09-conflict.md:26
#: git-novice/_episodes/09-conflict.md:164
#: git-novice/_episodes/09-conflict.md:194
#: git-novice/_episodes/09-conflict.md:282
#: git-novice/_locale/es/_episodes/04-changes.md:65
#: git-novice/_locale/es/_episodes/05-history.md:235
#: git-novice/_locale/es/_episodes/09-conflict.md:20
#: git-novice/_locale/es/_episodes/09-conflict.md:158
#: git-novice/_locale/es/_episodes/09-conflict.md:188
#: git-novice/_locale/es/_episodes/09-conflict.md:276
msgid ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:77
msgid ""
"If we check the status of our project again,\n"
"Git tells us that it's noticed the new file:"
msgstr ""
"Si revisamos el estatus de nuestro proyecto otra vez,\n"
"Git nos dice que ha reconocido el nuevo archivo:"

# code block
#: git-novice/_episodes/04-changes.md:85
msgid ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:98
msgid ""
"The \"untracked files\" message means that there's a file in the directory\n"
"that Git isn't keeping track of.\n"
"We can tell Git to track a file using `git add`:"
msgstr ""
"El mensaje de \"untracked files\" significa que \n"
"un archivo no está siendo rastreado por Git.\n"
"Podemos poner los archivos en el **staging area** con `git add`."

# code block
#: git-novice/_episodes/04-changes.md:102
#: git-novice/_locale/es/_episodes/04-changes.md:100
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:107
msgid "and then check that the right thing happened:"
msgstr "y luego verifica que hizo lo correcto:"

# code block
#: git-novice/_episodes/04-changes.md:114
msgid ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:127
msgid ""
"Git now knows that it's supposed to keep track of `mars.txt`,\n"
"but it hasn't recorded these changes as a commit yet.\n"
"To get it to do that,\n"
"we need to run one more command:"
msgstr ""
"Git ahora sabe que tiene que seguir la pista de `mars.txt`,\n"
"pero no ha registrado los cambios con un **commit** aún.\n"
"Para que lo haga,\n"
"necesitamos ejecutar un comando más:"

# code block
#: git-novice/_episodes/04-changes.md:132
#: git-novice/_locale/es/_episodes/04-changes.md:130
msgid ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:137
#: git-novice/_locale/es/_episodes/04-changes.md:135
msgid ""
"~~~\n"
"[master (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:144
msgid ""
"When we run `git commit`,\n"
"Git takes everything we have told it to save by using `git add`\n"
"and stores a copy permanently inside the special `.git` directory.\n"
"This permanent copy is called a [commit]({{ page.root }}/reference#commit)\n"
"(or [revision]({{ page.root }}/reference#revision)) and its short identifier "
"is `f22b25e`.\n"
"Your commit may have another identifier."
msgstr ""
"Cuando ejecutamos `git commit`,\n"
"Git toma todo lo que le hemos dicho que salve usando `git add`\n"
"y almacena una copia permanentemente dentro del directorio especial `.git`.\n"
"Esta copia permanente es llamada un [commit]({{ page.root }}/reference/"
"#commit)\n"
"(o [revision]({{ page.root }}/reference/#revision)) y su identificador corto "
"es  `f22b25e`\n"
"(Tu **commit** podría tener otro identificador.)"

#: git-novice/_episodes/04-changes.md:151
msgid ""
"We use the `-m` flag (for \"message\")\n"
"to record a short, descriptive, and specific comment that will help us "
"remember later on what we did and why.\n"
"If we just run `git commit` without the `-m` option,\n"
"Git will launch `nano` (or whatever other editor we configured as `core."
"editor`)\n"
"so that we can write a longer message."
msgstr ""
"Usamos la **flag** `-m` (por \"message\")\n"
"para registrar un comentario corto, descriptivo y específico que nos ayudará "
"a recordar más tarde lo que hicimos y por qué.\n"
"Si ejecutamos `git commit` sin  la opción `-m`,\n"
"Git ejecutará `nano` (o cualquier otro editor que hayamos configurado como "
"`core.editor`)\n"
"para que podamos escribir un mensaje más largo."

#: git-novice/_episodes/04-changes.md:157
msgid ""
"[Good commit messages][commit-messages] start with a brief (<50 characters) "
"statement about the\n"
"changes made in the commit. Generally, the message should complete the "
"sentence \"If applied, this commit will\" <commit message here>.\n"
"If you want to go into more detail, add a blank line between the summary "
"line and your additional notes. Use this additional space to explain why you "
"made changes and/or what their impact will be."
msgstr ""
"[Los Buenos mensajes en un **commit**][commit-messages] inician con un breve "
"resumen (<50 caracteres) de los\n"
"cambios hechos en el **commit**.  Si quieres entrar en más detalles, agrega\n"
"una línea blanca entre la línea del resumen y tus notas adicionales."

#: git-novice/_episodes/04-changes.md:161
msgid "If we run `git status` now:"
msgstr "Si ejecutamos `git status` ahora:"

# code block
#: git-novice/_episodes/04-changes.md:168
#: git-novice/_episodes/04-changes.md:459 git-novice/_extras/discuss.md:244
#: git-novice/_locale/es/_episodes/04-changes.md:166
#: git-novice/_locale/es/_episodes/04-changes.md:456
#: git-novice/_locale/es/_extras/discuss.md:244
msgid ""
"~~~\n"
"On branch master\n"
"nothing to commit, working directory clean\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:174
msgid ""
"it tells us everything is up to date.\n"
"If we want to know what we've done recently,\n"
"we can ask Git to show us the project's history using `git log`:"
msgstr ""
"nos dice que todo está actualizado.\n"
"Si queremos saber lo que hemos hecho recientemente,\n"
"podemos pedir a Git  que nos muestre la historia del proyecto usando `git "
"log`:"

# code block
#: git-novice/_episodes/04-changes.md:178
#: git-novice/_episodes/04-changes.md:467
#: git-novice/_locale/es/_episodes/04-changes.md:176
#: git-novice/_locale/es/_episodes/04-changes.md:464
msgid ""
"~~~\n"
"$ git log\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:183
#: git-novice/_locale/es/_episodes/04-changes.md:181
msgid ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:192
msgid ""
"`git log` lists all commits  made to a repository in reverse chronological "
"order.\n"
"The listing for each commit includes\n"
"the commit's full identifier\n"
"(which starts with the same characters as\n"
"the short identifier printed by the `git commit` command earlier),\n"
"the commit's author,\n"
"when it was created,\n"
"and the log message Git was given when the commit was created."
msgstr ""
"`git log`  lista todos los **commits** hechos a un repositorio en orden "
"cronológico inverso.\n"
"El listado de cada **commit** incluye\n"
"el identificador completo del **commit**\n"
"(el cual comienza con el mismo caracter que\n"
"el identificador corto que imprime el comando `git commit` anterior),\n"
"el autor del **commit**,\n"
"cuándo fue creado,\n"
"y el mensaje de registro que se le dio a Git cuando el **commit** fue creado."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:201
msgid "> ## Where Are My Changes?"
msgstr "> ## ¿Dónde están mis cambios?"

#: git-novice/_episodes/04-changes.md:202
msgid ""
">\n"
"> If we run `ls` at this point, we will still see just one file called `mars."
"txt`.\n"
"> That's because Git saves information about files' history\n"
"> in the special `.git` directory mentioned earlier\n"
"> so that our filesystem doesn't become cluttered\n"
"> (and so that we can't accidentally edit or delete an old version)."
msgstr ""
">\n"
"> Si ejecutamos `ls` en este punto, aún veremos un solo archivo llamado "
"`mars.txt`.\n"
"> Esto es porque Git guarda información acerca de la historia de los "
"archivos\n"
"> en el directorio especial `.git` mencionado antes\n"
">para que nuestro sistema de archivos no se abarrote\n"
"> (y para que no podamos editar o borrar accidentalmente una versión "
"anterior)."

#: git-novice/_episodes/04-changes.md:210
msgid ""
"Now suppose Dracula adds more information to the file.\n"
"(Again, we'll edit with `nano` and then `cat` the file to show its "
"contents;\n"
"you may use a different editor, and don't need to `cat`.)"
msgstr ""
"Ahora supón que Dracula agrega más información al archivo.\n"
"(Otra vez, editaremos con `nano` y luego con `cat` mostraremos el contenido "
"del archivo;\n"
"podrías usar un editor diferente y no necesitar `cat`.)"

# code block
#: git-novice/_episodes/04-changes.md:214
#: git-novice/_episodes/04-changes.md:370 git-novice/_episodes/05-history.md:27
#: git-novice/_episodes/05-history.md:177
#: git-novice/_episodes/09-conflict.md:40
#: git-novice/_episodes/09-conflict.md:88
#: git-novice/_locale/es/_episodes/04-changes.md:212
#: git-novice/_locale/es/_episodes/04-changes.md:367
#: git-novice/_locale/es/_episodes/05-history.md:27
#: git-novice/_locale/es/_episodes/05-history.md:175
#: git-novice/_locale/es/_episodes/09-conflict.md:34
#: git-novice/_locale/es/_episodes/09-conflict.md:82
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:220 git-novice/_extras/discuss.md:171
#: git-novice/_locale/es/_episodes/04-changes.md:218
#: git-novice/_locale/es/_extras/discuss.md:171
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:226
msgid ""
"When we run `git status` now,\n"
"it tells us that a file it already knows about has been modified:"
msgstr ""
"Cuando ejecutamos `git status` ahora\n"
"nos dice que un archivo ya sabe que ha sido modificado:"

# code block
#: git-novice/_episodes/04-changes.md:234
#: git-novice/_episodes/04-changes.md:297
#: git-novice/_episodes/05-history.md:196
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:246
msgid ""
"The last line is the key phrase:\n"
"\"no changes added to commit\".\n"
"We have changed this file,\n"
"but we haven't told Git we will want to save those changes\n"
"(which we do with `git add`)\n"
"nor have we saved them (which we do with `git commit`).\n"
"So let's do that now. It is good practice to always review\n"
"our changes before saving them. We do this using `git diff`.\n"
"This shows us the differences between the current state\n"
"of the file and the most recently saved version:"
msgstr ""
"La última línea es la frase clave:\n"
"\"no changes added to commit\".\n"
"Hemos cambiado este archivo,\n"
"pero no le hemos dicho a Git que queremos que guarde los cambios\n"
"(lo cual hacemos con `git add`)\n"
"ni los hemos guardado (lo cual hacemos con `git commit`).\n"
"Así que hagamos eso ahora. Es una buena práctica revisar siempre\n"
"nuestros cambios antes de guardarlos. Hacemos esto usando `git diff`.\n"
"Esto nos muestra las diferencias entre el estado actual\n"
"del archivo y la versión guardada más reciente:"

# code block
#: git-novice/_episodes/04-changes.md:257
#: git-novice/_episodes/04-changes.md:383 git-novice/_extras/discuss.md:180
#: git-novice/_locale/es/_episodes/04-changes.md:255
#: git-novice/_locale/es/_episodes/04-changes.md:380
#: git-novice/_locale/es/_extras/discuss.md:180
msgid ""
"~~~\n"
"$ git diff\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:262 git-novice/_extras/discuss.md:194
#: git-novice/_locale/es/_episodes/04-changes.md:260
#: git-novice/_locale/es/_extras/discuss.md:194
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:273
msgid ""
"The output is cryptic because\n"
"it is actually a series of commands for tools like editors and `patch`\n"
"telling them how to reconstruct one file given the other.\n"
"If we break it down into pieces:"
msgstr ""
"La salida es críptica porque \n"
"en realidad es una serie de comandos para herramientas como editores y "
"`patch`\n"
"que les dice cómo reconstruir un archivo a partir del otro.\n"
"Si lo dividimos en secciones:"

# ordered list
#: git-novice/_episodes/04-changes.md:278
msgid ""
"1.  The first line tells us that Git is producing output similar to the Unix "
"`diff` command"
msgstr ""
"1.  La primera línea nos dice que Git está produciendo un **output** similar "
"al del comando Unix `diff`"

#: git-novice/_episodes/04-changes.md:279
msgid ""
"    comparing the old and new versions of the file.\n"
"2.  The second line tells exactly which versions of the file\n"
"    Git is comparing;\n"
"    `df0654a` and `315bf3a` are unique computer-generated labels for those "
"versions.\n"
"3.  The third and fourth lines once again show the name of the file being "
"changed.\n"
"4.  The remaining lines are the most interesting, they show us the actual "
"differences\n"
"    and the lines on which they occur.\n"
"    In particular,\n"
"    the `+` marker in the first column shows where we added a line."
msgstr ""
"    comparando las versiones anterior y nueva del archivo.\n"
"2.  La segunda línea dice exactamente qué versiones del archivo\n"
"    está comparando Git;\n"
"    `df0654a` y `315bf3a` son etiquetas únicas generadas por computadora "
"para esas versiones.\n"
"3.  Las líneas tercera y cuarta muestran una vez más el nombre del archivo "
"que se está cambiando.\n"
"4.  Las líneas restantes son las más interesantes, ellas nos muestran las "
"diferencias en cuestión\n"
"    y las líneas donde ellas ocurren.\n"
"    En particular,\n"
"    el marcador `+` en la primera columna muestra dónde agregamos una línea."

#: git-novice/_episodes/04-changes.md:289
msgid "After reviewing our change, it's time to commit it:"
msgstr ""
"Después de revisar nuestro cambio, es tiempo de hacer un **commit** de eso:"

# code block
#: git-novice/_episodes/04-changes.md:291
#: git-novice/_locale/es/_episodes/04-changes.md:289
msgid ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:309
msgid ""
"Whoops:\n"
"Git won't commit because we didn't use `git add` first.\n"
"Let's fix that:"
msgstr ""
"¡Vaya!:\n"
"Git no hará **commit** porque no usamos `git add` primero.\n"
"Arreglemos esto:"

# code block
#: git-novice/_episodes/04-changes.md:313
#: git-novice/_locale/es/_episodes/04-changes.md:311
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:319
#: git-novice/_locale/es/_episodes/04-changes.md:317
msgid ""
"~~~\n"
"[master 34961b1] Add concerns about effects of Mars' moons on Wolfman\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:325
msgid ""
"Git insists that we add files to the set we want to commit\n"
"before actually committing anything. This allows us to commit our\n"
"changes in stages and capture changes in logical portions rather than\n"
"only large batches.\n"
"For example,\n"
"suppose we're adding a few citations to relevant research to our thesis.\n"
"We might want to commit those additions,\n"
"and the corresponding bibliography entries,\n"
"but *not* commit some of our work drafting the conclusion\n"
"(which we haven't finished yet)."
msgstr ""
"Git insiste en que agreguemos archivos al conjunto de cambios que queremos "
"hacer\n"
"antes de hacer **commit** de alguna cosa. Esto permite hacer **commit** de "
"nuestros\n"
"cambios en etapas y capturarlos en porciones lógicas en lugar de\n"
"solo lotes grandes.\n"
"Por ejemplo,\n"
"supongamos que agregamos algunas citas a una investigación relevante para "
"nuestra tesis.\n"
"Podríamos querer hacer **commit** a esas adiciones,\n"
"y su correspondiente registro bibliográfico,\n"
"pero *no* hacer **commit** del trabajo que estamos haciendo sobre la "
"conclusión\n"
"(el cual no hemos terminado aún)."

#: git-novice/_episodes/04-changes.md:336
msgid ""
"To allow for this,\n"
"Git has a special *staging area*\n"
"where it keeps track of things that have been added to\n"
"the current [changeset]({{ page.root }}/reference#changeset)\n"
"but not yet committed."
msgstr ""
"Para permitir esto,\n"
"Git tiene un *staging area* especial\n"
"donde mantiene registro de cosas que han sido agregadas al actual [changeset]"
"({{ page.root }}/reference/#changeset)\n"
"pero aún no se han vuelto **commit**."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:342
#: git-novice/_locale/es/_episodes/04-changes.md:339
msgid "> ## Staging Area"
msgstr ""

#: git-novice/_episodes/04-changes.md:343
msgid ""
">\n"
"> If you think of Git as taking snapshots of changes over the life of a "
"project,\n"
"> `git add` specifies *what* will go in a snapshot\n"
"> (putting things in the staging area),\n"
"> and `git commit` then *actually takes* the snapshot, and\n"
"> makes a permanent record of it (as a commit).\n"
"> If you don't have anything staged when you type `git commit`,\n"
"> Git will prompt you to use `git commit -a` or `git commit --all`,\n"
"> which is kind of like gathering *everyone* for the picture!\n"
"> However, it's almost always better to\n"
"> explicitly add things to the staging area, because you might\n"
"> commit changes you forgot you made. (Going back to snapshots,\n"
"> you might get the extra with incomplete makeup walking on\n"
"> the stage for the snapshot because you used `-a`!)\n"
"> Try to stage things manually,\n"
"> or you might find yourself searching for \"git undo commit\" more\n"
"> than you would like!"
msgstr ""
">\n"
"> Si piensas en Git como tomar instantáneas de cambios durante la vida de un "
"proyecto,\n"
"> `git add` especifica *qué* irá en una instantánea\n"
"> (poniendo cosas en el **staging area**),\n"
"> y `git commit` entonces *realmente toma* la instantánea, y\n"
"> genera un registro permanente de esto (como un **commit**).\n"
"> Si no tienes nada en el staging area cuando escribes  `git commit`,\n"
"> Git te pedirá que uses `git commit -a` o `git commit --all`,\n"
"> ¡Que es como reunir *a todos* para la foto!\n"
"> Sin embargo, es casi siempre mejor\n"
"> agregar explícitamente cosas al **staging area**, porque podrías\n"
"> hacer **commit** de cambios que habías olvidado. (Volviendo a las "
"instantáneas,\n"
"> podrías capturar al extra con el maquillaje incompleto caminando en el "
"escenario para la toma\n"
"> porque usaste `-a`!)\n"
"> Trata de organizar las cosas manualmente\n"
"> o podrías encontrarte buscando \"deshacer git commit\" más\n"
"> de lo que te gustaría!"

#: git-novice/_episodes/04-changes.md:362
#: git-novice/_locale/es/_episodes/04-changes.md:359
msgid "![The Git Staging Area](../fig/git-staging-area.svg)"
msgstr ""

#: git-novice/_episodes/04-changes.md:364
msgid ""
"Let's watch as our changes to a file move from our editor\n"
"to the staging area\n"
"and into long-term storage.\n"
"First,\n"
"we'll add another line to the file:"
msgstr ""
"Veamos cómo nuestros cambios a un archivo se mueven de nuestro editor\n"
"al **staging area**\n"
"y luego al almacenamiento de largo plazo.\n"
"Primero,\n"
"agregamos otra línea al archivo:"

# code block
#: git-novice/_episodes/04-changes.md:376 git-novice/_episodes/05-history.md:33
#: git-novice/_episodes/05-history.md:217
#: git-novice/_episodes/09-conflict.md:31
#: git-novice/_locale/es/_episodes/04-changes.md:373
#: git-novice/_locale/es/_episodes/05-history.md:33
#: git-novice/_locale/es/_episodes/05-history.md:215
#: git-novice/_locale/es/_episodes/09-conflict.md:25
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:388
#: git-novice/_episodes/04-changes.md:424
#: git-novice/_locale/es/_episodes/04-changes.md:385
#: git-novice/_locale/es/_episodes/04-changes.md:421
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:400
msgid ""
"So far, so good:\n"
"we've added one line to the end of the file\n"
"(shown with a `+` in the first column).\n"
"Now let's put that change in the staging area\n"
"and see what `git diff` reports:"
msgstr ""
"Hasta aquí, todo bien:\n"
"hemos agregado una línea al final del archivo\n"
"(mostrado con un `+` en la primera columna).\n"
"Ahora pongamos el cambio en el **staging area**\n"
"y veamos lo que reporta `git diff`:"

# code block
#: git-novice/_episodes/04-changes.md:406
#: git-novice/_locale/es/_episodes/04-changes.md:403
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:412
msgid ""
"There is no output:\n"
"as far as Git can tell,\n"
"there's no difference between what it's been asked to save permanently\n"
"and what's currently in the directory.\n"
"However,\n"
"if we do this:"
msgstr ""
"No hay **output**:\n"
"hasta donde Git puede decir,\n"
"no hay diferencias entre lo que se pidió guardar permanentemente\n"
"y lo que actualmente está en el directorio.\n"
"Sin embargo,\n"
"si hacemos esto:"

# code block
#: git-novice/_episodes/04-changes.md:419
#: git-novice/_locale/es/_episodes/04-changes.md:416
msgid ""
"~~~\n"
"$ git diff --staged\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:436
msgid ""
"it shows us the difference between\n"
"the last committed change\n"
"and what's in the staging area.\n"
"Let's save our changes:"
msgstr ""
"esto nos muestra la diferencia entre\n"
"el último cambio que sí hizo **commit**\n"
"y lo que está en el **staging area**.\n"
"Guardemos nuestros cambios:"

# code block
#: git-novice/_episodes/04-changes.md:441
#: git-novice/_locale/es/_episodes/04-changes.md:438
msgid ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/04-changes.md:446
#: git-novice/_locale/es/_episodes/04-changes.md:443
msgid ""
"~~~\n"
"[master 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/04-changes.md:452
msgid "check our status:"
msgstr "revisa nuestro estatus:"

#: git-novice/_episodes/04-changes.md:465
msgid "and look at the history of what we've done so far:"
msgstr "y mira en la historia lo que hemos hecho hasta aquí:"

# code block
#: git-novice/_episodes/04-changes.md:472
#: git-novice/_locale/es/_episodes/04-changes.md:469
msgid ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on Wolfman\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:493
msgid "> ## Word-based diffing"
msgstr "> ## Diferencias basadas en palabras"

#: git-novice/_episodes/04-changes.md:494
msgid ""
">\n"
"> Sometimes, e.g. in the case of the text documents a line-wise\n"
"> diff is too coarse. That is where the `--color-words` option of\n"
"> `git diff` comes in very useful as it highlights the changed\n"
"> words using colors."
msgstr ""
">\n"
"> A veces, por ejemplo en el caso de documentos de texto, un diff por "
"líneas\n"
"> es demasiado caótico. Es en ese caso donde la opción `--color-words` de\n"
"> `git diff` se vuelve muy útil ya que resalta las palabras\n"
"> modificadas usando colores."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:501
msgid "> ## Paging the Log"
msgstr "> ## Paginación del Registro"

#: git-novice/_episodes/04-changes.md:502
msgid ""
">\n"
"> When the output of `git log` is too long to fit in your screen,\n"
"> `git` uses a program to split it into pages of the size of your screen.\n"
"> When this \"pager\" is called, you will notice that the last line in your\n"
"> screen is a `:`, instead of your usual prompt.\n"
">\n"
"> *   To get out of the pager, press <kbd>Q</kbd>.\n"
"> *   To move to the next page, press <kbd>Spacebar</kbd>.\n"
"> *   To search for `some_word` in all pages,\n"
">     press <kbd>/</kbd>\n"
">     and type `some_word`.\n"
">     Navigate through matches pressing <kbd>N</kbd>."
msgstr ""
">\n"
"> Cuando el **output** de `git log` es demasiado largo para caber en tu "
"pantalla,\n"
"> `git` usa un programa para dividirlo en páginas del tamaño de tu "
"pantalla.\n"
"> Cuando este \"paginador\" es llamado, notarás que la última línea de tu\n"
"> pantalla es un `:`, en lugar de tu prompt de siempre.\n"
">\n"
"> *   Para salir del paginador, presiona `q`.\n"
"> *   Para moverte a la siguiente página, presiona la barra espaciadora.\n"
"> *   Para buscar `alguna_palabra` en todas las páginas, escribe `/"
"alguna_palabra`\n"
">     y navega entre las coincidencias presionando `n` (next)."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:516
msgid "> ## Limit Log Size"
msgstr "> ## Tamaño Límite del Registro"

#: git-novice/_episodes/04-changes.md:517
msgid ""
">\n"
"> To avoid having `git log` cover your entire terminal screen, you can limit "
"the\n"
"> number of commits that Git lists by using `-N`, where `N` is the number "
"of\n"
"> commits that you want to view. For example, if you only want information "
"from\n"
"> the last commit you can use:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"
msgstr ""
">\n"
"> Para evitar que `git log` cubra toda la pantalla de tu terminal, puedes "
"limitar el\n"
"> número de **commits** que Git lista usando `-N`, donde `N` es el número "
"de\n"
"> **commits** que quieres ver. Por ejemplo, si sólo quieres información de\n"
"> el último **commit**, puedes usar:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"

# SC/DC Template label
#: git-novice/_episodes/04-changes.md:535
#: git-novice/_episodes/04-changes.md:549
#: git-novice/_episodes/04-changes.md:563
#: git-novice/_episodes/05-history.md:399
#: git-novice/_episodes/05-history.md:406
#: git-novice/_episodes/05-history.md:414
#: git-novice/_episodes/05-history.md:421
#: git-novice/_locale/es/_episodes/04-changes.md:530
#: git-novice/_locale/es/_episodes/04-changes.md:544
#: git-novice/_locale/es/_episodes/04-changes.md:558
#: git-novice/_locale/es/_episodes/05-history.md:396
#: git-novice/_locale/es/_episodes/05-history.md:403
#: git-novice/_locale/es/_episodes/05-history.md:411
#: git-novice/_locale/es/_episodes/05-history.md:418
msgid "> {: .output}"
msgstr ""

#: git-novice/_episodes/04-changes.md:536
msgid ""
">\n"
"> You can also reduce the quantity of information using the\n"
"> `--oneline` option:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Puedes reducir la cantidad de información usando la\n"
"> opción `--oneline`:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

#: git-novice/_episodes/04-changes.md:550
msgid ""
">\n"
"> You can also combine the `--oneline` options with others. One useful\n"
"> combination is:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph --all --decorate\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> También puedes combinar las opciones `--oneline` con otras. Una "
"combinación\n"
"> útil es:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph --all --decorate\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:566
msgid "> ## Directories"
msgstr "> ## Directorios"

#: git-novice/_episodes/04-changes.md:567
msgid ""
">\n"
"> Two important facts you should know about directories in Git.\n"
">\n"
"> 1. Git does not track directories on their own, only files within them.\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ mkdir directory\n"
">    $ git status\n"
">    $ git add directory\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Note, our newly created empty directory `directory` does not appear in\n"
">    the list of untracked files even if we explicitly add it (_via_ `git "
"add`) to our\n"
">    repository. This is the reason why you will sometimes see `.gitkeep` "
"files\n"
">    in otherwise empty directories. Unlike `.gitignore`, these files are "
"not special\n"
">    and their sole purpose is to populate a directory so that Git adds it "
"to\n"
">    the repository. In fact, you can name such files anything you like.\n"
">\n"
"> {:start=\"2\"}\n"
"> 2. If you create a directory in your Git repository and populate it with "
"files,\n"
">    you can add all files in the directory at once by:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}"
msgstr ""
">\n"
"> Dos hechos importantes que deberías saber acerca de directorios en Git.\n"
">\n"
"> 1. Git no rastrea directorios por sí mismos, sólo los archivos dentro de "
"ellos.\n"
"> Inténtalo tú mismo:\n"
">\n"
"> ~~~\n"
"> $ mkdir directory\n"
"> $ git status\n"
"> $ git add directory\n"
"> $ git status\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Nota que, nuestro nuevo y vació directorio  `directory` no aparece en\n"
"> la lista de archivos no rastreados aún si nosotros explícitamente lo "
"agregamos(_via_ `git add`) a nuestro\n"
"> repositorio. Esta es la razón por la que algunas veces verás archivos `."
"gitkeep`\n"
"> en directorios que si no fuera por ello estarían vacíos. A diferencia de `."
"gitignore`, \n"
"> estos archivos no son especiales\n"
"> y su único propósito es poblar un directorio para que Git lo agregue\n"
"> al repositorio. En efecto, podrías nombrar estos archivos como quieras.\n"
">\n"
"> {:start=\"2\"}\n"
"> 2. Si creas un directorio en tu repositorio Git y lo llenas con archivos,\n"
"> podrás agregar todos los archivos en el directorio a la vez haciendo:\n"
">\n"
"> ~~~\n"
"> git add <directory-with-files>\n"
"> ~~~\n"
"> {: .language-bash}"

#: git-novice/_episodes/04-changes.md:598
msgid ""
"To recap, when we want to add changes to our repository,\n"
"we first need to add the changed files to the staging area\n"
"(`git add`) and then commit the staged changes to the\n"
"repository (`git commit`):"
msgstr ""
"Recapitulando, cuando queremos agregar cambios a nuestro repositorio,\n"
"primero necesitamos agregar los archivos cambiados al **staging area**\n"
"(`git add`) y luego hacer un **commit** de los cambios al\n"
"repositorio (`git commit`):"

#: git-novice/_episodes/04-changes.md:603
#: git-novice/_locale/es/_episodes/04-changes.md:599
msgid "![The Git Commit Workflow](../fig/git-committing.svg)"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:605
msgid "> ## Choosing a Commit Message"
msgstr "> ## Escogiendo un Mensaje para el **Commit**"

#: git-novice/_episodes/04-changes.md:606
msgid ""
">\n"
"> Which of the following commit messages would be most appropriate for the\n"
"> last commit made to `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to "
"mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solution\n"
"> > Answer 1 is not descriptive enough, and the purpose of the commit is "
"unclear;\n"
"> > and answer 2 is redundant to using \"git diff\" to see what changed in "
"this commit;\n"
"> > but answer 3 is good: short, descriptive, and imperative."
msgstr ""
">\n"
"> ¿Cuál de los siguientes mensajes de **commit** sería el más apropiado para "
"el\n"
"> último **commit** hecho a `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to "
"mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solución\n"
"> > La respuesta 1 no es suficientemente descriptiva,\n"
"> > y la respuesta 2 es demasiado descriptiva y redundante,\n"
"> > pero la respuesta 3 es buena: corta pero descriptiva."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:621
msgid "> ## Committing Changes to Git"
msgstr "> ## Haciendo Commit de Cambios a Git"

#: git-novice/_episodes/04-changes.md:622
msgid ""
">\n"
"> Which command(s) below would save the changes of `myfile.txt`\n"
"> to my local Git repository?\n"
">\n"
"> 1. `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 2. `$ git init myfile.txt`\n"
">    `git commit -m \"my recent changes\"`\n"
">\n"
"> 3. `$ git add myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 4. `$ git commit -m myfile.txt \"my recent changes\"`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Would only create a commit if files have already been staged.\n"
"> > 2. Would try to create a new repository.\n"
"> > 3. Is correct: first add the file to the staging area, then commit.\n"
"> > 4. Would try to commit a file \"my recent changes\" with the message "
"myfile.txt."
msgstr ""
">\n"
"> ¿Cuál comando(s) de abajo debería guardar los cambios de `myfile.txt`\n"
"> a mi repositorio local Git?\n"
">\n"
"> 1. `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 2. `$ git init myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 3. `$ git add myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 4. `$ git commit -m myfile.txt \"my recent changes\"`\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Debería crear un **commit** solamente si los archivos ya han sido "
"agregados al **staging area**.\n"
"> > 2. Trataría de crear un nuevo respositorio.\n"
"> > 3. Es correcto: primero agrega el archivo al **staging area**, luego "
"hace **commit**.\n"
"> > 4. Intentaría hacer **commit** al archivo \"my recent changes\" con el "
"mensaje myfile.txt."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:645
msgid "> ## Committing Multiple Files"
msgstr "> ## Haciendo **Commit** a Multiples Archivos"

#: git-novice/_episodes/04-changes.md:646
msgid ""
">\n"
"> The staging area can hold changes from any number of files\n"
"> that you want to commit as a single snapshot.\n"
">\n"
"> 1. Add some text to `mars.txt` noting your decision\n"
"> to consider Venus as a base\n"
"> 2. Create a new file `venus.txt` with your initial thoughts\n"
"> about Venus as a base for you and your friends\n"
"> 3. Add changes from both files to the staging area,\n"
"> and commit those changes.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > First we make our changes to the `mars.txt` and `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Now you can add both files to the staging area. We can do that in one "
"line:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Or with multiple commands:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Now the files are ready to commit. You can check that using `git "
"status`. If you are ready to commit use:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [master cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> El **staging area** puede tener cambios de cualquier número de archivos\n"
"> a los que quieras hacer **commit**, como una sóla instantánea.\n"
">\n"
"> 1. Agrega algún texto a `mars.txt` anotando tu decisión\n"
"> de considerar Venus como base\n"
"> 2. Crea un nuevo archivo `venus.txt` con tus pensamientos iniciales\n"
"> acerca de Venus como base para tí y tus amigos\n"
"> 3. Agrega los cambios de ambos archivos al **staging area**,\n"
"> y haz un **commit** de esos cambios.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Primero haremos nuestros cambios a los archivos `mars.txt` y `venus."
"txt`:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Ahora puedes agregar ambos archivos al **staging area**. Podemos hacer "
"esto en una sóla línea:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > O con varios comandos:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Ahora los archivos están listos para hacer **commit**. Puedes verificar "
"esto usando `git status`. Si estás lista para hacer **commit** usa:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [master cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:705
msgid "> ## `bio` Repository"
msgstr "## Repositorio `bio` "

#: git-novice/_episodes/04-changes.md:706
msgid ""
">\n"
"> * Create a new Git repository on your computer called `bio`.\n"
"> * Write a three-line biography for yourself in a file called `me.txt`,\n"
"> commit your changes\n"
"> * Modify one line, add a fourth line\n"
"> * Display the differences\n"
"> between its updated state and its original state.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If needed, move out of the `planets` folder:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create a new folder called `bio` and 'move' into it:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Initialise git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create your biography file `me.txt` using `nano` or another text "
"editor.\n"
"> > Once in place, add and commit it to the repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m'Adding biography file'\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modify the file as described (modify one line, add a fourth line).\n"
"> > To display the differences\n"
"> > between its updated state and its original state, use `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >"
msgstr ""
">\n"
"> * Crea un nuevo repositorio Git en tu computadora, llamado `bio`.\n"
"> * Escribe una autobiografía de tres líneas en un archivo llamado `me."
"txt`,\n"
"> haz **commit** de tus cambios\n"
"> * Modifica una línea, agrega una cuarta línea \n"
"> * Muestra las diferencias entre el estado actualizado y el original\n"
">\n"
"> > ## Soluciónn\n"
"> >\n"
"> > Si es necesario, sal de la carpeta `planets`:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Crea una nueva carpeta llamada `bio` y 'navega' a ella:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Inicia git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Crea tu archivo de biografía `me.txt` usando `nano` u otro editor de "
"texto.\n"
"> > Una vez hecho, agrega y haz **commit** de tu cambio al repositorio:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m'Adding biography file'\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modifica el archivo como se describe arriba (modifica una línea, agrega "
"una cuarta línea).\n"
"> > Para mostrar las diferencias entre el estado actual y el original, usa "
"`git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:759
#: git-novice/_locale/es/_episodes/04-changes.md:753
msgid "> ## Author and Committer"
msgstr ""

#: git-novice/_episodes/04-changes.md:760
msgid ""
">\n"
"> For each of the commits you have done, Git stored your name twice.\n"
"> You are named as the author and as the committer. You can observe\n"
"> that by telling Git to show you more information about your last\n"
"> commits:\n"
">\n"
"> ~~~\n"
"> $ git log --format=full\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When committing you can name someone else as the author:\n"
">\n"
"> ~~~\n"
"> $ git commit --author=\"Vlad Dracula <vlad@tran.sylvan.ia>\"\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Create a new repository and create two commits: one without the\n"
"> `--author` option and one by naming a colleague of yours as the\n"
"> author. Run `git log` and `git log --format=full`. Think about ways\n"
"> how that can allow you to collaborate with your colleagues.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Update Vlad's bio.\" --author=\"Frank N. Stein "
"<franky@monster.com>\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 4162a51] Update Vlad's bio.\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > 1 file changed, 2 insertions(+), 2 deletions(-)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > ~~~\n"
"> > $ git log --format=full\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > commit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Update Vlad's bio.\n"
"> >\n"
"> > commit aaa3271e5e26f75f11892718e83a3e2743fab8ea\n"
"> > Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Vlad's initial bio.\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Para cada uno de los  **commits** que hayas hecho, Git almacenó tu nombre "
"2 veces.\n"
"> Tú eres nombrado como el **author** y el **committer**. Puedes observar\n"
"> esto, diciendo a Git que te muestre más información acerca de tus últimos\n"
"> **commits**:\n"
">\n"
"> ~~~\n"
"> $ git log --format=full\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Cuando haces **commit** puedes nombrar a alguien más como el **author**:\n"
">\n"
"> ~~~\n"
"> $ git commit --author=\"Vlad Dracula <vlad@tran.sylvan.ia>\"\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Crea un nuevo repositorio y crea dos **commits**: uno sin la\n"
"> opción `--author` y uno nombrando a un colega tuyo como el\n"
"> **author**. Ejecuta `git log` y `git log --format=full`.  Piensa acerca "
"de \n"
"> cómo esto puede permitirte colaborar con tus colegas.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Update Vlad's bio.\" --author=\"Frank N. Stein "
"<franky@monster.com>\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > \n"
"> > ~~~\n"
"> > [master 4162a51] Update Vlad's bio.\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > 1 file changed, 2 insertions(+), 2 deletions(-)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > ~~~\n"
"> > $ git log --format=full\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > commit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Update Vlad's bio.\n"
"> >\n"
"> > commit aaa3271e5e26f75f11892718e83a3e2743fab8ea\n"
"> > Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Vlad's initial bio.\n"
"> > ~~~\n"
"> > {: .output}"

#: git-novice/_episodes/04-changes.md:820
#: git-novice/_locale/es/_episodes/04-changes.md:814
msgid "[commit-messages]: https://chris.beams.io/posts/git-commit/"
msgstr ""

# Front Matter
#: git-novice/_episodes/05-history.md:1
msgid ""
"---\n"
"title: Exploring History\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I identify old versions of files?\"\n"
"- \"How do I review my changes?\"\n"
"- \"How can I recover old versions of files?\"\n"
"objectives:\n"
"- \"Explain what the HEAD of a repository is and how to use it.\"\n"
"- \"Identify and use Git commit numbers.\"\n"
"- \"Compare various versions of tracked files.\"\n"
"- \"Restore old versions of files.\"\n"
"keypoints:\n"
"- \"`git diff` displays differences between commits.\"\n"
"- \"`git checkout` recovers old versions of files.\"\n"
"---"
msgstr ""
"---\n"
"title: Explorando el \"History\"\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo identificar versiones anteriores de archivos?\"\n"
"- \"¿Cómo puedo revisar mis cambios?\"\n"
"- \"¿Cómo puedo recuperar versiones anteriores de archivos?\"\n"
"objectives:\n"
"- \"Explicar qué es el **HEAD** de un repositorio y cómo usarlo.\"\n"
"- \"Identificar y usar  el número de **commit** the Git.\"\n"
"- \"Comparar varias versiones de archivos.\"\n"
"- \"Restaurar versiones anteriores de archivos.\"\n"
"keypoints:\n"
"- \"`git diff` despliega diferencias entre **commits**.\"\n"
"- \"`git checkout` recupera versiones anteriores de archivos.\"\n"
"---"

#: git-novice/_episodes/05-history.md:19
msgid ""
"As we saw in the previous lesson, we can refer to commits by their\n"
"identifiers.  You can refer to the _most recent commit_ of the working\n"
"directory by using the identifier `HEAD`."
msgstr ""
"Como vimos en la lección anterior, podemos referirnos a los **commits** por "
"sus\n"
"identificadores. Puedes referirte al _commit más reciente_ del directorio de "
"trabajo \n"
"usando el identificador `HEAD`."

#: git-novice/_episodes/05-history.md:23
msgid ""
"We've been adding one line at a time to `mars.txt`, so it's easy to track "
"our\n"
"progress by looking, so let's do that using our `HEAD`s.  Before we start,\n"
"let's make a change to `mars.txt`."
msgstr ""
"Hemos estado agregando una línea a la vez a `mars.txt`, por lo que es fácil "
"rastrear nuestro\n"
"progreso, así que hagamos eso usando `HEAD`. Antes de iniciar,\n"
"hagamos un cambio en `mars.txt`."

#: git-novice/_episodes/05-history.md:40
msgid "Now, let's see what we get."
msgstr "Ahora, veamos lo que tenemos."

# code block
#: git-novice/_episodes/05-history.md:42
#: git-novice/_locale/es/_episodes/05-history.md:42
msgid ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/05-history.md:47
#: git-novice/_locale/es/_episodes/05-history.md:47
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
" But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:59
msgid ""
"which is the same as what you would get if you leave out `HEAD` (try it).  "
"The\n"
"real goodness in all this is when you can refer to previous commits.  We do\n"
"that by adding `~1` \n"
"(where \"~\" is \"tilde\", pronounced [**til**-d*uh*]) \n"
"to refer to the commit one before `HEAD`."
msgstr ""
"Lo mismo obtendrías si omites `HEAD` (intentalo). \n"
"La verdadera ventaja en todo esto es cuando puedes referirte a **commits** "
"previos. Hacemos\n"
"esto agregando `~1` para referirnos al **commit** inmediatamente anterior a "
"`HEAD`."

# code block
#: git-novice/_episodes/05-history.md:65
#: git-novice/_locale/es/_episodes/05-history.md:63
msgid ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:70
msgid ""
"If we want to see the differences between older commits we can use `git "
"diff`\n"
"again, but with the notation `HEAD~1`, `HEAD~2`, and so on, to refer to them:"
msgstr ""
"Si queremos ver las diferencias entre **commits** anteriores podemos usar "
"`git diff`\n"
"nuevamente, pero con la notación `HEAD~1`,`HEAD~2`, y así sucesivamente, "
"para referirse a ellos:"

# code block
#: git-novice/_episodes/05-history.md:74
#: git-novice/_locale/es/_episodes/05-history.md:72
msgid ""
"~~~\n"
"$ git diff HEAD~2 mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/05-history.md:79
#: git-novice/_locale/es/_episodes/05-history.md:77
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:91
msgid ""
"We could also use `git show` which shows us what changes we made at an older "
"commit as well as the commit message, rather than the _differences_ between "
"a commit and our working directory that we see by using `git diff`."
msgstr ""
"También podríamos usar `git show`, que nos muestra qué cambios hemos "
"realizado en un **commit** anterior así como el mensaje del **commit**, en "
"lugar de las _diferencias_ entre un **commit** y nuestro directorio de "
"trabajo, que vemos usando `git diff`."

# code block
#: git-novice/_episodes/05-history.md:93
#: git-novice/_locale/es/_episodes/05-history.md:91
msgid ""
"~~~\n"
"$ git show HEAD~2 mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/05-history.md:98
#: git-novice/_locale/es/_episodes/05-history.md:96
msgid ""
"~~~\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:115
msgid ""
"In this way,\n"
"we can build up a chain of commits.\n"
"The most recent end of the chain is referred to as `HEAD`;\n"
"we can refer to previous commits using the `~` notation,\n"
"so `HEAD~1`\n"
"means \"the previous commit\",\n"
"while `HEAD~123` goes back 123 commits from where we are now."
msgstr ""
"De este modo,\n"
"podemos construir una cadena de **commits**.\n"
"El más reciente de la cadena es referido como `HEAD`;\n"
"podemos referirnos a **commits** anteriores utilizando la notación `~`,\n"
"así `HEAD~1` (pronunciado \"head minus one\")\n"
"significa \"el commit anterior\",\n"
"mientras que `HEAD~123` va 123 **commits** hacia atrás desde donde estamos "
"ahora."

#: git-novice/_episodes/05-history.md:123
msgid ""
"We can also refer to commits using\n"
"those long strings of digits and letters\n"
"that `git log` displays.\n"
"These are unique IDs for the changes,\n"
"and \"unique\" really does mean unique:\n"
"every change to any set of files on any computer\n"
"has a unique 40-character identifier.\n"
"Our first commit was given the ID\n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"so let's try this:"
msgstr ""
"También podemos referirnos a los **commits** usando\n"
"esas largas cadenas de dígitos y letras\n"
"que `git log` despliega.\n"
"Estos son IDs únicos para los cambios,\n"
"y aquí \"únicos\" realmente significa únicos:\n"
"cada cambio a cualquier conjunto de archivos en cualquier computadora\n"
"tiene un identificador único de 40 caracteres.\n"
"Nuestro primer **commit** recibió el ID\n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"así que probemos esto:"

# code block
#: git-novice/_episodes/05-history.md:134
#: git-novice/_locale/es/_episodes/05-history.md:132
msgid ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/05-history.md:139
#: git-novice/_episodes/05-history.md:160
#: git-novice/_locale/es/_episodes/05-history.md:137
#: git-novice/_locale/es/_episodes/05-history.md:158
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:151
msgid ""
"That's the right answer,\n"
"but typing out random 40-character strings is annoying,\n"
"so Git lets us use just the first few characters:"
msgstr ""
"Esa es la respuesta correcta,\n"
"pero escribir cadenas aleatorias de 40 caracteres es molesto,\n"
"entonces Git nos permite usar solo los primeros caracteres:"

# code block
#: git-novice/_episodes/05-history.md:155
#: git-novice/_locale/es/_episodes/05-history.md:153
msgid ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:172
msgid ""
"All right! So\n"
"we can save changes to files and see what we've changed—now how\n"
"can we restore older versions of things?\n"
"Let's suppose we accidentally overwrite our file:"
msgstr ""
"¡Todo bien! Asi que\n"
"podemos guardar cambios en los archivos y ver qué hemos cambiado —ahora \n"
"¿Cómo podemos restaurar versiones anteriores de las cosas?\n"
"Supongamos que accidentalmente sobrescribimos nuestro archivo:"

# code block
#: git-novice/_episodes/05-history.md:183
#: git-novice/_locale/es/_episodes/05-history.md:181
msgid ""
"~~~\n"
"We will need to manufacture our own oxygen\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:188
msgid ""
"`git status` now tells us that the file has been changed,\n"
"but those changes haven't been staged:"
msgstr ""
"`git status` ahora nos dice que el archivo ha sido cambiado,\n"
"pero esos cambios no se han organizado:"

#: git-novice/_episodes/05-history.md:208
msgid ""
"We can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"Podemos volver a poner las cosas tal como estaban\n"
"usando `git checkout`:"

# code block
#: git-novice/_episodes/05-history.md:211
#: git-novice/_locale/es/_episodes/05-history.md:209
msgid ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:224
msgid ""
"As you might guess from its name,\n"
"`git checkout` checks out (i.e., restores) an old version of a file.\n"
"In this case,\n"
"we're telling Git that we want to recover the version of the file recorded "
"in `HEAD`,\n"
"which is the last saved commit.\n"
"If we want to go back even further,\n"
"we can use a commit identifier instead:"
msgstr ""
"Como puedes adivinar por su nombre,\n"
"`git checkout` recupera (es decir, restaura) una versión anterior de un "
"archivo.\n"
"En este caso,\n"
"le estamos diciendo a Git que queremos recuperar la versión del archivo "
"grabado en `HEAD`,\n"
"que es el último **commit** guardado.\n"
"Si queremos volver más allá,\n"
"podemos usar un identificador de **commit** en su lugar:"

# code block
#: git-novice/_episodes/05-history.md:232 git-novice/_extras/discuss.md:62
#: git-novice/_locale/es/_episodes/05-history.md:230
#: git-novice/_locale/es/_extras/discuss.md:62
msgid ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/05-history.md:252
msgid ""
"~~~\n"
"# On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"# Changes not staged for commit:\n"
"#   (use \"git add <file>...\" to update what will be committed)\n"
"#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"#\n"
"#\tmodified:   mars.txt\n"
"#\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:266
msgid ""
"Notice that the changes are on the staged area.\n"
"Again, we can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"Ten en cuenta que los cambios están en el **staging area** de "
"almacenamiento.\n"
"Nuevamente, podemos volver a poner las cosas tal como estaban\n"
"usando `git checkout`:"

# code block
#: git-novice/_episodes/05-history.md:270
#: git-novice/_locale/es/_episodes/05-history.md:268
msgid ""
"~~~\n"
"$ git checkout -f master mars.txt\n"
"~~~"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:275
msgid "> ## Don't Lose Your HEAD"
msgstr "> ## No pierdas tu HEAD"

#: git-novice/_episodes/05-history.md:276
msgid ""
">\n"
"> Above we used\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> to revert `mars.txt` to its state after the commit `f22b25e`. But be "
"careful! \n"
"> The command `checkout` has other important functionalities and Git will "
"misunderstand\n"
"> your intentions if you are not accurate with the typing. For example, \n"
"> if you forget `mars.txt` in the previous command.\n"
"> The \"detached HEAD\" is like \"look, but don't touch\" here,\n"
"> so you shouldn't make any changes in this state.\n"
"> After investigating your repo's past state, reattach your `HEAD` with `git "
"checkout master`."
msgstr ""
">\n"
"> Arriba usamos\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> para revertir `mars.txt` a su estado después del **commit** `f22b25e`.\n"
"> Pero ¡Ten cuidado! El comando `checkout` tiene otras funcionalidades "
"importantes y Git puede malinterpretar tus intenciones si \n"
"> no sos precisa a la hora de tipear. Por ejemplo, \n"
"> si olvidas `mars.txt` en ese comando, Git te dirá que \"You are in\n"
"> 'detached HEAD' state\". En este estado, no deberías hacer ningún cambio.\n"
"> Puedes arreglar esto volviendo a conectar tu **head** usando `git checkout "
"master`"

#: git-novice/_episodes/05-history.md:293
msgid ""
"It's important to remember that\n"
"we must use the commit number that identifies the state of the repository\n"
"*before* the change we're trying to undo.\n"
"A common mistake is to use the number of\n"
"the commit in which we made the change we're trying to get rid of.\n"
"In the example below, we want to retrieve the state from before the most\n"
"recent commit (`HEAD~1`), which is commit `f22b25e`:"
msgstr ""
"Es importante recordar que\n"
"debemos usar el número de **commit** que identifica el estado del "
"repositorio\n"
"*antes* del cambio que intentamos deshacer.\n"
"Un error común es usar el número de \n"
"**commit** en el cual hicimos el cambio del cual nos estamos tratando de "
"deshacer.\n"
"En el siguiente ejemplo, queremos recuperar el estado antes del más "
"reciente\n"
"**commit** (`HEAD~1`), que es **commit** `f22b25e`:"

#: git-novice/_episodes/05-history.md:301
#: git-novice/_locale/es/_episodes/05-history.md:298
msgid "![Git Checkout](../fig/git-checkout.svg)"
msgstr ""

#: git-novice/_episodes/05-history.md:303
msgid ""
"So, to put it all together,\n"
"here's how Git works in cartoon form:"
msgstr ""
"Así que, para poner todo junto,\n"
"aqui esta como Git trabaja, en forma de dibujo:"

#: git-novice/_episodes/05-history.md:306
#: git-novice/_locale/es/_episodes/05-history.md:303
msgid ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266](../fig/"
"git_staging.svg)"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:308
msgid "> ## Simplifying the Common Case"
msgstr "> ## Simplificando el caso común"

#: git-novice/_episodes/05-history.md:309
msgid ""
">\n"
"> If you read the output of `git status` carefully,\n"
"> you'll see that it includes this hint:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> As it says,\n"
"> `git checkout` without a version identifier restores files to the state "
"saved in `HEAD`.\n"
"> The double dash `--` is needed to separate the names of the files being "
"recovered\n"
"> from the command itself:\n"
"> without it,\n"
"> Git would try to use the name of the file as the commit identifier."
msgstr ""
">\n"
"> Si lees el **output** de `git status` detenidamente,\n"
"> verás que incluye esta sugerencia:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Como deciamos,\n"
"> `git checkout` sin un identificador de versión restaura los archivos al "
"estado guardado en `HEAD`.\n"
"> El doble guión `--` es necesario para separar los nombres de los archivos "
"que se están recuperando\n"
"> del comando mismo:\n"
"> sin esto,\n"
"> Git intentaría usar el nombre del archivo como el identificador del "
"**commit**."

#: git-novice/_episodes/05-history.md:326
msgid ""
"The fact that files can be reverted one by one\n"
"tends to change the way people organize their work.\n"
"If everything is in one large document,\n"
"it's hard (but not impossible) to undo changes to the introduction\n"
"without also undoing changes made later to the conclusion.\n"
"If the introduction and conclusion are stored in separate files,\n"
"on the other hand,\n"
"moving backward and forward in time becomes much easier."
msgstr ""
"El hecho de que los archivos puedan revertirse uno por uno\n"
"tiende a cambiar la forma en que las personas organizan su trabajo.\n"
"Si todo está en un documento grande,\n"
"es difícil (pero no imposible) deshacer cambios a la introducción\n"
"sin deshacer los cambios posteriores a la conclusión.\n"
"Si la introducción y la conclusión se almacenan en archivos separados,\n"
"por otra parte,\n"
"retroceder y avanzar en el tiempo se vuelve mucho más fácil."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:335
msgid "> ## Recovering Older Versions of a File"
msgstr "> ## Recuperando versiones anteriores de un archivo"

#: git-novice/_episodes/05-history.md:336
msgid ""
">\n"
"> Jennifer has made changes to the Python script that she has been working "
"on for weeks, and the\n"
"> modifications she made this morning \"broke\" the script and it no longer "
"runs. She has spent\n"
"> ~ 1hr trying to fix it, with no luck...\n"
">\n"
"> Luckily, she has been keeping track of her project's versions using Git! "
"Which commands below will\n"
"> let her recover the last committed version of her Python script called\n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Both 2 and 4"
msgstr ""
">\n"
"> Jennifer ha realizado cambios en el **script**  de Python en el que ha "
"estado trabajando durante semanas, y las\n"
"> modificaciones que hizo esta mañana \"corrompieron\" el **script**  y ya "
"no funciona. Ella ha pasado\n"
"> ~ 1hr tratando de solucionarlo, sin tener suerte...\n"
">\n"
"> Por suerte, ¡Ella ha estado haciendo un seguimiento de las versiones de su "
"proyecto usando Git! ¿Cuáles comandos \n"
"> le permitirán recuperar la última versión estable de su **script**  Python "
"llamado \n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Ambos 2 y 4"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:356
msgid "> ## Reverting a Commit"
msgstr "> ## Revertir un commit"

#: git-novice/_episodes/05-history.md:357
msgid ""
">\n"
"> Jennifer is collaborating on her Python script with her colleagues and\n"
"> realizes her last commit to the group repository is wrong and wants to\n"
"> undo it.  Jennifer needs to undo correctly so everyone in the group\n"
"> repository gets the correct change.  `git revert [wrong commit ID]`\n"
"> will make a new commit that undoes Jennifer's previous wrong\n"
"> commit. Therefore `git revert` is different than `git checkout [commit\n"
"> ID]` because `checkout` is for local changes not committed to the\n"
"> group repository.  Below are the right steps and explanations for\n"
"> Jennifer to use `git revert`, what is the missing command?\n"
">\n"
"> 1. `________ # Look at the git history of the project to find the commit "
"ID`\n"
">\n"
"> 2. Copy the ID (the first few characters of the ID, e.g. 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Type in the new commit message.\n"
">\n"
"> 5. Save and close"
msgstr ""
">\n"
"> Jennifer está colaborando en su **script** de Python con sus colegas y\n"
"> se da cuenta que su último **commit** en el repositorio del grupo es "
"incorrecto y quiere\n"
"> deshacerlo. Jennifer necesita deshacer correctamente para que todos en el "
"repositorio\n"
"> del grupo tengan el cambio correcto. `git revert [ID de commit "
"incorrecto]`\n"
"> hará un nuevo **commit** que va a deshacer el commit anterior erroneo de "
"Jennifer. \n"
"> Por lo tanto, `git revert` es diferente de `git checkout [commit\n"
"> ID]` porque `checkout` es para cambios locales no comprometidos con el\n"
"> repositorio de grupo. A continuación se encuentran los pasos correctos y "
"explicaciones para\n"
"> que Jennifer use `git revert`, ¿Cuál es el comando que falta?\n"
">\n"
"> 1. ________ # Mira el historial de git del proyecto para encontrar el ID "
"del **commit**\n"
">\n"
"> 2. Copia el ID (los primeros caracteres del ID, por ejemplo 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Escriba el nuevo mensaje del **commit**.\n"
">\n"
"> 5. Salva y cierra"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:379
msgid "> ## Understanding Workflow and History"
msgstr "> ## Entendiendo Workflow y History"

#: git-novice/_episodes/05-history.md:380
msgid ""
">\n"
"> What is the output of the last command in\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #this will print the contents of venus.txt to the screen\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. \n"
">\n"
"> ~~~\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"
msgstr ""
">\n"
"> ¿Cuál es el **output** de cat venus.txt al final de este conjunto de "
"comandos?\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ nano venus.txt #captura el siguiente texto: Venus is beautiful and full "
"of love\n"
"> $ git add venus.txt\n"
"> $ nano venus.txt #agrega el siguiente texto: Venus is too hot to be "
"suitable as a base\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #esto imprimirá el contenido de venus.txt en la pantalla\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.\n"
">\n"
"> ~~~\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:400
#: git-novice/_locale/es/_episodes/05-history.md:397
msgid ""
">\n"
"> 2.\n"
">\n"
"> ~~~\n"
"> Venus is beautiful and full of love\n"
"> ~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:407
#: git-novice/_locale/es/_episodes/05-history.md:404
msgid ""
">\n"
"> 3.\n"
">\n"
"> ~~~\n"
"> Venus is beautiful and full of love\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:415
#: git-novice/_locale/es/_episodes/05-history.md:412
msgid ""
">\n"
"> 4.\n"
">\n"
"> ~~~\n"
"> Error because you have changed venus.txt without committing the changes\n"
"> ~~~"
msgstr ""

#: git-novice/_episodes/05-history.md:422
msgid ""
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answer is 2 because `git add venus.txt` was used only before add the "
"line\n"
"> > `Venus is too hot to be suitable as a base`\n"
"> > which was lost when `git checkout` was executed.\n"
"> > Using the flag `-a` with `git commit` would have prevented the lost."
msgstr ""
">\n"
"> > ## Solución\n"
"> >\n"
"> > The answer is 2 because `git add venus.txt` was used only before add the "
"line\n"
"> > `Venus is too hot to be suitable as a base`\n"
"> > which was lost when `git checkout` was executed.\n"
"> > Using the flag `-a` with `git commit` would have prevented the lost."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:432
msgid "> ## Checking Understanding of `git diff`"
msgstr "> ## Comprobando lo que entendiste de `git diff`"

#: git-novice/_episodes/05-history.md:433
msgid ""
">\n"
"> Consider this command: `git diff HEAD~3 mars.txt`. What do you predict "
"this command\n"
"> will do if you execute it? What happens when you do execute it? Why?\n"
">\n"
"> Try another command, `git diff [ID] mars.txt`, where [ID] is replaced "
"with\n"
"> the unique identifier for your most recent commit. What do you think will "
"happen,\n"
"> and what does happen?"
msgstr ""
">\n"
"> Considera este comando: `git diff HEAD~3 mars.txt`. ¿Qué predices que hará "
"este comando si lo ejecutas? ¿Qué sucede cuando lo ejecutas? ¿Por qué?\n"
">\n"
"> Prueba éste otro comando, `git diff [ID] mars.txt`, donde [ID] es \n"
"> el identificador único para tu commit más reciente. ¿Qué piensas tú que "
"sucederá,\n"
"> y qué es lo que pasa?"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:442
msgid "> ## Getting Rid of Staged Changes"
msgstr "> ## Deshacer los cambios almacenados"

#: git-novice/_episodes/05-history.md:443
msgid ""
">\n"
"> `git checkout` can be used to restore a previous commit when unstaged "
"changes have\n"
"> been made, but will it also work for changes that have been staged but not "
"committed?\n"
"> Make a change to `mars.txt`, add that change, and use `git checkout` to "
"see if\n"
"> you can remove your change."
msgstr ""
">\n"
"> `git checkout` puede usarse para restaurar un **commit** anterior cuando "
"cambios no marcados se han \n"
"> hecho, pero ¿También funcionará para los cambios que se han marcado pero "
"no se han vuelto **commit**?\n"
"> Haz un cambio a `mars.txt`, agrega el cambio y usa` git checkout` para ver "
"si\n"
"> puedes eliminar tu cambio."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:450
msgid "> ## Explore and Summarize Histories"
msgstr "> ## Explorar y resumir el History"

#: git-novice/_episodes/05-history.md:451
msgid ""
">\n"
"> Exploring history is an important part of git, often it is a challenge to "
"find\n"
"> the right commit ID, especially if the commit is from several months ago.\n"
">\n"
"> Imagine the `planets` project has more than 50 files.\n"
"> You would like to find a commit with specific text in `mars.txt` is "
"modified.\n"
"> When you type `git log`, a very long list appeared,\n"
"> How can you narrow down the search?\n"
">\n"
"> Recall that the `git diff` command allow us to explore one specific file,\n"
"> e.g. `git diff mars.txt`. We can apply a similar idea here.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Unfortunately some of these commit messages are very ambiguous e.g. "
"`update files`.\n"
"> How can you search through these files?\n"
">\n"
"> Both `git diff` and `git log` are very useful and they summarize a "
"different part of the history for you.\n"
"> Is it possible to combine both? Let's try the following:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> You should get a long list of output, and you should be able to see both "
"commit messages and the difference between each commit.\n"
">\n"
"> Question: What does the following command do?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~3 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Explorar el **history** es una parte importante de git, a menudo es un "
"desafío encontrar\n"
"> el ID de confirmación correcto, especialmente si el **commit** es de hace "
"varios meses.\n"
">\n"
"> Imagina que el proyecto `planets` tiene más de 50 archivos.\n"
"> Deseas encontrar un **commit** con texto específico en `mars.txt`.\n"
"> Cuando escribes `git log`, aparece una lista muy larga,\n"
"> ¿Cómo puede restringir la búsqueda?\n"
">\n"
"> Recuerda que el comando `git diff` nos permite explorar un archivo "
"específico,\n"
"> por ejemplo `git diff mars.txt`. Podemos aplicar una idea similar aquí.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Desafortunadamente, algunos de estos mensajes en los **commits** son muy "
"ambiguos, por ejemplo `update files`.\n"
"> ¿Cómo puedes buscar a través de estos archivos?\n"
">\n"
"> Tanto `git diff` como `git log` son muy útiles y resumen una parte "
"diferente del **history** para ti.\n"
"> ¿Es posible combinar ambos? Vamos a intentar lo siguiente:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Deberías obtener una larga lista de output, y deberías poder ver tanto los "
"dos mensajes del **commit** como la diferencia entre cada \n"
"> **commit**.\n"
">\n"
"> Pregunta: ¿Qué hace el siguiente comando?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~3 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"

# Front Matter
#: git-novice/_episodes/06-ignore.md:1
msgid ""
"---\n"
"title: Ignoring Things\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I tell Git to ignore files I don't want to track?\"\n"
"objectives:\n"
"- \"Configure Git to ignore specific files.\"\n"
"- \"Explain why ignoring files can be useful.\"\n"
"keypoints:\n"
"- \"The `.gitignore` file tells Git what files to ignore.\"\n"
"---"
msgstr ""
"---\n"
"title: Ignorando cosas\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo indicarle a Git que ignore los archivos que no quiero "
"rastrear?\"\n"
"objectives:\n"
"- \"Configure Git para ignorar archivos específicos.\"\n"
"- \"Explica por qué ignorar los archivos puede ser útil.\"\n"
"keypoints:\n"
"- \"El archivo `.gitignore` le dice a Git qué archivos ignorar.\"\n"
"---"

#: git-novice/_episodes/06-ignore.md:14
msgid ""
"What if we have files that we do not want Git to track for us,\n"
"like backup files created by our editor\n"
"or intermediate files created during data analysis?\n"
"Let's create a few dummy files:"
msgstr ""
"¿Qué pasa si tenemos archivos que no queremos que Git rastree,\n"
"como archivos de copia de seguridad creados por nuestro editor\n"
"o archivos intermedios creados durante el análisis de datos?\n"
"Vamos a crear algunos archivos ficticios:"

# code block
#: git-novice/_episodes/06-ignore.md:19
#: git-novice/_locale/es/_episodes/06-ignore.md:19
msgid ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"
msgstr ""

#: git-novice/_episodes/06-ignore.md:25
msgid "and see what Git says:"
msgstr "Mira lo que Git dice:"

# code block
#: git-novice/_episodes/06-ignore.md:32
msgid ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/06-ignore.md:45
msgid ""
"Putting these files under version control would be a waste of disk space.\n"
"What's worse,\n"
"having them all listed could distract us from changes that actually matter,\n"
"so let's tell Git to ignore them."
msgstr ""
"Colocar estos archivos bajo el control de versiones sería un desperdicio de "
"espacio en disco. \n"
"Y lo que es peor, \n"
"al tenerlos todos listados, podría distraernos de los cambios que realmente "
"importan, \n"
"así que vamos a decirle a Git que los ignore."

#: git-novice/_episodes/06-ignore.md:50
msgid ""
"We do this by creating a file in the root directory of our project called `."
"gitignore`:"
msgstr ""
"Lo hacemos creando un archivo en el directorio raíz de nuestro proyecto "
"llamado `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:52
#: git-novice/_locale/es/_episodes/06-ignore.md:52
msgid ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/06-ignore.md:58
#: git-novice/_locale/es/_episodes/06-ignore.md:58
msgid ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"
msgstr ""

#: git-novice/_episodes/06-ignore.md:64
msgid ""
"These patterns tell Git to ignore any file whose name ends in `.dat`\n"
"and everything in the `results` directory.\n"
"(If any of these files were already being tracked,\n"
"Git would continue to track them.)"
msgstr ""
"Estos patrones le dicen a Git que ignore cualquier archivo cuyo nombre "
"termine en `.dat`\n"
"y todo lo que haya en el directorio `results`.\n"
"(Si alguno de estos archivos ya estaba siendo rastreado, \n"
"Git seguirá rastreándolos.)"

#: git-novice/_episodes/06-ignore.md:69
msgid ""
"Once we have created this file,\n"
"the output of `git status` is much cleaner:"
msgstr ""
"Una vez que hemos creado este archivo, \n"
"la salida de `git status` es mucho más limpia:"

# code block
#: git-novice/_episodes/06-ignore.md:77
msgid ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/06-ignore.md:87
msgid ""
"The only thing Git notices now is the newly-created `.gitignore` file.\n"
"You might think we wouldn't want to track it,\n"
"but everyone we're sharing our repository with will probably want to ignore\n"
"the same things that we're ignoring.\n"
"Let's add and commit `.gitignore`:"
msgstr ""
"Lo único que Git advierte ahora, es el archivo `.gitignore` recién creado.\n"
"Podrías pensar que no queremos rastrearlo, \n"
"pero todos aquellos con los que compartimos nuestro repositorio "
"probablemente desearán\n"
"ignorar las mismas cosas que nosotros.\n"
"Vamos a agregar y hacer \"commit\" de `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:93
#: git-novice/_locale/es/_episodes/06-ignore.md:93
msgid ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/06-ignore.md:100
#: git-novice/_locale/es/_episodes/06-ignore.md:100
msgid ""
"~~~\n"
"# On branch master\n"
"nothing to commit, working directory clean\n"
"~~~"
msgstr ""

#: git-novice/_episodes/06-ignore.md:106
msgid ""
"As a bonus, using `.gitignore` helps us avoid accidentally adding to the "
"repository files that we don't want to track:"
msgstr ""
"Como ventaja, usar `.gitignore` nos ayuda a evitar agregar accidentalmente "
"al repositorio los archivos que no queremos rastrear:"

# code block
#: git-novice/_episodes/06-ignore.md:108
#: git-novice/_locale/es/_episodes/06-ignore.md:108
msgid ""
"~~~\n"
"$ git add a.dat\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/06-ignore.md:113
#: git-novice/_locale/es/_episodes/06-ignore.md:113
msgid ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"
msgstr ""

#: git-novice/_episodes/06-ignore.md:120
msgid ""
"If we really want to override our ignore settings,\n"
"we can use `git add -f` to force Git to add something. For example,\n"
"`git add -f a.dat`.\n"
"We can also always see the status of ignored files if we want:"
msgstr ""
"Si realmente queremos anular la configuración de ignorar, \n"
"podemos usar `git add -f` para obligar a Git a añadir algo. Por ejemplo, \n"
"`git add -f a.dat`.\n"
"También podemos ver siempre el estado de los archivos ignorados si queremos:"

# code block
#: git-novice/_episodes/06-ignore.md:125
#: git-novice/_locale/es/_episodes/06-ignore.md:125
msgid ""
"~~~\n"
"$ git status --ignored\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/06-ignore.md:130
#: git-novice/_locale/es/_episodes/06-ignore.md:130
msgid ""
"~~~\n"
"On branch master\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working directory clean\n"
"~~~"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:144
msgid "> ## Ignoring Nested Files"
msgstr "> ## Ignorar archivos anidados"

#: git-novice/_episodes/06-ignore.md:145
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore only `results/plots` and not `results/data`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > As with most programming issues, there are a few ways that you\n"
"> > could solve this. If you only want to ignore the contents of\n"
"> > `results/plots`, you can change your `.gitignore` to ignore\n"
"> > only the `/plots/` subfolder by adding the following line to\n"
"> > your .gitignore:\n"
"> >\n"
"> > `results/plots/`\n"
"> >\n"
"> > If, instead, you want to ignore everything in `/results/`, but wanted to "
"track\n"
"> > `results/data`, then you can add `results/` to your .gitignore\n"
"> > and create an exception for the `results/data/` folder.\n"
"> > The next challenge will cover this type of solution.\n"
"> >\n"
"> > Sometimes the `**` pattern comes in handy, too, which matches\n"
"> > multiple directory levels. E.g. `**/results/plots/*` would make git "
"ignore\n"
"> > the `results/plots` directory in any root directory."
msgstr ""
">\n"
"> Dado un directorio con la siguiente estructura:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cómo ignorarías sólo `results/plots` y no `results/data`?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Como ocurre con la mayoría de los problemas de programación, hay \n"
"> > varias maneras de resolver esto. Si sólo deseas ignorar el \n"
"> > contenido de `results/plots`, puedes cambiar tu `.gitignore` para \n"
"> > ignorar solamente la subcarpeta `/plots/` añadiendo la siguiente línea a "
"su .gitignore:\n"
"> >\n"
"> > `results/plots/`\n"
"> >\n"
"> > Si, en cambio, deseas ignorar todo en `/results/`, pero deseas realizar "
"el\n"
"> > seguimiento de `results/data`, puedes agregar `results/` a su .gitignore "
"y\n"
"> > crear una excepción para la carpeta `results/data/`.\n"
"> > El siguiente reto cubrirá este tipo de solución.\n"
"> >\n"
"> >\n"
"> > A veces el patrón `**` viene muy bien para referirse a múltiples\n"
"> > niveles de directorio. E.g. `**/results/plots/*` hará que git ignore el\n"
"> > directorio `results/plots` en cualquier directorio raíz."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:177
msgid "> ## Including Specific Files"
msgstr "> ## Incluyendo archivos específicos"

#: git-novice/_episodes/06-ignore.md:178
msgid ""
">\n"
"> How would you ignore all `.data` files in your root directory except for\n"
"> `final.data`?\n"
"> Hint: Find out what `!` (the exclamation point operator) does\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > You would add the following two lines to your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.data           # ignore all data files\n"
"> > !final.data      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The exclamation point operator will include a previously excluded entry."
msgstr ""
">\n"
"> ¿Cómo ignorarías todos los archivos `.data` en tu directorio raíz, "
"excepto` final.data`?\n"
"> Sugerencia: Descubre lo que `!` (el signo de exclamación) hace\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Agrega las siguientes dos líneas a tu archivo .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.data # ignora todos los archivos .data\n"
"> > !final.data # excepto el archivo final.data\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > El signo de exclamación incluirá una entrada previamente excluida."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:197
msgid "> ## Ignoring all data Files in a Directory"
msgstr "> ## Ignorando todos los archivos de datos en un directorio"

#: git-novice/_episodes/06-ignore.md:198
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.data\n"
"> results/data/position/gps/b.data\n"
"> results/data/position/gps/c.data\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What's the shortest `.gitignore` rule you could write to ignore all `."
"data`\n"
"> files in `result/data/position/gps`? Do not ignore the `info.txt`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Appending `results/data/position/gps/*.data` will match every file in "
"`results/data/position/gps` that ends with `.data`.\n"
"> > The file `results/data/position/gps/info.txt` will not be ignored."
msgstr ""
">\n"
"> Dado un directorio con la siguiente estructura:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.data\n"
"> results/data/position/gps/b.data\n"
"> results/data/position/gps/c.data\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cuál es la regla más corta en `.gitignore` para ignorar todos los "
"archivos `.data`\n"
"> en `result/data/position/gps`? No ignores el archivo `info.txt`.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Agregando `results/data/position/gps/*.data` coincidirá con cada archivo "
"en\n"
"> > `results/data/position/gps` que termine con `.data`.\n"
"> > El archivo `results/data/position/gps/info.txt` no será ignorado."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:220
msgid "> ## The Order of Rules"
msgstr "> ## El orden de las reglas"

#: git-novice/_episodes/06-ignore.md:221
msgid ""
">\n"
"> Given a `.gitignore` file with the following contents:\n"
">\n"
"> ~~~\n"
"> *.data\n"
"> !*.data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What will be the result?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The `!` modifier will negate an entry from a previously defined ignore "
"pattern.\n"
"> > Because the `!*.data` entry negates all of the previous `.data` files in "
"the `.gitignore`,\n"
"> > none of them will be ignored, and all `.data` files will be tracked.\n"
"> >"
msgstr ""
">\n"
"> Dado un archivo `.gitignore` con el siguiente contenido:\n"
">\n"
"> ~~~\n"
"> *.data\n"
"> !*.data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cuál será el resultado?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > El modificador `!` anulará algún patrón ignorado previamente definido.\n"
"> > Debido a que la entrada `!*.data` anula todos los archivos` .data` "
"anteriores en `.gitignore`,\n"
"> > ninguno de ellos será ignorado, y todos los archivos` .data` serán "
"rastreados.\n"
"> >"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:241
msgid "> ## Log Files"
msgstr "> ## Archivos de bitácora"

#: git-novice/_episodes/06-ignore.md:242
msgid ""
">\n"
"> You wrote a script that creates many intermediate log-files of the form "
"`log_01`, `log_02`, `log_03`, etc.\n"
"> You want to keep them but you do not want to track them through `git`.\n"
">\n"
"> 1. Write **one** `.gitignore` entry that excludes files of the form "
"`log_01`, `log_02`, etc.\n"
">\n"
"> 2. Test your \"ignore pattern\" by creating some dummy files of the form "
"`log_01`, etc.\n"
">\n"
"> 3. You find that the file `log_01` is very important after all, add it to "
"the tracked files without changing the `.gitignore` again.\n"
">\n"
"> 4. Discuss with your neighbor what other types of files could reside in "
"your directory that you do not want to track and thus would exclude via `."
"gitignore`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. append either `log_*`  or  `log*`  as a new entry in your .gitignore\n"
"> > 3. track `log_01` using   `git add -f log_01`"
msgstr ""
">\n"
"> Supón que escribiste un **script** que crea muchos archivos de registro "
"con la estructura `log_01`, `log_02`, `log_03`, etc. Deseas conservarlos "
"pero no rastrearlos a través de `git`.\n"
">\n"
"> 1. Escribe **una entrada** en tu archivo `.gitignore` que excluya los "
"archivos con estructura `log_01`, `log_02`, etc.\n"
">\n"
"> 2. Prueba tu \"patrón de ignorar\" creando algunos archivos ficticios "
"`log_01`, etc.\n"
">\n"
"> 3. Te das cuenta de que el archivo `log_01` es muy importante después de "
"todo, así que lo tienes que agregar a los archivos rastreados sin cambiar "
"el` .gitignore` de nuevo\n"
">\n"
"> 4. Discute con tu compañero de a lado qué otros tipos de archivos podrían "
"residir en tu directorio que no deseas seguir y por tanto excluir a través "
"de `.gitignore`.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Agrega `log_*` o `log*` como nueva entrada en tu archivo .gitignore\n"
"> > 3. Rastrea `log_01` usando `git add -f log_01`"

# Front Matter
#: git-novice/_episodes/07-github.md:1
msgid ""
"---\n"
"title: Remotes in GitHub\n"
"teaching: 30\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I share my changes with others on the web?\"\n"
"objectives:\n"
"- \"Explain what remote repositories are and why they are useful.\"\n"
"- \"Push to or pull from a remote repository.\"\n"
"keypoints:\n"
"- \"A local Git repository can be connected to one or more remote "
"repositories.\"\n"
"- \"Use the HTTPS protocol to connect to remote repositories until you have "
"learned how to set up SSH.\"\n"
"- \"`git push` copies changes from a local repository to a remote repository."
"\"\n"
"- \"`git pull` copies changes from a remote repository to a local repository."
"\"\n"
"---"
msgstr ""
"---\n"
"title: Repositorios remotos en GitHub\n"
"teaching: 30\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo compartir los cambios con otros en la web?\"\n"
"objectives:\n"
"- \"Explica qué es un repositorio remoto y por qué es útil.\"\n"
"- \"Hacer **push** y **pull** en un repositorio remoto\"\n"
"keypoints:\n"
"- \"Un repositorio Git local puede ser conectado a uno o más repositorios "
"remotos.\"\n"
"- \"Usa el protocolo HTTPS para conectarte a un repositorio remoto hasta que "
"hayas aprendido como hacerlo con SSH.\"\n"
"- \"`git push` copia los cambios desde el repositorio local a un repositorio "
"remoto.\"\n"
"- \"`git pull` copia los cambios desde un repositorio remoto a un "
"repositorio local.\"\n"
"---"

#: git-novice/_episodes/07-github.md:17
msgid ""
"Version control really comes into its own when we begin to collaborate with\n"
"other people.  We already have most of the machinery we need to do this; "
"the\n"
"only thing missing is to copy changes from one repository to another."
msgstr ""
"Cuando se trabaja en colaboración con otras personas es cuando el sistema de "
"control de versiones alcanza su pleno potencial. Ya hemos visto la mayor "
"parte de las herramientas que necesitamos para ello, tan sólo nos falta ver "
"cómo copiar los cambios realizados de un repositorio a otro."

#: git-novice/_episodes/07-github.md:21
msgid ""
"Systems like Git allow us to move work between any two repositories.  In\n"
"practice, though, it's easiest to use one copy as a central hub, and to keep "
"it\n"
"on the web rather than on someone's laptop.  Most programmers use hosting\n"
"services like [GitHub](https://github.com), [BitBucket](https://bitbucket."
"org) or\n"
"[GitLab](https://gitlab.com/) to hold those master copies; we'll explore the "
"pros\n"
"and cons of this in the final section of this lesson."
msgstr ""
"Sistemas como Git ya nos permiten mover el trabajo realizado entre dos "
"repositorios cualesquiera. Sin embargo, en la práctica es más sencillo "
"establecer uno de ellos como repositorio central y tenerlo en la red en "
"lugar de tu computadora particular. La mayoría de desarrolladores usan "
"servicios de alojamiento en la red, tales como [GitHub](http://github.com), "
"[BitBucket](http://bitbucket.org) o [GitLab](http://gitlab.com/), para "
"alojar ese repositorio central; en la última sección de esta lección "
"exploraremos los pros y los contras de cada uno de ellos."

#: git-novice/_episodes/07-github.md:28
msgid ""
"Let's start by sharing the changes we've made to our current project with "
"the\n"
"world.  Log in to GitHub, then click on the icon in the top right corner to\n"
"create a new repository called `planets`:"
msgstr ""
"Empecemos por compartir con todos los demás los cambios que hemos realizado "
"en nuestro proyecto actual. Para ello, ingresa en tu cuenta de GitHub y haz "
"click en el icono que hay en la esquina superior derecha para crear un nuevo "
"repositorio llamado `planets`:"

#: git-novice/_episodes/07-github.md:32
msgid ""
"![Creating a Repository on GitHub (Step 1)](../fig/github-create-repo-01.png)"
msgstr ""
"![Creando un Repositorio en GitHub (Paso 1)](../fig/github-create-repo-01."
"png)"

#: git-novice/_episodes/07-github.md:34
msgid "Name your repository \"planets\" and then click \"Create Repository\":"
msgstr ""
"Dale a tu repositorio el nombre \"planets\" y haz click en \"Create "
"repository\":"

#: git-novice/_episodes/07-github.md:36
msgid ""
"![Creating a Repository on GitHub (Step 2)](../fig/github-create-repo-02.png)"
msgstr ""
"![Creando un Repositorio en GitHub (Paso 2)](../fig/github-create-repo-02."
"png)"

#: git-novice/_episodes/07-github.md:38
msgid ""
"As soon as the repository is created, GitHub displays a page with a URL and "
"some\n"
"information on how to configure your local repository:"
msgstr ""
"Tan pronto es creado el repositorio, GitHub muestra una página con una URL y "
"algo de información sobre cómo configurar tu repositorio local."

#: git-novice/_episodes/07-github.md:41
msgid ""
"![Creating a Repository on GitHub (Step 3)](../fig/github-create-repo-03.png)"
msgstr ""
"![Creando un Repositorio en GitHub (Paso 3)](../fig/github-create-repo-03."
"png)"

#: git-novice/_episodes/07-github.md:43
msgid "This effectively does the following on GitHub's servers:"
msgstr "Esto en realidad ejecuta lo siguiente en los servidores de GitHub:"

# code block
#: git-novice/_episodes/07-github.md:45
#: git-novice/_locale/es/_episodes/07-github.md:35
msgid ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"$ git init\n"
"~~~"
msgstr ""

#: git-novice/_episodes/07-github.md:52
msgid ""
"Note that our local repository still contains our earlier work on `mars."
"txt`, but the\n"
"remote repository on GitHub appears empty as it doesn't contain any files "
"yet."
msgstr ""
"Nuestro repositorio local contiene nuestro trabajo previo en `mars.txt`, "
"pero el repositorio remoto en GitHub todavía no contiene ningún archivo:"

#: git-novice/_episodes/07-github.md:55
msgid ""
"![Freshly-Made GitHub Repository](../fig/git-freshly-made-github-repo.svg)"
msgstr ""
"![Repositorio en GitHub recién creado](../fig/git-freshly-made-github-repo."
"svg)"

#: git-novice/_episodes/07-github.md:57
msgid ""
"The next step is to connect the two repositories.  We do this by making the\n"
"GitHub repository a [remote]({{ page.root }}/reference#remote) for the local "
"repository.\n"
"The home page of the repository on GitHub includes the string we need to\n"
"identify it:"
msgstr ""
"El siguiente paso es conectar los dos repositorios. Ello se consigue "
"convirtiendo al repositorio en GitHub en un [repositorio remoto]({{ page."
"root }}/reference/#remote) del repositorio local. La página de inicio del "
"repositorio en GitHub incluye la secuencia de caracteres que necesitamos "
"para identificarlo:"

#: git-novice/_episodes/07-github.md:62
msgid ""
"![Where to Find Repository URL on GitHub](../fig/github-find-repo-string.png)"
msgstr ""
"![Dónde encontrar la URL del Repositorio en GitHub](../fig/github-find-repo-"
"string.png)"

#: git-novice/_episodes/07-github.md:64
msgid ""
"Click on the 'HTTPS' link to change the [protocol]({{ page.root }}/"
"reference#protocol) from\n"
"SSH to HTTPS."
msgstr ""
"Haz click en el enlace 'HTTPS' para cambiar el [protocolo]({{ page.root }}/"
"reference/#protocol) de SSH a HTTPS."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:67
#: git-novice/_locale/es/_episodes/07-github.md:52
msgid "> ## HTTPS vs. SSH"
msgstr ""

#: git-novice/_episodes/07-github.md:68
msgid ""
">\n"
"> We use HTTPS here because it does not require additional configuration.  "
"After\n"
"> the workshop you may want to set up SSH access, which is a bit more "
"secure, by\n"
"> following one of the great tutorials from\n"
"> [GitHub](https://help.github.com/articles/generating-ssh-keys),\n"
"> [Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/"
"Set+up+SSH+for+Git)\n"
"> and [GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n"
"> (this one has a screencast)."
msgstr ""
">\n"
">Usamos aquí HTTPS porque no necesita ninguna configuración adicional.\n"
">Si en el curso quieres configurar el acceso mediante SSH, que es un poco "
"más seguro,\n"
">puedes seguir cualquiera de los excelentes tutoriales que existen en\n"
">[GitHub](https://help.github.com/articles/generating-ssh-keys), \n"
">[Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/Set"
"+up+SSH+for+Git) y\n"
">[GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n"
">(este último con capturas animadas de pantalla)."

#: git-novice/_episodes/07-github.md:78
msgid ""
"![Changing the Repository URL on GitHub](../fig/github-change-repo-string."
"png)"
msgstr ""
"![Cambiando la URL del Repositorio en GitHub](../fig/github-change-repo-"
"string.png)"

#: git-novice/_episodes/07-github.md:80
msgid ""
"Copy that URL from the browser, go into the local `planets` repository, and "
"run\n"
"this command:"
msgstr ""
"Copia dicha URL desde el navegador, ve al repositorio local `planets` y "
"ejecuta allí este comando:"

# code block
#: git-novice/_episodes/07-github.md:83
#: git-novice/_locale/es/_episodes/07-github.md:67
msgid ""
"~~~\n"
"$ git remote add origin https://github.com/vlad/planets.git\n"
"~~~"
msgstr ""

#: git-novice/_episodes/07-github.md:88
msgid ""
"Make sure to use the URL for your repository rather than Vlad's: the only\n"
"difference should be your username instead of `vlad`."
msgstr ""
"Asegúrate de usar la URL de tu repositorio en lugar de la de vlad: la única "
"diferencia debería ser tu nombre de usuario en lugar de `vlad`."

#: git-novice/_episodes/07-github.md:91
msgid "We can check that the command has worked by running `git remote -v`:"
msgstr ""
"Podemos comprobar que el comando ha funcionado bien ejecutando `git remote -"
"v`:"

# code block
#: git-novice/_episodes/07-github.md:93
#: git-novice/_locale/es/_episodes/07-github.md:76
msgid ""
"~~~\n"
"$ git remote -v\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/07-github.md:98
#: git-novice/_locale/es/_episodes/07-github.md:81
msgid ""
"~~~\n"
"origin   https://github.com/vlad/planets.git (push)\n"
"origin   https://github.com/vlad/planets.git (fetch)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/07-github.md:104
msgid ""
"The name `origin` is a local nickname for your remote repository. We could "
"use\n"
"something else if we wanted to, but `origin` is by far the most common "
"choice."
msgstr ""
"El nombre `origin` es un apodo local para tu repositorio remoto. Se puede "
"usar cualquier otro nombre si se desea, pero `origin` es la elección más "
"habitual."

#: git-novice/_episodes/07-github.md:107
msgid ""
"Once the nickname `origin` is set up, this command will push the changes "
"from\n"
"our local repository to the repository on GitHub:"
msgstr ""
"Una vez seleccionado el apodo local `origin`, el siguiente comando enviará "
"los cambios realizados en nuestro repositorio local al repositorio en GitHub:"

# code block
#: git-novice/_episodes/07-github.md:110 git-novice/_episodes/08-collab.md:80
#: git-novice/_episodes/09-conflict.md:68
#: git-novice/_episodes/09-conflict.md:118
#: git-novice/_episodes/09-conflict.md:241
#: git-novice/_locale/es/_episodes/07-github.md:91
#: git-novice/_locale/es/_episodes/08-collab.md:70
#: git-novice/_locale/es/_episodes/09-conflict.md:62
#: git-novice/_locale/es/_episodes/09-conflict.md:112
#: git-novice/_locale/es/_episodes/09-conflict.md:235
msgid ""
"~~~\n"
"$ git push origin master\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/07-github.md:115
#: git-novice/_locale/es/_episodes/07-github.md:96
msgid ""
"~~~\n"
"Counting objects: 9, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (9/9), 821 bytes, done.\n"
"Total 9 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets\n"
" * [new branch]      master -> master\n"
"Branch master set up to track remote branch master from origin.\n"
"~~~"
msgstr ""

#: git-novice/_episodes/07-github.md:128
msgid ""
">\n"
"> If the network you are connected to uses a proxy, there is a chance that "
"your\n"
"> last command failed with \"Could not resolve hostname\" as the error "
"message. To\n"
"> solve this issue, you need to tell Git about the proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy http://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you connect to another network that doesn't use a proxy, you will "
"need to\n"
"> tell Git to disable the proxy using:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Si la red a la que estás conectado usa un proxy es posible que tu último\n"
"> comando fallara con el siguiente mensaje de error: \"Could not resolve "
"hostname\".\n"
"> Para solucionarlo es necesario informar a Git sobre el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy http://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Si después te conectas a otra red que no usa un proxy es necesario "
"decirle\n"
"> a Git que deshabilite el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:149
msgid "> ## Password Managers"
msgstr "> ## Gestores de contraseñas"

#: git-novice/_episodes/07-github.md:150
msgid ""
">\n"
"> If your operating system has a password manager configured, `git push` "
"will\n"
"> try to use it when it needs your username and password.  For example, "
"this\n"
"> is the default behavior for Git Bash on Windows. If you want to type your\n"
"> username and password at the terminal instead of using a password "
"manager,\n"
"> type:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> in the terminal, before you run `git push`.  Despite the name, [git uses\n"
"> `SSH_ASKPASS` for all credential\n"
"> entry](https://git-scm.com/docs/gitcredentials#_requesting_credentials), "
"so\n"
"> you may want to unset `SSH_ASKPASS` whether you are using git via SSH or\n"
"> https.\n"
">\n"
"> You may also want to add `unset SSH_ASKPASS` at the end of your `~/."
"language-bashrc`\n"
"> to make git default to using the terminal for usernames and passwords."
msgstr ""
">\n"
"> Si tu sistema operativo tiene un gestor de contraseñas configurado, `git "
"push`\n"
"> intentará usarlo cuando necesite un nombre de usuario y contraseña. Al "
"menos\n"
"> ese es el comportamiento por defecto para Git.language-bash en Windows.\n"
"> Si quieres que haya que introducir el nombre de usuario y contraseña en la "
"terminal,\n"
"> en lugar de usar el gestor de contraseñas, hay que ejecutar el siguiente\n"
"> comando en la terminal antes de lanzar `git push`:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> A pesar de lo que se podría deducir por el nombre, [git usa `SSH_ASKPASS`\n"
"> para todas las peticiones de credenciales](http://git-scm.com/docs/"
"gitcredentials#_requesting_credentials),\n"
"> tanto si se está usando git vía SSH como si se está usando vía https, por "
"lo\n"
"> que es posible que quieras deshabilitarlo en ambos casos con `unset "
"SSH_ASKPASS` .\n"
">\n"
"> Otra alternativa es añadir `unset SSH_ASKPASS` al final de tu `~/.bashrc` "
"para que\n"
"> git use por defecto la terminal para los nombres de usuario y las "
"contraseñas."

#: git-novice/_episodes/07-github.md:172
msgid "Our local and remote repositories are now in this state:"
msgstr ""
"Nuestros repositorios local y remoto se encuentran ahora en el siguiente "
"estado:"

#: git-novice/_episodes/07-github.md:174
msgid ""
"![GitHub Repository After First Push](../fig/github-repo-after-first-push."
"svg)"
msgstr ""
"![Repositorio en GitHub después del primer envío](../fig/github-repo-after-"
"first-push.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:176
msgid "> ## The '-u' Flag"
msgstr "> ## La opción '-u'"

#: git-novice/_episodes/07-github.md:177
msgid ""
">\n"
"> You may see a `-u` option used with `git push` in some documentation.  "
"This\n"
"> option is synonymous with the `--set-upstream-to` option for the `git "
"branch`\n"
"> command, and is used to associate the current branch with a remote branch "
"so\n"
"> that the `git pull` command can be used without any arguments. To do "
"this,\n"
"> simply use `git push -u origin master` once the remote has been set up."
msgstr ""
">\n"
"> En la documentación puedes ver que en ocasiones se usa la opción `-u` con "
"el comando `git push`.\n"
"> Esta opción es sinónimo de la opción `--set-upstream-to` para el comando "
"`git branch` y se usa\n"
"> para asociar el **branch** actual con un **branch** remoto, de modo que el "
"comando `git pull`\n"
"> pueda usarse sin argumentos. Para hacer esto simplemente ejecuta `git push "
"-u origin master`\n"
"> una vez que el repositorio remoto haya sido creado."

#: git-novice/_episodes/07-github.md:185
msgid ""
"We can pull changes from the remote repository to the local one as well:"
msgstr ""
"También podemos hacer **pull**, es decir, traernos cambios desde el "
"repositorio remoto al repositorio local:"

# code block
#: git-novice/_episodes/07-github.md:187 git-novice/_episodes/08-collab.md:106
#: git-novice/_episodes/09-conflict.md:143
#: git-novice/_episodes/09-conflict.md:261
#: git-novice/_locale/es/_episodes/07-github.md:168
#: git-novice/_locale/es/_episodes/08-collab.md:92
#: git-novice/_locale/es/_episodes/09-conflict.md:137
#: git-novice/_locale/es/_episodes/09-conflict.md:255
msgid ""
"~~~\n"
"$ git pull origin master\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/07-github.md:192
#: git-novice/_locale/es/_episodes/07-github.md:173
msgid ""
"~~~\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Already up-to-date.\n"
"~~~"
msgstr ""

#: git-novice/_episodes/07-github.md:199
msgid ""
"Pulling has no effect in this case because the two repositories are already\n"
"synchronized.  If someone else had pushed some changes to the repository on\n"
"GitHub, though, this command would download them to our local repository."
msgstr ""
"En este caso, hacer **pull** no ha tenido ningún efecto porque los dos "
"repositorios están ya sincronizados. Por el contrario, si alguien antes "
"hubiera subido con **push** algunos cambios al repositorio en GitHub, este "
"comando los habría incorporado a nuestro repositorio local."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:203
msgid "> ## GitHub GUI"
msgstr "> ## Interfaz gráfica de GitHub"

#: git-novice/_episodes/07-github.md:204
msgid ""
">\n"
"> Browse to your `planets` repository on GitHub.\n"
"> Under the Code tab, find and click on the text that says \"XX commits"
"\" (where \"XX\" is some number).\n"
"> Hover over, and click on, the three buttons to the right of each commit.\n"
"> What information can you gather/explore from these buttons?\n"
"> How would you get that same information in the shell?\n"
">\n"
"> > ## Solution\n"
"> > The left-most button (with the picture of a clipboard) copies the full "
"identifier of the commit to the clipboard. In the shell, ```git log``` will "
"show you the full commit identifier for each commit.\n"
"> >\n"
"> > When you click on the middle button, you'll see all of the changes that "
"were made in that particular commit. Green shaded lines indicate additions "
"and red ones removals. In the shell we can do the same thing with ```git "
"diff```. In particular, ```git diff ID1..ID2``` where ID1 and ID2 are commit "
"identifiers (e.g. ```git diff a3bf1e5..041e637```) will show the differences "
"between those two commits.\n"
"> >\n"
"> > The right-most button lets you view all of the files in the repository "
"at the time of that commit. To do this in the shell, we'd need to checkout "
"the repository at that particular time. We can do this with ```git checkout "
"ID``` where ID is the identifier of the commit we want to look at. If we do "
"this, we need to remember to put the repository back to the right state "
"afterwards!"
msgstr ""
">\n"
"> Navega hasta tu repositorio `planets` en GitHub.\n"
"> En la pestaña Code, localiza el texto \"XX commits\" (donde \"XX\" es "
"algún número) y haz click en él.\n"
"> Mueve el cursor sobre los tres botones que hay a la derecha de cada "
"**commit**, y haz click en ellos.\n"
"> ¿Qué información puedes obtener/explorar con estos botones?\n"
"> ¿Cómo obtendrías la misma información en la terminal?\n"
">\n"
"> > ## Solución\n"
"> > El botón más a la izquierda (con el dibujo de un portapapeles) sirve "
"para copiar en el portapapeles el identificador completo del **commit** en "
"cuestión. En la terminal, ```git log``` muestra los identificadores "
"completos de cada **commit**.\n"
"> >\n"
"> > Haciendo click en el botón de en medio, se pueden ver todos los cambios "
"efectuados con el **commit** en cuestión. Las líneas verdes sombreadas "
"indican adiciones y las rojas eliminaciones. En la terminal se puede ver lo "
"mismo con ```git diff```. En particular, ```git diff ID1..ID2``` donde ID1 y "
"ID2 son identificadores de **commits** (e.g. ```git diff "
"a3bf1e5..041e637```) mostrará las diferencias entre esos dos **commits**.\n"
"> >\n"
"> > El botón más a la derecha permite ver todos los archivos que existían en "
"el repositorio en el momento del **commit** en cuestión. Para ver lo mismo "
"en la terminal sería necesario hacer **checkout** del repositorio a ese "
"momento del tiempo. Para ello se ejecutaría ```git checkout ID``` donde ID "
"es el identificador del **commit** que queremos investigar. ¡Si se hace esto "
"hay que acordarse luego de poner el repositorio de nuevo en el estado "
"correcto!"

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:220
msgid "> ## GitHub Timestamp"
msgstr "> ## Fecha y Hora en GitHub"

#: git-novice/_episodes/07-github.md:221
msgid ""
">\n"
"> Create a remote repository on GitHub.  Push the contents of your local\n"
"> repository to the remote.  Make changes to your local repository and push\n"
"> these changes.  Go to the repo you just created on GitHub and check the\n"
"> [timestamps]({{ page.root }}/reference#timestamp) of the files.  How does "
"GitHub record\n"
"> times, and why?\n"
">\n"
"> > ## Solution\n"
"> > GitHub displays timestamps in a human readable relative format (i.e. "
"\"22 hours ago\" or \"three weeks ago\"). However, if you hover over the "
"timestamp, you can see the exact time at which the last change to the file "
"occurred."
msgstr ""
">\n"
"> Crea un repositorio remoto en GitHub. Haz **push** de los contenidos de tu "
"repositorio local\n"
"> al remoto. Haz cambios en tu repositorio local y haz **push** de dichos "
"cambios.\n"
"> Ve al repo recién creado en GitHub y comprueba las fechas y horas, también "
"llamadas\n"
"> [timestamps]({{ page.root }}/reference/#timestamp) de los ficheros.  ¿Cómo "
"registra\n"
"> GitHub los tiempos, y por qué?\n"
">\n"
"> > ## Solución\n"
"> > Github muestra los tiempos en formato relativo legible para los humanos "
"(i.e. \"22 hours ago\" or \"three weeks ago\"). Sin embargo, si mueves el "
"cursor sobre un **timestamp**, podrás ver el tiempo exacto en el que se "
"realizó el último cambio al fichero."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:233
#: git-novice/_locale/es/_episodes/07-github.md:212
msgid "> ## Push vs. Commit"
msgstr ""

#: git-novice/_episodes/07-github.md:234
msgid ""
">\n"
"> In this lesson, we introduced the \"git push\" command.\n"
"> How is \"git push\" different from \"git commit\"?\n"
">\n"
"> > ## Solution\n"
"> > When we push changes, we're interacting with a remote repository to "
"update it with the changes we've made locally (often this corresponds to "
"sharing the changes we've made with others). Commit only updates your local "
"repository."
msgstr ""
">\n"
"> En esta lección hemos introducido el comando \"git push\".\n"
"> ¿En qué se diferencia \"git push\" de \"git commit\"?\n"
">\n"
"> > ## Solución\n"
"> > Cuando enviamos cambios con **push**, estamos interaccionando con un "
"repositorio remoto para actualizarlo con los cambios que hemos hecho "
"localmente (a menudo esto supone compartir con otros los cambios "
"realizados). Por el contrario, **commit** únicamente actualiza tu "
"repositorio local."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:243
msgid "> ## Fixing Remote Settings"
msgstr "> ## Corrigiendo ajustes en el repositorio remoto"

#: git-novice/_episodes/07-github.md:244
msgid ""
">\n"
"> It happens quite often in practice that you made a typo in the\n"
"> remote URL. This exercise is about how to fix this kind of issue.\n"
"> First start by adding a remote with an invalid URL:\n"
">\n"
"> ~~~\n"
"> git remote add broken https://github.com/this/url/is/invalid\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Do you get an error when adding the remote? Can you think of a\n"
"> command that would make it obvious that your remote URL was not\n"
"> valid? Can you figure out how to fix the URL (tip: use `git remote\n"
"> -h`)? Don't forget to clean up and remove this remote once you are\n"
"> done with this exercise.\n"
">\n"
"> > ## Solution\n"
"> > We don't see any error message when we add the remote (adding the remote "
"tells git about it, but doesn't try to use it yet). As soon as we try to use "
"```git push``` we'll see an error message. The command ```git remote set-"
"url``` allows us to change the remote's URL to fix it."
msgstr ""
">\n"
"> Es muy frecuente cometer un error al especificar la URL del repositorio "
"remoto.\n"
"> Este ejercicio trata de cómo corregir este tipo de errores.\n"
"> Empecemos por añadir un repositorio remoto con una URL inválida:\n"
">\n"
"> ~~~\n"
"> git remote add broken https://github.com/this/url/is/invalid\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Obtienes un error al añadir el repositorio remoto? ¿Se te ocurre algún\n"
"> comando que hiciera obvio que la URL de tu repositorio remoto no es \n"
"> válida? ¿Se te ocurre cómo corregir la URL? (pista: usa `git remote\n"
"> -h`). No olvides eliminar este repositorio remoto una vez que\n"
"> hayas terminado este ejercicio.\n"
">\n"
"> > ## Solución\n"
"> > No aparece ningún error cuando añadimos el repositorio remoto (añadir un "
"repositorio remoto informa a git sobre dicho repositorio, pero no intenta "
"usarlo todavía). Sí veremos un error en cuanto intentemos usarlo con ```git "
"push```. El comando ```git remote set-url``` nos permite cambiar la URL del "
"repositorio remoto para corregirla."

# blockquote, which can be cascaded
#: git-novice/_episodes/07-github.md:265
msgid "> ## GitHub License and README files"
msgstr "> ## Licencia GitHub y ficheros README"

#: git-novice/_episodes/07-github.md:266
msgid ""
">\n"
"> In this section we learned about creating a remote repository on GitHub, "
"but when you initialized your\n"
"> GitHub repo, you didn't add a README.md or a license file. If you had, "
"what do you think would have happened when\n"
"> you tried to link your local and remote repositories?\n"
">\n"
"> > ## Solution\n"
"> > In this case, since we already had a README file in our own (local) "
"repository, we'd see a merge conflict (when git realises that there are two "
"versions of the file and asks us to reconcile the differences)."
msgstr ""
">\n"
"> En esta sección hemos aprendido cómo crear un repositorio remoto en "
"GitHub, pero cuando lo hicimos\n"
"> no añadimos ningún fichero README.md ni ningún fichero de licencia. Si lo "
"hubiéramos hecho, ¿qué crees que habría sucedido\n"
"> cuando intentaste enlazar tus repositorios local y remoto?\n"
">\n"
"> > ## Solución\n"
"> > En este caso, puesto que ya teníamos un fichero README en nuestro propio "
"repositorio (local), habríamos visto un conficto de unión, conocido como "
"**merge conflict** (que es cuando git se da cuenta de que hay dos versiones "
"de un mismo fichero y nos pide que resolvamos las diferencias)."

# Front Matter
#: git-novice/_episodes/08-collab.md:1
msgid ""
"---\n"
"title: Collaborating\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use version control to collaborate with other people?\"\n"
"objectives:\n"
"- \"Clone a remote repository.\"\n"
"- \"Collaborate pushing to a common repository.\"\n"
"- \"Describe the basic collaborative workflow.\"\n"
"keypoints:\n"
"- \"`git clone` copies a remote repository to create a local repository with "
"a remote called `origin` automatically set up.\"\n"
"---"
msgstr ""
"---\n"
"title: Trabajos en colaboración\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo usar el control de versiones para colaborar con otras "
"personas?\" \n"
"objectives:\n"
"- Clonar un repositorio remoto.\n"
"- Colaborar en crear un repositorio común.\n"
"keypoints: \n"
"- '`git clone` copia un repositorio remoto para crear un repositorio local "
"llamado `origin` configurado automáticamente.'\n"
"---"

#: git-novice/_episodes/08-collab.md:15
msgid ""
"For the next step, get into pairs.  One person will be the \"Owner\" and the "
"other\n"
"will be the \"Collaborator\". The goal is that the Collaborator add changes "
"into\n"
"the Owner's repository. We will switch roles at the end, so both persons "
"will\n"
"play Owner and Collaborator."
msgstr ""
"Para el siguiente paso, formen parejas. Una persona será el \"dueño\" y la "
"otra el \"colaborador\". El objetivo es que el colaborador agregue cambios "
"al repositorio del dueño. Vamos a cambiar roles al final, de modo que ambas "
"personas puedan participar como dueño y colaborador"

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:20
msgid "> ## Practicing By Yourself"
msgstr "> ## Practicando por tu cuenta"

#: git-novice/_episodes/08-collab.md:21
msgid ""
">\n"
"> If you're working through this lesson on your own, you can carry on by "
"opening\n"
"> a second terminal window.\n"
"> This window will represent your partner, working on another computer. You\n"
"> won't need to give anyone access on GitHub, because both 'partners' are "
"you."
msgstr ""
">\n"
"> Si estás trabajando en esta lección por tu cuenta, puedes hacerlo abriendo "
"una segunda sesión en la \n"
"> ventana de la terminal. Esta ventana representará a tu compañero "
"trabajando en otra computadora. No necesitas darle acceso a nadie en GitHub, "
"pues tú serás ambos \"compañeros\"."

#: git-novice/_episodes/08-collab.md:28
msgid ""
"The Owner needs to give the Collaborator access.\n"
"On GitHub, click the settings button on the right,\n"
"then select Collaborators, and enter your partner's username."
msgstr ""
"El dueño debe dar acceso al colaborador. En GitHub, haz clic en el botón de "
"configuración arriba a la derecha,\n"
"luego selecciona \"Collaborators\" e ingresa el nombre de tu colaborador."

#: git-novice/_episodes/08-collab.md:32
#: git-novice/_locale/es/_episodes/08-collab.md:25
msgid "![Adding Collaborators on GitHub](../fig/github-add-collaborators.png)"
msgstr ""

#: git-novice/_episodes/08-collab.md:34
msgid ""
"To accept access to the Owner's repo, the Collaborator\n"
"needs to go to [https://github.com/notifications](https://github.com/"
"notifications).\n"
"Once there she can accept access to the Owner's repo."
msgstr ""
"Para aceptar la invitación de acceso al repositorio, el colaborador\n"
"debe ingresar a [https://github.com/notifications](https://github.com/"
"notifications).\n"
"Una vez allí, se puede aceptar la invitación a dicho repositorio."

#: git-novice/_episodes/08-collab.md:38
msgid ""
"Next, the Collaborator needs to download a copy of the Owner's repository to "
"her\n"
" machine. This is called \"cloning a repo\". To clone the Owner's repo into\n"
"her `Desktop` folder, the Collaborator enters:"
msgstr ""
"Luego, el colaborador debe descargar una copia del repositorio del dueño a "
"su máquina. Esto se conoce como \"clonar un repositorio\". Para clonar el "
"repositorio del dueño en su carpeta de `Desktop`, el colaborador debe "
"ejecutar las siguientes líneas:"

# code block
#: git-novice/_episodes/08-collab.md:42
#: git-novice/_locale/es/_episodes/08-collab.md:33
msgid ""
"~~~\n"
"$ git clone https://github.com/vlad/planets.git ~/Desktop/vlad-planets\n"
"~~~"
msgstr ""

#: git-novice/_episodes/08-collab.md:47
msgid "Replace 'vlad' with the Owner's username."
msgstr "Reemplaza 'vlad' con el nombre de usuario del dueño."

#: git-novice/_episodes/08-collab.md:49
#: git-novice/_locale/es/_episodes/08-collab.md:40
msgid "![After Creating Clone of Repository](../fig/github-collaboration.svg)"
msgstr ""

#: git-novice/_episodes/08-collab.md:51
msgid ""
"The Collaborator can now make a change in her clone of the Owner's "
"repository,\n"
"exactly the same way as we've been doing before:"
msgstr ""
"El colaborador puede ahora hacer cambios en la versión clonada del "
"repositorio del dueño, en la misma forma en que se hacían previamente:"

# code block
#: git-novice/_episodes/08-collab.md:54
#: git-novice/_locale/es/_episodes/08-collab.md:44
msgid ""
"~~~\n"
"$ cd ~/Desktop/vlad-planets\n"
"$ nano pluto.txt\n"
"$ cat pluto.txt\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/08-collab.md:61
#: git-novice/_locale/es/_episodes/08-collab.md:51
msgid ""
"~~~\n"
"It is so a planet!\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/08-collab.md:66
#: git-novice/_locale/es/_episodes/08-collab.md:56
msgid ""
"~~~\n"
"$ git add pluto.txt\n"
"$ git commit -m \"Add notes about Pluto\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/08-collab.md:72
#: git-novice/_locale/es/_episodes/08-collab.md:62
msgid ""
"~~~\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/08-collab.md:78
msgid "Then push the change to the *Owner's repository* on GitHub:"
msgstr ""
"Luego enviar los cambios hacia el *repositorio del dueño* en GitHub haciendo "
"**push**:"

# code block
#: git-novice/_episodes/08-collab.md:85
#: git-novice/_locale/es/_episodes/08-collab.md:75
msgid ""
"~~~\n"
"Counting objects: 4, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (2/2), done.\n"
"Writing objects: 100% (3/3), 306 bytes, done.\n"
"Total 3 (delta 0), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets.git\n"
"   9272da5..29aba7c  master -> master\n"
"~~~"
msgstr ""

#: git-novice/_episodes/08-collab.md:96
msgid ""
"Note that we didn't have to create a remote called `origin`: Git uses this\n"
"name by default when we clone a repository.  (This is why `origin` was a\n"
"sensible choice earlier when we were setting up remotes by hand.)"
msgstr ""
"Nota que no es necesario crear un directorio remoto llamado `origin`: Git "
"utiliza este nombre de manera automática cuando clonamos un repositorio. "
"(Esta es la razón por la cual `origin` era una opción sensata a la hora de "
"configurar directorios remotos a mano)."

#: git-novice/_episodes/08-collab.md:100
msgid ""
"Take a look to the Owner's repository on its GitHub website now (maybe you "
"need\n"
"to refresh your browser.) You should be able to see the new commit made by "
"the\n"
"Collaborator."
msgstr ""
"Ahora echa un vistazo al repositorio del dueño en su sitio de Github (quizá "
"debas actualizar la página). Deberás ver el nuevo **commit** hecho por el "
"colaborador."

#: git-novice/_episodes/08-collab.md:104
msgid ""
"To download the Collaborator's changes from GitHub, the Owner now enters:"
msgstr ""
"Para descargar los cambios hechos por el colaborador desde GitHub, el dueño "
"debe correr las siguientes líneas:"

# code block
#: git-novice/_episodes/08-collab.md:111
#: git-novice/_locale/es/_episodes/08-collab.md:97
msgid ""
"~~~\n"
"remote: Counting objects: 4, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 0), reused 3 (delta 0)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Updating 9272da5..29aba7c\n"
"Fast-forward\n"
" pluto.txt | 1 +\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 pluto.txt\n"
"~~~"
msgstr ""

#: git-novice/_episodes/08-collab.md:126
msgid ""
"Now the three repositories (Owner's local, Collaborator's local, and Owner's "
"on\n"
"GitHub) are back in sync."
msgstr ""
"Ahora hay tres repositorios sincronizados (el local del dueño, el local del "
"colaborador y el del dueño en GitHub)."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:129
msgid "> ## A Basic Collaborative Workflow"
msgstr "> ## Un flujo de trabajo colaborativo básico"

#: git-novice/_episodes/08-collab.md:130
msgid ""
">\n"
"> In practice, it is good to be sure that you have an updated version of "
"the\n"
"> repository you are collaborating on, so you should `git pull` before "
"making\n"
"> our changes. The basic collaborative workflow would be:\n"
">\n"
"> * update your local repo with `git pull origin master`,\n"
"> * make your changes and stage them with `git add`,\n"
"> * commit your changes with `git commit -m`, and\n"
"> * upload the changes to GitHub with `git push origin master`\n"
">\n"
"> It is better to make many commits with smaller changes rather than\n"
"> of one commit with massive changes: small commits are easier to\n"
"> read and review."
msgstr ""
"> \n"
"> Es considerado buena práctica estar seguro de que tienes una versión "
"actualizada del repositorio en el que colaboras. Para ello deberías hacer un "
"`git pull` antes de hacer cambios. El enfoque sería:\n"
"> * actualizar el repositorio local `git pull origin master`,\n"
"> * realizar cambios `git add`,\n"
"> * realizar un **commit** `git commit -m`, y\n"
"> * cargar las actualizaciones a GitHub con `git push origin master`\n"
"> \n"
"> Es mejor hacer varias actualizaciones pequeñas que un **commit** grande "
"con cambios enormes. **Commits** pequeños son más fáciles de leer y revisar."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:145
msgid "> ## Switch Roles and Repeat"
msgstr "> ## Cambiar roles"

#: git-novice/_episodes/08-collab.md:146
msgid ""
">\n"
"> Switch roles and repeat the whole process."
msgstr ""
">\n"
"> Cambien los roles y repitan todo el proceso."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:150
msgid "> ## Review Changes"
msgstr "> ## Revisar Cambios"

#: git-novice/_episodes/08-collab.md:151
msgid ""
">\n"
"> The Owner pushed commits to the repository without giving any information\n"
"> to the Collaborator. How can the Collaborator find out what has changed "
"with\n"
"> command line? And on GitHub?\n"
">\n"
"> > ## Solution\n"
"> > On the command line, the Collaborator can use ```git fetch origin "
"master```\n"
"> > to get the remote changes into the local repository, but without "
"merging\n"
"> > them. Then by running ```git diff master origin/master``` the "
"Collaborator\n"
"> > will see the changes output in the terminal.\n"
"> >\n"
"> > On GitHub, the Collaborator can go to their own fork of the repository "
"and\n"
"> > look right above the light blue latest commit bar for a gray bar saying\n"
"> > \"This branch is 1 commit behind Our-Repository:master.\" On the far "
"right of\n"
"> > that gray bar is a Compare icon and link. On the Compare page the\n"
"> > Collaborator should change the base fork to their own repository, then "
"click\n"
"> > the link in the paragraph above to \"compare across forks\", and "
"finally\n"
"> > change the head fork to the main repository. This will show all the "
"commits\n"
"> > that are different."
msgstr ""
">\n"
"> El dueño hace un **push** de los **commits** al repositorio sin dar "
"información al colaborador. ¿Cómo puede éste saberlo desde la linea de "
"comandos y desde GitHub?\n"
">\n"
"> > ## Solution\n"
"> > En la linea de comandos, el colaborador puede usar ```git fetch origin "
"master``` para acceder a los cambios remotos en el repositorio local, sin "
"hacer un **merge**. Luego, corriendo ```git diff master origin/master```, el "
"colaborador verá los cambios en la terminal.  \n"
"> > En GitHub, el colaborador puede realizar su propio **fork** y hallar la "
"barra gris que indica \"This branch is 1 commit behind Our-Respository:"
"master.\". Lejos, a la derecha de la barra gris, hay un link para comparar. "
"En la página para comparar, el colaborador debe cambiar el **fork** hacia su "
"propio repositorio, luego hacer click en el link para \"comparar entre forks"
"\" y, finalmente, cambiar el **fork** al repositorio principal. Esto "
"mostrará todos los **commits** que sean distintos."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:173
msgid "> ## Comment Changes in GitHub"
msgstr "> ## Comentar cambios en GitHub"

#: git-novice/_episodes/08-collab.md:174
msgid ""
">\n"
"> The Collaborator has some questions about one line change made by the "
"Owner and\n"
"> has some suggestions to propose.\n"
">\n"
"> With GitHub, it is possible to comment the diff of a commit. Over the line "
"of\n"
"> code to comment, a blue comment icon appears to open a comment window.\n"
">\n"
"> The Collaborator posts its comments and suggestions using GitHub interface."
msgstr ""
"> \n"
"> El colaborador podría tener algunas preguntas sobre cambios en una línea "
"hechos por el dueño. \n"
">\n"
"> Con GitHub, es posible comentar la diferencia en un **commit**. Sobre la "
"línea de código a comentar aparece un botón azul para abrir una ventana. \n"
">\n"
"> El colaborador puede escribir sus comentarios y sugerencias usando la "
"interfaz de GitHub."

# blockquote, which can be cascaded
#: git-novice/_episodes/08-collab.md:184
msgid "> ## Version History, Backup, and Version Control"
msgstr "> ## Historial de versiones, backup y control de versiones"

#: git-novice/_episodes/08-collab.md:185
msgid ""
">\n"
"> Some backup software can keep a history of the versions of your files. "
"They also\n"
"> allows you to recover specific versions. How is this functionality "
"different from version control?\n"
"> What are some of the benefits of using version control, Git and GitHub?"
msgstr ""
"> Algunos softwares que permiten hacer **backups** también permiten guardar "
"un historial de versiones y recuperar versiones específicas. ¿Cómo es esta "
"funcionalidad distinta del control de versiones? ¿Cuáles son los beneficios "
"de usar control de versiones, Git y GitHub? "

# Front Matter
#: git-novice/_episodes/09-conflict.md:1
msgid ""
"---\n"
"title: Conflicts\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"What do I do when my changes conflict with someone else's?\"\n"
"objectives:\n"
"- \"Explain what conflicts are and when they can occur.\"\n"
"- \"Resolve conflicts resulting from a merge.\"\n"
"keypoints:\n"
"- \"Conflicts occur when two or more people change the same file(s) at the "
"same time.\"\n"
"- \"The version control system does not allow people to overwrite each "
"other's changes blindly, but highlights conflicts so that they can be "
"resolved.\"\n"
"---"
msgstr ""
"---\n"
"title: Conflictos\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué hago cuando mis cambios entran en conflicto con los de otra persona?"
"\"\n"
"objectives:\n"
"- \"Explicar qué son los conflictos y cuándo pueden ocurrir.\"\n"
"- \"Resolver conflictos que resultan de una fusión.\"\n"
"keypoints:\n"
"- \"Los conflictos ocurren cuando dos o más personas cambian el mismo "
"archivo(s) al mismo tiempo.\"\n"
"- \"El sistema de control de versiones no permite a las personas "
"sobreescribir ciegamente los\n"
"cambios del otro, pero resalta los conflictos para poder resolverlos.\"\n"
"---"

#: git-novice/_episodes/09-conflict.md:15
msgid ""
"As soon as people can work in parallel, they'll likely step on each other's\n"
"toes.  This will even happen with a single person: if we are working on\n"
"a piece of software on both our laptop and a server in the lab, we could "
"make\n"
"different changes to each copy.  Version control helps us manage these\n"
"[conflicts]({{ page.root }}/reference#conflicts) by giving us tools to\n"
"[resolve]({{ page.root }}/reference#resolve) overlapping changes."
msgstr ""
"Tan pronto como podemos trabajar en paralelo, es probable que alquien "
"deshaga lo que otro hizo. Esto incluso es probable con una única persona: si "
"estamos trabajando en un software al mismo tiempo en nuestra computadora "
"portátil y un servidor en el laboratorio, podríamos hacer cambios diferentes "
"a cada copia del trabajo. El control de versiones nos ayuda a manejar estos "
"[confictos]({{ page.root }}/reference/#conflicts) al darnos herramientas "
"para [resolver]({{ page.root }}/reference/#resolve) cambios que se hayan "
"solapado. "

#: git-novice/_episodes/09-conflict.md:22
msgid ""
"To see how we can resolve conflicts, we must first create one.  The file\n"
"`mars.txt` currently looks like this in both partners' copies of our "
"`planets`\n"
"repository:"
msgstr ""
"Para ver cómo podemos resolver conflictos, primero debemos crear uno. "
"Actualmente, el archivo `mars.txt` se ve de la siguiente manera en dos "
"copias de diferentes compañeros en nuestro repositorio `planetas`:"

#: git-novice/_episodes/09-conflict.md:38
msgid "Let's add a line to one partner's copy only:"
msgstr ""
"Agreguemos una línea únicamente a la copia de uno de los dos compañeros:"

# code block
#: git-novice/_episodes/09-conflict.md:46
#: git-novice/_locale/es/_episodes/09-conflict.md:40
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to Wolfman's copy\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:54
msgid "and then push the change to GitHub:"
msgstr "y luego hacer `push` al cambio en GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:56
#: git-novice/_locale/es/_episodes/09-conflict.md:50
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/09-conflict.md:62
#: git-novice/_locale/es/_episodes/09-conflict.md:56
msgid ""
"~~~\n"
"[master 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/09-conflict.md:73
#: git-novice/_locale/es/_episodes/09-conflict.md:67
msgid ""
"~~~\n"
"Counting objects: 5, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 352 bytes, done.\n"
"Total 3 (delta 1), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets\n"
"   29aba7c..dabb4c8  master -> master\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:84
msgid ""
"Now let's have the other partner\n"
"make a different change to their copy\n"
"*without* updating from GitHub:"
msgstr ""
"Ahora haremos que el otro compañero\n"
"haga un cambio diferente a su copia\n"
"*sin* actualizar desde GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:94
#: git-novice/_locale/es/_episodes/09-conflict.md:88
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:102
msgid "We can commit the change locally:"
msgstr "Podemos hacer **commit** del cambio localmente"

# code block
#: git-novice/_episodes/09-conflict.md:104
#: git-novice/_locale/es/_episodes/09-conflict.md:98
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/09-conflict.md:110
#: git-novice/_locale/es/_episodes/09-conflict.md:104
msgid ""
"~~~\n"
"[master 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:116
msgid "but Git won't let us push it to GitHub:"
msgstr "pero Git no nos dejará hacer **push** en GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:123
#: git-novice/_locale/es/_episodes/09-conflict.md:117
msgid ""
"~~~\n"
"To https://github.com/vlad/planets.git\n"
" ! [rejected]        master -> master (non-fast-forward)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the tip of your current branch is "
"behind\n"
"hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\n"
"hint: before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:134
#: git-novice/_locale/es/_episodes/09-conflict.md:128
msgid "![The Conflicting Changes](../fig/conflict.svg)"
msgstr ""

#: git-novice/_episodes/09-conflict.md:136
msgid ""
"Git rejects the push because it detects that the remote repository has new "
"updates that have not been\n"
"incorporated into the local branch.\n"
"What we have to do is pull the changes from GitHub,\n"
"[merge]({{ page.root }}/reference#merge) them into the copy we're currently "
"working in,\n"
"and then push that.\n"
"Let's start by pulling:"
msgstr ""
"Git detecta que los cambios hechos en una copia se solapan con los cambios "
"hechos en la otra\n"
"y nos impide destruir nuestro trabajo previo.\n"
"Lo que debemos hacer es traer -`pull`- los cambios desde GitHub,\n"
"[unirlos]({{ page.root }}/reference/#merge) dentro de la copia en la que "
"estamos trabajando actualmente,\n"
"y luego hacer `push` al resultado.\n"
"Empecemos haciendo `pull` a lo siguiente:"

# code block
#: git-novice/_episodes/09-conflict.md:148
#: git-novice/_locale/es/_episodes/09-conflict.md:142
msgid ""
"~~~\n"
"remote: Counting objects: 5, done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 3 (delta 1), reused 3 (delta 1)\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:161
msgid ""
"The `git pull` detects a conflict.\n"
"The conflict is marked in the affected file:"
msgstr ""
"`git pull` nos dice que hay un conflicto,\n"
"y marca ese conflicto en el archivo afectado:"

# code block
#: git-novice/_episodes/09-conflict.md:169
#: git-novice/_locale/es/_episodes/09-conflict.md:163
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to Wolfman's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:181
msgid ""
"Our change is preceded by `<<<<<<< HEAD`.\n"
"Git has then inserted `=======` as a separator between the conflicting "
"changes\n"
"and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n"
"(The string of letters and digits after that marker\n"
"identifies the commit we've just downloaded.)"
msgstr ""
"Nuestro cambio —señalado en `HEAD`— es precedido por `<<<<<<<`.\n"
"Luego, Git insertó `=======` como un separador entre los cambios "
"conflictivos\n"
"y marcó el fin del contenido descargado desde GitHub con `>>>>>>>`.\n"
"(El código  de letras y números luego del marcador\n"
"identifica el **commit** que acabamos de descargar.)"

#: git-novice/_episodes/09-conflict.md:187
msgid ""
"It is now up to us to edit this file to remove these markers\n"
"and reconcile the changes.\n"
"We can do anything we want: keep the change made in the local repository, "
"keep\n"
"the change made in the remote repository, write something new to replace "
"both,\n"
"or get rid of the change entirely.\n"
"Let's replace both so that the file looks like this:"
msgstr ""
"Ahora debemos editar este archivo para eliminar estos marcadores\n"
"y reconciliar los cambios.\n"
"Podemos hacer lo que queramos: mantener el cambio hecho en el repositorio "
"local, mantener\n"
"el cambio hecho en el repositorio remoto, redactar algo nuevo para "
"reemplazar ambos,\n"
"o eliminar el cambio completamente.\n"
"Reemplacemos ambos de manera que el archivo quede así:"

# code block
#: git-novice/_episodes/09-conflict.md:199
#: git-novice/_episodes/09-conflict.md:287
#: git-novice/_locale/es/_episodes/09-conflict.md:193
#: git-novice/_locale/es/_episodes/09-conflict.md:281
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:207
msgid ""
"To finish merging,\n"
"we add `mars.txt` to the changes being made by the merge\n"
"and then commit:"
msgstr ""
"Para finalizar la unión,\n"
"agregamos `mars.txt` a los cambios hechos por el **merge**\n"
"y luego hacemos **commit**:"

# code block
#: git-novice/_episodes/09-conflict.md:211
#: git-novice/_locale/es/_episodes/09-conflict.md:205
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/09-conflict.md:217
msgid ""
"~~~\n"
"On branch master\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/09-conflict.md:229
#: git-novice/_locale/es/_episodes/09-conflict.md:223
msgid ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"
msgstr ""

# code block
#: git-novice/_episodes/09-conflict.md:234
#: git-novice/_locale/es/_episodes/09-conflict.md:228
msgid ""
"~~~\n"
"[master 2abf2b1] Merge changes from GitHub\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:239
msgid "Now we can push our changes to GitHub:"
msgstr "Ahora podemos hacer **push** a nuestros cambios en GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:246
#: git-novice/_locale/es/_episodes/09-conflict.md:240
msgid ""
"~~~\n"
"Counting objects: 10, done.\n"
"Delta compression using up to 4 threads.\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 697 bytes, done.\n"
"Total 6 (delta 2), reused 0 (delta 0)\n"
"To https://github.com/vlad/planets.git\n"
"   dabb4c8..2abf2b1  master -> master\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:257
msgid ""
"Git keeps track of what we've merged with what,\n"
"so we don't have to fix things by hand again\n"
"when the collaborator who made the first change pulls again:"
msgstr ""
"Git lleva el registro de qué hemos unificado con qué,\n"
"de manera que no debemos arreglar las cosas a mano nuevamente\n"
"cuando el colaborador que hizo el primer cambio hace **pull** de nuevo:"

# code block
#: git-novice/_episodes/09-conflict.md:266
#: git-novice/_locale/es/_episodes/09-conflict.md:260
msgid ""
"~~~\n"
"remote: Counting objects: 10, done.\n"
"remote: Compressing objects: 100% (4/4), done.\n"
"remote: Total 6 (delta 2), reused 6 (delta 2)\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            master     -> FETCH_HEAD\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"
msgstr ""

#: git-novice/_episodes/09-conflict.md:280
msgid "We get the merged file:"
msgstr "Obtenemos el archivo unificado:"

#: git-novice/_episodes/09-conflict.md:295
msgid ""
"We don't need to merge again because Git knows someone has already done that."
msgstr ""
"No es necesario unificar el contenido nuevamente porque Git sabe que alguien "
"ya ha hecho eso."

#: git-novice/_episodes/09-conflict.md:297
msgid ""
"Git's ability to resolve conflicts is very useful, but conflict resolution\n"
"costs time and effort, and can introduce errors if conflicts are not "
"resolved\n"
"correctly. If you find yourself resolving a lot of conflicts in a project,\n"
"consider these technical approaches to reducing them:"
msgstr ""
"La habilidad de Git de resolver conflictos es muy útil, pero la resolución "
"de conflictos\n"
"cuesta tiempo y esfuerzo, y puede introducir errores si los conflictos no "
"son resueltos\n"
"correctamente. Si te encuentras resolviendo muchos conflictos en un "
"proyecto\n"
"ten en cuenta estas aproximaciones técnicas para reducirlas:"

# unordered list
#: git-novice/_episodes/09-conflict.md:302
msgid ""
"- Pull from upstream more frequently, especially before starting new work"
msgstr ""
"- Hacer **pull** con mayor frecuencia, especialmente antes de empezar una "
"nueva tarea"

# unordered list
#: git-novice/_episodes/09-conflict.md:303
msgid "- Use topic branches to segregate work, merging to master when complete"
msgstr ""
"- Usar ramas temáticas para separar trabajo, uniéndolas a la rama principal "
"- `master`- cuando estén completas"

# unordered list
#: git-novice/_episodes/09-conflict.md:304
msgid "- Make smaller more atomic commits"
msgstr "- Hacer comentarios mas cortos y concisos"

# unordered list
#: git-novice/_episodes/09-conflict.md:305
msgid ""
"- Where logically appropriate, break large files into smaller ones so that "
"it is"
msgstr ""
"- Cuando sea apropiado, dividir archivos grandes en varios pequeños de "
"manera que sea"

#: git-novice/_episodes/09-conflict.md:306
msgid "  less likely that two authors will alter the same file simultaneously"
msgstr ""
"  menos probable que dos autores alteren el mismo archivo simultáneamente"

#: git-novice/_episodes/09-conflict.md:308
msgid "Conflicts can also be minimized with project management strategies:"
msgstr ""
"Los conflictos también pueden ser minimizados con estrategias de "
"administración de proyectos:"

# unordered list
#: git-novice/_episodes/09-conflict.md:310
msgid "- Clarify who is responsible for what areas with your collaborators"
msgstr "- Aclarar con tus colaboradores quién es responsable de cada área"

# unordered list
#: git-novice/_episodes/09-conflict.md:311
msgid ""
"- Discuss what order tasks should be carried out in with your collaborators "
"so"
msgstr ""
"- Discutir con tus colaboradores en qué orden deben realizarse las tareas "
"para que "

#: git-novice/_episodes/09-conflict.md:312
msgid ""
"  that tasks expected to change the same lines won't be worked on "
"simultaneously\n"
"- If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a\n"
"  project convention that is governing and use code style tools (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) to enforce, if necessary"
msgstr ""
"  las tareas que puedan cambiar las mismas líneas no se trabajen "
"simultáneamente. \n"
"- Si los conflictos son de estilo (e.g. tabulaciones vs. espacios), "
"establecer una\n"
"  convención que rija el proyecto y utilizar herramientas de estilo de "
"código (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) para forzarlas, si es necesario"

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:317
msgid "> ## Solving Conflicts that You Create"
msgstr "> ## Solucionando conflictos creados por ti"

#: git-novice/_episodes/09-conflict.md:318
msgid ""
">\n"
"> Clone the repository created by your instructor.\n"
"> Add a new file to it,\n"
"> and modify an existing file (your instructor will tell you which one).\n"
"> When asked by your instructor,\n"
"> pull her changes from the repository to create a conflict,\n"
"> then resolve it."
msgstr ""
">\n"
"> Clona el repositorio creado por tu instructor.\n"
"> Agrégale un nuevo archivo \n"
"> y modificar un archivo existente (tu instructor te dirá cuál).\n"
"> Cuando tu instructor te lo pida, \n"
"> trae los cambios -haciendo **pull**- desde el repositorio para crear un "
"conflicto,\n"
"> y luego resuélvelo."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:327
msgid "> ## Conflicts on Non-textual files"
msgstr "> ## Conflictos en archivos no textuales"

#: git-novice/_episodes/09-conflict.md:328
msgid ""
">\n"
"> What does Git do\n"
"> when there is a conflict in an image or some other non-textual file\n"
"> that is stored in version control?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Let's try it. Suppose Dracula takes a picture of Martian surface and\n"
"> > calls it `mars.jpg`.\n"
"> >\n"
"> > If you do not have an image file of Mars available, you can create\n"
"> > a dummy binary file like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ head --bytes 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` shows us that this created a 1-kilobyte file. It is full of\n"
"> > random bytes read from the special file, `/dev/urandom`.\n"
"> >\n"
"> > Now, suppose Dracula adds `mars.jpg` to his repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Suppose that Wolfman has added a similar picture in the meantime.\n"
"> > His is a picture of the Martian sky, but it is *also* called `mars."
"jpg`.\n"
"> > When Dracula tries to push, he gets a familiar message:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        master -> master (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets."
"git'\n"
"> > hint: Updates were rejected because the remote contains work that you "
"do\n"
"> > hint: not have locally. This is usually caused by another repository "
"pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote "
"changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for "
"details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We've learned that we must pull first and resolve any conflicts:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > When there is a conflict on an image or other binary file, git prints\n"
"> > a message like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            master     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  master     -> origin/master\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The conflict message here is mostly the same as it was for `mars.txt`, "
"but\n"
"> > there is one key additional line:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git cannot automatically insert conflict markers into an image as it "
"does\n"
"> > for text files. So, instead of editing the image file, we must check "
"out\n"
"> > the version we want to keep. Then we can add and commit this version.\n"
"> >\n"
"> > On the key line above, Git has conveniently given us commit identifiers\n"
"> > for the two versions of `mars.jpg`. Our version is `HEAD`, and "
"Wolfman's\n"
"> > version is `439dc8c0...`. If we want to use our version, we can use\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > If instead we want to use Wolfman's version, we can use `git checkout` "
"with\n"
"> > Wolfman's commit identifier, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can also keep *both* images. The catch is that we cannot keep them\n"
"> > under the same name. But, we can check out each version in succession\n"
"> > and *rename* it, then add the renamed versions. First, check out each\n"
"> > image and rename it:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Then, remove the old `mars.jpg` and add the two new files:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Now both images of Mars are checked into the repository, and `mars.jpg`\n"
"> > no longer exists."
msgstr ""
">\n"
"> ¿Qué hace Git \n"
"> cuando hay un conflicto en una imagen u otro archivo no de texto \n"
"> que está almacenado con control de versiones?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Intentémoslo. Supón que **Dracula** toma una foto de la superficie de "
"Marte y la llama `mars.jpg`.\n"
"> >\n"
"> > Si no tienes una imagen de Marte, puedes crear un archivo\n"
"> > binario de prueba de la siguiente manera:\n"
"> >\n"
"> > ~~~\n"
"> > $ head --bytes 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` nos muestra que se creó un archivo de 1-kilobyte. Está lleno de "
"bytes al azar\n"
"> > leídos a partir del archivo especial, `/dev/urandom`.\n"
"> >\n"
"> > Ahora, supón que **Dracula** agrega `mars.jpg` a su repositorio:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Supón que Wolfman agregó una imagen similar al mismo tiempo. \n"
"> > La suya es una imagen del cielo de Marte, pero *también* se llama `mars."
"jpg`.\n"
"> > Cuando **Dracula** intenta hacer push, recibe un mensaje familiar:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        master -> master (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets."
"git'\n"
"> > hint: Updates were rejected because the remote contains work that you "
"do\n"
"> > hint: not have locally. This is usually caused by another repository "
"pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote "
"changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for "
"details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Hemos aprendido que primero debemos hacer **pull** y resolver "
"conflictos:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Cuando hay un conflicto en una imagen u otro archivo binario, git "
"imprime\n"
"> > un mensaje así:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            master     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  master     -> origin/master\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > El mensaje informando el conflicto es básicamente el mismo que se "
"imprimió para `mars.txt`, pero\n"
"> > hay una línea adicional:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > Git no puede insertar indicadores de conflicto en una imagen como lo "
"hace en los\n"
"> > archivos de texto. Por lo tanto, en vez de editar la imagen, debemos "
"revisar la versión que \n"
"> > queremos mantener. Luego podemos agregar y hacer **commit** a esta "
"versión.\n"
"> >\n"
"> > En la línea agregada de arriba, Git convenientemente nos dio "
"identificadores de **commit**\n"
"> > para las dos versiones de `mars.jpg`. Nuestra versión es `HEAD`, y la de "
"Wolfman\n"
"> > es `439dc8c0...`. Si queremos usar nuestra versión, podemos usar\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > En cambio si queremos usar la versión de Wolfman, podemos usar `git "
"checkout` con\n"
"> > el identificador de **commit** de Wolfman, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > También podemos mantener *ambas* imágenes. La clave es que no podemos "
"mantenerlas con el mismo\n"
"> > nombre. Pero podemos verificar cada versión de forma sucesiva y "
"*renombrarla*, y luego agregar las versiones renombradas.\n"
"> > Primero, revisa cada imagen y renómbrala:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Luego, elimina la vieja imagen `mars.jpg` y agrega los dos archivos "
"nuevos:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ahora ambas imágenes de Marte estan ingresadas en el repositorio, y "
"`mars.jpg`\n"
"> > ya no existe."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:497
msgid "> ## A Typical Work Session"
msgstr "> ## Una típica sesión de trabajo"

#: git-novice/_episodes/09-conflict.md:498
msgid ""
">\n"
"> You sit down at your computer to work on a shared project that is tracked "
"in a\n"
"> remote Git repository. During your work session, you take the following\n"
"> actions, but not in this order:\n"
">\n"
"> - *Make changes* by appending the number `100` to a text file `numbers."
"txt`\n"
"> - *Update remote* repository to match the local repository\n"
"> - *Celebrate* your success with beer(s)\n"
"> - *Update local* repository to match the remote repository\n"
"> - *Stage changes* to be committed\n"
"> - *Commit changes* to the local repository\n"
">\n"
"> In what order should you perform these actions to minimize the chances of\n"
"> conflicts? Put the commands above in order in the *action* column of the "
"table\n"
"> below. When you have the order right, see if you can write the "
"corresponding\n"
"> commands in the *command* column. A few steps are populated to get you\n"
"> started.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . "
"|\n"
"> > "
"|-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin master`                     "
"|\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    "
"|\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        "
"|\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt"
"\"`     |\n"
"> > |5    | Update remote     | `git push origin master`                     "
"|\n"
"> > |6    | Celebrate!        | `AFK`                                        "
"|\n"
"> >"
msgstr ""
">\n"
"> Te sientas en tu computadora para trabajar en un proyecto compartido que "
"es mantenido en un\n"
"> repositorio Git remoto. Durante tu sesión de trabajo, realizas las "
"siguientes acciones, \n"
"> pero no en éste orden:\n"
">\n"
">\n"
"> - *Hacer cambios* agregando el número `100` al archivo de texto `numbers."
"txt`\n"
"> - *Actualizar repositorio remoto* para actualizar el repositorio local\n"
"> - *Celebrar* tu éxito con cerveza(s)\n"
"> - *Actualizar repositorio local* para actualizar el repositorio remoto\n"
"> - *Realizar cambios* con los cuales voy a hacer commit\n"
"> - *Hacer commit a los cambios* al repositorio local\n"
">\n"
"> ¿En qué orden deberías hacer estas acciones para minimizar la posibilidad "
"de conflictos?\n"
"> Pon los comandos de arriba en orden en la columna *acción* de la tabla de "
"abajo.\n"
"> Cuando tengas el orden correcto, ve si puedes escribir los comandos "
"correspondientes en la columna \n"
"> *comando*. Algunos campos ya están completados para ayudarte a \n"
"> comenzar.\n"
">\n"
"> |orden|acción . . . . . . . . . . |comando . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | ¡Celebrar!                | `AFK`                      |\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > |orden|acción . . . . . . . . . . |comando . . . . . . . . . . |\n"
"> > "
"|-----|-------------------|----------------------------------------------|\n"
"> > |1    | Actualizar repositorio local      | `git pull origin "
"master`                     |\n"
"> > |2    | Hacer cambios      | `echo 100 >> numbers."
"txt`                    |\n"
"> > |3    | Realizar cambios     | `git add numbers."
"txt`                        |\n"
"> > |4    | Hacer commit a los cambios   | `git commit -m \"Agregar 100 a "
"numbers.txt\"`     |\n"
"> > |5    | Actualizar repositorio remoto     | `git push origin "
"master`                     |\n"
"> > |6    | ¡Celebrar!        | `AFK`                                        "
"|\n"
"> >"

# Front Matter
#: git-novice/_episodes/10-open.md:1
msgid ""
"---\n"
"title: Open Science\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"How can version control help me make my work more open?\"\n"
"objectives:\n"
"- \"Explain how a version control system can be leveraged as an electronic "
"lab notebook for computational work.\"\n"
"keypoints:\n"
"- \"Open scientific work is more useful and more highly cited than closed."
"\"\n"
"---"
msgstr ""
"---\n"
"title: La ciencia abierta\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"¿Cómo un control de versiones me puede ayudar a tener mi trabajo más "
"abierto?\"\n"
"objectives:\n"
"- \"Explica como el control de versiones nos ayuda a tener un cuaderno "
"electrónico para todo nuestro trabajo computacional.\"\n"
"keypoints:\n"
"- \"Trabajo científico abierto es más útil y puede ser citado más que si no "
"lo es.\"\n"
"---"

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:13
msgid "> The opposite of \"open\" isn't \"closed\"."
msgstr "> Lo opuesto a \"abierto\" no es \"cerrado\". "

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:14
msgid "> The opposite of \"open\" is \"broken\"."
msgstr "> Lo opuesto a \"abierto\" es \"quebrado\"."

#: git-novice/_episodes/10-open.md:15
#: git-novice/_locale/es/_episodes/10-open.md:15
msgid ""
">\n"
"> --- John Wilbanks"
msgstr ""
">\n"
"> --- John Wilbanks"

# SC/DC Template label
#: git-novice/_episodes/10-open.md:17
#: git-novice/_locale/es/_episodes/10-open.md:17
msgid "{: .quotation}"
msgstr ""

#: git-novice/_episodes/10-open.md:19
msgid ""
"Free sharing of information might be the ideal in science,\n"
"but the reality is often more complicated.\n"
"Normal practice today looks something like this:"
msgstr ""
"El libre intercambio de información podría ser el ideal en Ciencia. Pero la "
"realidad, a menudo, es mucho más complicada.\n"
"En la práctica cotidiana vemos situaciones como la siguiente:  "

# unordered list
#: git-novice/_episodes/10-open.md:23
msgid "*   A scientist collects some data and stores it on a machine"
msgstr ""
"*   Una científica recoge algunos datos y los almacena en una máquina que "
"seguramente tiene en su oficina."

#: git-novice/_episodes/10-open.md:24
msgid ""
"    that is occasionally backed up by her department.\n"
"*   She then writes or modifies a few small programs\n"
"    (which also reside on her machine)\n"
"    to analyze that data.\n"
"*   Once she has some results,\n"
"    she writes them up and submits her paper.\n"
"    She might include her data—a growing number of journals require this—"
"but\n"
"    she probably doesn't include her code.\n"
"*   Time passes.\n"
"*   The journal sends her reviews written anonymously by a handful of other "
"people in her field.\n"
"    She revises her paper to satisfy them,\n"
"    during which time she might also modify the scripts she wrote earlier,\n"
"    and resubmits.\n"
"*   More time passes.\n"
"*   The paper is eventually published.\n"
"    It might include a link to an online copy of her data,\n"
"    but the paper itself will be behind a paywall:\n"
"    only people who have personal or institutional access\n"
"    will be able to read it."
msgstr ""
"*   Luego ella escribe y modifica unos pocos programas para analizar los "
"datos (los cuales residen en su computadora).\n"
"*   Una vez que tiene algunos resultados, ella escribe y presenta su "
"artículo. Podría incluir sus datos -en varias revistas que los requieran- "
"pero probablemente no incluya su código.\n"
"*   El tiempo pasa.\n"
"*   La revista envía las revisiones de un puñado de personas anónimas que "
"trabajan en su campo de actividad.\n"
"    Ella revisa su artículo para satisfacer las revisiones propuestas. "
"Durante ese tiempo ella también podría modificar los **scripts** que "
"escribió anteriormente, y vuelve a enviar.\n"
"*   Pasa más tiempo.\n"
"*   El artículo finalmente se publica. \n"
"*   Se podría incluir un enlace a una copia online de sus datos, pero el "
"mismo artículo está detrás de un sitio web de pago: sólo las personas que "
"tienen acceso personal o institucional serán capaces de leerlo."

#: git-novice/_episodes/10-open.md:44
msgid ""
"For a growing number of scientists,\n"
"though,\n"
"the process looks like this:"
msgstr "Para muchos otros científicos, el proceso abierto se ve así:"

# unordered list
#: git-novice/_episodes/10-open.md:48
msgid ""
"*   The data that the scientist collects is stored in an open access "
"repository"
msgstr ""
"*   Los datos que obtiene son almacenados, tan pronto como los colecta, en "
"un repositorio de acceso abierto, "

#: git-novice/_episodes/10-open.md:49
msgid ""
"    like [figshare](https://figshare.com/) or\n"
"    [Zenodo](https://zenodo.org), possibly as soon as it's collected,\n"
"    and given its own\n"
"    [Digital Object Identifier](https://en.wikipedia.org/wiki/"
"Digital_object_identifier) (DOI).\n"
"    Or the data was already published and is stored in\n"
"    [Dryad](https://datadryad.org/).\n"
"*   The scientist creates a new repository on GitHub to hold her work.\n"
"*   As she does her analysis,\n"
"    she pushes changes to her scripts\n"
"    (and possibly some output files)\n"
"    to that repository.\n"
"    She also uses the repository for her paper;\n"
"    that repository is then the hub for collaboration with her colleagues.\n"
"*   When she's happy with the state of her paper,\n"
"    she posts a version to [arXiv](https://arxiv.org/)\n"
"    or some other preprint server\n"
"    to invite feedback from peers.\n"
"*   Based on that feedback,\n"
"    she may post several revisions\n"
"    before finally submitting her paper to a journal.\n"
"*   The published paper includes links to her preprint\n"
"    and to her code and data repositories,\n"
"    which  makes it much easier for other scientists\n"
"    to use her work as starting point for their own research."
msgstr ""
" como puede ser [figshare](http://figshare.com/) o [Zenodo](http://zenodo."
"org), obteniendo su propio [Digital Object Identifier] (https://en.wikipedia."
"org/wiki/Digital_object_identifier) (DOI). O los datos que han sido "
"recientemente publicados, son almacenados en [Dryad](http://datadryad."
"org/).\n"
"*   La científica crea un nuevo repositorio en GitHub para guardar su "
"trabajo.\n"
"*   Al hacer su análisis de los datos, guarda los cambios de sus **scripts** "
"(y posiblemente algunos archivos de salida) en ese repositorio. También "
"utiliza el repositorio para su artículo. Entonces ese repositorio es el "
"centro de colaboración con sus colegas.\n"
"*   Cuando está satisfecha con el estado de su artículo, publica una versión "
"en [arXiv](http://arxiv.org/) o en algún otro servidor de preimpresión para "
"invitar a sus compañeros a una retroalimentación. \n"
"*   Basado en esa retroalimentación, puede escribir varias revisiones antes "
"de enviar finalmente su artículo a la revista. \n"
"*   El artículo publicado incluye enlaces a su preimpresión y a sus "
"repositorios de código y datos, lo que hace mucho más fácil para otros "
"científicos utilizar este trabajo como punto de partida para su propia "
"investigación."

#: git-novice/_episodes/10-open.md:74
msgid ""
"This open model accelerates discovery:\n"
"the more open work is,\n"
"[the more widely it is cited and re-used](https://doi.org/10.1371/journal."
"pone.0000308).\n"
"However,\n"
"people who want to work this way need to make some decisions\n"
"about what exactly \"open\" means and how to do it. You can find more on the "
"different aspects of Open Science in [this book](https://link.springer.com/"
"book/10.1007/978-3-319-00026-8)."
msgstr ""
"Este modelo abierto acelera la investigación: el trabajo abierto [se cita y "
"se reutiliza](http://dx.doi.org/10.1371/journal.pone.0000308). Sin embargo, "
"las personas que quieren trabajar de esta manera necesitan tomar algunas "
"decisiones sobre qué significa exactamente \"abierto\" y cómo hacerlo. "
"Puedes encontrar más información sobre los diferentes aspectos de la Ciencia "
"Abierta en [el libro](http://link.springer.com/"
"book/10.1007/978-3-319-00026-8)."

#: git-novice/_episodes/10-open.md:81
msgid ""
"This is one of the (many) reasons we teach version control.\n"
"When used diligently,\n"
"it answers the \"how\" question\n"
"by acting as a shareable electronic lab notebook for computational work:"
msgstr ""
"Ésta es una de las muchas razones por las que enseñamos el control de "
"versiones. Cuando se utiliza con diligencia, responde a \"cómo\" actúa un "
"cuaderno electrónico compartible:"

# unordered list
#: git-novice/_episodes/10-open.md:86
msgid ""
"*   The conceptual stages of your work are documented, including who did"
msgstr ""
"*   Las etapas conceptuales del trabajo están documentadas, incluyendo quién "
"hizo"

#: git-novice/_episodes/10-open.md:87
msgid ""
"    what and when. Every step is stamped with an identifier (the commit ID)\n"
"    that is for most intents and purposes unique.\n"
"*   You can tie documentation of rationale, ideas, and other\n"
"    intellectual work directly to the changes that spring from them.\n"
"*   You can refer to what you used in your research to obtain your\n"
"    computational results in a way that is unique and recoverable.\n"
"*   With a version control system such as Git, \n"
"    the entire history of the repository is easy to archive for perpetuity."
msgstr ""
" qué y cuándo se hizo. Cada paso está marcado con un identificador (el ID de "
"confirmación) de cada uno de los intentos y propósitos.\n"
"*   Puedes vincular tu documentación de ideas y otros trabajos intelectuales "
"directamente con los cambios que surgen de ellos.\n"
"*   Puedes referirte a lo que utilizaste en tu investigación para obtener "
"tus resultados computacionales de manera única y recuperable.\n"
"*   Con un sistema de control de versiones como Git, todo el historial del "
"repositorio es fácil de archivar para siempre."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:96
msgid "> ## Making Code Citable"
msgstr "> ## Haciendo código citable"

#: git-novice/_episodes/10-open.md:97
#: git-novice/_locale/es/_episodes/10-open.md:53
msgid ""
">\n"
"> Anything that is hosted in a version control repository (data, code, "
"papers, \n"
"> etc.) can be turned into a citable object. You'll learn how to do this in\n"
"> [lesson 12: Citation]({{ page.root }}/12-citation/)."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:103
msgid "> ## How Reproducible Is My Work?"
msgstr "> ## ¿Cuán reproducible es mi trabajo?"

#: git-novice/_episodes/10-open.md:104
msgid ""
">\n"
"> Ask one of your labmates to reproduce a result you recently obtained\n"
"> using only what they can find in your papers or on the web.\n"
"> Try to do the same for one of their results,\n"
"> then try to do it for a result from a lab you work with."
msgstr ""
">\n"
"> Pide a un compañero de laboratorio que reproduzca un resultado que "
"obtuviste \n"
"> utilizando sólo lo que está disponible en un documento publicado o en la "
"web.\n"
"> Luego, trata de hacer lo mismo con los resultados de tu labmate.\n"
"> Finalmente, reproducir los resultados de otro laboratorio."

# blockquote, which can be cascaded
#: git-novice/_episodes/10-open.md:111
msgid "> ## How to Find an Appropriate Data Repository?"
msgstr "> ## ¿Cómo encontrar un repositorio de datos adecuado?"

#: git-novice/_episodes/10-open.md:112
msgid ""
">\n"
"> Surf the internet for a couple of minutes and check out the data "
"repositories\n"
"> mentioned above: [Figshare](https://figshare.com/), [Zenodo](https://"
"zenodo.org),\n"
"> [Dryad](https://datadryad.org/). Depending on your field of research, you "
"might\n"
"> find community-recognized repositories that are well-known in your field.\n"
"> You might also find useful [these data repositories recommended by Nature]"
"(\n"
"> https://www.nature.com/sdata/data-policies/repositories).\n"
"> Discuss with your neighbor which data repository you might want to\n"
"> approach for your current project and explain why."
msgstr ""
">\n"
"> Navega por Internet durante un par de minutos y echa un vistazo a los "
"repositorios de datos mencionado anteriormente: [Figshare](http://figshare."
"com/), [Zenodo](http://zenodo.org), [Dryad](http://datadryad.org/). "
"Dependiendo de tu campo de investigación, encuentra repositorios reconocidos "
"por la comunidad en tu campo. También puede ser útil [estos repositorios de "
"datos recomendados por Nature](http://www.nature.com/sdata/data-policies/"
"repositories). Discute con tu vecino qué repositorio de datos deseas abordar "
"para tu proyecto actual y explicale por qué."

# Front Matter
#: git-novice/_episodes/11-licensing.md:1
msgid ""
"---\n"
"title: Licensing\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What licensing information should I include with my work?\"\n"
"objectives:\n"
"- \"Explain why adding licensing information to a repository is important."
"\"\n"
"- \"Choose a proper license.\"\n"
"- \"Explain differences in licensing and social expectations.\"\n"
"keypoints:\n"
"- \"People who incorporate General Public License (GPL'd) software into "
"their own software must make their software also open under the GPL license; "
"most other open licenses do not require this.\"\n"
"- \"The Creative Commons family of licenses allow people to mix and match "
"requirements and restrictions on attribution, creation of derivative works, "
"further sharing, and commercialization.\"\n"
"- \"People who are not lawyers should not try to write licenses from scratch."
"\"\n"
"---"
msgstr ""
"---\n"
"title: Licencia\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué información sobre licencias debería incluir en mi trabajo?\"\n"
"objectives:\n"
"- \"Explicar la importancia de agregar información de licencias a nuestro "
"repositorio de código.\"\n"
"- \"Escoger la licencia apropiada.\"\n"
"- \"Explicar las diferencias en licencias y algunas expectativas sociales."
"\"\n"
"keypoints:\n"
"- \"Las personas que usan la licencia **GPL** en su software tienen que "
"asegurarse de que toda la estructura esté bajo ésta licencia; muchas otras "
"licencias no requieren esto.\"\n"
"- \"La familia de licencias **Creative Commons** permite a las personas "
"adaptarse a varios requerimientos y restricciones de atribución, la creación "
"de trabajo derivado, compartir el trabajo, y comercialización.\"\n"
"- \"Personas sin conocimientos de leyes no deberían tratar de escribir "
"nuevas licencias desde cero.\"\n"
"---"

#: git-novice/_episodes/11-licensing.md:17
msgid ""
"When a repository with source code, a manuscript or other creative\n"
"works becomes public, it should include a file `LICENSE` or\n"
"`LICENSE.txt` in the base directory of the repository that clearly\n"
"states under which license the content is being made available. This\n"
"is because creative works are automatically eligible for intellectual\n"
"property (and thus copyright) protection. Reusing creative works\n"
"without a license is dangerous, because the copyright holders could\n"
"sue you for copyright infringement."
msgstr ""
"Cuando un repositorio público contiene código fuente, un manuscrito u otro "
"trabajo creativo, éste debe incluir un archivo con el nombre `LICENCIA` o "
"`LICENCIA.txt` en el directorio base del repositorio, que indique claramente "
"bajo qué licencia se pone a  disposición el contenido. Esto se debe a que la "
"protección de propiedad intelectual (y por lo tanto derechos de autor) se "
"aplica automáticamente a las obras creativas. La reutilización de trabajos "
"creativos sin licencia es peligrosa, ya que los titulares de los derechos de "
"autor podrían realizar una demanda por infringir la misma."

#: git-novice/_episodes/11-licensing.md:26
msgid ""
"A license solves this problem by granting rights to others (the\n"
"licensees) that they would otherwise not have. What rights are being\n"
"granted under which conditions differs, often only slightly, from one\n"
"license to another. In practice, a few licenses are by far the most\n"
"popular, and [choosealicense.com](https://choosealicense.com/) will\n"
"help you find a common license that suits your needs.  Important\n"
"considerations include:"
msgstr ""
"Una licencia resuelve el problema otorgando derechos a otros (los "
"licenciatarios) que de otro modo no tendrían. Los derechos que se otorgan y "
"bajo qué condiciones difieren, a menudo de forma leve, de una licencia a "
"otra. En la práctica, algunas licencias son las más populares, y el sitio "
"[choosealicense.com](http://choosealicense.com/) te ayudará a encontrar una "
"licencia que se adapte a tus necesidades. Las cosas importantes a considerar "
"son:"

# unordered list
#: git-novice/_episodes/11-licensing.md:34
msgid "* Whether you want to address patent rights."
msgstr "* Si deseas abordar los derechos de patente."

# unordered list
#: git-novice/_episodes/11-licensing.md:35
msgid "* Whether you require people distributing derivative works to also"
msgstr ""
"* Si necesitas personas que distribuyan los trabajos derivados de tu código "
"fuente."

#: git-novice/_episodes/11-licensing.md:36
msgid ""
"  distribute their source code.\n"
"* Whether the content you are licensing is source code.\n"
"* Whether you want to license the code at all."
msgstr ""
"* Si el contenido al que estás otorgando la licencia es código fuente.\n"
"* Si realmente deseas licenciar el código."

#: git-novice/_episodes/11-licensing.md:40
msgid ""
"Choosing a license that is in common use makes life easier for\n"
"contributors and users, because they are more likely to already be\n"
"familiar with the license and don't have to wade through a bunch of\n"
"jargon to decide if they're ok with it.  The [Open Source\n"
"Initiative](https://opensource.org/licenses) and [Free Software\n"
"Foundation](https://www.gnu.org/licenses/license-list.html) both\n"
"maintain lists of licenses which are good choices."
msgstr ""
"Elegir una licencia que sea de uso común hace la vida más fácil para los "
"contribuyentes y los usuarios, porque es probable que ya estén "
"familiarizados con la licencia y no tengan que sortear una jerga específica "
"para decidir si están de acuerdo con la licencia.\n"
"La [Iniciativa Open Source](http://opensource.org/licenses) y [Free Software "
"Foundation](http://www.gnu.org/licenses/license-list.html) mantienen listas "
"de licencias que pueden son buenas opciones a considerar."

#: git-novice/_episodes/11-licensing.md:48
msgid ""
"[This article](https://doi.org/10.1371/journal.pcbi.1002598) provides an "
"excellent overview of\n"
"licensing and licensing options from the perspective of scientists who\n"
"also write code."
msgstr ""
"Este artículo sobre [licencias de software](https://doi.org/10.1371/journal."
"pcbi.1002598) proporciona una excelente descripción de licencias y de "
"opciones de licencias desde la perspectiva de los científicos que también "
"escriben código."

#: git-novice/_episodes/11-licensing.md:52
msgid ""
"At the end of the day what matters is that there is a clear statement\n"
"as to what the license is. Also, the license is best chosen from the\n"
"get-go, even if for a repository that is not public. Pushing off the\n"
"decision only makes it more complicated later, because each time a new\n"
"collaborator starts contributing, they, too, hold copyright and will\n"
"thus need to be asked for approval once a license is chosen."
msgstr ""
"Al fin de cuentas, lo que importa es que haya información clara sobre cuál "
"es la licencia. Además, es mejor elegir la licencia desde el principio, "
"incluso si se trata de un repositorio que no es público. Retrasar la "
"decisión de sobre qué licencia elegir sólo complica las cosas más adelante, "
"porque cada vez que un nuevo colaborador comienza a contribuir, ellos "
"también tienen derechos de autor y, por lo tanto, se les debe pedir "
"aprobación una vez que se elige una licencia."

# blockquote, which can be cascaded
#: git-novice/_episodes/11-licensing.md:59
msgid "> ## Can I Use Open License?"
msgstr "> ## ¿Puedo usar una **Open License**?"

#: git-novice/_episodes/11-licensing.md:60
msgid ""
">\n"
"> Find out whether you are allowed to apply an open license to your "
"software.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"
msgstr ""
">\n"
"> Investiga si puedes usar una **Open license** o \"Licencia Abierta\" en tu "
"**software**. ¿Puedes hacer eso por tí mismo?, ¿o necesitas permiso de "
"alguien dentro de tu institución? Si necesitas permiso, ¿de quién?"

# blockquote, which can be cascaded
#: git-novice/_episodes/11-licensing.md:67
msgid "> ## What licenses have I already accepted?"
msgstr "> ## ¿Qué licencias ya he aceptado?"

#: git-novice/_episodes/11-licensing.md:68
msgid ""
">\n"
"> Many of the software tools we use on a daily basis (including in this "
"workshop) are\n"
"> released as open-source software. Pick a project on GitHub from the list "
"below, or\n"
"> one of your own choosing. Find its license (usually in a file called "
"`LICENSE` or\n"
"> `COPYING`) and talk about how it restricts your use of the software. Is it "
"one of\n"
"> the licenses discussed in this session? How is it different?\n"
"> - [Git](https://github.com/git/git), the source-code management tool\n"
"> - [CPython](https://github.com/python/cpython), the standard "
"implementation of the Python language\n"
"> - [Jupyter](https://github.com/jupyter), the project behind the web-based "
"Python notebooks we'll be using\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), a real-time "
"collaborative editor"
msgstr ""
">\n"
"> Muchas herramientas de **software** que usamos día a día (incluyendo las "
"herramientas en este **workshop**) son\n"
"> **open-source software**. Escoge uno de los proyectos de GitHub de la "
"lista de abajo, o algún otro que te interese. Encuentra la licencia "
"(usualmente es un archivo que se llama `LICENSE` o `COPYING`) y luego habla "
"con tus compañeros sobre como ésta licencia te permite o te restringe el uso "
"del **software**. ¿Es una de las licencias que hemos visto en esta sesión? "
"¿Qué tan diferente es ésta licencia?\n"
"> - [Git](https://github.com/git/git), herramientas para el manejo de código "
"fuente.\n"
"> - [CPython](https://github.com/python/cpython), implementación estándar "
"del lenguaje Python.\n"
"> - [Jupyter](https://github.com/jupyter), el proyecto que implementa "
"**notebooks** para correr Python en la **web** que usaremos en este "
"**workshop**.\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), un editor "
"colaborativo en tiempo real."

# Front Matter
#: git-novice/_episodes/12-citation.md:1
msgid ""
"---\n"
"title: Citation\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I make my work easier to cite?\"\n"
"objectives:\n"
"- \"Make your work easy to cite\"\n"
"keypoints:\n"
"- \"Add a CITATION file to a repository to explain how you want your work "
"cited.\"\n"
"---"
msgstr ""
"---\n"
"title: Ejemplo de Referencia o cita\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo hacer que mi trabajo sea más fácil de citar?\"\n"
"objectives:\n"
"- \"Haz que tu trabajo sea más fácil de citar\"\n"
"keypoints:\n"
"- \"Agrega un archivo CITATION al repositorio y explica cómo quieres que tu "
"trabajo sea citado.\"\n"
"---"

#: git-novice/_episodes/12-citation.md:13
msgid ""
"You may want to include a file called `CITATION` or `CITATION.txt`\n"
"that describes how to reference your project;\n"
"the [one for Software\n"
"Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/CITATION)\n"
"states:"
msgstr ""
"Te recomendamos que incluyas un archivo llamado `CITATION` o `CITATION.txt`\n"
"que describa cómo citar o referenciar tu proyecto.\n"
"La siguiente cita es de \n"
"[Software Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/"
"CITATION):"

# code block
#: git-novice/_episodes/12-citation.md:19
#: git-novice/_locale/es/_episodes/12-citation.md:18
msgid ""
"~~~\n"
"To reference Software Carpentry in publications, please cite both of the "
"following:\n"
"\n"
"Greg Wilson: \"Software Carpentry: Getting Scientists to Write Better\n"
"Code by Making Them More Productive\".  Computing in Science &\n"
"Engineering, Nov-Dec 2006.\n"
"\n"
"Greg Wilson: \"Software Carpentry: Lessons Learned\". arXiv:1307.5448,\n"
"July 2013.\n"
"\n"
"@article{wilson-software-carpentry-2006,\n"
"    author =  {Greg Wilson},\n"
"    title =   {Software Carpentry: Getting Scientists to Write Better Code "
"by Making Them More Productive},\n"
"    journal = {Computing in Science \\& Engineering},\n"
"    month =   {November--December},\n"
"    year =    {2006},\n"
"}\n"
"\n"
"@online{wilson-software-carpentry-2013,\n"
"  author      = {Greg Wilson},\n"
"  title       = {Software Carpentry: Lessons Learned},\n"
"  version     = {1},\n"
"  date        = {2013-07-20},\n"
"  eprinttype  = {arxiv},\n"
"  eprint      = {1307.5448}\n"
"}\n"
"~~~"
msgstr ""

# SC/DC Template label
#: git-novice/_episodes/12-citation.md:46
#: git-novice/_locale/es/_episodes/12-citation.md:45
msgid "{: .source}"
msgstr ""

#: git-novice/_episodes/12-citation.md:48
#: git-novice/_locale/es/_episodes/12-citation.md:47
msgid ""
"More detailed advice, and other ways to make your code citable can be found\n"
"[at the Software Sustainability Institute blog](https://www.software.ac.uk/"
"how-cite-and-describe-software) and in:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/12-citation.md:51
#: git-novice/_locale/es/_episodes/12-citation.md:50
msgid ""
">  Smith AM, Katz DS, Niemeyer KE, FORCE11 Software Citation Working Group. "
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/12-citation.md:52
#: git-novice/_locale/es/_episodes/12-citation.md:51
msgid ""
">  (2016) Software citation principles. [PeerJ Computer Science 2:e86]"
"(https://peerj.com/articles/cs-86/) https://doi.org/10.7717/peerj-cs.86"
msgstr ""

#: git-novice/_episodes/12-citation.md:54
#: git-novice/_locale/es/_episodes/12-citation.md:53
msgid ""
"There is also an [`@software{…`](https://www.google.de/search?q=git+citation+"
"%22%40software%7B%22) \n"
"[BibTeX](https://www.ctan.org/pkg/bibtex) entry type in case\n"
"no \"umbrella\" citation like a paper or book exists for the project you "
"want to\n"
"make citable."
msgstr ""

# Front Matter
#: git-novice/_episodes/13-hosting.md:1
msgid ""
"---\n"
"title: Hosting\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"Where should I host my version control repositories?\"\n"
"objectives:\n"
"- \"Explain different options for hosting scientific work.\"\n"
"keypoints:\n"
"- \"Projects can be hosted on university servers, on personal domains, or on "
"public forges.\"\n"
"- \"Rules regarding intellectual property and storage of sensitive "
"information apply no matter where code and data are hosted.\"\n"
"---"
msgstr ""
"---\n"
"title: Hospedaje\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Dónde debería alojar mis repositorios de control de versiones?\"\n"
"objectives:\n"
"- \"Explicar diferentes opciones para realizar trabajos científicos.\"\n"
"keypoints:\n"
"- \"Los proyectos pueden alojarse en servidores de la universidad, en "
"dominios personales o públicas.\"\n"
"- \"Las reglas con respecto a la propiedad intelectual y el almacenamiento "
"de información confidencial se aplican sin importar dónde se alojan el "
"código y los datos.\"\n"
"---"

#: git-novice/_episodes/13-hosting.md:14
msgid ""
"The second big question for groups that want to open up their work is where "
"to\n"
"host their code and data.  One option is for the lab, the department, or "
"the\n"
"university to provide a server, manage accounts and backups, and so on.  "
"The\n"
"main benefit of this is that it clarifies who owns what, which is "
"particularly\n"
"important if any of the material is sensitive (i.e., relates to experiments\n"
"involving human subjects or may be used in a patent application).  The main\n"
"drawbacks are the cost of providing the service and its longevity: a "
"scientist\n"
"who has spent ten years collecting data would like to be sure that data "
"will\n"
"still be available ten years from now, but that's well beyond the lifespan "
"of\n"
"most of the grants that fund academic infrastructure."
msgstr ""
"La segunda gran pregunta para los grupos que quieren liberar su trabajo es "
"dónde\n"
"hospedar su código y datos. Una opción es que el laboratorio, departamento o "
"la\n"
"universidad provean un servidor, gestionen cuentas y respaldos, etc. El "
"principal\n"
"beneficio de esto es que clarifica quién es dueño de qué, lo cual es "
"particularmente\n"
"importante si algún material es sensible (es decir, se relaciona a "
"experimentos\n"
"que involucran sujetos humanos o pueden ser usados en una patente). Las "
"principales\n"
"desventajas son el costo de proveer el servicio y su longevidad: un "
"científico\n"
"que ha pasado diez años colectando datos quisiera asegurarse de que estos "
"estarán\n"
"disponibles en diez años más, pero eso está más allá del tiempo de vida de "
"muchos \n"
"de los subsidios que financian la infraestructura académica."

#: git-novice/_episodes/13-hosting.md:25
msgid ""
"Another option is to purchase a domain and pay an Internet service provider\n"
"(ISP) to host it.  This gives the individual or group more control, and\n"
"sidesteps problems that can arise when moving from one institution to "
"another,\n"
"but requires more time and effort to set up than either the option above or "
"the\n"
"option below."
msgstr ""
"Otra opción es comprar un dominio y pagar a un Proveedor de Servicios de "
"Internet\n"
"(ISP por sus siglas en inglés) para hospedarlo. Esto da al individuo o grupo "
"mayor\n"
"control, y le da la vuelta a problemas que pueden surgir cuando se cambien "
"de una \n"
"institución a otra, pero requiere más tiempo y esfuerzo para configurar que "
"la\n"
"opción anterior o siguiente."

#: git-novice/_episodes/13-hosting.md:31
msgid ""
"The third option is to use a public hosting service like\n"
"[GitHub](https://github.com), [GitLab](https://gitlab.com),or\n"
"[BitBucket](https://bitbucket.org).\n"
"Each of these services provides a web interface that enables people to "
"create,\n"
"view, and edit their code repositories.  These services also provide\n"
"communication and project management tools including issue tracking, wiki "
"pages,\n"
"email notifications, and code reviews.  These services benefit from "
"economies of\n"
"scale and network effects: it's easier to run one large service well than to "
"run\n"
"many smaller services to the same standard.  It's also easier for people to\n"
"collaborate.  Using a popular service can help connect your project with\n"
"communities already using the same service."
msgstr ""
"La tercera opción es utilizar un servicio de hospedaje público como\n"
"[GitHub](http://github.com), [GitLab](http://gitlab.com),\n"
"[BitBucket](http://bitbucket.org) o [SourceForge](http://sourceforge.net).\n"
"Cada uno de estos servicios provee una interfaz web que permite a las "
"personas\n"
"crear, ver y editar sus repositorios de código. Estos servicios también "
"proveen \n"
"herramientas de comunicación y gestión de proyectos que incluyen "
"`seguimiento de problemas`,\n"
"páginas wiki, notificaciones de correo electrónico y revisiones de código. "
"Estos\n"
"servicios se benefician de economías de escalamiento y efectos de redes: es "
"más\n"
"fácil correr un servicio grande bien que correr varios pequeños servicios "
"al\n"
"mismo estándar. También es más fácil para la gente colaborar. Usando un "
"servicio \n"
"popular puede ayudar a conectar tu proyecto con una comunidad que ya está "
"usando el\n"
"mismo servicio."

#: git-novice/_episodes/13-hosting.md:43
msgid ""
"As an example, Software Carpentry [is on\n"
"GitHub]({{ swc_github }}) where you can find the [source for this\n"
"page]({{page.root}}/_episodes/13-hosting.md).\n"
"Anyone with a GitHub account can suggest changes to this text."
msgstr ""
"Como un ejemplo, Software Carpentry [está en \n"
"GitHub]({{ swc_github }}), donde puedes encontrar el [código fuente para "
"esta\n"
"página](https://github.com/swcarpentry/git-novice-es/blob/gh-pages/"
"_episodes/13-hosting.md).\n"
"Cualquiera con una cuenta de GitHub puede sugerir cambios a este texto."

#: git-novice/_episodes/13-hosting.md:48
msgid ""
"Using large, well-established services can also help you quickly take "
"advantage\n"
"of powerful tools.  One such tool, continuous integration (CI), can\n"
"automatically run software builds and tests whenever code is committed or "
"pull\n"
"requests are submitted.  Direct integration of CI with an online hosting "
"service\n"
"means this information is present in any pull request, and helps maintain "
"code\n"
"integrity and quality standards.  While CI is still available in self-"
"hosted\n"
"situations, there is much less setup and maintenance involved with using an\n"
"online service.  Furthermore, such tools are often provided free of charge "
"to\n"
"open source projects, and are also available for private repositories for a "
"fee."
msgstr ""
"Usando servicios grandes y bien establecidos puede también ayudarte a tomar\n"
"ventaja rápidamente de herramientas poderosas tales como la Integración \n"
"Continua (CI por sus siglas en inglés). CI puede automaticamente construir "
"el ejecutable a partir del codigo fuente  y probar el \n"
"software automáticamente cada vez que se hace un `commit` o se somete un \n"
"`pull request`. La integración directa de CI con un servicio de hospedaje "
"en \n"
"línea significa que esta información está presente en cualquier `pull "
"request`\n"
"y ayudar a mantener la integridad y estándares de calidad del código. Si "
"bien\n"
"CI está disponible en situaciones de auto-hospedaje, hay menos configuración "
"y\n"
"mantenimiento al usar un servicio en línea. Más aún, estas herramientas "
"son \n"
"proporcionadas sin costo alguno para proyectos de código abierto y están "
"también\n"
"disponibles para repositorios privados por una cuota."

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:58
#: git-novice/_locale/es/_episodes/13-hosting.md:61
msgid "> ## Institutional Barriers"
msgstr ""

#: git-novice/_episodes/13-hosting.md:59
msgid ""
">\n"
"> Sharing is the ideal for science,\n"
"> but many institutions place restrictions on sharing,\n"
"> for example to protect potentially patentable intellectual property.\n"
"> If you encounter such restrictions,\n"
"> it can be productive to inquire about the underlying motivations and\n"
"> either to request an exception for a specific project or domain,\n"
"> or to push more broadly for institutional reform to support more open "
"science."
msgstr ""
">\n"
"> Compartir es el ideal de la ciencia,\n"
"> pero muchas instituciones imponen restricciones al compartir,\n"
"> por ejemplo para proteger propiedad intelectual potencialmente "
"patentable.\n"
"> Si encuentras tales restricciones,\n"
"> pudiera ser productivo indagar acerca de las motivaciones\n"
"> ya sea para solicitar una excepción para un proyecto específico o "
"dominio,\n"
"> o para impulsar una reforma institucional más amplia para el apoyo de la "
"ciencia abierta."

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:69
msgid "> ## Can My Work Be Public?"
msgstr "> ## ¿Mi Trabajo Puede Ser Público?"

#: git-novice/_episodes/13-hosting.md:70
msgid ""
">\n"
"> Find out whether you are allowed to host your work openly on a public "
"forge.\n"
"> Can you do this unilaterally,\n"
"> or do you need permission from someone in your institution?\n"
"> If so, who?"
msgstr ""
">\n"
"> Averigua si tienes permitido hospedar tu trabajo abiertamente en un "
"repositorio público.\n"
"> ¿Puedes hacer esto unilateralmente,\n"
"> o necesitas permiso de alguien en tu institución?\n"
"> Si ese es el caso, ¿de quién?"

# blockquote, which can be cascaded
#: git-novice/_episodes/13-hosting.md:77
msgid "> ## Where Can I Share My Work?"
msgstr "> ## ¿Dónde Puedo Compartir Mi Trabajo?"

#: git-novice/_episodes/13-hosting.md:78
msgid ""
">\n"
"> Does your institution have a repository or repositories that you can\n"
"> use to share your papers, data and software? How do institutional "
"repositories\n"
"> differ from services like [arXiV](https://arxiv.org/), [figshare](https://"
"figshare.com/), [GitHub](https://github.com/) or [GitLab](https://about."
"gitlab.com/)?"
msgstr ""
">\n"
"> ¿Tu institución tiene un repositorio(s) donde puedas compartir tus \n"
"> artículos, datos y software? ¿Cómo los repositorios institucionales\n"
"> difieren de servicios como [arXiV](http://arxiv.org/), [figshare](http://"
"figshare.com/) y [GitHub](http://github.com/)?"

# Front Matter
#: git-novice/_episodes/14-supplemental-rstudio.md:1
msgid ""
"---\n"
"title: \"Supplemental: Using Git from RStudio\"\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I use Git with RStudio?\"\n"
"objectives:\n"
"- \"Understand how to use Git from RStudio.\"\n"
"keypoints:\n"
"- \"Create an RStudio project\"\n"
"---"
msgstr ""
"---\n"
"title: Usando Git desde RStudio\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo usar Git desde RStudio?\"\n"
"objectives:\n"
"- \"Entender cómo usar Git desde RStudio.\"\n"
"keypoints:\n"
"- \"Crear un proyecto en RStudio\"\n"
"---"

#: git-novice/_episodes/14-supplemental-rstudio.md:13
msgid ""
"Version control can be very useful when developing data analysis scripts. "
"For\n"
"that reason, the popular development environment\n"
"RStudio for the R programming language has built-in\n"
"integration with Git. While some advanced Git features still require the\n"
"command-line, RStudio has a nice interface for many common Git operations."
msgstr ""
"Ya que el uso de control de versiones es muy útil cuando escribimos "
"**scripts**, entonces RStudio esta integrado con Git. Hay algunas otras mas "
"complejas funcionalidades de Git que solamente se pueden usar desde la "
"terminal, pero RStudio tiene una buena interfaz de trabajo para realizar las "
"operaciones más comunes de control de versiones."

#: git-novice/_episodes/14-supplemental-rstudio.md:19
msgid ""
"RStudio allows us to create a [project][rstudio-projects] associated with a\n"
"given directory to keep track of various related files. To be able to track "
"the\n"
"development of the project over time, to be able to revert to previous\n"
"versions, and to collaborate with others, we version control the Rstudio\n"
"project with Git. To get started using Git in RStudio, we create a new "
"project:"
msgstr ""
"RStudio te permite crear un proyecto [project][rstudio-projects] asociado a "
"un directorio determinado. Esta es una manera de hacer un seguimiento de los "
"archivos asociados al proyecto. Una manera de tener control de archivos es "
"mediante el uso de un programa de control de versiones. Para empezar a usar "
"RStudio para el control de versiones, comencemos por crear un nuevo proyecto:"

#: git-novice/_episodes/14-supplemental-rstudio.md:25
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:17
msgid "![](../fig/RStudio_screenshot_newproject.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:27
msgid ""
"This will open a dialog asking us how we want to create the project. We "
"have\n"
"some options here. Let's say that we want to use RStudio with the planets\n"
"repository that we already made. Since that repository lives in a directory "
"on\n"
"our computer, we choose the option \"Existing Directory\":"
msgstr ""
"Una nueva ventana se abrirá y preguntará cómo queremos crear el proyecto. "
"Tenemos\n"
"aquí varias opciones. Supongamos que queremos usar RStudio con el "
"repositorio de planetas\n"
"que ya hemos creado. Como ese repositorio ya está en una carpeta en tu "
"computadora,\n"
"podemos escoger la opción \"Existing Directory\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:32
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:24
msgid "![](../fig/RStudio_screenshot_existingdirectory.png)"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:34
msgid "> ## Do You See a \"Version Control\" Option?"
msgstr "> ## ¿Puedes ver la opción de \"Version Control\"?"

#: git-novice/_episodes/14-supplemental-rstudio.md:35
msgid ""
">\n"
"> Although we're not going to use it here, there should be a \"version "
"control\"\n"
"> option on this menu. That is what you would click on if you wanted to\n"
"> create a project on your computer by cloning a repository from GitHub.\n"
"> If that option is not present, it probably means that RStudio doesn't "
"know\n"
"> where your Git executable is. See\n"
"> [this page](https://stat545-ubc.github.io/git03_rstudio-meet-git.html)\n"
"> for some debugging advice. Even if you have Git installed, you may need\n"
"> to accept the XCode license if you are using macOS."
msgstr ""
">\n"
"> Aunque no vamos a usar ésta opción aquí, deberías poder ver una opción en "
"el menú que diga\n"
"> \"Version Control\". Esta es la opción que debes escoger cuando quieras "
"crear\n"
"> un proyecto en tu computadora mediante una clonación de un repositorio de "
"GitHub.\n"
"> Si esta opción no es visible, probablemente significa que RStudio no sabe\n"
"> donde está tu ejecutable de Git. Revisa\n"
"> [esta página](https://stat545-ubc.github.io/git03_rstudio-meet-git.html)\n"
"> para encontrar algunos consejos. Incluso después de instalar Git, si estás "
"usando MacOSX\n"
"> algunas veces puede ser necesario que tengas que aceptar la licencia de "
"XCode"

#: git-novice/_episodes/14-supplemental-rstudio.md:46
msgid ""
"Next, RStudio will ask which existing directory we want to use. Click\n"
"\"Browse...\" and navigate to the correct directory, then click \"Create "
"Project\":"
msgstr ""
"En el siguiente paso, RStudio va a preguntar cuál es la carpeta existente "
"que queremos usar. Haremos\n"
"click en el navegador de archivos para navegar a la carpeta correcta en tu "
"computadora, y luego haremos click en\n"
"\"Create Project\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:49
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:42
msgid "![](../fig/RStudio_screenshot_navigateexisting.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:51
msgid ""
"Ta-da! We have created a new project in RStudio within the existing planets\n"
"repository. Notice the vertical \"Git\" menu in the menu bar. RStudio has\n"
"recognized that the current directory is a Git repository, and gives us a\n"
"number of tools to use Git:"
msgstr ""
"¡Y ya está! Ahora tenemos un proyecto en R que contiene tu propio "
"repositorio. Fíjate que ahora en el menú aparece un botón con \"Git\" en "
"letras verticales. Esto significa que RStudio ha reconocido que ésta carpeta "
"es un repositorio de Git, así que te proporcionará las herramientas para "
"usar Git:"

#: git-novice/_episodes/14-supplemental-rstudio.md:56
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:46
msgid "![](../fig/RStudio_screenshot_afterclone.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:58
msgid ""
"To edit the existing files in the repository, we can click on them in the\n"
"\"Files\" panel on the lower right. Now let's add some additional "
"information\n"
"about Pluto:"
msgstr ""
"Para editar los archivos en tu repositorio, puedes hacer click en el archivo "
"desde el panel inferior izquierdo. Ahora vamos a añadir más información "
"sobre Plutón:"

#: git-novice/_episodes/14-supplemental-rstudio.md:62
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:50
msgid "![](../fig/RStudio_screenshot_editfiles.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:64
msgid ""
"Once we have saved our edited files, we can use RStudio to commit the "
"changes\n"
"by clicking on \"Commit...\" in the Git menu:"
msgstr ""
"Una vez que hemos guardado nuestros archivos editados, ahora podemos usar "
"RStudio para hacer permanentes los cambios. Usa el botón y haz clik a "
"\"Commit\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:67
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:54
msgid "![](../fig/RStudio_screenshot_commit.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:69
msgid ""
"This will open a dialogue where we can select which files to commit (by\n"
"checking the appropriate boxes in the \"Staged\" column), and enter a "
"commit\n"
"message (in the upper right panel). The icons in the \"Status\" column "
"indicate\n"
"the current status of each file. Clicking on a file shows information about\n"
"changes in the lower panel (using output of `git diff`). Once everything is "
"the\n"
"way we want it, we click \"Commit\":"
msgstr ""
"Esto abrirá una ventana donde puedes seleccionar qué archivos quieres hacer "
"**commit** (marca\n"
"las casillas en la columna \"Staged\") y luego escribe un mensaje para el "
"**commit** (en el panel\n"
"superior derecho). Los iconos en la columna \"Status\" indican el estado "
"actual de cada\n"
"archivo. También puedes ver los cambios de cada archivo haciendo click en su "
"nombre. Una vez\n"
"que todo esté de la forma que quieres, haz click en \"Commit\":"

#: git-novice/_episodes/14-supplemental-rstudio.md:76
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:62
msgid "![](../fig/RStudio_screenshot_review.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:78
msgid ""
"The changes can be pushed by selecting \"Push Branch\" from the Git menu. "
"There\n"
"are also options to pull from the remote repository, and to view the commit\n"
"history:"
msgstr ""
"Puedes subir los cambios seleccionando \"Push\" en el menú de Git. Allí hay "
"también\n"
"opciones para traer los cambios (hacer **pull**) desde una versión remota de "
"este repositorio, y ver\n"
"el historial de cambios realizados:"

#: git-novice/_episodes/14-supplemental-rstudio.md:82
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:68
msgid "![](../fig/RStudio_screenshot_history.png)"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:84
msgid "> ## Are the Push/Pull Commands Grayed Out?"
msgstr "> ¿Están los comandos **Push** y **Pull** en gris?"

#: git-novice/_episodes/14-supplemental-rstudio.md:85
msgid ""
">\n"
"> Grayed out Push/Pull commands generally mean that RStudio doesn't know "
"the\n"
"> location of your remote repository (e.g. on GitHub). To fix this, open a\n"
"> terminal to the repository and enter the command: `git push -u origin\n"
"> master`. Then restart RStudio."
msgstr ""
">\n"
"> Si este es el caso, generalmente significa que RStudio no sabe dónde están "
"las\n"
"> otras versiones de tu repositorio (por ejemplo, en GitHub).\n"
"> Para solucionar esto, abre una terminal, sitúate en el repositorio y luego "
"lanza el siguiente comando:\n"
"> `git push -u origin master`. Luego reinicia RStudio."

#: git-novice/_episodes/14-supplemental-rstudio.md:92
msgid ""
"If we click on \"History\", we can see a graphical version of what `git "
"log`\n"
"would tell us:"
msgstr ""
"Si hacemos click en el historial de cambios \"History\", podemos ver una "
"versión gráfica de lo\n"
"que obtendríamos con el comando `git log`:"

#: git-novice/_episodes/14-supplemental-rstudio.md:95
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:81
msgid "![](../fig/RStudio_screenshot_viewhistory.png)"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:97
msgid ""
"RStudio creates a number of files that it uses to keep track of a project. "
"We\n"
"often don't want to track these, in which case we add them to our `."
"gitignore`\n"
"file:"
msgstr ""
"RStudio crea algunos archivos que le ayudan a mantener un control de los "
"cambios en el proyecto. Normalmente no deseamos que Git los incluya en el "
"control de versiones, así que es una buena idea agregar sus nombres al `."
"gitignore`:"

#: git-novice/_episodes/14-supplemental-rstudio.md:101
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:85
msgid "![](../fig/RStudio_screenshot_gitignore.png)"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:103
msgid "> ## Tip: versioning disposable output"
msgstr ""
"> ## Tip: Control de versiones del output desechable (versioning disposable "
"output)"

#: git-novice/_episodes/14-supplemental-rstudio.md:104
msgid ""
">\n"
"> Generally you do not want to version control disposable output (or read-"
"only\n"
"> data). You should modify the `.gitignore` file to tell Git to ignore "
"these\n"
"> files and directories."
msgstr ""
">\n"
"> Generalmente tu no quieres hacer control de cambios o versiones de tus "
"output desechables  (o solo datos de lectura).\n"
"> Entonces, tu debes modificar el archivo `.gitignore` para decirle a Git "
"que ignore estos archivos\n"
"> y directorios. "

# blockquote, which can be cascaded
#: git-novice/_episodes/14-supplemental-rstudio.md:110
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:94
msgid "> ## Challenge"
msgstr ""

#: git-novice/_episodes/14-supplemental-rstudio.md:111
msgid ""
">\n"
"> 1. Create a new directory within your project called `graphs`.\n"
"> 2. Modify the `.gitignore` so that the `graphs` directory is not version "
"controlled.\n"
">\n"
"> Add the newly created folders to version control using\n"
"> the Git interface.\n"
">\n"
"> > ## Solution to Challenge\n"
"> >\n"
"> > This can be done with the command line:\n"
"> > ```\n"
"> > $ mkdir graphs\n"
"> > $ echo \"graphs/\" >> .gitignore\n"
"> > ```\n"
"> > {: . shell}"
msgstr ""
">\n"
"> 1. Crear un directorio dentro de tu proyecto llamado `graphs`.\n"
"> 2. Modificar el archivo `.gitignore`  para que contenga `graphs/`\n"
"> entonces este output desechable no estara **versioned**.\n"
">\n"
"> Agrega el folder recien creado al control de versiones usando la interface "
"de Git.\n"
">\n"
"> > ## Solucion del Challenge\n"
"> >\n"
"> > Esto puede ser realizado con los comandos de linea:\n"
"> > ```\n"
"> > $ mkdir graphs\n"
"> > $ echo \"graphs/\"> > .gitignore\n"
"> > ```\n"
"> > {: . shell}"

#: git-novice/_episodes/14-supplemental-rstudio.md:129
msgid ""
"There are many more features in the RStudio Git menu, but these should be\n"
"enough to get you started!"
msgstr ""
"Hay muchas más opciones que se pueden encontrar en la interfaz de RStudio,\n"
"pero las que hemos visto son suficientes para comenzar."

#: git-novice/_episodes/14-supplemental-rstudio.md:132
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:116
msgid ""
"[rstudio-projects]: https://support.rstudio.com/hc/en-us/articles/200526207-"
"Using-Projects"
msgstr ""

# Front Matter
#: git-novice/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""

#: git-novice/_extras/about.md:6 git-novice/_locale/es/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr ""

# Front Matter
#: git-novice/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /discuss/\n"
"---"
msgstr ""

# header
#: git-novice/_extras/discuss.md:7
msgid "## Frequently Asked Questions"
msgstr "## Preguntas frecuentes"

#: git-novice/_extras/discuss.md:9
msgid ""
"People often have questions about Git beyond the scope of the core "
"material.\n"
"Students who have completed the rest of the lessons might find value in "
"looking through the following topics."
msgstr ""
"La gente a menudo tiene preguntas sobre Git más allá del alcance del "
"material central.\n"
"Los estudiantes que han completado el resto de las lecciones pueden "
"encontrar valor al examinar los siguientes temas."

#: git-novice/_extras/discuss.md:12
msgid ""
"Note that since this material isn't essential for basic Git usage, it won't "
"be covered by the instructor."
msgstr ""
"Tenga en cuenta que dado que este material no es esencial para el uso básico "
"de Git, no será cubierto por el instructor."

# header
#: git-novice/_extras/discuss.md:14
msgid "## More Advanced Git Configuration"
msgstr "## Más configuración avanzada de Git"

#: git-novice/_extras/discuss.md:16
msgid ""
"In [Setting Up Git]({{ page.root }}/02-setup/),\n"
"we used `git config --global` to set some default options for Git.\n"
"It turns out that these configuration options get stored in your home "
"directory\n"
"in a plain text file called `.gitconfig`."
msgstr ""
"En [Configuración de Git]({{page.root}}/02-setup/),\n"
"usamos `git config --global` para establecer algunas opciones "
"predeterminadas para Git.\n"
"Resulta que estas opciones de configuración se almacenan en su directorio de "
"inicio\n"
"en un archivo de texto sin formato llamado `.gitconfig`."

# code block
#: git-novice/_extras/discuss.md:21 git-novice/_locale/es/_extras/discuss.md:21
msgid ""
"~~~\n"
"$ cat ~/.gitconfig\n"
"~~~"
msgstr ""

# code block
#: git-novice/_extras/discuss.md:26
msgid ""
"~~~\n"
"[user]\n"
"\tname = Vlad Dracula\n"
"\temail = vlad@tran.sylvan.ia\n"
"[color]\n"
"\tui = true\n"
"[core]\n"
"\teditor = nano\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:37
msgid ""
"This file can be opened in your preferred text editor.\n"
"(Note that it is recommended to continue using the `git config` command,\n"
"as this helps avoid introducing syntax errors.)"
msgstr ""
"Este archivo se puede abrir en su editor de texto preferido.\n"
"(Tenga en cuenta que se recomienda continuar usando el comando `git "
"config`,\n"
"ya que esto ayuda a evitar la introducción de errores de sintaxis)."

#: git-novice/_extras/discuss.md:41
msgid ""
"Eventually, you will want to start customizing Git's behaviour.\n"
"This can be done by adding more entries to your `.gitconfig`.\n"
"The available options are described in the manual:"
msgstr ""
"Eventualmente, querrás comenzar a personalizar el comportamiento de Git.\n"
"Esto se puede hacer agregando más entradas a su `.gitconfig`.\n"
"Las opciones disponibles se describen en el manual:"

# code block
#: git-novice/_extras/discuss.md:45 git-novice/_locale/es/_extras/discuss.md:45
msgid ""
"~~~\n"
"$ git config --help\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:50
msgid ""
"In particular, you might find it useful to add aliases.\n"
"These are like shortcuts for longer git commands.\n"
"For example, if you get sick of typing `git checkout` all the time,\n"
"you could run the command:"
msgstr ""
"En particular, puede resultarle útil agregar alias.\n"
"Estos son como accesos directos para comandos de git más largos.\n"
"Por ejemplo, si te cansas de escribir `git checkout` todo el tiempo,\n"
"podrías ejecutar el comando:"

# code block
#: git-novice/_extras/discuss.md:55 git-novice/_locale/es/_extras/discuss.md:55
msgid ""
"~~~\n"
"$ git config --global alias.co checkout\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:60
msgid ""
"Now if we return to the example from [Exploring History]({{ page.root }}/05-"
"history/) where we ran:"
msgstr ""
"Ahora, si volvemos al ejemplo de [Explorando el historial]({{ page."
"root }}/05-history/) where we ran:"

#: git-novice/_extras/discuss.md:67
msgid "we could now instead type:"
msgstr "ahora podríamos escribir:"

# code block
#: git-novice/_extras/discuss.md:69 git-novice/_locale/es/_extras/discuss.md:69
msgid ""
"~~~\n"
"$ git co f22b25e mars.txt\n"
"~~~"
msgstr ""

# header
#: git-novice/_extras/discuss.md:74
msgid "## Styling Git's Log"
msgstr "## Diseñando el registro de Git"

#: git-novice/_extras/discuss.md:76
msgid ""
"A good target for customization is output from the log.\n"
"The default log is quite verbose but gives no graphical hints\n"
"such as information about which commits were done locally\n"
"and which were pulled from remotes."
msgstr ""
"Un buen objetivo para la personalización sale del registro.\n"
"El registro predeterminado es bastante detallado pero no da pistas gráficas\n"
"como información sobre qué confirmaciones se realizaron localmente\n"
"y que fueron sacados de controles remotos."

#: git-novice/_extras/discuss.md:81
msgid ""
"You can use `git log --help` and `git config --help` to look for different "
"ways to change\n"
"the log output.\n"
"Try the following commands and see what effect they have:"
msgstr ""
"Puede usar `git log --help` y` git config --help` para buscar diferentes "
"formas de cambiar\n"
"la salida de registro.\n"
"Pruebe los siguientes comandos y vea qué efecto tienen:"

# code block
#: git-novice/_extras/discuss.md:85 git-novice/_locale/es/_extras/discuss.md:85
msgid ""
"~~~\n"
"$ git config --global alias.lg \"log --graph\"\n"
"$ git config --global log.abbrevCommit true\n"
"$ git config --global format.pretty oneline\n"
"$ git lg\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:93
msgid ""
"If you don't like the effects,\n"
"you can undo them with:"
msgstr ""
"Si no te gustan los efectos,\n"
"puedes deshacerlos con:"

# code block
#: git-novice/_extras/discuss.md:96 git-novice/_locale/es/_extras/discuss.md:96
msgid ""
"~~~\n"
"$ git config --global --unset alias.lg\n"
"$ git config --global --unset log.abbrevCommit\n"
"$ git config --global --unset format.pretty\n"
"~~~"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_extras/discuss.md:103
msgid "> ## Undoing Git Configuration Changes"
msgstr "> ## Deshacer cambios en la configuración de Git"

#: git-novice/_extras/discuss.md:104
msgid ""
">\n"
"> You can use the `--unset` flag to delete unwanted options from `."
"gitconfig`.\n"
"> Another way to roll back changes is to store your `.gitconfig` using Git.\n"
">\n"
"> For hints on what you might want to configure,\n"
"> go to GitHub and search for \"gitconfig\".\n"
"> You will find hundreds of repositories in which people have stored\n"
"> their own Git configuration files.\n"
"> Sort them by the number of stars and have a look at the top few.\n"
"> If you find some you like,\n"
"> please check that they're covered by an open source license before you "
"clone them."
msgstr ""
">\n"
"> Puede usar el indicador `--unset` para eliminar las opciones no deseadas "
"de` .gitconfig`.\n"
"> Otra forma de deshacer los cambios es almacenar su `.gitconfig` usando "
"Git.\n"
">\n"
"> Para sugerencias sobre lo que puede querer configurar,\n"
"> vaya a GitHub y busque \"gitconfig\".\n"
"> Encontrará cientos de repositorios en los que las personas han almacenado\n"
"> sus propios archivos de configuración de Git.\n"
"> Ordenarlos por el número de estrellas y echar un vistazo a los mejores.\n"
"> Si encuentras alguno que te guste,\n"
"> compruebe que estén cubiertos por una licencia de código abierto antes de "
"clonarlos."

# header
#: git-novice/_extras/discuss.md:117
msgid "## Non-text Files"
msgstr "## Archivos sin texto"

#: git-novice/_extras/discuss.md:119
msgid ""
"Recall when we discussed [Conflicts]({{ page.root }}/09-conflict/)\n"
"there was a challenge that asked,\n"
"\"What does Git do\n"
"when there is a conflict in an image or some other non-textual file\n"
"that is stored in version control?\""
msgstr ""
"Recordar cuando discutimos [Conflictos]({{page.root}}/09-conflict/)\n"
"hubo un desafío que preguntó,\n"
"\"¿Qué hace Git?\n"
"cuando hay un conflicto en una imagen o algún otro archivo no textual\n"
"que está almacenado en el control de la versión?\""

#: git-novice/_extras/discuss.md:125
msgid "We will now revisit this in more detail."
msgstr "Ahora revisitaremos esto con más detalle."

#: git-novice/_extras/discuss.md:127
msgid ""
"Many people want to version control non-text files, such as images, PDFs and "
"Microsoft Office or LibreOffice documents.\n"
"It is true that Git can handle these filetypes (which fall under the banner "
"of \"binary\" file types).\n"
"However, just because it *can* be done doesn't mean it *should* be done."
msgstr ""
"Muchas personas desean controlar versiones que no sean archivos de texto, "
"como imágenes, archivos PDF y documentos de Microsoft Office o LibreOffice.\n"
"Es cierto que Git puede manejar estos tipos de archivos (que caen bajo el "
"título de tipos de archivos \"binarios\").\n"
"Sin embargo, solo porque *se puede* hacer no significa que *se deba* hacer."

#: git-novice/_extras/discuss.md:131
msgid ""
"Much of Git's magic comes from being able to do line-by-line comparisons "
"(\"diffs\") between files.\n"
"This is generally easy for programming source code and marked up text.\n"
"For non-text files, a diff can usually only detect that the files have "
"changed\n"
"but can't say how or where."
msgstr ""
"Gran parte de la magia de Git proviene de poder hacer comparaciones línea "
"por línea (\"diffs\") entre archivos.\n"
"Esto es generalmente fácil para programar el código fuente y el texto "
"marcado.\n"
"Para archivos que no son de texto, un diff generalmente solo puede detectar "
"que los archivos han cambiado\n"
"pero no puedo decir cómo o dónde."

#: git-novice/_extras/discuss.md:136
msgid ""
"This has various impacts on Git's performance and will make it difficult to\n"
"compare different versions of your project."
msgstr ""
"Esto tiene varios impactos en el rendimiento de Git y hará que sea difícil\n"
"compare diferentes versiones de su proyecto."

#: git-novice/_extras/discuss.md:139
msgid ""
"For a basic example to show the difference it makes,\n"
"we're going to go see what would have happened if Dracula had tried\n"
"using outputs from a word processor instead of plain text."
msgstr ""
"Para un ejemplo básico para mostrar la diferencia que hace,\n"
"vamos a ver qué hubiera pasado si Drácula hubiera intentado\n"
"utilizando salidas de un procesador de texto en lugar de texto sin formato."

#: git-novice/_extras/discuss.md:143
msgid "Create a new directory and go into it:"
msgstr "Crea un nuevo directorio y entra en él:"

# code block
#: git-novice/_extras/discuss.md:145
#: git-novice/_locale/es/_extras/discuss.md:145
msgid ""
"~~~\n"
"$ mkdir planets-nontext\n"
"$ cd planets-nontext\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:151
msgid ""
"Use a program such as Microsoft Word or LibreOffice Writer to create a new "
"document.\n"
"Enter the same text that we began with before:"
msgstr ""
"Use un programa como Microsoft Word o LibreOffice Writer para crear un "
"documento nuevo.\n"
"Ingrese el mismo texto con el que comenzamos antes:"

#: git-novice/_extras/discuss.md:159
msgid ""
"Save the document into the `planets-nontext` directory with the name of "
"`mars.doc`.\n"
"Back in the terminal, run the usual commands for setting up a new Git "
"repository:"
msgstr ""
"Guarde el documento en el directorio `planets-nontext` con el nombre de "
"`mars.doc`.\n"
"De vuelta en la terminal, ejecute los comandos habituales para configurar un "
"nuevo repositorio de Git:"

# code block
#: git-novice/_extras/discuss.md:162
#: git-novice/_locale/es/_extras/discuss.md:162
msgid ""
"~~~\n"
"$ git init\n"
"$ git add mars.doc\n"
"$ git commit -m \"Starting to think about Mars\"\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:169
msgid ""
"Then make the same changes to `mars.doc` that we (or Vlad) previously made "
"to `mars.txt`."
msgstr ""
"Luego haga los mismos cambios a `mars.doc` que nosotros (o Vlad) previamente "
"hicimos a `mars.txt`."

#: git-novice/_extras/discuss.md:177
msgid ""
"Save and close the word processor.\n"
"Now see what Git thinks of your changes:"
msgstr ""
"Guarde y cierre el procesador de texto.\n"
"Ahora mira lo que Git piensa de tus cambios:"

# code block
#: git-novice/_extras/discuss.md:185
#: git-novice/_locale/es/_extras/discuss.md:185
msgid ""
"~~~\n"
"diff --git a/mars.doc b/mars.doc\n"
"index 53a66fd..6e988e9 100644\n"
"Binary files a/mars.doc and b/mars.doc differ\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:192
msgid "Compare this to the earlier `git diff` obtained when using text files:"
msgstr ""
"Compare esto con el anterior `git diff` obtenido al usar archivos de texto:"

#: git-novice/_extras/discuss.md:205
msgid ""
"Notice how plain text files give a much more informative diff.\n"
"You can see exactly which lines changed and what the changes were."
msgstr ""
"Observe cómo los archivos de texto plano dan una diferencia mucho más "
"informativa.\n"
"Puede ver exactamente qué líneas cambiaron y cuáles fueron los cambios."

#: git-novice/_extras/discuss.md:208
msgid ""
"An uninformative `git diff` is not the only consequence of using Git on "
"binary files.\n"
"However, most of the other problems boil down to whether or not a good diff "
"is possible."
msgstr ""
"Un `git diff` no informativo no es la única consecuencia de usar Git en "
"archivos binarios.\n"
"Sin embargo, la mayoría de los otros problemas se reducen a si es posible o "
"no una buena diferencia."

#: git-novice/_extras/discuss.md:211
msgid ""
"This isn't to say you should *never* use Git on binary files.\n"
"A rule of thumb is that it's OK if the binary file won't change very often,\n"
"and if it does change, you don't care about merging in small differences "
"between versions."
msgstr ""
"Esto no quiere decir que *nunca* debes usar Git en archivos binarios.\n"
"Una regla de oro es que está bien si el archivo binario no cambiará muy a "
"menudo,\n"
"y si cambia, no te importa fusionarte en pequeñas diferencias entre "
"versiones."

#: git-novice/_extras/discuss.md:215
msgid ""
"We've already seen how a word processed report will fail this test.\n"
"An example that passes the test is a logo for your organization or project.\n"
"Even though a logo will be stored in a binary format such as `jpg` or "
"`png`,\n"
"you can expect it will remain fairly static through the lifetime of your "
"repository.\n"
"On the rare occasion that branding does change,\n"
"you will probably just want to replace the logo completely rather than merge "
"little differences in."
msgstr ""
"Ya hemos visto cómo un informe procesado por palabra no pasará esta prueba.\n"
"Un ejemplo que pasa la prueba es un logotipo para su organización o "
"proyecto.\n"
"Aunque un logotipo se almacenará en un formato binario, como `jpg` o `png`,\n"
"puede esperar que permanezca bastante estático durante la vida útil de su "
"repositorio.\n"
"En la rara ocasión en que la marca cambia,\n"
"probablemente solo quiera reemplazar el logotipo por completo en lugar de "
"combinar pequeñas diferencias."

# header
#: git-novice/_extras/discuss.md:222
msgid "## Removing a File"
msgstr "## Eliminar un archivo"

#: git-novice/_extras/discuss.md:224
msgid ""
"Adding and modifying files are not the only actions one might take\n"
"when working on a project.  It might be required to remove a file\n"
"from the repository."
msgstr ""
"Agregar y modificar archivos no son las únicas acciones que uno podría "
"tomar\n"
"cuando se trabaja en un proyecto. Puede ser necesario para eliminar un "
"archivo\n"
"del repositorio."

#: git-novice/_extras/discuss.md:228
msgid "Create a new file for the planet Nibiru:"
msgstr "Crea un nuevo archivo para el planeta Nibiru:"

# code block
#: git-novice/_extras/discuss.md:230
#: git-novice/_locale/es/_extras/discuss.md:230
msgid ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:235
msgid "Now add to the repository like you have learned earlier:"
msgstr "Ahora agregue al repositorio como lo aprendió anteriormente:"

# code block
#: git-novice/_extras/discuss.md:237
#: git-novice/_locale/es/_extras/discuss.md:237
msgid ""
"~~~\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding info on nibiru'\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:250
msgid ""
"Nibiru is not a real planet.  That was a silly idea.  Let us remove\n"
"it from the disk and let Git know about it:"
msgstr ""
"Nibiru no es un planeta real. Esa fue una idea tonta. Vamos a eliminar\n"
"desde el disco y deja que Git lo sepa:"

# code block
#: git-novice/_extras/discuss.md:253 git-novice/_extras/discuss.md:318
#: git-novice/_locale/es/_extras/discuss.md:253
#: git-novice/_locale/es/_extras/discuss.md:318
msgid ""
"~~~\n"
"$ git rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_extras/discuss.md:259 git-novice/_extras/discuss.md:324
#: git-novice/_locale/es/_extras/discuss.md:259
#: git-novice/_locale/es/_extras/discuss.md:324
msgid ""
"~~~\n"
"On branch master\n"
"Changes to be committed:\n"
"   (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"   deleted:    nibiru.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:269
msgid ""
"The change has been staged.  Now commit the removal, and remove the\n"
"file from the repository itself.  Note that the file will be removed\n"
"in the new commit.  The previous commit will still\n"
"have the file, if you were to retrieve that specific commit."
msgstr ""
"El cambio ha sido organizado. Ahora comprometa la eliminación y elimine\n"
"archivo del propio repositorio. Tenga en cuenta que el archivo se eliminará\n"
"en el nuevo compromiso La confirmación anterior seguirá\n"
"tener el archivo, si fueras a recuperar esa confirmación específica."

# code block
#: git-novice/_extras/discuss.md:274
#: git-novice/_locale/es/_extras/discuss.md:274
msgid ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru.  It is not a real planet!'\n"
"~~~"
msgstr ""

# header
#: git-novice/_extras/discuss.md:279
msgid "## Removing a File with Unix"
msgstr "## Eliminar un archivo con Unix"

#: git-novice/_extras/discuss.md:281
msgid ""
"Sometimes we might forget to remove the file through Git. If you removed "
"the\n"
"file with Unix `rm` instead of using `git rm`, no worries,\n"
"Git is smart enough to notice the missing file. Let us recreate the file "
"and\n"
"commit it again."
msgstr ""
"A veces podríamos olvidar eliminar el archivo a través de Git. Si eliminaste "
"el\n"
"archivo con Unix `rm` en lugar de usar` git rm`, sin preocupaciones,\n"
"Git es lo suficientemente inteligente como para notar el archivo perdido. "
"Vamos a recrear el archivo y\n"
"cometerlo de nuevo."

# code block
#: git-novice/_extras/discuss.md:286
#: git-novice/_locale/es/_extras/discuss.md:286
msgid ""
"~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding nibiru again'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:293
msgid "Now we remove the file with Unix `rm`:"
msgstr "Ahora eliminamos el archivo con Unix `rm`:"

# code block
#: git-novice/_extras/discuss.md:295
#: git-novice/_locale/es/_extras/discuss.md:295
msgid ""
"~~~\n"
"$ rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_extras/discuss.md:301
#: git-novice/_locale/es/_extras/discuss.md:301
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"   (use \"git add/rm <file>...\" to update what will be committed)\n"
"   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"    deleted:    nibiru.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:313
msgid ""
"See how Git has noticed that the file `nibiru.txt` has been removed\n"
"from the disk.  The next step is to \"stage\" the removal of the file\n"
"from the repository.  This is done with the command `git rm` just as\n"
"before."
msgstr ""
"Vea cómo Git ha notado que el archivo `nibiru.txt` ha sido eliminado\n"
"del disco. El siguiente paso es \"escenificar\" la eliminación del archivo\n"
"del repositorio. Esto se hace con el comando `git rm` igual que\n"
"antes de."

#: git-novice/_extras/discuss.md:334
msgid ""
"The change that was made in Unix has now been staged and needs to be\n"
"committed."
msgstr ""
"El cambio que se hizo en Unix ahora se ha organizado y debe ser\n"
"comprometido."

# code block
#: git-novice/_extras/discuss.md:337
#: git-novice/_locale/es/_extras/discuss.md:337
msgid ""
"~~~\n"
"$ git commit -m 'Removing info on Nibiru, again!'\n"
"~~~"
msgstr ""

# header
#: git-novice/_extras/discuss.md:342
msgid "## Renaming a File"
msgstr "## Renombrar un archivo"

#: git-novice/_extras/discuss.md:344
msgid "Another common change when working on a project is to rename a file."
msgstr ""
"Otro cambio común cuando se trabaja en un proyecto es cambiar el nombre de "
"un archivo."

#: git-novice/_extras/discuss.md:346
msgid "Create a file for the planet Krypton:"
msgstr "Crea un archivo para el planeta Krypton:"

# code block
#: git-novice/_extras/discuss.md:348
#: git-novice/_locale/es/_extras/discuss.md:348
msgid ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:353
msgid "Add it to the repository:"
msgstr "Añádalo al repositorio:"

# code block
#: git-novice/_extras/discuss.md:355
#: git-novice/_locale/es/_extras/discuss.md:355
msgid ""
"~~~\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:361
msgid ""
"We all know that Superman moved to Earth.  Not that he had much\n"
"choice.  Now his home planet is Earth."
msgstr ""
"Todos sabemos que Superman se mudó a la Tierra. No es que tuviera mucho\n"
"elección. Ahora su planeta de origen es la Tierra."

#: git-novice/_extras/discuss.md:364
msgid "Rename the file `krypton.txt` to `earth.txt` with Git:"
msgstr "Cambie el nombre del archivo `krypton.txt` a` earth.txt` con Git:"

# code block
#: git-novice/_extras/discuss.md:366
#: git-novice/_locale/es/_extras/discuss.md:366
msgid ""
"~~~\n"
"$ git mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_extras/discuss.md:372
msgid ""
"~~~\n"
"# On branch master\n"
"# Changes to be committed:\n"
"#   (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#\trenamed:    krypton.txt -> earth.txt\n"
"#\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:381
msgid "The final step is commit our change to the repository:"
msgstr "El último paso es comprometer nuestro cambio al repositorio:"

# code block
#: git-novice/_extras/discuss.md:383
#: git-novice/_locale/es/_extras/discuss.md:383
msgid ""
"~~~\n"
"$ git commit -m 'Superman's home is now Earth'\n"
"~~~"
msgstr ""

# header
#: git-novice/_extras/discuss.md:388
msgid "## Renaming a File with Unix"
msgstr "## Renombrar un archivo con Unix"

#: git-novice/_extras/discuss.md:390
msgid ""
"If you forgot to use Git and you used Unix `mv` instead\n"
"of `git mv`, you will have a touch more work to do but Git will\n"
"be able to deal with it. Let's try again renaming the file,\n"
"this time with Unix `mv`. First, we need to recreate the\n"
"`krypton.txt` file:"
msgstr ""
"Si olvidó usar Git y usó Unix `mv` en su lugar\n"
"de `git mv`, tendrás un poco más de trabajo que hacer, pero Git lo hará\n"
"ser capaz de lidiar con eso. Intentemos nuevamente cambiar el nombre del "
"archivo,\n"
"esta vez con Unix `mv`. Primero, necesitamos recrear el\n"
"archivo `krypton.txt`:"

# code block
#: git-novice/_extras/discuss.md:396
#: git-novice/_locale/es/_extras/discuss.md:396
msgid ""
"~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton again.'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:403
msgid "Let us rename the file and see what Git can figured out by itself:"
msgstr ""
"Vamos a renombrar el archivo y ver lo que Git puede descifrar por sí mismo:"

# code block
#: git-novice/_extras/discuss.md:405
#: git-novice/_locale/es/_extras/discuss.md:405
msgid ""
"~~~\n"
"$ mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_extras/discuss.md:411
#: git-novice/_locale/es/_extras/discuss.md:411
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add/rm <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"        deleted:    krypton.txt\n"
"\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"    earth.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:428
msgid ""
"Git has noticed that the file `krypton.txt` has disappeared from the\n"
"file system and a new file `earth.txt` has showed up."
msgstr ""
"Git notó que el archivo `krypton.txt` ha desaparecido del\n"
"sistema de archivos y un nuevo archivo `earth.txt` ha aparecido."

#: git-novice/_extras/discuss.md:431
msgid "Add those changes to the staging area:"
msgstr "Agregue esos cambios al área de ensayo:"

# code block
#: git-novice/_extras/discuss.md:433
#: git-novice/_locale/es/_extras/discuss.md:433
msgid ""
"~~~\n"
"$ git add krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""

# code block
#: git-novice/_extras/discuss.md:439
#: git-novice/_locale/es/_extras/discuss.md:439
msgid ""
"~~~\n"
"On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    renamed:    krypton.txt -> earth.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:449
msgid ""
"Notice how Git has now figure out that the `krypton.txt` has not\n"
"disappeared it has simply been renamed."
msgstr ""
"Observe cómo Git ahora ha descubierto que el `krypton.txt` no tiene\n"
"desapareció simplemente ha sido renombrado."

#: git-novice/_extras/discuss.md:452
msgid "The final step, as before, is to commit our change to the repository:"
msgstr ""
"El último paso, como antes, es comprometer nuestro cambio al repositorio:"

# code block
#: git-novice/_extras/discuss.md:454
#: git-novice/_locale/es/_extras/discuss.md:454
msgid ""
"~~~\n"
"$ git commit -m 'Superman's home is Earth, told you before.'\n"
"~~~"
msgstr ""

# Front Matter
#: git-novice/_extras/figures.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Figures\n"
"permalink: /figures/\n"
"---"
msgstr ""

# Front Matter
#: git-novice/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"
msgstr ""

#: git-novice/_extras/guide.md:6
msgid ""
"Using a software tool to handle the versions of your project files\n"
"lets you focus on the more interesting/innovative aspects of your project."
msgstr ""
"Usar una herramienta de software para manejar las versiones de tus archivos "
"de proyecto\n"
"le permite enfocarse en los aspectos más interesantes / innovadores de su "
"proyecto."

# unordered list
#: git-novice/_extras/guide.md:9
msgid "*   Version control's advantages"
msgstr "* Ventajas del control de versiones"

# unordered list
#: git-novice/_extras/guide.md:10
msgid "    *   It's easy to set up"
msgstr "    * Es fácil de configurar "

# unordered list
#: git-novice/_extras/guide.md:11
msgid ""
"    *   Every copy of a Git repository is a full backup of a project and its "
"history"
msgstr ""
"    * Cada copia de un repositorio de Git es una copia de seguridad completa "
"de un proyecto y su historial"

# unordered list
#: git-novice/_extras/guide.md:12
msgid ""
"    *   A few easy-to-remember commands are all you need for most day-to-day "
"version control tasks"
msgstr ""
"    * Unos pocos comandos fáciles de recordar son todo lo que necesita para "
"la mayoría de las tareas cotidianas de control de versiones"

# unordered list
#: git-novice/_extras/guide.md:13
msgid ""
"    *   The [GitHub][github] hosting service provides a web-based "
"collaboration service"
msgstr ""
"    * El servicio de alojamiento [GitHub][github] proporciona un servicio de "
"colaboración basado en la web"

# unordered list
#: git-novice/_extras/guide.md:14
msgid "*   Two main concepts"
msgstr "* Dos conceptos principales"

# unordered list
#: git-novice/_extras/guide.md:15
msgid "    *   *commit*: a recorded set of changes in your project's files"
msgstr ""
"    * *commit*: un conjunto de cambios registrados en los archivos de su "
"proyecto"

# unordered list
#: git-novice/_extras/guide.md:16
msgid "    *   *repository*: the history of all your project's commits"
msgstr ""
"    * *repositorio*: el historial de todas las confirmaciones de su proyecto"

# unordered list
#: git-novice/_extras/guide.md:17
msgid "*   Why use GitHub?"
msgstr "* ¿Por qué usar GitHub?"

# unordered list
#: git-novice/_extras/guide.md:18
msgid "    *   No need for a server: easy to set up"
msgstr "    * No es necesario un servidor: fácil de configurar"

# unordered list
#: git-novice/_extras/guide.md:19
msgid ""
"    *   GitHub's strong community: your colleagues are probably already there"
msgstr ""
"    * Comunidad fuerte de GitHub: tus colegas probablemente ya estén allí"

# header
#: git-novice/_extras/guide.md:21
msgid "## Overall"
msgstr "## En general"

#: git-novice/_extras/guide.md:23
msgid ""
"Version control might be the most important topic we teach, but Git is\n"
"definitely the most complicated tool.  However, GitHub presently dominates "
"the\n"
"open software repository landscape, so the time and effort required to "
"teach\n"
"fundamental Git is justified and worthwhile."
msgstr ""
"El control de versiones podría ser el tema más importante que enseñamos, "
"pero Git es\n"
"Definitivamente la herramienta más complicada. Sin embargo, GitHub "
"actualmente domina el\n"
"abrir el panorama del repositorio de software, por lo que el tiempo y el "
"esfuerzo necesarios para enseñar\n"
"Git fundamental está justificado y vale la pena."

#: git-novice/_extras/guide.md:28
msgid ""
"Because of this complexity, we don't teach novice learners about many\n"
"interesting topics, such as branching, hashes, and commit objects."
msgstr ""
"Debido a esta complejidad, no enseñamos a los principiantes acerca de "
"muchos\n"
"temas interesantes, como ramificación, hash y commit de objetos."

#: git-novice/_extras/guide.md:31
msgid ""
"Instead we try to convince them that version control is useful for "
"researchers\n"
"working in teams or not, because it is"
msgstr ""
"En cambio, tratamos de convencerlos de que el control de versiones es útil "
"para los investigadores\n"
"trabajando en equipo o no, porque es"

# unordered list
#: git-novice/_extras/guide.md:34
msgid "*   a better way to \"undo\" changes,"
msgstr "* una mejor forma de \"deshacer\" cambios,"

# unordered list
#: git-novice/_extras/guide.md:35
msgid "*   a better way to collaborate than mailing files back and forth, and"
msgstr ""
"* una mejor manera de colaborar que enviar y recibir archivos por correo, y"

# unordered list
#: git-novice/_extras/guide.md:36
msgid ""
"*   a better way to share your code and other scientific work with the world."
msgstr ""
"* una mejor manera de compartir tu código y otro trabajo científico con el "
"mundo."

# header
#: git-novice/_extras/guide.md:38
msgid "## Teaching Notes"
msgstr "## Notas de enseñanza"

# unordered list
#: git-novice/_extras/guide.md:40
msgid ""
"*   You can \"split\" your shell so that recent commands remain in view "
"using [this](https://github.com/rgaiacs/swc-shell-split-window) script."
msgstr ""
"* Recursos para \"dividir\" su caparazón para que los comandos recientes "
"permanezcan a la vista: https://github.com/rgaiacs/swc-shell-split-window."

# unordered list
#: git-novice/_extras/guide.md:42
msgid "*   Make sure the network is working *before* starting this lesson."
msgstr ""
"* Asegúrese de que la red esté funcionando *antes* de comenzar esta lección."

# unordered list
#: git-novice/_extras/guide.md:44
msgid ""
"*   Drawings are particularly useful in this lesson: if you have a "
"whiteboard,"
msgstr ""
"* Los dibujos son particularmente útiles en esta lección: si tiene una "
"pizarra blanca,"

#: git-novice/_extras/guide.md:45
msgid "    [use it][drawings]!"
msgstr " [usarlo][dibujos]!"

# unordered list
#: git-novice/_extras/guide.md:47
msgid "*   Version control is usually not the first subject in a workshop,"
msgstr ""
"* El control de versiones generalmente no es el primer tema en un taller, "

#: git-novice/_extras/guide.md:48
msgid ""
"    so get learners to create a GitHub account after the session before.\n"
"    Remind learners that the username and email they use for GitHub (and "
"setup\n"
"    during Git configuration) will be viewable to the public by default.\n"
"    However, there are many reasons why a learner may not want their "
"personal\n"
"    information viewable, and GitHub has [resources for keeping an email "
"address\n"
"    private][github-privacy]."
msgstr ""
"así que haga que los alumnos creen una cuenta de GitHub después de la sesión "
"anterior. Recuerde a los alumnos que el nombre de usuario y el correo "
"electrónico que usan para GitHub (y configuración durante la configuración "
"de Git) será visible para el público de manera predeterminada. Sin embargo, "
"hay muchas razones por las cuales un alumno puede no querer su personal "
"información visible, y GitHub tiene [recursos para mantener una dirección de "
"correo electrónico privado][github-privacy]."

# unordered list
#: git-novice/_extras/guide.md:55
msgid "*   If some learners are using Windows, there will inevitably be issues"
msgstr "* Si algunos estudiantes usan Windows, inevitablemente habrá problemas"

#: git-novice/_extras/guide.md:56
msgid ""
"    merging files with different line endings.  (Even if everyone's on\n"
"    some flavor of Unix, different editors may or may not add a\n"
"    newline to the last line of a file.) Take a moment to explain\n"
"    these issues, since learners will almost certainly trip over them\n"
"    again.  If learners are running into line ending problems, GitHub\n"
"    has a [page][github-line-endings] that helps with troubleshooting."
msgstr ""
" fusionando archivos con diferentes finales de línea. (Incluso si todos "
"están encendidos un poco de sabor de Unix, diferentes editores pueden o no "
"agregar una nueva línea a la última línea de un archivo.) Tómese un momento "
"para explicar estos problemas, ya que los estudiantes seguramente tropezarán "
"con ellos de nuevo. Si los estudiantes se están encontrando con problemas "
"para terminar la línea, GitHub tiene una [página][github-line-endings] que "
"ayuda a solucionar problemas."

# unordered list
#: git-novice/_extras/guide.md:63
msgid ""
"*   We don't use a Git GUI in these notes because we haven't found one that"
msgstr ""
"* No usamos una GUI de Git en estas notas porque no hemos encontrado una que"

#: git-novice/_extras/guide.md:64
msgid ""
"    installs easily and runs reliably on the three major operating systems, "
"and\n"
"    because we want learners to understand what commands are being run.  "
"That\n"
"    said, instructors should demo a GUI on their desktop at some point "
"during\n"
"    this lesson and point learners at [this page][github-gui]."
msgstr ""
" se instala fácilmente y funciona confiablemente en los tres principales "
"sistemas operativos, y porque queremos que los alumnos entiendan qué "
"comandos se están ejecutando. Ese dijo, los instructores deberían demo una "
"GUI en su escritorio en algún momento durante esta lección y apunte a los "
"alumnos en [esta página][github-gui]."

# unordered list
#: git-novice/_extras/guide.md:69
msgid "*   Instructors should show learners graphical diff/merge tools like"
msgstr ""
"* Los instructores deben mostrar a los alumnos herramientas gráficas de "
"fusión / fusión como"

#: git-novice/_extras/guide.md:70
msgid "    [DiffMerge][diffmerge]."
msgstr " [DiffMerge][diffmerge]."

# unordered list
#: git-novice/_extras/guide.md:72
msgid ""
"*   When appropriate, explain that we teach Git rather than CVS, Subversion, "
"or"
msgstr ""
"* Cuando sea apropiado, explique que enseñamos a Git en lugar de CVS, "
"Subversion, "

#: git-novice/_extras/guide.md:73
msgid ""
"    Mercurial primarily because of GitHub's growing popularity: CVS and\n"
"    Subversion are now seen as legacy systems, and Mercurial isn't nearly "
"as\n"
"    widely used in the sciences right now."
msgstr ""
" o Mercurial principalmente debido a la creciente popularidad de GitHub: CVS "
"y Subversion ahora se ve como sistemas heredados, y Mercurial no es tan "
"ampliamente utilizado en las ciencias en este momento."

# unordered list
#: git-novice/_extras/guide.md:77
msgid "*   Further resources:"
msgstr "* Recursos adicionales:"

# unordered list
#: git-novice/_extras/guide.md:78
msgid "    *    [git-it][git-it] is a self-paced command-line Git demo,"
msgstr ""
"    * [git-it][git-it] es una demostración de Git de línea de comandos a tu "
"propio ritmo,"

#: git-novice/_extras/guide.md:79
msgid ""
"         with [git-it-electron][git-it-electron] its GitHub Desktop "
"successor.\n"
"    *    [Code School][code-school] has a free interactive course, [Try Git]"
"[try-git].\n"
"    *    for instructors, [the Git parable][git-parable] is useful "
"background reading"
msgstr ""
" con [git-it-electron][git-it-electron] su sucesor de GitHub Desktop.\n"
"    * [Code School][code-school] tiene un curso interactivo gratuito, [Try "
"Git][try-git].\n"
"    * para instructores, [la parábola de Git][git-parábola] es una lectura "
"de fondo útil"

# header
#: git-novice/_extras/guide.md:83
msgid "## [Automated Version Control]({{ page.root }}/01-basics/)"
msgstr "## [Control automatizado de versiones]({{page.root}}/01-basics/)"

# unordered list
#: git-novice/_extras/guide.md:85
msgid ""
"*   Ask, \"Who uses 'undo' in their editor?\" All say \"Me\". 'Undo' is the "
"simplest"
msgstr ""
"* Pregunte, \"¿Quién usa 'deshacer' en su editor?\" Todos dicen \"Yo\". "
"'Deshacer' es el más simple "

#: git-novice/_extras/guide.md:86
msgid "    form of version control."
msgstr "forma de control de versiones."

# unordered list
#: git-novice/_extras/guide.md:88
msgid ""
"*   Give learners a five-minute overview of what version control does for "
"them"
msgstr ""
"* Ofrezca a los alumnos una visión general de cinco minutos de lo que el "
"control de versión les hace "

#: git-novice/_extras/guide.md:89
msgid ""
"    before diving into the watch-and-do practicals.  Most of them will have\n"
"    tried to co-author papers by emailing files back and forth, or will "
"have\n"
"    biked into the office only to realize that the USB key with last "
"night's\n"
"    work is still on the kitchen table.  Instructors can also make jokes "
"about\n"
"    directories with names like \"final version\", \"final version revised"
"\",\n"
"    \"final version with reviewer three's corrections\", \"really final "
"version\",\n"
"    and, \"come on this really has to be the last version\" to motivate "
"version\n"
"    control as a better way to collaborate and as a better way to back work "
"up."
msgstr ""
" antes de zambullirte en las prácticas de vigilancia. La mayoría de ellos "
"tendrá intentó coautar documentos enviando archivos por correo electrónico, "
"o tendrá en bicicleta en la oficina solo para darse cuenta de que la llave "
"USB con la última noche el trabajo todavía está en la mesa de la cocina. Los "
"instructores también pueden hacer bromas sobre directorios con nombres como "
"\"versión final\", \"versión final revisada\", \"versión final con las "
"correcciones del revisor tres\", \"versión realmente final\", y, \"vamos, "
"realmente tiene que ser la última versión\" para motivar la versión control "
"como una mejor manera de colaborar y como una mejor manera de respaldar el "
"trabajo."

# header
#: git-novice/_extras/guide.md:98
msgid "## [Setting Up Git]({{ page.root }}/02-setup/)"
msgstr "## [Configuración de Git]({{page.root}}/02-setup/)"

# unordered list
#: git-novice/_extras/guide.md:100
msgid ""
"*   We suggest instructors and students use `nano` as the text editor for "
"this"
msgstr ""
"* Sugerimos que los instructores y los estudiantes usen `nano` como editor "
"de texto para este "

#: git-novice/_extras/guide.md:101
msgid "    lessons because"
msgstr " lecciones porque"

# unordered list
#: git-novice/_extras/guide.md:103
msgid "    *   it runs in all three major operating systems,"
msgstr "    * se ejecuta en los tres principales sistemas operativos,"

# unordered list
#: git-novice/_extras/guide.md:104
msgid ""
"    *   it runs inside the shell (switching windows can be confusing to "
"students), and"
msgstr ""
"    * se ejecuta dentro del caparazón (las ventanas de conmutación pueden "
"ser confusas para los estudiantes), y"

# unordered list
#: git-novice/_extras/guide.md:105
msgid "    *   it has shortcut help at the bottom of the window."
msgstr "    * tiene ayuda contextual en la parte inferior de la ventana."

#: git-novice/_extras/guide.md:107
msgid ""
"    Please point out to students during setup that they can and should use\n"
"    another text editor if they're already familiar with it."
msgstr ""
"    Señale a los alumnos durante la configuración que pueden y deben usar\n"
"    otro editor de texto si ya están familiarizados con él."

# unordered list
#: git-novice/_extras/guide.md:110
msgid ""
"*   When setting up Git, be very clear what learners have to enter: it is"
msgstr ""
"* Al configurar Git, tenga muy claro lo que los alumnos deben ingresar: es "

#: git-novice/_extras/guide.md:111
msgid ""
"    common for them to edit the instructor's details (e.g. email).  Check "
"at\n"
"    the end using `git config --list`."
msgstr ""
"común que editen los detalles del instructor (por ejemplo, correo "
"electrónico). Verifique en el final usando `git config --list`."

# header
#: git-novice/_extras/guide.md:114
msgid "## [Creating a Repository]({{ page.root }}/03-create/)"
msgstr "## [Creación de un repositorio]({{page.root}}/03-create/)"

# unordered list
#: git-novice/_extras/guide.md:116
msgid ""
"*   When you do `git status`, Mac users may see a `.DS_Store` file showing as"
msgstr ""
"* Cuando haces `git status`, los usuarios de Mac pueden ver un archivo` ."
"DS_Store` mostrando como "

#: git-novice/_extras/guide.md:117
msgid "    untracked. This a file that Mac OS creates in each directory."
msgstr ""
"sin seguimiento. Este es un archivo que Mac OS crea en cada directorio."

# unordered list
#: git-novice/_extras/guide.md:119
msgid ""
"*   The challenge \"Places to create repositories\" tries to reinforce the "
"idea"
msgstr ""
"* El desafío \"Lugares para crear repositorios\" intenta reforzar la idea "

#: git-novice/_extras/guide.md:120
msgid ""
"    that the `.git` folder contains the whole Git repo and deleting this "
"folder\n"
"    undoes a `git init`. It also gives the learner the way to fix the "
"common\n"
"    mistake of putting unwanted folders (like `Desktop`) under version "
"control."
msgstr ""
"que la carpeta `.git` contiene todo el repositorio de Git y eliminando esta "
"carpeta deshace un `git init`. También le da al alumno la manera de "
"solucionar el problema común error de poner carpetas no deseadas (como "
"`Escritorio`) bajo control de versión."

#: git-novice/_extras/guide.md:124
msgid ""
"    Instead of removing the `.git` folder directly, you can choose to move "
"it\n"
"    first to a safer directory and remove it from there:"
msgstr ""
"    En lugar de eliminar la carpeta `.git` directamente, puede elegir "
"moverla primero en un directorio más seguro y eliminarlo de allí:"

#: git-novice/_extras/guide.md:127 git-novice/_locale/es/_extras/guide.md:101
msgid ""
"    ~~~\n"
"    $ mv .git temp_git\n"
"    $ rm -rf  temp_git\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

#: git-novice/_extras/guide.md:133
msgid ""
"    The challenge suggests that it is a bad idea to create a Git repo inside "
"another repo.\n"
"    For more discussion on this topic, please see [this issue][repos-in-"
"repos]."
msgstr ""
"    El desafío sugiere que es una mala idea crear un repositorio de Git "
"dentro de otro repositorio.\n"
"    Para obtener más información sobre este tema, consulte [este número]"
"[repos-in-repos]."

# header
#: git-novice/_extras/guide.md:136
msgid "## [Tracking Changes]({{ page.root }}/04-changes/)"
msgstr "## [Cambios de seguimiento]({{page.root}}/04-changes/)"

# unordered list
#: git-novice/_extras/guide.md:138
msgid ""
"*   It's important that learners do a full commit cycle by themselves (make"
msgstr ""
"* Es importante que los alumnos realicen un ciclo completo de compromiso por "
"sí mismos (hacer"

#: git-novice/_extras/guide.md:139
msgid ""
"    changes, `git diff`, `git add`, and `git commit`). The \"`bio` repository"
"\"\n"
"    challenge does that."
msgstr ""
" cambios, `git diff`,` git add`, y `git commit`). El \"repositorio de `bio`"
"\" desafío hace eso."

# unordered list
#: git-novice/_extras/guide.md:142
msgid ""
"*   This is a good moment to show a diff with a graphical diff tool. If you"
msgstr ""
"* Este es un buen momento para mostrar una diferencia con una herramienta "
"gráfica de diferencia. Si tu "

#: git-novice/_extras/guide.md:143
msgid "    skip it because you're short on time, show it once in GitHub."
msgstr "omítalo porque tiene poco tiempo, muéstrelo una vez en GitHub."

# unordered list
#: git-novice/_extras/guide.md:145
msgid ""
"*   One thing may cause confusion is recovering old versions.  If, instead of"
msgstr ""
"* Una cosa puede causar confusión es la recuperación de versiones antiguas. "
"Si, en lugar de"

#: git-novice/_extras/guide.md:146
msgid ""
"    doing `$ git checkout f22b25e mars.txt`, someone does `$ git checkout\n"
"    f22b25e`, they wind up in the \"detached HEAD\" state and confusion "
"abounds.\n"
"    It's then possible to keep on committing, but things like `git push "
"origin\n"
"    master` a bit later will not give easily comprehensible results.  It "
"also\n"
"    makes it look like commits can be lost.  To \"re-attach\" HEAD, use\n"
"    `git checkout master`."
msgstr ""
"haciendo `$ git checkout f22b25e mars.txt`, alguien hace `$ git checkout "
"f22b25e`, terminan en el estado \"HEAD separado\" y la confusión abunda. "
"Entonces es posible seguir cometiendo, pero cosas como `git push origen "
"master` un poco más tarde no dará resultados fácilmente comprensibles. "
"También hace que parezca que los commits se pueden perder. Para \"arreglar\" "
"una \"CABEZA separada\", simplemente `git checkout master`."

# unordered list
#: git-novice/_extras/guide.md:153
msgid ""
"*   This is a good moment to show a log within a Git GUI. If you skip it"
msgstr ""
"* Este es un buen momento para mostrar un registro dentro de una GUI de Git. "
"Si te lo"

#: git-novice/_extras/guide.md:154
msgid "    because you're short on time, show it once in GitHub."
msgstr " saltas porque tienes poco tiempo, muéstralo una vez en GitHub."

# header
#: git-novice/_extras/guide.md:156
msgid "## [Ignoring Things]({{ page.root }}/06-ignore/)"
msgstr "## [Ignorando cosas]({{page.root}}/06-ignore/)"

#: git-novice/_extras/guide.md:158
msgid ""
"Just remember that you can use wildcards and regular expressions to ignore "
"a\n"
"particular set of files in `.gitignore`."
msgstr ""
"Solo recuerda que puedes usar comodines y expresiones regulares para ignorar "
"un un conjunto particular de archivos en `.gitignore`."

# header
#: git-novice/_extras/guide.md:161
msgid "## [Remotes in GitHub]({{ page.root }}/07-github/)"
msgstr "## [Controles remotos en GitHub]({{page.root}}/07-github/)"

# unordered list
#: git-novice/_extras/guide.md:163
msgid ""
"*   Make it clear that Git and GitHub are not the same thing: Git is an open"
msgstr ""
"* Deje en claro que Git y GitHub no son lo mismo: Git es una persona abierta"

#: git-novice/_extras/guide.md:164
msgid ""
"    source version control tool, GitHub is a company that hosts Git\n"
"    repositories in the web and provides a web interface to interact with "
"repos\n"
"    they host."
msgstr ""
" herramienta de control de versión fuente, GitHub es una compañía que aloja "
"Git repositorios en la web y proporciona una interfaz web para interactuar "
"con repositorios ellos hospedan"

# unordered list
#: git-novice/_extras/guide.md:168
msgid ""
"*   If your learners are advanced enough to be comfortable with SSH, tell "
"them"
msgstr ""
"* Si tus alumnos están lo suficientemente avanzados como para sentirse "
"cómodos con SSH, cuéntales "

#: git-novice/_extras/guide.md:169
msgid ""
"    they can use keys to authenticate on GitHub instead of passwords, but "
"don't\n"
"    try to set this up during class: it takes too long, and is a "
"distraction\n"
"    from the core ideas of the lesson."
msgstr ""
" pueden usar claves para autenticarse en GitHub en lugar de contraseñas, "
"pero no intente configurar esto durante la clase: lleva demasiado tiempo y "
"es una distracción de las ideas centrales de la lección."

# unordered list
#: git-novice/_extras/guide.md:173
msgid ""
"*   It is very useful to draw a diagram showing the different repositories"
msgstr ""
"* Es muy útil dibujar un diagrama que muestre los diferentes repositorios"

#: git-novice/_extras/guide.md:174
msgid "    involved."
msgstr " involucrado."

# header
#: git-novice/_extras/guide.md:176
msgid "## [Collaborating]({{ page.root }}/08-collab/)"
msgstr "## [Collaborating]({{page.root}}/08-collab/)"

# unordered list
#: git-novice/_extras/guide.md:178
msgid "*   Decide in advance whether all the learners will work in one shared"
msgstr ""
"* Decidir por adelantado si todos los alumnos trabajarán en una compartida "
"repositorio,"

#: git-novice/_extras/guide.md:179
msgid ""
"    repository, or whether they will work in pairs (or other small groups) "
"in\n"
"    separate repositories.  The former is easier to set up; the latter runs\n"
"    more smoothly."
msgstr ""
" o si van a trabajar en parejas (u otros grupos pequeños) en repositorios "
"separados. El primero es más fácil de configurar; el último corre más suave."

# unordered list
#: git-novice/_extras/guide.md:183
msgid ""
"*   Role playing between two instructors can be effective when teaching the"
msgstr ""
"* El juego de roles entre dos instructores puede ser efectivo cuando se "
"enseña "

#: git-novice/_extras/guide.md:184
msgid ""
"    collaboration and conflict sections of the lesson.  One instructor can "
"play\n"
"    the role of the repository owner, while the second instructor can play "
"the\n"
"    role of the collaborator.  If it is possible, try to use two projectors "
"so\n"
"    that the computer screens of both instructors can be seen.  This makes "
"for\n"
"    a very clear illustration to the students as to who does what."
msgstr ""
"secciones de colaboración y conflicto de la lección. Un instructor puede "
"jugar el papel del propietario del repositorio, mientras que el segundo "
"instructor puede jugar el papel del colaborador. Si es posible, intente usar "
"dos proyectores para que se pueden ver las pantallas de los dos "
"instructores. Esto hace para una ilustración muy clara para los estudiantes "
"sobre quién hace qué."

# unordered list
#: git-novice/_extras/guide.md:190
msgid ""
"*   It is also effective to pair up students during this lesson and assign "
"one"
msgstr ""
"* También es efectivo emparejar a los estudiantes durante esta lección y "
"asignar "

#: git-novice/_extras/guide.md:191
msgid ""
"    member of the pair to take the role of the owner and the other the role "
"of\n"
"    the collaborator.  In this setup, challenges can include asking the\n"
"    collaborator to make a change, commit it, and push the change to the "
"remote\n"
"    repository so that the owner can then retrieve it, and vice-versa.  The\n"
"    role playing between the instructors can get a bit \"dramatic\" in the\n"
"    conflicts part of the lesson if the instructors want to inject some "
"humor\n"
"    into the room."
msgstr ""
"uno miembro de la pareja para tomar el papel del propietario y el otro el "
"papel de el colaborador En esta configuración, los desafíos pueden incluir "
"preguntar al\n"
"    colaborador para hacer un cambio, comprometerlo y enviar el cambio al "
"control remoto repositorio para que el propietario pueda recuperarlo y "
"viceversa. los el juego de roles entre los instructores puede ser un poco "
"\"dramático\" en el conflictos parte de la lección si los instructores "
"quieren inyectar un poco de humor en la habitación."

# unordered list
#: git-novice/_extras/guide.md:199
msgid ""
"*   If you don't have two projectors, have two instructors at the front of "
"the"
msgstr "* Si no tiene dos proyectores, tenga dos instructores al frente del"

#: git-novice/_extras/guide.md:200
msgid ""
"    room.  Each instructor does their piece of the collaboration "
"demonstration\n"
"    on their own computer and then passes the projector cord back and forth\n"
"    with the other instructor when it's time for them to do the other part "
"of\n"
"    the collaborative workflow.  It takes less than 10 seconds for each\n"
"    switchover, so it doesn't interrupt the flow of the lesson.\n"
"    And of course it helps to give each of the instructors a different-"
"colored\n"
"    hat, or put different-colored sticky notes on their foreheads."
msgstr ""
"    habitación. Cada instructor hace su parte de la demostración de "
"colaboración en su propia computadora y luego pasa el cable del proyector de "
"un lado a otro con el otro instructor cuando es hora de que hagan la otra "
"parte de el flujo de trabajo colaborativo. Toma menos de 10 segundos para "
"cada cambio, por lo que no interrumpe el flujo de la lección. Y, por "
"supuesto, ayuda a dar a cada uno de los instructores un color diferente "
"sombrero, o poner notas adhesivas de diferentes colores en sus frentes."

# unordered list
#: git-novice/_extras/guide.md:208
msgid ""
"*   If you're the only instructor, the best way to create is clone the two"
msgstr ""
"* Si eres el único instructor, la mejor manera de crear es clonar los dos "

#: git-novice/_extras/guide.md:209
msgid ""
"    repos in your Desktop, but under different names, e.g., pretend one is "
"your\n"
"    computer at work:"
msgstr ""
"repositorios en su escritorio, pero con diferentes nombres, por ejemplo, "
"pretender uno es su computadora en el trabajo:"

#: git-novice/_extras/guide.md:212 git-novice/_locale/es/_extras/guide.md:157
msgid ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git planets-at-work\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

# unordered list
#: git-novice/_extras/guide.md:217
msgid ""
"*   It's very common that learners mistype the remote alias or the remote URL"
msgstr ""
"* Es muy común que los alumnos escriban mal el alias remoto o la URL remota"

#: git-novice/_extras/guide.md:218
msgid ""
"    when adding a remote, so they cannot `push`. You can diagnose this with\n"
"    `git remote -v` and checking carefully for typos.\n"
"    - To fix a wrong alias, you can do `git remote rename <old> <new>`.\n"
"    - To fix a wrong URL, you can do `git remote set-url <alias> <newurl> `."
msgstr ""
" cuando se agrega un control remoto, entonces no pueden 'presionar'. Puedes "
"diagnosticar esto con `git remote -v` y comprobando cuidadosamente si hay "
"errores tipográficos.\n"
"    - Para arreglar un alias incorrecto, puedes hacer `git remote rename "
"<old><new>`.\n"
"    - Para arreglar una URL incorrecta, puedes hacer `git remote set-url "
"<alias><newurl>`."

# unordered list
#: git-novice/_extras/guide.md:223
msgid ""
"*   Before cloning the repo, be sure that nobody is inside another repo. The"
msgstr ""
"* Antes de clonar el repositorio, asegúrese de que nadie esté dentro de otro "
"repositorio. los La"

#: git-novice/_extras/guide.md:224
msgid ""
"    best way to achieve this is moving to the `Desktop` before cloning: `cd "
"&&\n"
"    cd Desktop`."
msgstr ""
" mejor forma de lograr esto es pasar al `Escritorio` antes de la clonación: "
"`cd && cd Desktop`."

# unordered list
#: git-novice/_extras/guide.md:227
msgid ""
"*   If both repos are in the `Desktop`, have them to clone their collaborator"
msgstr ""
"* Si ambos repos están en `Desktop`, pídales que clonen a su colaborador"

#: git-novice/_extras/guide.md:228
msgid "    repo under a given directory using a second argument:"
msgstr " repo bajo un directorio dado usando un segundo argumento:"

#: git-novice/_extras/guide.md:230 git-novice/_locale/es/_extras/guide.md:173
msgid ""
"    ~~~\n"
"    $ git clone https://github.com/vlad/planets.git vlad-planet\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

# unordered list
#: git-novice/_extras/guide.md:235
msgid ""
"*   The most common mistake is that learners `push` before `pull`ing. If they"
msgstr ""
"* El error más común es que los estudiantes \"empujan\" antes de \"tirar\". "
"Si ellos"

#: git-novice/_extras/guide.md:236
msgid "    `pull` afterward, they may get a conflict."
msgstr "`pull` después, pueden tener un conflicto."

# unordered list
#: git-novice/_extras/guide.md:238
msgid ""
"*   Conflicts, sometimes weird, will start to arise. Stay tight: conflicts "
"are"
msgstr ""
"* Conflictos, a veces extraños, comenzarán a surgir. Mantente apretado: los "
"conflictos son "

#: git-novice/_extras/guide.md:239
msgid "    next."
msgstr "siguiente.\""

# header
#: git-novice/_extras/guide.md:241
msgid "## [Conflicts]({{ page.root }}/09-conflict/)"
msgstr "## [Conflicts]({{page.root}}/09-conflict/)"

# unordered list
#: git-novice/_extras/guide.md:243
msgid ""
"*   Expect the learners to make mistakes. Expect *yourself* to make "
"mistakes. This"
msgstr ""
"* Espere que los alumnos cometan errores. Espere *usted mismo* para cometer "
"errores. Esta "

#: git-novice/_extras/guide.md:244
msgid "    happens because it is late in the lesson and everyone is tired."
msgstr "sucede porque es tarde en la lección y todos están cansados.\""

# unordered list
#: git-novice/_extras/guide.md:246
msgid ""
"*   If you're the only instructor, the best way to create a conflict is:"
msgstr ""
"* Si eres el único instructor, la mejor forma de crear un conflicto es:"

# unordered list
#: git-novice/_extras/guide.md:248
msgid ""
"    *   Clone your repo in a different directory, pretending is your "
"computer at"
msgstr ""
"    * Clona tu repositorio en un directorio diferente, pretendiendo que es "
"tu computadora en"

#: git-novice/_extras/guide.md:249
msgid ""
"        work: `git clone https://github.com/vlad/planets.git planets-at-"
"work`.\n"
"    *   At the office, you make a change, commit and push.\n"
"    *   At your laptop repo, you (forget to pull and) make a change, commit "
"and\n"
"        try to push.\n"
"    *   `git pull` now and show the conflict."
msgstr ""
"        trabajo: `git clone https://github.com/vlad/planets.git planets-at-"
"work`.\n"
"    * En la oficina, usted hace un cambio, se compromete y empuja.\n"
"    * En su repositorio de la computadora portátil, usted (olvide tirar y) "
"hacer un cambio, comprometerse y\n"
"        intenta empujar.\n"
"    * `git pull` ahora y muestra el conflicto."

# unordered list
#: git-novice/_extras/guide.md:255
msgid ""
"*   Learners usually forget to `git add` the file after fixing the conflict "
"and"
msgstr ""
"* Los estudiantes generalmente se olvidan de 'agregar' el archivo después de "
"arreglar el conflicto y "

#: git-novice/_extras/guide.md:256
msgid "    just (try to) commit. You can diagnose this with `git status`."
msgstr "solo (intenta) comprometer. Puedes diagnosticar esto con `git status`."

# unordered list
#: git-novice/_extras/guide.md:258
msgid "*   Remember that you can discard one of the two parents of the merge:"
msgstr ""
"* Recuerde que puede descartar uno de los dos padres de la combinación:"

# unordered list
#: git-novice/_extras/guide.md:260
msgid ""
"    *   discard the remote file, `git checkout --ours conflicted_file.txt`"
msgstr ""
"    * descartar el archivo remoto, `git checkout --ours conflicted_file.txt`"

# unordered list
#: git-novice/_extras/guide.md:261
msgid ""
"    *   discard the local file, `git checkout --theirs conflicted_file.txt`"
msgstr ""
"    * descartar el archivo local, `git checkout --the conflictigned_file.txt`"

#: git-novice/_extras/guide.md:263
msgid ""
"    You still have to `git add` and `git commit` after this. This is\n"
"    particularly useful when working with binary files."
msgstr ""
"Aún debe `git add` y` git commit` después de esto. Esto esparticularmente "
"útil cuando se trabaja con archivos binarios."

# header
#: git-novice/_extras/guide.md:266
msgid "## [Open Science]({{ page.root }}/10-open/)"
msgstr "## [Ciencia abierta]({{page.root}}/10-open/)"

# header
#: git-novice/_extras/guide.md:268
msgid "## [Licensing]({{ page.root }}/11-licensing/)"
msgstr "## [Licencias]({{page.root}}/11-licensing/)"

#: git-novice/_extras/guide.md:270
msgid ""
"We teach about licensing because questions about who owns what, or can use\n"
"what, arise naturally once we start talking about using public services "
"like\n"
"GitHub to store files. Also, the discussion gives learners a chance to "
"catch\n"
"their breath after what is often a frustrating couple of hours."
msgstr ""
"Enseñamos sobre licencias porque preguntas sobre quién posee qué o qué puede "
"usar qué, surgen naturalmente una vez que comenzamos a hablar sobre el uso "
"de servicios públicos como GitHub para almacenar archivos. Además, la "
"discusión les da a los estudiantes la oportunidad de atrapar su aliento "
"después de lo que a menudo es un par de horas frustrantes."

# header
#: git-novice/_extras/guide.md:275 git-novice/_locale/es/_extras/guide.md:214
msgid "## [Citation]({{ page.root }}/12-citation/)"
msgstr ""

# header
#: git-novice/_extras/guide.md:277
msgid "## [Hosting]({{ page.root }}/13-hosting/)"
msgstr "## [Alojamiento]({{page.root}}/13-hosting/)"

#: git-novice/_extras/guide.md:279
msgid ""
"A common concern for learners is having their work publicly available on\n"
"GitHub.  While we encourage open science, sometimes private repos are the\n"
"only choice. It's always interesting to mention the options to have\n"
"web-hosted private repositories."
msgstr ""
"Una preocupación común para los estudiantes es tener su trabajo a "
"disposición del público en GitHub. Si bien fomentamos la ciencia abierta, a "
"veces los repos privados son única opción. Siempre es interesante mencionar "
"las opciones para tener repositorios privados alojados en la web."

#: git-novice/_extras/guide.md:284
msgid ""
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[drawings]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parable]: http://tom.preston-werner.com/2009/05/19/the-git-parable."
"html\n"
"[github]: https://github.com/\n"
"[github-gui]: https://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://help.github.com/articles/dealing-with-line-"
"endings/#platform-all\n"
"[github-privacy]: https://help.github.com/articles/keeping-your-email-"
"address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"
msgstr ""
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[dibujos]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parábola]: http://tom.preston-werner.com/2009/05/19/the-git-parable."
"html\n"
"[github]: https://github.com/\n"
"[github-gui]: http://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://help.github.com/articles/dealing-with-line-"
"endings/#platform-all\n"
"[github-privacy]: https://help.github.com/articles/ keeping-your-email-"
"address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"

# Front Matter
#: git-novice/_locale/es/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"permalink: /es/conduct/\n"
"---"
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:1
#, fuzzy
msgid "# Contribuyendo"
msgstr "# Contribuyendo"

#: git-novice/_locale/es/CONTRIBUTING.md:3
msgid ""
"[Software Carpentry][swc-site] y [Data Carpentry][dc-site] son ​\n"
"proyectos de código abierto, y damos la bienvenida a contribuciones \n"
"de todo tipo: nuevas lecciones, correcciones al material existente, \n"
"informes de errores, y revisiones de cambios propuestos son todas\n"
"bienvenidas."
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:9
msgid "## Acuerdo de Colaboración"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:11
msgid ""
"Al contribuir, aceptas que podemos redistribuir tu trabajo bajo\n"
"[nuestra licencia](LICENCIA.md). A cambio, abordaremos tus problemas \n"
"y/o evaluaremos tu propuesta de cambio tan pronto como podamos, y \n"
"te ayudaremos a convertirte en miembro de nuestra comunidad. Todos los \n"
"involucrados en [Software Carpentry][swc-site] y \n"
"[Data Carpentry][dc-site]\n"
"aceptan cumplir con nuestro [código de conducta](CONDUCT.md)."
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:19
#, fuzzy
msgid "## Cómo contribuir"
msgstr "# Contribuyendo"

#: git-novice/_locale/es/CONTRIBUTING.md:21
msgid ""
"La forma más fácil de comenzar es presentar un problema para \n"
"poder corregirlo, como un error ortográfico, algunas palabras no claras,\n"
"o un error fáctico. Contribuir es una buena forma de presentarte \n"
"y conocer a algunos de los miembros de nuestra comunidad."
msgstr ""

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:26
msgid "1. Si no tienes una cuenta de [GitHub][github],"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:27
msgid ""
" puedes [enviarnos comentarios por correo electrónico][contacto]. Sin "
"embargo, podremos responder más rápidamente si usas uno de los otros métodos "
"descritos a continuación."
msgstr ""

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:29
#, fuzzy
msgid "2. Si tienes una cuenta de[GitHub][github],"
msgstr "2. Si tienes una cuenta de[GitHub][github],"

#: git-novice/_locale/es/CONTRIBUTING.md:30
msgid ""
" o estás dispuesto a [crear una][github-join], pero no sabes como usar git, "
"puedes informar de problemas o sugerir mejoras al [crear un problema o "
"**issue**][nuevo-problema]. Esto nos permite asignar la tarea a alguien y "
"responderle en un hilo de discusión."
msgstr ""

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:32
msgid "3. Si te sientes cómodo con Git,"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:33
msgid ""
" y te gustaría agregar o cambiar material, puedes enviar una solicitud de "
"inclusión o **pull request** (PR). Las  instrucciones para hacerlo [se "
"incluyen a continuación](#using-github)."
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:35
#, fuzzy
msgid "## Donde Contribuir"
msgstr "# Contribuyendo"

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:37
msgid "1. Si deseas cambiar esta lección,"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:38
#, fuzzy
msgid ""
" por favor trabaja en <https://github.com/swcarpentry/git-novice-es>, que se "
"puede ver en <https://swcarpentry.github.io/git-novice-es>."
msgstr ""
" por favor trabaja en <https://github.com/swcarpentry/git-novice-es>, que se "
"puede ver en <https://swcarpentry.github.io/git-novice-es>."

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:40
msgid "2. Si deseas cambiar la lección de ejemplo,"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:41
#, fuzzy
msgid ""
" por favor trabaja en <https://github.com/carpentries/lesson-example>, que "
"documenta el formato de nuestras lecciones y se puede ver en <https://"
"carpentries.github.io/lesson-example>."
msgstr ""
" por favor trabaja en <https://github.com/carpentries/lesson-example>, que "
"documenta el formato de nuestras lecciones y se puede ver en <https://"
"carpentries.github.io/lesson-example>."

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:43
msgid ""
"3. Si deseas cambiar la plantilla utilizada para los sitios web del taller,"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:44
#, fuzzy
msgid ""
" por favor trabaja en <https://github.com/carpentries/workshop-template>. La "
"página de inicio de ese repositorio explica cómo configurar los sitios web "
"de los talleres, mientras que las páginas adicionales en <https://"
"carpentries.github.io/workshop-template> proporcionan más información sobre "
"nuestros criterios de diseño."
msgstr ""
" por favor trabaja en <https://github.com/carpentries/workshop-template>. La "
"página de inicio de ese repositorio explica cómo configurar los sitios web "
"de los talleres, mientras que las páginas adicionales en <https://"
"carpentries.github.io/workshop-template> proporcionan más información sobre "
"nuestros criterios de diseño."

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:46
msgid "4. Si deseas cambiar los archivos de estilo CSS, herramientas,"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:47
#, fuzzy
msgid ""
"    o texto estándar HTML para lecciones o talleres almacenados en "
"`_includes` o` _layouts`, por favor trabaja en <https://github.com/"
"carpentries/styles>."
msgstr ""
"    o texto estándar HTML para lecciones o talleres almacenados en "
"`_includes` o` _layouts`, por favor trabaja en <https://github.com/"
"carpentries/styles>."

# header
#: git-novice/_locale/es/CONTRIBUTING.md:49
msgid "## Qué aportar"
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:51
msgid ""
"Hay muchas maneras de contribuir, desde escribir nuevos ejercicios y\n"
"mejorar los existentes hasta actualizar o completar la documentación y\n"
"enviando [informes de error o **issues**][nuevo-problema] sobre cosas que "
"no\n"
"funcionan, no son claras o faltan. Si estás buscando ideas, por favor\n"
"revisa [la lista de problemas para este repositorio][issues], o la de los \n"
"problemas de los proyectos [Data Carpentry][dc-issues] y \n"
"[Software Carpentry][swc-issues]."
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:59
msgid ""
"Los comentarios sobre problemas y revisiones de solicitudes de\n"
"inclusión son igualmente bienvenidos: somos más inteligentes juntos\n"
"que por nuestra cuenta. Los comentarios de principiantes y recién \n"
"llegados son particularmente valiosos: es fácil para las personas\n"
"que han estado usando estas lecciones por un tiempo, olvidar lo \n"
"impenetrable que puede ser parte de este material, por lo que los \n"
"ojos frescos son siempre bienvenidos."
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:67
#, fuzzy
msgid "## Qué *No* contribuir"
msgstr "## Qué *No* contribuir"

#: git-novice/_locale/es/CONTRIBUTING.md:69
msgid ""
"Nuestras lecciones ya contienen más material de lo que podemos cubrir\n"
"en un taller típico, por lo que usualmente *no* buscamos más \n"
"conceptos o herramientas para agregarles. Como regla general, si quieres\n"
"presentar una nueva idea, debes (a) estimar cuánto tiempo tomará \n"
"enseñarla y (b) explicar lo que sacarías para darle espacio. El primero\n"
"anima a los contribuyentes a ser honestos acerca de los requisitos;\n"
"el segundo, pensar bien las prioridades."
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:77
msgid ""
"Tampoco buscamos ejercicios u otro material que sólo se ejecute en \n"
"una plataforma. Nuestros talleres suelen contener una mezcla de \n"
"usuarios de Windows, Mac OS X y Linux; para ser utilizable, nuestras \n"
"lecciones deben correr igualmente bien en las tres plataformas."
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:82
#, fuzzy
msgid "## Usando GitHub"
msgstr "## Usando GitHub"

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:89
msgid ""
"1. La copia publicada de la lección está en la rama `gh-pages` del "
"repositorio "
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:90
msgid ""
"(para que GitHub la regenere automáticamente). Por favor crea todas las "
"ramas de eso, y fusiona la rama `gh-pages` del [repositorio maestro][repo] "
"en la rama` gh-pages` antes de comenzar a trabajar. Por favor, *no* trabajes "
"directamente en su rama `gh-pages`, ya que eso te dificultará trabajar en "
"otras contribuciones."
msgstr ""

# ordered list
#: git-novice/_locale/es/CONTRIBUTING.md:92
#, fuzzy
msgid "2. Usamos [GitHub flow] [github-flow] para gestionar los cambios:"
msgstr "2. Usamos [GitHub flow] [github-flow] para gestionar los cambios:"

#: git-novice/_locale/es/CONTRIBUTING.md:93
msgid ""
"   1. Crea una nueva rama en tu copia de escritorio de este repositorio para "
"cada cambio significativo.\n"
"   2. Confirma (**commit**) el cambio en esa rama.\n"
"   3. Empuja esa rama a su tenedor de este repositorio en GitHub.\n"
"   4. Envía una solicitud de inserción (**pull request**) desde esa rama al "
"[repositorio principal] [repo].\n"
"   5. Si recibe comentarios,\n"
"      haz cambios en tu escritorio y envíalos (**push**) a tu rama en "
"GitHub:\n"
"      la solicitud de inserción se actualizará automáticamente."
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:101
msgid ""
"Cada lección tiene dos mantenedores que revisan problemas y solicitudes \n"
"inserción o animan a otros a hacerlos. Los mantenedores son \n"
"voluntarios de la comunidad, y tener la última palabra sobre lo que \n"
"se incluye en la lección."
msgstr ""

# header
#: git-novice/_locale/es/CONTRIBUTING.md:106
#, fuzzy
msgid "## Otros recursos"
msgstr "## Otros recursos"

#: git-novice/_locale/es/CONTRIBUTING.md:108
msgid ""
"La discusión general de [Software Carpentry][swc-site] y \n"
"[Data Carpentry][dc-site] ocurre en la \n"
"[lista de distribución de discusiones][lista-de-discusión], \n"
"a la cual todos son bienvenidos. También puedes \n"
"[contactarnos por correo electrónico][contacto]."
msgstr ""

#: git-novice/_locale/es/CONTRIBUTING.md:114
#, fuzzy
msgid ""
"[contacto]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[lista-de-discusión]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[cómo-contribuir]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[nuevo-problema]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"
msgstr ""
"[contacto]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[lista-de-discusión]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[cómo-contribuir]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[nuevo-problema]: https://github.com/swcarpentry/git-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/git-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/git-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"

# Front Matter
#: git-novice/_locale/es/LICENSE.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

# header
#: git-novice/_locale/es/LICENSE.md:6
msgid "### Material didáctico"
msgstr ""

#: git-novice/_locale/es/LICENSE.md:8
#, fuzzy
msgid ""
"Todo el material de instrucción de Software Carpentry and Data Carpentry "
"está\n"
"disponible bajo la licencia [Creative Commons Attribution][cc-por-humano]. "
"El siguiente es un resumen de licencia\n"
"(y no un sustituto) del [texto legal completo de CC BY 4.0\n"
"licencia][cc-by-legal]."
msgstr ""
"Todo el material de instrucción de Software Carpentry and Data Carpentry "
"está\n"
"disponible bajo la licencia [Creative Commons Attribution][cc-por-humano]. "
"El siguiente es un resumen de licencia\n"
"(y no un sustituto) del [texto legal completo de CC BY 4.0\n"
"licencia][cc-by-legal]."

#: git-novice/_locale/es/LICENSE.md:13
msgid "Puedes libremente:"
msgstr ""

# unordered list
#: git-novice/_locale/es/LICENSE.md:15
#, fuzzy
msgid ""
"* **Compartir** --- copiar y redistribuir el material en cualquier medio o "
"formato"
msgstr ""
"* **Compartir** --- copiar y redistribuir el material en cualquier medio o "
"formato"

# unordered list
#: git-novice/_locale/es/LICENSE.md:16
#, fuzzy
msgid ""
"* **Adaptar** --- remezclar, transformar y construir a partir del material"
msgstr ""
"* **Adaptar** --- remezclar, transformar y construir a partir del material"

#: git-novice/_locale/es/LICENSE.md:18
msgid "para cualquier propósito, incluso comercialmente."
msgstr ""

#: git-novice/_locale/es/LICENSE.md:20
msgid ""
"El licenciante no puede revocar estas libertades mientras se siga las\n"
"condiciones de la licencia."
msgstr ""

#: git-novice/_locale/es/LICENSE.md:23
msgid "Bajo los siguientes términos:"
msgstr ""

# unordered list
#: git-novice/_locale/es/LICENSE.md:25
msgid ""
"* **Atribución** --- Debes otorgar crédito a éste material de manera "
"adecuada (mencionando que"
msgstr ""

#: git-novice/_locale/es/LICENSE.md:26
msgid ""
"  su trabajo se deriva del trabajo que es Copyright de © Software\n"
"  Carpentry y, donde sea práctico, agrega un enlace a\n"
"  http://software-carpentry.org/), proporciona un [enlace a la\n"
"  licencia][cc-por-humano], e indica si se realizaron cambios. Puedes "
"hacerlo en cualquier forma razonable, \n"
"  pero no de forma tal que sugiera que tú o el uso del material derivado "
"tienen el respaldo del licenciante. "
msgstr ""

#: git-novice/_locale/es/LICENSE.md:32
msgid ""
"**Sin restricciones adicionales** --- No puedes aplicar términos legales o\n"
"medidas tecnológicas que restrinjan a otros hacer\n"
"todo lo que la licencia permite. "
msgstr ""

#: git-novice/_locale/es/LICENSE.md:36
msgid "Avisos:"
msgstr ""

# unordered list
#: git-novice/_locale/es/LICENSE.md:38
msgid ""
"* No tiene que cumplir con la licencia con los materiales que estén en el "
"dominio público "
msgstr ""

#: git-novice/_locale/es/LICENSE.md:39
msgid ""
"  o cuando su uso esté permitido por una excepción o limitación aplicable. \n"
"* No se dan garantías. La licencia puede no darle todos los\n"
"  permisos necesarios para su uso previsto. Por ejemplo, otros\n"
"  derechos como la publicidad, la privacidad, o los derechos morales pueden "
"limitar la forma en que\n"
"  uses el material."
msgstr ""

#: git-novice/_locale/es/LICENSE.md:47
#, fuzzy
msgid ""
"Salvo que se indique lo contrario, los programas de ejemplo y otro software\n"
"proporcionado por Software Carpentry y Data Carpentry están disponibles bajo "
"el\n"
"[OSI][osi]-aprobado\n"
"[Licencia de MIT][mit-license]."
msgstr ""
"Salvo que se indique lo contrario, los programas de ejemplo y otro software\n"
"proporcionado por Software Carpentry y Data Carpentry están disponibles bajo "
"el\n"
"[OSI][osi]-aprobado\n"
"[Licencia de MIT][mit-license]."

#: git-novice/_locale/es/LICENSE.md:52
msgid ""
"Se concede permiso, de forma gratuita, a cualquier persona que obtenga\n"
"una copia de este software y los archivos de documentación asociados (el\n"
"\"Software\"), para tratar el Software sin restricciones, incluyendo\n"
"sin limitación, los derechos de uso, copia, modificación, fusión, "
"publicación,\n"
"distribuir, sublicenciar y / o vender copias del Software, y\n"
"Permitir a las personas a quienes se les proporciona el Software que lo "
"hagan, sujeto a\n"
"las siguientes condiciones:"
msgstr ""

#: git-novice/_locale/es/LICENSE.md:60
#, fuzzy
msgid ""
"El aviso de copyright anterior y este aviso de permiso serán\n"
"incluido en todas las copias o porciones sustanciales del software."
msgstr ""
"El aviso de copyright anterior y este aviso de permiso serán\n"
"incluido en todas las copias o porciones sustanciales del software."

#: git-novice/_locale/es/LICENSE.md:63
msgid ""
"EL SOFTWARE SE PROPORCIONA \"TAL CUAL\", SIN GARANTÍA DE NINGÚN TIPO,\n"
"EXPRESO O IMPLICADO, INCLUIDAS, ENTRE OTRAS, LAS GARANTÍAS DE\n"
"COMERCIABILIDAD, APTITUD PARA UN PROPÓSITO PARTICULAR Y\n"
"NO INFRACCIÓN EN NINGÚN CASO SERÁN LOS AUTORES O LOS TITULARES DE LOS "
"DERECHOS DE AUTOR\n"
"RESPONSABLE POR CUALQUIER RECLAMO, DAÑOS U OTRA RESPONSABILIDAD, YA SEA EN "
"ACCIÓN\n"
"DEL CONTRATO, EXTRACONTRACTUAL O DE OTRO TIPO, DERIVADOS, FUERA DE O EN "
"CONEXIÓN\n"
"CON EL SOFTWARE O EL USO U OTROS TRATOS EN EL SOFTWARE."
msgstr ""

# header
#: git-novice/_locale/es/LICENSE.md:71
msgid "## Marca registrada"
msgstr ""

#: git-novice/_locale/es/LICENSE.md:73
#, fuzzy
msgid ""
"\"Software Carpentry\" y \"Data Carpentry\" y sus respectivos logos\n"
"son marcas registradas de [Community Initiatives][ci]."
msgstr ""
"\"Software Carpentry\" y \"Data Carpentry\" y sus respectivos logos\n"
"son marcas registradas de [Community Initiatives][ci]."

#: git-novice/_locale/es/LICENSE.md:76
#, fuzzy
msgid ""
"[cc-por-humano]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""
"[cc-por-humano]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"

#: git-novice/_locale/es/README.md:1
#, fuzzy
msgid ""
"[![Create a Slack Account with us](https://img.shields.io/badge/"
"Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite."
"herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git--es-"
"E01563.svg)](https://swcarpentry.slack.com/messages/C9X42NTQC) "
msgstr ""
"[![Create a Slack Account with us](https://img.shields.io/badge/"
"Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite."
"herokuapp.com/) \n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-swc--git--es-"
"E01563.svg)](https://swcarpentry.slack.com/messages/C9X42NTQC) "

#: git-novice/_locale/es/README.md:7
#, fuzzy
msgid ""
"Una introdución para principiantes sobre control de versiones usando Git.\n"
"Puedes encontrar la traducción de este material en <https://swcarpentry."
"github.io/git-novice-es/>\n"
"y también puedes ver el [modelo de documentación][lesson-example]\n"
"para las instrucciones de formato y como mejorar el material, \n"
"o también puedes run `make` en este directorio para ver una lista de "
"comandos útiles."
msgstr ""
"Una introdución para principiantes sobre control de versiones usando Git.\n"
"Puedes encontrar la traducción de este material en <https://swcarpentry."
"github.io/git-novice-es/>\n"
"y también puedes ver el [modelo de documentación][lesson-example]\n"
"para las instrucciones de formato y como mejorar el material, \n"
"o también puedes run `make` en este directorio para ver una lista de "
"comandos útiles."

# unordered list
#: git-novice/_locale/es/README.md:16
msgid ""
"* [Rayna Harris][harris_rayna]: [@raynamharris](https://github.com/"
"raynamharris)"
msgstr ""
"* [Rayna Harris][harris_rayna]: [@raynamharris](https://github.com/"
"raynamharris)"

# unordered list
#: git-novice/_locale/es/README.md:17
msgid ""
"* [Clara Llebot Lorente][llebot_clara]: [@clarallebot](https://github.com/"
"clarallebot)"
msgstr ""

#: git-novice/_locale/es/README.md:21
#, fuzzy
msgid ""
"[llebot_clara]: https://software-carpentry.org/team/#llebot_clara\n"
"[gonzalez_ivan]: https://software-carpentry.org/team/#gonzalez_ivan\n"
"[harris_rayna]: http://software-carpentry.org/team/#harris_rayna\n"
"[lesson-example]: https://carpentries.github.io/lesson-example"
msgstr ""
"[llebot_clara]: https://software-carpentry.org/team/#llebot_clara\n"
"[gonzalez_ivan]: https://software-carpentry.org/team/#gonzalez_ivan\n"
"[harris_rayna]: http://software-carpentry.org/team/#harris_rayna\n"
"[lesson-example]: https://carpentries.github.io/lesson-example"

# Front Matter
#: git-novice/_locale/es/_episodes/01-basics.md:1
#, fuzzy
msgid ""
"---\n"
"title: Control Automatizado de Versiones\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué es el control de versiones y por qué se deberá usar?\"\n"
"objectives:\n"
"- \"Comprender los beneficios de usar un sistema automático de control de "
"versiones.\"\n"
"- \"Comprender los fundamentos básicos del funcionamiento de Git.\"\n"
"keypoints:\n"
"- \"El control de versiones es como un 'deshacer' sin límites.\"\n"
"- \"El control de versiones permite que mucha gente trabaje en lo mismo en "
"paralelo.\"\n"
"---"
msgstr ""
"---\n"
"title: Control Automatizado de Versiones\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué es el control de versiones y por qué se deberá usar?\"\n"
"objectives:\n"
"- \"Comprender los beneficios de usar un sistema automático de control de "
"versiones.\"\n"
"- \"Comprender los fundamentos básicos del funcionamiento de Git.\"\n"
"keypoints:\n"
"- \"El control de versiones es como un 'deshacer' sin límites.\"\n"
"- \"El control de versiones permite que mucha gente trabaje en lo mismo en "
"paralelo.\"\n"
"---"

#: git-novice/_locale/es/_episodes/01-basics.md:15
msgid ""
"Empezaremos por explorar cómo el control de versiones puede ser usado\n"
"para hacer un seguimiento de lo que hizo una persona y cuándo.\n"
"Incluso si no se está colaborando con otras personas, \n"
"el control automatizado de versiones es mucho mejor que la siguiente "
"situación:"
msgstr ""

#: git-novice/_locale/es/_episodes/01-basics.md:24
#, fuzzy
msgid ""
"Todos hemos estado en esta situación alguna vez: parece ridículo tener \n"
"varias versiones casi idénticas del mismo documento. Algunos procesadores de "
"texto \n"
"nos permiten lidiar con esto un poco mejor, como por ejemplo el [*Track "
"Changes* de Microsoft Word](https://support.office.com/en-us/article/Track-"
"changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), el [historial de "
"versiones de Google](https://support.google.com/docs/answer/190843?hl=en) o "
"la [grabación y visualización de cambios de LibreOffice](https://help."
"libreoffice.org/Common/Recording_and_Displaying_Changes)."
msgstr ""
"Todos hemos estado en esta situación alguna vez: parece ridículo tener \n"
"varias versiones casi idénticas del mismo documento. Algunos procesadores de "
"texto \n"
"nos permiten lidiar con esto un poco mejor, como por ejemplo el [*Track "
"Changes* de Microsoft Word](https://support.office.com/en-us/article/Track-"
"changes-in-Word-197ba630-0f5f-4a8e-9a77-3712475e806a), el [historial de "
"versiones de Google](https://support.google.com/docs/answer/190843?hl=en) o "
"la [grabación y visualización de cambios de LibreOffice](https://help."
"libreoffice.org/Common/Recording_and_Displaying_Changes)."

#: git-novice/_locale/es/_episodes/01-basics.md:28
msgid ""
"Los sistemas de control de versiones comienzan con una versión básica del "
"documento y \n"
"luego van guardando sólo los cambios que se hicieron en cada paso del "
"proceso. Se puede \n"
"pensar en ello como en una cinta: si se rebobina la cinta y se inicia de "
"nuevo en el documento \n"
"base, se puede reproducir cada cambio y terminar con la versión más reciente."
msgstr ""

#: git-novice/_locale/es/_episodes/01-basics.md:35
msgid ""
"Una vez que piensas en los cambios como separados del documento en sí, "
"entonces se puede pensar en \"deshacer\" diferentes conjuntos de cambios en "
"el documento base y obtener así diferentes versiones del documento. Por "
"ejemplo, dos usuarios pueden hacer conjuntos independientes de cambios "
"basados en el mismo documento."
msgstr ""

#: git-novice/_locale/es/_episodes/01-basics.md:39
msgid ""
"A menos que haya conflictos, se puede incluso tener dos conjuntos de cambios "
"en el mismo documento base."
msgstr ""

#: git-novice/_locale/es/_episodes/01-basics.md:43
msgid ""
"Un sistema de control de versiones es una herramienta que realiza un "
"seguimiento de estos cambios para nosotros y\n"
"nos ayuda a controlar la versión y fusionar nuestros archivos. Nos permite\n"
"decidir qué cambios conforman la siguiente versión, a lo que llamamos hacer "
"un\n"
"[**commit**]({{ page.root }}/reference/#commit), y mantiene metadatos útiles "
"sobre dichos cambios. El\n"
"historial completo de **commits** para un proyecto en particular y sus "
"metadatos forman un\n"
"[repositorio]({{ page.root }}/reference/#repository). Los repositorios "
"pueden mantenerse sincronizados\n"
"en diferentes computadoras, facilitando así la colaboración entre diferentes "
"personas."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/01-basics.md:51
msgid "> ## La larga historia de los sistemas de control de versiones "
msgstr ""

#: git-novice/_locale/es/_episodes/01-basics.md:52
msgid ""
">\n"
"> Los sistemas automatizados de control de versiones no son nada nuevo.\n"
"> Herramientas como RCS, CVS o Subversion han existido desde principios de "
"los 1980  y son utilizadas por muchas grandes empresas.\n"
"> Sin embargo, muchos de estos han sido relegados debido a lo limitado de su "
"capacidad.\n"
"> En particular, los sistemas más modernos, como Git y [Mercurial](http://"
"swcarpentry.github.io/hg-novice/) \n"
"> son *distribuidos*, lo que significa que no necesitan un servidor "
"centralizado para alojar el repositorio. \n"
"> Estos sistemas modernos también incluyen potentes herramientas de fusión "
"que hacen posible que múltiples autores trabajen dentro de \n"
"> los mismos archivos simultáneamente."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/01-basics.md:62
msgid "> ## ¿Qué harías en las siguientes situaciones?"
msgstr ""

#: git-novice/_locale/es/_episodes/01-basics.md:63
msgid ""
">\n"
"> * Imagina que has redactado un excelente párrafo para un artículo que "
"estás escribiendo, pero más tarde lo estropeas. ¿Cómo recuperarías \n"
">   aquella *excelente* versión de la conclusión? ¿Es esto posible?\n"
">\n"
"> * Imagina que tienes 5 coautores. ¿Cómo administrarías los cambios y "
"comentarios que ellos hagan en el artículo? \n"
">   Si usas LibreOffice Writer o Microsoft Word, ¿qué sucede si aceptas los "
"cambios realizados con la opción \n"
">   `Track Changes`? ¿Tienes un historial de esos cambios? "
msgstr ""

# Front Matter
#: git-novice/_locale/es/_episodes/02-setup.md:1
#, fuzzy
msgid ""
"---\n"
"title: Configurando Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo me preparo para utilizar Git?\"\n"
"objectives:\n"
"- \"Configurar `git` la primera vez que utilice la computadora.\"\n"
"- \"Comprender el significado del flag de configuración `--global`.\"\n"
"keypoints:\n"
"-   \"Use `git config` para configurar un nombre de usuario, email, editor, "
"y otras preferencias.\"\n"
"---"
msgstr ""
"---\n"
"title: Configurando Git\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo me preparo para utilizar Git?\"\n"
"objectives:\n"
"- \"Configurar `git` la primera vez que utilice la computadora.\"\n"
"- \"Comprender el significado del flag de configuración `--global`.\"\n"
"keypoints:\n"
"-   \"Use `git config` para configurar un nombre de usuario, email, editor, "
"y otras preferencias.\"\n"
"---"

#: git-novice/_locale/es/_episodes/02-setup.md:14
msgid ""
"Cuando usamos Git en una computadora por primera vez, \n"
"es necesario configurar algunas cosas. A continuación se presentan algunos "
"ejemplos \n"
"de configuraciones que estableceremos a medida que trabajemos con Git:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/02-setup.md:18
msgid "*   nombre y correo electrónico,"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/02-setup.md:19
msgid "*   cuál es nuestro editor de texto preferido,"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/02-setup.md:20
msgid ""
"*   y que queremos utilizar estos ajustes globalmente (es decir, para cada "
"proyecto)."
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:22
msgid ""
"En la línea de comandos, los comandos de Git se escriben como `git verb`, \n"
"donde` verb` es lo que queremos hacer. Así es como \n"
"Drácula configura su nueva computadora:"
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:32
msgid ""
"Utiliza tu propio nombre y dirección de correo electrónico en lugar de los "
"de Drácula. El nombre de usuario y el correo electrónico se asociarán con tu "
"actividad posterior de Git, \n"
"lo que significa que cualquier cambio realizado en\n"
"[GitHub] (http://github.com/), \n"
"[BitBucket] (http://bitbucket.org/), \n"
"[GitLab] (http://gitlab.com/) u\n"
"otro servidor de Git \n"
"en una lección posterior incluirá esta información."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/02-setup.md:40
msgid "> ## Finales de línea"
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:41
#, fuzzy
msgid ""
">\n"
"> Al igual que con otras teclas, cuando haces click en la tecla 'Enter' de "
"tu teclado,\n"
"> tu computadora codifica este input como un caracter.\n"
"> Por razones que son demasiado largas para explicar aquí, diferentes "
"sistemas operativos \n"
"> usan diferentes caracteres para representar el final de una línea.\n"
"> (También son conocidas como *newlines* o *line breaks*.)\n"
"> Como Git usa éstos caracteres para comparar archivos,\n"
"> esto puede causar problemas inesperados cuando se edita un archivo en "
"máquinas diferentes. \n"
"> \n"
"> Puedes cambiar el modo en que Git reconoce y codifica finales de línea\n"
"> usando el comando `core.autocrlf` con `git config`.\n"
"> Se recomiendan las siguientes configuraciones:\n"
">\n"
"> En OS X y Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Y en Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf true\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> Puedes leer más sobre este tema \n"
"> [en esta página de GitHub](https://help.github.com/articles/dealing-with-"
"line-endings/)."
msgstr ""
">\n"
"> Al igual que con otras teclas, cuando haces click en la tecla 'Enter' de "
"tu teclado,\n"
"> tu computadora codifica este input como un caracter.\n"
"> Por razones que son demasiado largas para explicar aquí, diferentes "
"sistemas operativos \n"
"> usan diferentes caracteres para representar el final de una línea.\n"
"> (También son conocidas como *newlines* o *line breaks*.)\n"
"> Como Git usa éstos caracteres para comparar archivos,\n"
"> esto puede causar problemas inesperados cuando se edita un archivo en "
"máquinas diferentes. \n"
"> \n"
"> Puedes cambiar el modo en que Git reconoce y codifica finales de línea\n"
"> usando el comando `core.autocrlf` con `git config`.\n"
"> Se recomiendan las siguientes configuraciones:\n"
">\n"
"> En OS X y Linux:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf input\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Y en Windows:\n"
">\n"
"> ~~~\n"
"> $ git config --global core.autocrlf true\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> Puedes leer más sobre este tema \n"
"> [en esta página de GitHub](https://help.github.com/articles/dealing-with-"
"line-endings/)."

#: git-novice/_locale/es/_episodes/02-setup.md:72
msgid ""
"Para estas lecciones, estaremos interactuando con [GitHub] (http://github."
"com/), por lo tanto la dirección de correo electrónico utilizada debe ser la "
"misma que utilizaste al configurar tu cuenta de GitHub. Si te preocupa la "
"privacidad, revisa [las instrucciones de GitHub para mantener tu dirección "
"de correo electrónico privada] [git-privacy].\n"
"Si eliges utilizar una dirección de correo electrónico privada con GitHub, "
"usa la misma dirección de correo electrónico para el valor `user.email`, por "
"ejemplo, `username@users.noreply.github.com`  reemplazando` username` con tu "
"nombre de usuario de GitHub. Puedes cambiar la dirección de correo "
"electrónico posteriormente utilizando el comando `git config` nuevamente."
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:75
msgid ""
"Drácula también tiene que establecer su editor de texto favorito, siguiendo "
"esta tabla:"
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:93
msgid ""
"Es posible reconfigurar el editor de texto para Git siempre que quieras."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/02-setup.md:95
#, fuzzy
msgid "> ## Saliendo de Vim"
msgstr "> ## Saliendo de Vim"

#: git-novice/_locale/es/_episodes/02-setup.md:96
msgid ""
">\n"
">Ten en cuenta que `vim` es el editor por defecto para muchos programas, si "
"no has utilizado` vim` antes y deseas salir de una sesión, presiona la tecla "
"`Esc` y posteriormente escribe `: q!` y `Enter`."
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:100
msgid ""
"Los cuatro comandos que acabamos de ejecutar sólo se tienen que ejecutar una "
"vez: la flag `--global` le dice a Git que use la configuración para cada "
"proyecto, en tu cuenta de usuario, en esta computadora."
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:102
msgid "Puedes comprobar tu configuración en cualquier momento:"
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:109
msgid ""
"Puedes cambiar la configuración tantas veces como quieras: sólo usa los "
"mismos comandos para elegir otro editor o actualizar tu correo electrónico."
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:112
#, fuzzy
msgid ""
">\n"
"> En algunas redes es necesario usar un\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). Si este es el caso, "
"es\n"
"> posible que también necesites proporcionarle a Git el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Para deshabilitar el proxy, utiliza\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> En algunas redes es necesario usar un\n"
"> [proxy](https://en.wikipedia.org/wiki/Proxy_server). Si este es el caso, "
"es\n"
"> posible que también necesites proporcionarle a Git el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy proxy-url\n"
"> $ git config --global https.proxy proxy-url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Para deshabilitar el proxy, utiliza\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/02-setup.md:132
msgid "> ## Ayuda y manual de Git"
msgstr ""

#: git-novice/_locale/es/_episodes/02-setup.md:133
#, fuzzy
msgid ""
">\n"
"> Ten presente que si no recuerdas algún comando de  `git`, puedes acceder a "
"la lista de comandos utilizando la opción `-h` y al manual de Git con la "
"flag `--help` :\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Ten presente que si no recuerdas algún comando de  `git`, puedes acceder a "
"la lista de comandos utilizando la opción `-h` y al manual de Git con la "
"flag `--help` :\n"
">\n"
"> ~~~\n"
"> $ git config -h\n"
"> $ git config --help\n"
"> ~~~\n"
"> {: .language-bash}"

# Front Matter
#: git-novice/_locale/es/_episodes/03-create.md:1
#, fuzzy
msgid ""
"---\n"
"title: Creando un repositorio\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Dónde almacena Git la información?\"\n"
"objectives:\n"
"- \"Crear un repositorio local de Git.\"\n"
"keypoints:\n"
"- \"`git init` inicializa un repositorio.\"\n"
"---"
msgstr ""
"---\n"
"title: Creando un repositorio\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Dónde almacena Git la información?\"\n"
"objectives:\n"
"- \"Crear un repositorio local de Git.\"\n"
"keypoints:\n"
"- \"`git init` inicializa un repositorio.\"\n"
"---"

#: git-novice/_locale/es/_episodes/03-create.md:13
msgid ""
"Una vez que Git está configurado,\n"
"podemos comenzar a usarlo."
msgstr ""

#: git-novice/_locale/es/_episodes/03-create.md:16
msgid ""
"Vamos a crear un directorio para nuestro trabajo y nos movemos dentro de ese "
"directorio:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/03-create.md:18
#, fuzzy
msgid ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir planets\n"
"$ cd planets\n"
"~~~"

#: git-novice/_locale/es/_episodes/03-create.md:24
#, fuzzy
msgid ""
"Después le indicamos a Git hacer de `planets` un [repository]({{ page."
"root }}/reference/#repository)— un lugar donde\n"
"Git puede almacenar las versiones de nuestros archivos:"
msgstr ""
"Después le indicamos a Git hacer de `planets` un [repository]({{ page."
"root }}/reference/#repository)— un lugar donde\n"
"Git puede almacenar las versiones de nuestros archivos:"

#: git-novice/_locale/es/_episodes/03-create.md:32
msgid ""
"Si usamos `ls` para mostrar el contenido del directorio,\n"
"parece que nada ha cambiado:"
msgstr ""

#: git-novice/_locale/es/_episodes/03-create.md:40
msgid ""
"Pero si agregamos la flag `-a` para mostrar todo,\n"
"podemos ver que Git ha creado un directorio oculto dentro de `planets` "
"llamado `.git`:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/03-create.md:48
msgid ""
"~~~\n"
".\\t..\\t.git\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/03-create.md:53
msgid ""
"Git utiliza este subdirectorio especial para almacenar toda la información "
"del proyecto, incluyendo todos los archivos y subdirectorios. Si alguna vez "
"borramos el directorio `.git`,\n"
"perderemos la historia del proyecto."
msgstr ""

#: git-novice/_locale/es/_episodes/03-create.md:56
msgid ""
"Podemos revisar que todo esté configurado correctamente\n"
"pidiendo a Git que nos informe el estado de nuestro proyecto:"
msgstr ""

#: git-novice/_locale/es/_episodes/03-create.md:64
msgid ""
"Si estás utilizando una versión de git distinta a la que yo utilizo, el "
"output puede ser ligeramente distinto. "
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/03-create.md:75
#, fuzzy
msgid "> ## Lugares para crear un repositorio Git"
msgstr "> ## Lugares para crear un repositorio Git"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/03-create.md:124
#, fuzzy
msgid "> ## Corrigiendo errores de `git init`"
msgstr "> ## Corrigiendo errores de `git init`"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/03-create.md:125
#, fuzzy
msgid ""
"> Wolfman le explica a Dracula cómo un repositorio anidado es redudante y "
"puede causar problemas ms adelante."
msgstr ""
"> Wolfman le explica a Dracula cómo un repositorio anidado es redudante y "
"puede causar problemas ms adelante."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/03-create.md:126
msgid "> Dracula quiere eliminar el repositorio anidado."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/03-create.md:127
msgid ""
"> Cómo puede Dracula deshacer el último `git init` en el sub-directorio "
"`moons`?"
msgstr ""

#: git-novice/_locale/es/_episodes/03-create.md:128
msgid ""
">\n"
"> > ## Solución - USAR CON CUIDADO!\n"
"> >\n"
"> > Para deshacerse de este pequeño error, Dracula puede simplemente "
"eliminar el directorio `.git`\n"
"> > del subdirectorio `moons`. Para ello puede ejecutar el siguiente comando "
"desde el interior del directorio `moons`:\n"
"> >\n"
"> > ~~~\n"
"> > $ rm -rf moons/.git\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ¡Pero ten cuidado! Ejecutar este comando en el directorio incorrecto "
"eliminará\n"
"> > toda la historia git de un proyecto que podrías querer conservar. \n"
"> > Por lo tanto, revisa siempre tu directorio actual usando el comando "
"`pwd`."
msgstr ""

# Front Matter
#: git-novice/_locale/es/_episodes/04-changes.md:1
msgid ""
"---\n"
"title: Rastreando Cambios\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo registro cambios en Git?\"\n"
"- \"¿Cómo reviso el estatus de mi repositorio de control de versiones?\"\n"
"- \"¿Cómo registro notas acerca de los cambios que he hecho y por qué?\"\n"
"objectives:\n"
"- \"Ir a través del ciclo modificar-agregar-commit para uno o más archivos."
"\"\n"
"- \"Explicar dónde se almacena la información en cada etapa del flujo de "
"trabajo de un **commit** de Git.\"\n"
"- \"Distinguir entre mensajes descriptivos y no-descriptivos de un "
"**commit**.\"\n"
"keypoints:\n"
"- \"`git status` muestra el estatus de un repositorio.\"\n"
"- \"Los archivos pueden ser almacenados en un directorio de trabajo del "
"proyecto (el cual ven los usuarios), el **staging area** (donde el siguiente "
"**commit** está siendo construido) y el repositorio local (donde los "
"**commits** son registrados permanentemente).\"\n"
"- \"`git add` pone archivos en el **staging area**.\"\n"
"- \"`git commit` guarda el contenido del **staging area** como un nuevo "
"**commit** en el repositorio local.\"\n"
"- \"Siempre escribe un mensaje de registro cuando hagas un **commit** con "
"cambios.\"\n"
"---"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:21
msgid ""
"Primero asegúrate que estamos aún en el directorio correcto.\n"
"Deberías estar en el directorio `planets`."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:29
#, fuzzy
msgid "Si aún estás en `moons` navega de regreso a `planets`"
msgstr "Si aún estás en `moons` navega de regreso a `planets`"

#: git-novice/_locale/es/_episodes/04-changes.md:36
#, fuzzy
msgid ""
"Vamos a crear un archivo llamado `mars.txt` que contiene algunas notas\n"
"sobre la aptitud del Planeta Rojo como base.\n"
"Usaremos `nano` para editar el archivo;\n"
"puedes usar el editor que prefieras.\n"
"En particular, éste no tiene que ser el `core.editor` que definiste "
"globalmente con anterioridad. Pero recuerda, los comandos **bash** para "
"crear o editar un nuevo archivo van a depender del editor que tú escojas "
"(podría no ser `nano`). Para un repaso sobre editores de texto, echa un "
"vistazo a [\"¿Qué editor usar?\"](https://swcarpentry.github.io/shell-novice-"
"es/03-create/) en la lección [La terminal de Unix](https://swcarpentry."
"github.io/shell-novice-es) ."
msgstr ""
"Vamos a crear un archivo llamado `mars.txt` que contiene algunas notas\n"
"sobre la aptitud del Planeta Rojo como base.\n"
"Usaremos `nano` para editar el archivo;\n"
"puedes usar el editor que prefieras.\n"
"En particular, éste no tiene que ser el `core.editor` que definiste "
"globalmente con anterioridad. Pero recuerda, los comandos **bash** para "
"crear o editar un nuevo archivo van a depender del editor que tú escojas "
"(podría no ser `nano`). Para un repaso sobre editores de texto, echa un "
"vistazo a [\"¿Qué editor usar?\"](https://swcarpentry.github.io/shell-novice-"
"es/03-create/) en la lección [La terminal de Unix](https://swcarpentry."
"github.io/shell-novice-es) ."

#: git-novice/_locale/es/_episodes/04-changes.md:47
msgid "Ingresa el texto siguiente en el archivo `mars.txt`:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:53
msgid ""
"`mars.txt` ahora contiene una sola línea, la cual podemos ver ejecutando:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:75
msgid ""
"Si revisamos el estatus de nuestro proyecto otra vez,\n"
"Git nos dice que ha reconocido el nuevo archivo:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/04-changes.md:83
msgid ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\\tmars.txt\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:96
msgid ""
"El mensaje de \"untracked files\" significa que \n"
"un archivo no está siendo rastreado por Git.\n"
"Podemos poner los archivos en el **staging area** con `git add`."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:105
msgid "y luego verifica que hizo lo correcto:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/04-changes.md:112
msgid ""
"~~~\n"
"On branch master\n"
"\n"
"Initial commit\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\\tnew file:   mars.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:125
msgid ""
"Git ahora sabe que tiene que seguir la pista de `mars.txt`,\n"
"pero no ha registrado los cambios con un **commit** aún.\n"
"Para que lo haga,\n"
"necesitamos ejecutar un comando más:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:142
#, fuzzy
msgid ""
"Cuando ejecutamos `git commit`,\n"
"Git toma todo lo que le hemos dicho que salve usando `git add`\n"
"y almacena una copia permanentemente dentro del directorio especial `.git`.\n"
"Esta copia permanente es llamada un [commit]({{ page.root }}/reference/"
"#commit)\n"
"(o [revision]({{ page.root }}/reference/#revision)) y su identificador corto "
"es  `f22b25e`\n"
"(Tu **commit** podría tener otro identificador.)"
msgstr ""
"Cuando ejecutamos `git commit`,\n"
"Git toma todo lo que le hemos dicho que salve usando `git add`\n"
"y almacena una copia permanentemente dentro del directorio especial `.git`.\n"
"Esta copia permanente es llamada un [commit]({{ page.root }}/reference/"
"#commit)\n"
"(o [revision]({{ page.root }}/reference/#revision)) y su identificador corto "
"es  `f22b25e`\n"
"(Tu **commit** podría tener otro identificador.)"

#: git-novice/_locale/es/_episodes/04-changes.md:149
msgid ""
"Usamos la **flag** `-m` (por \"message\")\n"
"para registrar un comentario corto, descriptivo y específico que nos ayudará "
"a recordar más tarde lo que hicimos y por qué.\n"
"Si ejecutamos `git commit` sin  la opción `-m`,\n"
"Git ejecutará `nano` (o cualquier otro editor que hayamos configurado como "
"`core.editor`)\n"
"para que podamos escribir un mensaje más largo."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:155
msgid ""
"[Los Buenos mensajes en un **commit**][commit-messages] inician con un breve "
"resumen (<50 caracteres) de los\n"
"cambios hechos en el **commit**.  Si quieres entrar en más detalles, agrega\n"
"una línea blanca entre la línea del resumen y tus notas adicionales."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:159
#, fuzzy
msgid "Si ejecutamos `git status` ahora:"
msgstr "Si ejecutamos `git status` ahora:"

#: git-novice/_locale/es/_episodes/04-changes.md:172
msgid ""
"nos dice que todo está actualizado.\n"
"Si queremos saber lo que hemos hecho recientemente,\n"
"podemos pedir a Git  que nos muestre la historia del proyecto usando `git "
"log`:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:190
msgid ""
"`git log`  lista todos los **commits** hechos a un repositorio en orden "
"cronológico inverso.\n"
"El listado de cada **commit** incluye\n"
"el identificador completo del **commit**\n"
"(el cual comienza con el mismo caracter que\n"
"el identificador corto que imprime el comando `git commit` anterior),\n"
"el autor del **commit**,\n"
"cuándo fue creado,\n"
"y el mensaje de registro que se le dio a Git cuando el **commit** fue creado."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:199
msgid "> ## ¿Dónde están mis cambios?"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:200
msgid ""
">\n"
"> Si ejecutamos `ls` en este punto, aún veremos un solo archivo llamado "
"`mars.txt`.\n"
"> Esto es porque Git guarda información acerca de la historia de los "
"archivos\n"
"> en el directorio especial `.git` mencionado antes\n"
">para que nuestro sistema de archivos no se abarrote\n"
"> (y para que no podamos editar o borrar accidentalmente una versión "
"anterior)."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:208
msgid ""
"Ahora supón que Dracula agrega más información al archivo.\n"
"(Otra vez, editaremos con `nano` y luego con `cat` mostraremos el contenido "
"del archivo;\n"
"podrías usar un editor diferente y no necesitar `cat`.)"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:224
msgid ""
"Cuando ejecutamos `git status` ahora\n"
"nos dice que un archivo ya sabe que ha sido modificado:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/04-changes.md:232
#: git-novice/_locale/es/_episodes/04-changes.md:295
#: git-novice/_locale/es/_episodes/05-history.md:194
msgid ""
"~~~\n"
"On branch master\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\n"
"\\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:244
msgid ""
"La última línea es la frase clave:\n"
"\"no changes added to commit\".\n"
"Hemos cambiado este archivo,\n"
"pero no le hemos dicho a Git que queremos que guarde los cambios\n"
"(lo cual hacemos con `git add`)\n"
"ni los hemos guardado (lo cual hacemos con `git commit`).\n"
"Así que hagamos eso ahora. Es una buena práctica revisar siempre\n"
"nuestros cambios antes de guardarlos. Hacemos esto usando `git diff`.\n"
"Esto nos muestra las diferencias entre el estado actual\n"
"del archivo y la versión guardada más reciente:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:271
msgid ""
"La salida es críptica porque \n"
"en realidad es una serie de comandos para herramientas como editores y "
"`patch`\n"
"que les dice cómo reconstruir un archivo a partir del otro.\n"
"Si lo dividimos en secciones:"
msgstr ""

# ordered list
#: git-novice/_locale/es/_episodes/04-changes.md:276
#, fuzzy
msgid ""
"1.  La primera línea nos dice que Git está produciendo un **output** similar "
"al del comando Unix `diff`"
msgstr ""
"1.  La primera línea nos dice que Git está produciendo un **output** similar "
"al del comando Unix `diff`"

#: git-novice/_locale/es/_episodes/04-changes.md:277
msgid ""
"    comparando las versiones anterior y nueva del archivo.\n"
"2.  La segunda línea dice exactamente qué versiones del archivo\n"
"    está comparando Git;\n"
"    `df0654a` y `315bf3a` son etiquetas únicas generadas por computadora "
"para esas versiones.\n"
"3.  Las líneas tercera y cuarta muestran una vez más el nombre del archivo "
"que se está cambiando.\n"
"4.  Las líneas restantes son las más interesantes, ellas nos muestran las "
"diferencias en cuestión\n"
"    y las líneas donde ellas ocurren.\n"
"    En particular,\n"
"    el marcador `+` en la primera columna muestra dónde agregamos una línea."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:287
msgid ""
"Después de revisar nuestro cambio, es tiempo de hacer un **commit** de eso:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:307
msgid ""
"¡Vaya!:\n"
"Git no hará **commit** porque no usamos `git add` primero.\n"
"Arreglemos esto:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:323
msgid ""
"Git insiste en que agreguemos archivos al conjunto de cambios que queremos "
"hacer\n"
"antes de hacer **commit** de alguna cosa. Esto permite hacer **commit** de "
"nuestros\n"
"cambios en etapas y capturarlos en porciones lógicas en lugar de\n"
"solo lotes grandes.\n"
"Por ejemplo,\n"
"supongamos que agregamos algunas citas a una investigación relevante para "
"nuestra tesis.\n"
"Podríamos querer hacer **commit** a esas adiciones,\n"
"y su correspondiente registro bibliográfico,\n"
"pero *no* hacer **commit** del trabajo que estamos haciendo sobre la "
"conclusión\n"
"(el cual no hemos terminado aún)."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:334
msgid ""
"Para permitir esto,\n"
"Git tiene un *staging area* especial\n"
"donde mantiene registro de cosas que han sido agregadas al actual [changeset]"
"({{ page.root }}/reference/#changeset)\n"
"pero aún no se han vuelto **commit**."
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:340
msgid ""
">\n"
"> Si piensas en Git como tomar instantáneas de cambios durante la vida de un "
"proyecto,\n"
"> `git add` especifica *qué* irá en una instantánea\n"
"> (poniendo cosas en el **staging area**),\n"
"> y `git commit` entonces *realmente toma* la instantánea, y\n"
"> genera un registro permanente de esto (como un **commit**).\n"
"> Si no tienes nada en el staging area cuando escribes  `git commit`,\n"
"> Git te pedirá que uses `git commit -a` o `git commit --all`,\n"
"> ¡Que es como reunir *a todos* para la foto!\n"
"> Sin embargo, es casi siempre mejor\n"
"> agregar explícitamente cosas al **staging area**, porque podrías\n"
"> hacer **commit** de cambios que habías olvidado. (Volviendo a las "
"instantáneas,\n"
"> podrías capturar al extra con el maquillaje incompleto caminando en el "
"escenario para la toma\n"
"> porque usaste `-a`!)\n"
"> Trata de organizar las cosas manualmente\n"
"> o podrías encontrarte buscando \"deshacer git commit\" más\n"
"> de lo que te gustaría!"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:361
msgid ""
"Veamos cómo nuestros cambios a un archivo se mueven de nuestro editor\n"
"al **staging area**\n"
"y luego al almacenamiento de largo plazo.\n"
"Primero,\n"
"agregamos otra línea al archivo:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:397
msgid ""
"Hasta aquí, todo bien:\n"
"hemos agregado una línea al final del archivo\n"
"(mostrado con un `+` en la primera columna).\n"
"Ahora pongamos el cambio en el **staging area**\n"
"y veamos lo que reporta `git diff`:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:409
msgid ""
"No hay **output**:\n"
"hasta donde Git puede decir,\n"
"no hay diferencias entre lo que se pidió guardar permanentemente\n"
"y lo que actualmente está en el directorio.\n"
"Sin embargo,\n"
"si hacemos esto:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:433
msgid ""
"esto nos muestra la diferencia entre\n"
"el último cambio que sí hizo **commit**\n"
"y lo que está en el **staging area**.\n"
"Guardemos nuestros cambios:"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:449
#, fuzzy
msgid "revisa nuestro estatus:"
msgstr "revisa nuestro estatus:"

#: git-novice/_locale/es/_episodes/04-changes.md:462
msgid "y mira en la historia lo que hemos hecho hasta aquí:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:490
msgid "> ## Diferencias basadas en palabras"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:491
msgid ""
">\n"
"> A veces, por ejemplo en el caso de documentos de texto, un diff por "
"líneas\n"
"> es demasiado caótico. Es en ese caso donde la opción `--color-words` de\n"
"> `git diff` se vuelve muy útil ya que resalta las palabras\n"
"> modificadas usando colores."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:498
msgid "> ## Paginación del Registro"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:499
msgid ""
">\n"
"> Cuando el **output** de `git log` es demasiado largo para caber en tu "
"pantalla,\n"
"> `git` usa un programa para dividirlo en páginas del tamaño de tu "
"pantalla.\n"
"> Cuando este \"paginador\" es llamado, notarás que la última línea de tu\n"
"> pantalla es un `:`, en lugar de tu prompt de siempre.\n"
">\n"
"> *   Para salir del paginador, presiona `q`.\n"
"> *   Para moverte a la siguiente página, presiona la barra espaciadora.\n"
"> *   Para buscar `alguna_palabra` en todas las páginas, escribe `/"
"alguna_palabra`\n"
">     y navega entre las coincidencias presionando `n` (next)."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:511
msgid "> ## Tamaño Límite del Registro"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:512
#, fuzzy
msgid ""
">\n"
"> Para evitar que `git log` cubra toda la pantalla de tu terminal, puedes "
"limitar el\n"
"> número de **commits** que Git lista usando `-N`, donde `N` es el número "
"de\n"
"> **commits** que quieres ver. Por ejemplo, si sólo quieres información de\n"
"> el último **commit**, puedes usar:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"
msgstr ""
">\n"
"> Para evitar que `git log` cubra toda la pantalla de tu terminal, puedes "
"limitar el\n"
"> número de **commits** que Git lista usando `-N`, donde `N` es el número "
"de\n"
"> **commits** que quieres ver. Por ejemplo, si sólo quieres información de\n"
"> el último **commit**, puedes usar:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"

#: git-novice/_locale/es/_episodes/04-changes.md:531
#, fuzzy
msgid ""
">\n"
"> Puedes reducir la cantidad de información usando la\n"
"> opción `--oneline`:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Puedes reducir la cantidad de información usando la\n"
"> opción `--oneline`:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

#: git-novice/_locale/es/_episodes/04-changes.md:545
#, fuzzy
msgid ""
">\n"
"> También puedes combinar las opciones `--oneline` con otras. Una "
"combinación\n"
"> útil es:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph --all --decorate\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> También puedes combinar las opciones `--oneline` con otras. Una "
"combinación\n"
"> útil es:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph --all --decorate\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f Discuss concerns about Mars' climate for Mummy (HEAD, master)\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:561
#, fuzzy
msgid "> ## Directorios"
msgstr "> ## Directorios"

#: git-novice/_locale/es/_episodes/04-changes.md:562
#, fuzzy
msgid ""
">\n"
"> Dos hechos importantes que deberías saber acerca de directorios en Git.\n"
">\n"
"> 1. Git no rastrea directorios por sí mismos, sólo los archivos dentro de "
"ellos.\n"
"> Inténtalo tú mismo:\n"
">\n"
"> ~~~\n"
"> $ mkdir directory\n"
"> $ git status\n"
"> $ git add directory\n"
"> $ git status\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Nota que, nuestro nuevo y vació directorio  `directory` no aparece en\n"
"> la lista de archivos no rastreados aún si nosotros explícitamente lo "
"agregamos(_via_ `git add`) a nuestro\n"
"> repositorio. Esta es la razón por la que algunas veces verás archivos `."
"gitkeep`\n"
"> en directorios que si no fuera por ello estarían vacíos. A diferencia de `."
"gitignore`, \n"
"> estos archivos no son especiales\n"
"> y su único propósito es poblar un directorio para que Git lo agregue\n"
"> al repositorio. En efecto, podrías nombrar estos archivos como quieras.\n"
">\n"
"> {:start=\"2\"}\n"
"> 2. Si creas un directorio en tu repositorio Git y lo llenas con archivos,\n"
"> podrás agregar todos los archivos en el directorio a la vez haciendo:\n"
">\n"
"> ~~~\n"
"> git add <directory-with-files>\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Dos hechos importantes que deberías saber acerca de directorios en Git.\n"
">\n"
"> 1. Git no rastrea directorios por sí mismos, sólo los archivos dentro de "
"ellos.\n"
"> Inténtalo tú mismo:\n"
">\n"
"> ~~~\n"
"> $ mkdir directory\n"
"> $ git status\n"
"> $ git add directory\n"
"> $ git status\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Nota que, nuestro nuevo y vació directorio  `directory` no aparece en\n"
"> la lista de archivos no rastreados aún si nosotros explícitamente lo "
"agregamos(_via_ `git add`) a nuestro\n"
"> repositorio. Esta es la razón por la que algunas veces verás archivos `."
"gitkeep`\n"
"> en directorios que si no fuera por ello estarían vacíos. A diferencia de `."
"gitignore`, \n"
"> estos archivos no son especiales\n"
"> y su único propósito es poblar un directorio para que Git lo agregue\n"
"> al repositorio. En efecto, podrías nombrar estos archivos como quieras.\n"
">\n"
"> {:start=\"2\"}\n"
"> 2. Si creas un directorio en tu repositorio Git y lo llenas con archivos,\n"
"> podrás agregar todos los archivos en el directorio a la vez haciendo:\n"
">\n"
"> ~~~\n"
"> git add <directory-with-files>\n"
"> ~~~\n"
"> {: .language-bash}"

#: git-novice/_locale/es/_episodes/04-changes.md:594
msgid ""
"Recapitulando, cuando queremos agregar cambios a nuestro repositorio,\n"
"primero necesitamos agregar los archivos cambiados al **staging area**\n"
"(`git add`) y luego hacer un **commit** de los cambios al\n"
"repositorio (`git commit`):"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:601
msgid "> ## Escogiendo un Mensaje para el **Commit**"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:602
#, fuzzy
msgid ""
">\n"
"> ¿Cuál de los siguientes mensajes de **commit** sería el más apropiado para "
"el\n"
"> último **commit** hecho a `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to "
"mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solución\n"
"> > La respuesta 1 no es suficientemente descriptiva,\n"
"> > y la respuesta 2 es demasiado descriptiva y redundante,\n"
"> > pero la respuesta 3 es buena: corta pero descriptiva."
msgstr ""
">\n"
"> ¿Cuál de los siguientes mensajes de **commit** sería el más apropiado para "
"el\n"
"> último **commit** hecho a `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to "
"mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solución\n"
"> > La respuesta 1 no es suficientemente descriptiva,\n"
"> > y la respuesta 2 es demasiado descriptiva y redundante,\n"
"> > pero la respuesta 3 es buena: corta pero descriptiva."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:617
msgid "> ## Haciendo Commit de Cambios a Git"
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:618
#, fuzzy
msgid ""
">\n"
"> ¿Cuál comando(s) de abajo debería guardar los cambios de `myfile.txt`\n"
"> a mi repositorio local Git?\n"
">\n"
"> 1. `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 2. `$ git init myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 3. `$ git add myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 4. `$ git commit -m myfile.txt \"my recent changes\"`\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Debería crear un **commit** solamente si los archivos ya han sido "
"agregados al **staging area**.\n"
"> > 2. Trataría de crear un nuevo respositorio.\n"
"> > 3. Es correcto: primero agrega el archivo al **staging area**, luego "
"hace **commit**.\n"
"> > 4. Intentaría hacer **commit** al archivo \"my recent changes\" con el "
"mensaje myfile.txt."
msgstr ""
">\n"
"> ¿Cuál comando(s) de abajo debería guardar los cambios de `myfile.txt`\n"
"> a mi repositorio local Git?\n"
">\n"
"> 1. `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 2. `$ git init myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 3. `$ git add myfile.txt`\n"
">    `$ git commit -m \"my recent changes\"`\n"
">\n"
"> 4. `$ git commit -m myfile.txt \"my recent changes\"`\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Debería crear un **commit** solamente si los archivos ya han sido "
"agregados al **staging area**.\n"
"> > 2. Trataría de crear un nuevo respositorio.\n"
"> > 3. Es correcto: primero agrega el archivo al **staging area**, luego "
"hace **commit**.\n"
"> > 4. Intentaría hacer **commit** al archivo \"my recent changes\" con el "
"mensaje myfile.txt."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/04-changes.md:641
#, fuzzy
msgid "> ## Haciendo **Commit** a Multiples Archivos"
msgstr "> ## Haciendo **Commit** a Multiples Archivos"

#: git-novice/_locale/es/_episodes/04-changes.md:642
#, fuzzy
msgid ""
">\n"
"> El **staging area** puede tener cambios de cualquier número de archivos\n"
"> a los que quieras hacer **commit**, como una sóla instantánea.\n"
">\n"
"> 1. Agrega algún texto a `mars.txt` anotando tu decisión\n"
"> de considerar Venus como base\n"
"> 2. Crea un nuevo archivo `venus.txt` con tus pensamientos iniciales\n"
"> acerca de Venus como base para tí y tus amigos\n"
"> 3. Agrega los cambios de ambos archivos al **staging area**,\n"
"> y haz un **commit** de esos cambios.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Primero haremos nuestros cambios a los archivos `mars.txt` y `venus."
"txt`:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Ahora puedes agregar ambos archivos al **staging area**. Podemos hacer "
"esto en una sóla línea:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > O con varios comandos:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Ahora los archivos están listos para hacer **commit**. Puedes verificar "
"esto usando `git status`. Si estás lista para hacer **commit** usa:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [master cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> El **staging area** puede tener cambios de cualquier número de archivos\n"
"> a los que quieras hacer **commit**, como una sóla instantánea.\n"
">\n"
"> 1. Agrega algún texto a `mars.txt` anotando tu decisión\n"
"> de considerar Venus como base\n"
"> 2. Crea un nuevo archivo `venus.txt` con tus pensamientos iniciales\n"
"> acerca de Venus como base para tí y tus amigos\n"
"> 3. Agrega los cambios de ambos archivos al **staging area**,\n"
"> y haz un **commit** de esos cambios.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Primero haremos nuestros cambios a los archivos `mars.txt` y `venus."
"txt`:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Ahora puedes agregar ambos archivos al **staging area**. Podemos hacer "
"esto en una sóla línea:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > O con varios comandos:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Ahora los archivos están listos para hacer **commit**. Puedes verificar "
"esto usando `git status`. Si estás lista para hacer **commit** usa:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [master cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"

# header
#: git-novice/_locale/es/_episodes/04-changes.md:701
msgid "## Repositorio `bio` "
msgstr ""

#: git-novice/_locale/es/_episodes/04-changes.md:702
#, fuzzy
msgid ""
">\n"
"> * Crea un nuevo repositorio Git en tu computadora, llamado `bio`.\n"
"> * Escribe una autobiografía de tres líneas en un archivo llamado `me."
"txt`,\n"
"> haz **commit** de tus cambios\n"
"> * Modifica una línea, agrega una cuarta línea \n"
"> * Muestra las diferencias entre el estado actualizado y el original\n"
">\n"
"> > ## Soluciónn\n"
"> >\n"
"> > Si es necesario, sal de la carpeta `planets`:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Crea una nueva carpeta llamada `bio` y 'navega' a ella:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Inicia git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Crea tu archivo de biografía `me.txt` usando `nano` u otro editor de "
"texto.\n"
"> > Una vez hecho, agrega y haz **commit** de tu cambio al repositorio:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m'Adding biography file'\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modifica el archivo como se describe arriba (modifica una línea, agrega "
"una cuarta línea).\n"
"> > Para mostrar las diferencias entre el estado actual y el original, usa "
"`git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >"
msgstr ""
">\n"
"> * Crea un nuevo repositorio Git en tu computadora, llamado `bio`.\n"
"> * Escribe una autobiografía de tres líneas en un archivo llamado `me."
"txt`,\n"
"> haz **commit** de tus cambios\n"
"> * Modifica una línea, agrega una cuarta línea \n"
"> * Muestra las diferencias entre el estado actualizado y el original\n"
">\n"
"> > ## Soluciónn\n"
"> >\n"
"> > Si es necesario, sal de la carpeta `planets`:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Crea una nueva carpeta llamada `bio` y 'navega' a ella:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Inicia git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Crea tu archivo de biografía `me.txt` usando `nano` u otro editor de "
"texto.\n"
"> > Una vez hecho, agrega y haz **commit** de tu cambio al repositorio:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m'Adding biography file'\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modifica el archivo como se describe arriba (modifica una línea, agrega "
"una cuarta línea).\n"
"> > Para mostrar las diferencias entre el estado actual y el original, usa "
"`git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >"

#: git-novice/_locale/es/_episodes/04-changes.md:754
#, fuzzy
msgid ""
">\n"
"> Para cada uno de los  **commits** que hayas hecho, Git almacenó tu nombre "
"2 veces.\n"
"> Tú eres nombrado como el **author** y el **committer**. Puedes observar\n"
"> esto, diciendo a Git que te muestre más información acerca de tus últimos\n"
"> **commits**:\n"
">\n"
"> ~~~\n"
"> $ git log --format=full\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Cuando haces **commit** puedes nombrar a alguien más como el **author**:\n"
">\n"
"> ~~~\n"
"> $ git commit --author=\"Vlad Dracula <vlad@tran.sylvan.ia>\"\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Crea un nuevo repositorio y crea dos **commits**: uno sin la\n"
"> opción `--author` y uno nombrando a un colega tuyo como el\n"
"> **author**. Ejecuta `git log` y `git log --format=full`.  Piensa acerca "
"de \n"
"> cómo esto puede permitirte colaborar con tus colegas.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Update Vlad's bio.\" --author=\"Frank N. Stein "
"<franky@monster.com>\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > \n"
"> > ~~~\n"
"> > [master 4162a51] Update Vlad's bio.\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > 1 file changed, 2 insertions(+), 2 deletions(-)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > ~~~\n"
"> > $ git log --format=full\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > commit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Update Vlad's bio.\n"
"> >\n"
"> > commit aaa3271e5e26f75f11892718e83a3e2743fab8ea\n"
"> > Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Vlad's initial bio.\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Para cada uno de los  **commits** que hayas hecho, Git almacenó tu nombre "
"2 veces.\n"
"> Tú eres nombrado como el **author** y el **committer**. Puedes observar\n"
"> esto, diciendo a Git que te muestre más información acerca de tus últimos\n"
"> **commits**:\n"
">\n"
"> ~~~\n"
"> $ git log --format=full\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Cuando haces **commit** puedes nombrar a alguien más como el **author**:\n"
">\n"
"> ~~~\n"
"> $ git commit --author=\"Vlad Dracula <vlad@tran.sylvan.ia>\"\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Crea un nuevo repositorio y crea dos **commits**: uno sin la\n"
"> opción `--author` y uno nombrando a un colega tuyo como el\n"
"> **author**. Ejecuta `git log` y `git log --format=full`.  Piensa acerca "
"de \n"
"> cómo esto puede permitirte colaborar con tus colegas.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Update Vlad's bio.\" --author=\"Frank N. Stein "
"<franky@monster.com>\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > \n"
"> > ~~~\n"
"> > [master 4162a51] Update Vlad's bio.\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > 1 file changed, 2 insertions(+), 2 deletions(-)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > ~~~\n"
"> > $ git log --format=full\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > commit 4162a51b273ba799a9d395dd70c45d96dba4e2ff\n"
"> > Author: Frank N. Stein <franky@monster.com>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Update Vlad's bio.\n"
"> >\n"
"> > commit aaa3271e5e26f75f11892718e83a3e2743fab8ea\n"
"> > Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> > Commit: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> >\n"
"> > Vlad's initial bio.\n"
"> > ~~~\n"
"> > {: .output}"

# Front Matter
#: git-novice/_locale/es/_episodes/05-history.md:1
#, fuzzy
msgid ""
"---\n"
"title: Explorando el \"History\"\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo identificar versiones anteriores de archivos?\"\n"
"- \"¿Cómo puedo revisar mis cambios?\"\n"
"- \"¿Cómo puedo recuperar versiones anteriores de archivos?\"\n"
"objectives:\n"
"- \"Explicar qué es el **HEAD** de un repositorio y cómo usarlo.\"\n"
"- \"Identificar y usar  el número de **commit** the Git.\"\n"
"- \"Comparar varias versiones de archivos.\"\n"
"- \"Restaurar versiones anteriores de archivos.\"\n"
"keypoints:\n"
"- \"`git diff` despliega diferencias entre **commits**.\"\n"
"- \"`git checkout` recupera versiones anteriores de archivos.\"\n"
"---"
msgstr ""
"---\n"
"title: Explorando el \"History\"\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo identificar versiones anteriores de archivos?\"\n"
"- \"¿Cómo puedo revisar mis cambios?\"\n"
"- \"¿Cómo puedo recuperar versiones anteriores de archivos?\"\n"
"objectives:\n"
"- \"Explicar qué es el **HEAD** de un repositorio y cómo usarlo.\"\n"
"- \"Identificar y usar  el número de **commit** the Git.\"\n"
"- \"Comparar varias versiones de archivos.\"\n"
"- \"Restaurar versiones anteriores de archivos.\"\n"
"keypoints:\n"
"- \"`git diff` despliega diferencias entre **commits**.\"\n"
"- \"`git checkout` recupera versiones anteriores de archivos.\"\n"
"---"

#: git-novice/_locale/es/_episodes/05-history.md:19
msgid ""
"Como vimos en la lección anterior, podemos referirnos a los **commits** por "
"sus\n"
"identificadores. Puedes referirte al _commit más reciente_ del directorio de "
"trabajo \n"
"usando el identificador `HEAD`."
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:23
msgid ""
"Hemos estado agregando una línea a la vez a `mars.txt`, por lo que es fácil "
"rastrear nuestro\n"
"progreso, así que hagamos eso usando `HEAD`. Antes de iniciar,\n"
"hagamos un cambio en `mars.txt`."
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:40
msgid "Ahora, veamos lo que tenemos."
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:59
msgid ""
"Lo mismo obtendrías si omites `HEAD` (intentalo). \n"
"La verdadera ventaja en todo esto es cuando puedes referirte a **commits** "
"previos. Hacemos\n"
"esto agregando `~1` para referirnos al **commit** inmediatamente anterior a "
"`HEAD`."
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:68
msgid ""
"Si queremos ver las diferencias entre **commits** anteriores podemos usar "
"`git diff`\n"
"nuevamente, pero con la notación `HEAD~1`,`HEAD~2`, y así sucesivamente, "
"para referirse a ellos:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:89
msgid ""
"También podríamos usar `git show`, que nos muestra qué cambios hemos "
"realizado en un **commit** anterior así como el mensaje del **commit**, en "
"lugar de las _diferencias_ entre un **commit** y nuestro directorio de "
"trabajo, que vemos usando `git diff`."
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:113
msgid ""
"De este modo,\n"
"podemos construir una cadena de **commits**.\n"
"El más reciente de la cadena es referido como `HEAD`;\n"
"podemos referirnos a **commits** anteriores utilizando la notación `~`,\n"
"así `HEAD~1` (pronunciado \"head minus one\")\n"
"significa \"el commit anterior\",\n"
"mientras que `HEAD~123` va 123 **commits** hacia atrás desde donde estamos "
"ahora."
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:121
msgid ""
"También podemos referirnos a los **commits** usando\n"
"esas largas cadenas de dígitos y letras\n"
"que `git log` despliega.\n"
"Estos son IDs únicos para los cambios,\n"
"y aquí \"únicos\" realmente significa únicos:\n"
"cada cambio a cualquier conjunto de archivos en cualquier computadora\n"
"tiene un identificador único de 40 caracteres.\n"
"Nuestro primer **commit** recibió el ID\n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"así que probemos esto:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:149
msgid ""
"Esa es la respuesta correcta,\n"
"pero escribir cadenas aleatorias de 40 caracteres es molesto,\n"
"entonces Git nos permite usar solo los primeros caracteres:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:170
msgid ""
"¡Todo bien! Asi que\n"
"podemos guardar cambios en los archivos y ver qué hemos cambiado —ahora \n"
"¿Cómo podemos restaurar versiones anteriores de las cosas?\n"
"Supongamos que accidentalmente sobrescribimos nuestro archivo:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:186
msgid ""
"`git status` ahora nos dice que el archivo ha sido cambiado,\n"
"pero esos cambios no se han organizado:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:206
msgid ""
"Podemos volver a poner las cosas tal como estaban\n"
"usando `git checkout`:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:222
msgid ""
"Como puedes adivinar por su nombre,\n"
"`git checkout` recupera (es decir, restaura) una versión anterior de un "
"archivo.\n"
"En este caso,\n"
"le estamos diciendo a Git que queremos recuperar la versión del archivo "
"grabado en `HEAD`,\n"
"que es el último **commit** guardado.\n"
"Si queremos volver más allá,\n"
"podemos usar un identificador de **commit** en su lugar:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/05-history.md:250
msgid ""
"~~~\n"
"# On branch master\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"# Changes not staged for commit:\n"
"#   (use \"git add <file>...\" to update what will be committed)\n"
"#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"#\n"
"#\\tmodified:   mars.txt\n"
"#\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:264
msgid ""
"Ten en cuenta que los cambios están en el **staging area** de "
"almacenamiento.\n"
"Nuevamente, podemos volver a poner las cosas tal como estaban\n"
"usando `git checkout`:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:273
#, fuzzy
msgid "> ## No pierdas tu HEAD"
msgstr "> ## No pierdas tu HEAD"

#: git-novice/_locale/es/_episodes/05-history.md:274
#, fuzzy
msgid ""
">\n"
"> Arriba usamos\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> para revertir `mars.txt` a su estado después del **commit** `f22b25e`.\n"
"> Pero ¡Ten cuidado! El comando `checkout` tiene otras funcionalidades "
"importantes y Git puede malinterpretar tus intenciones si \n"
"> no sos precisa a la hora de tipear. Por ejemplo, \n"
"> si olvidas `mars.txt` en ese comando, Git te dirá que \"You are in\n"
"> 'detached HEAD' state\". En este estado, no deberías hacer ningún cambio.\n"
"> Puedes arreglar esto volviendo a conectar tu **head** usando `git checkout "
"master`"
msgstr ""
">\n"
"> Arriba usamos\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> para revertir `mars.txt` a su estado después del **commit** `f22b25e`.\n"
"> Pero ¡Ten cuidado! El comando `checkout` tiene otras funcionalidades "
"importantes y Git puede malinterpretar tus intenciones si \n"
"> no sos precisa a la hora de tipear. Por ejemplo, \n"
"> si olvidas `mars.txt` en ese comando, Git te dirá que \"You are in\n"
"> 'detached HEAD' state\". En este estado, no deberías hacer ningún cambio.\n"
"> Puedes arreglar esto volviendo a conectar tu **head** usando `git checkout "
"master`"

#: git-novice/_locale/es/_episodes/05-history.md:290
msgid ""
"Es importante recordar que\n"
"debemos usar el número de **commit** que identifica el estado del "
"repositorio\n"
"*antes* del cambio que intentamos deshacer.\n"
"Un error común es usar el número de \n"
"**commit** en el cual hicimos el cambio del cual nos estamos tratando de "
"deshacer.\n"
"En el siguiente ejemplo, queremos recuperar el estado antes del más "
"reciente\n"
"**commit** (`HEAD~1`), que es **commit** `f22b25e`:"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:300
msgid ""
"Así que, para poner todo junto,\n"
"aqui esta como Git trabaja, en forma de dibujo:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:305
#, fuzzy
msgid "> ## Simplificando el caso común"
msgstr "> ## Simplificando el caso común"

#: git-novice/_locale/es/_episodes/05-history.md:306
#, fuzzy
msgid ""
">\n"
"> Si lees el **output** de `git status` detenidamente,\n"
"> verás que incluye esta sugerencia:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Como deciamos,\n"
"> `git checkout` sin un identificador de versión restaura los archivos al "
"estado guardado en `HEAD`.\n"
"> El doble guión `--` es necesario para separar los nombres de los archivos "
"que se están recuperando\n"
"> del comando mismo:\n"
"> sin esto,\n"
"> Git intentaría usar el nombre del archivo como el identificador del "
"**commit**."
msgstr ""
">\n"
"> Si lees el **output** de `git status` detenidamente,\n"
"> verás que incluye esta sugerencia:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Como deciamos,\n"
"> `git checkout` sin un identificador de versión restaura los archivos al "
"estado guardado en `HEAD`.\n"
"> El doble guión `--` es necesario para separar los nombres de los archivos "
"que se están recuperando\n"
"> del comando mismo:\n"
"> sin esto,\n"
"> Git intentaría usar el nombre del archivo como el identificador del "
"**commit**."

#: git-novice/_locale/es/_episodes/05-history.md:323
msgid ""
"El hecho de que los archivos puedan revertirse uno por uno\n"
"tiende a cambiar la forma en que las personas organizan su trabajo.\n"
"Si todo está en un documento grande,\n"
"es difícil (pero no imposible) deshacer cambios a la introducción\n"
"sin deshacer los cambios posteriores a la conclusión.\n"
"Si la introducción y la conclusión se almacenan en archivos separados,\n"
"por otra parte,\n"
"retroceder y avanzar en el tiempo se vuelve mucho más fácil."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:332
msgid "> ## Recuperando versiones anteriores de un archivo"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:333
#, fuzzy
msgid ""
">\n"
"> Jennifer ha realizado cambios en el **script**  de Python en el que ha "
"estado trabajando durante semanas, y las\n"
"> modificaciones que hizo esta mañana \"corrompieron\" el **script**  y ya "
"no funciona. Ella ha pasado\n"
"> ~ 1hr tratando de solucionarlo, sin tener suerte...\n"
">\n"
"> Por suerte, ¡Ella ha estado haciendo un seguimiento de las versiones de su "
"proyecto usando Git! ¿Cuáles comandos \n"
"> le permitirán recuperar la última versión estable de su **script**  Python "
"llamado \n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Ambos 2 y 4"
msgstr ""
">\n"
"> Jennifer ha realizado cambios en el **script**  de Python en el que ha "
"estado trabajando durante semanas, y las\n"
"> modificaciones que hizo esta mañana \"corrompieron\" el **script**  y ya "
"no funciona. Ella ha pasado\n"
"> ~ 1hr tratando de solucionarlo, sin tener suerte...\n"
">\n"
"> Por suerte, ¡Ella ha estado haciendo un seguimiento de las versiones de su "
"proyecto usando Git! ¿Cuáles comandos \n"
"> le permitirán recuperar la última versión estable de su **script**  Python "
"llamado \n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Ambos 2 y 4"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:353
#, fuzzy
msgid "> ## Revertir un commit"
msgstr "> ## Revertir un commit"

#: git-novice/_locale/es/_episodes/05-history.md:354
#, fuzzy
msgid ""
">\n"
"> Jennifer está colaborando en su **script** de Python con sus colegas y\n"
"> se da cuenta que su último **commit** en el repositorio del grupo es "
"incorrecto y quiere\n"
"> deshacerlo. Jennifer necesita deshacer correctamente para que todos en el "
"repositorio\n"
"> del grupo tengan el cambio correcto. `git revert [ID de commit "
"incorrecto]`\n"
"> hará un nuevo **commit** que va a deshacer el commit anterior erroneo de "
"Jennifer. \n"
"> Por lo tanto, `git revert` es diferente de `git checkout [commit\n"
"> ID]` porque `checkout` es para cambios locales no comprometidos con el\n"
"> repositorio de grupo. A continuación se encuentran los pasos correctos y "
"explicaciones para\n"
"> que Jennifer use `git revert`, ¿Cuál es el comando que falta?\n"
">\n"
"> 1. ________ # Mira el historial de git del proyecto para encontrar el ID "
"del **commit**\n"
">\n"
"> 2. Copia el ID (los primeros caracteres del ID, por ejemplo 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Escriba el nuevo mensaje del **commit**.\n"
">\n"
"> 5. Salva y cierra"
msgstr ""
">\n"
"> Jennifer está colaborando en su **script** de Python con sus colegas y\n"
"> se da cuenta que su último **commit** en el repositorio del grupo es "
"incorrecto y quiere\n"
"> deshacerlo. Jennifer necesita deshacer correctamente para que todos en el "
"repositorio\n"
"> del grupo tengan el cambio correcto. `git revert [ID de commit "
"incorrecto]`\n"
"> hará un nuevo **commit** que va a deshacer el commit anterior erroneo de "
"Jennifer. \n"
"> Por lo tanto, `git revert` es diferente de `git checkout [commit\n"
"> ID]` porque `checkout` es para cambios locales no comprometidos con el\n"
"> repositorio de grupo. A continuación se encuentran los pasos correctos y "
"explicaciones para\n"
"> que Jennifer use `git revert`, ¿Cuál es el comando que falta?\n"
">\n"
"> 1. ________ # Mira el historial de git del proyecto para encontrar el ID "
"del **commit**\n"
">\n"
"> 2. Copia el ID (los primeros caracteres del ID, por ejemplo 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Escriba el nuevo mensaje del **commit**.\n"
">\n"
"> 5. Salva y cierra"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:376
#, fuzzy
msgid "> ## Entendiendo Workflow y History"
msgstr "> ## Entendiendo Workflow y History"

#: git-novice/_locale/es/_episodes/05-history.md:377
#, fuzzy
msgid ""
">\n"
"> ¿Cuál es el **output** de cat venus.txt al final de este conjunto de "
"comandos?\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ nano venus.txt #captura el siguiente texto: Venus is beautiful and full "
"of love\n"
"> $ git add venus.txt\n"
"> $ nano venus.txt #agrega el siguiente texto: Venus is too hot to be "
"suitable as a base\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #esto imprimirá el contenido de venus.txt en la pantalla\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.\n"
">\n"
"> ~~~\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"
msgstr ""
">\n"
"> ¿Cuál es el **output** de cat venus.txt al final de este conjunto de "
"comandos?\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ nano venus.txt #captura el siguiente texto: Venus is beautiful and full "
"of love\n"
"> $ git add venus.txt\n"
"> $ nano venus.txt #agrega el siguiente texto: Venus is too hot to be "
"suitable as a base\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #esto imprimirá el contenido de venus.txt en la pantalla\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.\n"
">\n"
"> ~~~\n"
"> Venus is too hot to be suitable as a base\n"
"> ~~~"

#: git-novice/_locale/es/_episodes/05-history.md:419
#, fuzzy
msgid ""
">\n"
"> > ## Solución\n"
"> >\n"
"> > The answer is 2 because `git add venus.txt` was used only before add the "
"line\n"
"> > `Venus is too hot to be suitable as a base`\n"
"> > which was lost when `git checkout` was executed.\n"
"> > Using the flag `-a` with `git commit` would have prevented the lost."
msgstr ""
">\n"
"> > ## Solución\n"
"> >\n"
"> > The answer is 2 because `git add venus.txt` was used only before add the "
"line\n"
"> > `Venus is too hot to be suitable as a base`\n"
"> > which was lost when `git checkout` was executed.\n"
"> > Using the flag `-a` with `git commit` would have prevented the lost."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:429
msgid "> ## Comprobando lo que entendiste de `git diff`"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:430
msgid ""
">\n"
"> Considera este comando: `git diff HEAD~3 mars.txt`. ¿Qué predices que hará "
"este comando si lo ejecutas? ¿Qué sucede cuando lo ejecutas? ¿Por qué?\n"
">\n"
"> Prueba éste otro comando, `git diff [ID] mars.txt`, donde [ID] es \n"
"> el identificador único para tu commit más reciente. ¿Qué piensas tú que "
"sucederá,\n"
"> y qué es lo que pasa?"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:438
msgid "> ## Deshacer los cambios almacenados"
msgstr ""

#: git-novice/_locale/es/_episodes/05-history.md:439
msgid ""
">\n"
"> `git checkout` puede usarse para restaurar un **commit** anterior cuando "
"cambios no marcados se han \n"
"> hecho, pero ¿También funcionará para los cambios que se han marcado pero "
"no se han vuelto **commit**?\n"
"> Haz un cambio a `mars.txt`, agrega el cambio y usa` git checkout` para ver "
"si\n"
"> puedes eliminar tu cambio."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/05-history.md:446
#, fuzzy
msgid "> ## Explorar y resumir el History"
msgstr "> ## Explorar y resumir el History"

#: git-novice/_locale/es/_episodes/05-history.md:447
#, fuzzy
msgid ""
">\n"
"> Explorar el **history** es una parte importante de git, a menudo es un "
"desafío encontrar\n"
"> el ID de confirmación correcto, especialmente si el **commit** es de hace "
"varios meses.\n"
">\n"
"> Imagina que el proyecto `planets` tiene más de 50 archivos.\n"
"> Deseas encontrar un **commit** con texto específico en `mars.txt`.\n"
"> Cuando escribes `git log`, aparece una lista muy larga,\n"
"> ¿Cómo puede restringir la búsqueda?\n"
">\n"
"> Recuerda que el comando `git diff` nos permite explorar un archivo "
"específico,\n"
"> por ejemplo `git diff mars.txt`. Podemos aplicar una idea similar aquí.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Desafortunadamente, algunos de estos mensajes en los **commits** son muy "
"ambiguos, por ejemplo `update files`.\n"
"> ¿Cómo puedes buscar a través de estos archivos?\n"
">\n"
"> Tanto `git diff` como `git log` son muy útiles y resumen una parte "
"diferente del **history** para ti.\n"
"> ¿Es posible combinar ambos? Vamos a intentar lo siguiente:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Deberías obtener una larga lista de output, y deberías poder ver tanto los "
"dos mensajes del **commit** como la diferencia entre cada \n"
"> **commit**.\n"
">\n"
"> Pregunta: ¿Qué hace el siguiente comando?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~3 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Explorar el **history** es una parte importante de git, a menudo es un "
"desafío encontrar\n"
"> el ID de confirmación correcto, especialmente si el **commit** es de hace "
"varios meses.\n"
">\n"
"> Imagina que el proyecto `planets` tiene más de 50 archivos.\n"
"> Deseas encontrar un **commit** con texto específico en `mars.txt`.\n"
"> Cuando escribes `git log`, aparece una lista muy larga,\n"
"> ¿Cómo puede restringir la búsqueda?\n"
">\n"
"> Recuerda que el comando `git diff` nos permite explorar un archivo "
"específico,\n"
"> por ejemplo `git diff mars.txt`. Podemos aplicar una idea similar aquí.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Desafortunadamente, algunos de estos mensajes en los **commits** son muy "
"ambiguos, por ejemplo `update files`.\n"
"> ¿Cómo puedes buscar a través de estos archivos?\n"
">\n"
"> Tanto `git diff` como `git log` son muy útiles y resumen una parte "
"diferente del **history** para ti.\n"
"> ¿Es posible combinar ambos? Vamos a intentar lo siguiente:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Deberías obtener una larga lista de output, y deberías poder ver tanto los "
"dos mensajes del **commit** como la diferencia entre cada \n"
"> **commit**.\n"
">\n"
"> Pregunta: ¿Qué hace el siguiente comando?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~3 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"

# Front Matter
#: git-novice/_locale/es/_episodes/06-ignore.md:1
#, fuzzy
msgid ""
"---\n"
"title: Ignorando cosas\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo indicarle a Git que ignore los archivos que no quiero "
"rastrear?\"\n"
"objectives:\n"
"- \"Configure Git para ignorar archivos específicos.\"\n"
"- \"Explica por qué ignorar los archivos puede ser útil.\"\n"
"keypoints:\n"
"- \"El archivo `.gitignore` le dice a Git qué archivos ignorar.\"\n"
"---"
msgstr ""
"---\n"
"title: Ignorando cosas\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo indicarle a Git que ignore los archivos que no quiero "
"rastrear?\"\n"
"objectives:\n"
"- \"Configure Git para ignorar archivos específicos.\"\n"
"- \"Explica por qué ignorar los archivos puede ser útil.\"\n"
"keypoints:\n"
"- \"El archivo `.gitignore` le dice a Git qué archivos ignorar.\"\n"
"---"

#: git-novice/_locale/es/_episodes/06-ignore.md:14
msgid ""
"¿Qué pasa si tenemos archivos que no queremos que Git rastree,\n"
"como archivos de copia de seguridad creados por nuestro editor\n"
"o archivos intermedios creados durante el análisis de datos?\n"
"Vamos a crear algunos archivos ficticios:"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:25
msgid "Mira lo que Git dice:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/06-ignore.md:32
msgid ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\\ta.dat\n"
"\\tb.dat\n"
"\\tc.dat\n"
"\\tresults/\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:45
msgid ""
"Colocar estos archivos bajo el control de versiones sería un desperdicio de "
"espacio en disco. \n"
"Y lo que es peor, \n"
"al tenerlos todos listados, podría distraernos de los cambios que realmente "
"importan, \n"
"así que vamos a decirle a Git que los ignore."
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:50
#, fuzzy
msgid ""
"Lo hacemos creando un archivo en el directorio raíz de nuestro proyecto "
"llamado `.gitignore`:"
msgstr ""
"Lo hacemos creando un archivo en el directorio raíz de nuestro proyecto "
"llamado `.gitignore`:"

#: git-novice/_locale/es/_episodes/06-ignore.md:64
msgid ""
"Estos patrones le dicen a Git que ignore cualquier archivo cuyo nombre "
"termine en `.dat`\n"
"y todo lo que haya en el directorio `results`.\n"
"(Si alguno de estos archivos ya estaba siendo rastreado, \n"
"Git seguirá rastreándolos.)"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:69
msgid ""
"Una vez que hemos creado este archivo, \n"
"la salida de `git status` es mucho más limpia:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/06-ignore.md:77
msgid ""
"~~~\n"
"On branch master\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\\t.gitignore\n"
"nothing added to commit but untracked files present (use \"git add\" to "
"track)\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:87
msgid ""
"Lo único que Git advierte ahora, es el archivo `.gitignore` recién creado.\n"
"Podrías pensar que no queremos rastrearlo, \n"
"pero todos aquellos con los que compartimos nuestro repositorio "
"probablemente desearán\n"
"ignorar las mismas cosas que nosotros.\n"
"Vamos a agregar y hacer \"commit\" de `.gitignore`:"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:106
msgid ""
"Como ventaja, usar `.gitignore` nos ayuda a evitar agregar accidentalmente "
"al repositorio los archivos que no queremos rastrear:"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:120
msgid ""
"Si realmente queremos anular la configuración de ignorar, \n"
"podemos usar `git add -f` para obligar a Git a añadir algo. Por ejemplo, \n"
"`git add -f a.dat`.\n"
"También podemos ver siempre el estado de los archivos ignorados si queremos:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/06-ignore.md:144
msgid "> ## Ignorar archivos anidados"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:145
#, fuzzy
msgid ""
">\n"
"> Dado un directorio con la siguiente estructura:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cómo ignorarías sólo `results/plots` y no `results/data`?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Como ocurre con la mayoría de los problemas de programación, hay \n"
"> > varias maneras de resolver esto. Si sólo deseas ignorar el \n"
"> > contenido de `results/plots`, puedes cambiar tu `.gitignore` para \n"
"> > ignorar solamente la subcarpeta `/plots/` añadiendo la siguiente línea a "
"su .gitignore:\n"
"> >\n"
"> > `results/plots/`\n"
"> >\n"
"> > Si, en cambio, deseas ignorar todo en `/results/`, pero deseas realizar "
"el\n"
"> > seguimiento de `results/data`, puedes agregar `results/` a su .gitignore "
"y\n"
"> > crear una excepción para la carpeta `results/data/`.\n"
"> > El siguiente reto cubrirá este tipo de solución.\n"
"> >\n"
"> >\n"
"> > A veces el patrón `**` viene muy bien para referirse a múltiples\n"
"> > niveles de directorio. E.g. `**/results/plots/*` hará que git ignore el\n"
"> > directorio `results/plots` en cualquier directorio raíz."
msgstr ""
">\n"
"> Dado un directorio con la siguiente estructura:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cómo ignorarías sólo `results/plots` y no `results/data`?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Como ocurre con la mayoría de los problemas de programación, hay \n"
"> > varias maneras de resolver esto. Si sólo deseas ignorar el \n"
"> > contenido de `results/plots`, puedes cambiar tu `.gitignore` para \n"
"> > ignorar solamente la subcarpeta `/plots/` añadiendo la siguiente línea a "
"su .gitignore:\n"
"> >\n"
"> > `results/plots/`\n"
"> >\n"
"> > Si, en cambio, deseas ignorar todo en `/results/`, pero deseas realizar "
"el\n"
"> > seguimiento de `results/data`, puedes agregar `results/` a su .gitignore "
"y\n"
"> > crear una excepción para la carpeta `results/data/`.\n"
"> > El siguiente reto cubrirá este tipo de solución.\n"
"> >\n"
"> >\n"
"> > A veces el patrón `**` viene muy bien para referirse a múltiples\n"
"> > niveles de directorio. E.g. `**/results/plots/*` hará que git ignore el\n"
"> > directorio `results/plots` en cualquier directorio raíz."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/06-ignore.md:177
#, fuzzy
msgid "> ## Incluyendo archivos específicos"
msgstr "> ## Incluyendo archivos específicos"

#: git-novice/_locale/es/_episodes/06-ignore.md:178
#, fuzzy
msgid ""
">\n"
"> ¿Cómo ignorarías todos los archivos `.data` en tu directorio raíz, "
"excepto` final.data`?\n"
"> Sugerencia: Descubre lo que `!` (el signo de exclamación) hace\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Agrega las siguientes dos líneas a tu archivo .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.data # ignora todos los archivos .data\n"
"> > !final.data # excepto el archivo final.data\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > El signo de exclamación incluirá una entrada previamente excluida."
msgstr ""
">\n"
"> ¿Cómo ignorarías todos los archivos `.data` en tu directorio raíz, "
"excepto` final.data`?\n"
"> Sugerencia: Descubre lo que `!` (el signo de exclamación) hace\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Agrega las siguientes dos líneas a tu archivo .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.data # ignora todos los archivos .data\n"
"> > !final.data # excepto el archivo final.data\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > El signo de exclamación incluirá una entrada previamente excluida."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/06-ignore.md:196
msgid "> ## Ignorando todos los archivos de datos en un directorio"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:197
#, fuzzy
msgid ""
">\n"
"> Dado un directorio con la siguiente estructura:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.data\n"
"> results/data/position/gps/b.data\n"
"> results/data/position/gps/c.data\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cuál es la regla más corta en `.gitignore` para ignorar todos los "
"archivos `.data`\n"
"> en `result/data/position/gps`? No ignores el archivo `info.txt`.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Agregando `results/data/position/gps/*.data` coincidirá con cada archivo "
"en\n"
"> > `results/data/position/gps` que termine con `.data`.\n"
"> > El archivo `results/data/position/gps/info.txt` no será ignorado."
msgstr ""
">\n"
"> Dado un directorio con la siguiente estructura:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.data\n"
"> results/data/position/gps/b.data\n"
"> results/data/position/gps/c.data\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cuál es la regla más corta en `.gitignore` para ignorar todos los "
"archivos `.data`\n"
"> en `result/data/position/gps`? No ignores el archivo `info.txt`.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Agregando `results/data/position/gps/*.data` coincidirá con cada archivo "
"en\n"
"> > `results/data/position/gps` que termine con `.data`.\n"
"> > El archivo `results/data/position/gps/info.txt` no será ignorado."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/06-ignore.md:220
msgid "> ## El orden de las reglas"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:221
#, fuzzy
msgid ""
">\n"
"> Dado un archivo `.gitignore` con el siguiente contenido:\n"
">\n"
"> ~~~\n"
"> *.data\n"
"> !*.data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cuál será el resultado?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > El modificador `!` anulará algún patrón ignorado previamente definido.\n"
"> > Debido a que la entrada `!*.data` anula todos los archivos` .data` "
"anteriores en `.gitignore`,\n"
"> > ninguno de ellos será ignorado, y todos los archivos` .data` serán "
"rastreados.\n"
"> >"
msgstr ""
">\n"
"> Dado un archivo `.gitignore` con el siguiente contenido:\n"
">\n"
"> ~~~\n"
"> *.data\n"
"> !*.data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Cuál será el resultado?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > El modificador `!` anulará algún patrón ignorado previamente definido.\n"
"> > Debido a que la entrada `!*.data` anula todos los archivos` .data` "
"anteriores en `.gitignore`,\n"
"> > ninguno de ellos será ignorado, y todos los archivos` .data` serán "
"rastreados.\n"
"> >"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/06-ignore.md:241
msgid "> ## Archivos de bitácora"
msgstr ""

#: git-novice/_locale/es/_episodes/06-ignore.md:242
#, fuzzy
msgid ""
">\n"
"> Supón que escribiste un **script** que crea muchos archivos de registro "
"con la estructura `log_01`, `log_02`, `log_03`, etc. Deseas conservarlos "
"pero no rastrearlos a través de `git`.\n"
">\n"
"> 1. Escribe **una entrada** en tu archivo `.gitignore` que excluya los "
"archivos con estructura `log_01`, `log_02`, etc.\n"
">\n"
"> 2. Prueba tu \"patrón de ignorar\" creando algunos archivos ficticios "
"`log_01`, etc.\n"
">\n"
"> 3. Te das cuenta de que el archivo `log_01` es muy importante después de "
"todo, así que lo tienes que agregar a los archivos rastreados sin cambiar "
"el` .gitignore` de nuevo\n"
">\n"
"> 4. Discute con tu compañero de a lado qué otros tipos de archivos podrían "
"residir en tu directorio que no deseas seguir y por tanto excluir a través "
"de `.gitignore`.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Agrega `log_*` o `log*` como nueva entrada en tu archivo .gitignore\n"
"> > 3. Rastrea `log_01` usando `git add -f log_01`"
msgstr ""
">\n"
"> Supón que escribiste un **script** que crea muchos archivos de registro "
"con la estructura `log_01`, `log_02`, `log_03`, etc. Deseas conservarlos "
"pero no rastrearlos a través de `git`.\n"
">\n"
"> 1. Escribe **una entrada** en tu archivo `.gitignore` que excluya los "
"archivos con estructura `log_01`, `log_02`, etc.\n"
">\n"
"> 2. Prueba tu \"patrón de ignorar\" creando algunos archivos ficticios "
"`log_01`, etc.\n"
">\n"
"> 3. Te das cuenta de que el archivo `log_01` es muy importante después de "
"todo, así que lo tienes que agregar a los archivos rastreados sin cambiar "
"el` .gitignore` de nuevo\n"
">\n"
"> 4. Discute con tu compañero de a lado qué otros tipos de archivos podrían "
"residir en tu directorio que no deseas seguir y por tanto excluir a través "
"de `.gitignore`.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Agrega `log_*` o `log*` como nueva entrada en tu archivo .gitignore\n"
"> > 3. Rastrea `log_01` usando `git add -f log_01`"

# Front Matter
#: git-novice/_locale/es/_episodes/07-github.md:1
#, fuzzy
msgid ""
"---\n"
"title: Repositorios remotos en GitHub\n"
"teaching: 30\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo compartir los cambios con otros en la web?\"\n"
"objectives:\n"
"- \"Explica qué es un repositorio remoto y por qué es útil.\"\n"
"- \"Hacer **push** y **pull** en un repositorio remoto\"\n"
"keypoints:\n"
"- \"Un repositorio Git local puede ser conectado a uno o más repositorios "
"remotos.\"\n"
"- \"Usa el protocolo HTTPS para conectarte a un repositorio remoto hasta que "
"hayas aprendido como hacerlo con SSH.\"\n"
"- \"`git push` copia los cambios desde el repositorio local a un repositorio "
"remoto.\"\n"
"- \"`git pull` copia los cambios desde un repositorio remoto a un "
"repositorio local.\"\n"
"---"
msgstr ""
"---\n"
"title: Repositorios remotos en GitHub\n"
"teaching: 30\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo compartir los cambios con otros en la web?\"\n"
"objectives:\n"
"- \"Explica qué es un repositorio remoto y por qué es útil.\"\n"
"- \"Hacer **push** y **pull** en un repositorio remoto\"\n"
"keypoints:\n"
"- \"Un repositorio Git local puede ser conectado a uno o más repositorios "
"remotos.\"\n"
"- \"Usa el protocolo HTTPS para conectarte a un repositorio remoto hasta que "
"hayas aprendido como hacerlo con SSH.\"\n"
"- \"`git push` copia los cambios desde el repositorio local a un repositorio "
"remoto.\"\n"
"- \"`git pull` copia los cambios desde un repositorio remoto a un "
"repositorio local.\"\n"
"---"

#: git-novice/_locale/es/_episodes/07-github.md:17
msgid ""
"Cuando se trabaja en colaboración con otras personas es cuando el sistema de "
"control de versiones alcanza su pleno potencial. Ya hemos visto la mayor "
"parte de las herramientas que necesitamos para ello, tan sólo nos falta ver "
"cómo copiar los cambios realizados de un repositorio a otro."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:19
msgid ""
"Sistemas como Git ya nos permiten mover el trabajo realizado entre dos "
"repositorios cualesquiera. Sin embargo, en la práctica es más sencillo "
"establecer uno de ellos como repositorio central y tenerlo en la red en "
"lugar de tu computadora particular. La mayoría de desarrolladores usan "
"servicios de alojamiento en la red, tales como [GitHub](http://github.com), "
"[BitBucket](http://bitbucket.org) o [GitLab](http://gitlab.com/), para "
"alojar ese repositorio central; en la última sección de esta lección "
"exploraremos los pros y los contras de cada uno de ellos."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:21
msgid ""
"Empecemos por compartir con todos los demás los cambios que hemos realizado "
"en nuestro proyecto actual. Para ello, ingresa en tu cuenta de GitHub y haz "
"click en el icono que hay en la esquina superior derecha para crear un nuevo "
"repositorio llamado `planets`:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:23
#, fuzzy
msgid ""
"![Creando un Repositorio en GitHub (Paso 1)](../fig/github-create-repo-01."
"png)"
msgstr ""
"![Creando un Repositorio en GitHub (Paso 1)](../fig/github-create-repo-01."
"png)"

#: git-novice/_locale/es/_episodes/07-github.md:25
#, fuzzy
msgid ""
"Dale a tu repositorio el nombre \"planets\" y haz click en \"Create "
"repository\":"
msgstr ""
"Dale a tu repositorio el nombre \"planets\" y haz click en \"Create "
"repository\":"

#: git-novice/_locale/es/_episodes/07-github.md:27
#, fuzzy
msgid ""
"![Creando un Repositorio en GitHub (Paso 2)](../fig/github-create-repo-02."
"png)"
msgstr ""
"![Creando un Repositorio en GitHub (Paso 2)](../fig/github-create-repo-02."
"png)"

#: git-novice/_locale/es/_episodes/07-github.md:29
msgid ""
"Tan pronto es creado el repositorio, GitHub muestra una página con una URL y "
"algo de información sobre cómo configurar tu repositorio local."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:31
#, fuzzy
msgid ""
"![Creando un Repositorio en GitHub (Paso 3)](../fig/github-create-repo-03."
"png)"
msgstr ""
"![Creando un Repositorio en GitHub (Paso 3)](../fig/github-create-repo-03."
"png)"

#: git-novice/_locale/es/_episodes/07-github.md:33
msgid "Esto en realidad ejecuta lo siguiente en los servidores de GitHub:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:42
msgid ""
"Nuestro repositorio local contiene nuestro trabajo previo en `mars.txt`, "
"pero el repositorio remoto en GitHub todavía no contiene ningún archivo:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:44
#, fuzzy
msgid ""
"![Repositorio en GitHub recién creado](../fig/git-freshly-made-github-repo."
"svg)"
msgstr ""
"![Repositorio en GitHub recién creado](../fig/git-freshly-made-github-repo."
"svg)"

#: git-novice/_locale/es/_episodes/07-github.md:46
#, fuzzy
msgid ""
"El siguiente paso es conectar los dos repositorios. Ello se consigue "
"convirtiendo al repositorio en GitHub en un [repositorio remoto]({{ page."
"root }}/reference/#remote) del repositorio local. La página de inicio del "
"repositorio en GitHub incluye la secuencia de caracteres que necesitamos "
"para identificarlo:"
msgstr ""
"El siguiente paso es conectar los dos repositorios. Ello se consigue "
"convirtiendo al repositorio en GitHub en un [repositorio remoto]({{ page."
"root }}/reference/#remote) del repositorio local. La página de inicio del "
"repositorio en GitHub incluye la secuencia de caracteres que necesitamos "
"para identificarlo:"

#: git-novice/_locale/es/_episodes/07-github.md:48
#, fuzzy
msgid ""
"![Dónde encontrar la URL del Repositorio en GitHub](../fig/github-find-repo-"
"string.png)"
msgstr ""
"![Dónde encontrar la URL del Repositorio en GitHub](../fig/github-find-repo-"
"string.png)"

#: git-novice/_locale/es/_episodes/07-github.md:50
#, fuzzy
msgid ""
"Haz click en el enlace 'HTTPS' para cambiar el [protocolo]({{ page.root }}/"
"reference/#protocol) de SSH a HTTPS."
msgstr ""
"Haz click en el enlace 'HTTPS' para cambiar el [protocolo]({{ page.root }}/"
"reference/#protocol) de SSH a HTTPS."

#: git-novice/_locale/es/_episodes/07-github.md:53
#, fuzzy
msgid ""
">\n"
">Usamos aquí HTTPS porque no necesita ninguna configuración adicional.\n"
">Si en el curso quieres configurar el acceso mediante SSH, que es un poco "
"más seguro,\n"
">puedes seguir cualquiera de los excelentes tutoriales que existen en\n"
">[GitHub](https://help.github.com/articles/generating-ssh-keys), \n"
">[Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/Set"
"+up+SSH+for+Git) y\n"
">[GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n"
">(este último con capturas animadas de pantalla)."
msgstr ""
">\n"
">Usamos aquí HTTPS porque no necesita ninguna configuración adicional.\n"
">Si en el curso quieres configurar el acceso mediante SSH, que es un poco "
"más seguro,\n"
">puedes seguir cualquiera de los excelentes tutoriales que existen en\n"
">[GitHub](https://help.github.com/articles/generating-ssh-keys), \n"
">[Atlassian/BitBucket](https://confluence.atlassian.com/display/BITBUCKET/Set"
"+up+SSH+for+Git) y\n"
">[GitLab](https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/)\n"
">(este último con capturas animadas de pantalla)."

#: git-novice/_locale/es/_episodes/07-github.md:63
#, fuzzy
msgid ""
"![Cambiando la URL del Repositorio en GitHub](../fig/github-change-repo-"
"string.png)"
msgstr ""
"![Cambiando la URL del Repositorio en GitHub](../fig/github-change-repo-"
"string.png)"

#: git-novice/_locale/es/_episodes/07-github.md:65
msgid ""
"Copia dicha URL desde el navegador, ve al repositorio local `planets` y "
"ejecuta allí este comando:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:72
msgid ""
"Asegúrate de usar la URL de tu repositorio en lugar de la de vlad: la única "
"diferencia debería ser tu nombre de usuario en lugar de `vlad`."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:74
msgid ""
"Podemos comprobar que el comando ha funcionado bien ejecutando `git remote -"
"v`:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:87
msgid ""
"El nombre `origin` es un apodo local para tu repositorio remoto. Se puede "
"usar cualquier otro nombre si se desea, pero `origin` es la elección más "
"habitual."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:89
msgid ""
"Una vez seleccionado el apodo local `origin`, el siguiente comando enviará "
"los cambios realizados en nuestro repositorio local al repositorio en GitHub:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:109
#, fuzzy
msgid ""
">\n"
"> Si la red a la que estás conectado usa un proxy es posible que tu último\n"
"> comando fallara con el siguiente mensaje de error: \"Could not resolve "
"hostname\".\n"
"> Para solucionarlo es necesario informar a Git sobre el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy http://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Si después te conectas a otra red que no usa un proxy es necesario "
"decirle\n"
"> a Git que deshabilite el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Si la red a la que estás conectado usa un proxy es posible que tu último\n"
"> comando fallara con el siguiente mensaje de error: \"Could not resolve "
"hostname\".\n"
"> Para solucionarlo es necesario informar a Git sobre el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global http.proxy http://user:password@proxy.url\n"
"> $ git config --global https.proxy http://user:password@proxy.url\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Si después te conectas a otra red que no usa un proxy es necesario "
"decirle\n"
"> a Git que deshabilite el proxy:\n"
">\n"
"> ~~~\n"
"> $ git config --global --unset http.proxy\n"
"> $ git config --global --unset https.proxy\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/07-github.md:130
msgid "> ## Gestores de contraseñas"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:131
msgid ""
">\n"
"> Si tu sistema operativo tiene un gestor de contraseñas configurado, `git "
"push`\n"
"> intentará usarlo cuando necesite un nombre de usuario y contraseña. Al "
"menos\n"
"> ese es el comportamiento por defecto para Git.language-bash en Windows.\n"
"> Si quieres que haya que introducir el nombre de usuario y contraseña en la "
"terminal,\n"
"> en lugar de usar el gestor de contraseñas, hay que ejecutar el siguiente\n"
"> comando en la terminal antes de lanzar `git push`:\n"
">\n"
"> ~~~\n"
"> $ unset SSH_ASKPASS\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> A pesar de lo que se podría deducir por el nombre, [git usa `SSH_ASKPASS`\n"
"> para todas las peticiones de credenciales](http://git-scm.com/docs/"
"gitcredentials#_requesting_credentials),\n"
"> tanto si se está usando git vía SSH como si se está usando vía https, por "
"lo\n"
"> que es posible que quieras deshabilitarlo en ambos casos con `unset "
"SSH_ASKPASS` .\n"
">\n"
"> Otra alternativa es añadir `unset SSH_ASKPASS` al final de tu `~/.bashrc` "
"para que\n"
"> git use por defecto la terminal para los nombres de usuario y las "
"contraseñas."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:153
msgid ""
"Nuestros repositorios local y remoto se encuentran ahora en el siguiente "
"estado:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:155
#, fuzzy
msgid ""
"![Repositorio en GitHub después del primer envío](../fig/github-repo-after-"
"first-push.svg)"
msgstr ""
"![Repositorio en GitHub después del primer envío](../fig/github-repo-after-"
"first-push.svg)"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/07-github.md:157
msgid "> ## La opción '-u'"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:158
msgid ""
">\n"
"> En la documentación puedes ver que en ocasiones se usa la opción `-u` con "
"el comando `git push`.\n"
"> Esta opción es sinónimo de la opción `--set-upstream-to` para el comando "
"`git branch` y se usa\n"
"> para asociar el **branch** actual con un **branch** remoto, de modo que el "
"comando `git pull`\n"
"> pueda usarse sin argumentos. Para hacer esto simplemente ejecuta `git push "
"-u origin master`\n"
"> una vez que el repositorio remoto haya sido creado."
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:166
msgid ""
"También podemos hacer **pull**, es decir, traernos cambios desde el "
"repositorio remoto al repositorio local:"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:180
msgid ""
"En este caso, hacer **pull** no ha tenido ningún efecto porque los dos "
"repositorios están ya sincronizados. Por el contrario, si alguien antes "
"hubiera subido con **push** algunos cambios al repositorio en GitHub, este "
"comando los habría incorporado a nuestro repositorio local."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/07-github.md:182
msgid "> ## Interfaz gráfica de GitHub"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:183
msgid ""
">\n"
"> Navega hasta tu repositorio `planets` en GitHub.\n"
"> En la pestaña Code, localiza el texto \"XX commits\" (donde \"XX\" es "
"algún número) y haz click en él.\n"
"> Mueve el cursor sobre los tres botones que hay a la derecha de cada "
"**commit**, y haz click en ellos.\n"
"> ¿Qué información puedes obtener/explorar con estos botones?\n"
"> ¿Cómo obtendrías la misma información en la terminal?\n"
">\n"
"> > ## Solución\n"
"> > El botón más a la izquierda (con el dibujo de un portapapeles) sirve "
"para copiar en el portapapeles el identificador completo del **commit** en "
"cuestión. En la terminal, ```git log``` muestra los identificadores "
"completos de cada **commit**.\n"
"> >\n"
"> > Haciendo click en el botón de en medio, se pueden ver todos los cambios "
"efectuados con el **commit** en cuestión. Las líneas verdes sombreadas "
"indican adiciones y las rojas eliminaciones. En la terminal se puede ver lo "
"mismo con ```git diff```. En particular, ```git diff ID1..ID2``` donde ID1 y "
"ID2 son identificadores de **commits** (e.g. ```git diff "
"a3bf1e5..041e637```) mostrará las diferencias entre esos dos **commits**.\n"
"> >\n"
"> > El botón más a la derecha permite ver todos los archivos que existían en "
"el repositorio en el momento del **commit** en cuestión. Para ver lo mismo "
"en la terminal sería necesario hacer **checkout** del repositorio a ese "
"momento del tiempo. Para ello se ejecutaría ```git checkout ID``` donde ID "
"es el identificador del **commit** que queremos investigar. ¡Si se hace esto "
"hay que acordarse luego de poner el repositorio de nuevo en el estado "
"correcto!"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/07-github.md:199
msgid "> ## Fecha y Hora en GitHub"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:200
#, fuzzy
msgid ""
">\n"
"> Crea un repositorio remoto en GitHub. Haz **push** de los contenidos de tu "
"repositorio local\n"
"> al remoto. Haz cambios en tu repositorio local y haz **push** de dichos "
"cambios.\n"
"> Ve al repo recién creado en GitHub y comprueba las fechas y horas, también "
"llamadas\n"
"> [timestamps]({{ page.root }}/reference/#timestamp) de los ficheros.  ¿Cómo "
"registra\n"
"> GitHub los tiempos, y por qué?\n"
">\n"
"> > ## Solución\n"
"> > Github muestra los tiempos en formato relativo legible para los humanos "
"(i.e. \"22 hours ago\" or \"three weeks ago\"). Sin embargo, si mueves el "
"cursor sobre un **timestamp**, podrás ver el tiempo exacto en el que se "
"realizó el último cambio al fichero."
msgstr ""
">\n"
"> Crea un repositorio remoto en GitHub. Haz **push** de los contenidos de tu "
"repositorio local\n"
"> al remoto. Haz cambios en tu repositorio local y haz **push** de dichos "
"cambios.\n"
"> Ve al repo recién creado en GitHub y comprueba las fechas y horas, también "
"llamadas\n"
"> [timestamps]({{ page.root }}/reference/#timestamp) de los ficheros.  ¿Cómo "
"registra\n"
"> GitHub los tiempos, y por qué?\n"
">\n"
"> > ## Solución\n"
"> > Github muestra los tiempos en formato relativo legible para los humanos "
"(i.e. \"22 hours ago\" or \"three weeks ago\"). Sin embargo, si mueves el "
"cursor sobre un **timestamp**, podrás ver el tiempo exacto en el que se "
"realizó el último cambio al fichero."

#: git-novice/_locale/es/_episodes/07-github.md:213
msgid ""
">\n"
"> En esta lección hemos introducido el comando \"git push\".\n"
"> ¿En qué se diferencia \"git push\" de \"git commit\"?\n"
">\n"
"> > ## Solución\n"
"> > Cuando enviamos cambios con **push**, estamos interaccionando con un "
"repositorio remoto para actualizarlo con los cambios que hemos hecho "
"localmente (a menudo esto supone compartir con otros los cambios "
"realizados). Por el contrario, **commit** únicamente actualiza tu "
"repositorio local."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/07-github.md:222
msgid "> ## Corrigiendo ajustes en el repositorio remoto"
msgstr ""

#: git-novice/_locale/es/_episodes/07-github.md:223
msgid ""
">\n"
"> Es muy frecuente cometer un error al especificar la URL del repositorio "
"remoto.\n"
"> Este ejercicio trata de cómo corregir este tipo de errores.\n"
"> Empecemos por añadir un repositorio remoto con una URL inválida:\n"
">\n"
"> ~~~\n"
"> git remote add broken https://github.com/this/url/is/invalid\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ¿Obtienes un error al añadir el repositorio remoto? ¿Se te ocurre algún\n"
"> comando que hiciera obvio que la URL de tu repositorio remoto no es \n"
"> válida? ¿Se te ocurre cómo corregir la URL? (pista: usa `git remote\n"
"> -h`). No olvides eliminar este repositorio remoto una vez que\n"
"> hayas terminado este ejercicio.\n"
">\n"
"> > ## Solución\n"
"> > No aparece ningún error cuando añadimos el repositorio remoto (añadir un "
"repositorio remoto informa a git sobre dicho repositorio, pero no intenta "
"usarlo todavía). Sí veremos un error en cuanto intentemos usarlo con ```git "
"push```. El comando ```git remote set-url``` nos permite cambiar la URL del "
"repositorio remoto para corregirla."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/07-github.md:244
#, fuzzy
msgid "> ## Licencia GitHub y ficheros README"
msgstr "> ## Licencia GitHub y ficheros README"

#: git-novice/_locale/es/_episodes/07-github.md:245
msgid ""
">\n"
"> En esta sección hemos aprendido cómo crear un repositorio remoto en "
"GitHub, pero cuando lo hicimos\n"
"> no añadimos ningún fichero README.md ni ningún fichero de licencia. Si lo "
"hubiéramos hecho, ¿qué crees que habría sucedido\n"
"> cuando intentaste enlazar tus repositorios local y remoto?\n"
">\n"
"> > ## Solución\n"
"> > En este caso, puesto que ya teníamos un fichero README en nuestro propio "
"repositorio (local), habríamos visto un conficto de unión, conocido como "
"**merge conflict** (que es cuando git se da cuenta de que hay dos versiones "
"de un mismo fichero y nos pide que resolvamos las diferencias)."
msgstr ""

# Front Matter
#: git-novice/_locale/es/_episodes/08-collab.md:1
#, fuzzy
msgid ""
"---\n"
"title: Trabajos en colaboración\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo usar el control de versiones para colaborar con otras "
"personas?\" \n"
"objectives:\n"
"- Clonar un repositorio remoto.\n"
"- Colaborar en crear un repositorio común.\n"
"keypoints: \n"
"- '`git clone` copia un repositorio remoto para crear un repositorio local "
"llamado `origin` configurado automáticamente.'\n"
"---"
msgstr ""
"---\n"
"title: Trabajos en colaboración\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo usar el control de versiones para colaborar con otras "
"personas?\" \n"
"objectives:\n"
"- Clonar un repositorio remoto.\n"
"- Colaborar en crear un repositorio común.\n"
"keypoints: \n"
"- '`git clone` copia un repositorio remoto para crear un repositorio local "
"llamado `origin` configurado automáticamente.'\n"
"---"

#: git-novice/_locale/es/_episodes/08-collab.md:14
msgid ""
"Para el siguiente paso, formen parejas. Una persona será el \"dueño\" y la "
"otra el \"colaborador\". El objetivo es que el colaborador agregue cambios "
"al repositorio del dueño. Vamos a cambiar roles al final, de modo que ambas "
"personas puedan participar como dueño y colaborador"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:16
msgid "> ## Practicando por tu cuenta"
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:17
msgid ""
">\n"
"> Si estás trabajando en esta lección por tu cuenta, puedes hacerlo abriendo "
"una segunda sesión en la \n"
"> ventana de la terminal. Esta ventana representará a tu compañero "
"trabajando en otra computadora. No necesitas darle acceso a nadie en GitHub, "
"pues tú serás ambos \"compañeros\"."
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:22
msgid ""
"El dueño debe dar acceso al colaborador. En GitHub, haz clic en el botón de "
"configuración arriba a la derecha,\n"
"luego selecciona \"Collaborators\" e ingresa el nombre de tu colaborador."
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:27
#, fuzzy
msgid ""
"Para aceptar la invitación de acceso al repositorio, el colaborador\n"
"debe ingresar a [https://github.com/notifications](https://github.com/"
"notifications).\n"
"Una vez allí, se puede aceptar la invitación a dicho repositorio."
msgstr ""
"Para aceptar la invitación de acceso al repositorio, el colaborador\n"
"debe ingresar a [https://github.com/notifications](https://github.com/"
"notifications).\n"
"Una vez allí, se puede aceptar la invitación a dicho repositorio."

#: git-novice/_locale/es/_episodes/08-collab.md:31
msgid ""
"Luego, el colaborador debe descargar una copia del repositorio del dueño a "
"su máquina. Esto se conoce como \"clonar un repositorio\". Para clonar el "
"repositorio del dueño en su carpeta de `Desktop`, el colaborador debe "
"ejecutar las siguientes líneas:"
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:38
msgid "Reemplaza 'vlad' con el nombre de usuario del dueño."
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:42
msgid ""
"El colaborador puede ahora hacer cambios en la versión clonada del "
"repositorio del dueño, en la misma forma en que se hacían previamente:"
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:68
msgid ""
"Luego enviar los cambios hacia el *repositorio del dueño* en GitHub haciendo "
"**push**:"
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:86
msgid ""
"Nota que no es necesario crear un directorio remoto llamado `origin`: Git "
"utiliza este nombre de manera automática cuando clonamos un repositorio. "
"(Esta es la razón por la cual `origin` era una opción sensata a la hora de "
"configurar directorios remotos a mano)."
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:88
msgid ""
"Ahora echa un vistazo al repositorio del dueño en su sitio de Github (quizá "
"debas actualizar la página). Deberás ver el nuevo **commit** hecho por el "
"colaborador."
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:90
msgid ""
"Para descargar los cambios hechos por el colaborador desde GitHub, el dueño "
"debe correr las siguientes líneas:"
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:112
msgid ""
"Ahora hay tres repositorios sincronizados (el local del dueño, el local del "
"colaborador y el del dueño en GitHub)."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:114
msgid "> ## Un flujo de trabajo colaborativo básico"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:115
#: git-novice/_locale/es/_episodes/08-collab.md:121
#: git-novice/_locale/es/_episodes/08-collab.md:141
msgid "> "
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:116
msgid ""
"> Es considerado buena práctica estar seguro de que tienes una versión "
"actualizada del repositorio en el que colaboras. Para ello deberías hacer un "
"`git pull` antes de hacer cambios. El enfoque sería:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:117
msgid "> * actualizar el repositorio local `git pull origin master`,"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:118
msgid "> * realizar cambios `git add`,"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:119
msgid "> * realizar un **commit** `git commit -m`, y"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:120
msgid "> * cargar las actualizaciones a GitHub con `git push origin master`"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:122
msgid ""
"> Es mejor hacer varias actualizaciones pequeñas que un **commit** grande "
"con cambios enormes. **Commits** pequeños son más fáciles de leer y revisar."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:125
msgid "> ## Cambiar roles"
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:126
#, fuzzy
msgid ""
">\n"
"> Cambien los roles y repitan todo el proceso."
msgstr ""
">\n"
"> Cambien los roles y repitan todo el proceso."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:130
#, fuzzy
msgid "> ## Revisar Cambios"
msgstr "> ## Revisar Cambios"

#: git-novice/_locale/es/_episodes/08-collab.md:131
msgid ""
">\n"
"> El dueño hace un **push** de los **commits** al repositorio sin dar "
"información al colaborador. ¿Cómo puede éste saberlo desde la linea de "
"comandos y desde GitHub?\n"
">\n"
"> > ## Solution\n"
"> > En la linea de comandos, el colaborador puede usar ```git fetch origin "
"master``` para acceder a los cambios remotos en el repositorio local, sin "
"hacer un **merge**. Luego, corriendo ```git diff master origin/master```, el "
"colaborador verá los cambios en la terminal.  \n"
"> > En GitHub, el colaborador puede realizar su propio **fork** y hallar la "
"barra gris que indica \"This branch is 1 commit behind Our-Respository:"
"master.\". Lejos, a la derecha de la barra gris, hay un link para comparar. "
"En la página para comparar, el colaborador debe cambiar el **fork** hacia su "
"propio repositorio, luego hacer click en el link para \"comparar entre forks"
"\" y, finalmente, cambiar el **fork** al repositorio principal. Esto "
"mostrará todos los **commits** que sean distintos."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:140
#, fuzzy
msgid "> ## Comentar cambios en GitHub"
msgstr "> ## Comentar cambios en GitHub"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:142
msgid ""
"> El colaborador podría tener algunas preguntas sobre cambios en una línea "
"hechos por el dueño. "
msgstr ""

#: git-novice/_locale/es/_episodes/08-collab.md:143
msgid ""
">\n"
"> Con GitHub, es posible comentar la diferencia en un **commit**. Sobre la "
"línea de código a comentar aparece un botón azul para abrir una ventana. \n"
">\n"
"> El colaborador puede escribir sus comentarios y sugerencias usando la "
"interfaz de GitHub."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:149
msgid "> ## Historial de versiones, backup y control de versiones"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/08-collab.md:150
msgid ""
"> Algunos softwares que permiten hacer **backups** también permiten guardar "
"un historial de versiones y recuperar versiones específicas. ¿Cómo es esta "
"funcionalidad distinta del control de versiones? ¿Cuáles son los beneficios "
"de usar control de versiones, Git y GitHub? "
msgstr ""

# Front Matter
#: git-novice/_locale/es/_episodes/09-conflict.md:1
#, fuzzy
msgid ""
"---\n"
"title: Conflictos\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué hago cuando mis cambios entran en conflicto con los de otra persona?"
"\"\n"
"objectives:\n"
"- \"Explicar qué son los conflictos y cuándo pueden ocurrir.\"\n"
"- \"Resolver conflictos que resultan de una fusión.\"\n"
"keypoints:\n"
"- \"Los conflictos ocurren cuando dos o más personas cambian el mismo "
"archivo(s) al mismo tiempo.\"\n"
"- \"El sistema de control de versiones no permite a las personas "
"sobreescribir ciegamente los\n"
"cambios del otro, pero resalta los conflictos para poder resolverlos.\"\n"
"---"
msgstr ""
"---\n"
"title: Conflictos\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué hago cuando mis cambios entran en conflicto con los de otra persona?"
"\"\n"
"objectives:\n"
"- \"Explicar qué son los conflictos y cuándo pueden ocurrir.\"\n"
"- \"Resolver conflictos que resultan de una fusión.\"\n"
"keypoints:\n"
"- \"Los conflictos ocurren cuando dos o más personas cambian el mismo "
"archivo(s) al mismo tiempo.\"\n"
"- \"El sistema de control de versiones no permite a las personas "
"sobreescribir ciegamente los\n"
"cambios del otro, pero resalta los conflictos para poder resolverlos.\"\n"
"---"

#: git-novice/_locale/es/_episodes/09-conflict.md:16
msgid ""
"Tan pronto como podemos trabajar en paralelo, es probable que alquien "
"deshaga lo que otro hizo. Esto incluso es probable con una única persona: si "
"estamos trabajando en un software al mismo tiempo en nuestra computadora "
"portátil y un servidor en el laboratorio, podríamos hacer cambios diferentes "
"a cada copia del trabajo. El control de versiones nos ayuda a manejar estos "
"[confictos]({{ page.root }}/reference/#conflicts) al darnos herramientas "
"para [resolver]({{ page.root }}/reference/#resolve) cambios que se hayan "
"solapado. "
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:18
msgid ""
"Para ver cómo podemos resolver conflictos, primero debemos crear uno. "
"Actualmente, el archivo `mars.txt` se ve de la siguiente manera en dos "
"copias de diferentes compañeros en nuestro repositorio `planetas`:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:32
msgid ""
"Agreguemos una línea únicamente a la copia de uno de los dos compañeros:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:48
msgid "y luego hacer `push` al cambio en GitHub:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:78
msgid ""
"Ahora haremos que el otro compañero\n"
"haga un cambio diferente a su copia\n"
"*sin* actualizar desde GitHub:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:96
msgid "Podemos hacer **commit** del cambio localmente"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:110
msgid "pero Git no nos dejará hacer **push** en GitHub:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:130
msgid ""
"Git detecta que los cambios hechos en una copia se solapan con los cambios "
"hechos en la otra\n"
"y nos impide destruir nuestro trabajo previo.\n"
"Lo que debemos hacer es traer -`pull`- los cambios desde GitHub,\n"
"[unirlos]({{ page.root }}/reference/#merge) dentro de la copia en la que "
"estamos trabajando actualmente,\n"
"y luego hacer `push` al resultado.\n"
"Empecemos haciendo `pull` a lo siguiente:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:155
msgid ""
"`git pull` nos dice que hay un conflicto,\n"
"y marca ese conflicto en el archivo afectado:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:175
msgid ""
"Nuestro cambio —señalado en `HEAD`— es precedido por `<<<<<<<`.\n"
"Luego, Git insertó `=======` como un separador entre los cambios "
"conflictivos\n"
"y marcó el fin del contenido descargado desde GitHub con `>>>>>>>`.\n"
"(El código  de letras y números luego del marcador\n"
"identifica el **commit** que acabamos de descargar.)"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:181
msgid ""
"Ahora debemos editar este archivo para eliminar estos marcadores\n"
"y reconciliar los cambios.\n"
"Podemos hacer lo que queramos: mantener el cambio hecho en el repositorio "
"local, mantener\n"
"el cambio hecho en el repositorio remoto, redactar algo nuevo para "
"reemplazar ambos,\n"
"o eliminar el cambio completamente.\n"
"Reemplacemos ambos de manera que el archivo quede así:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:201
msgid ""
"Para finalizar la unión,\n"
"agregamos `mars.txt` a los cambios hechos por el **merge**\n"
"y luego hacemos **commit**:"
msgstr ""

# code block
#: git-novice/_locale/es/_episodes/09-conflict.md:211
msgid ""
"~~~\n"
"On branch master\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\\tmodified:   mars.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:233
msgid "Ahora podemos hacer **push** a nuestros cambios en GitHub:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:251
msgid ""
"Git lleva el registro de qué hemos unificado con qué,\n"
"de manera que no debemos arreglar las cosas a mano nuevamente\n"
"cuando el colaborador que hizo el primer cambio hace **pull** de nuevo:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:274
msgid "Obtenemos el archivo unificado:"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:289
msgid ""
"No es necesario unificar el contenido nuevamente porque Git sabe que alguien "
"ya ha hecho eso."
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:291
msgid ""
"La habilidad de Git de resolver conflictos es muy útil, pero la resolución "
"de conflictos\n"
"cuesta tiempo y esfuerzo, y puede introducir errores si los conflictos no "
"son resueltos\n"
"correctamente. Si te encuentras resolviendo muchos conflictos en un "
"proyecto\n"
"ten en cuenta estas aproximaciones técnicas para reducirlas:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/09-conflict.md:296
msgid ""
"- Hacer **pull** con mayor frecuencia, especialmente antes de empezar una "
"nueva tarea"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/09-conflict.md:297
msgid ""
"- Usar ramas temáticas para separar trabajo, uniéndolas a la rama principal "
"- `master`- cuando estén completas"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/09-conflict.md:298
msgid "- Hacer comentarios mas cortos y concisos"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/09-conflict.md:299
msgid ""
"- Cuando sea apropiado, dividir archivos grandes en varios pequeños de "
"manera que sea"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:300
msgid ""
"  menos probable que dos autores alteren el mismo archivo simultáneamente"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:302
msgid ""
"Los conflictos también pueden ser minimizados con estrategias de "
"administración de proyectos:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/09-conflict.md:304
msgid "- Aclarar con tus colaboradores quién es responsable de cada área"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/09-conflict.md:305
msgid ""
"- Discutir con tus colaboradores en qué orden deben realizarse las tareas "
"para que "
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:306
#, fuzzy
msgid ""
"  las tareas que puedan cambiar las mismas líneas no se trabajen "
"simultáneamente. \n"
"- Si los conflictos son de estilo (e.g. tabulaciones vs. espacios), "
"establecer una\n"
"  convención que rija el proyecto y utilizar herramientas de estilo de "
"código (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) para forzarlas, si es necesario"
msgstr ""
"  las tareas que puedan cambiar las mismas líneas no se trabajen "
"simultáneamente. \n"
"- Si los conflictos son de estilo (e.g. tabulaciones vs. espacios), "
"establecer una\n"
"  convención que rija el proyecto y utilizar herramientas de estilo de "
"código (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) para forzarlas, si es necesario"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/09-conflict.md:311
#, fuzzy
msgid "> ## Solucionando conflictos creados por ti"
msgstr "> ## Solucionando conflictos creados por ti"

#: git-novice/_locale/es/_episodes/09-conflict.md:312
msgid ""
">\n"
"> Clona el repositorio creado por tu instructor.\n"
"> Agrégale un nuevo archivo \n"
"> y modificar un archivo existente (tu instructor te dirá cuál).\n"
"> Cuando tu instructor te lo pida, \n"
"> trae los cambios -haciendo **pull**- desde el repositorio para crear un "
"conflicto,\n"
"> y luego resuélvelo."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/09-conflict.md:321
#, fuzzy
msgid "> ## Conflictos en archivos no textuales"
msgstr "> ## Conflictos en archivos no textuales"

#: git-novice/_locale/es/_episodes/09-conflict.md:322
#, fuzzy
msgid ""
">\n"
"> ¿Qué hace Git \n"
"> cuando hay un conflicto en una imagen u otro archivo no de texto \n"
"> que está almacenado con control de versiones?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Intentémoslo. Supón que **Dracula** toma una foto de la superficie de "
"Marte y la llama `mars.jpg`.\n"
"> >\n"
"> > Si no tienes una imagen de Marte, puedes crear un archivo\n"
"> > binario de prueba de la siguiente manera:\n"
"> >\n"
"> > ~~~\n"
"> > $ head --bytes 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` nos muestra que se creó un archivo de 1-kilobyte. Está lleno de "
"bytes al azar\n"
"> > leídos a partir del archivo especial, `/dev/urandom`.\n"
"> >\n"
"> > Ahora, supón que **Dracula** agrega `mars.jpg` a su repositorio:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Supón que Wolfman agregó una imagen similar al mismo tiempo. \n"
"> > La suya es una imagen del cielo de Marte, pero *también* se llama `mars."
"jpg`.\n"
"> > Cuando **Dracula** intenta hacer push, recibe un mensaje familiar:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        master -> master (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets."
"git'\n"
"> > hint: Updates were rejected because the remote contains work that you "
"do\n"
"> > hint: not have locally. This is usually caused by another repository "
"pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote "
"changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for "
"details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Hemos aprendido que primero debemos hacer **pull** y resolver "
"conflictos:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Cuando hay un conflicto en una imagen u otro archivo binario, git "
"imprime\n"
"> > un mensaje así:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            master     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  master     -> origin/master\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > El mensaje informando el conflicto es básicamente el mismo que se "
"imprimió para `mars.txt`, pero\n"
"> > hay una línea adicional:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > Git no puede insertar indicadores de conflicto en una imagen como lo "
"hace en los\n"
"> > archivos de texto. Por lo tanto, en vez de editar la imagen, debemos "
"revisar la versión que \n"
"> > queremos mantener. Luego podemos agregar y hacer **commit** a esta "
"versión.\n"
"> >\n"
"> > En la línea agregada de arriba, Git convenientemente nos dio "
"identificadores de **commit**\n"
"> > para las dos versiones de `mars.jpg`. Nuestra versión es `HEAD`, y la de "
"Wolfman\n"
"> > es `439dc8c0...`. Si queremos usar nuestra versión, podemos usar\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > En cambio si queremos usar la versión de Wolfman, podemos usar `git "
"checkout` con\n"
"> > el identificador de **commit** de Wolfman, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > También podemos mantener *ambas* imágenes. La clave es que no podemos "
"mantenerlas con el mismo\n"
"> > nombre. Pero podemos verificar cada versión de forma sucesiva y "
"*renombrarla*, y luego agregar las versiones renombradas.\n"
"> > Primero, revisa cada imagen y renómbrala:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Luego, elimina la vieja imagen `mars.jpg` y agrega los dos archivos "
"nuevos:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ahora ambas imágenes de Marte estan ingresadas en el repositorio, y "
"`mars.jpg`\n"
"> > ya no existe."
msgstr ""
">\n"
"> ¿Qué hace Git \n"
"> cuando hay un conflicto en una imagen u otro archivo no de texto \n"
"> que está almacenado con control de versiones?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > Intentémoslo. Supón que **Dracula** toma una foto de la superficie de "
"Marte y la llama `mars.jpg`.\n"
"> >\n"
"> > Si no tienes una imagen de Marte, puedes crear un archivo\n"
"> > binario de prueba de la siguiente manera:\n"
"> >\n"
"> > ~~~\n"
"> > $ head --bytes 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` nos muestra que se creó un archivo de 1-kilobyte. Está lleno de "
"bytes al azar\n"
"> > leídos a partir del archivo especial, `/dev/urandom`.\n"
"> >\n"
"> > Ahora, supón que **Dracula** agrega `mars.jpg` a su repositorio:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Supón que Wolfman agregó una imagen similar al mismo tiempo. \n"
"> > La suya es una imagen del cielo de Marte, pero *también* se llama `mars."
"jpg`.\n"
"> > Cuando **Dracula** intenta hacer push, recibe un mensaje familiar:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        master -> master (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets."
"git'\n"
"> > hint: Updates were rejected because the remote contains work that you "
"do\n"
"> > hint: not have locally. This is usually caused by another repository "
"pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote "
"changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for "
"details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Hemos aprendido que primero debemos hacer **pull** y resolver "
"conflictos:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Cuando hay un conflicto en una imagen u otro archivo binario, git "
"imprime\n"
"> > un mensaje así:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin master\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            master     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  master     -> origin/master\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > El mensaje informando el conflicto es básicamente el mismo que se "
"imprimió para `mars.txt`, pero\n"
"> > hay una línea adicional:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. "
"439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > Git no puede insertar indicadores de conflicto en una imagen como lo "
"hace en los\n"
"> > archivos de texto. Por lo tanto, en vez de editar la imagen, debemos "
"revisar la versión que \n"
"> > queremos mantener. Luego podemos agregar y hacer **commit** a esta "
"versión.\n"
"> >\n"
"> > En la línea agregada de arriba, Git convenientemente nos dio "
"identificadores de **commit**\n"
"> > para las dos versiones de `mars.jpg`. Nuestra versión es `HEAD`, y la de "
"Wolfman\n"
"> > es `439dc8c0...`. Si queremos usar nuestra versión, podemos usar\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > En cambio si queremos usar la versión de Wolfman, podemos usar `git "
"checkout` con\n"
"> > el identificador de **commit** de Wolfman, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > También podemos mantener *ambas* imágenes. La clave es que no podemos "
"mantenerlas con el mismo\n"
"> > nombre. Pero podemos verificar cada versión de forma sucesiva y "
"*renombrarla*, y luego agregar las versiones renombradas.\n"
"> > Primero, revisa cada imagen y renómbrala:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Luego, elimina la vieja imagen `mars.jpg` y agrega los dos archivos "
"nuevos:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [master 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ahora ambas imágenes de Marte estan ingresadas en el repositorio, y "
"`mars.jpg`\n"
"> > ya no existe."

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/09-conflict.md:489
msgid "> ## Una típica sesión de trabajo"
msgstr ""

#: git-novice/_locale/es/_episodes/09-conflict.md:490
#, fuzzy
msgid ""
">\n"
"> Te sientas en tu computadora para trabajar en un proyecto compartido que "
"es mantenido en un\n"
"> repositorio Git remoto. Durante tu sesión de trabajo, realizas las "
"siguientes acciones, \n"
"> pero no en éste orden:\n"
">\n"
">\n"
"> - *Hacer cambios* agregando el número `100` al archivo de texto `numbers."
"txt`\n"
"> - *Actualizar repositorio remoto* para actualizar el repositorio local\n"
"> - *Celebrar* tu éxito con cerveza(s)\n"
"> - *Actualizar repositorio local* para actualizar el repositorio remoto\n"
"> - *Realizar cambios* con los cuales voy a hacer commit\n"
"> - *Hacer commit a los cambios* al repositorio local\n"
">\n"
"> ¿En qué orden deberías hacer estas acciones para minimizar la posibilidad "
"de conflictos?\n"
"> Pon los comandos de arriba en orden en la columna *acción* de la tabla de "
"abajo.\n"
"> Cuando tengas el orden correcto, ve si puedes escribir los comandos "
"correspondientes en la columna \n"
"> *comando*. Algunos campos ya están completados para ayudarte a \n"
"> comenzar.\n"
">\n"
"> |orden|acción . . . . . . . . . . |comando . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | ¡Celebrar!                | `AFK`                      |\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > |orden|acción . . . . . . . . . . |comando . . . . . . . . . . |\n"
"> > "
"|-----|-------------------|----------------------------------------------|\n"
"> > |1    | Actualizar repositorio local      | `git pull origin "
"master`                     |\n"
"> > |2    | Hacer cambios      | `echo 100 >> numbers."
"txt`                    |\n"
"> > |3    | Realizar cambios     | `git add numbers."
"txt`                        |\n"
"> > |4    | Hacer commit a los cambios   | `git commit -m \"Agregar 100 a "
"numbers.txt\"`     |\n"
"> > |5    | Actualizar repositorio remoto     | `git push origin "
"master`                     |\n"
"> > |6    | ¡Celebrar!        | `AFK`                                        "
"|\n"
"> >"
msgstr ""
">\n"
"> Te sientas en tu computadora para trabajar en un proyecto compartido que "
"es mantenido en un\n"
"> repositorio Git remoto. Durante tu sesión de trabajo, realizas las "
"siguientes acciones, \n"
"> pero no en éste orden:\n"
">\n"
">\n"
"> - *Hacer cambios* agregando el número `100` al archivo de texto `numbers."
"txt`\n"
"> - *Actualizar repositorio remoto* para actualizar el repositorio local\n"
"> - *Celebrar* tu éxito con cerveza(s)\n"
"> - *Actualizar repositorio local* para actualizar el repositorio remoto\n"
"> - *Realizar cambios* con los cuales voy a hacer commit\n"
"> - *Hacer commit a los cambios* al repositorio local\n"
">\n"
"> ¿En qué orden deberías hacer estas acciones para minimizar la posibilidad "
"de conflictos?\n"
"> Pon los comandos de arriba en orden en la columna *acción* de la tabla de "
"abajo.\n"
"> Cuando tengas el orden correcto, ve si puedes escribir los comandos "
"correspondientes en la columna \n"
"> *comando*. Algunos campos ya están completados para ayudarte a \n"
"> comenzar.\n"
">\n"
"> |orden|acción . . . . . . . . . . |comando . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | ¡Celebrar!                | `AFK`                      |\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > |orden|acción . . . . . . . . . . |comando . . . . . . . . . . |\n"
"> > "
"|-----|-------------------|----------------------------------------------|\n"
"> > |1    | Actualizar repositorio local      | `git pull origin "
"master`                     |\n"
"> > |2    | Hacer cambios      | `echo 100 >> numbers."
"txt`                    |\n"
"> > |3    | Realizar cambios     | `git add numbers."
"txt`                        |\n"
"> > |4    | Hacer commit a los cambios   | `git commit -m \"Agregar 100 a "
"numbers.txt\"`     |\n"
"> > |5    | Actualizar repositorio remoto     | `git push origin "
"master`                     |\n"
"> > |6    | ¡Celebrar!        | `AFK`                                        "
"|\n"
"> >"

# Front Matter
#: git-novice/_locale/es/_episodes/10-open.md:1
#, fuzzy
msgid ""
"---\n"
"title: La ciencia abierta\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"¿Cómo un control de versiones me puede ayudar a tener mi trabajo más "
"abierto?\"\n"
"objectives:\n"
"- \"Explica como el control de versiones nos ayuda a tener un cuaderno "
"electrónico para todo nuestro trabajo computacional.\"\n"
"keypoints:\n"
"- \"Trabajo científico abierto es más útil y puede ser citado más que si no "
"lo es.\"\n"
"---"
msgstr ""
"---\n"
"title: La ciencia abierta\n"
"teaching: 5\n"
"exercises: 5\n"
"questions:\n"
"- \"¿Cómo un control de versiones me puede ayudar a tener mi trabajo más "
"abierto?\"\n"
"objectives:\n"
"- \"Explica como el control de versiones nos ayuda a tener un cuaderno "
"electrónico para todo nuestro trabajo computacional.\"\n"
"keypoints:\n"
"- \"Trabajo científico abierto es más útil y puede ser citado más que si no "
"lo es.\"\n"
"---"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/10-open.md:13
msgid "> Lo opuesto a \"abierto\" no es \"cerrado\". "
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/10-open.md:14
msgid "> Lo opuesto a \"abierto\" es \"quebrado\"."
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:19
msgid ""
"El libre intercambio de información podría ser el ideal en Ciencia. Pero la "
"realidad, a menudo, es mucho más complicada.\n"
"En la práctica cotidiana vemos situaciones como la siguiente:  "
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:22
msgid ""
"*   Una científica recoge algunos datos y los almacena en una máquina que "
"seguramente tiene en su oficina."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:23
msgid ""
"*   Luego ella escribe y modifica unos pocos programas para analizar los "
"datos (los cuales residen en su computadora)."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:24
msgid ""
"*   Una vez que tiene algunos resultados, ella escribe y presenta su "
"artículo. Podría incluir sus datos -en varias revistas que los requieran- "
"pero probablemente no incluya su código."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:25
msgid "*   El tiempo pasa."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:26
msgid ""
"*   La revista envía las revisiones de un puñado de personas anónimas que "
"trabajan en su campo de actividad."
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:27
msgid ""
"    Ella revisa su artículo para satisfacer las revisiones propuestas. "
"Durante ese tiempo ella también podría modificar los **scripts** que "
"escribió anteriormente, y vuelve a enviar.\n"
"*   Pasa más tiempo.\n"
"*   El artículo finalmente se publica. \n"
"*   Se podría incluir un enlace a una copia online de sus datos, pero el "
"mismo artículo está detrás de un sitio web de pago: sólo las personas que "
"tienen acceso personal o institucional serán capaces de leerlo."
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:32
msgid "Para muchos otros científicos, el proceso abierto se ve así:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:34
msgid ""
"*   Los datos que obtiene son almacenados, tan pronto como los colecta, en "
"un repositorio de acceso abierto, "
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:35
msgid ""
" como puede ser [figshare](http://figshare.com/) o [Zenodo](http://zenodo."
"org), obteniendo su propio [Digital Object Identifier] (https://en.wikipedia."
"org/wiki/Digital_object_identifier) (DOI). O los datos que han sido "
"recientemente publicados, son almacenados en [Dryad](http://datadryad."
"org/).\n"
"*   La científica crea un nuevo repositorio en GitHub para guardar su "
"trabajo.\n"
"*   Al hacer su análisis de los datos, guarda los cambios de sus **scripts** "
"(y posiblemente algunos archivos de salida) en ese repositorio. También "
"utiliza el repositorio para su artículo. Entonces ese repositorio es el "
"centro de colaboración con sus colegas.\n"
"*   Cuando está satisfecha con el estado de su artículo, publica una versión "
"en [arXiv](http://arxiv.org/) o en algún otro servidor de preimpresión para "
"invitar a sus compañeros a una retroalimentación. \n"
"*   Basado en esa retroalimentación, puede escribir varias revisiones antes "
"de enviar finalmente su artículo a la revista. \n"
"*   El artículo publicado incluye enlaces a su preimpresión y a sus "
"repositorios de código y datos, lo que hace mucho más fácil para otros "
"científicos utilizar este trabajo como punto de partida para su propia "
"investigación."
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:42
msgid ""
"Este modelo abierto acelera la investigación: el trabajo abierto [se cita y "
"se reutiliza](http://dx.doi.org/10.1371/journal.pone.0000308). Sin embargo, "
"las personas que quieren trabajar de esta manera necesitan tomar algunas "
"decisiones sobre qué significa exactamente \"abierto\" y cómo hacerlo. "
"Puedes encontrar más información sobre los diferentes aspectos de la Ciencia "
"Abierta en [el libro](http://link.springer.com/"
"book/10.1007/978-3-319-00026-8)."
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:44
msgid ""
"Ésta es una de las muchas razones por las que enseñamos el control de "
"versiones. Cuando se utiliza con diligencia, responde a \"cómo\" actúa un "
"cuaderno electrónico compartible:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/10-open.md:46
#, fuzzy
msgid ""
"*   Las etapas conceptuales del trabajo están documentadas, incluyendo quién "
"hizo"
msgstr ""
"*   Las etapas conceptuales del trabajo están documentadas, incluyendo quién "
"hizo"

#: git-novice/_locale/es/_episodes/10-open.md:47
msgid ""
" qué y cuándo se hizo. Cada paso está marcado con un identificador (el ID de "
"confirmación) de cada uno de los intentos y propósitos.\n"
"*   Puedes vincular tu documentación de ideas y otros trabajos intelectuales "
"directamente con los cambios que surgen de ellos.\n"
"*   Puedes referirte a lo que utilizaste en tu investigación para obtener "
"tus resultados computacionales de manera única y recuperable.\n"
"*   Con un sistema de control de versiones como Git, todo el historial del "
"repositorio es fácil de archivar para siempre."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/10-open.md:52
#, fuzzy
msgid "> ## Haciendo código citable"
msgstr "> ## Haciendo código citable"

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/10-open.md:59
#, fuzzy
msgid "> ## ¿Cuán reproducible es mi trabajo?"
msgstr "> ## ¿Cuán reproducible es mi trabajo?"

#: git-novice/_locale/es/_episodes/10-open.md:60
msgid ""
">\n"
"> Pide a un compañero de laboratorio que reproduzca un resultado que "
"obtuviste \n"
"> utilizando sólo lo que está disponible en un documento publicado o en la "
"web.\n"
"> Luego, trata de hacer lo mismo con los resultados de tu labmate.\n"
"> Finalmente, reproducir los resultados de otro laboratorio."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/10-open.md:67
msgid "> ## ¿Cómo encontrar un repositorio de datos adecuado?"
msgstr ""

#: git-novice/_locale/es/_episodes/10-open.md:68
#, fuzzy
msgid ""
">\n"
"> Navega por Internet durante un par de minutos y echa un vistazo a los "
"repositorios de datos mencionado anteriormente: [Figshare](http://figshare."
"com/), [Zenodo](http://zenodo.org), [Dryad](http://datadryad.org/). "
"Dependiendo de tu campo de investigación, encuentra repositorios reconocidos "
"por la comunidad en tu campo. También puede ser útil [estos repositorios de "
"datos recomendados por Nature](http://www.nature.com/sdata/data-policies/"
"repositories). Discute con tu vecino qué repositorio de datos deseas abordar "
"para tu proyecto actual y explicale por qué."
msgstr ""
">\n"
"> Navega por Internet durante un par de minutos y echa un vistazo a los "
"repositorios de datos mencionado anteriormente: [Figshare](http://figshare."
"com/), [Zenodo](http://zenodo.org), [Dryad](http://datadryad.org/). "
"Dependiendo de tu campo de investigación, encuentra repositorios reconocidos "
"por la comunidad en tu campo. También puede ser útil [estos repositorios de "
"datos recomendados por Nature](http://www.nature.com/sdata/data-policies/"
"repositories). Discute con tu vecino qué repositorio de datos deseas abordar "
"para tu proyecto actual y explicale por qué."

# Front Matter
#: git-novice/_locale/es/_episodes/11-licensing.md:1
msgid ""
"---\n"
"title: Licencia\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Qué información sobre licencias debería incluir en mi trabajo?\"\n"
"objectives:\n"
"- \"Explicar la importancia de agregar información de licencias a nuestro "
"repositorio de código.\"\n"
"- \"Escoger la licencia apropiada.\"\n"
"- \"Explicar las diferencias en licencias y algunas expectativas sociales."
"\"\n"
"keypoints:\n"
"- \"Las personas que usan la licencia **GPL** en su software tienen que "
"asegurarse de que toda la estructura esté bajo ésta licencia; muchas otras "
"licencias no requieren esto.\"\n"
"- \"La familia de licencias **Creative Commons** permite a las personas "
"adaptarse a varios requerimientos y restricciones de atribución, la creación "
"de trabajo derivado, compartir el trabajo, y comercialización.\"\n"
"- \"Personas sin conocimientos de leyes no deberían tratar de escribir "
"nuevas licencias desde cero.\"\n"
"---"
msgstr ""

#: git-novice/_locale/es/_episodes/11-licensing.md:17
msgid ""
"Cuando un repositorio público contiene código fuente, un manuscrito u otro "
"trabajo creativo, éste debe incluir un archivo con el nombre `LICENCIA` o "
"`LICENCIA.txt` en el directorio base del repositorio, que indique claramente "
"bajo qué licencia se pone a  disposición el contenido. Esto se debe a que la "
"protección de propiedad intelectual (y por lo tanto derechos de autor) se "
"aplica automáticamente a las obras creativas. La reutilización de trabajos "
"creativos sin licencia es peligrosa, ya que los titulares de los derechos de "
"autor podrían realizar una demanda por infringir la misma."
msgstr ""

#: git-novice/_locale/es/_episodes/11-licensing.md:19
msgid ""
"Una licencia resuelve el problema otorgando derechos a otros (los "
"licenciatarios) que de otro modo no tendrían. Los derechos que se otorgan y "
"bajo qué condiciones difieren, a menudo de forma leve, de una licencia a "
"otra. En la práctica, algunas licencias son las más populares, y el sitio "
"[choosealicense.com](http://choosealicense.com/) te ayudará a encontrar una "
"licencia que se adapte a tus necesidades. Las cosas importantes a considerar "
"son:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/11-licensing.md:21
msgid "* Si deseas abordar los derechos de patente."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/11-licensing.md:22
msgid ""
"* Si necesitas personas que distribuyan los trabajos derivados de tu código "
"fuente."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/11-licensing.md:23
msgid "* Si el contenido al que estás otorgando la licencia es código fuente."
msgstr ""

# unordered list
#: git-novice/_locale/es/_episodes/11-licensing.md:24
msgid "* Si realmente deseas licenciar el código."
msgstr ""

#: git-novice/_locale/es/_episodes/11-licensing.md:26
msgid ""
"Elegir una licencia que sea de uso común hace la vida más fácil para los "
"contribuyentes y los usuarios, porque es probable que ya estén "
"familiarizados con la licencia y no tengan que sortear una jerga específica "
"para decidir si están de acuerdo con la licencia.\n"
"La [Iniciativa Open Source](http://opensource.org/licenses) y [Free Software "
"Foundation](http://www.gnu.org/licenses/license-list.html) mantienen listas "
"de licencias que pueden son buenas opciones a considerar."
msgstr ""

#: git-novice/_locale/es/_episodes/11-licensing.md:29
#, fuzzy
msgid ""
"Este artículo sobre [licencias de software](https://doi.org/10.1371/journal."
"pcbi.1002598) proporciona una excelente descripción de licencias y de "
"opciones de licencias desde la perspectiva de los científicos que también "
"escriben código."
msgstr ""
"Este artículo sobre [licencias de software](https://doi.org/10.1371/journal."
"pcbi.1002598) proporciona una excelente descripción de licencias y de "
"opciones de licencias desde la perspectiva de los científicos que también "
"escriben código."

#: git-novice/_locale/es/_episodes/11-licensing.md:31
msgid ""
"Al fin de cuentas, lo que importa es que haya información clara sobre cuál "
"es la licencia. Además, es mejor elegir la licencia desde el principio, "
"incluso si se trata de un repositorio que no es público. Retrasar la "
"decisión de sobre qué licencia elegir sólo complica las cosas más adelante, "
"porque cada vez que un nuevo colaborador comienza a contribuir, ellos "
"también tienen derechos de autor y, por lo tanto, se les debe pedir "
"aprobación una vez que se elige una licencia."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/11-licensing.md:33
#, fuzzy
msgid "> ## ¿Puedo usar una **Open License**?"
msgstr "> ## ¿Puedo usar una **Open License**?"

#: git-novice/_locale/es/_episodes/11-licensing.md:34
msgid ""
">\n"
"> Investiga si puedes usar una **Open license** o \"Licencia Abierta\" en tu "
"**software**. ¿Puedes hacer eso por tí mismo?, ¿o necesitas permiso de "
"alguien dentro de tu institución? Si necesitas permiso, ¿de quién?"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/11-licensing.md:38
#, fuzzy
msgid "> ## ¿Qué licencias ya he aceptado?"
msgstr "> ## ¿Qué licencias ya he aceptado?"

#: git-novice/_locale/es/_episodes/11-licensing.md:39
#, fuzzy
msgid ""
">\n"
"> Muchas herramientas de **software** que usamos día a día (incluyendo las "
"herramientas en este **workshop**) son\n"
"> **open-source software**. Escoge uno de los proyectos de GitHub de la "
"lista de abajo, o algún otro que te interese. Encuentra la licencia "
"(usualmente es un archivo que se llama `LICENSE` o `COPYING`) y luego habla "
"con tus compañeros sobre como ésta licencia te permite o te restringe el uso "
"del **software**. ¿Es una de las licencias que hemos visto en esta sesión? "
"¿Qué tan diferente es ésta licencia?\n"
"> - [Git](https://github.com/git/git), herramientas para el manejo de código "
"fuente.\n"
"> - [CPython](https://github.com/python/cpython), implementación estándar "
"del lenguaje Python.\n"
"> - [Jupyter](https://github.com/jupyter), el proyecto que implementa "
"**notebooks** para correr Python en la **web** que usaremos en este "
"**workshop**.\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), un editor "
"colaborativo en tiempo real."
msgstr ""
">\n"
"> Muchas herramientas de **software** que usamos día a día (incluyendo las "
"herramientas en este **workshop**) son\n"
"> **open-source software**. Escoge uno de los proyectos de GitHub de la "
"lista de abajo, o algún otro que te interese. Encuentra la licencia "
"(usualmente es un archivo que se llama `LICENSE` o `COPYING`) y luego habla "
"con tus compañeros sobre como ésta licencia te permite o te restringe el uso "
"del **software**. ¿Es una de las licencias que hemos visto en esta sesión? "
"¿Qué tan diferente es ésta licencia?\n"
"> - [Git](https://github.com/git/git), herramientas para el manejo de código "
"fuente.\n"
"> - [CPython](https://github.com/python/cpython), implementación estándar "
"del lenguaje Python.\n"
"> - [Jupyter](https://github.com/jupyter), el proyecto que implementa "
"**notebooks** para correr Python en la **web** que usaremos en este "
"**workshop**.\n"
"> - [EtherPad](https://github.com/ether/etherpad-lite), un editor "
"colaborativo en tiempo real."

# Front Matter
#: git-novice/_locale/es/_episodes/12-citation.md:1
#, fuzzy
msgid ""
"---\n"
"title: Ejemplo de Referencia o cita\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo hacer que mi trabajo sea más fácil de citar?\"\n"
"objectives:\n"
"- \"Haz que tu trabajo sea más fácil de citar\"\n"
"keypoints:\n"
"- \"Agrega un archivo CITATION al repositorio y explica cómo quieres que tu "
"trabajo sea citado.\"\n"
"---"
msgstr ""
"---\n"
"title: Ejemplo de Referencia o cita\n"
"teaching: 2\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo hacer que mi trabajo sea más fácil de citar?\"\n"
"objectives:\n"
"- \"Haz que tu trabajo sea más fácil de citar\"\n"
"keypoints:\n"
"- \"Agrega un archivo CITATION al repositorio y explica cómo quieres que tu "
"trabajo sea citado.\"\n"
"---"

#: git-novice/_locale/es/_episodes/12-citation.md:13
#, fuzzy
msgid ""
"Te recomendamos que incluyas un archivo llamado `CITATION` o `CITATION.txt`\n"
"que describa cómo citar o referenciar tu proyecto.\n"
"La siguiente cita es de \n"
"[Software Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/"
"CITATION):"
msgstr ""
"Te recomendamos que incluyas un archivo llamado `CITATION` o `CITATION.txt`\n"
"que describa cómo citar o referenciar tu proyecto.\n"
"La siguiente cita es de \n"
"[Software Carpentry](https://github.com/swcarpentry/website/blob/gh-pages/"
"CITATION):"

# Front Matter
#: git-novice/_locale/es/_episodes/13-hosting.md:1
#, fuzzy
msgid ""
"---\n"
"title: Hospedaje\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Dónde debería alojar mis repositorios de control de versiones?\"\n"
"objectives:\n"
"- \"Explicar diferentes opciones para realizar trabajos científicos.\"\n"
"keypoints:\n"
"- \"Los proyectos pueden alojarse en servidores de la universidad, en "
"dominios personales o públicas.\"\n"
"- \"Las reglas con respecto a la propiedad intelectual y el almacenamiento "
"de información confidencial se aplican sin importar dónde se alojan el "
"código y los datos.\"\n"
"---"
msgstr ""
"---\n"
"title: Hospedaje\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Dónde debería alojar mis repositorios de control de versiones?\"\n"
"objectives:\n"
"- \"Explicar diferentes opciones para realizar trabajos científicos.\"\n"
"keypoints:\n"
"- \"Los proyectos pueden alojarse en servidores de la universidad, en "
"dominios personales o públicas.\"\n"
"- \"Las reglas con respecto a la propiedad intelectual y el almacenamiento "
"de información confidencial se aplican sin importar dónde se alojan el "
"código y los datos.\"\n"
"---"

#: git-novice/_locale/es/_episodes/13-hosting.md:14
msgid ""
"La segunda gran pregunta para los grupos que quieren liberar su trabajo es "
"dónde\n"
"hospedar su código y datos. Una opción es que el laboratorio, departamento o "
"la\n"
"universidad provean un servidor, gestionen cuentas y respaldos, etc. El "
"principal\n"
"beneficio de esto es que clarifica quién es dueño de qué, lo cual es "
"particularmente\n"
"importante si algún material es sensible (es decir, se relaciona a "
"experimentos\n"
"que involucran sujetos humanos o pueden ser usados en una patente). Las "
"principales\n"
"desventajas son el costo de proveer el servicio y su longevidad: un "
"científico\n"
"que ha pasado diez años colectando datos quisiera asegurarse de que estos "
"estarán\n"
"disponibles en diez años más, pero eso está más allá del tiempo de vida de "
"muchos \n"
"de los subsidios que financian la infraestructura académica."
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:25
msgid ""
"Otra opción es comprar un dominio y pagar a un Proveedor de Servicios de "
"Internet\n"
"(ISP por sus siglas en inglés) para hospedarlo. Esto da al individuo o grupo "
"mayor\n"
"control, y le da la vuelta a problemas que pueden surgir cuando se cambien "
"de una \n"
"institución a otra, pero requiere más tiempo y esfuerzo para configurar que "
"la\n"
"opción anterior o siguiente."
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:31
msgid ""
"La tercera opción es utilizar un servicio de hospedaje público como\n"
"[GitHub](http://github.com), [GitLab](http://gitlab.com),\n"
"[BitBucket](http://bitbucket.org) o [SourceForge](http://sourceforge.net).\n"
"Cada uno de estos servicios provee una interfaz web que permite a las "
"personas\n"
"crear, ver y editar sus repositorios de código. Estos servicios también "
"proveen \n"
"herramientas de comunicación y gestión de proyectos que incluyen "
"`seguimiento de problemas`,\n"
"páginas wiki, notificaciones de correo electrónico y revisiones de código. "
"Estos\n"
"servicios se benefician de economías de escalamiento y efectos de redes: es "
"más\n"
"fácil correr un servicio grande bien que correr varios pequeños servicios "
"al\n"
"mismo estándar. También es más fácil para la gente colaborar. Usando un "
"servicio \n"
"popular puede ayudar a conectar tu proyecto con una comunidad que ya está "
"usando el\n"
"mismo servicio."
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:44
msgid ""
"Como un ejemplo, Software Carpentry [está en \n"
"GitHub]({{ swc_github }}), donde puedes encontrar el [código fuente para "
"esta\n"
"página](https://github.com/swcarpentry/git-novice-es/blob/gh-pages/"
"_episodes/13-hosting.md).\n"
"Cualquiera con una cuenta de GitHub puede sugerir cambios a este texto."
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:49
msgid ""
"Usando servicios grandes y bien establecidos puede también ayudarte a tomar\n"
"ventaja rápidamente de herramientas poderosas tales como la Integración \n"
"Continua (CI por sus siglas en inglés). CI puede automaticamente construir "
"el ejecutable a partir del codigo fuente  y probar el \n"
"software automáticamente cada vez que se hace un `commit` o se somete un \n"
"`pull request`. La integración directa de CI con un servicio de hospedaje "
"en \n"
"línea significa que esta información está presente en cualquier `pull "
"request`\n"
"y ayudar a mantener la integridad y estándares de calidad del código. Si "
"bien\n"
"CI está disponible en situaciones de auto-hospedaje, hay menos configuración "
"y\n"
"mantenimiento al usar un servicio en línea. Más aún, estas herramientas "
"son \n"
"proporcionadas sin costo alguno para proyectos de código abierto y están "
"también\n"
"disponibles para repositorios privados por una cuota."
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:62
msgid ""
">\n"
"> Compartir es el ideal de la ciencia,\n"
"> pero muchas instituciones imponen restricciones al compartir,\n"
"> por ejemplo para proteger propiedad intelectual potencialmente "
"patentable.\n"
"> Si encuentras tales restricciones,\n"
"> pudiera ser productivo indagar acerca de las motivaciones\n"
"> ya sea para solicitar una excepción para un proyecto específico o "
"dominio,\n"
"> o para impulsar una reforma institucional más amplia para el apoyo de la "
"ciencia abierta."
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/13-hosting.md:72
msgid "> ## ¿Mi Trabajo Puede Ser Público?"
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:73
msgid ""
">\n"
"> Averigua si tienes permitido hospedar tu trabajo abiertamente en un "
"repositorio público.\n"
"> ¿Puedes hacer esto unilateralmente,\n"
"> o necesitas permiso de alguien en tu institución?\n"
"> Si ese es el caso, ¿de quién?"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/13-hosting.md:80
msgid "> ## ¿Dónde Puedo Compartir Mi Trabajo?"
msgstr ""

#: git-novice/_locale/es/_episodes/13-hosting.md:81
#, fuzzy
msgid ""
">\n"
"> ¿Tu institución tiene un repositorio(s) donde puedas compartir tus \n"
"> artículos, datos y software? ¿Cómo los repositorios institucionales\n"
"> difieren de servicios como [arXiV](http://arxiv.org/), [figshare](http://"
"figshare.com/) y [GitHub](http://github.com/)?"
msgstr ""
">\n"
"> ¿Tu institución tiene un repositorio(s) donde puedas compartir tus \n"
"> artículos, datos y software? ¿Cómo los repositorios institucionales\n"
"> difieren de servicios como [arXiV](http://arxiv.org/), [figshare](http://"
"figshare.com/) y [GitHub](http://github.com/)?"

# Front Matter
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:1
#, fuzzy
msgid ""
"---\n"
"title: Usando Git desde RStudio\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo usar Git desde RStudio?\"\n"
"objectives:\n"
"- \"Entender cómo usar Git desde RStudio.\"\n"
"keypoints:\n"
"- \"Crear un proyecto en RStudio\"\n"
"---"
msgstr ""
"---\n"
"title: Usando Git desde RStudio\n"
"teaching: 10\n"
"exercises: 0\n"
"questions:\n"
"- \"¿Cómo puedo usar Git desde RStudio?\"\n"
"objectives:\n"
"- \"Entender cómo usar Git desde RStudio.\"\n"
"keypoints:\n"
"- \"Crear un proyecto en RStudio\"\n"
"---"

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:13
msgid ""
"Ya que el uso de control de versiones es muy útil cuando escribimos "
"**scripts**, entonces RStudio esta integrado con Git. Hay algunas otras mas "
"complejas funcionalidades de Git que solamente se pueden usar desde la "
"terminal, pero RStudio tiene una buena interfaz de trabajo para realizar las "
"operaciones más comunes de control de versiones."
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:15
msgid ""
"RStudio te permite crear un proyecto [project][rstudio-projects] asociado a "
"un directorio determinado. Esta es una manera de hacer un seguimiento de los "
"archivos asociados al proyecto. Una manera de tener control de archivos es "
"mediante el uso de un programa de control de versiones. Para empezar a usar "
"RStudio para el control de versiones, comencemos por crear un nuevo proyecto:"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:19
msgid ""
"Una nueva ventana se abrirá y preguntará cómo queremos crear el proyecto. "
"Tenemos\n"
"aquí varias opciones. Supongamos que queremos usar RStudio con el "
"repositorio de planetas\n"
"que ya hemos creado. Como ese repositorio ya está en una carpeta en tu "
"computadora,\n"
"podemos escoger la opción \"Existing Directory\":"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:26
#, fuzzy
msgid "> ## ¿Puedes ver la opción de \"Version Control\"?"
msgstr "> ## ¿Puedes ver la opción de \"Version Control\"?"

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:27
msgid ""
">\n"
"> Aunque no vamos a usar ésta opción aquí, deberías poder ver una opción en "
"el menú que diga\n"
"> \"Version Control\". Esta es la opción que debes escoger cuando quieras "
"crear\n"
"> un proyecto en tu computadora mediante una clonación de un repositorio de "
"GitHub.\n"
"> Si esta opción no es visible, probablemente significa que RStudio no sabe\n"
"> donde está tu ejecutable de Git. Revisa\n"
"> [esta página](https://stat545-ubc.github.io/git03_rstudio-meet-git.html)\n"
"> para encontrar algunos consejos. Incluso después de instalar Git, si estás "
"usando MacOSX\n"
"> algunas veces puede ser necesario que tengas que aceptar la licencia de "
"XCode"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:38
msgid ""
"En el siguiente paso, RStudio va a preguntar cuál es la carpeta existente "
"que queremos usar. Haremos\n"
"click en el navegador de archivos para navegar a la carpeta correcta en tu "
"computadora, y luego haremos click en\n"
"\"Create Project\":"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:44
msgid ""
"¡Y ya está! Ahora tenemos un proyecto en R que contiene tu propio "
"repositorio. Fíjate que ahora en el menú aparece un botón con \"Git\" en "
"letras verticales. Esto significa que RStudio ha reconocido que ésta carpeta "
"es un repositorio de Git, así que te proporcionará las herramientas para "
"usar Git:"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:48
msgid ""
"Para editar los archivos en tu repositorio, puedes hacer click en el archivo "
"desde el panel inferior izquierdo. Ahora vamos a añadir más información "
"sobre Plutón:"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:52
msgid ""
"Una vez que hemos guardado nuestros archivos editados, ahora podemos usar "
"RStudio para hacer permanentes los cambios. Usa el botón y haz clik a "
"\"Commit\":"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:56
msgid ""
"Esto abrirá una ventana donde puedes seleccionar qué archivos quieres hacer "
"**commit** (marca\n"
"las casillas en la columna \"Staged\") y luego escribe un mensaje para el "
"**commit** (en el panel\n"
"superior derecho). Los iconos en la columna \"Status\" indican el estado "
"actual de cada\n"
"archivo. También puedes ver los cambios de cada archivo haciendo click en su "
"nombre. Una vez\n"
"que todo esté de la forma que quieres, haz click en \"Commit\":"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:64
msgid ""
"Puedes subir los cambios seleccionando \"Push\" en el menú de Git. Allí hay "
"también\n"
"opciones para traer los cambios (hacer **pull**) desde una versión remota de "
"este repositorio, y ver\n"
"el historial de cambios realizados:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:70
msgid "> ¿Están los comandos **Push** y **Pull** en gris?"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:71
#, fuzzy
msgid ""
">\n"
"> Si este es el caso, generalmente significa que RStudio no sabe dónde están "
"las\n"
"> otras versiones de tu repositorio (por ejemplo, en GitHub).\n"
"> Para solucionar esto, abre una terminal, sitúate en el repositorio y luego "
"lanza el siguiente comando:\n"
"> `git push -u origin master`. Luego reinicia RStudio."
msgstr ""
">\n"
"> Si este es el caso, generalmente significa que RStudio no sabe dónde están "
"las\n"
"> otras versiones de tu repositorio (por ejemplo, en GitHub).\n"
"> Para solucionar esto, abre una terminal, sitúate en el repositorio y luego "
"lanza el siguiente comando:\n"
"> `git push -u origin master`. Luego reinicia RStudio."

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:78
msgid ""
"Si hacemos click en el historial de cambios \"History\", podemos ver una "
"versión gráfica de lo\n"
"que obtendríamos con el comando `git log`:"
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:83
msgid ""
"RStudio crea algunos archivos que le ayudan a mantener un control de los "
"cambios en el proyecto. Normalmente no deseamos que Git los incluya en el "
"control de versiones, así que es una buena idea agregar sus nombres al `."
"gitignore`:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:87
#, fuzzy
msgid ""
"> ## Tip: Control de versiones del output desechable (versioning disposable "
"output)"
msgstr ""
"> ## Tip: Control de versiones del output desechable (versioning disposable "
"output)"

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:88
msgid ""
">\n"
"> Generalmente tu no quieres hacer control de cambios o versiones de tus "
"output desechables  (o solo datos de lectura).\n"
"> Entonces, tu debes modificar el archivo `.gitignore` para decirle a Git "
"que ignore estos archivos\n"
"> y directorios. "
msgstr ""

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:95
#, fuzzy
msgid ""
">\n"
"> 1. Crear un directorio dentro de tu proyecto llamado `graphs`.\n"
"> 2. Modificar el archivo `.gitignore`  para que contenga `graphs/`\n"
"> entonces este output desechable no estara **versioned**.\n"
">\n"
"> Agrega el folder recien creado al control de versiones usando la interface "
"de Git.\n"
">\n"
"> > ## Solucion del Challenge\n"
"> >\n"
"> > Esto puede ser realizado con los comandos de linea:\n"
"> > ```\n"
"> > $ mkdir graphs\n"
"> > $ echo \"graphs/\"> > .gitignore\n"
"> > ```\n"
"> > {: . shell}"
msgstr ""
">\n"
"> 1. Crear un directorio dentro de tu proyecto llamado `graphs`.\n"
"> 2. Modificar el archivo `.gitignore`  para que contenga `graphs/`\n"
"> entonces este output desechable no estara **versioned**.\n"
">\n"
"> Agrega el folder recien creado al control de versiones usando la interface "
"de Git.\n"
">\n"
"> > ## Solucion del Challenge\n"
"> >\n"
"> > Esto puede ser realizado con los comandos de linea:\n"
"> > ```\n"
"> > $ mkdir graphs\n"
"> > $ echo \"graphs/\"> > .gitignore\n"
"> > ```\n"
"> > {: . shell}"

#: git-novice/_locale/es/_episodes/14-supplemental-rstudio.md:113
msgid ""
"Hay muchas más opciones que se pueden encontrar en la interfaz de RStudio,\n"
"pero las que hemos visto son suficientes para comenzar."
msgstr ""

# Front Matter
#: git-novice/_locale/es/_extras/about.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /es/about/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

# Front Matter
#: git-novice/_locale/es/_extras/discuss.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: Discussion\n"
"permalink: /es/discuss/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

# header
#: git-novice/_locale/es/_extras/discuss.md:7
msgid "## Preguntas frecuentes"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:9
msgid ""
"La gente a menudo tiene preguntas sobre Git más allá del alcance del "
"material central.\n"
"Los estudiantes que han completado el resto de las lecciones pueden "
"encontrar valor al examinar los siguientes temas."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:12
msgid ""
"Tenga en cuenta que dado que este material no es esencial para el uso básico "
"de Git, no será cubierto por el instructor."
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:14
msgid "## Más configuración avanzada de Git"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:16
#, fuzzy
msgid ""
"En [Configuración de Git]({{page.root}}/02-setup/),\n"
"usamos `git config --global` para establecer algunas opciones "
"predeterminadas para Git.\n"
"Resulta que estas opciones de configuración se almacenan en su directorio de "
"inicio\n"
"en un archivo de texto sin formato llamado `.gitconfig`."
msgstr ""
"En [Configuración de Git]({{page.root}}/02-setup/),\n"
"usamos `git config --global` para establecer algunas opciones "
"predeterminadas para Git.\n"
"Resulta que estas opciones de configuración se almacenan en su directorio de "
"inicio\n"
"en un archivo de texto sin formato llamado `.gitconfig`."

# code block
#: git-novice/_locale/es/_extras/discuss.md:26
msgid ""
"~~~\n"
"[user]\n"
"\\tname = Vlad Dracula\n"
"\\temail = vlad@tran.sylvan.ia\n"
"[color]\n"
"\\tui = true\n"
"[core]\n"
"\\teditor = nano\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:37
msgid ""
"Este archivo se puede abrir en su editor de texto preferido.\n"
"(Tenga en cuenta que se recomienda continuar usando el comando `git "
"config`,\n"
"ya que esto ayuda a evitar la introducción de errores de sintaxis)."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:41
msgid ""
"Eventualmente, querrás comenzar a personalizar el comportamiento de Git.\n"
"Esto se puede hacer agregando más entradas a su `.gitconfig`.\n"
"Las opciones disponibles se describen en el manual:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:50
msgid ""
"En particular, puede resultarle útil agregar alias.\n"
"Estos son como accesos directos para comandos de git más largos.\n"
"Por ejemplo, si te cansas de escribir `git checkout` todo el tiempo,\n"
"podrías ejecutar el comando:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:60
#, fuzzy
msgid ""
"Ahora, si volvemos al ejemplo de [Explorando el historial]({{ page."
"root }}/05-history/) where we ran:"
msgstr ""
"Ahora, si volvemos al ejemplo de [Explorando el historial]({{ page."
"root }}/05-history/) where we ran:"

#: git-novice/_locale/es/_extras/discuss.md:67
msgid "ahora podríamos escribir:"
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:74
msgid "## Diseñando el registro de Git"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:76
msgid ""
"Un buen objetivo para la personalización sale del registro.\n"
"El registro predeterminado es bastante detallado pero no da pistas gráficas\n"
"como información sobre qué confirmaciones se realizaron localmente\n"
"y que fueron sacados de controles remotos."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:81
msgid ""
"Puede usar `git log --help` y` git config --help` para buscar diferentes "
"formas de cambiar\n"
"la salida de registro.\n"
"Pruebe los siguientes comandos y vea qué efecto tienen:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:93
msgid ""
"Si no te gustan los efectos,\n"
"puedes deshacerlos con:"
msgstr ""

# blockquote, which can be cascaded
#: git-novice/_locale/es/_extras/discuss.md:103
msgid "> ## Deshacer cambios en la configuración de Git"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:104
msgid ""
">\n"
"> Puede usar el indicador `--unset` para eliminar las opciones no deseadas "
"de` .gitconfig`.\n"
"> Otra forma de deshacer los cambios es almacenar su `.gitconfig` usando "
"Git.\n"
">\n"
"> Para sugerencias sobre lo que puede querer configurar,\n"
"> vaya a GitHub y busque \"gitconfig\".\n"
"> Encontrará cientos de repositorios en los que las personas han almacenado\n"
"> sus propios archivos de configuración de Git.\n"
"> Ordenarlos por el número de estrellas y echar un vistazo a los mejores.\n"
"> Si encuentras alguno que te guste,\n"
"> compruebe que estén cubiertos por una licencia de código abierto antes de "
"clonarlos."
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:117
msgid "## Archivos sin texto"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:119
msgid ""
"Recordar cuando discutimos [Conflictos]({{page.root}}/09-conflict/)\n"
"hubo un desafío que preguntó,\n"
"\"¿Qué hace Git?\n"
"cuando hay un conflicto en una imagen o algún otro archivo no textual\n"
"que está almacenado en el control de la versión?\""
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:125
msgid "Ahora revisitaremos esto con más detalle."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:127
msgid ""
"Muchas personas desean controlar versiones que no sean archivos de texto, "
"como imágenes, archivos PDF y documentos de Microsoft Office o LibreOffice.\n"
"Es cierto que Git puede manejar estos tipos de archivos (que caen bajo el "
"título de tipos de archivos \"binarios\").\n"
"Sin embargo, solo porque *se puede* hacer no significa que *se deba* hacer."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:131
msgid ""
"Gran parte de la magia de Git proviene de poder hacer comparaciones línea "
"por línea (\"diffs\") entre archivos.\n"
"Esto es generalmente fácil para programar el código fuente y el texto "
"marcado.\n"
"Para archivos que no son de texto, un diff generalmente solo puede detectar "
"que los archivos han cambiado\n"
"pero no puedo decir cómo o dónde."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:136
#, fuzzy
msgid ""
"Esto tiene varios impactos en el rendimiento de Git y hará que sea difícil\n"
"compare diferentes versiones de su proyecto."
msgstr ""
"Esto tiene varios impactos en el rendimiento de Git y hará que sea difícil\n"
"compare diferentes versiones de su proyecto."

#: git-novice/_locale/es/_extras/discuss.md:139
msgid ""
"Para un ejemplo básico para mostrar la diferencia que hace,\n"
"vamos a ver qué hubiera pasado si Drácula hubiera intentado\n"
"utilizando salidas de un procesador de texto en lugar de texto sin formato."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:143
#, fuzzy
msgid "Crea un nuevo directorio y entra en él:"
msgstr "Crea un nuevo directorio y entra en él:"

#: git-novice/_locale/es/_extras/discuss.md:151
#, fuzzy
msgid ""
"Use un programa como Microsoft Word o LibreOffice Writer para crear un "
"documento nuevo.\n"
"Ingrese el mismo texto con el que comenzamos antes:"
msgstr ""
"Use un programa como Microsoft Word o LibreOffice Writer para crear un "
"documento nuevo.\n"
"Ingrese el mismo texto con el que comenzamos antes:"

#: git-novice/_locale/es/_extras/discuss.md:159
#, fuzzy
msgid ""
"Guarde el documento en el directorio `planets-nontext` con el nombre de "
"`mars.doc`.\n"
"De vuelta en la terminal, ejecute los comandos habituales para configurar un "
"nuevo repositorio de Git:"
msgstr ""
"Guarde el documento en el directorio `planets-nontext` con el nombre de "
"`mars.doc`.\n"
"De vuelta en la terminal, ejecute los comandos habituales para configurar un "
"nuevo repositorio de Git:"

#: git-novice/_locale/es/_extras/discuss.md:169
msgid ""
"Luego haga los mismos cambios a `mars.doc` que nosotros (o Vlad) previamente "
"hicimos a `mars.txt`."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:177
msgid ""
"Guarde y cierre el procesador de texto.\n"
"Ahora mira lo que Git piensa de tus cambios:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:192
#, fuzzy
msgid ""
"Compare esto con el anterior `git diff` obtenido al usar archivos de texto:"
msgstr ""
"Compare esto con el anterior `git diff` obtenido al usar archivos de texto:"

#: git-novice/_locale/es/_extras/discuss.md:205
msgid ""
"Observe cómo los archivos de texto plano dan una diferencia mucho más "
"informativa.\n"
"Puede ver exactamente qué líneas cambiaron y cuáles fueron los cambios."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:208
msgid ""
"Un `git diff` no informativo no es la única consecuencia de usar Git en "
"archivos binarios.\n"
"Sin embargo, la mayoría de los otros problemas se reducen a si es posible o "
"no una buena diferencia."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:211
msgid ""
"Esto no quiere decir que *nunca* debes usar Git en archivos binarios.\n"
"Una regla de oro es que está bien si el archivo binario no cambiará muy a "
"menudo,\n"
"y si cambia, no te importa fusionarte en pequeñas diferencias entre "
"versiones."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:215
msgid ""
"Ya hemos visto cómo un informe procesado por palabra no pasará esta prueba.\n"
"Un ejemplo que pasa la prueba es un logotipo para su organización o "
"proyecto.\n"
"Aunque un logotipo se almacenará en un formato binario, como `jpg` o `png`,\n"
"puede esperar que permanezca bastante estático durante la vida útil de su "
"repositorio.\n"
"En la rara ocasión en que la marca cambia,\n"
"probablemente solo quiera reemplazar el logotipo por completo en lugar de "
"combinar pequeñas diferencias."
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:222
msgid "## Eliminar un archivo"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:224
msgid ""
"Agregar y modificar archivos no son las únicas acciones que uno podría "
"tomar\n"
"cuando se trabaja en un proyecto. Puede ser necesario para eliminar un "
"archivo\n"
"del repositorio."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:228
#, fuzzy
msgid "Crea un nuevo archivo para el planeta Nibiru:"
msgstr "Crea un nuevo archivo para el planeta Nibiru:"

#: git-novice/_locale/es/_extras/discuss.md:235
msgid "Ahora agregue al repositorio como lo aprendió anteriormente:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:250
msgid ""
"Nibiru no es un planeta real. Esa fue una idea tonta. Vamos a eliminar\n"
"desde el disco y deja que Git lo sepa:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:269
msgid ""
"El cambio ha sido organizado. Ahora comprometa la eliminación y elimine\n"
"archivo del propio repositorio. Tenga en cuenta que el archivo se eliminará\n"
"en el nuevo compromiso La confirmación anterior seguirá\n"
"tener el archivo, si fueras a recuperar esa confirmación específica."
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:279
msgid "## Eliminar un archivo con Unix"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:281
msgid ""
"A veces podríamos olvidar eliminar el archivo a través de Git. Si eliminaste "
"el\n"
"archivo con Unix `rm` en lugar de usar` git rm`, sin preocupaciones,\n"
"Git es lo suficientemente inteligente como para notar el archivo perdido. "
"Vamos a recrear el archivo y\n"
"cometerlo de nuevo."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:293
msgid "Ahora eliminamos el archivo con Unix `rm`:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:313
msgid ""
"Vea cómo Git ha notado que el archivo `nibiru.txt` ha sido eliminado\n"
"del disco. El siguiente paso es \"escenificar\" la eliminación del archivo\n"
"del repositorio. Esto se hace con el comando `git rm` igual que\n"
"antes de."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:334
msgid ""
"El cambio que se hizo en Unix ahora se ha organizado y debe ser\n"
"comprometido."
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:342
msgid "## Renombrar un archivo"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:344
msgid ""
"Otro cambio común cuando se trabaja en un proyecto es cambiar el nombre de "
"un archivo."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:346
#, fuzzy
msgid "Crea un archivo para el planeta Krypton:"
msgstr "Crea un archivo para el planeta Krypton:"

#: git-novice/_locale/es/_extras/discuss.md:353
#, fuzzy
msgid "Añádalo al repositorio:"
msgstr "Añádalo al repositorio:"

#: git-novice/_locale/es/_extras/discuss.md:361
msgid ""
"Todos sabemos que Superman se mudó a la Tierra. No es que tuviera mucho\n"
"elección. Ahora su planeta de origen es la Tierra."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:364
#, fuzzy
msgid "Cambie el nombre del archivo `krypton.txt` a` earth.txt` con Git:"
msgstr "Cambie el nombre del archivo `krypton.txt` a` earth.txt` con Git:"

# code block
#: git-novice/_locale/es/_extras/discuss.md:372
msgid ""
"~~~\n"
"# On branch master\n"
"# Changes to be committed:\n"
"#   (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#\\trenamed:    krypton.txt -> earth.txt\n"
"#\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:381
msgid "El último paso es comprometer nuestro cambio al repositorio:"
msgstr ""

# header
#: git-novice/_locale/es/_extras/discuss.md:388
msgid "## Renombrar un archivo con Unix"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:390
msgid ""
"Si olvidó usar Git y usó Unix `mv` en su lugar\n"
"de `git mv`, tendrás un poco más de trabajo que hacer, pero Git lo hará\n"
"ser capaz de lidiar con eso. Intentemos nuevamente cambiar el nombre del "
"archivo,\n"
"esta vez con Unix `mv`. Primero, necesitamos recrear el\n"
"archivo `krypton.txt`:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:403
msgid ""
"Vamos a renombrar el archivo y ver lo que Git puede descifrar por sí mismo:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:428
#, fuzzy
msgid ""
"Git notó que el archivo `krypton.txt` ha desaparecido del\n"
"sistema de archivos y un nuevo archivo `earth.txt` ha aparecido."
msgstr ""
"Git notó que el archivo `krypton.txt` ha desaparecido del\n"
"sistema de archivos y un nuevo archivo `earth.txt` ha aparecido."

#: git-novice/_locale/es/_extras/discuss.md:431
msgid "Agregue esos cambios al área de ensayo:"
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:449
msgid ""
"Observe cómo Git ahora ha descubierto que el `krypton.txt` no tiene\n"
"desapareció simplemente ha sido renombrado."
msgstr ""

#: git-novice/_locale/es/_extras/discuss.md:452
msgid ""
"El último paso, como antes, es comprometer nuestro cambio al repositorio:"
msgstr ""

# Front Matter
#: git-novice/_locale/es/_extras/figures.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: Figures\n"
"permalink: /es/figures/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

# Front Matter
#: git-novice/_locale/es/_extras/guide.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /es/guide/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

#: git-novice/_locale/es/_extras/guide.md:6
msgid ""
"Usar una herramienta de software para manejar las versiones de tus archivos "
"de proyecto\n"
"le permite enfocarse en los aspectos más interesantes / innovadores de su "
"proyecto."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:9
msgid "* Ventajas del control de versiones"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:10
msgid "    * Es fácil de configurar "
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:11
msgid ""
"    * Cada copia de un repositorio de Git es una copia de seguridad completa "
"de un proyecto y su historial"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:12
msgid ""
"    * Unos pocos comandos fáciles de recordar son todo lo que necesita para "
"la mayoría de las tareas cotidianas de control de versiones"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:13
msgid ""
"    * El servicio de alojamiento [GitHub][github] proporciona un servicio de "
"colaboración basado en la web"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:14
msgid "* Dos conceptos principales"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:15
msgid ""
"    * *commit*: un conjunto de cambios registrados en los archivos de su "
"proyecto"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:16
#, fuzzy
msgid ""
"    * *repositorio*: el historial de todas las confirmaciones de su proyecto"
msgstr ""
"    * *repositorio*: el historial de todas las confirmaciones de su proyecto"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:17
#, fuzzy
msgid "* ¿Por qué usar GitHub?"
msgstr "* ¿Por qué usar GitHub?"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:18
msgid "    * No es necesario un servidor: fácil de configurar"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:19
msgid ""
"    * Comunidad fuerte de GitHub: tus colegas probablemente ya estén allí"
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:21
#, fuzzy
msgid "## En general"
msgstr "## En general"

#: git-novice/_locale/es/_extras/guide.md:23
msgid ""
"El control de versiones podría ser el tema más importante que enseñamos, "
"pero Git es\n"
"Definitivamente la herramienta más complicada. Sin embargo, GitHub "
"actualmente domina el\n"
"abrir el panorama del repositorio de software, por lo que el tiempo y el "
"esfuerzo necesarios para enseñar\n"
"Git fundamental está justificado y vale la pena."
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:28
msgid ""
"Debido a esta complejidad, no enseñamos a los principiantes acerca de "
"muchos\n"
"temas interesantes, como ramificación, hash y commit de objetos."
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:31
msgid ""
"En cambio, tratamos de convencerlos de que el control de versiones es útil "
"para los investigadores\n"
"trabajando en equipo o no, porque es"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:34
msgid "* una mejor forma de \"deshacer\" cambios,"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:35
msgid ""
"* una mejor manera de colaborar que enviar y recibir archivos por correo, y"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:36
msgid ""
"* una mejor manera de compartir tu código y otro trabajo científico con el "
"mundo."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:38
msgid "## Notas de enseñanza"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:40
#, fuzzy
msgid ""
"* Recursos para \"dividir\" su caparazón para que los comandos recientes "
"permanezcan a la vista: https://github.com/rgaiacs/swc-shell-split-window."
msgstr ""
"* Recursos para \"dividir\" su caparazón para que los comandos recientes "
"permanezcan a la vista: https://github.com/rgaiacs/swc-shell-split-window."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:42
msgid ""
"* Asegúrese de que la red esté funcionando *antes* de comenzar esta lección."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:44
msgid ""
"* Los dibujos son particularmente útiles en esta lección: si tiene una "
"pizarra blanca,"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:45
msgid " [usarlo][dibujos]!"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:47
msgid ""
"* El control de versiones generalmente no es el primer tema en un taller, "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:48
msgid ""
"así que haga que los alumnos creen una cuenta de GitHub después de la sesión "
"anterior. Recuerde a los alumnos que el nombre de usuario y el correo "
"electrónico que usan para GitHub (y configuración durante la configuración "
"de Git) será visible para el público de manera predeterminada. Sin embargo, "
"hay muchas razones por las cuales un alumno puede no querer su personal "
"información visible, y GitHub tiene [recursos para mantener una dirección de "
"correo electrónico privado][github-privacy]."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:50
msgid "* Si algunos estudiantes usan Windows, inevitablemente habrá problemas"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:51
msgid ""
" fusionando archivos con diferentes finales de línea. (Incluso si todos "
"están encendidos un poco de sabor de Unix, diferentes editores pueden o no "
"agregar una nueva línea a la última línea de un archivo.) Tómese un momento "
"para explicar estos problemas, ya que los estudiantes seguramente tropezarán "
"con ellos de nuevo. Si los estudiantes se están encontrando con problemas "
"para terminar la línea, GitHub tiene una [página][github-line-endings] que "
"ayuda a solucionar problemas."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:53
msgid ""
"* No usamos una GUI de Git en estas notas porque no hemos encontrado una que"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:54
msgid ""
" se instala fácilmente y funciona confiablemente en los tres principales "
"sistemas operativos, y porque queremos que los alumnos entiendan qué "
"comandos se están ejecutando. Ese dijo, los instructores deberían demo una "
"GUI en su escritorio en algún momento durante esta lección y apunte a los "
"alumnos en [esta página][github-gui]."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:56
msgid ""
"* Los instructores deben mostrar a los alumnos herramientas gráficas de "
"fusión / fusión como"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:57
#, fuzzy
msgid " [DiffMerge][diffmerge]."
msgstr " [DiffMerge][diffmerge]."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:59
#, fuzzy
msgid ""
"* Cuando sea apropiado, explique que enseñamos a Git en lugar de CVS, "
"Subversion, "
msgstr ""
"* Cuando sea apropiado, explique que enseñamos a Git en lugar de CVS, "
"Subversion, "

#: git-novice/_locale/es/_extras/guide.md:60
msgid ""
" o Mercurial principalmente debido a la creciente popularidad de GitHub: CVS "
"y Subversion ahora se ve como sistemas heredados, y Mercurial no es tan "
"ampliamente utilizado en las ciencias en este momento."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:62
msgid "* Recursos adicionales:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:63
msgid ""
"    * [git-it][git-it] es una demostración de Git de línea de comandos a tu "
"propio ritmo,"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:64
#, fuzzy
msgid ""
" con [git-it-electron][git-it-electron] su sucesor de GitHub Desktop.\n"
"    * [Code School][code-school] tiene un curso interactivo gratuito, [Try "
"Git][try-git].\n"
"    * para instructores, [la parábola de Git][git-parábola] es una lectura "
"de fondo útil"
msgstr ""
" con [git-it-electron][git-it-electron] su sucesor de GitHub Desktop.\n"
"    * [Code School][code-school] tiene un curso interactivo gratuito, [Try "
"Git][try-git].\n"
"    * para instructores, [la parábola de Git][git-parábola] es una lectura "
"de fondo útil"

# header
#: git-novice/_locale/es/_extras/guide.md:68
#, fuzzy
msgid "## [Control automatizado de versiones]({{page.root}}/01-basics/)"
msgstr "## [Control automatizado de versiones]({{page.root}}/01-basics/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:70
msgid ""
"* Pregunte, \"¿Quién usa 'deshacer' en su editor?\" Todos dicen \"Yo\". "
"'Deshacer' es el más simple "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:71
msgid "forma de control de versiones."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:73
msgid ""
"* Ofrezca a los alumnos una visión general de cinco minutos de lo que el "
"control de versión les hace "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:74
msgid ""
" antes de zambullirte en las prácticas de vigilancia. La mayoría de ellos "
"tendrá intentó coautar documentos enviando archivos por correo electrónico, "
"o tendrá en bicicleta en la oficina solo para darse cuenta de que la llave "
"USB con la última noche el trabajo todavía está en la mesa de la cocina. Los "
"instructores también pueden hacer bromas sobre directorios con nombres como "
"\"versión final\", \"versión final revisada\", \"versión final con las "
"correcciones del revisor tres\", \"versión realmente final\", y, \"vamos, "
"realmente tiene que ser la última versión\" para motivar la versión control "
"como una mejor manera de colaborar y como una mejor manera de respaldar el "
"trabajo."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:76
#, fuzzy
msgid "## [Configuración de Git]({{page.root}}/02-setup/)"
msgstr "## [Configuración de Git]({{page.root}}/02-setup/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:78
#, fuzzy
msgid ""
"* Sugerimos que los instructores y los estudiantes usen `nano` como editor "
"de texto para este "
msgstr ""
"* Sugerimos que los instructores y los estudiantes usen `nano` como editor "
"de texto para este "

#: git-novice/_locale/es/_extras/guide.md:79
msgid " lecciones porque"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:81
msgid "    * se ejecuta en los tres principales sistemas operativos,"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:82
msgid ""
"    * se ejecuta dentro del caparazón (las ventanas de conmutación pueden "
"ser confusas para los estudiantes), y"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:83
msgid "    * tiene ayuda contextual en la parte inferior de la ventana."
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:85
msgid ""
"    Señale a los alumnos durante la configuración que pueden y deben usar\n"
"    otro editor de texto si ya están familiarizados con él."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:88
msgid ""
"* Al configurar Git, tenga muy claro lo que los alumnos deben ingresar: es "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:89
msgid ""
"común que editen los detalles del instructor (por ejemplo, correo "
"electrónico). Verifique en el final usando `git config --list`."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:91
#, fuzzy
msgid "## [Creación de un repositorio]({{page.root}}/03-create/)"
msgstr "## [Creación de un repositorio]({{page.root}}/03-create/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:93
msgid ""
"* Cuando haces `git status`, los usuarios de Mac pueden ver un archivo` ."
"DS_Store` mostrando como "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:94
msgid "sin seguimiento. Este es un archivo que Mac OS crea en cada directorio."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:96
#, fuzzy
msgid ""
"* El desafío \"Lugares para crear repositorios\" intenta reforzar la idea "
msgstr ""
"* El desafío \"Lugares para crear repositorios\" intenta reforzar la idea "

#: git-novice/_locale/es/_extras/guide.md:97
msgid ""
"que la carpeta `.git` contiene todo el repositorio de Git y eliminando esta "
"carpeta deshace un `git init`. También le da al alumno la manera de "
"solucionar el problema común error de poner carpetas no deseadas (como "
"`Escritorio`) bajo control de versión."
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:99
msgid ""
"    En lugar de eliminar la carpeta `.git` directamente, puede elegir "
"moverla primero en un directorio más seguro y eliminarlo de allí:"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:107
msgid ""
"    El desafío sugiere que es una mala idea crear un repositorio de Git "
"dentro de otro repositorio.\n"
"    Para obtener más información sobre este tema, consulte [este número]"
"[repos-in-repos]."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:110
#, fuzzy
msgid "## [Cambios de seguimiento]({{page.root}}/04-changes/)"
msgstr "## [Cambios de seguimiento]({{page.root}}/04-changes/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:112
msgid ""
"* Es importante que los alumnos realicen un ciclo completo de compromiso por "
"sí mismos (hacer"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:113
#, fuzzy
msgid ""
" cambios, `git diff`,` git add`, y `git commit`). El \"repositorio de `bio`"
"\" desafío hace eso."
msgstr ""
" cambios, `git diff`,` git add`, y `git commit`). El \"repositorio de `bio`"
"\" desafío hace eso."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:115
msgid ""
"* Este es un buen momento para mostrar una diferencia con una herramienta "
"gráfica de diferencia. Si tu "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:116
msgid "omítalo porque tiene poco tiempo, muéstrelo una vez en GitHub."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:118
msgid ""
"* Una cosa puede causar confusión es la recuperación de versiones antiguas. "
"Si, en lugar de"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:119
#, fuzzy
msgid ""
"haciendo `$ git checkout f22b25e mars.txt`, alguien hace `$ git checkout "
"f22b25e`, terminan en el estado \"HEAD separado\" y la confusión abunda. "
"Entonces es posible seguir cometiendo, pero cosas como `git push origen "
"master` un poco más tarde no dará resultados fácilmente comprensibles. "
"También hace que parezca que los commits se pueden perder. Para \"arreglar\" "
"una \"CABEZA separada\", simplemente `git checkout master`."
msgstr ""
"haciendo `$ git checkout f22b25e mars.txt`, alguien hace `$ git checkout "
"f22b25e`, terminan en el estado \"HEAD separado\" y la confusión abunda. "
"Entonces es posible seguir cometiendo, pero cosas como `git push origen "
"master` un poco más tarde no dará resultados fácilmente comprensibles. "
"También hace que parezca que los commits se pueden perder. Para \"arreglar\" "
"una \"CABEZA separada\", simplemente `git checkout master`."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:121
msgid ""
"* Este es un buen momento para mostrar un registro dentro de una GUI de Git. "
"Si te lo"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:122
msgid " saltas porque tienes poco tiempo, muéstralo una vez en GitHub."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:124
#, fuzzy
msgid "## [Ignorando cosas]({{page.root}}/06-ignore/)"
msgstr "## [Ignorando cosas]({{page.root}}/06-ignore/)"

#: git-novice/_locale/es/_extras/guide.md:126
msgid ""
"Solo recuerda que puedes usar comodines y expresiones regulares para ignorar "
"un un conjunto particular de archivos en `.gitignore`."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:128
#, fuzzy
msgid "## [Controles remotos en GitHub]({{page.root}}/07-github/)"
msgstr "## [Controles remotos en GitHub]({{page.root}}/07-github/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:130
msgid ""
"* Deje en claro que Git y GitHub no son lo mismo: Git es una persona abierta"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:131
msgid ""
" herramienta de control de versión fuente, GitHub es una compañía que aloja "
"Git repositorios en la web y proporciona una interfaz web para interactuar "
"con repositorios ellos hospedan"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:133
msgid ""
"* Si tus alumnos están lo suficientemente avanzados como para sentirse "
"cómodos con SSH, cuéntales "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:134
msgid ""
" pueden usar claves para autenticarse en GitHub en lugar de contraseñas, "
"pero no intente configurar esto durante la clase: lleva demasiado tiempo y "
"es una distracción de las ideas centrales de la lección."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:136
msgid ""
"* Es muy útil dibujar un diagrama que muestre los diferentes repositorios"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:137
#, fuzzy
msgid " involucrado."
msgstr " involucrado."

# header
#: git-novice/_locale/es/_extras/guide.md:139
#, fuzzy
msgid "## [Collaborating]({{page.root}}/08-collab/)"
msgstr "## [Collaborating]({{page.root}}/08-collab/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:141
msgid ""
"* Decidir por adelantado si todos los alumnos trabajarán en una compartida "
"repositorio,"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:142
msgid ""
" o si van a trabajar en parejas (u otros grupos pequeños) en repositorios "
"separados. El primero es más fácil de configurar; el último corre más suave."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:144
msgid ""
"* El juego de roles entre dos instructores puede ser efectivo cuando se "
"enseña "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:145
msgid ""
"secciones de colaboración y conflicto de la lección. Un instructor puede "
"jugar el papel del propietario del repositorio, mientras que el segundo "
"instructor puede jugar el papel del colaborador. Si es posible, intente usar "
"dos proyectores para que se pueden ver las pantallas de los dos "
"instructores. Esto hace para una ilustración muy clara para los estudiantes "
"sobre quién hace qué."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:147
msgid ""
"* También es efectivo emparejar a los estudiantes durante esta lección y "
"asignar "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:148
msgid ""
"uno miembro de la pareja para tomar el papel del propietario y el otro el "
"papel de el colaborador En esta configuración, los desafíos pueden incluir "
"preguntar al\n"
"    colaborador para hacer un cambio, comprometerlo y enviar el cambio al "
"control remoto repositorio para que el propietario pueda recuperarlo y "
"viceversa. los el juego de roles entre los instructores puede ser un poco "
"\"dramático\" en el conflictos parte de la lección si los instructores "
"quieren inyectar un poco de humor en la habitación."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:151
#, fuzzy
msgid "* Si no tiene dos proyectores, tenga dos instructores al frente del"
msgstr "* Si no tiene dos proyectores, tenga dos instructores al frente del"

#: git-novice/_locale/es/_extras/guide.md:152
msgid ""
"    habitación. Cada instructor hace su parte de la demostración de "
"colaboración en su propia computadora y luego pasa el cable del proyector de "
"un lado a otro con el otro instructor cuando es hora de que hagan la otra "
"parte de el flujo de trabajo colaborativo. Toma menos de 10 segundos para "
"cada cambio, por lo que no interrumpe el flujo de la lección. Y, por "
"supuesto, ayuda a dar a cada uno de los instructores un color diferente "
"sombrero, o poner notas adhesivas de diferentes colores en sus frentes."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:154
msgid ""
"* Si eres el único instructor, la mejor manera de crear es clonar los dos "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:155
msgid ""
"repositorios en su escritorio, pero con diferentes nombres, por ejemplo, "
"pretender uno es su computadora en el trabajo:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:162
msgid ""
"* Es muy común que los alumnos escriban mal el alias remoto o la URL remota"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:163
#, fuzzy
msgid ""
" cuando se agrega un control remoto, entonces no pueden 'presionar'. Puedes "
"diagnosticar esto con `git remote -v` y comprobando cuidadosamente si hay "
"errores tipográficos.\n"
"    - Para arreglar un alias incorrecto, puedes hacer `git remote rename "
"<old><new>`.\n"
"    - Para arreglar una URL incorrecta, puedes hacer `git remote set-url "
"<alias><newurl>`."
msgstr ""
" cuando se agrega un control remoto, entonces no pueden 'presionar'. Puedes "
"diagnosticar esto con `git remote -v` y comprobando cuidadosamente si hay "
"errores tipográficos.\n"
"    - Para arreglar un alias incorrecto, puedes hacer `git remote rename "
"<old><new>`.\n"
"    - Para arreglar una URL incorrecta, puedes hacer `git remote set-url "
"<alias><newurl>`."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:167
msgid ""
"* Antes de clonar el repositorio, asegúrese de que nadie esté dentro de otro "
"repositorio. los La"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:168
msgid ""
" mejor forma de lograr esto es pasar al `Escritorio` antes de la clonación: "
"`cd && cd Desktop`."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:170
#, fuzzy
msgid ""
"* Si ambos repos están en `Desktop`, pídales que clonen a su colaborador"
msgstr ""
"* Si ambos repos están en `Desktop`, pídales que clonen a su colaborador"

#: git-novice/_locale/es/_extras/guide.md:171
#, fuzzy
msgid " repo bajo un directorio dado usando un segundo argumento:"
msgstr " repo bajo un directorio dado usando un segundo argumento:"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:178
msgid ""
"* El error más común es que los estudiantes \"empujan\" antes de \"tirar\". "
"Si ellos"
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:179
msgid "`pull` después, pueden tener un conflicto."
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:181
msgid ""
"* Conflictos, a veces extraños, comenzarán a surgir. Mantente apretado: los "
"conflictos son "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:182
msgid "siguiente.\""
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:184
#, fuzzy
msgid "## [Conflicts]({{page.root}}/09-conflict/)"
msgstr "## [Conflicts]({{page.root}}/09-conflict/)"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:186
msgid ""
"* Espere que los alumnos cometan errores. Espere *usted mismo* para cometer "
"errores. Esta "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:187
msgid "sucede porque es tarde en la lección y todos están cansados.\""
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:189
#, fuzzy
msgid "* Si eres el único instructor, la mejor forma de crear un conflicto es:"
msgstr ""
"* Si eres el único instructor, la mejor forma de crear un conflicto es:"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:191
#, fuzzy
msgid ""
"    * Clona tu repositorio en un directorio diferente, pretendiendo que es "
"tu computadora en"
msgstr ""
"    * Clona tu repositorio en un directorio diferente, pretendiendo que es "
"tu computadora en"

#: git-novice/_locale/es/_extras/guide.md:192
#, fuzzy
msgid ""
"        trabajo: `git clone https://github.com/vlad/planets.git planets-at-"
"work`.\n"
"    * En la oficina, usted hace un cambio, se compromete y empuja.\n"
"    * En su repositorio de la computadora portátil, usted (olvide tirar y) "
"hacer un cambio, comprometerse y\n"
"        intenta empujar.\n"
"    * `git pull` ahora y muestra el conflicto."
msgstr ""
"        trabajo: `git clone https://github.com/vlad/planets.git planets-at-"
"work`.\n"
"    * En la oficina, usted hace un cambio, se compromete y empuja.\n"
"    * En su repositorio de la computadora portátil, usted (olvide tirar y) "
"hacer un cambio, comprometerse y\n"
"        intenta empujar.\n"
"    * `git pull` ahora y muestra el conflicto."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:198
msgid ""
"* Los estudiantes generalmente se olvidan de 'agregar' el archivo después de "
"arreglar el conflicto y "
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:199
#, fuzzy
msgid "solo (intenta) comprometer. Puedes diagnosticar esto con `git status`."
msgstr "solo (intenta) comprometer. Puedes diagnosticar esto con `git status`."

# unordered list
#: git-novice/_locale/es/_extras/guide.md:201
msgid "* Recuerde que puede descartar uno de los dos padres de la combinación:"
msgstr ""

# unordered list
#: git-novice/_locale/es/_extras/guide.md:203
#, fuzzy
msgid ""
"    * descartar el archivo remoto, `git checkout --ours conflicted_file.txt`"
msgstr ""
"    * descartar el archivo remoto, `git checkout --ours conflicted_file.txt`"

# unordered list
#: git-novice/_locale/es/_extras/guide.md:204
#, fuzzy
msgid ""
"    * descartar el archivo local, `git checkout --the conflictigned_file.txt`"
msgstr ""
"    * descartar el archivo local, `git checkout --the conflictigned_file.txt`"

#: git-novice/_locale/es/_extras/guide.md:206
msgid ""
"Aún debe `git add` y` git commit` después de esto. Esto esparticularmente "
"útil cuando se trabaja con archivos binarios."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:208
#, fuzzy
msgid "## [Ciencia abierta]({{page.root}}/10-open/)"
msgstr "## [Ciencia abierta]({{page.root}}/10-open/)"

# header
#: git-novice/_locale/es/_extras/guide.md:210
#, fuzzy
msgid "## [Licencias]({{page.root}}/11-licensing/)"
msgstr "## [Licencias]({{page.root}}/11-licensing/)"

#: git-novice/_locale/es/_extras/guide.md:212
msgid ""
"Enseñamos sobre licencias porque preguntas sobre quién posee qué o qué puede "
"usar qué, surgen naturalmente una vez que comenzamos a hablar sobre el uso "
"de servicios públicos como GitHub para almacenar archivos. Además, la "
"discusión les da a los estudiantes la oportunidad de atrapar su aliento "
"después de lo que a menudo es un par de horas frustrantes."
msgstr ""

# header
#: git-novice/_locale/es/_extras/guide.md:216
#, fuzzy
msgid "## [Alojamiento]({{page.root}}/13-hosting/)"
msgstr "## [Alojamiento]({{page.root}}/13-hosting/)"

#: git-novice/_locale/es/_extras/guide.md:218
msgid ""
"Una preocupación común para los estudiantes es tener su trabajo a "
"disposición del público en GitHub. Si bien fomentamos la ciencia abierta, a "
"veces los repos privados son única opción. Siempre es interesante mencionar "
"las opciones para tener repositorios privados alojados en la web."
msgstr ""

#: git-novice/_locale/es/_extras/guide.md:220
#, fuzzy
msgid ""
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[dibujos]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parábola]: http://tom.preston-werner.com/2009/05/19/the-git-parable."
"html\n"
"[github]: https://github.com/\n"
"[github-gui]: http://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://help.github.com/articles/dealing-with-line-"
"endings/#platform-all\n"
"[github-privacy]: https://help.github.com/articles/ keeping-your-email-"
"address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"
msgstr ""
"[code-school]: https://www.codeschool.com/\n"
"[diffmerge]: https://sourcegear.com/diffmerge/\n"
"[dibujos]: https://marklodato.github.io/visual-git-guide/index-en.html\n"
"[git-it]: https://github.com/jlord/git-it\n"
"[git-it-electron]: https://github.com/jlord/git-it-electron\n"
"[git-parábola]: http://tom.preston-werner.com/2009/05/19/the-git-parable."
"html\n"
"[github]: https://github.com/\n"
"[github-gui]: http://git-scm.com/downloads/guis\n"
"[github-line-endings]: https://help.github.com/articles/dealing-with-line-"
"endings/#platform-all\n"
"[github-privacy]: https://help.github.com/articles/ keeping-your-email-"
"address-private/\n"
"[repos-in-repos]: https://github.com/swcarpentry/git-novice/issues/272\n"
"[try-git]: https://try.github.io"

# Front Matter
#: git-novice/_locale/es/aio.md:1 git-novice/aio.md:1
msgid ""
"---\n"
"layout: page \n"
"permalink: /aio/\n"
"---"
msgstr ""

# inline html
#: git-novice/_locale/es/aio.md:5 git-novice/aio.md:5
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: git-novice/_locale/es/aio.md:31 git-novice/aio.md:31
msgid ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""

# Front Matter
#: git-novice/_locale/es/index.md:1 git-novice/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""

#: git-novice/_locale/es/index.md:6
msgid ""
"Para ilustrar el poder de Git y GitHub, usaremos la siguiente historia \n"
"como un ejemplo motivador a través de esta lección.\n"
"El Hombre Lobo y Drácula han sido contratados por Universal Missions para "
"investigar si es\n"
"posible enviar su próximo explorador planetario a Marte. Ellos quieren\n"
"poder trabajar al mismo tiempo en los planes, pero ya han experimentado\n"
"ciertos problemas anteriormente al hacer algo similar. Si se rotan por\n"
"turnos entonces cada uno gastará mucho tiempo esperando a que el otro\n"
"termine, pero si trabajan en sus propias copias e intercambian los cambios\n"
"por email, las cosas se perderán, se sobreescribirán o se duplicarán."
msgstr ""

#: git-novice/_locale/es/index.md:16
msgid ""
"Un colega sugiere utilizar [control de versiones]({{ page.root }}/reference/"
"#version-control)\n"
"para lidiar con el trabajo. El control de versiones es mejor que el "
"intercambio de ficheros por email:"
msgstr ""

# unordered list
#: git-novice/_locale/es/index.md:19
msgid "*   Nada se pierde una vez que se incluye bajo control de versiones,"
msgstr ""

#: git-novice/_locale/es/index.md:20
msgid ""
"    a no ser que se haga un esfuerzo sustancial. Como se van guardando\n"
"    todas las versiones precedentes de los ficheros, siempre es posible\n"
"    volver atrás en el tiempo y ver exactamente quién escribió qué en\n"
"    un día en particular, o qué versión de un programa fue utilizada\n"
"    para generar un conjunto de resultados en particular."
msgstr ""

# unordered list
#: git-novice/_locale/es/index.md:26
msgid "*   Como se tienen estos registros de quién hizo qué y en qué momento,"
msgstr ""

#: git-novice/_locale/es/index.md:27
msgid ""
"    es posible saber a quién preguntar si se tiene una pregunta en un\n"
"    momento posterior y, si es necesario, revertir el contenido a una\n"
"    versión anterior, de forma similar a como funciona el comando \"deshacer"
"\"\n"
"    de los editores de texto."
msgstr ""

# unordered list
#: git-novice/_locale/es/index.md:32
#, fuzzy
msgid "*   Cuando varias personas colaboran en el mismo proyecto, es posible"
msgstr "*   Cuando varias personas colaboran en el mismo proyecto, es posible"

#: git-novice/_locale/es/index.md:33
msgid ""
"    pasar por alto o sobreescribir de manera accidental los cambios\n"
"    hechos por otra persona. El sistema de control de versiones\n"
"    notifica automáticamente a los usuarios cada vez que hay un\n"
"    conflicto entre el trabajo de una persona y la otra."
msgstr ""

#: git-novice/_locale/es/index.md:38
msgid ""
"Los equipos no son los únicos que se benefician del control de\n"
"versiones: los investigadores independientes se pueden beneficiar\n"
"en gran medida. Mantener un registro de qué ha cambiado,\n"
"cuándo y por qué es extremadamente útil para todos los investigadores\n"
"si alguna vez necesitan retomar el proyecto en un momento\n"
"posterior (e.g. un año después, cuando se ha desvanecido el\n"
"recuerdo de los detalles)."
msgstr ""

#: git-novice/_locale/es/index.md:46 git-novice/index.md:39
msgid ""
"Version control is the lab notebook of the digital world: it's what\n"
"professionals use to keep track of what they've done and to\n"
"collaborate with other people.  Every large software development\n"
"project relies on it, and most programmers use it for their small jobs\n"
"as well.  And it isn't just for software: books,\n"
"papers, small data sets, and anything that changes over time or needs\n"
"to be shared can and should be stored in a version control system."
msgstr ""
"Version control is the lab notebook of the digital world: it's what\n"
"professionals use to keep track of what they've done and to\n"
"collaborate with other people.  Every large software development\n"
"project relies on it, and most programmers use it for their small jobs\n"
"as well.  And it isn't just for software: books,\n"
"papers, small data sets, and anything that changes over time or needs\n"
"to be shared can and should be stored in a version control system."

# blockquote, which can be cascaded
#: git-novice/_locale/es/index.md:54
#, fuzzy
msgid "> ## Pre-requisitos"
msgstr "> ## Pre-requisitos"

#: git-novice/_locale/es/index.md:55
msgid ""
">\n"
"> En esta lección utilizamos Git desde el terminal de Unix. \n"
"> Se espera de los participantes alguna experiencia previa,\n"
"> *pero esto no es requisito indispensable*."
msgstr ""

# SC/DC Template label
#: git-novice/_locale/es/index.md:59 git-novice/index.md:52
msgid "{: .prereq}"
msgstr ""

# Front Matter
#: git-novice/_locale/es/lang.md:1
msgid ""
"---\n"
"home: Inicio\n"
"CoC: Codigo de Conducta\n"
"setup: Configuración\n"
"episodes: Episodes\n"
"extras: Extras\n"
"license: Licencia\n"
"improve: Mejora esta página\n"
"reference: Referencias\n"
"aio: Todo en uno\n"
"schedule: Horario\n"
"search: Buscar\n"
"edit: Editar en GitHub\n"
"contribute: Contribuir\n"
"source: Fuente\n"
"cite: Citar\n"
"contact: Contacto\n"
"keypoins: Puntos Clave\n"
"overview: Resumen\n"
"break: Pausa\n"
"previous: anterior\n"
"next: siguiente\n"
"episode: episodio\n"
"lessonHome: Inicio de la lección\n"
"teaching: Enseñando\n"
"exercises: Ejercisios\n"
"min: min\n"
"questions: Preguntas\n"
"objectives: Objectivos\n"
"downloadLesson: \"Descarga los ficheros necesarios para la lección\"\n"
"finish: \"Fin\"\n"
"scheduleDisclaimer: El horario durante la lección puede variar a según los "
"temas y preguntas que eliga el instructor.\n"
"---"
msgstr ""

# Front Matter
#: git-novice/_locale/es/reference.md:1
msgid ""
"---\n"
"layout: reference\n"
"\n"
"---"
msgstr ""

# header
#: git-novice/_locale/es/reference.md:6
#, fuzzy
msgid "## Cheatsheets de Git para Referencia Rápida"
msgstr "## Cheatsheets de Git para Referencia Rápida"

# unordered list
#: git-novice/_locale/es/reference.md:8
#, fuzzy
msgid ""
"*   Un excelente [cheatsheet de git listo para impresión](https://services."
"github.com/on-demand/downloads/github-git-cheat-sheet.pdf) está disponible "
"en formato PDF desde"
msgstr ""
"*   Un excelente [cheatsheet de git listo para impresión](https://services."
"github.com/on-demand/downloads/github-git-cheat-sheet.pdf) está disponible "
"en formato PDF desde"

#: git-novice/_locale/es/reference.md:9
msgid ""
"[el sitio de preparación de GitHub](https://services.github.com/"
"resources/).\n"
"*   Una [visualización interactiva](http://ndpsoftware.com/git-cheatsheet."
"html)\n"
"    sobre las relaciones entre entorno de trabajo, área de staging, "
"repositorio local y remoto, así los comandos asociados con cada caso (y sus "
"explicaciones)\n"
"*   Ambos recursos están disponibles en varios lenguajes e.g. español, "
"francés, y muchos más."
msgstr ""

# header
#: git-novice/_locale/es/reference.md:14
#, fuzzy
msgid "## Glosario"
msgstr "## Glosario"

#: git-novice/_locale/es/reference.md:16
#, fuzzy
msgid ""
"{:auto_ids}\n"
"changeset\n"
":   Un grupo de cambios a uno o más ficheros que son o serán añadidos\n"
"    en un solo [commit](#commit) en un [repositorio](#repositorio)\n"
"    de [control de versiones](#control-de-versiones)."
msgstr ""
"{:auto_ids}\n"
"changeset\n"
":   Un grupo de cambios a uno o más ficheros que son o serán añadidos\n"
"    en un solo [commit](#commit) en un [repositorio](#repositorio)\n"
"    de [control de versiones](#control-de-versiones)."

#: git-novice/_locale/es/reference.md:22
msgid ""
"commit\n"
":   Como verbo *hacer un commit* es la acción de registrar el estado\n"
"    de un conjunto de ficheros en un momento determinado (un [changeset]"
"(#changeset))\n"
"    en un [repositorio](#repositorio) de [control de versiones](#control-de-"
"versiones). Como sustantivo,\n"
"    *un commit* es el resultado de esta acción, i.e. un changeset almacenado "
"en un repositorio.\n"
"    Si un commit contiene cambios hechos a múltiples ficheros,\n"
"    todos los cambios son almacenados juntos."
msgstr ""

#: git-novice/_locale/es/reference.md:30
#, fuzzy
msgid ""
"conflicto\n"
":   Un cambio hecho por un usuario de un [sistema de control de versiones]"
"(#control-de-versiones)\n"
"    que es incompatible con cambios hechos por otros usuarios.\n"
"    Asistir a los usuarios a [resolver](#resolver) conflictos\n"
"    es una de las funciones más importantes del control de versiones."
msgstr ""
"conflicto\n"
":   Un cambio hecho por un usuario de un [sistema de control de versiones]"
"(#control-de-versiones)\n"
"    que es incompatible con cambios hechos por otros usuarios.\n"
"    Asistir a los usuarios a [resolver](#resolver) conflictos\n"
"    es una de las funciones más importantes del control de versiones."

#: git-novice/_locale/es/reference.md:36
#, fuzzy
msgid ""
"HTTP\n"
":   Siglas de Hypertext Transfer Protocol, el [protocolo](#protocolo) "
"utilizado para compartir páginas web y otros datos\n"
"    en la World Wide Web."
msgstr ""
"HTTP\n"
":   Siglas de Hypertext Transfer Protocol, el [protocolo](#protocolo) "
"utilizado para compartir páginas web y otros datos\n"
"    en la World Wide Web."

#: git-novice/_locale/es/reference.md:40
#, fuzzy
msgid ""
"mezclar\n"
":   (un repositorio): Reconciliar dos conjuntos de cambios en un\n"
"    [repositorio](#repositorio)."
msgstr ""
"mezclar\n"
":   (un repositorio): Reconciliar dos conjuntos de cambios en un\n"
"    [repositorio](#repositorio)."

#: git-novice/_locale/es/reference.md:44
#, fuzzy
msgid ""
"protocolo\n"
":   Un conjunto de reglas que definen cómo una computadora se comunica con "
"otra.\n"
"    Entre los protocolos más utilizados en la Internet se encuentran [HTTP]"
"(#http) y [SSH](#ssh)."
msgstr ""
"protocolo\n"
":   Un conjunto de reglas que definen cómo una computadora se comunica con "
"otra.\n"
"    Entre los protocolos más utilizados en la Internet se encuentran [HTTP]"
"(#http) y [SSH](#ssh)."

#: git-novice/_locale/es/reference.md:48
msgid ""
"remote\n"
":   (de un repositorio) Un [repositorio](#repositorio) de [control de "
"versiones](#control-de-versiones) conectado con otro\n"
"    de forma tal que ambos pueden ser actualizados intercambiando [commits]"
"(#commit)."
msgstr ""

#: git-novice/_locale/es/reference.md:52
msgid ""
"repositorio\n"
":   Un área de almacenamiento donde un sistema de [control de versiones]"
"(#control-de-versiones)\n"
"    almacena la historia completa de [commits](#commit) de un proyecto, así "
"como información\n"
"    sobre quién cambio qué, cuándo."
msgstr ""

#: git-novice/_locale/es/reference.md:57
#, fuzzy
msgid ""
"resolver\n"
":   Eliminar los [conflictos](#conflicto) entre dos o más cambios "
"incompatibles sobre un fichero o un conjunto de ficheros\n"
"    administrados por un sistema de [control de versiones](#control-de-"
"versiones)."
msgstr ""
"resolver\n"
":   Eliminar los [conflictos](#conflicto) entre dos o más cambios "
"incompatibles sobre un fichero o un conjunto de ficheros\n"
"    administrados por un sistema de [control de versiones](#control-de-"
"versiones)."

#: git-novice/_locale/es/reference.md:61
#, fuzzy
msgid ""
"revisión\n"
":   Un sinónimo de [commit](#commit)."
msgstr ""
"revisión\n"
":   Un sinónimo de [commit](#commit)."

#: git-novice/_locale/es/reference.md:64
msgid ""
"SHA-1\n"
":   [SHA-1 hashes](http://en.wikipedia.org/wiki/SHA-1) es lo que Git utiliza "
"para generar identificadores, incluyendo los de los commits.\n"
"    Para calcularlos, Git no solamente utiliza los cambios que forman parte "
"de un commit, sino también sus metadatos (tales como fecha, autor,\n"
"    mensaje), incluyendo los identificadores de todos los commits hechos "
"para cambios anteriores. Esto hace que los ID de commits de Git san "
"virtualmente únicos.\n"
"    I.e., es ínfima la probabilidad de que un mismo ID se refiera a dos "
"commits hechos de forma independiente, incluso si tuvieran los mismos "
"cambios."
msgstr ""

#: git-novice/_locale/es/reference.md:70
#, fuzzy
msgid ""
"SSH\n"
":   Abreviatura de Secure Shell, un [protocolo](#protocolo) utilizado para "
"la comunicación de forma segura entre computadoras."
msgstr ""
"SSH\n"
":   Abreviatura de Secure Shell, un [protocolo](#protocolo) utilizado para "
"la comunicación de forma segura entre computadoras."

#: git-novice/_locale/es/reference.md:73
msgid ""
"timestamp\n"
":   Un registro de cuando ocurrió un evento específico."
msgstr ""

#: git-novice/_locale/es/reference.md:76
msgid ""
"control de versiones\n"
":   Una herramienta para administrar los cambios hechos a un conjunto de "
"ficheros.\n"
"    Cada conjunto de cambios crea un nuevo[commit](#commit) de los "
"ficheros;\n"
"    el sistema de control de versiones permite a los usuarios recibir de "
"manera fiable los commits precedentes,\n"
"    y ayuda a solventar cambios conflictivos hechos por diferentes usuarios."
msgstr ""

# Front Matter
#: git-novice/_locale/es/setup.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: Setup\n"
"permalink: /es/setup/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

#: git-novice/_locale/es/setup.md:7
#, fuzzy
msgid ""
"Por favor consulte [esta sección de la plantilla de los talleres][workshop-"
"setup]\n"
"para conocer más instrucciones de instalación de Git."
msgstr ""
"Por favor consulte [esta sección de la plantilla de los talleres][workshop-"
"setup]\n"
"para conocer más instrucciones de instalación de Git."

#: git-novice/_locale/es/setup.md:10
msgid ""
"Haremos nuestro trabajo en la carpeta `Desktop`. Por favor asegúrese de "
"cambiar su directorio de trabajo con:"
msgstr ""

# code block
#: git-novice/_locale/es/setup.md:12 git-novice/setup.md:13
msgid ""
"~~~\n"
"$ cd\n"
"$ cd Desktop\n"
"~~~"
msgstr ""

#: git-novice/_locale/es/setup.md:18 git-novice/setup.md:19
msgid "[workshop-setup]: https://carpentries.github.io/workshop-template/#git"
msgstr ""

#: git-novice/index.md:6
msgid ""
"Wolfman and Dracula have been hired by Universal Missions (a space\n"
"services spinoff from Euphoric State University) to investigate if it\n"
"is possible to send their next planetary lander to Mars.  They want to\n"
"be able to work on the plans at the same time, but they have run into\n"
"problems doing this in the past.  If they take turns, each one will\n"
"spend a lot of time waiting for the other to finish, but if they work\n"
"on their own copies and email changes back and forth things will be\n"
"lost, overwritten, or duplicated."
msgstr ""
"Para ilustrar el poder de Git y GitHub, usaremos la siguiente historia \n"
"como un ejemplo motivador a través de esta lección.\n"
"El Hombre Lobo y Drácula han sido contratados por Universal Missions para "
"investigar si es\n"
"posible enviar su próximo explorador planetario a Marte. Ellos quieren\n"
"poder trabajar al mismo tiempo en los planes, pero ya han experimentado\n"
"ciertos problemas anteriormente al hacer algo similar. Si se rotan por\n"
"turnos entonces cada uno gastará mucho tiempo esperando a que el otro\n"
"termine, pero si trabajan en sus propias copias e intercambian los cambios\n"
"por email, las cosas se perderán, se sobreescribirán o se duplicarán."

#: git-novice/index.md:15
msgid ""
"A colleague suggests using [version control]({{ page.root }}/"
"reference#version-control) to\n"
"manage their work. Version control is better than mailing files back and "
"forth:"
msgstr ""
"Un colega sugiere utilizar [control de versiones]({{ page.root }}/reference/"
"#version-control)\n"
"para lidiar con el trabajo. El control de versiones es mejor que el "
"intercambio de ficheros por email:"

# unordered list
#: git-novice/index.md:18
msgid "*   Nothing that is committed to version control is ever lost, unless"
msgstr "*   Nada se pierde una vez que se incluye bajo control de versiones,"

#: git-novice/index.md:19
msgid ""
"    you work really, really hard at it. Since all old versions of\n"
"    files are saved, it's always possible to go back in time to see\n"
"    exactly who wrote what on a particular day, or what version of a\n"
"    program was used to generate a particular set of results."
msgstr ""
"    a no ser que se haga un esfuerzo sustancial. Como se van guardando\n"
"    todas las versiones precedentes de los ficheros, siempre es posible\n"
"    volver atrás en el tiempo y ver exactamente quién escribió qué en\n"
"    un día en particular, o qué versión de un programa fue utilizada\n"
"    para generar un conjunto de resultados en particular."

# unordered list
#: git-novice/index.md:24
msgid ""
"*   As we have this record of who made what changes when, we know who to ask"
msgstr "*   Como se tienen estos registros de quién hizo qué y en qué momento,"

#: git-novice/index.md:25
msgid ""
"    if we have questions later on, and, if needed, revert to a previous\n"
"    version, much like the \"undo\" feature in an editor."
msgstr ""
"    es posible saber a quién preguntar si se tiene una pregunta en un\n"
"    momento posterior y, si es necesario, revertir el contenido a una\n"
"    versión anterior, de forma similar a como funciona el comando \"deshacer"
"\"\n"
"    de los editores de texto."

# unordered list
#: git-novice/index.md:28
msgid ""
"*   When several people collaborate in the same project, it's possible to"
msgstr "*   Cuando varias personas colaboran en el mismo proyecto, es posible"

#: git-novice/index.md:29
msgid ""
"    accidentally overlook or overwrite someone's changes. The version "
"control\n"
"    system automatically notifies users whenever there's a conflict between "
"one\n"
"    person's work and another's."
msgstr ""
"    pasar por alto o sobreescribir de manera accidental los cambios\n"
"    hechos por otra persona. El sistema de control de versiones\n"
"    notifica automáticamente a los usuarios cada vez que hay un\n"
"    conflicto entre el trabajo de una persona y la otra."

#: git-novice/index.md:33
msgid ""
"Teams are not the only ones to benefit from version control: lone\n"
"researchers can benefit immensely.  Keeping a record of what was\n"
"changed, when, and why is extremely useful for all researchers if they\n"
"ever need to come back to the project later on (e.g., a year later,\n"
"when memory has faded)."
msgstr ""
"Los equipos no son los únicos que se benefician del control de\n"
"versiones: los investigadores independientes se pueden beneficiar\n"
"en gran medida. Mantener un registro de qué ha cambiado,\n"
"cuándo y por qué es extremadamente útil para todos los investigadores\n"
"si alguna vez necesitan retomar el proyecto en un momento\n"
"posterior (e.g. un año después, cuando se ha desvanecido el\n"
"recuerdo de los detalles)."

# blockquote, which can be cascaded
#: git-novice/index.md:47
msgid "> ## Prerequisites"
msgstr "> ## Pre-requisitos"

#: git-novice/index.md:48
msgid ""
">\n"
"> In this lesson we use Git from the Unix Shell.\n"
"> Some previous experience with the shell is expected,\n"
"> *but isn't mandatory*."
msgstr ""
">\n"
"> En esta lección utilizamos Git desde el terminal de Unix. \n"
"> Se espera de los participantes alguna experiencia previa,\n"
"> *pero esto no es requisito indispensable*."

# Front Matter
#: git-novice/reference.md:1
#, fuzzy
msgid ""
"---\n"
"layout: reference\n"
"Title: \"Reference\"\n"
"root: ..\n"
"permalink: /reference/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

# header
#: git-novice/reference.md:8
msgid "## Git Cheatsheets for Quick Reference"
msgstr "## Cheatsheets de Git para Referencia Rápida"

# unordered list
#: git-novice/reference.md:10
msgid ""
"*   A great [printable git cheatsheet](https://services.github.com/on-demand/"
"downloads/github-git-cheat-sheet.pdf) is available in PDF from the"
msgstr ""
"*   Un excelente [cheatsheet de git listo para impresión](https://services."
"github.com/on-demand/downloads/github-git-cheat-sheet.pdf) está disponible "
"en formato PDF desde"

#: git-novice/reference.md:11
msgid ""
"[GitHub training website](https://services.github.com/resources/).\n"
"*   An [interactive one-page visualisation](http://ndpsoftware.com/git-"
"cheatsheet.html)\n"
"    about the relationships between workspace, staging area, local "
"repository, upstream repository, and the commands associated with each (with "
"explanations).\n"
"*   Both resources are also available in other languages (e.g. Spanish, "
"French, and more).\n"
"* \"[Happy Git and GitHub for the useR](http://happygitwithr.com)\" is an "
"accessible, free online book by Jenny Bryan on how to setup and use git and "
"GitHub with specific references on the integration of git with RStudio and "
"working with git in R."
msgstr ""
"[el sitio de preparación de GitHub](https://services.github.com/"
"resources/).\n"
"*   Una [visualización interactiva](http://ndpsoftware.com/git-cheatsheet."
"html)\n"
"    sobre las relaciones entre entorno de trabajo, área de staging, "
"repositorio local y remoto, así los comandos asociados con cada caso (y sus "
"explicaciones)\n"
"*   Ambos recursos están disponibles en varios lenguajes e.g. español, "
"francés, y muchos más."

# header
#: git-novice/reference.md:17
msgid "## Glossary"
msgstr "## Glosario"

#: git-novice/reference.md:19
msgid ""
"{:auto_ids}\n"
"changeset\n"
":   A group of changes to one or more files that are or will be added\n"
"    to a single [commit](#commit) in a [version control](#version-control)\n"
"    [repository](#repository)."
msgstr ""
"{:auto_ids}\n"
"changeset\n"
":   Un grupo de cambios a uno o más ficheros que son o serán añadidos\n"
"    en un solo [commit](#commit) en un [repositorio](#repositorio)\n"
"    de [control de versiones](#control-de-versiones)."

#: git-novice/reference.md:25
msgid ""
"commit\n"
":   To record the current state of a set of files (a [changeset]"
"(#changeset))\n"
"    in a [version control](#version-control) [repository](#repository). As a "
"noun,\n"
"    the result of committing, i.e. a recorded changeset in a repository.\n"
"    If a commit contains changes to multiple files,\n"
"    all of the changes are recorded together."
msgstr ""
"commit\n"
":   Como verbo *hacer un commit* es la acción de registrar el estado\n"
"    de un conjunto de ficheros en un momento determinado (un [changeset]"
"(#changeset))\n"
"    en un [repositorio](#repositorio) de [control de versiones](#control-de-"
"versiones). Como sustantivo,\n"
"    *un commit* es el resultado de esta acción, i.e. un changeset almacenado "
"en un repositorio.\n"
"    Si un commit contiene cambios hechos a múltiples ficheros,\n"
"    todos los cambios son almacenados juntos."

#: git-novice/reference.md:32
msgid ""
"conflict\n"
":   A change made by one user of a [version control system](#version-"
"control)\n"
"    that is incompatible with changes made by other users.\n"
"    Helping users [resolve](#resolve) conflicts\n"
"    is one of version control's major tasks."
msgstr ""
"conflicto\n"
":   Un cambio hecho por un usuario de un [sistema de control de versiones]"
"(#control-de-versiones)\n"
"    que es incompatible con cambios hechos por otros usuarios.\n"
"    Asistir a los usuarios a [resolver](#resolver) conflictos\n"
"    es una de las funciones más importantes del control de versiones."

#: git-novice/reference.md:38
msgid ""
"HTTP\n"
":   The Hypertext Transfer [Protocol](#protocol) used for sharing web pages "
"and other data\n"
"    on the World Wide Web."
msgstr ""
"HTTP\n"
":   Siglas de Hypertext Transfer Protocol, el [protocolo](#protocolo) "
"utilizado para compartir páginas web y otros datos\n"
"    en la World Wide Web."

#: git-novice/reference.md:42
msgid ""
"merge\n"
":   (a repository): To reconcile two sets of changes to a\n"
"    [repository](#repository)."
msgstr ""
"mezclar\n"
":   (un repositorio): Reconciliar dos conjuntos de cambios en un\n"
"    [repositorio](#repositorio)."

#: git-novice/reference.md:46
msgid ""
"protocol\n"
":   A set of rules that define how one computer communicates with another.\n"
"    Common protocols on the Internet include [HTTP](#http) and [SSH](#ssh)."
msgstr ""
"protocolo\n"
":   Un conjunto de reglas que definen cómo una computadora se comunica con "
"otra.\n"
"    Entre los protocolos más utilizados en la Internet se encuentran [HTTP]"
"(#http) y [SSH](#ssh)."

#: git-novice/reference.md:50
msgid ""
"remote\n"
":   (of a repository) A version control [repository](#repository) connected "
"to another,\n"
"    in such way that both can be kept in sync exchanging [commits](#commit)."
msgstr ""
"remote\n"
":   (de un repositorio) Un [repositorio](#repositorio) de [control de "
"versiones](#control-de-versiones) conectado con otro\n"
"    de forma tal que ambos pueden ser actualizados intercambiando [commits]"
"(#commit)."

#: git-novice/reference.md:54
msgid ""
"repository\n"
":   A storage area where a [version control](#version-control) system\n"
"    stores the full history of [commits](#commit) of a project and "
"information\n"
"    about who changed what, when."
msgstr ""
"repositorio\n"
":   Un área de almacenamiento donde un sistema de [control de versiones]"
"(#control-de-versiones)\n"
"    almacena la historia completa de [commits](#commit) de un proyecto, así "
"como información\n"
"    sobre quién cambio qué, cuándo."

#: git-novice/reference.md:59
msgid ""
"resolve\n"
":   To eliminate the [conflicts](#conflict) between two or more incompatible "
"changes to a file or set of files\n"
"    being managed by a [version control](#version-control) system."
msgstr ""
"resolver\n"
":   Eliminar los [conflictos](#conflicto) entre dos o más cambios "
"incompatibles sobre un fichero o un conjunto de ficheros\n"
"    administrados por un sistema de [control de versiones](#control-de-"
"versiones)."

#: git-novice/reference.md:63
msgid ""
"revision\n"
":   A synonym for [commit](#commit)."
msgstr ""
"revisión\n"
":   Un sinónimo de [commit](#commit)."

#: git-novice/reference.md:66
msgid ""
"SHA-1\n"
":   [SHA-1 hashes](https://en.wikipedia.org/wiki/SHA-1) is what Git uses to "
"compute identifiers, including for commits.\n"
"    To compute these, Git uses not only the actual change of a commit, but "
"also its metadata (such as date, author,\n"
"    message), including the identifiers of all commits of preceding changes. "
"This makes Git commit IDs virtually unique.\n"
"    I.e., the likelihood that two commits made independently, even of the "
"same change, receive the same ID is exceedingly\n"
"    small."
msgstr ""
"SHA-1\n"
":   [SHA-1 hashes](http://en.wikipedia.org/wiki/SHA-1) es lo que Git utiliza "
"para generar identificadores, incluyendo los de los commits.\n"
"    Para calcularlos, Git no solamente utiliza los cambios que forman parte "
"de un commit, sino también sus metadatos (tales como fecha, autor,\n"
"    mensaje), incluyendo los identificadores de todos los commits hechos "
"para cambios anteriores. Esto hace que los ID de commits de Git san "
"virtualmente únicos.\n"
"    I.e., es ínfima la probabilidad de que un mismo ID se refiera a dos "
"commits hechos de forma independiente, incluso si tuvieran los mismos "
"cambios."

#: git-novice/reference.md:73
msgid ""
"SSH\n"
":   The Secure Shell [protocol](#protocol) used for secure communication "
"between computers."
msgstr ""
"SSH\n"
":   Abreviatura de Secure Shell, un [protocolo](#protocolo) utilizado para "
"la comunicación de forma segura entre computadoras."

#: git-novice/reference.md:76
msgid ""
"timestamp\n"
":   A record of when a particular event occurred."
msgstr ""
"timestamp\n"
":   Un registro de cuando ocurrió un evento específico."

#: git-novice/reference.md:79
msgid ""
"version control\n"
":   A tool for managing changes to a set of files.\n"
"    Each set of changes creates a new [commit](#commit) of the files;\n"
"    the version control system allows users to recover old commits "
"reliably,\n"
"    and helps manage conflicting changes made by different users."
msgstr ""
"control de versiones\n"
":   Una herramienta para administrar los cambios hechos a un conjunto de "
"ficheros.\n"
"    Cada conjunto de cambios crea un nuevo[commit](#commit) de los "
"ficheros;\n"
"    el sistema de control de versiones permite a los usuarios recibir de "
"manera fiable los commits precedentes,\n"
"    y ayuda a solventar cambios conflictivos hechos por diferentes usuarios."

# Front Matter
#: git-novice/setup.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: Setup\n"
"root: ..\n"
"permalink: /setup/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Licencias\"\n"
"root: .\n"
"---"

#: git-novice/setup.md:8
msgid ""
"Please see [this section of the workshop template][workshop-setup]\n"
"for instructions on installing Git."
msgstr ""
"Por favor consulte [esta sección de la plantilla de los talleres][workshop-"
"setup]\n"
"para conocer más instrucciones de instalación de Git."

#: git-novice/setup.md:11
msgid ""
"We'll do our work in the `Desktop` folder so make sure you change your "
"working directory to it with:"
msgstr ""
"Haremos nuestro trabajo en la carpeta `Desktop`. Por favor asegúrese de "
"cambiar su directorio de trabajo con:"
