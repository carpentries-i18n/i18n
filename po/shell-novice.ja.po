# Japanese translation of the Software Carpentry Unix Shell Lesson
# Copyright (C) 2021 Software Carpentry Foundation; Japanese Translation Team
# This file is distributed under the same license as the po4gitbook package.
# Software-Carpentry Japanese-Team <tomkellygenetics@gmail.com>, 2019, 2020, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-11-23 11:42:46+0900\n"
"PO-Revision-Date: 2020-05-13 09:57+0900\n"
"Last-Translator: \n"
"Language-Team: Japanese <tomkellygenetics@gmail.com>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.0\n"

# Front Matter
#: shell-novice/CODE_OF_CONDUCT.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"permalink: /conduct/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"投稿者の行動規範\"\n"
"root: /ja/\n"
"permalink: /ja/conduct/\n"
"---"

#: shell-novice/CODE_OF_CONDUCT.md:6
msgid ""
"As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""
"プロジェクト貢献者・保持者は、\n"
"[カーペントリーの行動規範](https://carpentries-coc.readthedocs.io/ja/latest/topic_folders/policies/code-of-conduct.html)に基づき行動することを誓います。"

#: shell-novice/CODE_OF_CONDUCT.md:9
msgid ""
"Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""
"嫌がらせ、ハラスメント行為、その他の悪意ある行動・言動は、\n"
"カーペントリーの[報告ガイドライン](https://carpentries-coc.readthedocs.io/ja/latest/topic_folders/policies/incident-reporting.html)に沿って報告させていただきます。"

#: shell-novice/CODE_OF_CONDUCT.md:12
msgid "{% include links.md %}"
msgstr "{% include links.md %}"

# header
#: shell-novice/CONTRIBUTING.md:1
msgid "# Contributing"
msgstr "# プロジェクトに貢献する"

#: shell-novice/CONTRIBUTING.md:3
msgid ""
"[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source "
"projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""
"[SoftwareCarpentry][swc-site]と[DataCarpentry][dc-site]はオープンソースのプロ"
"ジェクトです。\n"
"コミュニティーからの資料提供・ご協力、例えば、\n"
"新しいレッスン、\n"
"既存の資料の修正、\n"
"バグレポート、\n"
"変更点のレビューなど、どんなに些細な変更も歓迎いたします。"

# header
#: shell-novice/CONTRIBUTING.md:10
msgid "## Contributor Agreement"
msgstr "## 貢献者の規約"

#: shell-novice/CONTRIBUTING.md:12
msgid ""
"By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE."
"md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly "
"as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"agrees to abide by our [code of conduct](CONDUCT.md)."
msgstr ""
"このプロジェクトに貢献することにより、\n"
"自身が提供したコンテンツを[私達のライセンス](License.md)に基づき配布する事に"
"同意するものとします。\n"
"ご協力と引き換えに、\n"
"私達はあなたが提供する変更点・問題点などを検討し、\n"
"できるだけ早くコミュニティーの一員になれるよう尽力いたします。\n"
"[Software Carpentry][swc-site]と[Data Carpentry][dc-site]の一員になられた際に"
"は、\n"
"私達の[行動規範](https://docs.carpentries.org/topic_folders/policies/code-of-"
"conduct.html)を遵守する事に同意していただきます。"

# header
#: shell-novice/CONTRIBUTING.md:20
msgid "## How to Contribute"
msgstr "## 貢献する方法"

#: shell-novice/CONTRIBUTING.md:22
msgid ""
"The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""
"一番簡単に貢献する方法は、\n"
"誤字、言葉遣い、\n"
"間違った内容などを\n"
"issue(イシュー)で報告する事です。\n"
"Issueを報告することによって、自分をコミュニティーに紹介し、\n"
"また、コミュニティーのメンバーと出会う良い機会にもなります。"

# ordered list
#: shell-novice/CONTRIBUTING.md:29
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr "1. [GitHub][github]アカウントをお持ちでない場合、"

#: shell-novice/CONTRIBUTING.md:30
msgid ""
"    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other "
"methods described below."
msgstr ""
"    [メール][contact]にてご連絡して下さい。\n"
"    ですが、\n"
"    以下の方法であればメールよりも早急に対応できる場合がありますので、そちら"
"をお勧め致します。"

# ordered list
#: shell-novice/CONTRIBUTING.md:34
msgid "2.  If you have a [GitHub][github] account,"
msgstr "2. [GitHub][github]アカウントをすでにお持ちである方・"

#: shell-novice/CONTRIBUTING.md:35
msgid ""
"    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue]"
"[issues].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""
"    またはアカウントを[新たに作る][github-join]気がある方で、\n"
"    あまりGitに詳しくない・使い慣れていない方は、\n"
"    質問・提案などを[新しいイシュー][new-issue]として開いて下さい。\n"
"    イシューを開くことによって、コミュニティーから誰かをそのイシューに割り当"
"て、\n"
"    スレッド化したディスカッションとして質問・提案に応答させていただくことが"
"できます。"

# ordered list
#: shell-novice/CONTRIBUTING.md:41
msgid "3.  If you are comfortable with Git,"
msgstr "3. Gitを使い慣れている方で、"

#: shell-novice/CONTRIBUTING.md:42
msgid ""
"    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""
"    既存の資料を変更、または追加したい方は、\n"
"    プルリクエスト(Pull Request)にて変更点を提出して下さい。\n"
"    プルリクエストを使った提出方法は、[下記に記載されています](#using-"
"github)。"

# header
#: shell-novice/CONTRIBUTING.md:46
msgid "## Where to Contribute"
msgstr "## どこへ貢献するか"

# ordered list
#: shell-novice/CONTRIBUTING.md:48
msgid "1.  If you wish to change this lesson,"
msgstr "1.  このレッスンの内容を変更したい場合は、"

#: shell-novice/CONTRIBUTING.md:49
msgid ""
"    please work in <https://github.com/swcarpentry/shell-novice>,\n"
"    which can be viewed at <https://swcarpentry.github.io/shell-novice>."
msgstr ""
"    <https://github.com/swcarpentry/shell-novice>から編集して下さい。\n"
"    ウェブサイトはこちらから観覧いただけます：<https://swcarpentry.github.io/"
"shell-novice>"

# ordered list
#: shell-novice/CONTRIBUTING.md:52
msgid "2.  If you wish to change the example lesson,"
msgstr "2.  模範レッスンの内容を変更したい場合は、"

#: shell-novice/CONTRIBUTING.md:53
msgid ""
"    please work in <https://github.com/swcarpentry/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://swcarpentry.github.io/lesson-example>."
msgstr ""
"    <https://github.com/carpentries/lesson-example>から編集して下さい。\n"
"    このリポジトリは模範レッスンの内容を記載しており、\n"
"    こちらから観覧できます：<https://carpentries.github.io/lesson-example>."

# ordered list
#: shell-novice/CONTRIBUTING.md:57
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""
"3.  ワークショップのウェブサイトに使われるテンプレートの内容を変更したい場合"
"は、"

#: shell-novice/CONTRIBUTING.md:58
msgid ""
"    please work in <https://github.com/swcarpentry/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop "
"websites,\n"
"    while the extra pages in <https://swcarpentry.github.io/workshop-"
"template>\n"
"    provide more background on our design choices."
msgstr ""
"    <https://github.com/carpentries/workshop-template>から編集して下さい。\n"
"    このリポジトリのホームページに、ワークショップに使うウェブサイトの設立方"
"法が記載されており、\n"
"    <https://carpentries.github.io/workshop-template>から\n"
"    サイトの詳細なデザイン方針が観覧できます。"

# ordered list
#: shell-novice/CONTRIBUTING.md:63
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""
"4.  `_includes`、または`_layouts`に保存されている、レッスンやワークショップの"
"ためのCSSファイル、ツール、"

#: shell-novice/CONTRIBUTING.md:64
msgid ""
"    or HTML boilerplate for lessons or workshops stored in `_includes` or "
"`_layouts`,\n"
"    please work in <https://github.com/swcarpentry/styles>."
msgstr ""
"    HTML boilerplateなどを編集したい場合は、\n"
"    <https://github.com/carpentries/styles>から編集して下さい。"

# header
#: shell-novice/CONTRIBUTING.md:67
msgid "## What to Contribute"
msgstr "## 貢献していただきたい個所"

#: shell-novice/CONTRIBUTING.md:69
msgid ""
"There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""
"新しい例を書く、すでにある例の改善、\n"
"ドキュメントのアップデート、\n"
"不明瞭な点、欠点、「動作に不具合がある」といった\n"
"[バグの報告][new-issue]など、\n"
"様々な方法で貢献していただくことができます。\n"
"どういったイシューを開いたら良いかわからない場合は、\n"
"[このリポジトリのイシュー][issues]、\n"
"[Data Carpentryのイシュー][dc-issues]、\n"
"もしくは[Software Carpentryのイシュー][swc-issues]を見てみて下さい。"

#: shell-novice/CONTRIBUTING.md:79
msgid ""
"Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""
"すでにあるイシューへのコメントや、プルリクエストのレビューなども歓迎いたしま"
"す。\n"
"皆さんで協力したほうが、良い結果につながります。\n"
"また、新しく加入された方の意見やレビューなどは特に重要視しています。\n"
"レッスンの資料を幾度となく見てきた方は特に見落としがちなのですが、\n"
"私達が提供している資料・コンテンツは、初めて資料を見る方などには、理解するの"
"に時間が掛かる場合があるので、\n"
"通常とは違う視点からの意見は大変貴重なのです。"

# header
#: shell-novice/CONTRIBUTING.md:86
msgid "## What *Not* to Contribute"
msgstr "## 貢献していただきたくない個所"

#: shell-novice/CONTRIBUTING.md:88
msgid ""
"Our lessons already contain more material than we can cover in a typical "
"workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""
"現在、通常のワークショップの時間内ではカバーしきれないほどの内容量がレッスン"
"の資料に含まれています。\n"
"ですので、新たにレッスンに含められる項目やツールなどは求めておりません。\n"
"どうしても新しい内容を入れたい場合は、\n"
"(a)新しい内容を教えるために掛かるおおよその時間、\n"
"(b)新しい内容を入れる代わりにどの内容を取り出すか、\n"
"そして、取り出す理由をご説明下さい。\n"
"最初の点は、貢献する方々に可能かどうかを見極めていただくためです。\n"
"二つ目の点は、どちらの内容を有線するべきかを考えていただくためです。"

#: shell-novice/CONTRIBUTING.md:97
msgid ""
"We are also not looking for exercises or other material that only run on one "
"platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux "
"users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""
"上記に加え、一つのプラットホーム・OSでしか使用ができないなどといったプログラ"
"ムのレッスン内容・資料などは求めておりません。\n"
"私達が提供するワークショップでは、Windows、Mac OS X、Linuxなど、違ったOSを使"
"用するユーザーが来ることがあります。\n"
"そのため、新しいレッスンを作る際には、\n"
"先述の三つのOSに対応可能である必要があります。"

# header
#: shell-novice/CONTRIBUTING.md:102
msgid "## Using GitHub"
msgstr "## GitHubの使い方"

#: shell-novice/CONTRIBUTING.md:104
msgid ""
"If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""
"GitHubから資料を提供したい場合は、\n"
"[GitHubでオープンソース・プロジェクトに貢献する方法][how-contribute]\n"
"を参照して下さい。\n"
"簡潔にまとめると："

# ordered list
#: shell-novice/CONTRIBUTING.md:109
msgid ""
"1.  The published copy of the lesson is in the `gh-pages` branch of the "
"repository"
msgstr ""
"1.  現在公開されているレッスン内容はリポジトリの`gh-pages`というブランチに保"
"存されています"

#: shell-novice/CONTRIBUTING.md:110
msgid ""
"    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your "
"`gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""
"    (これはGitHubが自動的に変更点を公開させるためです)。\n"
"    そのため、全てのブランチは`gh-pages`から分岐させ、\n"
"    オリジナルの[リポジトリ][repo]の`gh-pages`を自身が分岐した`gh-pages`のブ"
"ランチにマージ・合流させてから、\n"
"    内容を変更してください。\n"
"    他の内容・個所へ貢献することが難しくなるため、\n"
"    *オリジナルの`gh-pages`から直接内容を変更することはお控え下さい。*"

# ordered list
#: shell-novice/CONTRIBUTING.md:117
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""
"2.  私達は[GitHub flow][github-flow]を使って変更点などを管理しています："

#: shell-novice/CONTRIBUTING.md:118
msgid ""
"    1.  Create a new branch in your desktop copy of this repository for each "
"significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository]"
"[repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""
"    1.  自身が持っているオリジナルのリポジトリのコピー(フォーク)に新しいブラ"
"ンチを作り、そのブランチで内容を変更します。\n"
"    2.  作ったブランチ内で変更点をコミットします。\n"
"    3.  そのブランチをGitHubのフォークにプッシュします。\n"
"    4.  自身のフォークからオリジナルの[リポジトリ][repo]へプルリクエストを提"
"出します。\n"
"    5.  頂いたコメントやレビューからの提案で、更に内容を変更する場合は、\n"
"        自分のブランチで内容を変更し、GitHubのフォークにプッシュして下さ"
"い：\n"
"        自動的にプルリクエストの内容がアップデートされます。"

#: shell-novice/CONTRIBUTING.md:126
msgid ""
"Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""
"全てのレッスンには二人のメインテイナーがおり、彼・彼女らがイシューやプルリク"
"エストを管理・見直す、\n"
"もしくはその他のメンバーに、一緒に見直すように声をかけます。\n"
"メインテイナー達はコミュニティーのボランティアですので、\n"
"最終的に何を変更するかの決定権は、メインテイナーに委ねられています。"

# header
#: shell-novice/CONTRIBUTING.md:131
msgid "## Other Resources"
msgstr "## その他の資料"

#: shell-novice/CONTRIBUTING.md:133
msgid ""
"General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-"
"site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""
"[Software Carpentry][swc-site]と[Data Carpentry][dc-site]についての一般的な"
"ディスカッションは、\n"
"[ディスカッション用のメーリングリスト][discuss-list]で行われ、\n"
"どなたでも参加できます。\n"
"また、[メール][contact]からでもご連絡いただけます。"

#: shell-novice/CONTRIBUTING.md:138
msgid ""
"[contact]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[issues]: https://github.com/swcarpentry/shell-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/shell-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"
msgstr ""
"[contact]: mailto:team@carpentries.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: https://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-"
"source-project-on-github\n"
"[new-issue]: https://github.com/swcarpentry/shell-novice/issues/new\n"
"[issues]: https://github.com/swcarpentry/shell-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/shell-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: https://software-carpentry.org/lessons/\n"
"[swc-site]: https://software-carpentry.org/"

# Front Matter
#: shell-novice/LICENSE.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"ライセンス\"\n"
"root: .\n"
"---"

# header
#: shell-novice/LICENSE.md:6
msgid "## Instructional Material"
msgstr "## 教材"

#: shell-novice/LICENSE.md:8
msgid ""
"All Software Carpentry and Data Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""
"ソフトウェアカーペントリーとData Carpentryに関する全ての教材は\n"
"[クリエイティブ・コモンズ 表示ライセンス](https://creativecommons.org/"
"licenses/by/4.0/deed.ja)\n"
"の下で利用可能です。以下は、\n"
"[表示4.0 国際(CC BY 4.0)ライセンスの完全な法的テキスト](https://"
"creativecommons.org/licenses/by/4.0/legalcode.ja)の\n"
"人が読んでわかりやすいようにした要約です。(ライセンスの代わりになるものではあ"
"りません。）"

#: shell-novice/LICENSE.md:14
msgid "You are free:"
msgstr "あなたは以下の条件に従う限り、自由に："

# unordered list
#: shell-novice/LICENSE.md:16
msgid ""
"* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""
"* **共有**---どのようなメディアやフォーマットでも資料を複製したり、再配布でき"
"ます"

# unordered list
#: shell-novice/LICENSE.md:17
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""
"* **翻案**---マテリアルをリミックスしたり、改変したり、別の作品のベースにした"
"りできます\n"

#: shell-novice/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr "営利目的も含め、どのような目的でも。"

#: shell-novice/LICENSE.md:21
msgid ""
"The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""
"あなたがライセンスの条件に従っている限り、許諾者がこれらの自由を\n"
"取り消すことはできません。"

#: shell-novice/LICENSE.md:24
msgid "Under the following terms:"
msgstr "あなたの従うべき条件は以下の通りです："

# unordered list
#: shell-novice/LICENSE.md:26
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr "* **表示**---あなたは 適切なクレジットを表示し (あなたの作品が"

#: shell-novice/LICENSE.md:27
msgid ""
"  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""
"  ソフトウェアカーペントリーの著作物 (Software Carpentry©) から派生しているこ"
"とを記載して、\n"
"  そして適切な場合は[http://software-carpentry.org](http://software-"
"carpentry.org)へのリンクを表示), \n"
"  [ライセンスへのリンク](https://creativecommons.org/licenses/by/4.0/deed.ja)"
"を\n"
"  提供し、変更があったらその旨を示さなければなりません。\n"
"  これらは合理的であればどのような方法で行っても構いませんが、\n"
"  許諾者があなたやあなたの利用行為を支持していると示唆するような方法は除きま"
"す。"

#: shell-novice/LICENSE.md:34
msgid ""
"**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""
"**追加的な制約は課せません**---あなたは、このライセンスが他の者に\n"
"許諾することを法的に制限するようないかなる法的規定も技術的手段も\n"
"適用してはなりません："

#: shell-novice/LICENSE.md:38
msgid "Notices:"
msgstr "ご注意："

# unordered list
#: shell-novice/LICENSE.md:40
msgid "* You do not have to comply with the license for elements of the"
msgstr "* あなたは、資料の中でパブリック・ドメインに属している部分に関して、"

#: shell-novice/LICENSE.md:41
msgid ""
"  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""
"  あるいはあなたの利用が著作権法上の権利制限規定にもとづく場合には、\n"
"  ライセンスの規定に従う必要はありません。\n"
"* 保証は提供されていません。ライセンスはあなたの利用に\n"
"  必要な全ての許諾を与えないかも知れません。例えば、パブリシティ権、\n"
"  肖像権、人格権 などの他の諸権利はあなたがどのように資料を利用するかを\n"
"制限することがあります。"

# header
#: shell-novice/LICENSE.md:48
msgid "## Software"
msgstr "## ソフトウェア"

#: shell-novice/LICENSE.md:50
msgid ""
"Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under "
"the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""
"特に記載がある場合を除いて、ソフトウェアカーペントリーおよびデータカーペント"
"リーが\n"
"提供しているサンプルプログラムやソフトウェアは、\n"
"[OSI][osi]が承認した\n"
"[MITライセンス](https://ja.osdn.net/projects/opensource/wiki/licenses"
"%2FMIT_license)の下で利用可能です。"

#: shell-novice/LICENSE.md:55
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""
"以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル\n"
"（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェアを\n"
"無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、\n"
"複写、変更、結合、掲載、頒布、サブライセンス、および/または販売する権利、\n"
"およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれま"
"す。"

#: shell-novice/LICENSE.md:63
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""
"上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または\n"
"重要な部分に記載するものとします。"

#: shell-novice/LICENSE.md:66
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""
"ソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、\n"
"何らの保証もなく提供されます。ここでいう保証とは、商品性、\n"
"特定の目的への適合性、および権利非侵害についての保証も含みますが、\n"
"それに限定されるものではありません。 作者または著作権者は、契約行為、\n"
"不法行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、\n"
"あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請求、\n"
"損害、その他の義務について何らの責任も負わないものとします。"

# header
#: shell-novice/LICENSE.md:74
msgid "## Trademark"
msgstr "## 商標"

#: shell-novice/LICENSE.md:76
msgid ""
"\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""
"「Software Carpentry」と「Data Carpentry」およびそれぞれのロゴは[Community\n"
"Initiatives][CI]における登録商標または商標です。"

#: shell-novice/LICENSE.md:79
#, fuzzy
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: http://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: http://opensource.org"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org\n"
"[osg]: https://opensource.jp"

#: shell-novice/README.md:1
msgid ""
"shell-novice\n"
"============"
msgstr ""
"shell-novice\n"
"============"

#: shell-novice/README.md:4
msgid ""
"An introduction to the Unix shell for people who have never used the command "
"line before.\n"
"Please see <https://swcarpentry.github.io/shell-novice/> for a rendered "
"version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""
"An introduction to the Unix shell for people who have never used the command "
"line before.\n"
"Please see <https://swcarpentry.github.io/shell-novice/> for a rendered "
"version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."

#: shell-novice/README.md:10
msgid "Maintainers:"
msgstr "Maintainers:"

# unordered list
#: shell-novice/README.md:12
msgid "* [Gabriel Devenyi][devenyi_gabriel]"
msgstr "* [Gabriel Devenyi][devenyi_gabriel]"

# unordered list
#: shell-novice/README.md:13
msgid "* [Ashwin Srinath][srinath_ashwin]"
msgstr "* [Ashwin Srinath][srinath_ashwin]"

# unordered list
#: shell-novice/README.md:14
msgid "* [Colin Morris][colin_morris]"
msgstr "* [Colin Morris][colin_morris]"

# unordered list
#: shell-novice/README.md:15
msgid "* [Will Pitchers][will_pitchers]"
msgstr "* [Will Pitchers][will_pitchers]"

#: shell-novice/README.md:17
msgid ""
"[devenyi_gabriel]: http://software-carpentry.org/team/#devenyi_gabriel\n"
"[srinath_ashwin]: http://software-carpentry.org/team/#srinath_ashwin\n"
"[colin_morris]: https://github.com/colinmorris\n"
"[will_pitchers]: https://software-carpentry.org/team/#pitchers_w\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example/"
msgstr ""
"[devenyi_gabriel]: http://software-carpentry.org/team/#devenyi_gabriel\n"
"[srinath_ashwin]: http://software-carpentry.org/team/#srinath_ashwin\n"
"[colin_morris]: https://github.com/colinmorris\n"
"[will_pitchers]: https://software-carpentry.org/team/#pitchers_w\n"
"[lesson-example]: https://swcarpentry.github.io/lesson-example/"

# Front Matter
#: shell-novice/_episodes/01-intro.md:1
msgid ""
"---\n"
"title: \"Introducing the Shell\"\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What is a command shell and why would I use one?\"\n"
"objectives:\n"
"- \"Explain how the shell relates to the keyboard, the screen, the operating "
"system, and users' programs.\"\n"
"- \"Explain when and why command-line interfaces should be used instead of "
"graphical interfaces.\"\n"
"keypoints:\n"
"- \"Explain the steps in the shell's read-run-print cycle.\"\n"
"- \"Most commands take flags (options) which begin with a `-`.\"\n"
"- \"Identify the actual command, flags, and filenames in a command-line call."
"\"\n"
"- \"Explain the steps in the shell's read-run-print cycle.\"\n"
"- \"Demonstrate the use of tab completion and explain its advantages.\"\n"
"keypoints:\n"
"- \"A shell is a program whose primary purpose is to read commands and run "
"other programs.\"\n"
"- \"The shell's main advantages are its high action-to-keystroke ratio, its "
"support for automating repetitive tasks, and its capacity to access "
"networked machines.\"\n"
"- \"The shell's main disadvantages are its primarily textual nature and how "
"cryptic its commands and operation can be.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Introducing the Shell\"\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What is a command shell and why would I use one?\"\n"
"objectives:\n"
"- \"Explain how the shell relates to the keyboard, the screen, the operating "
"system, and users' programs.\"\n"
"- \"Explain when and why command-line interfaces should be used instead of "
"graphical interfaces.\"\n"
"keypoints:\n"
"- \"Explain the steps in the shell's read-run-print cycle.\"\n"
"- \"Most commands take flags (options) which begin with a `-`.\"\n"
"- \"Identify the actual command, flags, and filenames in a command-line call."
"\"\n"
"- \"Explain the steps in the shell's read-run-print cycle.\"\n"
"- \"Demonstrate the use of tab completion and explain its advantages.\"\n"
"keypoints:\n"
"- \"A shell is a program whose primary purpose is to read commands and run "
"other programs.\"\n"
"- \"The shell's main advantages are its high action-to-keystroke ratio, its "
"support for automating repetitive tasks, and its capacity to access "
"networked machines.\"\n"
"- \"The shell's main disadvantages are its primarily textual nature and how "
"cryptic its commands and operation can be.\"\n"
"---"

# header
#: shell-novice/_episodes/01-intro.md:21
msgid "### Background"
msgstr "### Background"

#: shell-novice/_episodes/01-intro.md:22
msgid "At a high level, computers do four things:"
msgstr "コンピューターは以下の４つのことを高度におこなっています。"

# unordered list
#: shell-novice/_episodes/01-intro.md:24
msgid "-   run programs"
msgstr "- プログラムを実行する"

# unordered list
#: shell-novice/_episodes/01-intro.md:25
msgid "-   store data"
msgstr "-  データを保存する"

# unordered list
#: shell-novice/_episodes/01-intro.md:26
msgid "-   communicate with each other, and"
msgstr "-  他のコンピューターとやりとりをする"

# unordered list
#: shell-novice/_episodes/01-intro.md:27
msgid "-   interact with us"
msgstr "-   私たちとやりとりをする"

#: shell-novice/_episodes/01-intro.md:29
msgid ""
"They can do the last of these in many different ways,\n"
"including through a keyboard and mouse, or touch screen interfaces, or "
"speech recognition using systems.\n"
"While such hardware interfaces are becoming more commonplace, most "
"interaction is still\n"
"done using screens, mice, touchpads and keyboards."
msgstr ""
"私たちとのやりとりは様々な方法で行います。\n"
"例えば、キーボードやマウスを使ったり、タッチスクリーンを使ったり、音声認識を"
"使ったりです。\n"
"このようなハードウェアインターフェイスは一般的になりつつありますが、ほとんど"
"のやりとりはまだ\n"
"画面とマウスやタッチパッドとキーボードを用いて行われます。"

#: shell-novice/_episodes/01-intro.md:34
msgid ""
"We are all familiar with **graphical user interfaces** (GUI - windows, icons "
"and pointers). \n"
"They are easy to learn and fantastic for simple tasks where a vocabulary "
"consisting of\n"
"\"click\" translates easily into \"do the thing I want\". But this magic "
"relies on \n"
"wanting a simple set of things, and having programs that can do exactly "
"those things."
msgstr ""
"私たちは皆「グラフィカルユーザーインテーフェイス  (GUI)」とよばれる、ウインド"
"ウやアイコンやポインターで操作することに慣れています。\n"
"それらは簡単になれることができ、単純なタスクをこなすのには適しています。\n"
"「クリック」は「やりたいことをやってください」を意味します。 \n"
"しかし、この魔法のような単純さは、やりたいことが単純で、それを行うプログラム"
"が存在していなければなりません。"

#: shell-novice/_episodes/01-intro.md:39
msgid ""
"If you wish to do complex, purpose-specific things it helps to have a richer "
"means\n"
"of expressing your instructions to the computer. It doesn't need to be "
"complicated or\n"
"difficult, just a vocabulary of commands and a simple grammar for using them."
msgstr ""
"If you wish to do complex, purpose-specific things it helps to have a richer "
"means\n"
"of expressing your instructions to the computer. It doesn't need to be "
"complicated or\n"
"difficult, just a vocabulary of commands and a simple grammar for using them."

#: shell-novice/_episodes/01-intro.md:43
msgid ""
"This is what the shell provides - a simple language and a **command-line "
"interface** \n"
"to use it through. "
msgstr ""
"This is what the shell provides - a simple language and a **command-line "
"interface** \n"
"to use it through. "

#: shell-novice/_episodes/01-intro.md:46
msgid ""
"The heart of a command-line interface is a **read-evaluate-print loop**, or "
"REPL, called\n"
"so because when you type a command and press the Enter (or Return) key, the "
"shell:\n"
"1. Reads it\n"
"2. Executes (or \"evaluates\" it)\n"
"3. Prints the output"
msgstr ""
"コマンドラインインターフェースの核は、REPL (read-evaluate-print-loop)と呼ばれ"
"ています。\n"
"これは、シェルにコマンドを入力し、Enter(または Return)キーを押した時に起こる"
"動作:\n"
"1. コマンドを読み込む(Read)\n"
"2. コマンドを実行する (または \"評価する\" - Evaluate)\n"
"3. 結果を出力する (Print)"

#: shell-novice/_episodes/01-intro.md:52
msgid "and then prints the prompt and waits for you to enter another command."
msgstr ""
"そして、プロンプトで次のコマンドの入力を待ち、1〜3の動作を繰り返す(Loop)こと"
"から、頭文字を取ってREPLと呼ばれています。"

# header
#: shell-novice/_episodes/01-intro.md:54
msgid "### The Shell"
msgstr "### The Shell"

#: shell-novice/_episodes/01-intro.md:56
msgid ""
"A shell is a program like any other.\n"
"What's special about it is that its job is to run other programs\n"
"rather than to do calculations itself.\n"
"The most popular Unix shell is Bash,\n"
"the Bourne Again SHell\n"
"(so-called because it's derived from a shell written by Stephen Bourne).\n"
"Bash is the default shell on most modern implementations of Unix\n"
"and in most packages that provide Unix-like tools for Windows."
msgstr ""
"A shell is a program like any other.\n"
"What's special about it is that its job is to run other programs\n"
"rather than to do calculations itself.\n"
"The most popular Unix shell is Bash,\n"
"the Bourne Again SHell\n"
"(so-called because it's derived from a shell written by Stephen Bourne).\n"
"Bash is the default shell on most modern implementations of Unix\n"
"and in most packages that provide Unix-like tools for Windows."

# header
#: shell-novice/_episodes/01-intro.md:65
msgid "### What does it look like?"
msgstr "### What does it look like?"

#: shell-novice/_episodes/01-intro.md:67
msgid "A typical shell command and output looks something like this:"
msgstr "A typical shell command and output looks something like this:"

# code block
#: shell-novice/_episodes/01-intro.md:69
msgid ""
"~~~\n"
"bash-3.2$ \n"
"bash-3.2$ ls -F / \n"
"Applications/         System/\n"
"Library/              Users/\n"
"Network/              Volumes/\n"
"bash-3.2$ \n"
"~~~"
msgstr ""
"~~~\n"
"bash-3.2$ \n"
"bash-3.2$ ls -F / \n"
"Applications/         System/\n"
"Library/              Users/\n"
"Network/              Volumes/\n"
"bash-3.2$ \n"
"~~~"

#: shell-novice/_episodes/01-intro.md:77
#: shell-novice/_episodes/02-filedir.md:51
#: shell-novice/_episodes/02-filedir.md:130
#: shell-novice/_episodes/02-filedir.md:153
#: shell-novice/_episodes/02-filedir.md:202
#: shell-novice/_episodes/02-filedir.md:410
#: shell-novice/_episodes/02-filedir.md:438
#: shell-novice/_episodes/02-filedir.md:465
#: shell-novice/_episodes/02-filedir.md:478
#: shell-novice/_episodes/02-filedir.md:488
#: shell-novice/_episodes/02-filedir.md:502
#: shell-novice/_episodes/02-filedir.md:522
#: shell-novice/_episodes/02-filedir.md:534
#: shell-novice/_episodes/02-filedir.md:547
#: shell-novice/_episodes/02-filedir.md:600
#: shell-novice/_episodes/02-filedir.md:607
#: shell-novice/_episodes/02-filedir.md:624
#: shell-novice/_episodes/02-filedir.md:651
#: shell-novice/_episodes/02-filedir.md:661
#: shell-novice/_episodes/02-filedir.md:800
#: shell-novice/_episodes/02-filedir.md:809
#: shell-novice/_episodes/02-filedir.md:817
#: shell-novice/_episodes/03-create.md:30
#: shell-novice/_episodes/03-create.md:40
#: shell-novice/_episodes/03-create.md:53
#: shell-novice/_episodes/03-create.md:64
#: shell-novice/_episodes/03-create.md:112
#: shell-novice/_episodes/03-create.md:121
#: shell-novice/_episodes/03-create.md:183
#: shell-novice/_episodes/03-create.md:236
#: shell-novice/_episodes/03-create.md:246
#: shell-novice/_episodes/03-create.md:265
#: shell-novice/_episodes/03-create.md:276
#: shell-novice/_episodes/03-create.md:286
#: shell-novice/_episodes/03-create.md:294
#: shell-novice/_episodes/03-create.md:309
#: shell-novice/_episodes/03-create.md:353
#: shell-novice/_episodes/03-create.md:365
#: shell-novice/_episodes/03-create.md:379
#: shell-novice/_episodes/03-create.md:392
#: shell-novice/_episodes/03-create.md:419
#: shell-novice/_episodes/03-create.md:427
#: shell-novice/_episodes/03-create.md:436
#: shell-novice/_episodes/03-create.md:484
#: shell-novice/_episodes/03-create.md:499
#: shell-novice/_episodes/04-pipefilter.md:37
#: shell-novice/_episodes/04-pipefilter.md:55
#: shell-novice/_episodes/04-pipefilter.md:182
#: shell-novice/_episodes/04-pipefilter.md:206
#: shell-novice/_episodes/04-pipefilter.md:220
#: shell-novice/_episodes/04-pipefilter.md:280
#: shell-novice/_episodes/04-pipefilter.md:356
#: shell-novice/_episodes/04-pipefilter.md:379
#: shell-novice/_episodes/04-pipefilter.md:418
#: shell-novice/_episodes/04-pipefilter.md:442
#: shell-novice/_episodes/04-pipefilter.md:460
#: shell-novice/_episodes/04-pipefilter.md:751
#: shell-novice/_episodes/04-pipefilter.md:771
#: shell-novice/_episodes/04-pipefilter.md:793
#: shell-novice/_episodes/04-pipefilter.md:813
#: shell-novice/_episodes/05-loop.md:39 shell-novice/_episodes/05-loop.md:46
#: shell-novice/_episodes/05-loop.md:70 shell-novice/_episodes/05-loop.md:223
#: shell-novice/_episodes/05-loop.md:233 shell-novice/_episodes/05-loop.md:295
#: shell-novice/_episodes/05-loop.md:306 shell-novice/_episodes/05-loop.md:327
#: shell-novice/_episodes/05-loop.md:392 shell-novice/_episodes/05-loop.md:402
#: shell-novice/_episodes/05-loop.md:409 shell-novice/_episodes/05-loop.md:439
#: shell-novice/_episodes/05-loop.md:462 shell-novice/_episodes/05-loop.md:489
#: shell-novice/_episodes/05-loop.md:497 shell-novice/_episodes/05-loop.md:511
#: shell-novice/_episodes/06-script.md:36
#: shell-novice/_episodes/06-script.md:64
#: shell-novice/_episodes/06-script.md:99
#: shell-novice/_episodes/06-script.md:115
#: shell-novice/_episodes/06-script.md:131
#: shell-novice/_episodes/06-script.md:157
#: shell-novice/_episodes/06-script.md:169
#: shell-novice/_episodes/06-script.md:186
#: shell-novice/_episodes/06-script.md:204
#: shell-novice/_episodes/06-script.md:226
#: shell-novice/_episodes/06-script.md:248
#: shell-novice/_episodes/06-script.md:260
#: shell-novice/_episodes/06-script.md:351
#: shell-novice/_episodes/06-script.md:411
#: shell-novice/_episodes/06-script.md:419
#: shell-novice/_episodes/06-script.md:426
#: shell-novice/_episodes/06-script.md:443 shell-novice/_episodes/07-find.md:40
#: shell-novice/_episodes/07-find.md:70 shell-novice/_episodes/07-find.md:90
#: shell-novice/_episodes/07-find.md:110 shell-novice/_episodes/07-find.md:126
#: shell-novice/_episodes/07-find.md:144 shell-novice/_episodes/07-find.md:162
#: shell-novice/_episodes/07-find.md:175 shell-novice/_episodes/07-find.md:190
#: shell-novice/_episodes/07-find.md:210 shell-novice/_episodes/07-find.md:408
#: shell-novice/_episodes/07-find.md:445 shell-novice/_episodes/07-find.md:463
#: shell-novice/_episodes/07-find.md:482 shell-novice/_episodes/07-find.md:498
#: shell-novice/_episodes/07-find.md:511 shell-novice/_episodes/07-find.md:542
#: shell-novice/_episodes/07-find.md:562 shell-novice/_episodes/07-find.md:577
msgid "{: .language-bash}"
msgstr "{: .language-bash}"

#: shell-novice/_episodes/01-intro.md:79
msgid ""
"The first line shows only a **prompt**, indicating that the shell is "
"waiting\n"
"for input. Your shell may use different text for the prompt. Most "
"importantly: \n"
"when typing commands, either from these lessons or from other sources,\n"
"*do not type the prompt*, only the commands that follow it."
msgstr ""
"The first line shows only a **prompt**, indicating that the shell is "
"waiting\n"
"for input. Your shell may use different text for the prompt. Most "
"importantly: \n"
"when typing commands, either from these lessons or from other sources,\n"
"*do not type the prompt*, only the commands that follow it."

#: shell-novice/_episodes/01-intro.md:84
msgid ""
"The part that you type (in this example `ls -F /`)\n"
"typically has the following structure: a **command**,\n"
"some **flags** (also called **options** or **switches**) and an "
"**argument**.\n"
"Flags start with a dash (`-`), and change the behaviour of a command.\n"
"Arguments tell the command what to operate on (e.g. files and directories).\n"
"Sometimes flags and arguments are referred to as parameters.\n"
"A command can be called with more than one flag and more than one argument: "
"but a\n"
"command doesn't always require an argument or a flag."
msgstr ""
"The part that you type (in this example `ls -F /`)\n"
"typically has the following structure: a **command**,\n"
"some **flags** (also called **options** or **switches**) and an "
"**argument**.\n"
"Flags start with a dash (`-`), and change the behaviour of a command.\n"
"Arguments tell the command what to operate on (e.g. files and directories).\n"
"Sometimes flags and arguments are referred to as parameters.\n"
"A command can be called with more than one flag and more than one argument: "
"but a\n"
"command doesn't always require an argument or a flag."

#: shell-novice/_episodes/01-intro.md:93
msgid ""
"In the example above, our **command** is `ls`, with a **flag** `-F` and an\n"
"**argument** `/`. Each part is separated by spaces: if you omit the space \n"
"between `ls` and `-F` the shell will look for a command called `ls-F`, "
"which \n"
"doesn't exist. Also, capitalization matters: `LS` is different to `ls`. "
msgstr ""
"In the example above, our **command** is `ls`, with a **flag** `-F` and an\n"
"**argument** `/`. Each part is separated by spaces: if you omit the space \n"
"between `ls` and `-F` the shell will look for a command called `ls-F`, "
"which \n"
"doesn't exist. Also, capitalization matters: `LS` is different to `ls`. "

#: shell-novice/_episodes/01-intro.md:98
msgid ""
"Next we see the output that our command produced. In this case it is a "
"listing \n"
"of files and folders in a location called `/` - we'll cover what all these "
"mean \n"
"later today. Those with a Mac might recognize the output in this example."
msgstr ""
"Next we see the output that our command produced. In this case it is a "
"listing \n"
"of files and folders in a location called `/` - we'll cover what all these "
"mean \n"
"later today. Those with a Mac might recognize the output in this example."

#: shell-novice/_episodes/01-intro.md:102
msgid ""
"Finally, the shell again prints the prompt and waits for you to type the "
"next \n"
"command."
msgstr ""
"Finally, the shell again prints the prompt and waits for you to type the "
"next \n"
"command."

#: shell-novice/_episodes/01-intro.md:105
msgid ""
"In the examples for this lesson, we'll show the prompt as `$ `. You can make "
"your \n"
"prompt look the same by entering the command `PS1='$ '`. But you can also "
"leave \n"
"your prompt as it is - often the prompt includes useful information about "
"who and where \n"
"you are."
msgstr ""
"In the examples for this lesson, we'll show the prompt as `$ `. You can make "
"your \n"
"prompt look the same by entering the command `PS1='$ '`. But you can also "
"leave \n"
"your prompt as it is - often the prompt includes useful information about "
"who and where \n"
"you are."

#: shell-novice/_episodes/01-intro.md:110
msgid ""
"Open a shell window and try entering `ls -F /` for yourself (don't forget "
"that spaces\n"
"and capitalization are important!). You can change the prompt too, if you "
"like."
msgstr ""
"Open a shell window and try entering `ls -F /` for yourself (don't forget "
"that spaces\n"
"and capitalization are important!). You can change the prompt too, if you "
"like."

# header
#: shell-novice/_episodes/01-intro.md:113
msgid "### How does the shell know what `ls` and its flags mean?"
msgstr "### How does the shell know what `ls` and its flags mean?"

#: shell-novice/_episodes/01-intro.md:115
msgid ""
"Every command is a program stored somewhere on the computer, and the shell "
"keeps a\n"
"list of places to search for commands (the list is in a **variable** called `"
"$PATH`, \n"
"but those are concepts we'll meet later and not too important at the "
"moment). Recall\n"
"that commands, flags and arguments are separated by spaces."
msgstr ""
"Every command is a program stored somewhere on the computer, and the shell "
"keeps a\n"
"list of places to search for commands (the list is in a **variable** called `"
"$PATH`, \n"
"but those are concepts we'll meet later and not too important at the "
"moment). Recall\n"
"that commands, flags and arguments are separated by spaces."

#: shell-novice/_episodes/01-intro.md:120
msgid ""
"So let's look at the REPL (read-evaluate-print loop) in more detail. Notice "
"that the\n"
"\"evaluate\" step is made of two parts:"
msgstr ""
"So let's look at the REPL (read-evaluate-print loop) in more detail. Notice "
"that the\n"
"\"evaluate\" step is made of two parts:"

# ordered list
#: shell-novice/_episodes/01-intro.md:123
msgid "1. Read what was typed (`ls -F /` in our example)  "
msgstr "1. Read what was typed (`ls -F /` in our example)  "

#: shell-novice/_episodes/01-intro.md:124
msgid ""
"    The shell uses the spaces to split the line into the command, flags, and "
"arguments\n"
"2. Evaluate:  \n"
"    a. Find a program called `ls`  \n"
"    b. Execute it, passing it the flags and arguments (`-F` and `/`) to \n"
"       interpret as the program sees fit \n"
"3. Print the output produced by the program"
msgstr ""
"    The shell uses the spaces to split the line into the command, flags, and "
"arguments\n"
"2. Evaluate:  \n"
"    a. Find a program called `ls`  \n"
"    b. Execute it, passing it the flags and arguments (`-F` and `/`) to \n"
"       interpret as the program sees fit \n"
"3. Print the output produced by the program"

#: shell-novice/_episodes/01-intro.md:131
msgid "and then print the prompt and wait for you to enter another command."
msgstr "and then print the prompt and wait for you to enter another command."

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:133
msgid "> ## Command not found "
msgstr "> ## Command not found "

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:134
msgid ""
"> If the shell can't find a program whose name is the command you typed, it "
msgstr ""
"> If the shell can't find a program whose name is the command you typed, it "

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:135
msgid "> will print an erorr message like:"
msgstr "> will print an erorr message like:"

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:136
#: shell-novice/_episodes/01-intro.md:142 shell-novice/_episodes/05-loop.md:349
#: shell-novice/_episodes/05-loop.md:351 shell-novice/_episodes/07-find.md:286
#: shell-novice/_episodes/07-find.md:289 shell-novice/_episodes/07-find.md:664
msgid "> "
msgstr "> "

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:137
#: shell-novice/_episodes/01-intro.md:140
#: shell-novice/_episodes/03-create.md:570
#: shell-novice/_episodes/03-create.md:572
#: shell-novice/_episodes/03-create.md:574
#: shell-novice/_episodes/03-create.md:576
#: shell-novice/_episodes/03-create.md:578
#: shell-novice/_episodes/03-create.md:583
#: shell-novice/_episodes/03-create.md:633
#: shell-novice/_episodes/03-create.md:635
#: shell-novice/_episodes/03-create.md:637
#: shell-novice/_episodes/03-create.md:639
#: shell-novice/_episodes/03-create.md:675
#: shell-novice/_episodes/03-create.md:677
#: shell-novice/_episodes/05-loop.md:352 shell-novice/_episodes/05-loop.md:357
#: shell-novice/_episodes/07-find.md:290 shell-novice/_episodes/07-find.md:296
msgid "> ~~~"
msgstr "> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:138
msgid "> $ ls-F"
msgstr "> $ ls-F"

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:139
msgid "> -bash: ls-F: command not found"
msgstr "> -bash: ls-F: command not found"

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:141
#: shell-novice/_episodes/03-create.md:573
#: shell-novice/_episodes/03-create.md:584
#: shell-novice/_episodes/03-create.md:636
#: shell-novice/_episodes/03-create.md:678
#: shell-novice/_episodes/05-loop.md:358
msgid "> {: .language-bash}"
msgstr "> {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:143
msgid ""
"> Usually this means that you have mis-typed the command - in this case we "
"omitted"
msgstr ""
"> 通常これは、あなたがコマンドをタイプミスしたことを意味します。このケースで"
"は"

# blockquote, which can be cascaded
#: shell-novice/_episodes/01-intro.md:144
msgid "> the space between `ls` and `-F`. "
msgstr "> `ls` と `-F` の間に空白を忘れています。"

# SC/DC Template label
#: shell-novice/_episodes/01-intro.md:145
#: shell-novice/_episodes/02-filedir.md:71
#: shell-novice/_episodes/02-filedir.md:108
#: shell-novice/_episodes/02-filedir.md:191
#: shell-novice/_episodes/02-filedir.md:338
#: shell-novice/_episodes/02-filedir.md:577
#: shell-novice/_episodes/02-filedir.md:590
#: shell-novice/_episodes/02-filedir.md:679
#: shell-novice/_episodes/02-filedir.md:782
#: shell-novice/_episodes/03-create.md:77
#: shell-novice/_episodes/03-create.md:105
#: shell-novice/_episodes/03-create.md:145
#: shell-novice/_episodes/03-create.md:175
#: shell-novice/_episodes/03-create.md:257
#: shell-novice/_episodes/03-create.md:344
#: shell-novice/_episodes/03-create.md:532
#: shell-novice/_episodes/04-pipefilter.md:99
#: shell-novice/_episodes/04-pipefilter.md:302
#: shell-novice/_episodes/04-pipefilter.md:407
#: shell-novice/_episodes/04-pipefilter.md:563
#: shell-novice/_episodes/05-loop.md:85 shell-novice/_episodes/05-loop.md:195
#: shell-novice/_episodes/05-loop.md:209 shell-novice/_episodes/05-loop.md:381
#: shell-novice/_episodes/05-loop.md:517 shell-novice/_episodes/05-loop.md:563
#: shell-novice/_episodes/05-loop.md:579 shell-novice/_episodes/06-script.md:89
#: shell-novice/_episodes/06-script.md:147
#: shell-novice/_episodes/06-script.md:337 shell-novice/_episodes/07-find.md:63
#: shell-novice/_episodes/07-find.md:283 shell-novice/_episodes/07-find.md:527
#: shell-novice/_episodes/07-find.md:634 shell-novice/setup.md:64
msgid "{: .callout}"
msgstr "{: .callout}"

# header
#: shell-novice/_episodes/01-intro.md:147
msgid "### Is it difficult?"
msgstr "### Is it difficult?"

#: shell-novice/_episodes/01-intro.md:149
msgid ""
"It isn't difficult, but it is a different model of interacting than a GUI, "
"and that \n"
"will take some effort - and some time - to learn. A GUI \n"
"presents you with choices and you select one. With a CLI the choices are "
"combinations \n"
"of commands and parameters, more like words in a language than buttons on a "
"screen. They\n"
"are not presented to you so\n"
"you must learn a few, like learning some vocabulary in a new language. But a "
"small \n"
"number of commands gets you a long way, and we'll cover those essential few "
"today."
msgstr ""
"It isn't difficult, but it is a different model of interacting than a GUI, "
"and that \n"
"will take some effort - and some time - to learn. A GUI \n"
"presents you with choices and you select one. With a CLI the choices are "
"combinations \n"
"of commands and parameters, more like words in a language than buttons on a "
"screen. They\n"
"are not presented to you so\n"
"you must learn a few, like learning some vocabulary in a new language. But a "
"small \n"
"number of commands gets you a long way, and we'll cover those essential few "
"today."

# header
#: shell-novice/_episodes/01-intro.md:157
msgid "### Flexibility and automation "
msgstr "### Flexibility and automation "

#: shell-novice/_episodes/01-intro.md:159
msgid ""
"The grammar of a shell allows you to combine existing tools into powerful\n"
"pipelines and handle large volumes of data automatically. Sequences of\n"
"commands can be written into a *script*, improving the reproducibility of \n"
"workflows and allowing you to repeat them easily."
msgstr ""
"The grammar of a shell allows you to combine existing tools into powerful\n"
"pipelines and handle large volumes of data automatically. Sequences of\n"
"commands can be written into a *script*, improving the reproducibility of \n"
"workflows and allowing you to repeat them easily."

#: shell-novice/_episodes/01-intro.md:164
msgid ""
"In addition, the command line is often the easiest way to interact with "
"remote machines and supercomputers.\n"
"Familiarity with the shell is near essential to run a variety of specialized "
"tools and resources\n"
"including high-performance computing systems.\n"
"As clusters and cloud computing systems become more popular for scientific "
"data crunching,\n"
"being able to interact with the shell is becoming a necessary skill.\n"
"We can build on the command-line skills covered here\n"
"to tackle a wide range of scientific questions and computational challenges."
msgstr ""
"In addition, the command line is often the easiest way to interact with "
"remote machines and supercomputers.\n"
"Familiarity with the shell is near essential to run a variety of specialized "
"tools and resources\n"
"including high-performance computing systems.\n"
"As clusters and cloud computing systems become more popular for scientific "
"data crunching,\n"
"being able to interact with the shell is becoming a necessary skill.\n"
"We can build on the command-line skills covered here\n"
"to tackle a wide range of scientific questions and computational challenges."

# header
#: shell-novice/_episodes/01-intro.md:172
msgid "## Nelle's Pipeline: Starting Point"
msgstr "## Nelle's Pipeline: Starting Point"

#: shell-novice/_episodes/01-intro.md:174
msgid ""
"Nelle Nemo, a marine biologist,\n"
"has just returned from a six-month survey of the\n"
"[North Pacific Gyre](http://en.wikipedia.org/wiki/North_Pacific_Gyre),\n"
"where she has been sampling gelatinous marine life in the\n"
"[Great Pacific Garbage Patch](http://en.wikipedia.org/wiki/"
"Great_Pacific_Garbage_Patch).\n"
"She has 1520 samples in all and now needs to:"
msgstr ""
"Nelle Nemo, a marine biologist,\n"
"has just returned from a six-month survey of the\n"
"[North Pacific Gyre](http://en.wikipedia.org/wiki/North_Pacific_Gyre),\n"
"where she has been sampling gelatinous marine life in the\n"
"[Great Pacific Garbage Patch](http://en.wikipedia.org/wiki/"
"Great_Pacific_Garbage_Patch).\n"
"She has 1520 samples in all and now needs to:"

# ordered list
#: shell-novice/_episodes/01-intro.md:181
msgid "1.  Run each sample through an assay machine"
msgstr "1.  Run each sample through an assay machine"

#: shell-novice/_episodes/01-intro.md:182
msgid ""
"    that will measure the relative abundance of 300 different proteins.\n"
"    The machine's output for a single sample is\n"
"    a file with one line for each protein.\n"
"2.  Calculate statistics for each of the proteins separately\n"
"    using a program her supervisor wrote called `goostats`.\n"
"3.  Write up results.\n"
"    Her supervisor would really like her to do this by the end of the month\n"
"    so that her paper can appear in an upcoming special issue of *Aquatic "
"Goo Letters*."
msgstr ""
"    that will measure the relative abundance of 300 different proteins.\n"
"    The machine's output for a single sample is\n"
"    a file with one line for each protein.\n"
"2.  Calculate statistics for each of the proteins separately\n"
"    using a program her supervisor wrote called `goostats`.\n"
"3.  Write up results.\n"
"    Her supervisor would really like her to do this by the end of the month\n"
"    so that her paper can appear in an upcoming special issue of *Aquatic "
"Goo Letters*."

#: shell-novice/_episodes/01-intro.md:191
msgid ""
"It takes about half an hour for the assay machine to process each sample.\n"
"The good news is that\n"
"it only takes two minutes to set each one up.\n"
"Since her lab has eight assay machines that she can use in parallel,\n"
"this step will \"only\" take about two weeks."
msgstr ""
"It takes about half an hour for the assay machine to process each sample.\n"
"The good news is that\n"
"it only takes two minutes to set each one up.\n"
"Since her lab has eight assay machines that she can use in parallel,\n"
"this step will \"only\" take about two weeks."

#: shell-novice/_episodes/01-intro.md:197
msgid ""
"The bad news is that if she has to run `goostats` by hand,\n"
"she'll have to enter filenames and click \"OK\" 1520 times.\n"
"At 30 seconds per sample,\n"
"the whole process will take more than 12 hours\n"
"(and that's assuming the best-case scenario where she is ready to enter the "
"next file name\n"
"as soon as the previous sample analysis has finished).\n"
"This zero-breaks always-ready scenario is only achieveable by a machine so "
"it would\n"
"likely take much longer than 12 hours, not to mention that\n"
"the chances of her typing all of those commands correctly are practically "
"zero.\n"
"Missing that paper deadline is looking increasingly likely."
msgstr ""
"The bad news is that if she has to run `goostats` by hand,\n"
"she'll have to enter filenames and click \"OK\" 1520 times.\n"
"At 30 seconds per sample,\n"
"the whole process will take more than 12 hours\n"
"(and that's assuming the best-case scenario where she is ready to enter the "
"next file name\n"
"as soon as the previous sample analysis has finished).\n"
"This zero-breaks always-ready scenario is only achieveable by a machine so "
"it would\n"
"likely take much longer than 12 hours, not to mention that\n"
"the chances of her typing all of those commands correctly are practically "
"zero.\n"
"Missing that paper deadline is looking increasingly likely."

#: shell-novice/_episodes/01-intro.md:208
msgid ""
"The next few lessons will explore what she should do instead.\n"
"More specifically,\n"
"they explain how she can use a command shell\n"
"to automate the repetitive steps in her processing pipeline\n"
"so that her computer can work 24 hours a day while she writes her paper.\n"
"As a bonus,\n"
"once she has put a processing pipeline together,\n"
"she will be able to use it again whenever she collects more data."
msgstr ""
"The next few lessons will explore what she should do instead.\n"
"More specifically,\n"
"they explain how she can use a command shell\n"
"to automate the repetitive steps in her processing pipeline\n"
"so that her computer can work 24 hours a day while she writes her paper.\n"
"As a bonus,\n"
"once she has put a processing pipeline together,\n"
"she will be able to use it again whenever she collects more data."

# Front Matter
#: shell-novice/_episodes/02-filedir.md:1
#, fuzzy
msgid ""
"---\n"
"title: \"Navigating Files and Directories\"\n"
"teaching: 30\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I move around on my computer?\"\n"
"- \"How can I see what files and directories I have?\"\n"
"- \"How can I specify the location of a file or directory on my computer?\"\n"
"objectives:\n"
"- \"Explain the similarities and differences between a file and a directory."
"\"\n"
"- \"Translate an absolute path into a relative path and vice versa.\"\n"
"- \"Construct absolute and relative paths that identify specific files and "
"directories.\"\n"
"- \"Demonstrate the use of tab completion, and explain its advantages.\"\n"
"keypoints:\n"
"- \"The file system is responsible for managing information on the disk.\"\n"
"- \"Information is stored in files, which are stored in directories "
"(folders).\"\n"
"- \"Directories can also store other directories, which forms a directory "
"tree.\"\n"
"- \"`cd path` changes the current working directory.\"\n"
"- \"`ls path` prints a listing of a specific file or directory; `ls` on its "
"own lists the current working directory.\"\n"
"- \"`pwd` prints the user's current working directory.\"\n"
"- \"`whoami` shows the user's current identity.\"\n"
"- \"`/` on its own is the root directory of the whole file system.\"\n"
"- \"A relative path specifies a location starting from the current location."
"\"\n"
"- \"An absolute path specifies a location from the root of the file system."
"\"\n"
"- \"Directory names in a path are separated with `/` on Unix, but `\\\\\\\\` "
"on Windows.\"\n"
"- \"`..` means 'the directory above the current one'; `.` on its own means "
"'the current directory'.\"\n"
"- \"Most files' names are `something.extension`. The extension isn't "
"required, and doesn't guarantee anything,\n"
"but is normally used to indicate the type of data in the file.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Navigating Files and Directories\"\n"
"teaching: 30\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I move around on my computer?\"\n"
"- \"How can I see what files and directories I have?\"\n"
"- \"How can I specify the location of a file or directory on my computer?\"\n"
"objectives:\n"
"- \"Explain the similarities and differences between a file and a directory."
"\"\n"
"- \"Translate an absolute path into a relative path and vice versa.\"\n"
"- \"Construct absolute and relative paths that identify specific files and "
"directories.\"\n"
"- \"Demonstrate the use of tab completion, and explain its advantages.\"\n"
"keypoints:\n"
"- \"The file system is responsible for managing information on the disk.\"\n"
"- \"Information is stored in files, which are stored in directories "
"(folders).\"\n"
"- \"Directories can also store other directories, which forms a directory "
"tree.\"\n"
"- \"`cd path` changes the current working directory.\"\n"
"- \"`ls path` prints a listing of a specific file or directory; `ls` on its "
"own lists the current working directory.\"\n"
"- \"`pwd` prints the user's current working directory.\"\n"
"- \"`whoami` shows the user's current identity.\"\n"
"- \"`/` on its own is the root directory of the whole file system.\"\n"
"- \"A relative path specifies a location starting from the current location."
"\"\n"
"- \"An absolute path specifies a location from the root of the file system."
"\"\n"
"- \"Directory names in a path are separated with `/` on Unix, but `\\\\\\\\` "
"on Windows.\"\n"
"- \"`..` means 'the directory above the current one'; `.` on its own means "
"'the current directory'.\"\n"
"- \"Most files' names are `something.extension`. The extension isn't "
"required, and doesn't guarantee anything, \n"
"but is normally used to indicate the type of data in the file.\"\n"
"---"

#: shell-novice/_episodes/02-filedir.md:31
msgid ""
"The part of the operating system responsible for managing files and "
"directories \n"
"is called the **file system**.\n"
"It organizes our data into files,\n"
"which hold information,\n"
"and directories (also called \"folders\"),\n"
"which hold files or other directories."
msgstr ""
"The part of the operating system responsible for managing files and "
"directories \n"
"is called the **file system**.\n"
"It organizes our data into files,\n"
"which hold information,\n"
"and directories (also called \"folders\"),\n"
"which hold files or other directories."

#: shell-novice/_episodes/02-filedir.md:38
msgid ""
"Several commands are frequently used to create, inspect, rename, and delete "
"files and directories.\n"
"To start exploring them, we'll go to our open shell window:"
msgstr ""
"Several commands are frequently used to create, inspect, rename, and delete "
"files and directories.\n"
"To start exploring them, we'll go to our open shell window:"

#: shell-novice/_episodes/02-filedir.md:41
msgid ""
"First let's find out where we are by running a command called `pwd`\n"
"(which stands for \"print working directory\"). Directories are like "
"*places* - at any time\n"
"while we are using the shell we are in exactly one place, called\n"
"our **current working directory**. Commands mostly read and write files in "
"the \n"
"current working directory, i.e. \"here\", so knowing where you are before "
"running\n"
"a command is important. `pwd` shows you where you are:"
msgstr ""
"First let's find out where we are by running a command called `pwd`\n"
"(which stands for \"print working directory\"). Directories are like "
"*places* - at any time\n"
"while we are using the shell we are in exactly one place, called\n"
"our **current working directory**. Commands mostly read and write files in "
"the \n"
"current working directory, i.e. \"here\", so knowing where you are before "
"running\n"
"a command is important. `pwd` shows you where you are:"

# code block
#: shell-novice/_episodes/02-filedir.md:48
#: shell-novice/_episodes/02-filedir.md:475
#: shell-novice/_episodes/02-filedir.md:531
#: shell-novice/_episodes/02-filedir.md:604
#: shell-novice/_episodes/02-filedir.md:648
#: shell-novice/_episodes/03-create.md:27
#: shell-novice/_episodes/03-create.md:262
#: shell-novice/_episodes/03-create.md:350
msgid ""
"~~~\n"
"$ pwd\n"
"~~~"
msgstr ""
"~~~\n"
"$ pwd\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:53
#: shell-novice/_episodes/02-filedir.md:609
msgid ""
"~~~\n"
"/Users/nelle\n"
"~~~"
msgstr ""
"~~~\n"
"/Users/nelle\n"
"~~~"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:56
#: shell-novice/_episodes/02-filedir.md:136
#: shell-novice/_episodes/02-filedir.md:159
#: shell-novice/_episodes/02-filedir.md:322
#: shell-novice/_episodes/02-filedir.md:415
#: shell-novice/_episodes/02-filedir.md:444
#: shell-novice/_episodes/02-filedir.md:483
#: shell-novice/_episodes/02-filedir.md:494
#: shell-novice/_episodes/02-filedir.md:539
#: shell-novice/_episodes/02-filedir.md:553
#: shell-novice/_episodes/02-filedir.md:612
#: shell-novice/_episodes/02-filedir.md:656
#: shell-novice/_episodes/03-create.md:35
#: shell-novice/_episodes/03-create.md:45
#: shell-novice/_episodes/03-create.md:69
#: shell-novice/_episodes/03-create.md:188
#: shell-novice/_episodes/03-create.md:270
#: shell-novice/_episodes/03-create.md:281
#: shell-novice/_episodes/03-create.md:358
#: shell-novice/_episodes/03-create.md:370
#: shell-novice/_episodes/03-create.md:397
#: shell-novice/_episodes/03-create.md:441
#: shell-novice/_episodes/03-create.md:489
#: shell-novice/_episodes/04-pipefilter.md:43
#: shell-novice/_episodes/04-pipefilter.md:66
#: shell-novice/_episodes/04-pipefilter.md:193
#: shell-novice/_episodes/04-pipefilter.md:225
#: shell-novice/_episodes/04-pipefilter.md:291
#: shell-novice/_episodes/04-pipefilter.md:367
#: shell-novice/_episodes/04-pipefilter.md:384
#: shell-novice/_episodes/04-pipefilter.md:423
#: shell-novice/_episodes/04-pipefilter.md:453
#: shell-novice/_episodes/04-pipefilter.md:465
#: shell-novice/_episodes/04-pipefilter.md:764
#: shell-novice/_episodes/04-pipefilter.md:780
#: shell-novice/_episodes/04-pipefilter.md:802
#: shell-novice/_episodes/04-pipefilter.md:818
#: shell-novice/_episodes/05-loop.md:80 shell-novice/_episodes/05-loop.md:313
#: shell-novice/_episodes/05-loop.md:449 shell-novice/_episodes/05-loop.md:472
#: shell-novice/_episodes/05-loop.md:528 shell-novice/_episodes/06-script.md:73
#: shell-novice/_episodes/06-script.md:106
#: shell-novice/_episodes/06-script.md:124
#: shell-novice/_episodes/06-script.md:140
#: shell-novice/_episodes/06-script.md:162
#: shell-novice/_episodes/06-script.md:178
#: shell-novice/_episodes/06-script.md:195
#: shell-novice/_episodes/06-script.md:211
#: shell-novice/_episodes/06-script.md:255
#: shell-novice/_episodes/06-script.md:272 shell-novice/_episodes/07-find.md:55
#: shell-novice/_episodes/07-find.md:77 shell-novice/_episodes/07-find.md:96
#: shell-novice/_episodes/07-find.md:115 shell-novice/_episodes/07-find.md:131
#: shell-novice/_episodes/07-find.md:151 shell-novice/_episodes/07-find.md:168
#: shell-novice/_episodes/07-find.md:182 shell-novice/_episodes/07-find.md:203
#: shell-novice/_episodes/07-find.md:233 shell-novice/_episodes/07-find.md:425
#: shell-novice/_episodes/07-find.md:454 shell-novice/_episodes/07-find.md:475
#: shell-novice/_episodes/07-find.md:487 shell-novice/_episodes/07-find.md:519
#: shell-novice/_episodes/07-find.md:551 shell-novice/_episodes/07-find.md:582
msgid "{: .output}"
msgstr "{: .output}"

#: shell-novice/_episodes/02-filedir.md:58
msgid ""
"Here,\n"
"the computer's response is `/Users/nelle`,\n"
"which is Nelle's **home directory**:"
msgstr ""
"Here,\n"
"the computer's response is `/Users/nelle`,\n"
"which is Nelle's **home directory**:"

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:62
msgid "> ## Home Directory Variation"
msgstr "> ## Home Directory Variation"

#: shell-novice/_episodes/02-filedir.md:63
msgid ""
">\n"
"> The home directory path will look different on different operating "
"systems.\n"
"> On Linux it may look like `/home/nelle`,\n"
"> and on Windows it will be similar to `C:\\Documents and Settings\\nelle` "
"or\n"
"> `C:\\Users\\nelle`.  \n"
"> (Note that it may look slightly different for different versions of "
"Windows.)\n"
"> In future examples, we've used Mac output as the default - Linux and "
"Windows\n"
"> output may differ slightly, but should be generally similar.  "
msgstr ""
">\n"
"> The home directory path will look different on different operating "
"systems.\n"
"> On Linux it may look like `/home/nelle`,\n"
"> and on Windows it will be similar to `C:\\Documents and Settings\\nelle` "
"or\n"
"> `C:\\Users\\nelle`.  \n"
"> (Note that it may look slightly different for different versions of "
"Windows.)\n"
"> In future examples, we've used Mac output as the default - Linux and "
"Windows\n"
"> output may differ slightly, but should be generally similar.  "

#: shell-novice/_episodes/02-filedir.md:73
msgid ""
"To understand what a \"home directory\" is,\n"
"let's have a look at how the file system as a whole is organized.  For the\n"
"sake of this example, we'll be\n"
"illustrating the filesystem on our scientist Nelle's computer.  After this\n"
"illustration, you'll be learning commands to explore your own filesystem,\n"
"which will be constructed in a similar way, but not be exactly identical.  "
msgstr ""
"To understand what a \"home directory\" is,\n"
"let's have a look at how the file system as a whole is organized.  For the\n"
"sake of this example, we'll be\n"
"illustrating the filesystem on our scientist Nelle's computer.  After this\n"
"illustration, you'll be learning commands to explore your own filesystem,\n"
"which will be constructed in a similar way, but not be exactly identical.  "

#: shell-novice/_episodes/02-filedir.md:80
msgid "On Nelle's computer, the filesystem looks like this:"
msgstr "On Nelle's computer, the filesystem looks like this:"

#: shell-novice/_episodes/02-filedir.md:82
msgid "![The File System](../fig/filesystem.svg)"
msgstr "![The File System](../fig/filesystem.svg)"

#: shell-novice/_episodes/02-filedir.md:84
msgid ""
"At the top is the **root directory**\n"
"that holds everything else.\n"
"We refer to it using a slash character `/` on its own;\n"
"this is the leading slash in `/Users/nelle`."
msgstr ""
"At the top is the **root directory**\n"
"that holds everything else.\n"
"We refer to it using a slash character `/` on its own;\n"
"this is the leading slash in `/Users/nelle`."

#: shell-novice/_episodes/02-filedir.md:89
msgid ""
"Inside that directory are several other directories:\n"
"`bin` (which is where some built-in programs are stored),\n"
"`data` (for miscellaneous data files),\n"
"`Users` (where users' personal directories are located),\n"
"`tmp` (for temporary files that don't need to be stored long-term),\n"
"and so on.  "
msgstr ""
"Inside that directory are several other directories:\n"
"`bin` (which is where some built-in programs are stored),\n"
"`data` (for miscellaneous data files),\n"
"`Users` (where users' personal directories are located),\n"
"`tmp` (for temporary files that don't need to be stored long-term),\n"
"and so on.  "

#: shell-novice/_episodes/02-filedir.md:96
msgid ""
"We know that our current working directory `/Users/nelle` is stored inside `/"
"Users`\n"
"because `/Users` is the first part of its name.\n"
"Similarly,\n"
"we know that `/Users` is stored inside the root directory `/`\n"
"because its name begins with `/`."
msgstr ""
"We know that our current working directory `/Users/nelle` is stored inside `/"
"Users`\n"
"because `/Users` is the first part of its name.\n"
"Similarly,\n"
"we know that `/Users` is stored inside the root directory `/`\n"
"because its name begins with `/`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:102
msgid "> ## Slashes"
msgstr "> ## Slashes"

#: shell-novice/_episodes/02-filedir.md:103
msgid ""
">\n"
"> Notice that there are two meanings for the `/` character.\n"
"> When it appears at the front of a file or directory name,\n"
"> it refers to the root directory. When it appears *inside* a name,\n"
"> it's just a separator."
msgstr ""
">\n"
"> Notice that there are two meanings for the `/` character.\n"
"> When it appears at the front of a file or directory name,\n"
"> it refers to the root directory. When it appears *inside* a name,\n"
"> it's just a separator."

#: shell-novice/_episodes/02-filedir.md:110
msgid ""
"Underneath `/Users`,\n"
"we find one directory for each user with an account on Nelle's machine,\n"
"her colleagues the Mummy and Wolfman.  "
msgstr ""
"Underneath `/Users`,\n"
"we find one directory for each user with an account on Nelle's machine,\n"
"her colleagues the Mummy and Wolfman.  "

#: shell-novice/_episodes/02-filedir.md:114
msgid "![Home Directories](../fig/home-directories.svg)"
msgstr "![Home Directories](../fig/home-directories.svg)"

#: shell-novice/_episodes/02-filedir.md:116
msgid ""
"The Mummy's files are stored in `/Users/imhotep`,\n"
"Wolfman's in `/Users/larry`,\n"
"and Nelle's in `/Users/nelle`.  Because Nelle is the user in our\n"
"examples here, this is why we get `/Users/nelle` as our home directory.  \n"
"Typically, when you open a new command prompt you will be in\n"
"your home directory to start.  "
msgstr ""
"The Mummy's files are stored in `/Users/imhotep`,\n"
"Wolfman's in `/Users/larry`,\n"
"and Nelle's in `/Users/nelle`.  Because Nelle is the user in our\n"
"examples here, this is why we get `/Users/nelle` as our home directory.  \n"
"Typically, when you open a new command prompt you will be in\n"
"your home directory to start.  "

#: shell-novice/_episodes/02-filedir.md:123
msgid ""
"Now let's learn the command that will let us see the contents of our\n"
"own filesystem.  We can see what's in our home directory by running `ls`,\n"
"which stands for \"listing\":"
msgstr ""
"Now let's learn the command that will let us see the contents of our\n"
"own filesystem.  We can see what's in our home directory by running `ls`,\n"
"which stands for \"listing\":"

# code block
#: shell-novice/_episodes/02-filedir.md:127
#: shell-novice/_episodes/03-create.md:180
#: shell-novice/_episodes/03-create.md:243
msgid ""
"~~~\n"
"$ ls\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:132
msgid ""
"~~~\n"
"Applications Documents    Library      Music        Public\n"
"Desktop      Downloads    Movies       Pictures\n"
"~~~"
msgstr ""
"~~~\n"
"Applications Documents    Library      Music        Public\n"
"Desktop      Downloads    Movies       Pictures\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:138
msgid ""
"(Again, your results may be slightly different depending on your operating\n"
"system and how you have customized your filesystem.)"
msgstr ""
"(Again, your results may be slightly different depending on your operating\n"
"system and how you have customized your filesystem.)"

#: shell-novice/_episodes/02-filedir.md:141
msgid ""
"`ls` prints the names of the files and directories in the current "
"directory. \n"
"We can make its output more comprehensible by using the **flag** `-F`\n"
"(also known as a **switch** or an **option**) ,\n"
"which tells `ls` to add a marker to file and directory names to indicate "
"what\n"
"they are. A trailing `/` indicates that this is a directory. Depending on "
"your\n"
"settings, it might also use colors to indicate whether each entry is a file "
"or \n"
"directory.\n"
"You might recall that we used `ls -F` in an earlier example."
msgstr ""
"`ls` prints the names of the files and directories in the current "
"directory. \n"
"We can make its output more comprehensible by using the **flag** `-F`\n"
"(also known as a **switch** or an **option**) ,\n"
"which tells `ls` to add a marker to file and directory names to indicate "
"what\n"
"they are. A trailing `/` indicates that this is a directory. Depending on "
"your\n"
"settings, it might also use colors to indicate whether each entry is a file "
"or \n"
"directory.\n"
"You might recall that we used `ls -F` in an earlier example."

# code block
#: shell-novice/_episodes/02-filedir.md:150
#: shell-novice/_episodes/02-filedir.md:485
#: shell-novice/_episodes/03-create.md:37
#: shell-novice/_episodes/03-create.md:61
msgid ""
"~~~\n"
"$ ls -F\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -F\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:155
msgid ""
"~~~\n"
"Applications/ Documents/    Library/      Music/        Public/\n"
"Desktop/      Downloads/    Movies/       Pictures/\n"
"~~~"
msgstr ""
"~~~\n"
"Applications/ Documents/    Library/      Music/        Public/\n"
"Desktop/      Downloads/    Movies/       Pictures/\n"
"~~~"

# header
#: shell-novice/_episodes/02-filedir.md:161
msgid "### Getting help"
msgstr "### Getting help"

#: shell-novice/_episodes/02-filedir.md:163
msgid ""
"`ls` has lots of other **flags**. There are two common ways to find out "
"how \n"
"to use a command and what flags it accepts:"
msgstr ""
"`ls` has lots of other **flags**. There are two common ways to find out "
"how \n"
"to use a command and what flags it accepts:"

# ordered list
#: shell-novice/_episodes/02-filedir.md:166
msgid "1. We can pass a `--help` flag to the command, such as:"
msgstr "1. We can pass a `--help` flag to the command, such as:"

#: shell-novice/_episodes/02-filedir.md:167
msgid ""
"    ~~~\n"
"    $ ls --help\n"
"    ~~~"
msgstr ""
"    ~~~\n"
"    $ ls --help\n"
"    ~~~"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:170
#: shell-novice/_episodes/02-filedir.md:176 shell-novice/_extras/guide.md:216
msgid "    {: .bash}"
msgstr "    {: .bash}"

# ordered list
#: shell-novice/_episodes/02-filedir.md:172
msgid "2. We can read its manual with `man`, such as:"
msgstr "2. We can read its manual with `man`, such as:"

#: shell-novice/_episodes/02-filedir.md:173
msgid ""
"    ~~~\n"
"    $ man ls \n"
"    ~~~"
msgstr ""
"    ~~~\n"
"    $ man ls \n"
"    ~~~"

#: shell-novice/_episodes/02-filedir.md:178
msgid ""
"If you use a Mac, or Git for Windows, you might find that only one of these "
"works \n"
"(probably `man` on Mac and `--help` in Windows). We'll describe both ways."
msgstr ""
"If you use a Mac, or Git for Windows, you might find that only one of these "
"works \n"
"(probably `man` on Mac and `--help` in Windows). We'll describe both ways."

#: shell-novice/_episodes/02-filedir.md:181
msgid ""
"Of course there is a third way: searching the internet via your web "
"browser. \n"
"When using internet search, including the phrase `unix man page` in your "
"search\n"
"query will help to find relevant results."
msgstr ""
"Of course there is a third way: searching the internet via your web "
"browser. \n"
"When using internet search, including the phrase `unix man page` in your "
"search\n"
"query will help to find relevant results."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:185
msgid "> ## Manual pages on the web"
msgstr "> ## Manual pages on the web"

#: shell-novice/_episodes/02-filedir.md:186
msgid ""
">\n"
"> GNU provides links to its\n"
"> [manuals](http://www.gnu.org/manual/manual.html) including the\n"
"> [core GNU utilities](http://www.gnu.org/software/coreutils/manual/"
"coreutils.html),\n"
"> which covers many commands introduced within this lesson."
msgstr ""
">\n"
"> GNU provides links to its\n"
"> [manuals](http://www.gnu.org/manual/manual.html) including the\n"
"> [core GNU utilities](http://www.gnu.org/software/coreutils/manual/"
"coreutils.html),\n"
"> which covers many commands introduced within this lesson."

# header
#: shell-novice/_episodes/02-filedir.md:193
msgid "#### The `--help` flag"
msgstr "#### The `--help` flag"

#: shell-novice/_episodes/02-filedir.md:195
msgid ""
"Many bash commands, and programs that people have written that can be\n"
"run from within bash, support a `--help` flag to display more\n"
"information on how to use the command or program."
msgstr ""
"Many bash commands, and programs that people have written that can be\n"
"run from within bash, support a `--help` flag to display more\n"
"information on how to use the command or program."

# code block
#: shell-novice/_episodes/02-filedir.md:199
msgid ""
"~~~\n"
"$ ls --help\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls --help\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:204
msgid ""
"~~~\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"\n"
"Mandatory arguments to long options are mandatory for short options too.\n"
"  -a, --all                  do not ignore entries starting with .\n"
"  -A, --almost-all           do not list implied . and ..\n"
"      --author               with -l, print the author of each file\n"
"  -b, --escape               print C-style escapes for nongraphic "
"characters\n"
"      --block-size=SIZE      scale sizes by SIZE before printing them; e."
"g.,\n"
"                               '--block-size=M' prints sizes in units of\n"
"                               1,048,576 bytes; see SIZE format below\n"
"  -B, --ignore-backups       do not list implied entries ending with ~\n"
"  -c                         with -lt: sort by, and show, ctime (time of "
"last\n"
"                               modification of file status information);\n"
"                               with -l: show ctime and sort by name;\n"
"                               otherwise: sort by ctime, newest first\n"
"  -C                         list entries by columns\n"
"      --color[=WHEN]         colorize the output; WHEN can be "
"'always' (default\n"
"                               if omitted), 'auto', or 'never'; more info "
"below\n"
"  -d, --directory            list directories themselves, not their "
"contents\n"
"  -D, --dired                generate output designed for Emacs' dired mode\n"
"  -f                         do not sort, enable -aU, disable -ls --color\n"
"  -F, --classify             append indicator (one of */=>@|) to entries\n"
"      --file-type            likewise, except do not append '*'\n"
"      --format=WORD          across -x, commas -m, horizontal -x, long -l,\n"
"                               single-column -1, verbose -l, vertical -C\n"
"      --full-time            like -l --time-style=full-iso\n"
"  -g                         like -l, but do not list owner\n"
"      --group-directories-first\n"
"                             group directories before files;\n"
"                               can be augmented with a --sort option, but "
"any\n"
"                               use of --sort=none (-U) disables grouping\n"
"  -G, --no-group             in a long listing, don't print group names\n"
"  -h, --human-readable       with -l and/or -s, print human readable sizes\n"
"                               (e.g., 1K 234M 2G)\n"
"      --si                   likewise, but use powers of 1000 not 1024\n"
"  -H, --dereference-command-line\n"
"                             follow symbolic links listed on the command "
"line\n"
"      --dereference-command-line-symlink-to-dir\n"
"                             follow each command line symbolic link\n"
"                               that points to a directory\n"
"      --hide=PATTERN         do not list implied entries matching shell "
"PATTERN\n"
"                               (overridden by -a or -A)\n"
"      --indicator-style=WORD  append indicator with style WORD to entry "
"names:\n"
"                               none (default), slash (-p),\n"
"                               file-type (--file-type), classify (-F)\n"
"  -i, --inode                print the index number of each file\n"
"  -I, --ignore=PATTERN       do not list implied entries matching shell "
"PATTERN\n"
"  -k, --kibibytes            default to 1024-byte blocks for disk usage\n"
"  -l                         use a long listing format\n"
"  -L, --dereference          when showing file information for a symbolic\n"
"                               link, show information for the file the link\n"
"                               references rather than for the link itself\n"
"  -m                         fill width with a comma separated list of "
"entries\n"
"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\n"
"  -N, --literal              print raw entry names (don't treat e.g. "
"control\n"
"                               characters specially)\n"
"  -o                         like -l, but do not list group information\n"
"  -p, --indicator-style=slash\n"
"                             append / indicator to directories\n"
"  -q, --hide-control-chars   print ? instead of nongraphic characters\n"
"      --show-control-chars   show nongraphic characters as-is (the default,\n"
"                               unless program is 'ls' and output is a "
"terminal)\n"
"  -Q, --quote-name           enclose entry names in double quotes\n"
"      --quoting-style=WORD   use quoting style WORD for entry names:\n"
"                               literal, locale, shell, shell-always,\n"
"                               shell-escape, shell-escape-always, c, escape\n"
"  -r, --reverse              reverse order while sorting\n"
"  -R, --recursive            list subdirectories recursively\n"
"  -s, --size                 print the allocated size of each file, in "
"blocks\n"
"  -S                         sort by file size, largest first\n"
"      --sort=WORD            sort by WORD instead of name: none (-U), size (-"
"S),\n"
"                               time (-t), version (-v), extension (-X)\n"
"      --time=WORD            with -l, show time as WORD instead of default\n"
"                               modification time: atime or access or use (-"
"u);\n"
"                               ctime or status (-c); also use specified "
"time\n"
"                               as sort key if --sort=time (newest first)\n"
"      --time-style=STYLE     with -l, show times using style STYLE:\n"
"                               full-iso, long-iso, iso, locale, or +FORMAT;\n"
"                               FORMAT is interpreted like in 'date'; if "
"FORMAT\n"
"                               is FORMAT1<newline>FORMAT2, then FORMAT1 "
"applies\n"
"                               to non-recent files and FORMAT2 to recent "
"files;\n"
"                               if STYLE is prefixed with 'posix-', STYLE\n"
"                               takes effect only outside the POSIX locale\n"
"  -t                         sort by modification time, newest first\n"
"  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\n"
"  -u                         with -lt: sort by, and show, access time;\n"
"                               with -l: show access time and sort by name;\n"
"                               otherwise: sort by access time, newest first\n"
"  -U                         do not sort; list entries in directory order\n"
"  -v                         natural sort of (version) numbers within text\n"
"  -w, --width=COLS           set output width to COLS.  0 means no limit\n"
"  -x                         list entries by lines instead of by columns\n"
"  -X                         sort alphabetically by entry extension\n"
"  -Z, --context              print any security context of each file\n"
"  -1                         list one file per line.  Avoid '\\n' with -q or "
"-b\n"
"      --help     display this help and exit\n"
"      --version  output version information and exit\n"
"\n"
"The SIZE argument is an integer and optional unit (example: 10K is "
"10*1024).\n"
"Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\n"
"\n"
"Using color to distinguish file types is disabled both by default and\n"
"with --color=never.  With --color=auto, ls emits color codes only when\n"
"standard output is connected to a terminal.  The LS_COLORS environment\n"
"variable can change the settings.  Use the dircolors command to set it.\n"
"\n"
"Exit status:\n"
" 0  if OK,\n"
" 1  if minor problems (e.g., cannot access subdirectory),\n"
" 2  if serious trouble (e.g., cannot access command-line argument).\n"
"\n"
"GNU coreutils online help: <http://www.gnu.org/software/coreutils/>\n"
"Full documentation at: <http://www.gnu.org/software/coreutils/ls>\n"
"or available locally via: info '(coreutils) ls invocation'\n"
"~~~"
msgstr ""
"~~~\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"\n"
"Mandatory arguments to long options are mandatory for short options too.\n"
"  -a, --all                  do not ignore entries starting with .\n"
"  -A, --almost-all           do not list implied . and ..\n"
"      --author               with -l, print the author of each file\n"
"  -b, --escape               print C-style escapes for nongraphic "
"characters\n"
"      --block-size=SIZE      scale sizes by SIZE before printing them; e."
"g.,\n"
"                               '--block-size=M' prints sizes in units of\n"
"                               1,048,576 bytes; see SIZE format below\n"
"  -B, --ignore-backups       do not list implied entries ending with ~\n"
"  -c                         with -lt: sort by, and show, ctime (time of "
"last\n"
"                               modification of file status information);\n"
"                               with -l: show ctime and sort by name;\n"
"                               otherwise: sort by ctime, newest first\n"
"  -C                         list entries by columns\n"
"      --color[=WHEN]         colorize the output; WHEN can be "
"'always' (default\n"
"                               if omitted), 'auto', or 'never'; more info "
"below\n"
"  -d, --directory            list directories themselves, not their "
"contents\n"
"  -D, --dired                generate output designed for Emacs' dired mode\n"
"  -f                         do not sort, enable -aU, disable -ls --color\n"
"  -F, --classify             append indicator (one of */=>@|) to entries\n"
"      --file-type            likewise, except do not append '*'\n"
"      --format=WORD          across -x, commas -m, horizontal -x, long -l,\n"
"                               single-column -1, verbose -l, vertical -C\n"
"      --full-time            like -l --time-style=full-iso\n"
"  -g                         like -l, but do not list owner\n"
"      --group-directories-first\n"
"                             group directories before files;\n"
"                               can be augmented with a --sort option, but "
"any\n"
"                               use of --sort=none (-U) disables grouping\n"
"  -G, --no-group             in a long listing, don't print group names\n"
"  -h, --human-readable       with -l and/or -s, print human readable sizes\n"
"                               (e.g., 1K 234M 2G)\n"
"      --si                   likewise, but use powers of 1000 not 1024\n"
"  -H, --dereference-command-line\n"
"                             follow symbolic links listed on the command "
"line\n"
"      --dereference-command-line-symlink-to-dir\n"
"                             follow each command line symbolic link\n"
"                               that points to a directory\n"
"      --hide=PATTERN         do not list implied entries matching shell "
"PATTERN\n"
"                               (overridden by -a or -A)\n"
"      --indicator-style=WORD  append indicator with style WORD to entry "
"names:\n"
"                               none (default), slash (-p),\n"
"                               file-type (--file-type), classify (-F)\n"
"  -i, --inode                print the index number of each file\n"
"  -I, --ignore=PATTERN       do not list implied entries matching shell "
"PATTERN\n"
"  -k, --kibibytes            default to 1024-byte blocks for disk usage\n"
"  -l                         use a long listing format\n"
"  -L, --dereference          when showing file information for a symbolic\n"
"                               link, show information for the file the link\n"
"                               references rather than for the link itself\n"
"  -m                         fill width with a comma separated list of "
"entries\n"
"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\n"
"  -N, --literal              print raw entry names (don't treat e.g. "
"control\n"
"                               characters specially)\n"
"  -o                         like -l, but do not list group information\n"
"  -p, --indicator-style=slash\n"
"                             append / indicator to directories\n"
"  -q, --hide-control-chars   print ? instead of nongraphic characters\n"
"      --show-control-chars   show nongraphic characters as-is (the default,\n"
"                               unless program is 'ls' and output is a "
"terminal)\n"
"  -Q, --quote-name           enclose entry names in double quotes\n"
"      --quoting-style=WORD   use quoting style WORD for entry names:\n"
"                               literal, locale, shell, shell-always,\n"
"                               shell-escape, shell-escape-always, c, escape\n"
"  -r, --reverse              reverse order while sorting\n"
"  -R, --recursive            list subdirectories recursively\n"
"  -s, --size                 print the allocated size of each file, in "
"blocks\n"
"  -S                         sort by file size, largest first\n"
"      --sort=WORD            sort by WORD instead of name: none (-U), size (-"
"S),\n"
"                               time (-t), version (-v), extension (-X)\n"
"      --time=WORD            with -l, show time as WORD instead of default\n"
"                               modification time: atime or access or use (-"
"u);\n"
"                               ctime or status (-c); also use specified "
"time\n"
"                               as sort key if --sort=time (newest first)\n"
"      --time-style=STYLE     with -l, show times using style STYLE:\n"
"                               full-iso, long-iso, iso, locale, or +FORMAT;\n"
"                               FORMAT is interpreted like in 'date'; if "
"FORMAT\n"
"                               is FORMAT1<newline>FORMAT2, then FORMAT1 "
"applies\n"
"                               to non-recent files and FORMAT2 to recent "
"files;\n"
"                               if STYLE is prefixed with 'posix-', STYLE\n"
"                               takes effect only outside the POSIX locale\n"
"  -t                         sort by modification time, newest first\n"
"  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\n"
"  -u                         with -lt: sort by, and show, access time;\n"
"                               with -l: show access time and sort by name;\n"
"                               otherwise: sort by access time, newest first\n"
"  -U                         do not sort; list entries in directory order\n"
"  -v                         natural sort of (version) numbers within text\n"
"  -w, --width=COLS           set output width to COLS.  0 means no limit\n"
"  -x                         list entries by lines instead of by columns\n"
"  -X                         sort alphabetically by entry extension\n"
"  -Z, --context              print any security context of each file\n"
"  -1                         list one file per line.  Avoid '\\n' with -q or "
"-b\n"
"      --help     display this help and exit\n"
"      --version  output version information and exit\n"
"\n"
"The SIZE argument is an integer and optional unit (example: 10K is "
"10*1024).\n"
"Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\n"
"\n"
"Using color to distinguish file types is disabled both by default and\n"
"with --color=never.  With --color=auto, ls emits color codes only when\n"
"standard output is connected to a terminal.  The LS_COLORS environment\n"
"variable can change the settings.  Use the dircolors command to set it.\n"
"\n"
"Exit status:\n"
" 0  if OK,\n"
" 1  if minor problems (e.g., cannot access subdirectory),\n"
" 2  if serious trouble (e.g., cannot access command-line argument).\n"
"\n"
"GNU coreutils online help: <http://www.gnu.org/software/coreutils/>\n"
"Full documentation at: <http://www.gnu.org/software/coreutils/ls>\n"
"or available locally via: info '(coreutils) ls invocation'\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:324
msgid "> ## Unsupported command-line options"
msgstr "> ## Unsupported command-line options"

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:325
msgid ""
"> If you try to use an option (flag) that is not supported, `ls` and other "
"programs"
msgstr ""
"> If you try to use an option (flag) that is not supported, `ls` and other "
"programs"

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:326
msgid "> will usually print an error message similar to this:"
msgstr "> will usually print an error message similar to this:"

#: shell-novice/_episodes/02-filedir.md:327
msgid ""
">\n"
"> ~~~\n"
"> $ ls -j\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> ~~~\n"
"> ls: invalid option -- 'j'\n"
"> Try 'ls --help' for more information.\n"
"> ~~~"
msgstr ""
">\n"
"> ~~~\n"
"> $ ls -j\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> ~~~\n"
"> ls: invalid option -- 'j'\n"
"> Try 'ls --help' for more information.\n"
"> ~~~"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:337
msgid "> {: .error}"
msgstr "> {: .error}"

# header
#: shell-novice/_episodes/02-filedir.md:340
msgid "#### The `man` command"
msgstr "#### The `man` command"

#: shell-novice/_episodes/02-filedir.md:342
msgid ""
"The other way to learn about `ls` is to type \n"
"~~~\n"
"$ man ls\n"
"~~~"
msgstr ""
"The other way to learn about `ls` is to type \n"
"~~~\n"
"$ man ls\n"
"~~~"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:346
msgid "{: .bash}"
msgstr "{: .bash}"

#: shell-novice/_episodes/02-filedir.md:348
msgid ""
"This will turn your terminal into a page with a description \n"
"of the `ls` command and its options and, if you're lucky, some examples\n"
"of how to use it."
msgstr ""
"This will turn your terminal into a page with a description \n"
"of the `ls` command and its options and, if you're lucky, some examples\n"
"of how to use it."

#: shell-novice/_episodes/02-filedir.md:352
msgid ""
"To navigate through the `man` pages,\n"
"you may use the up and down arrow keys to move line-by-line,\n"
"or try the \"b\" and spacebar keys to skip up and down by a full page.\n"
"To search for a character or word in the `man` pages, \n"
"use \"/\" followed by the character or word you are searching for. "
msgstr ""
"To navigate through the `man` pages,\n"
"you may use the up and down arrow keys to move line-by-line,\n"
"or try the \"b\" and spacebar keys to skip up and down by a full page.\n"
"To search for a character or word in the `man` pages, \n"
"use \"/\" followed by the character or word you are searching for. "

#: shell-novice/_episodes/02-filedir.md:358
msgid "To **quit** the `man` pages, press `q`. "
msgstr "To **quit** the `man` pages, press `q`. "

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:361
msgid "> ## Exploring More `ls` Flags"
msgstr "> ## Exploring More `ls` Flags"

#: shell-novice/_episodes/02-filedir.md:362
msgid ""
">\n"
"> What does the command `ls` do when used with the `-l` and `-h` flags?\n"
">\n"
"> Some of its output is about properties that we do not cover in this lesson "
"(such\n"
"> as file permissions and ownership), but the rest should be useful\n"
"> nevertheless.\n"
">\n"
"> > ## Solution\n"
"> > The `-l` flag makes `ls` use a **l**ong listing format, showing not "
"only\n"
"> > the file/directory names but also additional information such as the "
"file size\n"
"> > and the time of its last modification. The `-h` flag makes the file "
"size\n"
"> > \"**h**uman readable\", i.e. display something like `5.3K` instead of "
"`5369`."
msgstr ""
">\n"
"> What does the command `ls` do when used with the `-l` and `-h` flags?\n"
">\n"
"> Some of its output is about properties that we do not cover in this lesson "
"(such\n"
"> as file permissions and ownership), but the rest should be useful\n"
"> nevertheless.\n"
">\n"
"> > ## Solution\n"
"> > The `-l` flag makes `ls` use a **l**ong listing format, showing not "
"only\n"
"> > the file/directory names but also additional information such as the "
"file size\n"
"> > and the time of its last modification. The `-h` flag makes the file "
"size\n"
"> > \"**h**uman readable\", i.e. display something like `5.3K` instead of "
"`5369`."

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:374
#: shell-novice/_episodes/02-filedir.md:388
#: shell-novice/_episodes/02-filedir.md:707
#: shell-novice/_episodes/02-filedir.md:728
#: shell-novice/_episodes/02-filedir.md:754
#: shell-novice/_episodes/03-create.md:226
#: shell-novice/_episodes/03-create.md:324
#: shell-novice/_episodes/03-create.md:471
#: shell-novice/_episodes/03-create.md:555
#: shell-novice/_episodes/03-create.md:604
#: shell-novice/_episodes/03-create.md:650
#: shell-novice/_episodes/03-create.md:691
#: shell-novice/_episodes/03-create.md:740
#: shell-novice/_episodes/04-pipefilter.md:128
#: shell-novice/_episodes/04-pipefilter.md:173
#: shell-novice/_episodes/04-pipefilter.md:268
#: shell-novice/_episodes/04-pipefilter.md:345
#: shell-novice/_episodes/04-pipefilter.md:488
#: shell-novice/_episodes/04-pipefilter.md:609
#: shell-novice/_episodes/04-pipefilter.md:646
#: shell-novice/_episodes/04-pipefilter.md:707
#: shell-novice/_episodes/04-pipefilter.md:738
#: shell-novice/_episodes/04-pipefilter.md:865
#: shell-novice/_episodes/04-pipefilter.md:889
#: shell-novice/_episodes/05-loop.md:186 shell-novice/_episodes/05-loop.md:261
#: shell-novice/_episodes/05-loop.md:282 shell-novice/_episodes/05-loop.md:606
#: shell-novice/_episodes/05-loop.md:633 shell-novice/_episodes/05-loop.md:685
#: shell-novice/_episodes/05-loop.md:712
#: shell-novice/_episodes/06-script.md:312
#: shell-novice/_episodes/06-script.md:387
#: shell-novice/_episodes/06-script.md:496
#: shell-novice/_episodes/06-script.md:526
#: shell-novice/_episodes/06-script.md:570
#: shell-novice/_episodes/06-script.md:612
#: shell-novice/_episodes/07-find.md:252 shell-novice/_episodes/07-find.md:341
#: shell-novice/_episodes/07-find.md:385 shell-novice/_episodes/07-find.md:608
#: shell-novice/_episodes/07-find.md:660 shell-novice/_episodes/07-find.md:682
msgid "> {: .solution}"
msgstr "> {: .solution}"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:375
#: shell-novice/_episodes/02-filedir.md:389
#: shell-novice/_episodes/02-filedir.md:708
#: shell-novice/_episodes/02-filedir.md:729
#: shell-novice/_episodes/02-filedir.md:755
#: shell-novice/_episodes/03-create.md:227
#: shell-novice/_episodes/03-create.md:325
#: shell-novice/_episodes/03-create.md:472
#: shell-novice/_episodes/03-create.md:556
#: shell-novice/_episodes/03-create.md:605
#: shell-novice/_episodes/03-create.md:651
#: shell-novice/_episodes/03-create.md:692
#: shell-novice/_episodes/03-create.md:741
#: shell-novice/_episodes/04-pipefilter.md:129
#: shell-novice/_episodes/04-pipefilter.md:174
#: shell-novice/_episodes/04-pipefilter.md:244
#: shell-novice/_episodes/04-pipefilter.md:269
#: shell-novice/_episodes/04-pipefilter.md:346
#: shell-novice/_episodes/04-pipefilter.md:489
#: shell-novice/_episodes/04-pipefilter.md:610
#: shell-novice/_episodes/04-pipefilter.md:647
#: shell-novice/_episodes/04-pipefilter.md:672
#: shell-novice/_episodes/04-pipefilter.md:708
#: shell-novice/_episodes/04-pipefilter.md:739
#: shell-novice/_episodes/04-pipefilter.md:866
#: shell-novice/_episodes/04-pipefilter.md:890
#: shell-novice/_episodes/05-loop.md:187 shell-novice/_episodes/05-loop.md:283
#: shell-novice/_episodes/05-loop.md:607 shell-novice/_episodes/05-loop.md:634
#: shell-novice/_episodes/05-loop.md:686 shell-novice/_episodes/05-loop.md:713
#: shell-novice/_episodes/06-script.md:313
#: shell-novice/_episodes/06-script.md:388
#: shell-novice/_episodes/06-script.md:497
#: shell-novice/_episodes/06-script.md:527
#: shell-novice/_episodes/06-script.md:571
#: shell-novice/_episodes/06-script.md:613
#: shell-novice/_episodes/07-find.md:253 shell-novice/_episodes/07-find.md:342
#: shell-novice/_episodes/07-find.md:386 shell-novice/_episodes/07-find.md:609
#: shell-novice/_episodes/07-find.md:661 shell-novice/_episodes/07-find.md:683
msgid "{: .challenge}"
msgstr "{: .challenge}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:377
msgid "> ## Listing Recursively and By Time"
msgstr "> ## Listing Recursively and By Time"

#: shell-novice/_episodes/02-filedir.md:378
msgid ""
">\n"
"> The command `ls -R` lists the contents of directories recursively, i.e., "
"lists\n"
"> their sub-directories, sub-sub-directories, and so on at each level. The "
"command\n"
"> `ls -t` lists things by time of last change, with most recently changed "
"files or\n"
"> directories first.\n"
"> In what order does `ls -R -t` display things? Hint: `ls -l` uses a long "
"listing\n"
"> format to view timestamps.\n"
">\n"
"> > ## Solution\n"
"> > The files/directories in each directory are sorted by time of last "
"change."
msgstr ""
">\n"
"> The command `ls -R` lists the contents of directories recursively, i.e., "
"lists\n"
"> their sub-directories, sub-sub-directories, and so on at each level. The "
"command\n"
"> `ls -t` lists things by time of last change, with most recently changed "
"files or\n"
"> directories first.\n"
"> In what order does `ls -R -t` display things? Hint: `ls -l` uses a long "
"listing\n"
"> format to view timestamps.\n"
">\n"
"> > ## Solution\n"
"> > The files/directories in each directory are sorted by time of last "
"change."

#: shell-novice/_episodes/02-filedir.md:391
msgid ""
"Here,\n"
"we can see that our home directory contains mostly **sub-directories**.\n"
"Any names in your output that don't have trailing slashes,\n"
"are plain old **files**.\n"
"And note that there is a space between `ls` and `-F`:\n"
"without it,\n"
"the shell thinks we're trying to run a command called `ls-F`,\n"
"which doesn't exist."
msgstr ""
"Here,\n"
"we can see that our home directory contains mostly **sub-directories**.\n"
"Any names in your output that don't have trailing slashes,\n"
"are plain old **files**.\n"
"And note that there is a space between `ls` and `-F`:\n"
"without it,\n"
"the shell thinks we're trying to run a command called `ls-F`,\n"
"which doesn't exist."

#: shell-novice/_episodes/02-filedir.md:400
msgid ""
"We can also use `ls` to see the contents of a different directory.  Let's "
"take a\n"
"look at our `Desktop` directory by running `ls -F Desktop`,\n"
"i.e.,\n"
"the command `ls` with the `-F` **flag** and the **argument**  `Desktop`.\n"
"The argument `Desktop` tells `ls` that\n"
"we want a listing of something other than our current working directory:"
msgstr ""
"We can also use `ls` to see the contents of a different directory.  Let's "
"take a\n"
"look at our `Desktop` directory by running `ls -F Desktop`,\n"
"i.e.,\n"
"the command `ls` with the `-F` **flag** and the **argument**  `Desktop`.\n"
"The argument `Desktop` tells `ls` that\n"
"we want a listing of something other than our current working directory:"

# code block
#: shell-novice/_episodes/02-filedir.md:407
msgid ""
"~~~\n"
"$ ls -F Desktop\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -F Desktop\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:412
msgid ""
"~~~\n"
"data-shell/\n"
"~~~"
msgstr ""
"~~~\n"
"data-shell/\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:417
msgid ""
"Your output should be a list of all the files and sub-directories on your\n"
"Desktop, including the `data-shell` directory you downloaded at\n"
"the start of the lesson.  Take a look at your Desktop to confirm that\n"
"your output is accurate.  "
msgstr ""
"Your output should be a list of all the files and sub-directories on your\n"
"Desktop, including the `data-shell` directory you downloaded at\n"
"the start of the lesson.  Take a look at your Desktop to confirm that\n"
"your output is accurate.  "

#: shell-novice/_episodes/02-filedir.md:422
msgid ""
"As you may now see, using a bash shell is strongly dependent on the idea "
"that\n"
"your files are organized in a hierarchical file system.\n"
"Organizing things hierarchically in this way helps us keep track of our "
"work:\n"
"it's possible to put hundreds of files in our home directory,\n"
"just as it's possible to pile hundreds of printed papers on our desk,\n"
"but it's a self-defeating strategy."
msgstr ""
"As you may now see, using a bash shell is strongly dependent on the idea "
"that\n"
"your files are organized in a hierarchical file system.\n"
"Organizing things hierarchically in this way helps us keep track of our "
"work:\n"
"it's possible to put hundreds of files in our home directory,\n"
"just as it's possible to pile hundreds of printed papers on our desk,\n"
"but it's a self-defeating strategy."

#: shell-novice/_episodes/02-filedir.md:429
msgid ""
"Now that we know the `data-shell` directory is located on our Desktop, we\n"
"can do two things.  "
msgstr ""
"Now that we know the `data-shell` directory is located on our Desktop, we\n"
"can do two things.  "

#: shell-novice/_episodes/02-filedir.md:432
msgid ""
"First, we can look at its contents, using the same strategy as before, "
"passing\n"
"a directory name to `ls`:"
msgstr ""
"First, we can look at its contents, using the same strategy as before, "
"passing\n"
"a directory name to `ls`:"

# code block
#: shell-novice/_episodes/02-filedir.md:435
msgid ""
"~~~\n"
"$ ls -F Desktop/data-shell\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -F Desktop/data-shell\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:440
msgid ""
"~~~\n"
"creatures/          molecules/          notes.txt           solar.pdf\n"
"data/               north-pacific-gyre/ pizza.cfg           writing/\n"
"~~~"
msgstr ""
"~~~\n"
"creatures/          molecules/          notes.txt           solar.pdf\n"
"data/               north-pacific-gyre/ pizza.cfg           writing/\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:446
msgid ""
"Second, we can actually change our location to a different directory, so\n"
"we are no longer located in\n"
"our home directory.  "
msgstr ""
"Second, we can actually change our location to a different directory, so\n"
"we are no longer located in\n"
"our home directory.  "

#: shell-novice/_episodes/02-filedir.md:450
msgid ""
"The command to change locations is `cd` followed by a\n"
"directory name to change our working directory.\n"
"`cd` stands for \"change directory\",\n"
"which is a bit misleading:\n"
"the command doesn't change the directory,\n"
"it changes the shell's idea of what directory we are in."
msgstr ""
"The command to change locations is `cd` followed by a\n"
"directory name to change our working directory.\n"
"`cd` stands for \"change directory\",\n"
"which is a bit misleading:\n"
"the command doesn't change the directory,\n"
"it changes the shell's idea of what directory we are in."

#: shell-novice/_episodes/02-filedir.md:457
msgid ""
"Let's say we want to move to the `data` directory we saw above.  We can\n"
"use the following series of commands to get there:"
msgstr ""
"Let's say we want to move to the `data` directory we saw above.  We can\n"
"use the following series of commands to get there:"

# code block
#: shell-novice/_episodes/02-filedir.md:460
msgid ""
"~~~\n"
"$ cd Desktop\n"
"$ cd data-shell\n"
"$ cd data\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd Desktop\n"
"$ cd data-shell\n"
"$ cd data\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:467
msgid ""
"These commands will move us from our home directory onto our Desktop, then "
"into\n"
"the `data-shell` directory, then into the `data` directory.  `cd` doesn't "
"print anything,\n"
"but if we run `pwd` after it, we can see that we are now\n"
"in `/Users/nelle/Desktop/data-shell/data`.\n"
"If we run `ls` without arguments now,\n"
"it lists the contents of `/Users/nelle/Desktop/data-shell/data`,\n"
"because that's where we now are:"
msgstr ""
"These commands will move us from our home directory onto our Desktop, then "
"into\n"
"the `data-shell` directory, then into the `data` directory.  `cd` doesn't "
"print anything,\n"
"but if we run `pwd` after it, we can see that we are now\n"
"in `/Users/nelle/Desktop/data-shell/data`.\n"
"If we run `ls` without arguments now,\n"
"it lists the contents of `/Users/nelle/Desktop/data-shell/data`,\n"
"because that's where we now are:"

# code block
#: shell-novice/_episodes/02-filedir.md:480
#: shell-novice/_episodes/02-filedir.md:653
msgid ""
"~~~\n"
"/Users/nelle/Desktop/data-shell/data\n"
"~~~"
msgstr ""
"~~~\n"
"/Users/nelle/Desktop/data-shell/data\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:490
msgid ""
"~~~\n"
"amino-acids.txt   elements/     pdb/\t        salmon.txt\n"
"animals.txt       morse.txt     planets.txt     sunspot.txt\n"
"~~~"
msgstr ""
"~~~\n"
"amino-acids.txt   elements/     pdb/\t        salmon.txt\n"
"animals.txt       morse.txt     planets.txt     sunspot.txt\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:496
msgid ""
"We now know how to go down the directory tree, but\n"
"how do we go up?  We might try the following:"
msgstr ""
"We now know how to go down the directory tree, but\n"
"how do we go up?  We might try the following:"

# code block
#: shell-novice/_episodes/02-filedir.md:499
msgid ""
"~~~\n"
"$ cd data-shell\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd data-shell\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:504
msgid ""
"~~~\n"
"-bash: cd: data-shell: No such file or directory\n"
"~~~"
msgstr ""
"~~~\n"
"-bash: cd: data-shell: No such file or directory\n"
"~~~"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:507
#: shell-novice/_episodes/03-create.md:299
#: shell-novice/_episodes/03-create.md:505 shell-novice/_episodes/05-loop.md:53
msgid "{: .error}"
msgstr "{: .error}"

#: shell-novice/_episodes/02-filedir.md:509
msgid "But we get an error!  Why is this?  "
msgstr "But we get an error!  Why is this?  "

#: shell-novice/_episodes/02-filedir.md:511
msgid ""
"With our methods so far,\n"
"`cd` can only see sub-directories inside your current directory.  There are\n"
"different ways to see directories above your current location; we'll start\n"
"with the simplest.  "
msgstr ""
"With our methods so far,\n"
"`cd` can only see sub-directories inside your current directory.  There are\n"
"different ways to see directories above your current location; we'll start\n"
"with the simplest.  "

#: shell-novice/_episodes/02-filedir.md:516
msgid ""
"There is a shortcut in the shell to move up one directory level\n"
"that looks like this:"
msgstr ""
"There is a shortcut in the shell to move up one directory level\n"
"that looks like this:"

# code block
#: shell-novice/_episodes/02-filedir.md:519
#: shell-novice/_episodes/03-create.md:283
msgid ""
"~~~\n"
"$ cd ..\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ..\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:524
msgid ""
"`..` is a special directory name meaning\n"
"\"the directory containing this one\",\n"
"or more succinctly,\n"
"the **parent** of the current directory.\n"
"Sure enough,\n"
"if we run `pwd` after running `cd ..`, we're back in `/Users/nelle/Desktop/"
"data-shell`:"
msgstr ""
"`..` is a special directory name meaning\n"
"\"the directory containing this one\",\n"
"or more succinctly,\n"
"the **parent** of the current directory.\n"
"Sure enough,\n"
"if we run `pwd` after running `cd ..`, we're back in `/Users/nelle/Desktop/"
"data-shell`:"

# code block
#: shell-novice/_episodes/02-filedir.md:536
#: shell-novice/_episodes/03-create.md:32
#: shell-novice/_episodes/03-create.md:355
msgid ""
"~~~\n"
"/Users/nelle/Desktop/data-shell\n"
"~~~"
msgstr ""
"~~~\n"
"/Users/nelle/Desktop/data-shell\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:541
msgid ""
"The special directory `..` doesn't usually show up when we run `ls`.  If we "
"want\n"
"to display it, we can give `ls` the `-a` flag:"
msgstr ""
"The special directory `..` doesn't usually show up when we run `ls`.  If we "
"want\n"
"to display it, we can give `ls` the `-a` flag:"

# code block
#: shell-novice/_episodes/02-filedir.md:544
msgid ""
"~~~\n"
"$ ls -F -a\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -F -a\n"
"~~~"

# code block
#: shell-novice/_episodes/02-filedir.md:549
msgid ""
"~~~\n"
"./   .bash_profile  data/       north-pacific-gyre/  pizza.cfg  thesis/\n"
"../  creatures/     molecules/  notes.txt            solar.pdf  writing/\n"
"~~~"
msgstr ""
"~~~\n"
"./   .bash_profile  data/       north-pacific-gyre/  pizza.cfg  thesis/\n"
"../  creatures/     molecules/  notes.txt            solar.pdf  writing/\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:555
msgid ""
"`-a` stands for \"show all\";\n"
"it forces `ls` to show us file and directory names that begin with `.`,\n"
"such as `..` (which, if we're in `/Users/nelle`, refers to the `/Users` "
"directory)\n"
"As you can see,\n"
"it also displays another special directory that's just called `.`,\n"
"which means \"the current working directory\".\n"
"It may seem redundant to have a name for it,\n"
"but we'll see some uses for it soon."
msgstr ""
"`-a` stands for \"show all\";\n"
"it forces `ls` to show us file and directory names that begin with `.`,\n"
"such as `..` (which, if we're in `/Users/nelle`, refers to the `/Users` "
"directory)\n"
"As you can see,\n"
"it also displays another special directory that's just called `.`,\n"
"which means \"the current working directory\".\n"
"It may seem redundant to have a name for it,\n"
"but we'll see some uses for it soon."

#: shell-novice/_episodes/02-filedir.md:564
msgid ""
"Note that in most command line tools, multiple flags can be combined \n"
"with a single `-` and no spaces between the flags: `ls -F -a` is \n"
"equivalent to `ls -Fa`."
msgstr ""
"Note that in most command line tools, multiple flags can be combined \n"
"with a single `-` and no spaces between the flags: `ls -F -a` is \n"
"equivalent to `ls -Fa`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:568
msgid "> ## Other Hidden Files"
msgstr "> ## Other Hidden Files"

#: shell-novice/_episodes/02-filedir.md:569
msgid ""
">\n"
"> In addition to the hidden directories `..` and `.`, you may also see a "
"file\n"
"> called `.bash_profile`. This file usually contains shell configuration\n"
"> settings. You may also see other files and directories beginning\n"
"> with `.`. These are usually files and directories that are used to "
"configure\n"
"> different programs on your computer. The prefix `.` is used to prevent "
"these\n"
"> configuration files from cluttering the terminal when a standard `ls` "
"command\n"
"> is used."
msgstr ""
">\n"
"> In addition to the hidden directories `..` and `.`, you may also see a "
"file\n"
"> called `.bash_profile`. This file usually contains shell configuration\n"
"> settings. You may also see other files and directories beginning\n"
"> with `.`. These are usually files and directories that are used to "
"configure\n"
"> different programs on your computer. The prefix `.` is used to prevent "
"these\n"
"> configuration files from cluttering the terminal when a standard `ls` "
"command\n"
"> is used."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:579
msgid "> ## Orthogonality"
msgstr "> ## Orthogonality"

#: shell-novice/_episodes/02-filedir.md:580
msgid ""
">\n"
"> The special names `.` and `..` don't belong to `cd`;\n"
"> they are interpreted the same way by every program.\n"
"> For example,\n"
"> if we are in `/Users/nelle/data`,\n"
"> the command `ls ..` will give us a listing of `/Users/nelle`.\n"
"> When the meanings of the parts are the same no matter how they're "
"combined,\n"
"> programmers say they are **orthogonal**:\n"
"> Orthogonal systems tend to be easier for people to learn\n"
"> because there are fewer special cases and exceptions to keep track of."
msgstr ""
">\n"
"> The special names `.` and `..` don't belong to `cd`;\n"
"> they are interpreted the same way by every program.\n"
"> For example,\n"
"> if we are in `/Users/nelle/data`,\n"
"> the command `ls ..` will give us a listing of `/Users/nelle`.\n"
"> When the meanings of the parts are the same no matter how they're "
"combined,\n"
"> programmers say they are **orthogonal**:\n"
"> Orthogonal systems tend to be easier for people to learn\n"
"> because there are fewer special cases and exceptions to keep track of."

#: shell-novice/_episodes/02-filedir.md:592
msgid ""
"These then, are the basic commands for navigating the filesystem on your "
"computer:\n"
"`pwd`, `ls` and `cd`.  Let's explore some variations on those commands.  "
"What happens\n"
"if you type `cd` on its own, without giving\n"
"a directory?  "
msgstr ""
"These then, are the basic commands for navigating the filesystem on your "
"computer:\n"
"`pwd`, `ls` and `cd`.  Let's explore some variations on those commands.  "
"What happens\n"
"if you type `cd` on its own, without giving\n"
"a directory?  "

# code block
#: shell-novice/_episodes/02-filedir.md:597
msgid ""
"~~~\n"
"$ cd\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:602
msgid "How can you check what happened?  `pwd` gives us the answer!  "
msgstr "How can you check what happened?  `pwd` gives us the answer!  "

#: shell-novice/_episodes/02-filedir.md:614
msgid ""
"It turns out that `cd` without an argument will return you to your home "
"directory,\n"
"which is great if you've gotten lost in your own filesystem.  "
msgstr ""
"It turns out that `cd` without an argument will return you to your home "
"directory,\n"
"which is great if you've gotten lost in your own filesystem.  "

#: shell-novice/_episodes/02-filedir.md:617
msgid ""
"Let's try returning to the `data` directory from before.  Last time, we "
"used\n"
"three commands, but we can actually string together the list of directories\n"
"to move to `data` in one step:"
msgstr ""
"Let's try returning to the `data` directory from before.  Last time, we "
"used\n"
"three commands, but we can actually string together the list of directories\n"
"to move to `data` in one step:"

# code block
#: shell-novice/_episodes/02-filedir.md:621
msgid ""
"~~~\n"
"$ cd Desktop/data-shell/data\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd Desktop/data-shell/data\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:626
msgid ""
"Check that we've moved to the right place by running `pwd` and `ls -F`  "
msgstr ""
"Check that we've moved to the right place by running `pwd` and `ls -F`  "

#: shell-novice/_episodes/02-filedir.md:628
msgid ""
"If we want to move up one level from the data directory, we could use `cd .."
"`.  But\n"
"there is another way to move to any directory, regardless of your\n"
"current location.  "
msgstr ""
"If we want to move up one level from the data directory, we could use `cd .."
"`.  But\n"
"there is another way to move to any directory, regardless of your\n"
"current location.  "

#: shell-novice/_episodes/02-filedir.md:632
msgid ""
"So far, when specifying directory names, or even a directory path (as "
"above),\n"
"we have been using **relative paths**.  When you use a relative path with a "
"command\n"
"like `ls` or `cd`, it tries to find that location  from where we are,\n"
"rather than from the root of the file system.  "
msgstr ""
"So far, when specifying directory names, or even a directory path (as "
"above),\n"
"we have been using **relative paths**.  When you use a relative path with a "
"command\n"
"like `ls` or `cd`, it tries to find that location  from where we are,\n"
"rather than from the root of the file system.  "

#: shell-novice/_episodes/02-filedir.md:637
msgid ""
"However, it is possible to specify the **absolute path** to a directory by\n"
"including its entire path from the root directory, which is indicated by a\n"
"leading slash.  The leading `/` tells the computer to follow the path from\n"
"the root of the file system, so it always refers to exactly one directory,\n"
"no matter where we are when we run the command."
msgstr ""
"However, it is possible to specify the **absolute path** to a directory by\n"
"including its entire path from the root directory, which is indicated by a\n"
"leading slash.  The leading `/` tells the computer to follow the path from\n"
"the root of the file system, so it always refers to exactly one directory,\n"
"no matter where we are when we run the command."

#: shell-novice/_episodes/02-filedir.md:643
msgid ""
"This allows us to move to our `data-shell` directory from anywhere on\n"
"the filesystem (including from inside `data`).  To find the absolute path\n"
"we're looking for, we can use `pwd` and then extract the piece we need\n"
"to move to `data-shell`.  "
msgstr ""
"This allows us to move to our `data-shell` directory from anywhere on\n"
"the filesystem (including from inside `data`).  To find the absolute path\n"
"we're looking for, we can use `pwd` and then extract the piece we need\n"
"to move to `data-shell`.  "

# code block
#: shell-novice/_episodes/02-filedir.md:658
msgid ""
"~~~\n"
"$ cd /Users/nelle/Desktop/data-shell\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd /Users/nelle/Desktop/data-shell\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:663
msgid ""
"Run `pwd` and `ls -F` to ensure that we're in the directory we expect.  "
msgstr ""
"Run `pwd` and `ls -F` to ensure that we're in the directory we expect.  "

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:665
msgid "> ## Two More Shortcuts"
msgstr "> ## Two More Shortcuts"

#: shell-novice/_episodes/02-filedir.md:666
msgid ""
">\n"
"> The shell interprets the character `~` (tilde) at the start of a path to\n"
"> mean \"the current user's home directory\". For example, if Nelle's home\n"
"> directory is `/Users/nelle`, then `~/data` is equivalent to\n"
"> `/Users/nelle/data`. This only works if it is the first character in the\n"
"> path: `here/there/~/elsewhere` is *not* `here/there/Users/nelle/"
"elsewhere`.\n"
">\n"
"> Another shortcut is the `-` (dash) character.  `cd` will translate `-` "
"into\n"
"> *the previous directory I was in*, which is faster than having to "
"remember,\n"
"> then type, the full path.  This is a *very* efficient way of moving back\n"
"> and forth between directories. The difference between `cd ..` and `cd -` "
"is\n"
"> that the former brings you *up*, while the latter brings you *back*. You "
"can\n"
"> think of it as the *Last Channel* button on a TV remote."
msgstr ""
">\n"
"> The shell interprets the character `~` (tilde) at the start of a path to\n"
"> mean \"the current user's home directory\". For example, if Nelle's home\n"
"> directory is `/Users/nelle`, then `~/data` is equivalent to\n"
"> `/Users/nelle/data`. This only works if it is the first character in the\n"
"> path: `here/there/~/elsewhere` is *not* `here/there/Users/nelle/"
"elsewhere`.\n"
">\n"
"> Another shortcut is the `-` (dash) character.  `cd` will translate `-` "
"into\n"
"> *the previous directory I was in*, which is faster than having to "
"remember,\n"
"> then type, the full path.  This is a *very* efficient way of moving back\n"
"> and forth between directories. The difference between `cd ..` and `cd -` "
"is\n"
"> that the former brings you *up*, while the latter brings you *back*. You "
"can\n"
"> think of it as the *Last Channel* button on a TV remote."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:681
msgid "> ## Absolute vs Relative Paths"
msgstr "> ## Absolute vs Relative Paths"

#: shell-novice/_episodes/02-filedir.md:682
msgid ""
">\n"
"> Starting from `/Users/amanda/data/`,\n"
"> which of the following commands could Amanda use to navigate to her home "
"directory,\n"
"> which is `/Users/amanda`?\n"
">\n"
"> 1. `cd .`\n"
"> 2. `cd /`\n"
"> 3. `cd /home/amanda`\n"
"> 4. `cd ../..`\n"
"> 5. `cd ~`\n"
"> 6. `cd home`\n"
"> 7. `cd ~/data/..`\n"
"> 8. `cd`\n"
"> 9. `cd ..`\n"
">\n"
"> > ## Solution\n"
"> > 1. No: `.` stands for the current directory.\n"
"> > 2. No: `/` stands for the root directory.\n"
"> > 3. No: Amanda's home directory is `/Users/amanda`.\n"
"> > 4. No: this goes up two levels, i.e. ends in `/Users`.\n"
"> > 5. Yes: `~` stands for the user's home directory, in this case `/Users/"
"amanda`.\n"
"> > 6. No: this would navigate into a directory `home` in the current "
"directory if it exists.\n"
"> > 7. Yes: unnecessarily complicated, but correct.\n"
"> > 8. Yes: shortcut to go back to the user's home directory.\n"
"> > 9. Yes: goes up one level."
msgstr ""
">\n"
"> Starting from `/Users/amanda/data/`,\n"
"> which of the following commands could Amanda use to navigate to her home "
"directory,\n"
"> which is `/Users/amanda`?\n"
">\n"
"> 1. `cd .`\n"
"> 2. `cd /`\n"
"> 3. `cd /home/amanda`\n"
"> 4. `cd ../..`\n"
"> 5. `cd ~`\n"
"> 6. `cd home`\n"
"> 7. `cd ~/data/..`\n"
"> 8. `cd`\n"
"> 9. `cd ..`\n"
">\n"
"> > ## Solution\n"
"> > 1. No: `.` stands for the current directory.\n"
"> > 2. No: `/` stands for the root directory.\n"
"> > 3. No: Amanda's home directory is `/Users/amanda`.\n"
"> > 4. No: this goes up two levels, i.e. ends in `/Users`.\n"
"> > 5. Yes: `~` stands for the user's home directory, in this case `/Users/"
"amanda`.\n"
"> > 6. No: this would navigate into a directory `home` in the current "
"directory if it exists.\n"
"> > 7. Yes: unnecessarily complicated, but correct.\n"
"> > 8. Yes: shortcut to go back to the user's home directory.\n"
"> > 9. Yes: goes up one level."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:710
msgid "> ## Relative Path Resolution"
msgstr "> ## Relative Path Resolution"

#: shell-novice/_episodes/02-filedir.md:711
msgid ""
">\n"
"> Using the filesystem diagram below, if `pwd` displays `/Users/thing`,\n"
"> what will `ls -F ../backup` display?\n"
">\n"
"> 1.  `../backup: No such file or directory`\n"
"> 2.  `2012-12-01 2013-01-08 2013-01-27`\n"
"> 3.  `2012-12-01/ 2013-01-08/ 2013-01-27/`\n"
"> 4.  `original/ pnas_final/ pnas_sub/`\n"
">\n"
"> ![File System for Challenge Questions](../fig/filesystem-challenge.svg)\n"
">\n"
"> > ## Solution\n"
"> > 1. No: there *is* a directory `backup` in `/Users`.\n"
"> > 2. No: this is the content of `Users/thing/backup`,\n"
"> >    but with `..` we asked for one level further up.\n"
"> > 3. No: see previous explanation.\n"
"> > 4. Yes: `../backup/` refers to `/Users/backup/`."
msgstr ""
">\n"
"> Using the filesystem diagram below, if `pwd` displays `/Users/thing`,\n"
"> what will `ls -F ../backup` display?\n"
">\n"
"> 1.  `../backup: No such file or directory`\n"
"> 2.  `2012-12-01 2013-01-08 2013-01-27`\n"
"> 3.  `2012-12-01/ 2013-01-08/ 2013-01-27/`\n"
"> 4.  `original/ pnas_final/ pnas_sub/`\n"
">\n"
"> ![File System for Challenge Questions](../fig/filesystem-challenge.svg)\n"
">\n"
"> > ## Solution\n"
"> > 1. No: there *is* a directory `backup` in `/Users`.\n"
"> > 2. No: this is the content of `Users/thing/backup`,\n"
"> >    but with `..` we asked for one level further up.\n"
"> > 3. No: see previous explanation.\n"
"> > 4. Yes: `../backup/` refers to `/Users/backup/`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:731
msgid "> ## `ls` Reading Comprehension"
msgstr "> ## `ls` Reading Comprehension"

#: shell-novice/_episodes/02-filedir.md:732
msgid ""
">\n"
"> Assuming a directory structure as in the above Figure\n"
"> (File System for Challenge Questions), if `pwd` displays `/Users/backup`,\n"
"> and `-r` tells `ls` to display things in reverse order,\n"
"> what command will display:\n"
">\n"
"> ~~~\n"
"> pnas_sub/ pnas_final/ original/\n"
"> ~~~"
msgstr ""
">\n"
"> Assuming a directory structure as in the above Figure\n"
"> (File System for Challenge Questions), if `pwd` displays `/Users/backup`,\n"
"> and `-r` tells `ls` to display things in reverse order,\n"
"> what command will display:\n"
">\n"
"> ~~~\n"
"> pnas_sub/ pnas_final/ original/\n"
"> ~~~"

# SC/DC Template label
#: shell-novice/_episodes/02-filedir.md:741
#: shell-novice/_episodes/03-create.md:569
#: shell-novice/_episodes/03-create.md:577
#: shell-novice/_episodes/03-create.md:619
#: shell-novice/_episodes/03-create.md:632
#: shell-novice/_episodes/03-create.md:640
#: shell-novice/_episodes/03-create.md:674
#: shell-novice/_episodes/04-pipefilter.md:328
#: shell-novice/_episodes/04-pipefilter.md:339
#: shell-novice/_episodes/04-pipefilter.md:635
#: shell-novice/_episodes/04-pipefilter.md:696
#: shell-novice/_episodes/04-pipefilter.md:721
#: shell-novice/_episodes/05-loop.md:124 shell-novice/_episodes/05-loop.md:369
#: shell-novice/_episodes/05-loop.md:559 shell-novice/_episodes/07-find.md:242
#: shell-novice/_episodes/07-find.md:275
msgid "> {: .output}"
msgstr "> {: .output}"

#: shell-novice/_episodes/02-filedir.md:742
msgid ""
">\n"
"> 1.  `ls pwd`\n"
"> 2.  `ls -r -F`\n"
"> 3.  `ls -r -F /Users/backup`\n"
"> 4.  Either #2 or #3 above, but not #1.\n"
">\n"
"> > ## Solution\n"
"> >  1. No: `pwd` is not the name of a directory.\n"
"> >  2. Yes: `ls` without directory argument lists files and directories\n"
"> >     in the current directory.\n"
"> >  3. Yes: uses the absolute path explicitly.\n"
"> >  4. Correct: see explanations above."
msgstr ""
">\n"
"> 1.  `ls pwd`\n"
"> 2.  `ls -r -F`\n"
"> 3.  `ls -r -F /Users/backup`\n"
"> 4.  Either #2 or #3 above, but not #1.\n"
">\n"
"> > ## Solution\n"
"> >  1. No: `pwd` is not the name of a directory.\n"
"> >  2. Yes: `ls` without directory argument lists files and directories\n"
"> >     in the current directory.\n"
"> >  3. Yes: uses the absolute path explicitly.\n"
"> >  4. Correct: see explanations above."

# header
#: shell-novice/_episodes/02-filedir.md:757
msgid "### Nelle's Pipeline: Organizing Files"
msgstr "### Nelle's Pipeline: Organizing Files"

#: shell-novice/_episodes/02-filedir.md:759
msgid ""
"Knowing just this much about files and directories,\n"
"Nelle is ready to organize the files that the protein assay machine will "
"create.\n"
"First,\n"
"she creates a directory called `north-pacific-gyre`\n"
"(to remind herself where the data came from).\n"
"Inside that,\n"
"she creates a directory called `2012-07-03`,\n"
"which is the date she started processing the samples.\n"
"She used to use names like `conference-paper` and `revised-results`,\n"
"but she found them hard to understand after a couple of years.\n"
"(The final straw was when she found herself creating\n"
"a directory called `revised-revised-results-3`.)"
msgstr ""
"Knowing just this much about files and directories,\n"
"Nelle is ready to organize the files that the protein assay machine will "
"create.\n"
"First,\n"
"she creates a directory called `north-pacific-gyre`\n"
"(to remind herself where the data came from).\n"
"Inside that,\n"
"she creates a directory called `2012-07-03`,\n"
"which is the date she started processing the samples.\n"
"She used to use names like `conference-paper` and `revised-results`,\n"
"but she found them hard to understand after a couple of years.\n"
"(The final straw was when she found herself creating\n"
"a directory called `revised-revised-results-3`.)"

# blockquote, which can be cascaded
#: shell-novice/_episodes/02-filedir.md:772
msgid "> ## Sorting Output"
msgstr "> ## Sorting Output"

#: shell-novice/_episodes/02-filedir.md:773
msgid ""
">\n"
"> Nelle names her directories \"year-month-day\",\n"
"> with leading zeroes for months and days,\n"
"> because the shell displays file and directory names in alphabetical "
"order.\n"
"> If she used month names,\n"
"> December would come before July;\n"
"> if she didn't use leading zeroes,\n"
"> November ('11') would come before July ('7'). Similarly, putting the year "
"first\n"
"> means that June 2012 will come before June 2013."
msgstr ""
">\n"
"> Nelle names her directories \"year-month-day\",\n"
"> with leading zeroes for months and days,\n"
"> because the shell displays file and directory names in alphabetical "
"order.\n"
"> If she used month names,\n"
"> December would come before July;\n"
"> if she didn't use leading zeroes,\n"
"> November ('11') would come before July ('7'). Similarly, putting the year "
"first\n"
"> means that June 2012 will come before June 2013."

#: shell-novice/_episodes/02-filedir.md:784
msgid ""
"Each of her physical samples is labelled according to her lab's convention\n"
"with a unique ten-character ID,\n"
"such as \"NENE01729A\".\n"
"This is what she used in her collection log\n"
"to record the location, time, depth, and other characteristics of the "
"sample,\n"
"so she decides to use it as part of each data file's name.\n"
"Since the assay machine's output is plain text,\n"
"she will call her files `NENE01729A.txt`, `NENE01812A.txt`, and so on.\n"
"All 1520 files will go into the same directory."
msgstr ""
"Each of her physical samples is labelled according to her lab's convention\n"
"with a unique ten-character ID,\n"
"such as \"NENE01729A\".\n"
"This is what she used in her collection log\n"
"to record the location, time, depth, and other characteristics of the "
"sample,\n"
"so she decides to use it as part of each data file's name.\n"
"Since the assay machine's output is plain text,\n"
"she will call her files `NENE01729A.txt`, `NENE01812A.txt`, and so on.\n"
"All 1520 files will go into the same directory."

#: shell-novice/_episodes/02-filedir.md:794
msgid ""
"Now in her current directory `data-shell`,\n"
"Nelle can see what files she has using the command:"
msgstr ""
"Now in her current directory `data-shell`,\n"
"Nelle can see what files she has using the command:"

# code block
#: shell-novice/_episodes/02-filedir.md:797
msgid ""
"~~~\n"
"$ ls north-pacific-gyre/2012-07-03/\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls north-pacific-gyre/2012-07-03/\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:802
msgid ""
"This is a lot to type,\n"
"but she can let the shell do most of the work through what is called **tab "
"completion**.\n"
"If she types:"
msgstr ""
"This is a lot to type,\n"
"but she can let the shell do most of the work through what is called **tab "
"completion**.\n"
"If she types:"

# code block
#: shell-novice/_episodes/02-filedir.md:806
msgid ""
"~~~\n"
"$ ls nor\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls nor\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:811
msgid ""
"and then presses tab (the tab key on her keyboard),\n"
"the shell automatically completes the directory name for her:"
msgstr ""
"and then presses tab (the tab key on her keyboard),\n"
"the shell automatically completes the directory name for her:"

# code block
#: shell-novice/_episodes/02-filedir.md:814
msgid ""
"~~~\n"
"$ ls north-pacific-gyre/\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls north-pacific-gyre/\n"
"~~~"

#: shell-novice/_episodes/02-filedir.md:819
msgid ""
"If she presses tab again,\n"
"Bash will add `2012-07-03/` to the command,\n"
"since it's the only possible completion.\n"
"Pressing tab again does nothing,\n"
"since there are 19 possibilities;\n"
"pressing tab twice brings up a list of all the files,\n"
"and so on.\n"
"This is called **tab completion**,\n"
"and we will see it in many other tools as we go on."
msgstr ""
"If she presses tab again,\n"
"Bash will add `2012-07-03/` to the command,\n"
"since it's the only possible completion.\n"
"Pressing tab again does nothing,\n"
"since there are 19 possibilities;\n"
"pressing tab twice brings up a list of all the files,\n"
"and so on.\n"
"This is called **tab completion**,\n"
"and we will see it in many other tools as we go on."

# Front Matter
#: shell-novice/_episodes/03-create.md:1
msgid ""
"---\n"
"title: \"Working With Files and Directories\"\n"
"teaching: 25\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I create, copy, and delete files and directories?\"\n"
"- \"How can I edit files?\"\n"
"objectives:\n"
"- \"Create a directory hierarchy that matches a given diagram.\"\n"
"- \"Create files in that hierarchy using an editor or by copying and "
"renaming existing files.\"\n"
"- \"Delete specified files and/or directories.\"\n"
"keypoints:\n"
"- \"`cp old new` copies a file.\"\n"
"- \"`mkdir path` creates a new directory.\"\n"
"- \"`mv old new` moves (renames) a file or directory.\"\n"
"- \"`rm path` removes (deletes) a file.\"\n"
"- \"Use of the Control key may be described in many ways, including `Ctrl-"
"X`, `Control-X`, and `^X`.\"\n"
"- \"The shell does not have a trash bin: once something is deleted, it's "
"really gone.\"\n"
"- \"Depending on the type of work you do, you may need a more powerful text "
"editor than Nano.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Working With Files and Directories\"\n"
"teaching: 25\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I create, copy, and delete files and directories?\"\n"
"- \"How can I edit files?\"\n"
"objectives:\n"
"- \"Create a directory hierarchy that matches a given diagram.\"\n"
"- \"Create files in that hierarchy using an editor or by copying and "
"renaming existing files.\"\n"
"- \"Delete specified files and/or directories.\"\n"
"keypoints:\n"
"- \"`cp old new` copies a file.\"\n"
"- \"`mkdir path` creates a new directory.\"\n"
"- \"`mv old new` moves (renames) a file or directory.\"\n"
"- \"`rm path` removes (deletes) a file.\"\n"
"- \"Use of the Control key may be described in many ways, including `Ctrl-"
"X`, `Control-X`, and `^X`.\"\n"
"- \"The shell does not have a trash bin: once something is deleted, it's "
"really gone.\"\n"
"- \"Depending on the type of work you do, you may need a more powerful text "
"editor than Nano.\"\n"
"---"

#: shell-novice/_episodes/03-create.md:22
msgid ""
"We now know how to explore files and directories,\n"
"but how do we create them in the first place?\n"
"Let's go back to our `data-shell` directory on the Desktop\n"
"and use `ls -F` to see what it contains:"
msgstr ""
"We now know how to explore files and directories,\n"
"but how do we create them in the first place?\n"
"Let's go back to our `data-shell` directory on the Desktop\n"
"and use `ls -F` to see what it contains:"

# code block
#: shell-novice/_episodes/03-create.md:42
msgid ""
"~~~\n"
"creatures/  data/  molecules/  north-pacific-gyre/  notes.txt  pizza.cfg  "
"solar.pdf  writing/\n"
"~~~"
msgstr ""
"~~~\n"
"creatures/  data/  molecules/  north-pacific-gyre/  notes.txt  pizza.cfg  "
"solar.pdf  writing/\n"
"~~~"

#: shell-novice/_episodes/03-create.md:47
msgid ""
"Let's create a new directory called `thesis` using the command `mkdir "
"thesis`\n"
"(which has no output):"
msgstr ""
"Let's create a new directory called `thesis` using the command `mkdir "
"thesis`\n"
"(which has no output):"

# code block
#: shell-novice/_episodes/03-create.md:50
msgid ""
"~~~\n"
"$ mkdir thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir thesis\n"
"~~~"

#: shell-novice/_episodes/03-create.md:55
msgid ""
"As you might guess from its name,\n"
"`mkdir` means \"make directory\".\n"
"Since `thesis` is a relative path\n"
"(i.e., doesn't have a leading slash),\n"
"the new directory is created in the current working directory:"
msgstr ""
"As you might guess from its name,\n"
"`mkdir` means \"make directory\".\n"
"Since `thesis` is a relative path\n"
"(i.e., doesn't have a leading slash),\n"
"the new directory is created in the current working directory:"

# code block
#: shell-novice/_episodes/03-create.md:66
msgid ""
"~~~\n"
"creatures/  data/  molecules/  north-pacific-gyre/  notes.txt  pizza.cfg  "
"solar.pdf  thesis/  writing/\n"
"~~~"
msgstr ""
"~~~\n"
"creatures/  data/  molecules/  north-pacific-gyre/  notes.txt  pizza.cfg  "
"solar.pdf  thesis/  writing/\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:71
msgid "> ## Two ways of doing the same thing"
msgstr "> ## Two ways of doing the same thing"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:72
msgid ""
"> Using the shell to create a directory is no different than using a file "
"explorer."
msgstr ""
"> Using the shell to create a directory is no different than using a file "
"explorer."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:73
msgid ""
"> If you open the current directory using your operating system's graphical "
"file explorer,"
msgstr ""
"> If you open the current directory using your operating system's graphical "
"file explorer,"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:74
msgid "> the `thesis` directory will appear there too."
msgstr "> the `thesis` directory will appear there too."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:75
msgid "> While they are two different ways of interacting with the files,"
msgstr "> While they are two different ways of interacting with the files,"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:76
msgid "> the files and directories themselves are the same."
msgstr "> the files and directories themselves are the same."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:79
msgid "> ## Good names for files and directories"
msgstr "> ## Good names for files and directories"

#: shell-novice/_episodes/03-create.md:80
msgid ""
">\n"
"> Complicated names of files and directories can make your life painful\n"
"> when working on the command line. Here we provide a few useful\n"
"> tips for the names of your files.\n"
">\n"
"> 1. Don't use whitespaces.\n"
">\n"
">    Whitespaces can make a name more meaningful\n"
">    but since whitespace is used to break arguments on the command line\n"
">    it is better to avoid them in names of files and directories.\n"
">    You can use `-` or `_` instead of whitespace.\n"
">\n"
"> 2. Don't begin the name with `-` (dash).\n"
">\n"
">    Commands treat names starting with `-` as options.\n"
">\n"
"> 3. Stick with letters, numbers, `.` (period), `-` (dash) and `_` "
"(underscore).\n"
">\n"
">    Many other characters have special meanings on the command line.\n"
">    We will learn about some of these during this lesson.\n"
">    There are special characters that can cause your command to not work "
"as\n"
">    expected and can even result in data loss.\n"
">\n"
"> If you need to refer to names of files or directories that have "
"whitespace\n"
"> or another non-alphanumeric character, you should surround the name in "
"quotes (`\"\"`)."
msgstr ""
">\n"
"> Complicated names of files and directories can make your life painful\n"
"> when working on the command line. Here we provide a few useful\n"
"> tips for the names of your files.\n"
">\n"
"> 1. Don't use whitespaces.\n"
">\n"
">    Whitespaces can make a name more meaningful\n"
">    but since whitespace is used to break arguments on the command line\n"
">    it is better to avoid them in names of files and directories.\n"
">    You can use `-` or `_` instead of whitespace.\n"
">\n"
"> 2. Don't begin the name with `-` (dash).\n"
">\n"
">    Commands treat names starting with `-` as options.\n"
">\n"
"> 3. Stick with letters, numbers, `.` (period), `-` (dash) and `_` "
"(underscore).\n"
">\n"
">    Many other characters have special meanings on the command line.\n"
">    We will learn about some of these during this lesson.\n"
">    There are special characters that can cause your command to not work "
"as\n"
">    expected and can even result in data loss.\n"
">\n"
"> If you need to refer to names of files or directories that have "
"whitespace\n"
"> or another non-alphanumeric character, you should surround the name in "
"quotes (`\"\"`)."

#: shell-novice/_episodes/03-create.md:107
msgid ""
"Since we've just created the `thesis` directory, there's nothing in it yet:"
msgstr ""
"Since we've just created the `thesis` directory, there's nothing in it yet:"

# code block
#: shell-novice/_episodes/03-create.md:109
msgid ""
"~~~\n"
"$ ls -F thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -F thesis\n"
"~~~"

#: shell-novice/_episodes/03-create.md:114
msgid ""
"Let's change our working directory to `thesis` using `cd`,\n"
"then run a text editor called Nano to create a file called `draft.txt`:"
msgstr ""
"Let's change our working directory to `thesis` using `cd`,\n"
"then run a text editor called Nano to create a file called `draft.txt`:"

# code block
#: shell-novice/_episodes/03-create.md:117
msgid ""
"~~~\n"
"$ cd thesis\n"
"$ nano draft.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd thesis\n"
"$ nano draft.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:123
msgid "> ## Which Editor?"
msgstr "> ## Which Editor?"

#: shell-novice/_episodes/03-create.md:124
msgid ""
">\n"
"> When we say, \"`nano` is a text editor,\" we really do mean \"text\": it "
"can\n"
"> only work with plain character data, not tables, images, or any other\n"
"> human-friendly media. We use it in examples because it is one of the \n"
"> least complex text editors. However, because of this trait, it may \n"
"> not be powerful enough or flexible enough for the work you need to do\n"
"> after this workshop. On Unix systems (such as Linux and Mac OS X),\n"
"> many programmers use [Emacs](http://www.gnu.org/software/emacs/) or\n"
"> [Vim](http://www.vim.org/) (both of which require more time to learn), \n"
"> or a graphical editor such as\n"
"> [Gedit](http://projects.gnome.org/gedit/). On Windows, you may wish to\n"
"> use [Notepad++](http://notepad-plus-plus.org/).  Windows also has a built-"
"in\n"
"> editor called `notepad` that can be run from the command line in the same\n"
"> way as `nano` for the purposes of this lesson.  \n"
">\n"
"> No matter what editor you use, you will need to know where it searches\n"
"> for and saves files. If you start it from the shell, it will (probably)\n"
"> use your current working directory as its default location. If you use\n"
"> your computer's start menu, it may want to save files in your desktop or\n"
"> documents directory instead. You can change this by navigating to\n"
"> another directory the first time you \"Save As...\""
msgstr ""
">\n"
"> When we say, \"`nano` is a text editor,\" we really do mean \"text\": it "
"can\n"
"> only work with plain character data, not tables, images, or any other\n"
"> human-friendly media. We use it in examples because it is one of the \n"
"> least complex text editors. However, because of this trait, it may \n"
"> not be powerful enough or flexible enough for the work you need to do\n"
"> after this workshop. On Unix systems (such as Linux and Mac OS X),\n"
"> many programmers use [Emacs](http://www.gnu.org/software/emacs/) or\n"
"> [Vim](http://www.vim.org/) (both of which require more time to learn), \n"
"> or a graphical editor such as\n"
"> [Gedit](http://projects.gnome.org/gedit/). On Windows, you may wish to\n"
"> use [Notepad++](http://notepad-plus-plus.org/).  Windows also has a built-"
"in\n"
"> editor called `notepad` that can be run from the command line in the same\n"
"> way as `nano` for the purposes of this lesson.  \n"
">\n"
"> No matter what editor you use, you will need to know where it searches\n"
"> for and saves files. If you start it from the shell, it will (probably)\n"
"> use your current working directory as its default location. If you use\n"
"> your computer's start menu, it may want to save files in your desktop or\n"
"> documents directory instead. You can change this by navigating to\n"
"> another directory the first time you \"Save As...\""

#: shell-novice/_episodes/03-create.md:147
msgid ""
"Let's type in a few lines of text.\n"
"Once we're happy with our text, we can press `Ctrl-O` (press the Ctrl or "
"Control key and, while\n"
"holding it down, press the O key) to write our data to disk\n"
"(we'll be asked what file we want to save this to:\n"
"press Return to accept the suggested default of `draft.txt`)."
msgstr ""
"Let's type in a few lines of text.\n"
"Once we're happy with our text, we can press `Ctrl-O` (press the Ctrl or "
"Control key and, while\n"
"holding it down, press the O key) to write our data to disk\n"
"(we'll be asked what file we want to save this to:\n"
"press Return to accept the suggested default of `draft.txt`)."

#: shell-novice/_episodes/03-create.md:153
msgid "![Nano in Action](../fig/nano-screenshot.png)"
msgstr "![Nano in Action](../fig/nano-screenshot.png)"

#: shell-novice/_episodes/03-create.md:155
msgid ""
"Once our file is saved, we can use `Ctrl-X` to quit the editor and\n"
"return to the shell."
msgstr ""
"Once our file is saved, we can use `Ctrl-X` to quit the editor and\n"
"return to the shell."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:158
msgid "> ## Control, Ctrl, or ^ Key"
msgstr "> ## Control, Ctrl, or ^ Key"

#: shell-novice/_episodes/03-create.md:159
msgid ""
">\n"
"> The Control key is also called the \"Ctrl\" key. There are various ways\n"
"> in which using the Control key may be described. For example, you may\n"
"> see an instruction to press the Control key and, while holding it down,\n"
"> press the X key, described as any of:\n"
">\n"
"> * `Control-X`\n"
"> * `Control+X`\n"
"> * `Ctrl-X`\n"
"> * `Ctrl+X`\n"
"> * `^X`\n"
"> * `C-x`\n"
">\n"
"> In nano, along the bottom of the screen you'll see `^G Get Help ^O "
"WriteOut`.\n"
"> This means that you can use `Control-G` to get help and `Control-O` to "
"save your\n"
"> file."
msgstr ""
">\n"
"> The Control key is also called the \"Ctrl\" key. There are various ways\n"
"> in which using the Control key may be described. For example, you may\n"
"> see an instruction to press the Control key and, while holding it down,\n"
"> press the X key, described as any of:\n"
">\n"
"> * `Control-X`\n"
"> * `Control+X`\n"
"> * `Ctrl-X`\n"
"> * `Ctrl+X`\n"
"> * `^X`\n"
"> * `C-x`\n"
">\n"
"> In nano, along the bottom of the screen you'll see `^G Get Help ^O "
"WriteOut`.\n"
"> This means that you can use `Control-G` to get help and `Control-O` to "
"save your\n"
"> file."

#: shell-novice/_episodes/03-create.md:177
msgid ""
"`nano` doesn't leave any output on the screen after it exits,\n"
"but `ls` now shows that we have created a file called `draft.txt`:"
msgstr ""
"`nano` doesn't leave any output on the screen after it exits,\n"
"but `ls` now shows that we have created a file called `draft.txt`:"

# code block
#: shell-novice/_episodes/03-create.md:185
#: shell-novice/_episodes/03-create.md:278
#: shell-novice/_episodes/03-create.md:367
msgid ""
"~~~\n"
"draft.txt\n"
"~~~"
msgstr ""
"~~~\n"
"draft.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:190
msgid "> ## Creating Files a Different Way"
msgstr "> ## Creating Files a Different Way"

#: shell-novice/_episodes/03-create.md:191
msgid ""
">\n"
"> We have seen how to create text files using the `nano` editor.\n"
"> Now, try the following command in your home directory:\n"
">\n"
"> ~~~\n"
"> $ cd                  # go to your home directory\n"
"> $ touch my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  What did the touch command do?\n"
">     When you look at your home directory using the GUI file explorer,\n"
">     does the file show up?\n"
">\n"
"> 2.  Use `ls -l` to inspect the files.  How large is `my_file.txt`?\n"
">\n"
"> 3.  When might you want to create a file this way?\n"
">\n"
"> > ## Solution\n"
"> > 1.  The touch command generates a new file called 'my_file.txt' in\n"
"> >     your home directory.  If you are in your home directory, you\n"
"> >     can observe this newly generated file by typing 'ls' at the \n"
"> >     command line prompt.  'my_file.txt' can also be viewed in your\n"
"> >     GUI file explorer.\n"
"> >\n"
"> > 2.  When you inspect the file with 'ls -l', note that the size of\n"
"> >     'my_file.txt' is 0kb.  In other words, it contains no data.\n"
"> >     If you open 'my_file.txt' using your text editor it is blank.\n"
"> >\n"
"> > 3.  Some programs do not generate output files themselves, but\n"
"> >     instead require that empty files have already been generated.\n"
"> >     When the program is run, it searches for an existing file to\n"
"> >     populate with its output.  The touch command allows you to\n"
"> >     efficiently generate a blank text file to be used by such\n"
"> >     programs."
msgstr ""
">\n"
"> We have seen how to create text files using the `nano` editor.\n"
"> Now, try the following command in your home directory:\n"
">\n"
"> ~~~\n"
"> $ cd                  # go to your home directory\n"
"> $ touch my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  What did the touch command do?\n"
">     When you look at your home directory using the GUI file explorer,\n"
">     does the file show up?\n"
">\n"
"> 2.  Use `ls -l` to inspect the files.  How large is `my_file.txt`?\n"
">\n"
"> 3.  When might you want to create a file this way?\n"
">\n"
"> > ## Solution\n"
"> > 1.  The touch command generates a new file called 'my_file.txt' in\n"
"> >     your home directory.  If you are in your home directory, you\n"
"> >     can observe this newly generated file by typing 'ls' at the \n"
"> >     command line prompt.  'my_file.txt' can also be viewed in your\n"
"> >     GUI file explorer.\n"
"> >\n"
"> > 2.  When you inspect the file with 'ls -l', note that the size of\n"
"> >     'my_file.txt' is 0kb.  In other words, it contains no data.\n"
"> >     If you open 'my_file.txt' using your text editor it is blank.\n"
"> >\n"
"> > 3.  Some programs do not generate output files themselves, but\n"
"> >     instead require that empty files have already been generated.\n"
"> >     When the program is run, it searches for an existing file to\n"
"> >     populate with its output.  The touch command allows you to\n"
"> >     efficiently generate a blank text file to be used by such\n"
"> >     programs."

#: shell-novice/_episodes/03-create.md:229
msgid ""
"Returning to the `data-shell` directory,\n"
"let's tidy up the `thesis` directory by removing the draft we created:"
msgstr ""
"Returning to the `data-shell` directory,\n"
"let's tidy up the `thesis` directory by removing the draft we created:"

# code block
#: shell-novice/_episodes/03-create.md:232
msgid ""
"~~~\n"
"$ cd thesis\n"
"$ rm draft.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd thesis\n"
"$ rm draft.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:238
msgid ""
"This command removes files (`rm` is short for \"remove\").\n"
"If we run `ls` again,\n"
"its output is empty once more,\n"
"which tells us that our file is gone:"
msgstr ""
"This command removes files (`rm` is short for \"remove\").\n"
"If we run `ls` again,\n"
"its output is empty once more,\n"
"which tells us that our file is gone:"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:248
msgid "> ## Deleting Is Forever"
msgstr "> ## Deleting Is Forever"

#: shell-novice/_episodes/03-create.md:249
msgid ""
">\n"
"> The Unix shell doesn't have a trash bin that we can recover deleted\n"
"> files from (though most graphical interfaces to Unix do).  Instead,\n"
"> when we delete files, they are unhooked from the file system so that\n"
"> their storage space on disk can be recycled. Tools for finding and\n"
"> recovering deleted files do exist, but there's no guarantee they'll\n"
"> work in any particular situation, since the computer may recycle the\n"
"> file's disk space right away."
msgstr ""
">\n"
"> The Unix shell doesn't have a trash bin that we can recover deleted\n"
"> files from (though most graphical interfaces to Unix do).  Instead,\n"
"> when we delete files, they are unhooked from the file system so that\n"
"> their storage space on disk can be recycled. Tools for finding and\n"
"> recovering deleted files do exist, but there's no guarantee they'll\n"
"> work in any particular situation, since the computer may recycle the\n"
"> file's disk space right away."

#: shell-novice/_episodes/03-create.md:259
msgid ""
"Let's re-create that file\n"
"and then move up one directory to `/Users/nelle/Desktop/data-shell` using "
"`cd ..`:"
msgstr ""
"Let's re-create that file\n"
"and then move up one directory to `/Users/nelle/Desktop/data-shell` using "
"`cd ..`:"

# code block
#: shell-novice/_episodes/03-create.md:267
msgid ""
"~~~\n"
"/Users/nelle/Desktop/data-shell/thesis\n"
"~~~"
msgstr ""
"~~~\n"
"/Users/nelle/Desktop/data-shell/thesis\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:272
msgid ""
"~~~\n"
"$ nano draft.txt\n"
"$ ls\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano draft.txt\n"
"$ ls\n"
"~~~"

#: shell-novice/_episodes/03-create.md:288
msgid ""
"If we try to remove the entire `thesis` directory using `rm thesis`,\n"
"we get an error message:"
msgstr ""
"If we try to remove the entire `thesis` directory using `rm thesis`,\n"
"we get an error message:"

# code block
#: shell-novice/_episodes/03-create.md:291
msgid ""
"~~~\n"
"$ rm thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm thesis\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:296
msgid ""
"~~~\n"
"rm: cannot remove `thesis': Is a directory\n"
"~~~"
msgstr ""
"~~~\n"
"rm: cannot remove `thesis': Is a directory\n"
"~~~"

#: shell-novice/_episodes/03-create.md:301
msgid ""
"This happens because `rm` by default only works on files, not directories."
msgstr ""
"This happens because `rm` by default only works on files, not directories."

#: shell-novice/_episodes/03-create.md:303
msgid ""
"To really get rid of `thesis` we must also delete the file `draft.txt`.\n"
"We can do this with the [recursive](https://en.wikipedia.org/wiki/Recursion) "
"option for `rm`:"
msgstr ""
"To really get rid of `thesis` we must also delete the file `draft.txt`.\n"
"We can do this with the [recursive](https://en.wikipedia.org/wiki/Recursion) "
"option for `rm`:"

# code block
#: shell-novice/_episodes/03-create.md:306
msgid ""
"~~~\n"
"$ rm -r thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm -r thesis\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:311
msgid "> ## Using `rm` Safely"
msgstr "> ## Using `rm` Safely"

#: shell-novice/_episodes/03-create.md:312
msgid ""
">\n"
"> What happens when we type `rm -i thesis/quotations.txt`?\n"
"> Why would we want this protection when using `rm`?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ rm: remove regular file 'thesis/quotations.txt'?\n"
"> > ```\n"
"> > {: .language-bash} \n"
"> > The -i option will prompt before every removal. \n"
"> > The Unix shell doesn't have a trash bin, so all the files removed will "
"disappear forever. \n"
"> > By using the -i flag, we have the chance to check that we are deleting "
"only the files that we want to remove."
msgstr ""
">\n"
"> What happens when we type `rm -i thesis/quotations.txt`?\n"
"> Why would we want this protection when using `rm`?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ rm: remove regular file 'thesis/quotations.txt'?\n"
"> > ```\n"
"> > {: .language-bash} \n"
"> > The -i option will prompt before every removal. \n"
"> > The Unix shell doesn't have a trash bin, so all the files removed will "
"disappear forever. \n"
"> > By using the -i flag, we have the chance to check that we are deleting "
"only the files that we want to remove."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:327
msgid "> ## With Great Power Comes Great Responsibility"
msgstr "> ## With Great Power Comes Great Responsibility"

#: shell-novice/_episodes/03-create.md:328
msgid ""
">\n"
"> Removing the files in a directory recursively can be a very dangerous\n"
"> operation. If we're concerned about what we might be deleting we can\n"
"> add the \"interactive\" flag `-i` to `rm` which will ask us for "
"confirmation\n"
"> before each step\n"
">\n"
"> ~~~\n"
"> $ rm -r -i thesis\n"
"> rm: descend into directory ‘thesis’? y\n"
"> rm: remove regular file ‘thesis/draft.txt’? y\n"
"> rm: remove directory ‘thesis’? y\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> This removes everything in the directory, then the directory itself, "
"asking\n"
"> at each step for you to confirm the deletion."
msgstr ""
">\n"
"> Removing the files in a directory recursively can be a very dangerous\n"
"> operation. If we're concerned about what we might be deleting we can\n"
"> add the \"interactive\" flag `-i` to `rm` which will ask us for "
"confirmation\n"
"> before each step\n"
">\n"
"> ~~~\n"
"> $ rm -r -i thesis\n"
"> rm: descend into directory ‘thesis’? y\n"
"> rm: remove regular file ‘thesis/draft.txt’? y\n"
"> rm: remove directory ‘thesis’? y\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> This removes everything in the directory, then the directory itself, "
"asking\n"
"> at each step for you to confirm the deletion."

#: shell-novice/_episodes/03-create.md:346
msgid ""
"Let's create that directory and file one more time.\n"
"(Note that this time we're running `nano` with the path `thesis/draft.txt`,\n"
"rather than going into the `thesis` directory and running `nano` on `draft."
"txt` there.)"
msgstr ""
"Let's create that directory and file one more time.\n"
"(Note that this time we're running `nano` with the path `thesis/draft.txt`,\n"
"rather than going into the `thesis` directory and running `nano` on `draft."
"txt` there.)"

# code block
#: shell-novice/_episodes/03-create.md:360
msgid ""
"~~~\n"
"$ mkdir thesis\n"
"$ nano thesis/draft.txt\n"
"$ ls thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir thesis\n"
"$ nano thesis/draft.txt\n"
"$ ls thesis\n"
"~~~"

#: shell-novice/_episodes/03-create.md:372
msgid ""
"`draft.txt` isn't a particularly informative name,\n"
"so let's change the file's name using `mv`,\n"
"which is short for \"move\":"
msgstr ""
"`draft.txt` isn't a particularly informative name,\n"
"so let's change the file's name using `mv`,\n"
"which is short for \"move\":"

# code block
#: shell-novice/_episodes/03-create.md:376
msgid ""
"~~~\n"
"$ mv thesis/draft.txt thesis/quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ mv thesis/draft.txt thesis/quotes.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:381
msgid ""
"The first argument tells `mv` what we're \"moving\",\n"
"while the second is where it's to go.\n"
"In this case,\n"
"we're moving `thesis/draft.txt` to `thesis/quotes.txt`,\n"
"which has the same effect as renaming the file.\n"
"Sure enough,\n"
"`ls` shows us that `thesis` now contains one file called `quotes.txt`:"
msgstr ""
"The first argument tells `mv` what we're \"moving\",\n"
"while the second is where it's to go.\n"
"In this case,\n"
"we're moving `thesis/draft.txt` to `thesis/quotes.txt`,\n"
"which has the same effect as renaming the file.\n"
"Sure enough,\n"
"`ls` shows us that `thesis` now contains one file called `quotes.txt`:"

# code block
#: shell-novice/_episodes/03-create.md:389
#: shell-novice/_episodes/03-create.md:424
msgid ""
"~~~\n"
"$ ls thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls thesis\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:394
#: shell-novice/_episodes/03-create.md:438
msgid ""
"~~~\n"
"quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"quotes.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:399
msgid ""
"One has to be careful when specifying the target file name, since `mv` will\n"
"silently overwrite any existing file with the same name, which could\n"
"lead to data loss. An additional flag, `mv -i` (or `mv --interactive`),\n"
"can be used to make `mv` ask you for confirmation before overwriting."
msgstr ""
"One has to be careful when specifying the target file name, since `mv` will\n"
"silently overwrite any existing file with the same name, which could\n"
"lead to data loss. An additional flag, `mv -i` (or `mv --interactive`),\n"
"can be used to make `mv` ask you for confirmation before overwriting."

#: shell-novice/_episodes/03-create.md:404
msgid ""
"Just for the sake of consistency,\n"
"`mv` also works on directories"
msgstr ""
"Just for the sake of consistency,\n"
"`mv` also works on directories"

#: shell-novice/_episodes/03-create.md:407
msgid ""
"Let's move `quotes.txt` into the current working directory.\n"
"We use `mv` once again,\n"
"but this time we'll just use the name of a directory as the second argument\n"
"to tell `mv` that we want to keep the filename,\n"
"but put the file somewhere new.\n"
"(This is why the command is called \"move\".)\n"
"In this case,\n"
"the directory name we use is the special directory name `.` that we "
"mentioned earlier."
msgstr ""
"Let's move `quotes.txt` into the current working directory.\n"
"We use `mv` once again,\n"
"but this time we'll just use the name of a directory as the second argument\n"
"to tell `mv` that we want to keep the filename,\n"
"but put the file somewhere new.\n"
"(This is why the command is called \"move\".)\n"
"In this case,\n"
"the directory name we use is the special directory name `.` that we "
"mentioned earlier."

# code block
#: shell-novice/_episodes/03-create.md:416
msgid ""
"~~~\n"
"$ mv thesis/quotes.txt .\n"
"~~~"
msgstr ""
"~~~\n"
"$ mv thesis/quotes.txt .\n"
"~~~"

#: shell-novice/_episodes/03-create.md:421
msgid ""
"The effect is to move the file from the directory it was in to the current "
"working directory.\n"
"`ls` now shows us that `thesis` is empty:"
msgstr ""
"The effect is to move the file from the directory it was in to the current "
"working directory.\n"
"`ls` now shows us that `thesis` is empty:"

#: shell-novice/_episodes/03-create.md:429
msgid ""
"Further,\n"
"`ls` with a filename or directory name as an argument only lists that file "
"or directory.\n"
"We can use this to see that `quotes.txt` is still in our current directory:"
msgstr ""
"Further,\n"
"`ls` with a filename or directory name as an argument only lists that file "
"or directory.\n"
"We can use this to see that `quotes.txt` is still in our current directory:"

# code block
#: shell-novice/_episodes/03-create.md:433
msgid ""
"~~~\n"
"$ ls quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls quotes.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:443
msgid "> ## Moving to the Current Folder"
msgstr "> ## Moving to the Current Folder"

#: shell-novice/_episodes/03-create.md:444
msgid ""
">\n"
"> After running the following commands,\n"
"> Jamie realizes that she put the files `sucrose.dat` and `maltose.dat` into "
"the wrong folder:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
">  analyzed/ raw/\n"
"> $ ls -F analyzed\n"
"> fructose.dat glucose.dat maltose.dat sucrose.dat\n"
"> $ cd raw/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Fill in the blanks to move these files to the current folder\n"
"> (i.e., the one she is currently in):\n"
">\n"
"> ~~~\n"
"> $ mv ___/sucrose.dat  ___/maltose.dat ___\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ mv ../analyzed/sucrose.dat ../analyzed/maltose.dat .\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Recall that `..` refers to the parent directory (i.e. one above the "
"current directory)\n"
"> > and that `.` refers to the current directory."
msgstr ""
">\n"
"> After running the following commands,\n"
"> Jamie realizes that she put the files `sucrose.dat` and `maltose.dat` into "
"the wrong folder:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
">  analyzed/ raw/\n"
"> $ ls -F analyzed\n"
"> fructose.dat glucose.dat maltose.dat sucrose.dat\n"
"> $ cd raw/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Fill in the blanks to move these files to the current folder\n"
"> (i.e., the one she is currently in):\n"
">\n"
"> ~~~\n"
"> $ mv ___/sucrose.dat  ___/maltose.dat ___\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ mv ../analyzed/sucrose.dat ../analyzed/maltose.dat .\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Recall that `..` refers to the parent directory (i.e. one above the "
"current directory)\n"
"> > and that `.` refers to the current directory."

#: shell-novice/_episodes/03-create.md:474
msgid ""
"The `cp` command works very much like `mv`,\n"
"except it copies a file instead of moving it.\n"
"We can check that it did the right thing using `ls`\n"
"with two paths as arguments --- like most Unix commands,\n"
"`ls` can be given multiple paths at once:"
msgstr ""
"The `cp` command works very much like `mv`,\n"
"except it copies a file instead of moving it.\n"
"We can check that it did the right thing using `ls`\n"
"with two paths as arguments --- like most Unix commands,\n"
"`ls` can be given multiple paths at once:"

# code block
#: shell-novice/_episodes/03-create.md:480
msgid ""
"~~~\n"
"$ cp quotes.txt thesis/quotations.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cp quotes.txt thesis/quotations.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:486
msgid ""
"~~~\n"
"quotes.txt   thesis/quotations.txt\n"
"~~~"
msgstr ""
"~~~\n"
"quotes.txt   thesis/quotations.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:491
msgid ""
"To prove that we made a copy,\n"
"let's delete the `quotes.txt` file in the current directory\n"
"and then run that same `ls` again."
msgstr ""
"To prove that we made a copy,\n"
"let's delete the `quotes.txt` file in the current directory\n"
"and then run that same `ls` again."

# code block
#: shell-novice/_episodes/03-create.md:495
msgid ""
"~~~\n"
"$ rm quotes.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm quotes.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:501
msgid ""
"~~~\n"
"ls: cannot access quotes.txt: No such file or directory\n"
"thesis/quotations.txt\n"
"~~~"
msgstr ""
"~~~\n"
"ls: cannot access quotes.txt: No such file or directory\n"
"thesis/quotations.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:507
msgid ""
"This time it tells us that it can't find `quotes.txt` in the current "
"directory,\n"
"but it does find the copy in `thesis` that we didn't delete."
msgstr ""
"This time it tells us that it can't find `quotes.txt` in the current "
"directory,\n"
"but it does find the copy in `thesis` that we didn't delete."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:510
msgid "> ## What's In A Name?"
msgstr "> ## What's In A Name?"

#: shell-novice/_episodes/03-create.md:511
msgid ""
">\n"
"> You may have noticed that all of Nelle's files' names are \"something dot\n"
"> something\", and in this part of the lesson, we always used the extension\n"
"> `.txt`.  This is just a convention: we can call a file `mythesis` or\n"
"> almost anything else we want. However, most people use two-part names\n"
"> most of the time to help them (and their programs) tell different kinds\n"
"> of files apart. The second part of such a name is called the\n"
"> **filename extension**, and indicates\n"
"> what type of data the file holds: `.txt` signals a plain text file, `."
"pdf`\n"
"> indicates a PDF document, `.cfg` is a configuration file full of "
"parameters\n"
"> for some program or other, `.png` is a PNG image, and so on.\n"
">\n"
"> This is just a convention, albeit an important one. Files contain\n"
"> bytes: it's up to us and our programs to interpret those bytes\n"
"> according to the rules for plain text files, PDF documents, configuration\n"
"> files, images, and so on.\n"
">\n"
"> Naming a PNG image of a whale as `whale.mp3` doesn't somehow\n"
"> magically turn it into a recording of whalesong, though it *might*\n"
"> cause the operating system to try to open it with a music player\n"
"> when someone double-clicks it."
msgstr ""
">\n"
"> You may have noticed that all of Nelle's files' names are \"something dot\n"
"> something\", and in this part of the lesson, we always used the extension\n"
"> `.txt`.  This is just a convention: we can call a file `mythesis` or\n"
"> almost anything else we want. However, most people use two-part names\n"
"> most of the time to help them (and their programs) tell different kinds\n"
"> of files apart. The second part of such a name is called the\n"
"> **filename extension**, and indicates\n"
"> what type of data the file holds: `.txt` signals a plain text file, `."
"pdf`\n"
"> indicates a PDF document, `.cfg` is a configuration file full of "
"parameters\n"
"> for some program or other, `.png` is a PNG image, and so on.\n"
">\n"
"> This is just a convention, albeit an important one. Files contain\n"
"> bytes: it's up to us and our programs to interpret those bytes\n"
"> according to the rules for plain text files, PDF documents, configuration\n"
"> files, images, and so on.\n"
">\n"
"> Naming a PNG image of a whale as `whale.mp3` doesn't somehow\n"
"> magically turn it into a recording of whalesong, though it *might*\n"
"> cause the operating system to try to open it with a music player\n"
"> when someone double-clicks it."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:534
msgid "> ## Renaming Files"
msgstr "> ## Renaming Files"

#: shell-novice/_episodes/03-create.md:535
msgid ""
">\n"
"> Suppose that you created a `.txt` file in your current directory to "
"contain a list of the\n"
"> statistical tests you will need to do to analyze your data, and named it: "
"`statstics.txt`\n"
">\n"
"> After creating and saving this file you realize you misspelled the "
"filename! You want to\n"
"> correct the mistake, which of the following commands could you use to do "
"so?\n"
">\n"
"> 1. `cp statstics.txt statistics.txt`\n"
"> 2. `mv statstics.txt statistics.txt`\n"
"> 3. `mv statstics.txt .`\n"
"> 4. `cp statstics.txt .`\n"
">\n"
"> > ## Solution\n"
"> > 1. No.  While this would create a file with the correct name, the "
"incorrectly named file still exists in the directory\n"
"> > and would need to be deleted.\n"
"> > 2. Yes, this would work to rename the file.\n"
"> > 3. No, the period(.) indicates where to move the file, but does not "
"provide a new file name; identical file names\n"
"> > cannot be created.\n"
"> > 4. No, the period(.) indicates where to copy the file, but does not "
"provide a new file name; identical file names\n"
"> > cannot be created."
msgstr ""
">\n"
"> Suppose that you created a `.txt` file in your current directory to "
"contain a list of the\n"
"> statistical tests you will need to do to analyze your data, and named it: "
"`statstics.txt`\n"
">\n"
"> After creating and saving this file you realize you misspelled the "
"filename! You want to\n"
"> correct the mistake, which of the following commands could you use to do "
"so?\n"
">\n"
"> 1. `cp statstics.txt statistics.txt`\n"
"> 2. `mv statstics.txt statistics.txt`\n"
"> 3. `mv statstics.txt .`\n"
"> 4. `cp statstics.txt .`\n"
">\n"
"> > ## Solution\n"
"> > 1. No.  While this would create a file with the correct name, the "
"incorrectly named file still exists in the directory\n"
"> > and would need to be deleted.\n"
"> > 2. Yes, this would work to rename the file.\n"
"> > 3. No, the period(.) indicates where to move the file, but does not "
"provide a new file name; identical file names\n"
"> > cannot be created.\n"
"> > 4. No, the period(.) indicates where to copy the file, but does not "
"provide a new file name; identical file names\n"
"> > cannot be created."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:558
msgid "> ## Moving and Copying"
msgstr "> ## Moving and Copying"

#: shell-novice/_episodes/03-create.md:559
msgid ""
">\n"
"> What is the output of the closing `ls` command in the sequence shown "
"below?\n"
">\n"
"> ~~~\n"
"> $ pwd\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> /Users/jamie/data\n"
"> ~~~"
msgstr ""
">\n"
"> What is the output of the closing `ls` command in the sequence shown "
"below?\n"
">\n"
"> ~~~\n"
"> $ pwd\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> /Users/jamie/data\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:571
#: shell-novice/_episodes/03-create.md:582
msgid "> $ ls"
msgstr "> $ ls"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:575
msgid "> proteins.dat"
msgstr "> proteins.dat"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:579
msgid "> $ mkdir recombine"
msgstr "> $ mkdir recombine"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:580
msgid "> $ mv proteins.dat recombine/"
msgstr "> $ mv proteins.dat recombine/"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:581
msgid "> $ cp recombine/proteins.dat ../proteins-saved.dat"
msgstr "> $ cp recombine/proteins.dat ../proteins-saved.dat"

#: shell-novice/_episodes/03-create.md:585
msgid ""
">\n"
"> 1.   `proteins-saved.dat recombine`\n"
"> 2.   `recombine`\n"
"> 3.   `proteins.dat recombine`\n"
"> 4.   `proteins-saved.dat`\n"
">\n"
"> > ## Solution\n"
"> > We start in the `/Users/jamie/data` directory, and create a new folder "
"called `recombine`.\n"
"> > The second line moves (`mv`) the file `proteins.dat` to the new folder "
"(`recombine`).\n"
"> > The third line makes a copy of the file we just moved.  The tricky part "
"here is where the file was\n"
"> > copied to.  Recall that `..` means \"go up a level\", so the copied file "
"is now in `/Users/jamie`.\n"
"> > Notice that `..` is interpreted with respect to the current working\n"
"> > directory, **not** with respect to the location of the file being "
"copied.\n"
"> > So, the only thing that will show using ls (in `/Users/jamie/data`) is "
"the recombine folder.\n"
"> >\n"
"> > 1. No, see explanation above.  `proteins-saved.dat` is located at `/"
"Users/jamie`\n"
"> > 2. Yes\n"
"> > 3. No, see explanation above.  `proteins.dat` is located at `/Users/"
"jamie/data/recombine`\n"
"> > 4. No, see explanation above.  `proteins-saved.dat` is located at `/"
"Users/jamie`"
msgstr ""
">\n"
"> 1.   `proteins-saved.dat recombine`\n"
"> 2.   `recombine`\n"
"> 3.   `proteins.dat recombine`\n"
"> 4.   `proteins-saved.dat`\n"
">\n"
"> > ## Solution\n"
"> > We start in the `/Users/jamie/data` directory, and create a new folder "
"called `recombine`.\n"
"> > The second line moves (`mv`) the file `proteins.dat` to the new folder "
"(`recombine`).\n"
"> > The third line makes a copy of the file we just moved.  The tricky part "
"here is where the file was\n"
"> > copied to.  Recall that `..` means \"go up a level\", so the copied file "
"is now in `/Users/jamie`.\n"
"> > Notice that `..` is interpreted with respect to the current working\n"
"> > directory, **not** with respect to the location of the file being "
"copied.\n"
"> > So, the only thing that will show using ls (in `/Users/jamie/data`) is "
"the recombine folder.\n"
"> >\n"
"> > 1. No, see explanation above.  `proteins-saved.dat` is located at `/"
"Users/jamie`\n"
"> > 2. Yes\n"
"> > 3. No, see explanation above.  `proteins.dat` is located at `/Users/"
"jamie/data/recombine`\n"
"> > 4. No, see explanation above.  `proteins-saved.dat` is located at `/"
"Users/jamie`"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:607
msgid "> ## Organizing Directories and Files"
msgstr "> ## Organizing Directories and Files"

#: shell-novice/_episodes/03-create.md:608
msgid ""
">\n"
"> Jamie is working on a project and she sees that her files aren't very "
"well\n"
"> organized:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/  fructose.dat    raw/   sucrose.dat\n"
"> ~~~"
msgstr ""
">\n"
"> Jamie is working on a project and she sees that her files aren't very "
"well\n"
"> organized:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/  fructose.dat    raw/   sucrose.dat\n"
"> ~~~"

#: shell-novice/_episodes/03-create.md:620
msgid ""
">\n"
"> The `fructose.dat` and `sucrose.dat` files contain output from her data\n"
"> analysis. What command(s) covered in this lesson does she need to run so "
"that the commands below will\n"
"> produce the output shown?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/   raw/\n"
"> ~~~"
msgstr ""
">\n"
"> The `fructose.dat` and `sucrose.dat` files contain output from her data\n"
"> analysis. What command(s) covered in this lesson does she need to run so "
"that the commands below will\n"
"> produce the output shown?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/   raw/\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:634
msgid "> $ ls analyzed"
msgstr "> $ ls analyzed"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:638
msgid "> fructose.dat    sucrose.dat"
msgstr "> fructose.dat    sucrose.dat"

#: shell-novice/_episodes/03-create.md:641
msgid ""
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > mv *.dat analyzed\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Jamie needs to move her files `fructose.dat` and `sucrose.dat` to the "
"`analyzed` directory.\n"
"> > The shell will expand *.dat to match all .dat files in the current "
"directory.\n"
"> > The `mv` command then moves the list of .dat files to the \"analyzed\" "
"directory."
msgstr ""
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > mv *.dat analyzed\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Jamie needs to move her files `fructose.dat` and `sucrose.dat` to the "
"`analyzed` directory.\n"
"> > The shell will expand *.dat to match all .dat files in the current "
"directory.\n"
"> > The `mv` command then moves the list of .dat files to the \"analyzed\" "
"directory."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:653
msgid "> ## Copy with Multiple Filenames"
msgstr "> ## Copy with Multiple Filenames"

#: shell-novice/_episodes/03-create.md:654
msgid ""
">\n"
"> For this exercise, you can test the commands in the `data-shell/data "
"directory`.\n"
">\n"
"> In the example below, what does `cp` do when given several filenames and a "
"directory name?\n"
">\n"
"> ~~~\n"
"> $ mkdir backup\n"
"> $ cp amino-acids.txt animals.txt backup/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> In the example below, what does `cp` do when given three or more file "
"names?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> amino-acids.txt  animals.txt  backup/  elements/  morse.txt  pdb/  planets."
"txt  salmon.txt  sunspot.txt\n"
"> ~~~"
msgstr ""
">\n"
"> For this exercise, you can test the commands in the `data-shell/data "
"directory`.\n"
">\n"
"> In the example below, what does `cp` do when given several filenames and a "
"directory name?\n"
">\n"
"> ~~~\n"
"> $ mkdir backup\n"
"> $ cp amino-acids.txt animals.txt backup/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> In the example below, what does `cp` do when given three or more file "
"names?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> amino-acids.txt  animals.txt  backup/  elements/  morse.txt  pdb/  planets."
"txt  salmon.txt  sunspot.txt\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:676
msgid "> $ cp amino-acids.txt animals.txt morse.txt "
msgstr "> $ cp amino-acids.txt animals.txt morse.txt "

#: shell-novice/_episodes/03-create.md:679
msgid ""
">\n"
"> > ## Solution\n"
"> > If given more than one file name followed by a directory name (i.e. the "
"destination directory must \n"
"> > be the last argument), `cp` copies the files to the named directory.\n"
"> >\n"
"> > If given three file names, `cp` throws an error because it is expecting "
"a directory\n"
"> > name as the last argument.\n"
"> >\n"
"> > ```\n"
"> > cp: target ‘morse.txt’ is not a directory\n"
"> > ```\n"
"> > {: .output}"
msgstr ""
">\n"
"> > ## Solution\n"
"> > If given more than one file name followed by a directory name (i.e. the "
"destination directory must \n"
"> > be the last argument), `cp` copies the files to the named directory.\n"
"> >\n"
"> > If given three file names, `cp` throws an error because it is expecting "
"a directory\n"
"> > name as the last argument.\n"
"> >\n"
"> > ```\n"
"> > cp: target ‘morse.txt’ is not a directory\n"
"> > ```\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:694
msgid "> ## Copy a folder structure sans files"
msgstr "> ## Copy a folder structure sans files"

#: shell-novice/_episodes/03-create.md:695
msgid ""
">\n"
"> You're starting a new experiment, and would like to duplicate the file\n"
"> structure from your previous experiment without the data files so you can\n"
"> add new data.\n"
">\n"
"> Assume that the file structure is in a folder called '2016-05-18-data',\n"
"> which contains a `data` folder that in turn contains folders named `raw` "
"and\n"
"> `processed` that contain data files.  The goal is to copy the file "
"structure\n"
"> of the `2016-05-18-data` folder into a folder called `2016-05-20-data` "
"and\n"
"> remove the data files from the directory you just created.\n"
">\n"
"> Which of the following set of commands would achieve this objective?\n"
"> What would the other commands do?\n"
">\n"
"> ~~~\n"
"> $ cp -r 2016-05-18-data/ 2016-05-20-data/\n"
"> $ rm 2016-05-20-data/raw/*\n"
"> $ rm 2016-05-20-data/processed/*\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ rm 2016-05-20-data/raw/*\n"
"> $ rm 2016-05-20-data/processed/*\n"
"> $ cp -r 2016-05-18-data/ 2016-5-20-data/\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ cp -r 2016-05-18-data/ 2016-05-20-data/\n"
"> $ rm -r -i 2016-05-20-data/\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> >\n"
"> > ## Solution\n"
"> > The first set of commands achieves this objective.\n"
"> > First we have a recursive copy of a data folder.\n"
"> > Then two `rm` commands which remove all files in the specified "
"directories.\n"
"> > The shell expands the '*' wild card to match all files and "
"subdirectories.\n"
"> >\n"
"> > The second set of commands have the wrong order: \n"
"> > attempting to delete files which haven't yet been copied,\n"
"> > followed by the recursive copy command which would copy them.\n"
"> >\n"
"> > The third set of commands would achieve the objective, but in a time-"
"consuming way:\n"
"> > the first command copies the directory recursively, but the second "
"command deletes\n"
"> > interactively, prompting for confirmation for each file and directory."
msgstr ""
">\n"
"> You're starting a new experiment, and would like to duplicate the file\n"
"> structure from your previous experiment without the data files so you can\n"
"> add new data.\n"
">\n"
"> Assume that the file structure is in a folder called '2016-05-18-data',\n"
"> which contains a `data` folder that in turn contains folders named `raw` "
"and\n"
"> `processed` that contain data files.  The goal is to copy the file "
"structure\n"
"> of the `2016-05-18-data` folder into a folder called `2016-05-20-data` "
"and\n"
"> remove the data files from the directory you just created.\n"
">\n"
"> Which of the following set of commands would achieve this objective?\n"
"> What would the other commands do?\n"
">\n"
"> ~~~\n"
"> $ cp -r 2016-05-18-data/ 2016-05-20-data/\n"
"> $ rm 2016-05-20-data/raw/*\n"
"> $ rm 2016-05-20-data/processed/*\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ rm 2016-05-20-data/raw/*\n"
"> $ rm 2016-05-20-data/processed/*\n"
"> $ cp -r 2016-05-18-data/ 2016-5-20-data/\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ cp -r 2016-05-18-data/ 2016-05-20-data/\n"
"> $ rm -r -i 2016-05-20-data/\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> >\n"
"> > ## Solution\n"
"> > The first set of commands achieves this objective.\n"
"> > First we have a recursive copy of a data folder.\n"
"> > Then two `rm` commands which remove all files in the specified "
"directories.\n"
"> > The shell expands the '*' wild card to match all files and "
"subdirectories.\n"
"> >\n"
"> > The second set of commands have the wrong order: \n"
"> > attempting to delete files which haven't yet been copied,\n"
"> > followed by the recursive copy command which would copy them.\n"
"> >\n"
"> > The third set of commands would achieve the objective, but in a time-"
"consuming way:\n"
"> > the first command copies the directory recursively, but the second "
"command deletes\n"
"> > interactively, prompting for confirmation for each file and directory."

# Front Matter
#: shell-novice/_episodes/04-pipefilter.md:1
msgid ""
"---\n"
"title: \"Pipes and Filters\"\n"
"teaching: 30\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I combine existing commands to do new things?\"\n"
"objectives:\n"
"- \"Redirect a command's output to a file.\"\n"
"- \"Process a file instead of keyboard input using redirection.\"\n"
"- \"Construct command pipelines with two or more stages.\"\n"
"- \"Explain what usually happens if a program or pipeline isn't given any "
"input to process.\"\n"
"- \"Explain Unix's 'small pieces, loosely joined' philosophy.\"\n"
"keypoints:\n"
"- \"`cat` displays the contents of its inputs.\"\n"
"- \"`head` displays the first few lines of its input.\"\n"
"- \"`tail` displays the last few lines of its input.\"\n"
"- \"`sort` sorts its inputs.\"\n"
"- \"`wc` counts lines, words, and characters in its inputs.\"\n"
"- \"`*` matches zero or more characters in a filename, so `*.txt` matches "
"all files ending in `.txt`.\"\n"
"- \"`?` matches any single character in a filename, so `?.txt` matches `a."
"txt` but not `any.txt`.\"\n"
"- \"`command > file` redirects a command's output to a file.\"\n"
"- \"`first | second` is a pipeline: the output of the first command is used "
"as the input to the second.\"\n"
"- \"The best way to use the shell is to use pipes to combine simple single-"
"purpose programs (filters).\"\n"
"---"
msgstr ""
"---\n"
"title: \"Pipes and Filters\"\n"
"teaching: 30\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I combine existing commands to do new things?\"\n"
"objectives:\n"
"- \"Redirect a command's output to a file.\"\n"
"- \"Process a file instead of keyboard input using redirection.\"\n"
"- \"Construct command pipelines with two or more stages.\"\n"
"- \"Explain what usually happens if a program or pipeline isn't given any "
"input to process.\"\n"
"- \"Explain Unix's 'small pieces, loosely joined' philosophy.\"\n"
"keypoints:\n"
"- \"`cat` displays the contents of its inputs.\"\n"
"- \"`head` displays the first few lines of its input.\"\n"
"- \"`tail` displays the last few lines of its input.\"\n"
"- \"`sort` sorts its inputs.\"\n"
"- \"`wc` counts lines, words, and characters in its inputs.\"\n"
"- \"`*` matches zero or more characters in a filename, so `*.txt` matches "
"all files ending in `.txt`.\"\n"
"- \"`?` matches any single character in a filename, so `?.txt` matches `a."
"txt` but not `any.txt`.\"\n"
"- \"`command > file` redirects a command's output to a file.\"\n"
"- \"`first | second` is a pipeline: the output of the first command is used "
"as the input to the second.\"\n"
"- \"The best way to use the shell is to use pipes to combine simple single-"
"purpose programs (filters).\"\n"
"---"

#: shell-novice/_episodes/04-pipefilter.md:26
msgid ""
"Now that we know a few basic commands,\n"
"we can finally look at the shell's most powerful feature:\n"
"the ease with which it lets us combine existing programs in new ways.\n"
"We'll start with a directory called `molecules`\n"
"that contains six files describing some simple organic molecules.\n"
"The `.pdb` extension indicates that these files are in Protein Data Bank "
"format,\n"
"a simple text format that specifies the type and position of each atom in "
"the molecule."
msgstr ""
"Now that we know a few basic commands,\n"
"we can finally look at the shell's most powerful feature:\n"
"the ease with which it lets us combine existing programs in new ways.\n"
"We'll start with a directory called `molecules`\n"
"that contains six files describing some simple organic molecules.\n"
"The `.pdb` extension indicates that these files are in Protein Data Bank "
"format,\n"
"a simple text format that specifies the type and position of each atom in "
"the molecule."

# code block
#: shell-novice/_episodes/04-pipefilter.md:34
msgid ""
"~~~\n"
"$ ls molecules\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls molecules\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:39
msgid ""
"~~~\n"
"cubane.pdb    ethane.pdb    methane.pdb\n"
"octane.pdb    pentane.pdb   propane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"cubane.pdb    ethane.pdb    methane.pdb\n"
"octane.pdb    pentane.pdb   propane.pdb\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:45
msgid ""
"Let's go into that directory with `cd` and run the command `wc *.pdb`.\n"
"`wc` is the \"word count\" command:\n"
"it counts the number of lines, words, and characters in files.\n"
"The `*` in `*.pdb` matches zero or more characters,\n"
"so the shell turns `*.pdb` into a list of all `.pdb` files in the current "
"directory:"
msgstr ""
"Let's go into that directory with `cd` and run the command `wc *.pdb`.\n"
"`wc` is the \"word count\" command:\n"
"it counts the number of lines, words, and characters in files.\n"
"The `*` in `*.pdb` matches zero or more characters,\n"
"so the shell turns `*.pdb` into a list of all `.pdb` files in the current "
"directory:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:51
msgid ""
"~~~\n"
"$ cd molecules\n"
"$ wc *.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd molecules\n"
"$ wc *.pdb\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:57
msgid ""
"~~~\n"
"  20  156 1158 cubane.pdb\n"
"  12   84  622 ethane.pdb\n"
"   9   57  422 methane.pdb\n"
"  30  246 1828 octane.pdb\n"
"  21  165 1226 pentane.pdb\n"
"  15  111  825 propane.pdb\n"
" 107  819 6081 total\n"
"~~~"
msgstr ""
"~~~\n"
"  20  156 1158 cubane.pdb\n"
"  12   84  622 ethane.pdb\n"
"   9   57  422 methane.pdb\n"
"  30  246 1828 octane.pdb\n"
"  21  165 1226 pentane.pdb\n"
"  15  111  825 propane.pdb\n"
" 107  819 6081 total\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:68
#: shell-novice/_episodes/07-find.md:255
msgid "> ## Wildcards"
msgstr "> ## Wildcards"

#: shell-novice/_episodes/04-pipefilter.md:69
msgid ""
">\n"
"> `*` is a **wildcard**. It matches zero or more\n"
"> characters, so `*.pdb` matches `ethane.pdb`, `propane.pdb`, and every\n"
"> file that ends with '.pdb'. On the other hand, `p*.pdb` only matches\n"
"> `pentane.pdb` and `propane.pdb`, because the 'p' at the front only\n"
"> matches filenames that begin with the letter 'p'.\n"
">\n"
"> `?` is also a wildcard, but it only matches a single character. This\n"
"> means that `p?.pdb` would match `pi.pdb` or `p5.pdb` (if we had these two\n"
"> files in the `molecules` directory), but not `propane.pdb`.\n"
"> We can use any number of wildcards at a time: for example, `p*.p?*`\n"
"> matches anything that starts with a 'p' and ends with '.', 'p', and at\n"
"> least one more character (since the `?` has to match one character, and\n"
"> the final `*` can match any number of characters). Thus, `p*.p?*` would\n"
"> match `preferred.practice`, and even `p.pi` (since the first `*` can\n"
"> match no characters at all), but not `quality.practice` (doesn't start\n"
"> with 'p') or `preferred.p` (there isn't at least one character after the\n"
"> '.p').\n"
">\n"
"> When the shell sees a wildcard, it expands the wildcard to create a\n"
"> list of matching filenames *before* running the command that was\n"
"> asked for. As an exception, if a wildcard expression does not match\n"
"> any file, Bash will pass the expression as an argument to the command\n"
"> as it is. For example typing `ls *.pdf` in the `molecules` directory\n"
"> (which contains only files with names ending with `.pdb`) results in\n"
"> an error message that there is no file called `*.pdf`.\n"
"> However, generally commands like `wc` and `ls` see the lists of\n"
"> file names matching these expressions, but not the wildcards\n"
"> themselves. It is the shell, not the other programs, that deals with\n"
"> expanding wildcards, and this is another example of orthogonal design."
msgstr ""
">\n"
"> `*` is a **wildcard**. It matches zero or more\n"
"> characters, so `*.pdb` matches `ethane.pdb`, `propane.pdb`, and every\n"
"> file that ends with '.pdb'. On the other hand, `p*.pdb` only matches\n"
"> `pentane.pdb` and `propane.pdb`, because the 'p' at the front only\n"
"> matches filenames that begin with the letter 'p'.\n"
">\n"
"> `?` is also a wildcard, but it only matches a single character. This\n"
"> means that `p?.pdb` would match `pi.pdb` or `p5.pdb` (if we had these two\n"
"> files in the `molecules` directory), but not `propane.pdb`.\n"
"> We can use any number of wildcards at a time: for example, `p*.p?*`\n"
"> matches anything that starts with a 'p' and ends with '.', 'p', and at\n"
"> least one more character (since the `?` has to match one character, and\n"
"> the final `*` can match any number of characters). Thus, `p*.p?*` would\n"
"> match `preferred.practice`, and even `p.pi` (since the first `*` can\n"
"> match no characters at all), but not `quality.practice` (doesn't start\n"
"> with 'p') or `preferred.p` (there isn't at least one character after the\n"
"> '.p').\n"
">\n"
"> When the shell sees a wildcard, it expands the wildcard to create a\n"
"> list of matching filenames *before* running the command that was\n"
"> asked for. As an exception, if a wildcard expression does not match\n"
"> any file, Bash will pass the expression as an argument to the command\n"
"> as it is. For example typing `ls *.pdf` in the `molecules` directory\n"
"> (which contains only files with names ending with `.pdb`) results in\n"
"> an error message that there is no file called `*.pdf`.\n"
"> However, generally commands like `wc` and `ls` see the lists of\n"
"> file names matching these expressions, but not the wildcards\n"
"> themselves. It is the shell, not the other programs, that deals with\n"
"> expanding wildcards, and this is another example of orthogonal design."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:101
msgid "> ## Using Wildcards"
msgstr "> ## Using Wildcards"

#: shell-novice/_episodes/04-pipefilter.md:102
#, fuzzy
msgid ""
">\n"
"> When run in the `molecules` directory, which `ls` command(s) will\n"
"> produce this output?\n"
">\n"
"> `ethane.pdb   methane.pdb`\n"
">\n"
"> 1. `ls *t*ane.pdb`\n"
"> 2. `ls *t?ne.*`\n"
"> 3. `ls *t??ne.pdb`\n"
"> 4. `ls ethane.*`\n"
">\n"
"> > ## Solution\n"
">>  The solution is `3.`\n"
">>\n"
">> `1.` shows all files that contain any number and combination of "
"characters, \n"
">> followed by the letter `t`, another single character, and end with `ane."
"pdb`.\n"
">> This includes `octane.pdb` and `pentane.pdb`.\n"
">>\n"
">> `2.` shows all files containing any number and combination of characters, "
"`t`,\n"
">> another single character, `ne.` followed by any number and combination of "
"characters.\n"
">> This will give us `octane.pdb` and `pentane.pdb` but doesn't match "
"anything which\n"
">> ends in `thane.pdb`.\n"
">>\n"
">> `3.` fixes the problems of option 2 by matching two characters between "
"`t` and `ne`. This is the solution.\n"
">>\n"
">> `4.` only shows files starting with `ethane.`."
msgstr ""
">\n"
"> When run in the `molecules` directory, which `ls` command(s) will\n"
"> produce this output?\n"
">\n"
"> `ethane.pdb   methane.pdb`\n"
">\n"
"> 1. `ls *t*ane.pdb`\n"
"> 2. `ls *t?ne.*`\n"
"> 3. `ls *t??ne.pdb`\n"
"> 4. `ls ethane.*`\n"
">\n"
"> > ## Solution\n"
">>  The solution is `3.`\n"
">>\n"
">> `1.` shows all files that contain any number and combination of "
"characters, \n"
">> followed by the letter `t`, another single character, and end with `ane."
"pdb`. \n"
">> This includes `octane.pdb` and `pentane.pdb`. \n"
">>\n"
">> `2.` shows all files containing any number and combination of characters, "
"`t`,\n"
">> another single character, `ne.` followed by any number and combination of "
"characters.\n"
">> This will give us `octane.pdb` and `pentane.pdb` but doesn't match "
"anything which\n"
">> ends in `thane.pdb`.\n"
">>\n"
">> `3.` fixes the problems of option 2 by matching two characters between "
"`t` and `ne`. This is the solution.\n"
">>\n"
">> `4.` only shows files starting with `ethane.`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:131
msgid "> ## More on Wildcards"
msgstr "> ## More on Wildcards"

#: shell-novice/_episodes/04-pipefilter.md:132
msgid ""
">\n"
"> Sam has a directory containing calibration data, datasets, and "
"descriptions of\n"
"> the datasets:\n"
">\n"
"> ~~~\n"
"> 2015-10-23-calibration.txt\n"
"> 2015-10-23-dataset1.txt\n"
"> 2015-10-23-dataset2.txt\n"
"> 2015-10-23-dataset_overview.txt\n"
"> 2015-10-26-calibration.txt\n"
"> 2015-10-26-dataset1.txt\n"
"> 2015-10-26-dataset2.txt\n"
"> 2015-10-26-dataset_overview.txt\n"
"> 2015-11-23-calibration.txt\n"
"> 2015-11-23-dataset1.txt\n"
"> 2015-11-23-dataset2.txt\n"
"> 2015-11-23-dataset_overview.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Before heading off to another field trip, she wants to back up her data "
"and\n"
"> send some datasets to her colleague Bob. Sam uses the following commands\n"
"> to get the job done:\n"
">\n"
"> ~~~\n"
"> $ cp *dataset* /backup/datasets\n"
"> $ cp ____calibration____ /backup/calibration\n"
"> $ cp 2015-____-____ ~/send_to_bob/all_november_files/\n"
"> $ cp ____ ~/send_to_bob/all_datasets_created_on_a_23rd/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Help Sam by filling in the blanks.\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cp *calibration.txt /backup/calibration\n"
"> > $ cp 2015-11-* ~/send_to_bob/all_november_files/\n"
"> > $ cp *-23-dataset* ~send_to_bob/all_datasets_created_on_a_23rd/\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Sam has a directory containing calibration data, datasets, and "
"descriptions of\n"
"> the datasets:\n"
">\n"
"> ~~~\n"
"> 2015-10-23-calibration.txt\n"
"> 2015-10-23-dataset1.txt\n"
"> 2015-10-23-dataset2.txt\n"
"> 2015-10-23-dataset_overview.txt\n"
"> 2015-10-26-calibration.txt\n"
"> 2015-10-26-dataset1.txt\n"
"> 2015-10-26-dataset2.txt\n"
"> 2015-10-26-dataset_overview.txt\n"
"> 2015-11-23-calibration.txt\n"
"> 2015-11-23-dataset1.txt\n"
"> 2015-11-23-dataset2.txt\n"
"> 2015-11-23-dataset_overview.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Before heading off to another field trip, she wants to back up her data "
"and\n"
"> send some datasets to her colleague Bob. Sam uses the following commands\n"
"> to get the job done:\n"
">\n"
"> ~~~\n"
"> $ cp *dataset* /backup/datasets\n"
"> $ cp ____calibration____ /backup/calibration\n"
"> $ cp 2015-____-____ ~/send_to_bob/all_november_files/\n"
"> $ cp ____ ~/send_to_bob/all_datasets_created_on_a_23rd/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Help Sam by filling in the blanks.\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cp *calibration.txt /backup/calibration\n"
"> > $ cp 2015-11-* ~/send_to_bob/all_november_files/\n"
"> > $ cp *-23-dataset* ~send_to_bob/all_datasets_created_on_a_23rd/\n"
"> > ```\n"
"> > {: .language-bash}"

#: shell-novice/_episodes/04-pipefilter.md:176
msgid ""
"If we run `wc -l` instead of just `wc`,\n"
"the output shows only the number of lines per file:"
msgstr ""
"If we run `wc -l` instead of just `wc`,\n"
"the output shows only the number of lines per file:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:179
msgid ""
"~~~\n"
"$ wc -l *.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l *.pdb\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:184
#: shell-novice/_episodes/04-pipefilter.md:282
msgid ""
"~~~\n"
"  20  cubane.pdb\n"
"  12  ethane.pdb\n"
"   9  methane.pdb\n"
"  30  octane.pdb\n"
"  21  pentane.pdb\n"
"  15  propane.pdb\n"
" 107  total\n"
"~~~"
msgstr ""
"~~~\n"
"  20  cubane.pdb\n"
"  12  ethane.pdb\n"
"   9  methane.pdb\n"
"  30  octane.pdb\n"
"  21  pentane.pdb\n"
"  15  propane.pdb\n"
" 107  total\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:195
msgid ""
"We can also use `-w` to get only the number of words,\n"
"or `-c` to get only the number of characters."
msgstr ""
"We can also use `-w` to get only the number of words,\n"
"or `-c` to get only the number of characters."

#: shell-novice/_episodes/04-pipefilter.md:198
msgid ""
"Which of these files is shortest?\n"
"It's an easy question to answer when there are only six files,\n"
"but what if there were 6000?\n"
"Our first step toward a solution is to run the command:"
msgstr ""
"Which of these files is shortest?\n"
"It's an easy question to answer when there are only six files,\n"
"but what if there were 6000?\n"
"Our first step toward a solution is to run the command:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:203
msgid ""
"~~~\n"
"$ wc -l *.pdb > lengths.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l *.pdb > lengths.txt\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:208
msgid ""
"The greater than symbol, `>`, tells the shell to **redirect** the command's "
"output\n"
"to a file instead of printing it to the screen. (This is why there is no "
"screen output:\n"
"everything that `wc` would have printed has gone into the\n"
"file `lengths.txt` instead.)  The shell will create\n"
"the file if it doesn't exist. If the file exists, it will be\n"
"silently overwritten, which may lead to data loss and thus requires\n"
"some caution.\n"
"`ls lengths.txt` confirms that the file exists:"
msgstr ""
"The greater than symbol, `>`, tells the shell to **redirect** the command's "
"output\n"
"to a file instead of printing it to the screen. (This is why there is no "
"screen output:\n"
"everything that `wc` would have printed has gone into the\n"
"file `lengths.txt` instead.)  The shell will create\n"
"the file if it doesn't exist. If the file exists, it will be\n"
"silently overwritten, which may lead to data loss and thus requires\n"
"some caution.\n"
"`ls lengths.txt` confirms that the file exists:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:217
msgid ""
"~~~\n"
"$ ls lengths.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls lengths.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:222
msgid ""
"~~~\n"
"lengths.txt\n"
"~~~"
msgstr ""
"~~~\n"
"lengths.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:227
msgid "> ## What Does `>>` Mean?"
msgstr "> ## What Does `>>` Mean?"

#: shell-novice/_episodes/04-pipefilter.md:228
msgid ""
">\n"
"> What is the difference between:\n"
">\n"
"> ~~~\n"
"> $ echo hello > testfile01.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> and:\n"
">\n"
"> ~~~\n"
"> $ echo hello >> testfile02.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: Try executing each command twice in a row and then examining the "
"output files."
msgstr ""
">\n"
"> What is the difference between:\n"
">\n"
"> ~~~\n"
"> $ echo hello > testfile01.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> and:\n"
">\n"
"> ~~~\n"
"> $ echo hello >> testfile02.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: Try executing each command twice in a row and then examining the "
"output files."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:246
msgid "> ## Appending Data"
msgstr "> ## Appending Data"

#: shell-novice/_episodes/04-pipefilter.md:247
msgid ""
">\n"
"> Consider the file `data-shell/data/animals.txt`.\n"
"> After these commands, select the answer that\n"
"> corresponds to the file `animalsUpd.txt`:\n"
">\n"
"> ~~~\n"
"> $ head -3 animals.txt > animalsUpd.txt\n"
"> $ tail -2 animals.txt >> animalsUpd.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. The first three lines of `animals.txt`\n"
"> 2. The last two lines of `animals.txt`\n"
"> 3. The first three lines and the last two lines of `animals.txt`\n"
"> 4. The second and third lines of `animals.txt`\n"
">\n"
"> > ## Solution\n"
"> > Option 3 is correct. \n"
"> > For option 1 to be correct we would only run the `head` command.\n"
"> > For option 2 to be correct we would only run the `tail` command.\n"
"> > For option 4 to be correct we would have to pipe the output of `head` "
"into `tail -2` by doing `head -3 animals.txt | tail -2 >> animalsUpd.txt`"
msgstr ""
">\n"
"> Consider the file `data-shell/data/animals.txt`.\n"
"> After these commands, select the answer that\n"
"> corresponds to the file `animalsUpd.txt`:\n"
">\n"
"> ~~~\n"
"> $ head -3 animals.txt > animalsUpd.txt\n"
"> $ tail -2 animals.txt >> animalsUpd.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. The first three lines of `animals.txt`\n"
"> 2. The last two lines of `animals.txt`\n"
"> 3. The first three lines and the last two lines of `animals.txt`\n"
"> 4. The second and third lines of `animals.txt`\n"
">\n"
"> > ## Solution\n"
"> > Option 3 is correct. \n"
"> > For option 1 to be correct we would only run the `head` command.\n"
"> > For option 2 to be correct we would only run the `tail` command.\n"
"> > For option 4 to be correct we would have to pipe the output of `head` "
"into `tail -2` by doing `head -3 animals.txt | tail -2 >> animalsUpd.txt`"

#: shell-novice/_episodes/04-pipefilter.md:271
msgid ""
"We can now send the content of `lengths.txt` to the screen using `cat "
"lengths.txt`.\n"
"`cat` stands for \"concatenate\":\n"
"it prints the contents of files one after another.\n"
"There's only one file in this case,\n"
"so `cat` just shows us what it contains:"
msgstr ""
"We can now send the content of `lengths.txt` to the screen using `cat "
"lengths.txt`.\n"
"`cat` stands for \"concatenate\":\n"
"it prints the contents of files one after another.\n"
"There's only one file in this case,\n"
"so `cat` just shows us what it contains:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:277
msgid ""
"~~~\n"
"$ cat lengths.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cat lengths.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:293
msgid "> ## Output Page by Page"
msgstr "> ## Output Page by Page"

#: shell-novice/_episodes/04-pipefilter.md:294
msgid ""
">\n"
"> We'll continue to use `cat` in this lesson, for convenience and "
"consistency,\n"
"> but it has the disadvantage that it always dumps the whole file onto your "
"screen.\n"
"> More useful in practice is the command `less`,\n"
"> which you use with `$ less lengths.txt`.\n"
"> This displays a screenful of the file, and then stops.\n"
"> You can go forward one screenful by pressing the spacebar,\n"
"> or back one by pressing `b`.  Press `q` to quit."
msgstr ""
">\n"
"> We'll continue to use `cat` in this lesson, for convenience and "
"consistency,\n"
"> but it has the disadvantage that it always dumps the whole file onto your "
"screen.\n"
"> More useful in practice is the command `less`,\n"
"> which you use with `$ less lengths.txt`.\n"
"> This displays a screenful of the file, and then stops.\n"
"> You can go forward one screenful by pressing the spacebar,\n"
"> or back one by pressing `b`.  Press `q` to quit."

#: shell-novice/_episodes/04-pipefilter.md:304
msgid "Now let's use the `sort` command to sort its contents."
msgstr "Now let's use the `sort` command to sort its contents."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:306
msgid "> ## What Does `sort -n` Do?"
msgstr "> ## What Does `sort -n` Do?"

#: shell-novice/_episodes/04-pipefilter.md:307
msgid ""
">\n"
"> If we run `sort` on a file containing the following lines:\n"
">\n"
"> ~~~\n"
"> 10\n"
"> 2\n"
"> 19\n"
"> 22\n"
"> 6\n"
"> ~~~"
msgstr ""
">\n"
"> If we run `sort` on a file containing the following lines:\n"
">\n"
"> ~~~\n"
"> 10\n"
"> 2\n"
"> 19\n"
"> 22\n"
"> 6\n"
"> ~~~"

# SC/DC Template label
#: shell-novice/_episodes/04-pipefilter.md:317
#: shell-novice/_episodes/04-pipefilter.md:625
#: shell-novice/_episodes/04-pipefilter.md:663
#: shell-novice/_episodes/05-loop.md:348
#: shell-novice/_episodes/06-script.md:288
#: shell-novice/_episodes/07-find.md:297 shell-novice/_episodes/07-find.md:308
msgid "> {: .source}"
msgstr "> {: .source}"

#: shell-novice/_episodes/04-pipefilter.md:318
msgid ""
">\n"
"> the output is:\n"
">\n"
"> ~~~\n"
"> 10\n"
"> 19\n"
"> 2\n"
"> 22\n"
"> 6\n"
"> ~~~"
msgstr ""
">\n"
"> the output is:\n"
">\n"
"> ~~~\n"
"> 10\n"
"> 19\n"
"> 2\n"
"> 22\n"
"> 6\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:329
msgid ""
">\n"
"> If we run `sort -n` on the same input, we get this instead:\n"
">\n"
"> ~~~\n"
"> 2\n"
"> 6\n"
"> 10\n"
"> 19\n"
"> 22\n"
"> ~~~"
msgstr ""
">\n"
"> If we run `sort -n` on the same input, we get this instead:\n"
">\n"
"> ~~~\n"
"> 2\n"
"> 6\n"
"> 10\n"
"> 19\n"
"> 22\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:340
msgid ""
">\n"
"> Explain why `-n` has this effect.\n"
">\n"
"> > ## Solution\n"
"> > The `-n` flag specifies a numeric sort, rather than alphabetical."
msgstr ""
">\n"
"> Explain why `-n` has this effect.\n"
">\n"
"> > ## Solution\n"
"> > The `-n` flag specifies a numeric sort, rather than alphabetical."

#: shell-novice/_episodes/04-pipefilter.md:348
msgid ""
"We will also use the `-n` flag to specify that the sort is\n"
"numerical instead of alphabetical.\n"
"This does *not* change the file;\n"
"instead, it sends the sorted result to the screen:"
msgstr ""
"We will also use the `-n` flag to specify that the sort is\n"
"numerical instead of alphabetical.\n"
"This does *not* change the file;\n"
"instead, it sends the sorted result to the screen:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:353
msgid ""
"~~~\n"
"$ sort -n lengths.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ sort -n lengths.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:358
msgid ""
"~~~\n"
"  9  methane.pdb\n"
" 12  ethane.pdb\n"
" 15  propane.pdb\n"
" 20  cubane.pdb\n"
" 21  pentane.pdb\n"
" 30  octane.pdb\n"
"107  total\n"
"~~~"
msgstr ""
"~~~\n"
"  9  methane.pdb\n"
" 12  ethane.pdb\n"
" 15  propane.pdb\n"
" 20  cubane.pdb\n"
" 21  pentane.pdb\n"
" 30  octane.pdb\n"
"107  total\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:369
msgid ""
"We can put the sorted list of lines in another temporary file called `sorted-"
"lengths.txt`\n"
"by putting `> sorted-lengths.txt` after the command,\n"
"just as we used `> lengths.txt` to put the output of `wc` into `lengths."
"txt`.\n"
"Once we've done that,\n"
"we can run another command called `head` to get the first few lines in "
"`sorted-lengths.txt`:"
msgstr ""
"We can put the sorted list of lines in another temporary file called `sorted-"
"lengths.txt`\n"
"by putting `> sorted-lengths.txt` after the command,\n"
"just as we used `> lengths.txt` to put the output of `wc` into `lengths."
"txt`.\n"
"Once we've done that,\n"
"we can run another command called `head` to get the first few lines in "
"`sorted-lengths.txt`:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:375
msgid ""
"~~~\n"
"$ sort -n lengths.txt > sorted-lengths.txt\n"
"$ head -n 1 sorted-lengths.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ sort -n lengths.txt > sorted-lengths.txt\n"
"$ head -n 1 sorted-lengths.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:381
#: shell-novice/_episodes/04-pipefilter.md:420
msgid ""
"~~~\n"
"  9  methane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"  9  methane.pdb\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:386
msgid ""
"Using `-n 1` with `head` tells it that\n"
"we only want the first line of the file;\n"
"`-n 20` would get the first 20,\n"
"and so on.\n"
"Since `sorted-lengths.txt` contains the lengths of our files ordered from "
"least to greatest,\n"
"the output of `head` must be the file with the fewest lines."
msgstr ""
"Using `-n 1` with `head` tells it that\n"
"we only want the first line of the file;\n"
"`-n 20` would get the first 20,\n"
"and so on.\n"
"Since `sorted-lengths.txt` contains the lengths of our files ordered from "
"least to greatest,\n"
"the output of `head` must be the file with the fewest lines."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:393
msgid "> ## Redirecting to the same file"
msgstr "> ## Redirecting to the same file"

#: shell-novice/_episodes/04-pipefilter.md:394
msgid ""
">\n"
"> It's a very bad idea to try redirecting\n"
"> the output of a command that operates on a file\n"
"> to the same file. For example:\n"
">\n"
"> ~~~\n"
"> $ sort -n lengths.txt > lengths.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Doing something like this may give you\n"
"> incorrect results and/or delete\n"
"> the contents of `lengths.txt`."
msgstr ""
">\n"
"> It's a very bad idea to try redirecting\n"
"> the output of a command that operates on a file\n"
"> to the same file. For example:\n"
">\n"
"> ~~~\n"
"> $ sort -n lengths.txt > lengths.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Doing something like this may give you\n"
"> incorrect results and/or delete\n"
"> the contents of `lengths.txt`."

#: shell-novice/_episodes/04-pipefilter.md:409
msgid ""
"If you think this is confusing,\n"
"you're in good company:\n"
"even once you understand what `wc`, `sort`, and `head` do,\n"
"all those intermediate files make it hard to follow what's going on.\n"
"We can make it easier to understand by running `sort` and `head` together:"
msgstr ""
"If you think this is confusing,\n"
"you're in good company:\n"
"even once you understand what `wc`, `sort`, and `head` do,\n"
"all those intermediate files make it hard to follow what's going on.\n"
"We can make it easier to understand by running `sort` and `head` together:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:415
msgid ""
"~~~\n"
"$ sort -n lengths.txt | head -n 1\n"
"~~~"
msgstr ""
"~~~\n"
"$ sort -n lengths.txt | head -n 1\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:425
msgid ""
"The vertical bar, `|`, between the two commands is called a **pipe**.\n"
"It tells the shell that we want to use\n"
"the output of the command on the left\n"
"as the input to the command on the right.\n"
"The computer might create a temporary file if it needs to,\n"
"or copy data from one program to the other in memory,\n"
"or something else entirely;\n"
"we don't have to know or care."
msgstr ""
"The vertical bar, `|`, between the two commands is called a **pipe**.\n"
"It tells the shell that we want to use\n"
"the output of the command on the left\n"
"as the input to the command on the right.\n"
"The computer might create a temporary file if it needs to,\n"
"or copy data from one program to the other in memory,\n"
"or something else entirely;\n"
"we don't have to know or care."

#: shell-novice/_episodes/04-pipefilter.md:434
msgid ""
"Nothing prevents us from chaining pipes consecutively.\n"
"That is, we can for example send the output of `wc` directly to `sort`,\n"
"and then the resulting output to `head`.\n"
"Thus we first use a pipe to send the output of `wc` to `sort`:"
msgstr ""
"Nothing prevents us from chaining pipes consecutively.\n"
"That is, we can for example send the output of `wc` directly to `sort`,\n"
"and then the resulting output to `head`.\n"
"Thus we first use a pipe to send the output of `wc` to `sort`:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:439
#: shell-novice/_episodes/06-script.md:223
msgid ""
"~~~\n"
"$ wc -l *.pdb | sort -n\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l *.pdb | sort -n\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:444
msgid ""
"~~~\n"
"   9 methane.pdb\n"
"  12 ethane.pdb\n"
"  15 propane.pdb\n"
"  20 cubane.pdb\n"
"  21 pentane.pdb\n"
"  30 octane.pdb\n"
" 107 total\n"
"~~~"
msgstr ""
"~~~\n"
"   9 methane.pdb\n"
"  12 ethane.pdb\n"
"  15 propane.pdb\n"
"  20 cubane.pdb\n"
"  21 pentane.pdb\n"
"  30 octane.pdb\n"
" 107 total\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:455
msgid ""
"And now we send the output of this pipe, through another pipe, to `head`, so "
"that the full pipeline becomes:"
msgstr ""
"And now we send the output of this pipe, through another pipe, to `head`, so "
"that the full pipeline becomes:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:457
msgid ""
"~~~\n"
"$ wc -l *.pdb | sort -n | head -n 1\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l *.pdb | sort -n | head -n 1\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:462
msgid ""
"~~~\n"
"   9  methane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"   9  methane.pdb\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:467
msgid ""
"This is exactly like a mathematician nesting functions like *log(3x)*\n"
"and saying \"the log of three times *x*\".\n"
"In our case,\n"
"the calculation is \"head of sort of line count of `*.pdb`\"."
msgstr ""
"This is exactly like a mathematician nesting functions like *log(3x)*\n"
"and saying \"the log of three times *x*\".\n"
"In our case,\n"
"the calculation is \"head of sort of line count of `*.pdb`\"."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:472
msgid "> ## Piping Commands Together"
msgstr "> ## Piping Commands Together"

#: shell-novice/_episodes/04-pipefilter.md:473
msgid ""
">\n"
"> In our current directory, we want to find the 3 files which have the least "
"number of\n"
"> lines. Which command listed below would work?\n"
">\n"
"> 1. `wc -l * > sort -n > head -n 3`\n"
"> 2. `wc -l * | sort -n | head -n 1-3`\n"
"> 3. `wc -l * | head -n 3 | sort -n`\n"
"> 4. `wc -l * | sort -n | head -n 3`\n"
">\n"
"> > ## Solution\n"
"> > Option 4 is the solution.\n"
"> > The pipe character `|` is used to feed the standard output from one "
"process to\n"
"> > the standard input of another.\n"
"> > `>` is used to redirect standard output to a file.\n"
"> > Try it in the `data-shell/molecules` directory!"
msgstr ""
">\n"
"> In our current directory, we want to find the 3 files which have the least "
"number of\n"
"> lines. Which command listed below would work?\n"
">\n"
"> 1. `wc -l * > sort -n > head -n 3`\n"
"> 2. `wc -l * | sort -n | head -n 1-3`\n"
"> 3. `wc -l * | head -n 3 | sort -n`\n"
"> 4. `wc -l * | sort -n | head -n 3`\n"
">\n"
"> > ## Solution\n"
"> > Option 4 is the solution.\n"
"> > The pipe character `|` is used to feed the standard output from one "
"process to\n"
"> > the standard input of another.\n"
"> > `>` is used to redirect standard output to a file.\n"
"> > Try it in the `data-shell/molecules` directory!"

#: shell-novice/_episodes/04-pipefilter.md:491
msgid ""
"Here's what actually happens behind the scenes when we create a pipe.\n"
"When a computer runs a program --- any program --- it creates a **process**\n"
"in memory to hold the program's software and its current state.\n"
"Every process has an input channel called **standard input**.\n"
"(By this point, you may be surprised that the name is so memorable, but "
"don't worry:\n"
"most Unix programmers call it \"stdin\").\n"
"Every process also has a default output channel called **standard output**\n"
"(or \"stdout\"). A second output channel called **standard error** (stderr) "
"also\n"
"exists. This channel is typically used for error or diagnostic messages, and "
"it\n"
"allows a user to pipe the output of one program into another while still "
"receiving \n"
"error messages in the terminal. "
msgstr ""
"Here's what actually happens behind the scenes when we create a pipe.\n"
"When a computer runs a program --- any program --- it creates a **process**\n"
"in memory to hold the program's software and its current state.\n"
"Every process has an input channel called **standard input**.\n"
"(By this point, you may be surprised that the name is so memorable, but "
"don't worry:\n"
"most Unix programmers call it \"stdin\").\n"
"Every process also has a default output channel called **standard output**\n"
"(or \"stdout\"). A second output channel called **standard error** (stderr) "
"also\n"
"exists. This channel is typically used for error or diagnostic messages, and "
"it\n"
"allows a user to pipe the output of one program into another while still "
"receiving \n"
"error messages in the terminal. "

#: shell-novice/_episodes/04-pipefilter.md:503
msgid ""
"The shell is actually just another program.\n"
"Under normal circumstances,\n"
"whatever we type on the keyboard is sent to the shell on its standard "
"input,\n"
"and whatever it produces on standard output is displayed on our screen.\n"
"When we tell the shell to run a program,\n"
"it creates a new process\n"
"and temporarily sends whatever we type on our keyboard to that process's "
"standard input,\n"
"and whatever the process sends to standard output to the screen."
msgstr ""
"The shell is actually just another program.\n"
"Under normal circumstances,\n"
"whatever we type on the keyboard is sent to the shell on its standard "
"input,\n"
"and whatever it produces on standard output is displayed on our screen.\n"
"When we tell the shell to run a program,\n"
"it creates a new process\n"
"and temporarily sends whatever we type on our keyboard to that process's "
"standard input,\n"
"and whatever the process sends to standard output to the screen."

#: shell-novice/_episodes/04-pipefilter.md:512
msgid ""
"Here's what happens when we run `wc -l *.pdb > lengths.txt`.\n"
"The shell starts by telling the computer to create a new process to run the "
"`wc` program.\n"
"Since we've provided some filenames as arguments,\n"
"`wc` reads from them instead of from standard input.\n"
"And since we've used `>` to redirect output to a file,\n"
"the shell connects the process's standard output to that file."
msgstr ""
"Here's what happens when we run `wc -l *.pdb > lengths.txt`.\n"
"The shell starts by telling the computer to create a new process to run the "
"`wc` program.\n"
"Since we've provided some filenames as arguments,\n"
"`wc` reads from them instead of from standard input.\n"
"And since we've used `>` to redirect output to a file,\n"
"the shell connects the process's standard output to that file."

#: shell-novice/_episodes/04-pipefilter.md:519
msgid ""
"If we run `wc -l *.pdb | sort -n` instead,\n"
"the shell creates two processes\n"
"(one for each process in the pipe)\n"
"so that `wc` and `sort` run simultaneously.\n"
"The standard output of `wc` is fed directly to the standard input of "
"`sort`;\n"
"since there's no redirection with `>`,\n"
"`sort`'s output goes to the screen.\n"
"And if we run `wc -l *.pdb | sort -n | head -n 1`,\n"
"we get three processes with data flowing from the files,\n"
"through `wc` to `sort`,\n"
"and from `sort` through `head` to the screen."
msgstr ""
"If we run `wc -l *.pdb | sort -n` instead,\n"
"the shell creates two processes\n"
"(one for each process in the pipe)\n"
"so that `wc` and `sort` run simultaneously.\n"
"The standard output of `wc` is fed directly to the standard input of "
"`sort`;\n"
"since there's no redirection with `>`,\n"
"`sort`'s output goes to the screen.\n"
"And if we run `wc -l *.pdb | sort -n | head -n 1`,\n"
"we get three processes with data flowing from the files,\n"
"through `wc` to `sort`,\n"
"and from `sort` through `head` to the screen."

#: shell-novice/_episodes/04-pipefilter.md:531
msgid "![Redirects and Pipes](../fig/redirects-and-pipes.png)"
msgstr "![Redirects and Pipes](../fig/redirects-and-pipes.png)"

#: shell-novice/_episodes/04-pipefilter.md:533
msgid ""
"This simple idea is why Unix has been so successful.\n"
"Instead of creating enormous programs that try to do many different things,\n"
"Unix programmers focus on creating lots of simple tools that each do one job "
"well,\n"
"and that work well with each other.\n"
"This programming model is called \"pipes and filters\".\n"
"We've already seen pipes;\n"
"a **filter** is a program like `wc` or `sort`\n"
"that transforms a stream of input into a stream of output.\n"
"Almost all of the standard Unix tools can work this way:\n"
"unless told to do otherwise,\n"
"they read from standard input,\n"
"do something with what they've read,\n"
"and write to standard output."
msgstr ""
"This simple idea is why Unix has been so successful.\n"
"Instead of creating enormous programs that try to do many different things,\n"
"Unix programmers focus on creating lots of simple tools that each do one job "
"well,\n"
"and that work well with each other.\n"
"This programming model is called \"pipes and filters\".\n"
"We've already seen pipes;\n"
"a **filter** is a program like `wc` or `sort`\n"
"that transforms a stream of input into a stream of output.\n"
"Almost all of the standard Unix tools can work this way:\n"
"unless told to do otherwise,\n"
"they read from standard input,\n"
"do something with what they've read,\n"
"and write to standard output."

#: shell-novice/_episodes/04-pipefilter.md:547
msgid ""
"The key is that any program that reads lines of text from standard input\n"
"and writes lines of text to standard output\n"
"can be combined with every other program that behaves this way as well.\n"
"You can *and should* write your programs this way\n"
"so that you and other people can put those programs into pipes to multiply "
"their power."
msgstr ""
"The key is that any program that reads lines of text from standard input\n"
"and writes lines of text to standard output\n"
"can be combined with every other program that behaves this way as well.\n"
"You can *and should* write your programs this way\n"
"so that you and other people can put those programs into pipes to multiply "
"their power."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:553
msgid "> ## Redirecting Input"
msgstr "> ## Redirecting Input"

#: shell-novice/_episodes/04-pipefilter.md:554
msgid ""
">\n"
"> As well as using `>` to redirect a program's output, we can use `<` to\n"
"> redirect its input, i.e., to read from a file instead of from standard\n"
"> input. For example, instead of writing `wc ammonia.pdb`, we could write\n"
"> `wc < ammonia.pdb`. In the first case, `wc` gets a command line\n"
"> argument telling it what file to open. In the second, `wc` doesn't have\n"
"> any command line arguments, so it reads from standard input, but we\n"
"> have told the shell to send the contents of `ammonia.pdb` to `wc`'s\n"
"> standard input."
msgstr ""
">\n"
"> As well as using `>` to redirect a program's output, we can use `<` to\n"
"> redirect its input, i.e., to read from a file instead of from standard\n"
"> input. For example, instead of writing `wc ammonia.pdb`, we could write\n"
"> `wc < ammonia.pdb`. In the first case, `wc` gets a command line\n"
"> argument telling it what file to open. In the second, `wc` doesn't have\n"
"> any command line arguments, so it reads from standard input, but we\n"
"> have told the shell to send the contents of `ammonia.pdb` to `wc`'s\n"
"> standard input."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:565
msgid "> ## What Does `<` Mean?"
msgstr "> ## What Does `<` Mean?"

#: shell-novice/_episodes/04-pipefilter.md:566
msgid ""
">\n"
"> Change directory to `data-shell` (the top level of our downloaded example "
"data).\n"
">\n"
"> What is the difference between:\n"
">\n"
"> ~~~\n"
"> $ wc -l notes.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> and:\n"
">\n"
"> ~~~\n"
"> $ wc -l < notes.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > `<` is used to redirect input to a command. \n"
"> >\n"
"> > In both examples, the shell returns the number of lines from the input "
"to\n"
"> > the `wc` command.\n"
"> > In the first example, the input is the file `notes.txt` and the file "
"name is\n"
"> > given in the output from the `wc` command.\n"
"> > In the second example, the contents of the file `notes.txt` are "
"redirected to\n"
"> > standard input.\n"
"> > It is as if we have entered the contents of the file by typing at the "
"prompt.\n"
"> > Hence the file name is not given in the output - just the number of "
"lines.\n"
"> > Try this for yourself:\n"
"> >\n"
"> > ```\n"
"> > $ wc -l\n"
"> > this\n"
"> > is\n"
"> > a test\n"
"> > Ctrl-D # This lets the shell know you have finished typing the input\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ```\n"
"> > 3\n"
"> > ```\n"
"> > {: .output}"
msgstr ""
">\n"
"> Change directory to `data-shell` (the top level of our downloaded example "
"data).\n"
">\n"
"> What is the difference between:\n"
">\n"
"> ~~~\n"
"> $ wc -l notes.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> and:\n"
">\n"
"> ~~~\n"
"> $ wc -l < notes.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > `<` is used to redirect input to a command. \n"
"> >\n"
"> > In both examples, the shell returns the number of lines from the input "
"to\n"
"> > the `wc` command.\n"
"> > In the first example, the input is the file `notes.txt` and the file "
"name is\n"
"> > given in the output from the `wc` command.\n"
"> > In the second example, the contents of the file `notes.txt` are "
"redirected to\n"
"> > standard input.\n"
"> > It is as if we have entered the contents of the file by typing at the "
"prompt.\n"
"> > Hence the file name is not given in the output - just the number of "
"lines.\n"
"> > Try this for yourself:\n"
"> >\n"
"> > ```\n"
"> > $ wc -l\n"
"> > this\n"
"> > is\n"
"> > a test\n"
"> > Ctrl-D # This lets the shell know you have finished typing the input\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ```\n"
"> > 3\n"
"> > ```\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:612
msgid "> ## Why Does `uniq` Only Remove Adjacent Duplicates?"
msgstr "> ## Why Does `uniq` Only Remove Adjacent Duplicates?"

#: shell-novice/_episodes/04-pipefilter.md:613
msgid ""
">\n"
"> The command `uniq` removes adjacent duplicated lines from its input.\n"
"> For example, the file `data-shell/data/salmon.txt` contains:\n"
">\n"
"> ~~~\n"
"> coho\n"
"> coho\n"
"> steelhead\n"
"> coho\n"
"> steelhead\n"
"> steelhead\n"
"> ~~~"
msgstr ""
">\n"
"> The command `uniq` removes adjacent duplicated lines from its input.\n"
"> For example, the file `data-shell/data/salmon.txt` contains:\n"
">\n"
"> ~~~\n"
"> coho\n"
"> coho\n"
"> steelhead\n"
"> coho\n"
"> steelhead\n"
"> steelhead\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:626
msgid ""
">\n"
"> Running the command `uniq salmon.txt` from the `data-shell/data` directory "
"produces:\n"
">\n"
"> ~~~\n"
"> coho\n"
"> steelhead\n"
"> coho\n"
"> steelhead\n"
"> ~~~"
msgstr ""
">\n"
"> Running the command `uniq salmon.txt` from the `data-shell/data` directory "
"produces:\n"
">\n"
"> ~~~\n"
"> coho\n"
"> steelhead\n"
"> coho\n"
"> steelhead\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:636
msgid ""
">\n"
"> Why do you think `uniq` only removes *adjacent* duplicated lines?\n"
"> (Hint: think about very large data sets.) What other command could\n"
"> you combine with it in a pipe to remove all duplicated lines?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ sort salmon.txt | uniq\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Why do you think `uniq` only removes *adjacent* duplicated lines?\n"
"> (Hint: think about very large data sets.) What other command could\n"
"> you combine with it in a pipe to remove all duplicated lines?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ sort salmon.txt | uniq\n"
"> > ```\n"
"> > {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:649
msgid "> ## Pipe Reading Comprehension"
msgstr "> ## Pipe Reading Comprehension"

#: shell-novice/_episodes/04-pipefilter.md:650
msgid ""
">\n"
"> A file called `animals.txt` (in the `data-shell/data` folder) contains the "
"following data:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer\n"
"> 2012-11-05,rabbit\n"
"> 2012-11-05,raccoon\n"
"> 2012-11-06,rabbit\n"
"> 2012-11-06,deer\n"
"> 2012-11-06,fox\n"
"> 2012-11-07,rabbit\n"
"> 2012-11-07,bear\n"
"> ~~~"
msgstr ""
">\n"
"> A file called `animals.txt` (in the `data-shell/data` folder) contains the "
"following data:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer\n"
"> 2012-11-05,rabbit\n"
"> 2012-11-05,raccoon\n"
"> 2012-11-06,rabbit\n"
"> 2012-11-06,deer\n"
"> 2012-11-06,fox\n"
"> 2012-11-07,rabbit\n"
"> 2012-11-07,bear\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:664
msgid ""
">\n"
"> What text passes through each of the pipes and the final redirect in the "
"pipeline below?\n"
">\n"
"> ~~~\n"
"> $ cat animals.txt | head -n 5 | tail -n 3 | sort -r > final.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> Hint: build the pipeline up one command at a time to test your "
"understanding"
msgstr ""
">\n"
"> What text passes through each of the pipes and the final redirect in the "
"pipeline below?\n"
">\n"
"> ~~~\n"
"> $ cat animals.txt | head -n 5 | tail -n 3 | sort -r > final.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> Hint: build the pipeline up one command at a time to test your "
"understanding"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:674
msgid "> ## Pipe Construction"
msgstr "> ## Pipe Construction"

#: shell-novice/_episodes/04-pipefilter.md:675
msgid ""
">\n"
"> For the file `animals.txt` from the previous exercise, the command:\n"
">\n"
"> ~~~\n"
"> $ cut -d , -f 2 animals.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> uses the -d flag to separate each line by comma, and the -f flag\n"
"> to print the second field in each line, to give the following output:\n"
">\n"
"> ~~~\n"
"> deer\n"
"> rabbit\n"
"> raccoon\n"
"> rabbit\n"
"> deer\n"
"> fox\n"
"> rabbit\n"
"> bear\n"
"> ~~~"
msgstr ""
">\n"
"> For the file `animals.txt` from the previous exercise, the command:\n"
">\n"
"> ~~~\n"
"> $ cut -d , -f 2 animals.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> uses the -d flag to separate each line by comma, and the -f flag\n"
"> to print the second field in each line, to give the following output:\n"
">\n"
"> ~~~\n"
"> deer\n"
"> rabbit\n"
"> raccoon\n"
"> rabbit\n"
"> deer\n"
"> fox\n"
"> rabbit\n"
"> bear\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:697
msgid ""
">\n"
"> What other command(s) could be added to this in a pipeline to find\n"
"> out what animals the file contains (without any duplicates in their\n"
"> names)?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cut -d , -f 2 animals.txt | sort | uniq\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> What other command(s) could be added to this in a pipeline to find\n"
"> out what animals the file contains (without any duplicates in their\n"
"> names)?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cut -d , -f 2 animals.txt | sort | uniq\n"
"> > ```\n"
"> > {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:710
msgid "> ## Which Pipe?"
msgstr "> ## Which Pipe?"

#: shell-novice/_episodes/04-pipefilter.md:711
msgid ""
">\n"
"> The file `animals.txt` contains 586 lines of data formatted as follows:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer\n"
"> 2012-11-05,rabbit\n"
"> 2012-11-05,raccoon\n"
"> 2012-11-06,rabbit\n"
"> ...\n"
"> ~~~"
msgstr ""
">\n"
"> The file `animals.txt` contains 586 lines of data formatted as follows:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer\n"
"> 2012-11-05,rabbit\n"
"> 2012-11-05,raccoon\n"
"> 2012-11-06,rabbit\n"
"> ...\n"
"> ~~~"

#: shell-novice/_episodes/04-pipefilter.md:722
msgid ""
">\n"
"> Assuming your current directory is `data-shell/data/`,\n"
"> what command would you use to produce a table that shows\n"
"> the total count of each type of animal in the file?\n"
">\n"
"> 1.  `grep {deer, rabbit, raccoon, deer, fox, bear} animals.txt | wc -l`\n"
"> 2.  `sort animals.txt | uniq -c`\n"
"> 3.  `sort -t, -k2,2 animals.txt | uniq -c`\n"
"> 4.  `cut -d, -f 2 animals.txt | uniq -c`\n"
"> 5.  `cut -d, -f 2 animals.txt | sort | uniq -c`\n"
"> 6.  `cut -d, -f 2 animals.txt | sort | uniq -c | wc -l`\n"
">\n"
"> > ## Solution\n"
"> > Option 5. is the correct answer.\n"
"> > If you have difficulty understanding why, try running the commands, or "
"sub-sections of\n"
"> > the pipelines (make sure you are in the `data-shell/data` directory)."
msgstr ""
">\n"
"> Assuming your current directory is `data-shell/data/`,\n"
"> what command would you use to produce a table that shows\n"
"> the total count of each type of animal in the file?\n"
">\n"
"> 1.  `grep {deer, rabbit, raccoon, deer, fox, bear} animals.txt | wc -l`\n"
"> 2.  `sort animals.txt | uniq -c`\n"
"> 3.  `sort -t, -k2,2 animals.txt | uniq -c`\n"
"> 4.  `cut -d, -f 2 animals.txt | uniq -c`\n"
"> 5.  `cut -d, -f 2 animals.txt | sort | uniq -c`\n"
"> 6.  `cut -d, -f 2 animals.txt | sort | uniq -c | wc -l`\n"
">\n"
"> > ## Solution\n"
"> > Option 5. is the correct answer.\n"
"> > If you have difficulty understanding why, try running the commands, or "
"sub-sections of\n"
"> > the pipelines (make sure you are in the `data-shell/data` directory)."

# header
#: shell-novice/_episodes/04-pipefilter.md:741
msgid "## Nelle's Pipeline: Checking Files"
msgstr "## Nelle's Pipeline: Checking Files"

#: shell-novice/_episodes/04-pipefilter.md:743
msgid ""
"Nelle has run her samples through the assay machines\n"
"and created 17 files in the `north-pacific-gyre/2012-07-03` directory "
"described earlier.\n"
"As a quick sanity check, starting from her home directory, Nelle types:"
msgstr ""
"Nelle has run her samples through the assay machines\n"
"and created 17 files in the `north-pacific-gyre/2012-07-03` directory "
"described earlier.\n"
"As a quick sanity check, starting from her home directory, Nelle types:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:747
msgid ""
"~~~\n"
"$ cd north-pacific-gyre/2012-07-03\n"
"$ wc -l *.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd north-pacific-gyre/2012-07-03\n"
"$ wc -l *.txt\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:753
msgid "The output is 18 lines that look like this:"
msgstr "The output is 18 lines that look like this:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:755
msgid ""
"~~~\n"
"300 NENE01729A.txt\n"
"300 NENE01729B.txt\n"
"300 NENE01736A.txt\n"
"300 NENE01751A.txt\n"
"300 NENE01751B.txt\n"
"300 NENE01812A.txt\n"
"... ...\n"
"~~~"
msgstr ""
"~~~\n"
"300 NENE01729A.txt\n"
"300 NENE01729B.txt\n"
"300 NENE01736A.txt\n"
"300 NENE01751A.txt\n"
"300 NENE01751B.txt\n"
"300 NENE01812A.txt\n"
"... ...\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:766
msgid "Now she types this:"
msgstr "Now she types this:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:768
msgid ""
"~~~\n"
"$ wc -l *.txt | sort -n | head -n 5\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l *.txt | sort -n | head -n 5\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:773
msgid ""
"~~~\n"
" 240 NENE02018B.txt\n"
" 300 NENE01729A.txt\n"
" 300 NENE01729B.txt\n"
" 300 NENE01736A.txt\n"
" 300 NENE01751A.txt\n"
"~~~"
msgstr ""
"~~~\n"
" 240 NENE02018B.txt\n"
" 300 NENE01729A.txt\n"
" 300 NENE01729B.txt\n"
" 300 NENE01736A.txt\n"
" 300 NENE01751A.txt\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:782
msgid ""
"Whoops: one of the files is 60 lines shorter than the others.\n"
"When she goes back and checks it,\n"
"she sees that she did that assay at 8:00 on a Monday morning --- someone\n"
"was probably in using the machine on the weekend,\n"
"and she forgot to reset it.\n"
"Before re-running that sample,\n"
"she checks to see if any files have too much data:"
msgstr ""
"Whoops: one of the files is 60 lines shorter than the others.\n"
"When she goes back and checks it,\n"
"she sees that she did that assay at 8:00 on a Monday morning --- someone\n"
"was probably in using the machine on the weekend,\n"
"and she forgot to reset it.\n"
"Before re-running that sample,\n"
"she checks to see if any files have too much data:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:790
msgid ""
"~~~\n"
"$ wc -l *.txt | sort -n | tail -n 5\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l *.txt | sort -n | tail -n 5\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:795
msgid ""
"~~~\n"
" 300 NENE02040B.txt\n"
" 300 NENE02040Z.txt\n"
" 300 NENE02043A.txt\n"
" 300 NENE02043B.txt\n"
"5040 total\n"
"~~~"
msgstr ""
"~~~\n"
" 300 NENE02040B.txt\n"
" 300 NENE02040Z.txt\n"
" 300 NENE02043A.txt\n"
" 300 NENE02043B.txt\n"
"5040 total\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:804
msgid ""
"Those numbers look good --- but what's that 'Z' doing there in the third-to-"
"last line?\n"
"All of her samples should be marked 'A' or 'B';\n"
"by convention,\n"
"her lab uses 'Z' to indicate samples with missing information.\n"
"To find others like it, she does this:"
msgstr ""
"Those numbers look good --- but what's that 'Z' doing there in the third-to-"
"last line?\n"
"All of her samples should be marked 'A' or 'B';\n"
"by convention,\n"
"her lab uses 'Z' to indicate samples with missing information.\n"
"To find others like it, she does this:"

# code block
#: shell-novice/_episodes/04-pipefilter.md:810
msgid ""
"~~~\n"
"$ ls *Z.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls *Z.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/04-pipefilter.md:815
msgid ""
"~~~\n"
"NENE01971Z.txt    NENE02040Z.txt\n"
"~~~"
msgstr ""
"~~~\n"
"NENE01971Z.txt    NENE02040Z.txt\n"
"~~~"

#: shell-novice/_episodes/04-pipefilter.md:820
msgid ""
"Sure enough,\n"
"when she checks the log on her laptop,\n"
"there's no depth recorded for either of those samples.\n"
"Since it's too late to get the information any other way,\n"
"she must exclude those two files from her analysis.\n"
"She could just delete them using `rm`,\n"
"but there are actually some analyses she might do later where depth doesn't "
"matter,\n"
"so instead, she'll just be careful later on to select files using the "
"wildcard expression `*[AB].txt`.\n"
"As always,\n"
"the `*` matches any number of characters;\n"
"the expression `[AB]` matches either an 'A' or a 'B',\n"
"so this matches all the valid data files she has."
msgstr ""
"Sure enough,\n"
"when she checks the log on her laptop,\n"
"there's no depth recorded for either of those samples.\n"
"Since it's too late to get the information any other way,\n"
"she must exclude those two files from her analysis.\n"
"She could just delete them using `rm`,\n"
"but there are actually some analyses she might do later where depth doesn't "
"matter,\n"
"so instead, she'll just be careful later on to select files using the "
"wildcard expression `*[AB].txt`.\n"
"As always,\n"
"the `*` matches any number of characters;\n"
"the expression `[AB]` matches either an 'A' or a 'B',\n"
"so this matches all the valid data files she has."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:833
msgid "> ## Wildcard Expressions"
msgstr "> ## Wildcard Expressions"

#: shell-novice/_episodes/04-pipefilter.md:834
msgid ""
">\n"
"> Wildcard expressions can be very complex, but you can sometimes write\n"
"> them in ways that only use simple syntax, at the expense of being a bit\n"
"> more verbose.  \n"
"> Consider the directory `data-shell/north-pacific-gyre/2012-07-03` :\n"
"> the wildcard expression `*[AB].txt`\n"
"> matches all files ending in `A.txt` or `B.txt`. Imagine you forgot about\n"
"> this.\n"
">\n"
"> 1.  Can you match the same set of files with basic wildcard expressions\n"
">     that do not use the `[]` syntax? *Hint*: You may need more than one\n"
">     expression.\n"
">\n"
"> 2.  The expression that you found and the expression from the lesson match "
"the\n"
">     same set of files in this example. What is the small difference "
"between the\n"
">     outputs?\n"
">\n"
"> 3.  Under what circumstances would your new expression produce an error "
"message\n"
">     where the original one would not?\n"
">\n"
"> > ## Solution\n"
"> > 1. \n"
"> >\n"
"> > \t```\n"
"> > \t$ ls *A.txt\n"
"> > \t$ ls *B.txt\n"
"> > \t```\n"
"> >\t{: .language-bash}\n"
"> > 2. The output from the new commands is separated because there are two "
"commands.\n"
"> > 3. When there are no files ending in `A.txt`, or there are no files "
"ending in\n"
"> > `B.txt`."
msgstr ""
">\n"
"> Wildcard expressions can be very complex, but you can sometimes write\n"
"> them in ways that only use simple syntax, at the expense of being a bit\n"
"> more verbose.  \n"
"> Consider the directory `data-shell/north-pacific-gyre/2012-07-03` :\n"
"> the wildcard expression `*[AB].txt`\n"
"> matches all files ending in `A.txt` or `B.txt`. Imagine you forgot about\n"
"> this.\n"
">\n"
"> 1.  Can you match the same set of files with basic wildcard expressions\n"
">     that do not use the `[]` syntax? *Hint*: You may need more than one\n"
">     expression.\n"
">\n"
"> 2.  The expression that you found and the expression from the lesson match "
"the\n"
">     same set of files in this example. What is the small difference "
"between the\n"
">     outputs?\n"
">\n"
"> 3.  Under what circumstances would your new expression produce an error "
"message\n"
">     where the original one would not?\n"
">\n"
"> > ## Solution\n"
"> > 1. \n"
"> >\n"
"> > \t```\n"
"> > \t$ ls *A.txt\n"
"> > \t$ ls *B.txt\n"
"> > \t```\n"
"> >\t{: .language-bash}\n"
"> > 2. The output from the new commands is separated because there are two "
"commands.\n"
"> > 3. When there are no files ending in `A.txt`, or there are no files "
"ending in\n"
"> > `B.txt`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/04-pipefilter.md:868
msgid "> ## Removing Unneeded Files"
msgstr "> ## Removing Unneeded Files"

#: shell-novice/_episodes/04-pipefilter.md:869
msgid ""
">\n"
"> Suppose you want to delete your processed data files, and only keep\n"
"> your raw files and processing script to save storage.\n"
"> The raw files end in `.dat` and the processed files end in `.txt`.\n"
"> Which of the following would remove all the processed data files,\n"
"> and *only* the processed data files?\n"
">\n"
"> 1. `rm ?.txt`\n"
"> 2. `rm *.txt`\n"
"> 3. `rm * .txt`\n"
"> 4. `rm *.*`\n"
">\n"
"> > ## Solution\n"
"> > 1. This would remove `.txt` files with one-character names\n"
"> > 2. This is correct answer\n"
"> > 3. The shell would expand `*` to match everything in the current "
"directory,\n"
"> > so the command would try to remove all matched files and an additional\n"
"> > file called `.txt`\n"
"> > 4. The shell would expand `*.*` to match all files with any extension,\n"
"> > so this command would delete all files"
msgstr ""
">\n"
"> Suppose you want to delete your processed data files, and only keep\n"
"> your raw files and processing script to save storage.\n"
"> The raw files end in `.dat` and the processed files end in `.txt`.\n"
"> Which of the following would remove all the processed data files,\n"
"> and *only* the processed data files?\n"
">\n"
"> 1. `rm ?.txt`\n"
"> 2. `rm *.txt`\n"
"> 3. `rm * .txt`\n"
"> 4. `rm *.*`\n"
">\n"
"> > ## Solution\n"
"> > 1. This would remove `.txt` files with one-character names\n"
"> > 2. This is correct answer\n"
"> > 3. The shell would expand `*` to match everything in the current "
"directory,\n"
"> > so the command would try to remove all matched files and an additional\n"
"> > file called `.txt`\n"
"> > 4. The shell would expand `*.*` to match all files with any extension,\n"
"> > so this command would delete all files"

# Front Matter
#: shell-novice/_episodes/05-loop.md:1
msgid ""
"---\n"
"title: \"Loops\"\n"
"teaching: 40\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I perform the same actions on many different files?\"\n"
"objectives:\n"
"- \"Write a loop that applies one or more commands separately to each file "
"in a set of files.\"\n"
"- \"Trace the values taken on by a loop variable during execution of the "
"loop.\"\n"
"- \"Explain the difference between a variable's name and its value.\"\n"
"- \"Explain why spaces and some punctuation characters shouldn't be used in "
"file names.\"\n"
"- \"Demonstrate how to see what commands have recently been executed.\"\n"
"- \"Re-run recently executed commands without retyping them.\"\n"
"keypoints:\n"
"- \"A `for` loop repeats commands once for every thing in a list.\"\n"
"- \"Every `for` loop needs a variable to refer to the thing it is currently "
"operating on.\"\n"
"- \"Use `$name` to expand a variable (i.e., get its value). `${name}` can "
"also be used.\"\n"
"- \"Do not use spaces, quotes, or wildcard characters such as '*' or '?' in "
"filenames, as it complicates variable expansion.\"\n"
"- \"Give files consistent names that are easy to match with wildcard "
"patterns to make it easy to select them for looping.\"\n"
"- \"Use the up-arrow key to scroll up through previous commands to edit and "
"repeat them.\"\n"
"- \"Use `Ctrl-R` to search through the previously entered commands.\"\n"
"- \"Use `history` to display recent commands, and `!number` to repeat a "
"command by number.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Loops\"\n"
"teaching: 40\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I perform the same actions on many different files?\"\n"
"objectives:\n"
"- \"Write a loop that applies one or more commands separately to each file "
"in a set of files.\"\n"
"- \"Trace the values taken on by a loop variable during execution of the "
"loop.\"\n"
"- \"Explain the difference between a variable's name and its value.\"\n"
"- \"Explain why spaces and some punctuation characters shouldn't be used in "
"file names.\"\n"
"- \"Demonstrate how to see what commands have recently been executed.\"\n"
"- \"Re-run recently executed commands without retyping them.\"\n"
"keypoints:\n"
"- \"A `for` loop repeats commands once for every thing in a list.\"\n"
"- \"Every `for` loop needs a variable to refer to the thing it is currently "
"operating on.\"\n"
"- \"Use `$name` to expand a variable (i.e., get its value). `${name}` can "
"also be used.\"\n"
"- \"Do not use spaces, quotes, or wildcard characters such as '*' or '?' in "
"filenames, as it complicates variable expansion.\"\n"
"- \"Give files consistent names that are easy to match with wildcard "
"patterns to make it easy to select them for looping.\"\n"
"- \"Use the up-arrow key to scroll up through previous commands to edit and "
"repeat them.\"\n"
"- \"Use `Ctrl-R` to search through the previously entered commands.\"\n"
"- \"Use `history` to display recent commands, and `!number` to repeat a "
"command by number.\"\n"
"---"

#: shell-novice/_episodes/05-loop.md:25
msgid ""
"**Loops** are key to productivity improvements through automation as they "
"allow us to execute\n"
"commands repetitively. Similar to wildcards and tab completion, using loops "
"also reduces the\n"
"amount of typing (and typing mistakes).\n"
"Suppose we have several hundred genome data files named `basilisk.dat`, "
"`unicorn.dat`, and so on.\n"
"In this example,\n"
"we'll use the `creatures` directory which only has two example files,\n"
"but the principles can be applied to many many more files at once.\n"
"We would like to modify these files, but also save a version of the original "
"files, naming the copies\n"
"`original-basilisk.dat` and `original-unicorn.dat`.\n"
"We can't use:"
msgstr ""
"**Loops** are key to productivity improvements through automation as they "
"allow us to execute\n"
"commands repetitively. Similar to wildcards and tab completion, using loops "
"also reduces the\n"
"amount of typing (and typing mistakes).\n"
"Suppose we have several hundred genome data files named `basilisk.dat`, "
"`unicorn.dat`, and so on.\n"
"In this example,\n"
"we'll use the `creatures` directory which only has two example files,\n"
"but the principles can be applied to many many more files at once.\n"
"We would like to modify these files, but also save a version of the original "
"files, naming the copies\n"
"`original-basilisk.dat` and `original-unicorn.dat`.\n"
"We can't use:"

# code block
#: shell-novice/_episodes/05-loop.md:36
msgid ""
"~~~\n"
"$ cp *.dat original-*.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ cp *.dat original-*.dat\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:41
msgid "because that would expand to:"
msgstr "because that would expand to:"

# code block
#: shell-novice/_episodes/05-loop.md:43
msgid ""
"~~~\n"
"$ cp basilisk.dat unicorn.dat original-*.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ cp basilisk.dat unicorn.dat original-*.dat\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:48
msgid "This wouldn't back up our files, instead we get an error:"
msgstr "This wouldn't back up our files, instead we get an error:"

# code block
#: shell-novice/_episodes/05-loop.md:50
msgid ""
"~~~\n"
"cp: target `original-*.dat' is not a directory\n"
"~~~"
msgstr ""
"~~~\n"
"cp: target `original-*.dat' is not a directory\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:55
msgid ""
"This problem arises when `cp` receives more than two inputs. When this "
"happens, it\n"
"expects the last input to be a directory where it can copy all the files it "
"was passed.\n"
"Since there is no directory named `original-*.dat` in the `creatures` "
"directory we get an\n"
"error."
msgstr ""
"This problem arises when `cp` receives more than two inputs. When this "
"happens, it\n"
"expects the last input to be a directory where it can copy all the files it "
"was passed.\n"
"Since there is no directory named `original-*.dat` in the `creatures` "
"directory we get an\n"
"error."

#: shell-novice/_episodes/05-loop.md:60
msgid ""
"Instead, we can use a **loop**\n"
"to do some operation once for each thing in a list.\n"
"Here's a simple example that displays the first three lines of each file in "
"turn:"
msgstr ""
"Instead, we can use a **loop**\n"
"to do some operation once for each thing in a list.\n"
"Here's a simple example that displays the first three lines of each file in "
"turn:"

# code block
#: shell-novice/_episodes/05-loop.md:64
msgid ""
"~~~\n"
"$ for filename in basilisk.dat unicorn.dat\n"
"> do\n"
">    head -n 3 $filename\t# Indentation within the loop aids legibility\n"
"> done\n"
"~~~"
msgstr ""
"~~~\n"
"$ for filename in basilisk.dat unicorn.dat\n"
"> do\n"
">    head -n 3 $filename\t# Indentation within the loop aids legibility\n"
"> done\n"
"~~~"

# code block
#: shell-novice/_episodes/05-loop.md:72
msgid ""
"~~~\n"
"COMMON NAME: basilisk\n"
"CLASSIFICATION: basiliscus vulgaris\n"
"UPDATED: 1745-05-02\n"
"COMMON NAME: unicorn\n"
"CLASSIFICATION: equus monoceros\n"
"UPDATED: 1738-11-24\n"
"~~~"
msgstr ""
"~~~\n"
"COMMON NAME: basilisk\n"
"CLASSIFICATION: basiliscus vulgaris\n"
"UPDATED: 1745-05-02\n"
"COMMON NAME: unicorn\n"
"CLASSIFICATION: equus monoceros\n"
"UPDATED: 1738-11-24\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:82
msgid "> ## Indentation of code within a for loop"
msgstr "> ## Indentation of code within a for loop"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:83
msgid ""
"> Note that it is common practice to indent the line(s) of code within a for "
"loop."
msgstr ""
"> Note that it is common practice to indent the line(s) of code within a for "
"loop."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:84
msgid ""
"> The only purpose is to make the code easier to read -- it is not required "
"for the loop to run."
msgstr ""
"> The only purpose is to make the code easier to read -- it is not required "
"for the loop to run."

#: shell-novice/_episodes/05-loop.md:87
msgid ""
"When the shell sees the keyword `for`,\n"
"it knows to repeat a command (or group of commands) once for each item in a "
"list.\n"
"Each time the loop runs (called an iteration), an item in the list is "
"assigned in sequence to\n"
"the **variable**, and the commands inside the loop are executed, before "
"moving on to \n"
"the next item in the list.\n"
"Inside the loop,\n"
"we call for the variable's value by putting `$` in front of it.\n"
"The `$` tells the shell interpreter to treat\n"
"the **variable** as a variable name and substitute its value in its place,\n"
"rather than treat it as text or an external command. "
msgstr ""
"When the shell sees the keyword `for`,\n"
"it knows to repeat a command (or group of commands) once for each item in a "
"list.\n"
"Each time the loop runs (called an iteration), an item in the list is "
"assigned in sequence to\n"
"the **variable**, and the commands inside the loop are executed, before "
"moving on to \n"
"the next item in the list.\n"
"Inside the loop,\n"
"we call for the variable's value by putting `$` in front of it.\n"
"The `$` tells the shell interpreter to treat\n"
"the **variable** as a variable name and substitute its value in its place,\n"
"rather than treat it as text or an external command. "

#: shell-novice/_episodes/05-loop.md:98
msgid ""
"In this example, the list is two filenames: `basilisk.dat` and `unicorn."
"dat`.\n"
"Each time the loop iterates, it will assign a file name to the variable "
"`filename`\n"
"and run the `head` command.\n"
"The first time through the loop,\n"
"`$filename` is `basilisk.dat`. \n"
"The interpreter runs the command `head` on `basilisk.dat`, \n"
"and the prints the \n"
"first three lines of `basilisk.dat`.\n"
"For the second iteration, `$filename` becomes \n"
"`unicorn.dat`. This time, the shell runs `head` on `unicorn.dat`\n"
"and prints the first three lines of `unicorn.dat`. \n"
"Since the list was only two items, the shell exits the `for` loop."
msgstr ""
"In this example, the list is two filenames: `basilisk.dat` and `unicorn."
"dat`.\n"
"Each time the loop iterates, it will assign a file name to the variable "
"`filename`\n"
"and run the `head` command.\n"
"The first time through the loop,\n"
"`$filename` is `basilisk.dat`. \n"
"The interpreter runs the command `head` on `basilisk.dat`, \n"
"and the prints the \n"
"first three lines of `basilisk.dat`.\n"
"For the second iteration, `$filename` becomes \n"
"`unicorn.dat`. This time, the shell runs `head` on `unicorn.dat`\n"
"and prints the first three lines of `unicorn.dat`. \n"
"Since the list was only two items, the shell exits the `for` loop."

#: shell-novice/_episodes/05-loop.md:111
msgid ""
"When using variables it is also\n"
"possible to put the names into curly braces to clearly delimit the variable\n"
"name: `$filename` is equivalent to `${filename}`, but is different from\n"
"`${file}name`. You may find this notation in other people's programs."
msgstr ""
"When using variables it is also\n"
"possible to put the names into curly braces to clearly delimit the variable\n"
"name: `$filename` is equivalent to `${filename}`, but is different from\n"
"`${file}name`. You may find this notation in other people's programs."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:116
msgid "> ## Variables in Loops"
msgstr "> ## Variables in Loops"

#: shell-novice/_episodes/05-loop.md:117
msgid ""
">\n"
"> This exercise refers to the `data-shell/molecules` directory.\n"
"> `ls` gives the following output:\n"
">\n"
"> ~~~\n"
"> cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> ~~~"
msgstr ""
">\n"
"> This exercise refers to the `data-shell/molecules` directory.\n"
"> `ls` gives the following output:\n"
">\n"
"> ~~~\n"
"> cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> ~~~"

#: shell-novice/_episodes/05-loop.md:125
msgid ""
">\n"
"> What is the output of the following code?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">     ls *.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Now, what is the output of the following code?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">\tls $datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Why do these two loops give different outputs?\n"
">\n"
"> > ## Solution\n"
"> > The first code block gives the same output on each iteration through\n"
"> > the loop.\n"
"> > Bash expands the wildcard `*.pdb` within the loop body (as well as\n"
"> > before the loop starts) to match all files ending in `.pdb`\n"
"> > and then lists them using `ls`.\n"
"> > The expanded loop would look like this:\n"
"> > ```\n"
"> > for datafile in cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane."
"pdb  propane.pdb\n"
"> > do\n"
"> >\tls cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  "
"propane.pdb\n"
"> > done\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ```\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > ```\n"
"> > {: .output}\n"
"> >\n"
"> > The second code block lists a different file on each loop iteration.\n"
"> > The value of the `datafile` variable is evaluated using `$datafile`,\n"
"> > and then listed using `ls`.\n"
"> >\n"
"> > ```\n"
"> > cubane.pdb\n"
"> > ethane.pdb\n"
"> > methane.pdb\n"
"> > octane.pdb\n"
"> > pentane.pdb\n"
"> > propane.pdb\n"
"> > ```\n"
"> > {: .output}"
msgstr ""
">\n"
"> What is the output of the following code?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">     ls *.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Now, what is the output of the following code?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">\tls $datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Why do these two loops give different outputs?\n"
">\n"
"> > ## Solution\n"
"> > The first code block gives the same output on each iteration through\n"
"> > the loop.\n"
"> > Bash expands the wildcard `*.pdb` within the loop body (as well as\n"
"> > before the loop starts) to match all files ending in `.pdb`\n"
"> > and then lists them using `ls`.\n"
"> > The expanded loop would look like this:\n"
"> > ```\n"
"> > for datafile in cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane."
"pdb  propane.pdb\n"
"> > do\n"
"> >\tls cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  "
"propane.pdb\n"
"> > done\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ```\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane."
"pdb\n"
"> > ```\n"
"> > {: .output}\n"
"> >\n"
"> > The second code block lists a different file on each loop iteration.\n"
"> > The value of the `datafile` variable is evaluated using `$datafile`,\n"
"> > and then listed using `ls`.\n"
"> >\n"
"> > ```\n"
"> > cubane.pdb\n"
"> > ethane.pdb\n"
"> > methane.pdb\n"
"> > octane.pdb\n"
"> > pentane.pdb\n"
"> > propane.pdb\n"
"> > ```\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:189
msgid "> ## Follow the Prompt"
msgstr "> ## Follow the Prompt"

#: shell-novice/_episodes/05-loop.md:190
msgid ""
">\n"
"> The shell prompt changes from `$` to `>` and back again as we were\n"
"> typing in our loop. The second prompt, `>`, is different to remind\n"
"> us that we haven't finished typing a complete command yet. A semicolon, `;"
"`,\n"
"> can be used to separate two commands written on a single line."
msgstr ""
">\n"
"> The shell prompt changes from `$` to `>` and back again as we were\n"
"> typing in our loop. The second prompt, `>`, is different to remind\n"
"> us that we haven't finished typing a complete command yet. A semicolon, `;"
"`,\n"
"> can be used to separate two commands written on a single line."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:197
msgid "> ## Same Symbols, Different Meanings"
msgstr "> ## Same Symbols, Different Meanings"

#: shell-novice/_episodes/05-loop.md:198
msgid ""
">\n"
"> Here we see `>` being used a shell prompt, whereas `>` is also\n"
"> used to redirect output.\n"
"> Similarly, `$` is used as a shell prompt, but, as we saw earlier,\n"
"> it is also used to ask the shell to get the value of a variable.\n"
">\n"
"> If the *shell* prints `>` or `$` then it expects you to type something,\n"
"> and the symbol is a prompt.\n"
">\n"
"> If *you* type `>` or `$` yourself, it is an instruction from you that\n"
"> the shell to redirect output or get the value of a variable."
msgstr ""
">\n"
"> Here we see `>` being used a shell prompt, whereas `>` is also\n"
"> used to redirect output.\n"
"> Similarly, `$` is used as a shell prompt, but, as we saw earlier,\n"
"> it is also used to ask the shell to get the value of a variable.\n"
">\n"
"> If the *shell* prints `>` or `$` then it expects you to type something,\n"
"> and the symbol is a prompt.\n"
">\n"
"> If *you* type `>` or `$` yourself, it is an instruction from you that\n"
"> the shell to redirect output or get the value of a variable."

#: shell-novice/_episodes/05-loop.md:211
msgid ""
"Returning to our example in the `data-shell/creatures` directory,\n"
"we have called the variable in this loop `filename`\n"
"in order to make its purpose clearer to human readers.\n"
"The shell itself doesn't care what the variable is called;\n"
"if we wrote this loop as:"
msgstr ""
"Returning to our example in the `data-shell/creatures` directory,\n"
"we have called the variable in this loop `filename`\n"
"in order to make its purpose clearer to human readers.\n"
"The shell itself doesn't care what the variable is called;\n"
"if we wrote this loop as:"

# code block
#: shell-novice/_episodes/05-loop.md:217
msgid ""
"~~~\n"
"for x in basilisk.dat unicorn.dat\n"
"do\n"
"    head -n 3 $x\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"for x in basilisk.dat unicorn.dat\n"
"do\n"
"    head -n 3 $x\n"
"done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:225
msgid "or:"
msgstr "or:"

# code block
#: shell-novice/_episodes/05-loop.md:227
msgid ""
"~~~\n"
"for temperature in basilisk.dat unicorn.dat\n"
"do\n"
"    head -n 3 $temperature\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"for temperature in basilisk.dat unicorn.dat\n"
"do\n"
"    head -n 3 $temperature\n"
"done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:235
msgid ""
"it would work exactly the same way.\n"
"*Don't do this.*\n"
"Programs are only useful if people can understand them,\n"
"so meaningless names (like `x`) or misleading names (like `temperature`)\n"
"increase the odds that the program won't do what its readers think it does."
msgstr ""
"it would work exactly the same way.\n"
"*Don't do this.*\n"
"Programs are only useful if people can understand them,\n"
"so meaningless names (like `x`) or misleading names (like `temperature`)\n"
"increase the odds that the program won't do what its readers think it does."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:241
msgid "> ## Limiting Sets of Files"
msgstr "> ## Limiting Sets of Files"

#: shell-novice/_episodes/05-loop.md:242
msgid ""
">\n"
"> What would be the output of running the following loop in the `data-shell/"
"molecules` directory?\n"
">\n"
"> ~~~\n"
"> for filename in c*\n"
"> do\n"
">     ls $filename \n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  No files are listed.\n"
"> 2.  All files are listed.\n"
"> 3.  Only `cubane.pdb`, `octane.pdb` and `pentane.pdb` are listed.\n"
"> 4.  Only `cubane.pdb` is listed.\n"
">\n"
"> > ## Solution\n"
"> > 4 is the correct answer. `*` matches zero or more characters, so any "
"file name starting with \n"
"> > the letter c, followed by zero or more other characters will be matched."
msgstr ""
">\n"
"> What would be the output of running the following loop in the `data-shell/"
"molecules` directory?\n"
">\n"
"> ~~~\n"
"> for filename in c*\n"
"> do\n"
">     ls $filename \n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  No files are listed.\n"
"> 2.  All files are listed.\n"
"> 3.  Only `cubane.pdb`, `octane.pdb` and `pentane.pdb` are listed.\n"
"> 4.  Only `cubane.pdb` is listed.\n"
">\n"
"> > ## Solution\n"
"> > 4 is the correct answer. `*` matches zero or more characters, so any "
"file name starting with \n"
"> > the letter c, followed by zero or more other characters will be matched."

#: shell-novice/_episodes/05-loop.md:262
msgid ""
">\n"
"> How would the output differ from using this command instead?\n"
">\n"
"> ~~~\n"
"> for filename in *c*\n"
"> do\n"
">     ls $filename \n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  The same files would be listed.\n"
"> 2.  All the files are listed this time.\n"
"> 3.  No files are listed this time.\n"
"> 4.  The files `cubane.pdb` and `octane.pdb` will be listed.\n"
"> 5.  Only the file `octane.pdb` will be listed.\n"
">\n"
"> > ## Solution\n"
"> > 4 is the correct answer. `*` matches zero or more characters, so a file "
"name with zero or more\n"
"> > characters before a letter c and zero or more characters after the "
"letter c will be matched."
msgstr ""
">\n"
"> How would the output differ from using this command instead?\n"
">\n"
"> ~~~\n"
"> for filename in *c*\n"
"> do\n"
">     ls $filename \n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  The same files would be listed.\n"
"> 2.  All the files are listed this time.\n"
"> 3.  No files are listed this time.\n"
"> 4.  The files `cubane.pdb` and `octane.pdb` will be listed.\n"
"> 5.  Only the file `octane.pdb` will be listed.\n"
">\n"
"> > ## Solution\n"
"> > 4 is the correct answer. `*` matches zero or more characters, so a file "
"name with zero or more\n"
"> > characters before a letter c and zero or more characters after the "
"letter c will be matched."

#: shell-novice/_episodes/05-loop.md:285
msgid ""
"Let's continue with our example in the `data-shell/creatures` directory.\n"
"Here's a slightly more complicated loop:"
msgstr ""
"Let's continue with our example in the `data-shell/creatures` directory.\n"
"Here's a slightly more complicated loop:"

# code block
#: shell-novice/_episodes/05-loop.md:288
msgid ""
"~~~\n"
"for filename in *.dat\n"
"do\n"
"    echo $filename\n"
"    head -n 100 $filename | tail -n 20\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"for filename in *.dat\n"
"do\n"
"    echo $filename\n"
"    head -n 100 $filename | tail -n 20\n"
"done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:297
msgid ""
"The shell starts by expanding `*.dat` to create the list of files it will "
"process.\n"
"The **loop body**\n"
"then executes two commands for each of those files.\n"
"The first, `echo`, just prints its command-line arguments to standard "
"output.\n"
"For example:"
msgstr ""
"The shell starts by expanding `*.dat` to create the list of files it will "
"process.\n"
"The **loop body**\n"
"then executes two commands for each of those files.\n"
"The first, `echo`, just prints its command-line arguments to standard "
"output.\n"
"For example:"

# code block
#: shell-novice/_episodes/05-loop.md:303
msgid ""
"~~~\n"
"$ echo hello there\n"
"~~~"
msgstr ""
"~~~\n"
"$ echo hello there\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:308
msgid "prints:"
msgstr "prints:"

# code block
#: shell-novice/_episodes/05-loop.md:310
msgid ""
"~~~\n"
"hello there\n"
"~~~"
msgstr ""
"~~~\n"
"hello there\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:315
msgid ""
"In this case,\n"
"since the shell expands `$filename` to be the name of a file,\n"
"`echo $filename` just prints the name of the file.\n"
"Note that we can't write this as:"
msgstr ""
"In this case,\n"
"since the shell expands `$filename` to be the name of a file,\n"
"`echo $filename` just prints the name of the file.\n"
"Note that we can't write this as:"

# code block
#: shell-novice/_episodes/05-loop.md:320
msgid ""
"~~~\n"
"for filename in *.dat\n"
"do\n"
"    $filename\n"
"    head -n 100 $filename | tail -n 20\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"for filename in *.dat\n"
"do\n"
"    $filename\n"
"    head -n 100 $filename | tail -n 20\n"
"done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:329
msgid ""
"because then the first time through the loop,\n"
"when `$filename` expanded to `basilisk.dat`, the shell would try to run "
"`basilisk.dat` as a program.\n"
"Finally,\n"
"the `head` and `tail` combination selects lines 81-100\n"
"from whatever file is being processed\n"
"(assuming the file has at least 100 lines)."
msgstr ""
"because then the first time through the loop,\n"
"when `$filename` expanded to `basilisk.dat`, the shell would try to run "
"`basilisk.dat` as a program.\n"
"Finally,\n"
"the `head` and `tail` combination selects lines 81-100\n"
"from whatever file is being processed\n"
"(assuming the file has at least 100 lines)."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:336
msgid "> ## Spaces in Names"
msgstr "> ## Spaces in Names"

#: shell-novice/_episodes/05-loop.md:337
msgid ""
">\n"
"> Whitespace is used to separate the elements on the list\n"
"> that we are going to loop over. If on the list we have elements\n"
"> with whitespace we need to quote those elements\n"
"> and our variable when using it.\n"
"> Suppose our data files are named:\n"
">\n"
"> ~~~\n"
"> red dragon.dat\n"
"> purple unicorn.dat\n"
"> ~~~"
msgstr ""
">\n"
"> Whitespace is used to separate the elements on the list\n"
"> that we are going to loop over. If on the list we have elements\n"
"> with whitespace we need to quote those elements\n"
"> and our variable when using it.\n"
"> Suppose our data files are named:\n"
">\n"
"> ~~~\n"
"> red dragon.dat\n"
"> purple unicorn.dat\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:350
msgid "> We need to use"
msgstr "> We need to use"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:353
msgid "> for filename in \"red dragon.dat\" \"purple unicorn.dat\""
msgstr "> for filename in \"red dragon.dat\" \"purple unicorn.dat\""

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:354
msgid "> do"
msgstr "> do"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:355
msgid ">     head -n 100 \"$filename\" | tail -n 3"
msgstr ">     head -n 100 \"$filename\" | tail -n 3"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:356
msgid "> done"
msgstr "> done"

#: shell-novice/_episodes/05-loop.md:359
msgid ""
">\n"
"> It is simpler just to avoid using whitespaces (or other special "
"characters) in filenames.\n"
">\n"
"> The files above don't exist, so if we run the above code, the `head` "
"command will be unable\n"
"> to find them, however the error message returned will show the name of the "
"files it is\n"
"> expecting:\n"
"> ```\n"
"> head: cannot open ‘red dragon.dat’ for reading: No such file or directory\n"
"> head: cannot open ‘purple unicorn.dat’ for reading: No such file or "
"directory\n"
"> ```"
msgstr ""
">\n"
"> It is simpler just to avoid using whitespaces (or other special "
"characters) in filenames.\n"
">\n"
"> The files above don't exist, so if we run the above code, the `head` "
"command will be unable\n"
"> to find them, however the error message returned will show the name of the "
"files it is\n"
"> expecting:\n"
"> ```\n"
"> head: cannot open ‘red dragon.dat’ for reading: No such file or directory\n"
"> head: cannot open ‘purple unicorn.dat’ for reading: No such file or "
"directory\n"
"> ```"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:370
msgid ""
"> Try removing the quotes around `$filename` in the loop above to see the "
"effect of the quote"
msgstr ""
"> Try removing the quotes around `$filename` in the loop above to see the "
"effect of the quote"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:371
msgid ""
"> marks on whitespace. Note that we get a result from the loop command for "
"unicorn.dat when we run this code in the `creatures` directory:"
msgstr ""
"> marks on whitespace. Note that we get a result from the loop command for "
"unicorn.dat when we run this code in the `creatures` directory:"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:372 shell-novice/_episodes/05-loop.md:379
msgid "> ```"
msgstr "> ```"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:373
msgid "> head: cannot open ‘red’ for reading: No such file or directory"
msgstr "> head: cannot open ‘red’ for reading: No such file or directory"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:374
msgid "> head: cannot open ‘dragon.dat’ for reading: No such file or directory"
msgstr ""
"> head: cannot open ‘dragon.dat’ for reading: No such file or directory"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:375
msgid "> head: cannot open ‘purple’ for reading: No such file or directory"
msgstr "> head: cannot open ‘purple’ for reading: No such file or directory"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:376
msgid "> CGGTACCGAA"
msgstr "> CGGTACCGAA"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:377
msgid "> AAGGGTCGCG"
msgstr "> AAGGGTCGCG"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:378
msgid "> CAAGTGTTCC"
msgstr "> CAAGTGTTCC"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:380
msgid "> {: . output}"
msgstr "> {: . output}"

#: shell-novice/_episodes/05-loop.md:383
msgid ""
"Going back to our original file copying problem,\n"
"we can solve it using this loop:"
msgstr ""
"Going back to our original file copying problem,\n"
"we can solve it using this loop:"

# code block
#: shell-novice/_episodes/05-loop.md:386
msgid ""
"~~~\n"
"for filename in *.dat\n"
"do\n"
"    cp $filename original-$filename\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"for filename in *.dat\n"
"do\n"
"    cp $filename original-$filename\n"
"done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:394
msgid ""
"This loop runs the `cp` command once for each filename.\n"
"The first time,\n"
"when `$filename` expands to `basilisk.dat`,\n"
"the shell executes:"
msgstr ""
"This loop runs the `cp` command once for each filename.\n"
"The first time,\n"
"when `$filename` expands to `basilisk.dat`,\n"
"the shell executes:"

# code block
#: shell-novice/_episodes/05-loop.md:399
msgid ""
"~~~\n"
"cp basilisk.dat original-basilisk.dat\n"
"~~~"
msgstr ""
"~~~\n"
"cp basilisk.dat original-basilisk.dat\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:404
msgid "The second time, the command is:"
msgstr "The second time, the command is:"

# code block
#: shell-novice/_episodes/05-loop.md:406
msgid ""
"~~~\n"
"cp unicorn.dat original-unicorn.dat\n"
"~~~"
msgstr ""
"~~~\n"
"cp unicorn.dat original-unicorn.dat\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:411
msgid ""
"Since the `cp` command does not normally produce any output, it's hard to "
"check \n"
"that the loop is doing the correct thing. By prefixing the command with "
"`echo` \n"
"it is possible to see each command as it _would_ be executed. The following "
"diagram \n"
"shows what happens when the modified script is executed, and demonstrates "
"how the \n"
"judicious use of `echo` is a good debugging technique."
msgstr ""
"Since the `cp` command does not normally produce any output, it's hard to "
"check \n"
"that the loop is doing the correct thing. By prefixing the command with "
"`echo` \n"
"it is possible to see each command as it _would_ be executed. The following "
"diagram \n"
"shows what happens when the modified script is executed, and demonstrates "
"how the \n"
"judicious use of `echo` is a good debugging technique."

#: shell-novice/_episodes/05-loop.md:417
msgid "![For Loop in Action](../fig/shell_script_for_loop_flow_chart.svg)"
msgstr "![For Loop in Action](../fig/shell_script_for_loop_flow_chart.svg)"

# header
#: shell-novice/_episodes/05-loop.md:419
msgid "## Nelle's Pipeline: Processing Files"
msgstr "## Nelle's Pipeline: Processing Files"

#: shell-novice/_episodes/05-loop.md:421
msgid ""
"Nelle is now ready to process her data files using `goostats` --- a shell "
"script written by her supervisor.\n"
"This calculates some statistics from a protein sample file, and takes two "
"arguments:"
msgstr ""
"Nelle is now ready to process her data files using `goostats` --- a shell "
"script written by her supervisor.\n"
"This calculates some statistics from a protein sample file, and takes two "
"arguments:"

# ordered list
#: shell-novice/_episodes/05-loop.md:424
msgid "1. an input file (containing the raw data)"
msgstr "1. an input file (containing the raw data)"

# ordered list
#: shell-novice/_episodes/05-loop.md:425
msgid "2. an output file (to store the calculated statistics)"
msgstr "2. an output file (to store the calculated statistics)"

#: shell-novice/_episodes/05-loop.md:427
msgid ""
"Since she's still learning how to use the shell,\n"
"she decides to build up the required commands in stages.\n"
"Her first step is to make sure that she can select the right input files --- "
"remember,\n"
"these are ones whose names end in 'A' or 'B', rather than 'Z'. Starting from "
"her home directory, Nelle types:"
msgstr ""
"Since she's still learning how to use the shell,\n"
"she decides to build up the required commands in stages.\n"
"Her first step is to make sure that she can select the right input files --- "
"remember,\n"
"these are ones whose names end in 'A' or 'B', rather than 'Z'. Starting from "
"her home directory, Nelle types:"

# code block
#: shell-novice/_episodes/05-loop.md:432
msgid ""
"~~~\n"
"$ cd north-pacific-gyre/2012-07-03\n"
"$ for datafile in NENE*[AB].txt\n"
"> do\n"
">     echo $datafile\n"
"> done\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd north-pacific-gyre/2012-07-03\n"
"$ for datafile in NENE*[AB].txt\n"
"> do\n"
">     echo $datafile\n"
"> done\n"
"~~~"

# code block
#: shell-novice/_episodes/05-loop.md:441
msgid ""
"~~~\n"
"NENE01729A.txt\n"
"NENE01729B.txt\n"
"NENE01736A.txt\n"
"...\n"
"NENE02043A.txt\n"
"NENE02043B.txt\n"
"~~~"
msgstr ""
"~~~\n"
"NENE01729A.txt\n"
"NENE01729B.txt\n"
"NENE01736A.txt\n"
"...\n"
"NENE02043A.txt\n"
"NENE02043B.txt\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:451
msgid ""
"Her next step is to decide\n"
"what to call the files that the `goostats` analysis program will create.\n"
"Prefixing each input file's name with \"stats\" seems simple,\n"
"so she modifies her loop to do that:"
msgstr ""
"Her next step is to decide\n"
"what to call the files that the `goostats` analysis program will create.\n"
"Prefixing each input file's name with \"stats\" seems simple,\n"
"so she modifies her loop to do that:"

# code block
#: shell-novice/_episodes/05-loop.md:456
msgid ""
"~~~\n"
"$ for datafile in NENE*[AB].txt\n"
"> do\n"
">     echo $datafile stats-$datafile\n"
"> done\n"
"~~~"
msgstr ""
"~~~\n"
"$ for datafile in NENE*[AB].txt\n"
"> do\n"
">     echo $datafile stats-$datafile\n"
"> done\n"
"~~~"

# code block
#: shell-novice/_episodes/05-loop.md:464
msgid ""
"~~~\n"
"NENE01729A.txt stats-NENE01729A.txt\n"
"NENE01729B.txt stats-NENE01729B.txt\n"
"NENE01736A.txt stats-NENE01736A.txt\n"
"...\n"
"NENE02043A.txt stats-NENE02043A.txt\n"
"NENE02043B.txt stats-NENE02043B.txt\n"
"~~~"
msgstr ""
"~~~\n"
"NENE01729A.txt stats-NENE01729A.txt\n"
"NENE01729B.txt stats-NENE01729B.txt\n"
"NENE01736A.txt stats-NENE01736A.txt\n"
"...\n"
"NENE02043A.txt stats-NENE02043A.txt\n"
"NENE02043B.txt stats-NENE02043B.txt\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:474
msgid ""
"She hasn't actually run `goostats` yet,\n"
"but now she's sure she can select the right files and generate the right "
"output filenames."
msgstr ""
"She hasn't actually run `goostats` yet,\n"
"but now she's sure she can select the right files and generate the right "
"output filenames."

#: shell-novice/_episodes/05-loop.md:477
msgid ""
"Typing in commands over and over again is becoming tedious,\n"
"though,\n"
"and Nelle is worried about making mistakes,\n"
"so instead of re-entering her loop,\n"
"she presses the up arrow.\n"
"In response,\n"
"the shell redisplays the whole loop on one line\n"
"(using semi-colons to separate the pieces):"
msgstr ""
"Typing in commands over and over again is becoming tedious,\n"
"though,\n"
"and Nelle is worried about making mistakes,\n"
"so instead of re-entering her loop,\n"
"she presses the up arrow.\n"
"In response,\n"
"the shell redisplays the whole loop on one line\n"
"(using semi-colons to separate the pieces):"

# code block
#: shell-novice/_episodes/05-loop.md:486
msgid ""
"~~~\n"
"$ for datafile in NENE*[AB].txt; do echo $datafile stats-$datafile; done\n"
"~~~"
msgstr ""
"~~~\n"
"$ for datafile in NENE*[AB].txt; do echo $datafile stats-$datafile; done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:491
msgid ""
"Using the left arrow key,\n"
"Nelle backs up and changes the command `echo` to `bash goostats`:"
msgstr ""
"Using the left arrow key,\n"
"Nelle backs up and changes the command `echo` to `bash goostats`:"

# code block
#: shell-novice/_episodes/05-loop.md:494
msgid ""
"~~~\n"
"$ for datafile in NENE*[AB].txt; do bash goostats $datafile stats-$datafile; "
"done\n"
"~~~"
msgstr ""
"~~~\n"
"$ for datafile in NENE*[AB].txt; do bash goostats $datafile stats-$datafile; "
"done\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:499
msgid ""
"When she presses Enter,\n"
"the shell runs the modified command.\n"
"However, nothing appears to happen --- there is no output.\n"
"After a moment, Nelle realizes that since her script doesn't print anything "
"to the screen any longer,\n"
"she has no idea whether it is running, much less how quickly.\n"
"She kills the running command by typing `Ctrl-C`,\n"
"uses up-arrow to repeat the command,\n"
"and edits it to read:"
msgstr ""
"When she presses Enter,\n"
"the shell runs the modified command.\n"
"However, nothing appears to happen --- there is no output.\n"
"After a moment, Nelle realizes that since her script doesn't print anything "
"to the screen any longer,\n"
"she has no idea whether it is running, much less how quickly.\n"
"She kills the running command by typing `Ctrl-C`,\n"
"uses up-arrow to repeat the command,\n"
"and edits it to read:"

# code block
#: shell-novice/_episodes/05-loop.md:508
msgid ""
"~~~\n"
"$ for datafile in NENE*[AB].txt; do echo $datafile; bash goostats $datafile "
"stats-$datafile; done\n"
"~~~"
msgstr ""
"~~~\n"
"$ for datafile in NENE*[AB].txt; do echo $datafile; bash goostats $datafile "
"stats-$datafile; done\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:513
msgid "> ## Beginning and End"
msgstr "> ## Beginning and End"

#: shell-novice/_episodes/05-loop.md:514
msgid ""
">\n"
"> We can move to the beginning of a line in the shell by typing `Ctrl-a`\n"
"> and to the end using `Ctrl-e`."
msgstr ""
">\n"
"> We can move to the beginning of a line in the shell by typing `Ctrl-a`\n"
"> and to the end using `Ctrl-e`."

#: shell-novice/_episodes/05-loop.md:519
msgid ""
"When she runs her program now,\n"
"it produces one line of output every five seconds or so:"
msgstr ""
"When she runs her program now,\n"
"it produces one line of output every five seconds or so:"

# code block
#: shell-novice/_episodes/05-loop.md:522
msgid ""
"~~~\n"
"NENE01729A.txt\n"
"NENE01729B.txt\n"
"NENE01736A.txt\n"
"...\n"
"~~~"
msgstr ""
"~~~\n"
"NENE01729A.txt\n"
"NENE01729B.txt\n"
"NENE01736A.txt\n"
"...\n"
"~~~"

#: shell-novice/_episodes/05-loop.md:530
msgid ""
"1518 times 5 seconds,\n"
"divided by 60,\n"
"tells her that her script will take about two hours to run.\n"
"As a final check,\n"
"she opens another terminal window,\n"
"goes into `north-pacific-gyre/2012-07-03`,\n"
"and uses `cat stats-NENE01729B.txt`\n"
"to examine one of the output files.\n"
"It looks good,\n"
"so she decides to get some coffee and catch up on her reading."
msgstr ""
"1518 times 5 seconds,\n"
"divided by 60,\n"
"tells her that her script will take about two hours to run.\n"
"As a final check,\n"
"she opens another terminal window,\n"
"goes into `north-pacific-gyre/2012-07-03`,\n"
"and uses `cat stats-NENE01729B.txt`\n"
"to examine one of the output files.\n"
"It looks good,\n"
"so she decides to get some coffee and catch up on her reading."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:541
msgid "> ## Those Who Know History Can Choose to Repeat It"
msgstr "> ## Those Who Know History Can Choose to Repeat It"

#: shell-novice/_episodes/05-loop.md:542
msgid ""
">\n"
"> Another way to repeat previous work is to use the `history` command to\n"
"> get a list of the last few hundred commands that have been executed, and\n"
"> then to use `!123` (where \"123\" is replaced by the command number) to\n"
"> repeat one of those commands. For example, if Nelle types this:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
">   456  ls -l NENE0*.txt\n"
">   457  rm stats-NENE01729B.txt.txt\n"
">   458  bash goostats NENE01729B.txt stats-NENE01729B.txt\n"
">   459  ls -l NENE0*.txt\n"
">   460  history\n"
"> ~~~"
msgstr ""
">\n"
"> Another way to repeat previous work is to use the `history` command to\n"
"> get a list of the last few hundred commands that have been executed, and\n"
"> then to use `!123` (where \"123\" is replaced by the command number) to\n"
"> repeat one of those commands. For example, if Nelle types this:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
">   456  ls -l NENE0*.txt\n"
">   457  rm stats-NENE01729B.txt.txt\n"
">   458  bash goostats NENE01729B.txt stats-NENE01729B.txt\n"
">   459  ls -l NENE0*.txt\n"
">   460  history\n"
"> ~~~"

#: shell-novice/_episodes/05-loop.md:560
msgid ""
">\n"
"> then she can re-run `goostats` on `NENE01729B.txt` simply by typing\n"
"> `!458`."
msgstr ""
">\n"
"> then she can re-run `goostats` on `NENE01729B.txt` simply by typing\n"
"> `!458`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:565
msgid "> ## Other History Commands"
msgstr "> ## Other History Commands"

#: shell-novice/_episodes/05-loop.md:566
msgid ""
">\n"
"> There are a number of other shortcut commands for getting at the history.\n"
">\n"
"> - `Ctrl-R` enters a history search mode \"reverse-i-search\" and finds "
"the \n"
"> most recent command in your history that matches the text you enter next.\n"
"> Press `Ctrl-R` one or more additional times to search for earlier "
"matches.\n"
"> - `!!` retrieves the immediately preceding command \n"
"> (you may or may not find this more convenient than using the up-arrow)\n"
"> - `!$` retrieves the last word of the last command.\n"
"> That's useful more often than you might expect: after\n"
"> `bash goostats NENE01729B.txt stats-NENE01729B.txt`, you can type\n"
"> `less !$` to look at the file `stats-NENE01729B.txt`, which is\n"
"> quicker than doing up-arrow and editing the command-line."
msgstr ""
">\n"
"> There are a number of other shortcut commands for getting at the history.\n"
">\n"
"> - `Ctrl-R` enters a history search mode \"reverse-i-search\" and finds "
"the \n"
"> most recent command in your history that matches the text you enter next.\n"
"> Press `Ctrl-R` one or more additional times to search for earlier "
"matches.\n"
"> - `!!` retrieves the immediately preceding command \n"
"> (you may or may not find this more convenient than using the up-arrow)\n"
"> - `!$` retrieves the last word of the last command.\n"
"> That's useful more often than you might expect: after\n"
"> `bash goostats NENE01729B.txt stats-NENE01729B.txt`, you can type\n"
"> `less !$` to look at the file `stats-NENE01729B.txt`, which is\n"
"> quicker than doing up-arrow and editing the command-line."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:581
msgid "> ## Saving to a File in a Loop - Part One"
msgstr "> ## Saving to a File in a Loop - Part One"

#: shell-novice/_episodes/05-loop.md:582
msgid ""
">\n"
"> In the `data-shell/molecules` directory, what is the effect of this loop?\n"
">\n"
"> ~~~\n"
"> for alkanes in *.pdb\n"
"> do\n"
">     echo $alkanes\n"
">     cat $alkanes > alkanes.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, "
"`pentane.pdb` and `propane.pdb`,\n"
">     and the text from `propane.pdb` will be saved to a file called "
"`alkanes.pdb`.\n"
"> 2.  Prints `cubane.pdb`, `ethane.pdb`, and `methane.pdb`, and the text "
"from all three files would be\n"
">     concatenated and saved to a file called `alkanes.pdb`.\n"
"> 3.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, and "
"`pentane.pdb`, and the text\n"
">     from `propane.pdb` will be saved to a file called `alkanes.pdb`.\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > 1. The text from each file in turn gets written to the `alkanes.pdb` "
"file.\n"
"> > However, the file gets overwritten on each loop interation, so the final "
"content of `alkanes.pdb`\n"
"> > is the text from the `propane.pdb` file."
msgstr ""
">\n"
"> In the `data-shell/molecules` directory, what is the effect of this loop?\n"
">\n"
"> ~~~\n"
"> for alkanes in *.pdb\n"
"> do\n"
">     echo $alkanes\n"
">     cat $alkanes > alkanes.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, "
"`pentane.pdb` and `propane.pdb`,\n"
">     and the text from `propane.pdb` will be saved to a file called "
"`alkanes.pdb`.\n"
"> 2.  Prints `cubane.pdb`, `ethane.pdb`, and `methane.pdb`, and the text "
"from all three files would be\n"
">     concatenated and saved to a file called `alkanes.pdb`.\n"
"> 3.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, and "
"`pentane.pdb`, and the text\n"
">     from `propane.pdb` will be saved to a file called `alkanes.pdb`.\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > 1. The text from each file in turn gets written to the `alkanes.pdb` "
"file.\n"
"> > However, the file gets overwritten on each loop interation, so the final "
"content of `alkanes.pdb`\n"
"> > is the text from the `propane.pdb` file."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:609
msgid "> ## Saving to a File in a Loop - Part Two"
msgstr "> ## Saving to a File in a Loop - Part Two"

#: shell-novice/_episodes/05-loop.md:610
msgid ""
">\n"
"> Also in the `data-shell/molecules` directory, what would be the output of "
"the following loop?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">     cat $datafile >> all.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, "
"`octane.pdb`, and\n"
">     `pentane.pdb` would be concatenated and saved to a file called `all."
"pdb`.\n"
"> 2.  The text from `ethane.pdb` will be saved to a file called `all.pdb`.\n"
"> 3.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, "
"`octane.pdb`, `pentane.pdb`\n"
">     and `propane.pdb` would be concatenated and saved to a file called "
"`all.pdb`.\n"
"> 4.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, "
"`octane.pdb`, `pentane.pdb`\n"
">     and `propane.pdb` would be printed to the screen and saved to a file "
"called `all.pdb`.\n"
">\n"
"> > ## Solution\n"
"> > 3 is the correct answer. `>>` appends to a file, rather than overwriting "
"it with the redirected\n"
"> > output from a command.\n"
"> > Given the output from the `cat` command has been redirected, nothing is "
"printed to the screen."
msgstr ""
">\n"
"> Also in the `data-shell/molecules` directory, what would be the output of "
"the following loop?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">     cat $datafile >> all.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, "
"`octane.pdb`, and\n"
">     `pentane.pdb` would be concatenated and saved to a file called `all."
"pdb`.\n"
"> 2.  The text from `ethane.pdb` will be saved to a file called `all.pdb`.\n"
"> 3.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, "
"`octane.pdb`, `pentane.pdb`\n"
">     and `propane.pdb` would be concatenated and saved to a file called "
"`all.pdb`.\n"
"> 4.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, "
"`octane.pdb`, `pentane.pdb`\n"
">     and `propane.pdb` would be printed to the screen and saved to a file "
"called `all.pdb`.\n"
">\n"
"> > ## Solution\n"
"> > 3 is the correct answer. `>>` appends to a file, rather than overwriting "
"it with the redirected\n"
"> > output from a command.\n"
"> > Given the output from the `cat` command has been redirected, nothing is "
"printed to the screen."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:636
msgid "> ## Doing a Dry Run"
msgstr "> ## Doing a Dry Run"

#: shell-novice/_episodes/05-loop.md:637
msgid ""
">\n"
"> A loop is a way to do many things at once --- or to make many mistakes at\n"
"> once if it does the wrong thing. One way to check what a loop *would* do\n"
"> is to `echo` the commands it would run instead of actually running them.\n"
"> \n"
"> Suppose we want to preview the commands the following loop will execute\n"
"> without actually running those commands:\n"
">\n"
"> ~~~\n"
"> for file in *.pdb\n"
"> do\n"
">   analyze $file > analyzed-$file\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the difference between the two loops below, and which one would "
"we\n"
"> want to run?\n"
">\n"
"> ~~~\n"
"> # Version 1\n"
"> for file in *.pdb\n"
"> do\n"
">   echo analyze $file > analyzed-$file\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Version 2\n"
"> for file in *.pdb\n"
"> do\n"
">   echo \"analyze $file > analyzed-$file\"\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > The second version is the one we want to run.\n"
"> > This prints to screen everything enclosed in the quote marks, expanding "
"the\n"
"> > loop variable name because we have prefixed it with a dollar sign.\n"
"> >\n"
"> > The first version redirects the output from the command `echo analyze "
"$file` to\n"
"> > a file, `analyzed-$file`. A series of files is generated: `analyzed-"
"cubane.pdb`,\n"
"> > `analyzed-ethane.pdb` etc.\n"
"> > \n"
"> > Try both versions for yourself to see the output! Be sure to open the \n"
"> > `analyzed-*.pdb` files to view their contents."
msgstr ""
">\n"
"> A loop is a way to do many things at once --- or to make many mistakes at\n"
"> once if it does the wrong thing. One way to check what a loop *would* do\n"
"> is to `echo` the commands it would run instead of actually running them.\n"
"> \n"
"> Suppose we want to preview the commands the following loop will execute\n"
"> without actually running those commands:\n"
">\n"
"> ~~~\n"
"> for file in *.pdb\n"
"> do\n"
">   analyze $file > analyzed-$file\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the difference between the two loops below, and which one would "
"we\n"
"> want to run?\n"
">\n"
"> ~~~\n"
"> # Version 1\n"
"> for file in *.pdb\n"
"> do\n"
">   echo analyze $file > analyzed-$file\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Version 2\n"
"> for file in *.pdb\n"
"> do\n"
">   echo \"analyze $file > analyzed-$file\"\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > The second version is the one we want to run.\n"
"> > This prints to screen everything enclosed in the quote marks, expanding "
"the\n"
"> > loop variable name because we have prefixed it with a dollar sign.\n"
"> >\n"
"> > The first version redirects the output from the command `echo analyze "
"$file` to\n"
"> > a file, `analyzed-$file`. A series of files is generated: `analyzed-"
"cubane.pdb`,\n"
"> > `analyzed-ethane.pdb` etc.\n"
"> > \n"
"> > Try both versions for yourself to see the output! Be sure to open the \n"
"> > `analyzed-*.pdb` files to view their contents."

# blockquote, which can be cascaded
#: shell-novice/_episodes/05-loop.md:688
msgid "> ## Nested Loops"
msgstr "> ## Nested Loops"

#: shell-novice/_episodes/05-loop.md:689
msgid ""
">\n"
"> Suppose we want to set up up a directory structure to organize\n"
"> some experiments measuring reaction rate constants with different "
"compounds\n"
"> *and* different temperatures.  What would be the\n"
"> result of the following code:\n"
">\n"
"> ~~~\n"
"> for species in cubane ethane methane\n"
"> do\n"
">     for temperature in 25 30 37 40\n"
">     do\n"
">         mkdir $species-$temperature\n"
">     done\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > We have a nested loop, i.e. contained within another loop, so for each "
"species\n"
"> > in the outer loop, the inner loop (the nested loop) iterates over the "
"list of\n"
"> > temperatures, and creates a new directory for each combination.\n"
"> >\n"
"> > Try running the code for yourself to see which directories are created!"
msgstr ""
">\n"
"> Suppose we want to set up up a directory structure to organize\n"
"> some experiments measuring reaction rate constants with different "
"compounds\n"
"> *and* different temperatures.  What would be the\n"
"> result of the following code:\n"
">\n"
"> ~~~\n"
"> for species in cubane ethane methane\n"
"> do\n"
">     for temperature in 25 30 37 40\n"
">     do\n"
">         mkdir $species-$temperature\n"
">     done\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > We have a nested loop, i.e. contained within another loop, so for each "
"species\n"
"> > in the outer loop, the inner loop (the nested loop) iterates over the "
"list of\n"
"> > temperatures, and creates a new directory for each combination.\n"
"> >\n"
"> > Try running the code for yourself to see which directories are created!"

# Front Matter
#: shell-novice/_episodes/06-script.md:1
msgid ""
"---\n"
"title: \"Shell Scripts\"\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I save and re-use commands?\"\n"
"objectives:\n"
"- \"Write a shell script that runs a command or series of commands for a "
"fixed set of files.\"\n"
"- \"Run a shell script from the command line.\"\n"
"- \"Write a shell script that operates on a set of files defined by the user "
"on the command line.\"\n"
"- \"Create pipelines that include shell scripts you, and others, have "
"written.\"\n"
"keypoints:\n"
"- \"Save commands in files (usually called shell scripts) for re-use.\"\n"
"- \"`bash filename` runs the commands saved in a file.\"\n"
"- \"`$@` refers to all of a shell script's command-line arguments.\"\n"
"- \"`$1`, `$2`, etc., refer to the first command-line argument, the second "
"command-line argument, etc.\"\n"
"- \"Place variables in quotes if the values might have spaces in them.\"\n"
"- \"Letting users decide what files to process is more flexible and more "
"consistent with built-in Unix commands.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Shell Scripts\"\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I save and re-use commands?\"\n"
"objectives:\n"
"- \"Write a shell script that runs a command or series of commands for a "
"fixed set of files.\"\n"
"- \"Run a shell script from the command line.\"\n"
"- \"Write a shell script that operates on a set of files defined by the user "
"on the command line.\"\n"
"- \"Create pipelines that include shell scripts you, and others, have "
"written.\"\n"
"keypoints:\n"
"- \"Save commands in files (usually called shell scripts) for re-use.\"\n"
"- \"`bash filename` runs the commands saved in a file.\"\n"
"- \"`$@` refers to all of a shell script's command-line arguments.\"\n"
"- \"`$1`, `$2`, etc., refer to the first command-line argument, the second "
"command-line argument, etc.\"\n"
"- \"Place variables in quotes if the values might have spaces in them.\"\n"
"- \"Letting users decide what files to process is more flexible and more "
"consistent with built-in Unix commands.\"\n"
"---"

#: shell-novice/_episodes/06-script.md:21
msgid ""
"We are finally ready to see what makes the shell such a powerful programming "
"environment.\n"
"We are going to take the commands we repeat frequently and save them in "
"files\n"
"so that we can re-run all those operations again later by typing a single "
"command.\n"
"For historical reasons,\n"
"a bunch of commands saved in a file is usually called a **shell script**,\n"
"but make no mistake:\n"
"these are actually small programs."
msgstr ""
"We are finally ready to see what makes the shell such a powerful programming "
"environment.\n"
"We are going to take the commands we repeat frequently and save them in "
"files\n"
"so that we can re-run all those operations again later by typing a single "
"command.\n"
"For historical reasons,\n"
"a bunch of commands saved in a file is usually called a **shell script**,\n"
"but make no mistake:\n"
"these are actually small programs."

#: shell-novice/_episodes/06-script.md:29
msgid ""
"Let's start by going back to `molecules/` and creating a new file, `middle."
"sh` which will\n"
"become our shell script:"
msgstr ""
"Let's start by going back to `molecules/` and creating a new file, `middle."
"sh` which will\n"
"become our shell script:"

# code block
#: shell-novice/_episodes/06-script.md:32
msgid ""
"~~~\n"
"$ cd molecules\n"
"$ nano middle.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd molecules\n"
"$ nano middle.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:38
msgid ""
"The command `nano middle.sh` opens the file `middle.sh` within the text "
"editor \"nano\"\n"
"(which runs within the shell).\n"
"If the file does not exist, it will be created.\n"
"We can use the text editor to directly edit the file -- we'll simply insert "
"the following line:"
msgstr ""
"The command `nano middle.sh` opens the file `middle.sh` within the text "
"editor \"nano\"\n"
"(which runs within the shell).\n"
"If the file does not exist, it will be created.\n"
"We can use the text editor to directly edit the file -- we'll simply insert "
"the following line:"

# code block
#: shell-novice/_episodes/06-script.md:43
msgid ""
"~~~\n"
"head -n 15 octane.pdb | tail -n 5\n"
"~~~"
msgstr ""
"~~~\n"
"head -n 15 octane.pdb | tail -n 5\n"
"~~~"

# SC/DC Template label
#: shell-novice/_episodes/06-script.md:46
#: shell-novice/_episodes/06-script.md:362
msgid "{: .source}"
msgstr "{: .source}"

#: shell-novice/_episodes/06-script.md:48
msgid ""
"This is a variation on the pipe we constructed earlier:\n"
"it selects lines 11-15 of the file `octane.pdb`.\n"
"Remember, we are *not* running it as a command just yet:\n"
"we are putting the commands in a file."
msgstr ""
"This is a variation on the pipe we constructed earlier:\n"
"it selects lines 11-15 of the file `octane.pdb`.\n"
"Remember, we are *not* running it as a command just yet:\n"
"we are putting the commands in a file."

#: shell-novice/_episodes/06-script.md:53
msgid ""
"Then we save the file (`Ctrl-O` in nano),\n"
" and exit the text editor (`Ctrl-X` in nano).\n"
"Check that the directory `molecules` now contains a file called `middle.sh`."
msgstr ""
"Then we save the file (`Ctrl-O` in nano),\n"
" and exit the text editor (`Ctrl-X` in nano).\n"
"Check that the directory `molecules` now contains a file called `middle.sh`."

#: shell-novice/_episodes/06-script.md:57
msgid ""
"Once we have saved the file,\n"
"we can ask the shell to execute the commands it contains.\n"
"Our shell is called `bash`, so we run the following command:"
msgstr ""
"Once we have saved the file,\n"
"we can ask the shell to execute the commands it contains.\n"
"Our shell is called `bash`, so we run the following command:"

# code block
#: shell-novice/_episodes/06-script.md:61
msgid ""
"~~~\n"
"$ bash middle.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:66
#: shell-novice/_episodes/06-script.md:117
msgid ""
"~~~\n"
"ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00\n"
"ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00\n"
"ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00\n"
"ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00\n"
"ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00\n"
"~~~"
msgstr ""
"~~~\n"
"ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00\n"
"ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00\n"
"ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00\n"
"ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00\n"
"ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00\n"
"~~~"

#: shell-novice/_episodes/06-script.md:75
msgid ""
"Sure enough,\n"
"our script's output is exactly what we would get if we ran that pipeline "
"directly."
msgstr ""
"Sure enough,\n"
"our script's output is exactly what we would get if we ran that pipeline "
"directly."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:78
msgid "> ## Text vs. Whatever"
msgstr "> ## Text vs. Whatever"

#: shell-novice/_episodes/06-script.md:79
msgid ""
">\n"
"> We usually call programs like Microsoft Word or LibreOffice Writer \"text\n"
"> editors\", but we need to be a bit more careful when it comes to\n"
"> programming. By default, Microsoft Word uses `.docx` files to store not\n"
"> only text, but also formatting information about fonts, headings, and so\n"
"> on. This extra information isn't stored as characters, and doesn't mean\n"
"> anything to tools like `head`: they expect input files to contain\n"
"> nothing but the letters, digits, and punctuation on a standard computer\n"
"> keyboard. When editing programs, therefore, you must either use a plain\n"
"> text editor, or be careful to save files as plain text."
msgstr ""
">\n"
"> We usually call programs like Microsoft Word or LibreOffice Writer \"text\n"
"> editors\", but we need to be a bit more careful when it comes to\n"
"> programming. By default, Microsoft Word uses `.docx` files to store not\n"
"> only text, but also formatting information about fonts, headings, and so\n"
"> on. This extra information isn't stored as characters, and doesn't mean\n"
"> anything to tools like `head`: they expect input files to contain\n"
"> nothing but the letters, digits, and punctuation on a standard computer\n"
"> keyboard. When editing programs, therefore, you must either use a plain\n"
"> text editor, or be careful to save files as plain text."

#: shell-novice/_episodes/06-script.md:91
msgid ""
"What if we want to select lines from an arbitrary file?\n"
"We could edit `middle.sh` each time to change the filename,\n"
"but that would probably take longer than just retyping the command.\n"
"Instead, let's edit `middle.sh` and make it more versatile:"
msgstr ""
"What if we want to select lines from an arbitrary file?\n"
"We could edit `middle.sh` each time to change the filename,\n"
"but that would probably take longer than just retyping the command.\n"
"Instead, let's edit `middle.sh` and make it more versatile:"

# code block
#: shell-novice/_episodes/06-script.md:96
#: shell-novice/_episodes/06-script.md:154
#: shell-novice/_episodes/06-script.md:201
msgid ""
"~~~\n"
"$ nano middle.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano middle.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:101
msgid ""
"Now, within \"nano\", replace the text `octane.pdb` with the special "
"variable called `$1`:"
msgstr ""
"Now, within \"nano\", replace the text `octane.pdb` with the special "
"variable called `$1`:"

# code block
#: shell-novice/_episodes/06-script.md:103
msgid ""
"~~~\n"
"head -n 15 \"$1\" | tail -n 5\n"
"~~~"
msgstr ""
"~~~\n"
"head -n 15 \"$1\" | tail -n 5\n"
"~~~"

#: shell-novice/_episodes/06-script.md:108
msgid ""
"Inside a shell script,\n"
"`$1` means \"the first filename (or other argument) on the command line\".\n"
"We can now run our script like this:"
msgstr ""
"Inside a shell script,\n"
"`$1` means \"the first filename (or other argument) on the command line\".\n"
"We can now run our script like this:"

# code block
#: shell-novice/_episodes/06-script.md:112
msgid ""
"~~~\n"
"$ bash middle.sh octane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh octane.pdb\n"
"~~~"

#: shell-novice/_episodes/06-script.md:126
msgid "or on a different file like this:"
msgstr "or on a different file like this:"

# code block
#: shell-novice/_episodes/06-script.md:128
msgid ""
"~~~\n"
"$ bash middle.sh pentane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh pentane.pdb\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:133
#: shell-novice/_episodes/06-script.md:171
msgid ""
"~~~\n"
"ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00\n"
"ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00\n"
"ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00\n"
"ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00\n"
"ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00\n"
"~~~"
msgstr ""
"~~~\n"
"ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00\n"
"ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00\n"
"ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00\n"
"ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00\n"
"ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:142
msgid "> ## Double-Quotes Around Arguments"
msgstr "> ## Double-Quotes Around Arguments"

#: shell-novice/_episodes/06-script.md:143
msgid ""
">\n"
"> For the same reason that we put the loop variable inside double-quotes,\n"
"> in case the filename happens to contain any spaces,\n"
"> we surround `$1` with double-quotes."
msgstr ""
">\n"
"> For the same reason that we put the loop variable inside double-quotes,\n"
"> in case the filename happens to contain any spaces,\n"
"> we surround `$1` with double-quotes."

#: shell-novice/_episodes/06-script.md:149
msgid ""
"We still need to edit `middle.sh` each time we want to adjust the range of "
"lines,\n"
"though.\n"
"Let's fix that by using the special variables `$2` and `$3` for the\n"
"number of lines to be passed to `head` and `tail` respectively:"
msgstr ""
"We still need to edit `middle.sh` each time we want to adjust the range of "
"lines,\n"
"though.\n"
"Let's fix that by using the special variables `$2` and `$3` for the\n"
"number of lines to be passed to `head` and `tail` respectively:"

# code block
#: shell-novice/_episodes/06-script.md:159
msgid ""
"~~~\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"
msgstr ""
"~~~\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"

#: shell-novice/_episodes/06-script.md:164
msgid "We can now run:"
msgstr "We can now run:"

# code block
#: shell-novice/_episodes/06-script.md:166
msgid ""
"~~~\n"
"$ bash middle.sh pentane.pdb 15 5\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh pentane.pdb 15 5\n"
"~~~"

#: shell-novice/_episodes/06-script.md:180
msgid ""
"By changing the arguments to our command we can change our script's\n"
"behaviour:"
msgstr ""
"By changing the arguments to our command we can change our script's\n"
"behaviour:"

# code block
#: shell-novice/_episodes/06-script.md:183
msgid ""
"~~~\n"
"$ bash middle.sh pentane.pdb 20 5\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh pentane.pdb 20 5\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:188
msgid ""
"~~~\n"
"ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00\n"
"ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00\n"
"ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00\n"
"ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00\n"
"TER      18              1\n"
"~~~"
msgstr ""
"~~~\n"
"ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00\n"
"ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00\n"
"ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00\n"
"ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00\n"
"TER      18              1\n"
"~~~"

#: shell-novice/_episodes/06-script.md:197
msgid ""
"This works,\n"
"but it may take the next person who reads `middle.sh` a moment to figure out "
"what it does.\n"
"We can improve our script by adding some **comments** at the top:"
msgstr ""
"This works,\n"
"but it may take the next person who reads `middle.sh` a moment to figure out "
"what it does.\n"
"We can improve our script by adding some **comments** at the top:"

# code block
#: shell-novice/_episodes/06-script.md:206
msgid ""
"~~~\n"
"# Select lines from the middle of a file.\n"
"# Usage: bash middle.sh filename end_line num_lines\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"
msgstr ""
"~~~\n"
"# Select lines from the middle of a file.\n"
"# Usage: bash middle.sh filename end_line num_lines\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"

#: shell-novice/_episodes/06-script.md:213
msgid ""
"A comment starts with a `#` character and runs to the end of the line.\n"
"The computer ignores comments,\n"
"but they're invaluable for helping people (including your future self) "
"understand and use scripts.\n"
"The only caveat is that each time you modify the script,\n"
"you should check that the comment is still accurate:\n"
"an explanation that sends the reader in the wrong direction is worse than "
"none at all."
msgstr ""
"A comment starts with a `#` character and runs to the end of the line.\n"
"The computer ignores comments,\n"
"but they're invaluable for helping people (including your future self) "
"understand and use scripts.\n"
"The only caveat is that each time you modify the script,\n"
"you should check that the comment is still accurate:\n"
"an explanation that sends the reader in the wrong direction is worse than "
"none at all."

#: shell-novice/_episodes/06-script.md:220
msgid ""
"What if we want to process many files in a single pipeline?\n"
"For example, if we want to sort our `.pdb` files by length, we would type:"
msgstr ""
"What if we want to process many files in a single pipeline?\n"
"For example, if we want to sort our `.pdb` files by length, we would type:"

#: shell-novice/_episodes/06-script.md:228
msgid ""
"because `wc -l` lists the number of lines in the files\n"
"(recall that `wc` stands for 'word count', adding the `-l` flag means 'count "
"lines' instead)\n"
"and `sort -n` sorts things numerically.\n"
"We could put this in a file,\n"
"but then it would only ever sort a list of `.pdb` files in the current "
"directory.\n"
"If we want to be able to get a sorted list of other kinds of files,\n"
"we need a way to get all those names into the script.\n"
"We can't use `$1`, `$2`, and so on\n"
"because we don't know how many files there are.\n"
"Instead, we use the special variable `$@`,\n"
"which means,\n"
"\"All of the command-line arguments to the shell script.\"\n"
"We also should put `$@` inside double-quotes\n"
"to handle the case of arguments containing spaces\n"
"(`\"$@\"` is equivalent to `\"$1\"` `\"$2\"` ...)\n"
"Here's an example:"
msgstr ""
"because `wc -l` lists the number of lines in the files\n"
"(recall that `wc` stands for 'word count', adding the `-l` flag means 'count "
"lines' instead)\n"
"and `sort -n` sorts things numerically.\n"
"We could put this in a file,\n"
"but then it would only ever sort a list of `.pdb` files in the current "
"directory.\n"
"If we want to be able to get a sorted list of other kinds of files,\n"
"we need a way to get all those names into the script.\n"
"We can't use `$1`, `$2`, and so on\n"
"because we don't know how many files there are.\n"
"Instead, we use the special variable `$@`,\n"
"which means,\n"
"\"All of the command-line arguments to the shell script.\"\n"
"We also should put `$@` inside double-quotes\n"
"to handle the case of arguments containing spaces\n"
"(`\"$@\"` is equivalent to `\"$1\"` `\"$2\"` ...)\n"
"Here's an example:"

# code block
#: shell-novice/_episodes/06-script.md:245
msgid ""
"~~~\n"
"$ nano sorted.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano sorted.sh\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:250
msgid ""
"~~~\n"
"# Sort filenames by their length.\n"
"# Usage: bash sorted.sh one_or_more_filenames\n"
"wc -l \"$@\" | sort -n\n"
"~~~"
msgstr ""
"~~~\n"
"# Sort filenames by their length.\n"
"# Usage: bash sorted.sh one_or_more_filenames\n"
"wc -l \"$@\" | sort -n\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:257
msgid ""
"~~~\n"
"$ bash sorted.sh *.pdb ../creatures/*.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash sorted.sh *.pdb ../creatures/*.dat\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:262
msgid ""
"~~~\n"
"9 methane.pdb\n"
"12 ethane.pdb\n"
"15 propane.pdb\n"
"20 cubane.pdb\n"
"21 pentane.pdb\n"
"30 octane.pdb\n"
"163 ../creatures/basilisk.dat\n"
"163 ../creatures/unicorn.dat\n"
"~~~"
msgstr ""
"~~~\n"
"9 methane.pdb\n"
"12 ethane.pdb\n"
"15 propane.pdb\n"
"20 cubane.pdb\n"
"21 pentane.pdb\n"
"30 octane.pdb\n"
"163 ../creatures/basilisk.dat\n"
"163 ../creatures/unicorn.dat\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:274
msgid "> ## List Unique Species"
msgstr "> ## List Unique Species"

#: shell-novice/_episodes/06-script.md:275
msgid ""
">\n"
"> Leah has several hundred data files, each of which is formatted like "
"this:\n"
">\n"
"> ~~~\n"
"> 2013-11-05,deer,5\n"
"> 2013-11-05,rabbit,22\n"
"> 2013-11-05,raccoon,7\n"
"> 2013-11-06,rabbit,19\n"
"> 2013-11-06,deer,2\n"
"> 2013-11-06,fox,1\n"
"> 2013-11-07,rabbit,18\n"
"> 2013-11-07,bear,1\n"
"> ~~~"
msgstr ""
">\n"
"> Leah has several hundred data files, each of which is formatted like "
"this:\n"
">\n"
"> ~~~\n"
"> 2013-11-05,deer,5\n"
"> 2013-11-05,rabbit,22\n"
"> 2013-11-05,raccoon,7\n"
"> 2013-11-06,rabbit,19\n"
"> 2013-11-06,deer,2\n"
"> 2013-11-06,fox,1\n"
"> 2013-11-07,rabbit,18\n"
"> 2013-11-07,bear,1\n"
"> ~~~"

#: shell-novice/_episodes/06-script.md:289
msgid ""
">\n"
"> An example of this type of file is given in `data-shell/data/animal-counts/"
"animals.txt`.\n"
"> \n"
"> Write a shell script called `species.sh` that takes any number of\n"
"> filenames as command-line arguments, and uses `cut`, `sort`, and\n"
"> `uniq` to print a list of the unique species appearing in each of\n"
"> those files separately.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Script to find unique species in csv files where species is the second "
"data field\n"
"> > # This script accepts any number of file names as command line "
"arguments\n"
"> >\n"
"> > # Loop over all files\n"
"> > for file in $@ \n"
"> > do\n"
"> > \techo \"Unique species in $file:\"\n"
"> > \t# Extract species names\n"
"> > \tcut -d , -f 2 $file | sort | uniq\n"
"> > done\n"
"> > ```\n"
"> > {: .source}"
msgstr ""
">\n"
"> An example of this type of file is given in `data-shell/data/animal-counts/"
"animals.txt`.\n"
"> \n"
"> Write a shell script called `species.sh` that takes any number of\n"
"> filenames as command-line arguments, and uses `cut`, `sort`, and\n"
"> `uniq` to print a list of the unique species appearing in each of\n"
"> those files separately.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Script to find unique species in csv files where species is the second "
"data field\n"
"> > # This script accepts any number of file names as command line "
"arguments\n"
"> >\n"
"> > # Loop over all files\n"
"> > for file in $@ \n"
"> > do\n"
"> > \techo \"Unique species in $file:\"\n"
"> > \t# Extract species names\n"
"> > \tcut -d , -f 2 $file | sort | uniq\n"
"> > done\n"
"> > ```\n"
"> > {: .source}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:315
msgid "> ## Why Isn't It Doing Anything?"
msgstr "> ## Why Isn't It Doing Anything?"

#: shell-novice/_episodes/06-script.md:316
msgid ""
">\n"
"> What happens if a script is supposed to process a bunch of files, but we\n"
"> don't give it any filenames? For example, what if we type:\n"
">\n"
"> ~~~\n"
"> $ bash sorted.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> but don't say `*.dat` (or anything else)? In this case, `$@` expands to\n"
"> nothing at all, so the pipeline inside the script is effectively:\n"
">\n"
"> ~~~\n"
"> $ wc -l | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Since it doesn't have any filenames, `wc` assumes it is supposed to\n"
"> process standard input, so it just sits there and waits for us to give\n"
"> it some data interactively. From the outside, though, all we see is it\n"
"> sitting there: the script doesn't appear to do anything."
msgstr ""
">\n"
"> What happens if a script is supposed to process a bunch of files, but we\n"
"> don't give it any filenames? For example, what if we type:\n"
">\n"
"> ~~~\n"
"> $ bash sorted.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> but don't say `*.dat` (or anything else)? In this case, `$@` expands to\n"
"> nothing at all, so the pipeline inside the script is effectively:\n"
">\n"
"> ~~~\n"
"> $ wc -l | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Since it doesn't have any filenames, `wc` assumes it is supposed to\n"
"> process standard input, so it just sits there and waits for us to give\n"
"> it some data interactively. From the outside, though, all we see is it\n"
"> sitting there: the script doesn't appear to do anything."

#: shell-novice/_episodes/06-script.md:340
msgid ""
"Suppose we have just run a series of commands that did something useful --- "
"for example,\n"
"that created a graph we'd like to use in a paper.\n"
"We'd like to be able to re-create the graph later if we need to,\n"
"so we want to save the commands in a file.\n"
"Instead of typing them in again\n"
"(and potentially getting them wrong)\n"
"we can do this:"
msgstr ""
"Suppose we have just run a series of commands that did something useful --- "
"for example,\n"
"that created a graph we'd like to use in a paper.\n"
"We'd like to be able to re-create the graph later if we need to,\n"
"so we want to save the commands in a file.\n"
"Instead of typing them in again\n"
"(and potentially getting them wrong)\n"
"we can do this:"

# code block
#: shell-novice/_episodes/06-script.md:348
msgid ""
"~~~\n"
"$ history | tail -n 5 > redo-figure-3.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ history | tail -n 5 > redo-figure-3.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:353
msgid "The file `redo-figure-3.sh` now contains:"
msgstr "The file `redo-figure-3.sh` now contains:"

# code block
#: shell-novice/_episodes/06-script.md:355
msgid ""
"~~~\n"
"297 bash goostats NENE01729B.txt stats-NENE01729B.txt\n"
"298 bash goodiff stats-NENE01729B.txt /data/validated/01729.txt > 01729-"
"differences.txt\n"
"299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt\n"
"300 ygraph --format scatter --color bw --borders none 01729-time-series.txt "
"figure-3.png\n"
"301 history | tail -n 5 > redo-figure-3.sh\n"
"~~~"
msgstr ""
"~~~\n"
"297 bash goostats NENE01729B.txt stats-NENE01729B.txt\n"
"298 bash goodiff stats-NENE01729B.txt /data/validated/01729.txt > 01729-"
"differences.txt\n"
"299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt\n"
"300 ygraph --format scatter --color bw --borders none 01729-time-series.txt "
"figure-3.png\n"
"301 history | tail -n 5 > redo-figure-3.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:364
msgid ""
"After a moment's work in an editor to remove the serial numbers on the "
"commands,\n"
"and to remove the final line where we called the `history` command,\n"
"we have a completely accurate record of how we created that figure."
msgstr ""
"After a moment's work in an editor to remove the serial numbers on the "
"commands,\n"
"and to remove the final line where we called the `history` command,\n"
"we have a completely accurate record of how we created that figure."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:368
msgid "> ## Why Record Commands in the History Before Running Them?"
msgstr "> ## Why Record Commands in the History Before Running Them?"

#: shell-novice/_episodes/06-script.md:369
msgid ""
">\n"
"> If you run the command:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5 > recent.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the last command in the file is the `history` command itself, i.e.,\n"
"> the shell has added `history` to the command log before actually\n"
"> running it. In fact, the shell *always* adds commands to the log\n"
"> before running them. Why do you think it does this?\n"
">\n"
"> > ## Solution\n"
"> > If a command causes something to crash or hang, it might be useful\n"
"> > to know what that command was, in order to investigate the problem.\n"
"> > Were the command only be recorded after running it, we would not\n"
"> > have a record of the last command run in the event of a crash."
msgstr ""
">\n"
"> If you run the command:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5 > recent.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the last command in the file is the `history` command itself, i.e.,\n"
"> the shell has added `history` to the command log before actually\n"
"> running it. In fact, the shell *always* adds commands to the log\n"
"> before running them. Why do you think it does this?\n"
">\n"
"> > ## Solution\n"
"> > If a command causes something to crash or hang, it might be useful\n"
"> > to know what that command was, in order to investigate the problem.\n"
"> > Were the command only be recorded after running it, we would not\n"
"> > have a record of the last command run in the event of a crash."

#: shell-novice/_episodes/06-script.md:390
msgid ""
"In practice, most people develop shell scripts by running commands at the "
"shell prompt a few times\n"
"to make sure they're doing the right thing,\n"
"then saving them in a file for re-use.\n"
"This style of work allows people to recycle\n"
"what they discover about their data and their workflow with one call to "
"`history`\n"
"and a bit of editing to clean up the output\n"
"and save it as a shell script."
msgstr ""
"In practice, most people develop shell scripts by running commands at the "
"shell prompt a few times\n"
"to make sure they're doing the right thing,\n"
"then saving them in a file for re-use.\n"
"This style of work allows people to recycle\n"
"what they discover about their data and their workflow with one call to "
"`history`\n"
"and a bit of editing to clean up the output\n"
"and save it as a shell script."

# header
#: shell-novice/_episodes/06-script.md:398
msgid "## Nelle's Pipeline: Creating a Script"
msgstr "## Nelle's Pipeline: Creating a Script"

#: shell-novice/_episodes/06-script.md:400
msgid ""
"Nelle's supervisor insisted that all her analytics must be reproducible. The "
"easiest way to capture all the steps is in a script.\n"
"She runs the editor and writes the following:"
msgstr ""
"Nelle's supervisor insisted that all her analytics must be reproducible. The "
"easiest way to capture all the steps is in a script.\n"
"She runs the editor and writes the following:"

# code block
#: shell-novice/_episodes/06-script.md:403
msgid ""
"~~~\n"
"# Calculate stats for data files.\n"
"for datafile in \"$@\"\n"
"do\n"
"    echo $datafile\n"
"    bash goostats $datafile stats-$datafile\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"# Calculate stats for data files.\n"
"for datafile in \"$@\"\n"
"do\n"
"    echo $datafile\n"
"    bash goostats $datafile stats-$datafile\n"
"done\n"
"~~~"

#: shell-novice/_episodes/06-script.md:413
msgid ""
"She saves this in a file called `do-stats.sh`\n"
"so that she can now re-do the first stage of her analysis by typing:"
msgstr ""
"She saves this in a file called `do-stats.sh`\n"
"so that she can now re-do the first stage of her analysis by typing:"

# code block
#: shell-novice/_episodes/06-script.md:416
msgid ""
"~~~\n"
"$ bash do-stats.sh NENE*[AB].txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash do-stats.sh NENE*[AB].txt\n"
"~~~"

#: shell-novice/_episodes/06-script.md:421
msgid "She can also do this:"
msgstr "She can also do this:"

# code block
#: shell-novice/_episodes/06-script.md:423
msgid ""
"~~~\n"
"$ bash do-stats.sh NENE*[AB].txt | wc -l\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash do-stats.sh NENE*[AB].txt | wc -l\n"
"~~~"

#: shell-novice/_episodes/06-script.md:428
msgid ""
"so that the output is just the number of files processed\n"
"rather than the names of the files that were processed."
msgstr ""
"so that the output is just the number of files processed\n"
"rather than the names of the files that were processed."

#: shell-novice/_episodes/06-script.md:431
msgid ""
"One thing to note about Nelle's script is that\n"
"it lets the person running it decide what files to process.\n"
"She could have written it as:"
msgstr ""
"One thing to note about Nelle's script is that\n"
"it lets the person running it decide what files to process.\n"
"She could have written it as:"

# code block
#: shell-novice/_episodes/06-script.md:435
msgid ""
"~~~\n"
"# Calculate stats for Site A and Site B data files.\n"
"for datafile in NENE*[AB].txt\n"
"do\n"
"    echo $datafile\n"
"    bash goostats $datafile stats-$datafile\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"# Calculate stats for Site A and Site B data files.\n"
"for datafile in NENE*[AB].txt\n"
"do\n"
"    echo $datafile\n"
"    bash goostats $datafile stats-$datafile\n"
"done\n"
"~~~"

#: shell-novice/_episodes/06-script.md:445
msgid ""
"The advantage is that this always selects the right files:\n"
"she doesn't have to remember to exclude the 'Z' files.\n"
"The disadvantage is that it *always* selects just those files --- she can't "
"run it on all files\n"
"(including the 'Z' files),\n"
"or on the 'G' or 'H' files her colleagues in Antarctica are producing,\n"
"without editing the script.\n"
"If she wanted to be more adventurous,\n"
"she could modify her script to check for command-line arguments,\n"
"and use `NENE*[AB].txt` if none were provided.\n"
"Of course, this introduces another tradeoff between flexibility and "
"complexity."
msgstr ""
"The advantage is that this always selects the right files:\n"
"she doesn't have to remember to exclude the 'Z' files.\n"
"The disadvantage is that it *always* selects just those files --- she can't "
"run it on all files\n"
"(including the 'Z' files),\n"
"or on the 'G' or 'H' files her colleagues in Antarctica are producing,\n"
"without editing the script.\n"
"If she wanted to be more adventurous,\n"
"she could modify her script to check for command-line arguments,\n"
"and use `NENE*[AB].txt` if none were provided.\n"
"Of course, this introduces another tradeoff between flexibility and "
"complexity."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:456
msgid "> ## Variables in Shell Scripts"
msgstr "> ## Variables in Shell Scripts"

#: shell-novice/_episodes/06-script.md:457
msgid ""
">\n"
"> In the `molecules` directory, imagine you have a shell script called "
"`script.sh` containing the\n"
"> following commands:\n"
">\n"
"> ~~~\n"
"> head -n $2 $1\n"
"> tail -n $3 $1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> While you are in the `molecules` directory, you type the following "
"command:\n"
">\n"
"> ~~~\n"
"> bash script.sh '*.pdb' 1 1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Which of the following outputs would you expect to see?\n"
">\n"
"> 1. All of the lines between the first and the last lines of each file "
"ending in `.pdb`\n"
">    in the `molecules` directory\n"
"> 2. The first and the last line of each file ending in `.pdb` in the "
"`molecules` directory\n"
"> 3. The first and the last line of each file in the `molecules` directory\n"
"> 4. An error because of the quotes around `*.pdb`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 2. \n"
"> >\n"
"> > The special variables $1, $2 and $3 represent the command line arguments "
"given to the\n"
"> > script, such that the commands run are:\n"
"> >\n"
"> > ```\n"
"> > $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > The shell does not expand `'*.pdb'` because it is enclosed by quote "
"marks.\n"
"> > As such, the first argument to the script is `'*.pdb'` which gets "
"expanded within the\n"
"> > script by `head` and `tail`."
msgstr ""
">\n"
"> In the `molecules` directory, imagine you have a shell script called "
"`script.sh` containing the\n"
"> following commands:\n"
">\n"
"> ~~~\n"
"> head -n $2 $1\n"
"> tail -n $3 $1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> While you are in the `molecules` directory, you type the following "
"command:\n"
">\n"
"> ~~~\n"
"> bash script.sh '*.pdb' 1 1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Which of the following outputs would you expect to see?\n"
">\n"
"> 1. All of the lines between the first and the last lines of each file "
"ending in `.pdb`\n"
">    in the `molecules` directory\n"
"> 2. The first and the last line of each file ending in `.pdb` in the "
"`molecules` directory\n"
"> 3. The first and the last line of each file in the `molecules` directory\n"
"> 4. An error because of the quotes around `*.pdb`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 2. \n"
"> >\n"
"> > The special variables $1, $2 and $3 represent the command line arguments "
"given to the\n"
"> > script, such that the commands run are:\n"
"> >\n"
"> > ```\n"
"> > $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > The shell does not expand `'*.pdb'` because it is enclosed by quote "
"marks.\n"
"> > As such, the first argument to the script is `'*.pdb'` which gets "
"expanded within the\n"
"> > script by `head` and `tail`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:499
msgid "> ## Find the Longest File With a Given Extension"
msgstr "> ## Find the Longest File With a Given Extension"

#: shell-novice/_episodes/06-script.md:500
msgid ""
">\n"
"> Write a shell script called `longest.sh` that takes the name of a\n"
"> directory and a filename extension as its arguments, and prints\n"
"> out the name of the file with the most lines in that directory\n"
"> with that extension. For example:\n"
">\n"
"> ~~~\n"
"> $ bash longest.sh /tmp/data pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> would print the name of the `.pdb` file in `/tmp/data` that has\n"
"> the most lines.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Shell script which takes two arguments: \n"
"> > #    1. a directory name\n"
"> > #    2. a file extension\n"
"> > # and prints the name of the file in that directory\n"
"> > # with the most lines which matches the file extension.\n"
"> > \n"
"> > wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1\n"
"> > ```\n"
"> > {: .source}"
msgstr ""
">\n"
"> Write a shell script called `longest.sh` that takes the name of a\n"
"> directory and a filename extension as its arguments, and prints\n"
"> out the name of the file with the most lines in that directory\n"
"> with that extension. For example:\n"
">\n"
"> ~~~\n"
"> $ bash longest.sh /tmp/data pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> would print the name of the `.pdb` file in `/tmp/data` that has\n"
"> the most lines.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Shell script which takes two arguments: \n"
"> > #    1. a directory name\n"
"> > #    2. a file extension\n"
"> > # and prints the name of the file in that directory\n"
"> > # with the most lines which matches the file extension.\n"
"> > \n"
"> > wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1\n"
"> > ```\n"
"> > {: .source}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:529
msgid "> ## Script Reading Comprehension"
msgstr "> ## Script Reading Comprehension"

#: shell-novice/_episodes/06-script.md:530
msgid ""
">\n"
"> For this question, consider the `data-shell/molecules` directory once "
"again.\n"
"> This contains a number of `.pdb` files in addition to any other files you\n"
"> may have created.\n"
"> Explain what a script called `example.sh` would do when run as\n"
"> `bash example.sh *.pdb` if it contained the following lines:\n"
">\n"
"> ~~~\n"
"> # Script 1\n"
"> echo *.*\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 2\n"
"> for filename in $1 $2 $3\n"
"> do\n"
">     cat $filename\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 3\n"
"> echo $@.pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solutions\n"
"> > Script 1 would print out a list of all files containing a dot in their "
"name.\n"
"> >\n"
"> > Script 2 would print the contents of the first 3 files matching the file "
"extension.\n"
"> > The shell expands the wildcard before passing the arguments to the "
"`example.sh` script.\n"
"> > \n"
"> > Script 3 would print all the arguments to the script (i.e. all the `."
"pdb` files),\n"
"> > followed by `.pdb`.\n"
"> > ```\n"
"> > cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb."
"pdb\n"
"> > ```\n"
"> > {: .output}"
msgstr ""
">\n"
"> For this question, consider the `data-shell/molecules` directory once "
"again.\n"
"> This contains a number of `.pdb` files in addition to any other files you\n"
"> may have created.\n"
"> Explain what a script called `example.sh` would do when run as\n"
"> `bash example.sh *.pdb` if it contained the following lines:\n"
">\n"
"> ~~~\n"
"> # Script 1\n"
"> echo *.*\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 2\n"
"> for filename in $1 $2 $3\n"
"> do\n"
">     cat $filename\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 3\n"
"> echo $@.pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solutions\n"
"> > Script 1 would print out a list of all files containing a dot in their "
"name.\n"
"> >\n"
"> > Script 2 would print the contents of the first 3 files matching the file "
"extension.\n"
"> > The shell expands the wildcard before passing the arguments to the "
"`example.sh` script.\n"
"> > \n"
"> > Script 3 would print all the arguments to the script (i.e. all the `."
"pdb` files),\n"
"> > followed by `.pdb`.\n"
"> > ```\n"
"> > cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb."
"pdb\n"
"> > ```\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:573
msgid "> ## Debugging Scripts"
msgstr "> ## Debugging Scripts"

#: shell-novice/_episodes/06-script.md:574
msgid ""
">\n"
"> Suppose you have saved the following script in a file called `do-errors."
"sh`\n"
"> in Nelle's `north-pacific-gyre/2012-07-03` directory:\n"
">\n"
"> ~~~\n"
"> # Calculate stats for data files.\n"
"> for datafile in \"$@\"\n"
"> do\n"
">     echo $datfile\n"
">     bash goostats $datafile stats-$datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you run it:\n"
">\n"
"> ~~~\n"
"> $ bash do-errors.sh NENE*[AB].txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the output is blank.\n"
"> To figure out why, re-run the script using the `-x` option:\n"
">\n"
"> ~~~\n"
"> bash -x do-errors.sh NENE*[AB].txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the output showing you?\n"
"> Which line is responsible for the error?\n"
">\n"
"> > ## Solution\n"
"> > The `-x` flag causes `bash` to run in debug mode.\n"
"> > This prints out each command as it is run, which will help you to locate "
"errors.\n"
"> > In this example, we can see that `echo` isn't printing anything. We have "
"made a typo\n"
"> > in the loop variable name, and the variable `datfile` doesn't exist, "
"hence returning\n"
"> > an empty string."
msgstr ""
">\n"
"> Suppose you have saved the following script in a file called `do-errors."
"sh`\n"
"> in Nelle's `north-pacific-gyre/2012-07-03` directory:\n"
">\n"
"> ~~~\n"
"> # Calculate stats for data files.\n"
"> for datafile in \"$@\"\n"
"> do\n"
">     echo $datfile\n"
">     bash goostats $datafile stats-$datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you run it:\n"
">\n"
"> ~~~\n"
"> $ bash do-errors.sh NENE*[AB].txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the output is blank.\n"
"> To figure out why, re-run the script using the `-x` option:\n"
">\n"
"> ~~~\n"
"> bash -x do-errors.sh NENE*[AB].txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the output showing you?\n"
"> Which line is responsible for the error?\n"
">\n"
"> > ## Solution\n"
"> > The `-x` flag causes `bash` to run in debug mode.\n"
"> > This prints out each command as it is run, which will help you to locate "
"errors.\n"
"> > In this example, we can see that `echo` isn't printing anything. We have "
"made a typo\n"
"> > in the loop variable name, and the variable `datfile` doesn't exist, "
"hence returning\n"
"> > an empty string."

# Front Matter
#: shell-novice/_episodes/07-find.md:1
msgid ""
"---\n"
"title: \"Finding Things\"\n"
"teaching: 25\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I find files?\"\n"
"- \"How can I find things in files?\"\n"
"objectives:\n"
"- \"Use `grep` to select lines from text files that match simple patterns."
"\"\n"
"- \"Use `find` to find files whose names match simple patterns.\"\n"
"- \"Use the output of one command as the command-line argument(s) to another "
"command.\"\n"
"- \"Explain what is meant by 'text' and 'binary' files, and why many common "
"tools don't handle the latter well.\"\n"
"keypoints:\n"
"- \"`find` finds files with specific properties that match patterns.\"\n"
"- \"`grep` selects lines in files that match patterns.\"\n"
"- \"`--help` is a flag supported by many bash commands, and programs that "
"can be run from within Bash,\n"
"to display more information on how to use these commands or programs.\"\n"
"- \"`man command` displays the manual page for a given command.\"\n"
"- \"`$(command)` inserts a command's output in place.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Finding Things\"\n"
"teaching: 25\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I find files?\"\n"
"- \"How can I find things in files?\"\n"
"objectives:\n"
"- \"Use `grep` to select lines from text files that match simple patterns."
"\"\n"
"- \"Use `find` to find files whose names match simple patterns.\"\n"
"- \"Use the output of one command as the command-line argument(s) to another "
"command.\"\n"
"- \"Explain what is meant by 'text' and 'binary' files, and why many common "
"tools don't handle the latter well.\"\n"
"keypoints:\n"
"- \"`find` finds files with specific properties that match patterns.\"\n"
"- \"`grep` selects lines in files that match patterns.\"\n"
"- \"`--help` is a flag supported by many bash commands, and programs that "
"can be run from within Bash, \n"
"to display more information on how to use these commands or programs.\"\n"
"- \"`man command` displays the manual page for a given command.\"\n"
"- \"`$(command)` inserts a command's output in place.\"\n"
"---"

#: shell-novice/_episodes/07-find.md:22
msgid ""
"In the same way that many of us now use \"Google\" as a \n"
"verb meaning \"to find\", Unix programmers often use the \n"
"word \"grep\".\n"
"\"grep\" is a contraction of \"global/regular expression/print\",\n"
"a common sequence of operations in early Unix text editors.\n"
"It is also the name of a very useful command-line program."
msgstr ""
"In the same way that many of us now use \"Google\" as a \n"
"verb meaning \"to find\", Unix programmers often use the \n"
"word \"grep\".\n"
"\"grep\" is a contraction of \"global/regular expression/print\",\n"
"a common sequence of operations in early Unix text editors.\n"
"It is also the name of a very useful command-line program."

#: shell-novice/_episodes/07-find.md:29
msgid ""
"`grep` finds and prints lines in files that match a pattern.\n"
"For our examples,\n"
"we will use a file that contains three haikus taken from a\n"
"1998 competition in *Salon* magazine. For this set of examples,\n"
"we're going to be working in the writing subdirectory:"
msgstr ""
"`grep` finds and prints lines in files that match a pattern.\n"
"For our examples,\n"
"we will use a file that contains three haikus taken from a\n"
"1998 competition in *Salon* magazine. For this set of examples,\n"
"we're going to be working in the writing subdirectory:"

# code block
#: shell-novice/_episodes/07-find.md:35
msgid ""
"~~~\n"
"$ cd\n"
"$ cd Desktop/data-shell/writing\n"
"$ cat haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd\n"
"$ cd Desktop/data-shell/writing\n"
"$ cat haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:42
msgid ""
"~~~\n"
"The Tao that is seen\n"
"Is not the true Tao, until\n"
"You bring fresh toner.\n"
"\n"
"With searching comes loss\n"
"and the presence of absence:\n"
"\"My Thesis\" not found.\n"
"\n"
"Yesterday it worked\n"
"Today it is not working\n"
"Software is like that.\n"
"~~~"
msgstr ""
"~~~\n"
"The Tao that is seen\n"
"Is not the true Tao, until\n"
"You bring fresh toner.\n"
"\n"
"With searching comes loss\n"
"and the presence of absence:\n"
"\"My Thesis\" not found.\n"
"\n"
"Yesterday it worked\n"
"Today it is not working\n"
"Software is like that.\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:57
msgid "> ## Forever, or Five Years"
msgstr "> ## Forever, or Five Years"

#: shell-novice/_episodes/07-find.md:58
msgid ""
">\n"
"> We haven't linked to the original haikus because they don't appear to be "
"on *Salon*'s site any longer.\n"
"> As [Jeff Rothenberg said](http://www.clir.org/pubs/archives/ensuring."
"pdf),\n"
"> \"Digital information lasts forever --- or five years, whichever comes "
"first.\"\n"
"> Luckily, popular content often [has backups](http://wiki.c2.com/?"
"ComputerErrorHaiku)."
msgstr ""
">\n"
"> We haven't linked to the original haikus because they don't appear to be "
"on *Salon*'s site any longer.\n"
"> As [Jeff Rothenberg said](http://www.clir.org/pubs/archives/ensuring."
"pdf),\n"
"> \"Digital information lasts forever --- or five years, whichever comes "
"first.\"\n"
"> Luckily, popular content often [has backups](http://wiki.c2.com/?"
"ComputerErrorHaiku)."

#: shell-novice/_episodes/07-find.md:65
msgid "Let's find lines that contain the word \"not\":"
msgstr "Let's find lines that contain the word \"not\":"

# code block
#: shell-novice/_episodes/07-find.md:67
msgid ""
"~~~\n"
"$ grep not haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep not haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:72
msgid ""
"~~~\n"
"Is not the true Tao, until\n"
"\"My Thesis\" not found\n"
"Today it is not working\n"
"~~~"
msgstr ""
"~~~\n"
"Is not the true Tao, until\n"
"\"My Thesis\" not found\n"
"Today it is not working\n"
"~~~"

#: shell-novice/_episodes/07-find.md:79
msgid ""
"Here, `not` is the pattern we're searching for. The grep command searches "
"through the file, looking for\n"
"matches to the pattern specified. To use it type `grep`, then the pattern "
"we're searching for and\n"
"finally the name of the file (or files) we're searching in."
msgstr ""
"Here, `not` is the pattern we're searching for. The grep command searches "
"through the file, looking for\n"
"matches to the pattern specified. To use it type `grep`, then the pattern "
"we're searching for and\n"
"finally the name of the file (or files) we're searching in."

#: shell-novice/_episodes/07-find.md:83
msgid ""
"The output is the three lines in the file that contain the letters \"not\"."
msgstr ""
"The output is the three lines in the file that contain the letters \"not\"."

#: shell-novice/_episodes/07-find.md:85
msgid "Let's try a different pattern: \"The\"."
msgstr "Let's try a different pattern: \"The\"."

# code block
#: shell-novice/_episodes/07-find.md:87
msgid ""
"~~~\n"
"$ grep The haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep The haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:92
msgid ""
"~~~\n"
"The Tao that is seen\n"
"\"My Thesis\" not found.\n"
"~~~"
msgstr ""
"~~~\n"
"The Tao that is seen\n"
"\"My Thesis\" not found.\n"
"~~~"

#: shell-novice/_episodes/07-find.md:98
msgid ""
"This time,\n"
"two lines that include the letters \"The\" are outputted.\n"
"However, one instance of those letters is contained within a larger word,\n"
"\"Thesis\"."
msgstr ""
"This time,\n"
"two lines that include the letters \"The\" are outputted.\n"
"However, one instance of those letters is contained within a larger word,\n"
"\"Thesis\"."

#: shell-novice/_episodes/07-find.md:103
msgid ""
"To restrict matches to lines containing the word \"The\" on its own,\n"
"we can give `grep` with the `-w` flag.\n"
"This will limit matches to word boundaries."
msgstr ""
"To restrict matches to lines containing the word \"The\" on its own,\n"
"we can give `grep` with the `-w` flag.\n"
"This will limit matches to word boundaries."

# code block
#: shell-novice/_episodes/07-find.md:107
msgid ""
"~~~\n"
"$ grep -w The haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -w The haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:112
msgid ""
"~~~\n"
"The Tao that is seen\n"
"~~~"
msgstr ""
"~~~\n"
"The Tao that is seen\n"
"~~~"

#: shell-novice/_episodes/07-find.md:117
msgid ""
"Note that a \"word boundary\" includes the start and end of a line, so not\n"
"just letters surrounded by spaces. \n"
"Sometimes we don't\n"
"want to search for a single word, but a phrase. This is also easy to do "
"with\n"
"`grep` by putting the phrase in quotes."
msgstr ""
"Note that a \"word boundary\" includes the start and end of a line, so not\n"
"just letters surrounded by spaces. \n"
"Sometimes we don't\n"
"want to search for a single word, but a phrase. This is also easy to do "
"with\n"
"`grep` by putting the phrase in quotes."

# code block
#: shell-novice/_episodes/07-find.md:123
msgid ""
"~~~\n"
"$ grep -w \"is not\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -w \"is not\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:128
msgid ""
"~~~\n"
"Today it is not working\n"
"~~~"
msgstr ""
"~~~\n"
"Today it is not working\n"
"~~~"

#: shell-novice/_episodes/07-find.md:133
msgid ""
"We've now seen that you don't have to have quotes around single words,\n"
"but it is useful to use quotes when searching for multiple words.\n"
"It also helps to make it easier to distinguish between the search term or "
"phrase\n"
"and the file being searched.\n"
"We will use quotes in the remaining examples."
msgstr ""
"We've now seen that you don't have to have quotes around single words,\n"
"but it is useful to use quotes when searching for multiple words.\n"
"It also helps to make it easier to distinguish between the search term or "
"phrase\n"
"and the file being searched.\n"
"We will use quotes in the remaining examples."

#: shell-novice/_episodes/07-find.md:139
msgid "Another useful option is `-n`, which numbers the lines that match:"
msgstr "Another useful option is `-n`, which numbers the lines that match:"

# code block
#: shell-novice/_episodes/07-find.md:141
msgid ""
"~~~\n"
"$ grep -n \"it\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n \"it\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:146
msgid ""
"~~~\n"
"5:With searching comes loss\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"~~~"
msgstr ""
"~~~\n"
"5:With searching comes loss\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"~~~"

#: shell-novice/_episodes/07-find.md:153
msgid "Here, we can see that lines 5, 9, and 10 contain the letters \"it\"."
msgstr "Here, we can see that lines 5, 9, and 10 contain the letters \"it\"."

#: shell-novice/_episodes/07-find.md:155
msgid ""
"We can combine options (i.e. flags) as we do with other Unix commands.\n"
"For example, let's find the lines that contain the word \"the\". We can "
"combine\n"
"the option `-w` to find the lines that contain the word \"the\" and `-n` to "
"number the lines that match:"
msgstr ""
"We can combine options (i.e. flags) as we do with other Unix commands.\n"
"For example, let's find the lines that contain the word \"the\". We can "
"combine\n"
"the option `-w` to find the lines that contain the word \"the\" and `-n` to "
"number the lines that match:"

# code block
#: shell-novice/_episodes/07-find.md:159
msgid ""
"~~~\n"
"$ grep -n -w \"the\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n -w \"the\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:164
msgid ""
"~~~\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"
msgstr ""
"~~~\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"

#: shell-novice/_episodes/07-find.md:170
msgid "Now we want to use the option `-i` to make our search case-insensitive:"
msgstr ""
"Now we want to use the option `-i` to make our search case-insensitive:"

# code block
#: shell-novice/_episodes/07-find.md:172
msgid ""
"~~~\n"
"$ grep -n -w -i \"the\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n -w -i \"the\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:177
msgid ""
"~~~\n"
"1:The Tao that is seen\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"
msgstr ""
"~~~\n"
"1:The Tao that is seen\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"

#: shell-novice/_episodes/07-find.md:184
msgid ""
"Now, we want to use the option `-v` to invert our search, i.e., we want to "
"output\n"
"the lines that do not contain the word \"the\"."
msgstr ""
"Now, we want to use the option `-v` to invert our search, i.e., we want to "
"output\n"
"the lines that do not contain the word \"the\"."

# code block
#: shell-novice/_episodes/07-find.md:187
msgid ""
"~~~\n"
"$ grep -n -w -v \"the\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n -w -v \"the\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:192
msgid ""
"~~~\n"
"1:The Tao that is seen\n"
"3:You bring fresh toner.\n"
"4:\n"
"5:With searching comes loss\n"
"7:\"My Thesis\" not found.\n"
"8:\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"11:Software is like that.\n"
"~~~"
msgstr ""
"~~~\n"
"1:The Tao that is seen\n"
"3:You bring fresh toner.\n"
"4:\n"
"5:With searching comes loss\n"
"7:\"My Thesis\" not found.\n"
"8:\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"11:Software is like that.\n"
"~~~"

#: shell-novice/_episodes/07-find.md:205
msgid ""
"`grep` has lots of other options. To find out what they are, we can type:"
msgstr ""
"`grep` has lots of other options. To find out what they are, we can type:"

# code block
#: shell-novice/_episodes/07-find.md:207
msgid ""
"~~~\n"
"$ grep --help\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep --help\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:212
msgid ""
"~~~\n"
"Usage: grep [OPTION]... PATTERN [FILE]...\n"
"Search for PATTERN in each FILE or standard input.\n"
"PATTERN is, by default, a basic regular expression (BRE).\n"
"Example: grep -i 'hello world' menu.h main.c\n"
"\n"
"Regexp selection and interpretation:\n"
"  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n"
"  -F, --fixed-strings       PATTERN is a set of newline-separated fixed "
"strings\n"
"  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n"
"  -P, --perl-regexp         PATTERN is a Perl regular expression\n"
"  -e, --regexp=PATTERN      use PATTERN for matching\n"
"  -f, --file=FILE           obtain PATTERN from FILE\n"
"  -i, --ignore-case         ignore case distinctions\n"
"  -w, --word-regexp         force PATTERN to match only whole words\n"
"  -x, --line-regexp         force PATTERN to match only whole lines\n"
"  -z, --null-data           a data line ends in 0 byte, not newline\n"
"\n"
"Miscellaneous:\n"
"...        ...        ...\n"
"~~~"
msgstr ""
"~~~\n"
"Usage: grep [OPTION]... PATTERN [FILE]...\n"
"Search for PATTERN in each FILE or standard input.\n"
"PATTERN is, by default, a basic regular expression (BRE).\n"
"Example: grep -i 'hello world' menu.h main.c\n"
"\n"
"Regexp selection and interpretation:\n"
"  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n"
"  -F, --fixed-strings       PATTERN is a set of newline-separated fixed "
"strings\n"
"  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n"
"  -P, --perl-regexp         PATTERN is a Perl regular expression\n"
"  -e, --regexp=PATTERN      use PATTERN for matching\n"
"  -f, --file=FILE           obtain PATTERN from FILE\n"
"  -i, --ignore-case         ignore case distinctions\n"
"  -w, --word-regexp         force PATTERN to match only whole words\n"
"  -x, --line-regexp         force PATTERN to match only whole lines\n"
"  -z, --null-data           a data line ends in 0 byte, not newline\n"
"\n"
"Miscellaneous:\n"
"...        ...        ...\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:235
msgid "> ## Using `grep`"
msgstr "> ## Using `grep`"

#: shell-novice/_episodes/07-find.md:236
msgid ""
">\n"
"> Which command would result in the following output:\n"
">\n"
"> ~~~\n"
"> and the presence of absence:\n"
"> ~~~"
msgstr ""
">\n"
"> Which command would result in the following output:\n"
">\n"
"> ~~~\n"
"> and the presence of absence:\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:243
msgid ""
">\n"
"> 1. `grep \"of\" haiku.txt`\n"
"> 2. `grep -E \"of\" haiku.txt`\n"
"> 3. `grep -w \"of\" haiku.txt`\n"
"> 4. `grep -i \"of\" haiku.txt`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 3, because the `-w` flag looks only for whole-word "
"matches.\n"
"> > The other options will all match \"of\" when part of another word."
msgstr ""
">\n"
"> 1. `grep \"of\" haiku.txt`\n"
"> 2. `grep -E \"of\" haiku.txt`\n"
"> 3. `grep -w \"of\" haiku.txt`\n"
"> 4. `grep -i \"of\" haiku.txt`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 3, because the `-w` flag looks only for whole-word "
"matches.\n"
"> > The other options will all match \"of\" when part of another word."

#: shell-novice/_episodes/07-find.md:256
msgid ""
">\n"
"> `grep`'s real power doesn't come from its options, though; it comes from\n"
"> the fact that patterns can include wildcards. (The technical name for\n"
"> these is **regular expressions**, which\n"
"> is what the \"re\" in \"grep\" stands for.) Regular expressions are both "
"complex\n"
"> and powerful; if you want to do complex searches, please look at the "
"lesson\n"
"> on [our website](http://v4.software-carpentry.org/regexp/index.html). As a "
"taster, we can\n"
"> find lines that have an 'o' in the second position like this:\n"
">\n"
"> ~~~\n"
"> $ grep -E '^.o' haiku.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> You bring fresh toner.\n"
"> Today it is not working\n"
"> Software is like that.\n"
"> ~~~"
msgstr ""
">\n"
"> `grep`'s real power doesn't come from its options, though; it comes from\n"
"> the fact that patterns can include wildcards. (The technical name for\n"
"> these is **regular expressions**, which\n"
"> is what the \"re\" in \"grep\" stands for.) Regular expressions are both "
"complex\n"
"> and powerful; if you want to do complex searches, please look at the "
"lesson\n"
"> on [our website](http://v4.software-carpentry.org/regexp/index.html). As a "
"taster, we can\n"
"> find lines that have an 'o' in the second position like this:\n"
">\n"
"> ~~~\n"
"> $ grep -E '^.o' haiku.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> You bring fresh toner.\n"
"> Today it is not working\n"
"> Software is like that.\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:276
msgid ""
">\n"
"> We use the `-E` flag and put the pattern in quotes to prevent the shell\n"
"> from trying to interpret it. (If the pattern contained a `*`, for\n"
"> example, the shell would try to expand it before running `grep`.) The\n"
"> `^` in the pattern anchors the match to the start of the line. The `.`\n"
"> matches a single character (just like `?` in the shell), while the `o`\n"
"> matches an actual 'o'."
msgstr ""
">\n"
"> We use the `-E` flag and put the pattern in quotes to prevent the shell\n"
"> from trying to interpret it. (If the pattern contained a `*`, for\n"
"> example, the shell would try to expand it before running `grep`.) The\n"
"> `^` in the pattern anchors the match to the start of the line. The `.`\n"
"> matches a single character (just like `?` in the shell), while the `o`\n"
"> matches an actual 'o'."

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:285
msgid "> ## Tracking a Species"
msgstr "> ## Tracking a Species"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:287
msgid "> Leah has several hundred "
msgstr "> Leah has several hundred "

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:288
msgid ""
"> data files saved in one directory, each of which is formatted like this:"
msgstr ""
"> data files saved in one directory, each of which is formatted like this:"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:291
msgid "> 2013-11-05,deer,5"
msgstr "> 2013-11-05,deer,5"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:292
msgid "> 2013-11-05,rabbit,22"
msgstr "> 2013-11-05,rabbit,22"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:293
msgid "> 2013-11-05,raccoon,7"
msgstr "> 2013-11-05,raccoon,7"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:294
msgid "> 2013-11-06,rabbit,19"
msgstr "> 2013-11-06,rabbit,19"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:295
msgid "> 2013-11-06,deer,2"
msgstr "> 2013-11-06,deer,2"

#: shell-novice/_episodes/07-find.md:298
msgid ""
">\n"
"> She wants to write a shell script that takes a species as the first "
"command-line argument \n"
"> and a directory as the second argument. The script should return one file "
"called `species.txt` \n"
"> containing a list of dates and the number of that species seen on each "
"date.\n"
"> For example using the data shown above, `rabbits.txt` would contain:\n"
"> \n"
"> ~~~\n"
"> 2013-11-05,22\n"
"> 2013-11-06,19\n"
"> ~~~"
msgstr ""
">\n"
"> She wants to write a shell script that takes a species as the first "
"command-line argument \n"
"> and a directory as the second argument. The script should return one file "
"called `species.txt` \n"
"> containing a list of dates and the number of that species seen on each "
"date.\n"
"> For example using the data shown above, `rabbits.txt` would contain:\n"
"> \n"
"> ~~~\n"
"> 2013-11-05,22\n"
"> 2013-11-06,19\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:309
msgid ""
">\n"
"> Put these commands and pipes in the right order to achieve this:\n"
"> \n"
"> ~~~\n"
"> cut -d : -f 2  \n"
"> >  \n"
"> |  \n"
"> grep -w $1 -r $2  \n"
"> |  \n"
"> $1.txt  \n"
"> cut -d , -f 1,3  \n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: use `man grep` to look for how to grep text recursively in a "
"directory\n"
"> and `man cut` to select more than one field in a line.\n"
">\n"
"> An example of such a file is provided in `data-shell/data/animal-counts/"
"animals.txt`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3  > $1.txt\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > You would call the script above like this:\n"
"> >\n"
"> > ```\n"
"> > $ bash count-species.sh bear .\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Put these commands and pipes in the right order to achieve this:\n"
"> \n"
"> ~~~\n"
"> cut -d : -f 2  \n"
"> >  \n"
"> |  \n"
"> grep -w $1 -r $2  \n"
"> |  \n"
"> $1.txt  \n"
"> cut -d , -f 1,3  \n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: use `man grep` to look for how to grep text recursively in a "
"directory\n"
"> and `man cut` to select more than one field in a line.\n"
">\n"
"> An example of such a file is provided in `data-shell/data/animal-counts/"
"animals.txt`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3  > $1.txt\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > You would call the script above like this:\n"
"> >\n"
"> > ```\n"
"> > $ bash count-species.sh bear .\n"
"> > ```\n"
"> > {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:344
msgid "> ## Little Women"
msgstr "> ## Little Women"

#: shell-novice/_episodes/07-find.md:345
msgid ""
">\n"
"> You and your friend, having just finished reading *Little Women* by\n"
"> Louisa May Alcott, are in an argument.  Of the four sisters in the\n"
"> book, Jo, Meg, Beth, and Amy, your friend thinks that Jo was the\n"
"> most mentioned.  You, however, are certain it was Amy.  Luckily, you\n"
"> have a file `LittleWomen.txt` containing the full text of the novel\n"
"> (`data-shell/writing/data/LittleWomen.txt`).\n"
"> Using a `for` loop, how would you tabulate the number of times each\n"
"> of the four sisters is mentioned?\n"
">\n"
"> Hint: one solution might employ\n"
"> the commands `grep` and `wc` and a `|`, while another might utilize\n"
"> `grep` options.\n"
"> There is often more than one way to solve a programming task, so a\n"
"> particular solution is usually chosen based on a combination of\n"
"> yielding the correct result, elegance, readability, and speed.\n"
">\n"
"> > ## Solutions\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> > \techo $sis:\n"
"> >\tgrep -ow $sis LittleWomen.txt | wc -l\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Alternative, slightly inferior solution:\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> > \techo $sis:\n"
"> >\tgrep -ocw $sis LittleWomen.txt\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > This solution is inferior because `grep -c` only reports the number of "
"lines matched.\n"
"> > The total number of matches reported by this method will be lower if "
"there is more\n"
"> > than one match per line."
msgstr ""
">\n"
"> You and your friend, having just finished reading *Little Women* by\n"
"> Louisa May Alcott, are in an argument.  Of the four sisters in the\n"
"> book, Jo, Meg, Beth, and Amy, your friend thinks that Jo was the\n"
"> most mentioned.  You, however, are certain it was Amy.  Luckily, you\n"
"> have a file `LittleWomen.txt` containing the full text of the novel\n"
"> (`data-shell/writing/data/LittleWomen.txt`).\n"
"> Using a `for` loop, how would you tabulate the number of times each\n"
"> of the four sisters is mentioned?\n"
">\n"
"> Hint: one solution might employ\n"
"> the commands `grep` and `wc` and a `|`, while another might utilize\n"
"> `grep` options.\n"
"> There is often more than one way to solve a programming task, so a\n"
"> particular solution is usually chosen based on a combination of\n"
"> yielding the correct result, elegance, readability, and speed.\n"
">\n"
"> > ## Solutions\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> > \techo $sis:\n"
"> >\tgrep -ow $sis LittleWomen.txt | wc -l\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Alternative, slightly inferior solution:\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> > \techo $sis:\n"
"> >\tgrep -ocw $sis LittleWomen.txt\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > This solution is inferior because `grep -c` only reports the number of "
"lines matched.\n"
"> > The total number of matches reported by this method will be lower if "
"there is more\n"
"> > than one match per line."

#: shell-novice/_episodes/07-find.md:388
msgid ""
"While `grep` finds lines in files,\n"
"the `find` command finds files themselves.\n"
"Again,\n"
"it has a lot of options;\n"
"to show how the simplest ones work, we'll use the directory tree shown below."
msgstr ""
"While `grep` finds lines in files,\n"
"the `find` command finds files themselves.\n"
"Again,\n"
"it has a lot of options;\n"
"to show how the simplest ones work, we'll use the directory tree shown below."

#: shell-novice/_episodes/07-find.md:394
msgid "![File Tree for Find Example](../fig/find-file-tree.svg)"
msgstr "![File Tree for Find Example](../fig/find-file-tree.svg)"

#: shell-novice/_episodes/07-find.md:396
msgid ""
"Nelle's `writing` directory contains one file called `haiku.txt` and three "
"subdirectories:\n"
"`thesis` (which contains a sadly empty file, `empty-draft.md`);\n"
"`data` (which contains three files `LittleWomen.txt`, `one.txt` and `two."
"txt`);\n"
"and a `tools` directory that contains the programs `format` and `stats`,\n"
"and a subdirectory called `old`, with a file `oldtool`."
msgstr ""
"Nelle's `writing` directory contains one file called `haiku.txt` and three "
"subdirectories:\n"
"`thesis` (which contains a sadly empty file, `empty-draft.md`);\n"
"`data` (which contains three files `LittleWomen.txt`, `one.txt` and `two."
"txt`);\n"
"and a `tools` directory that contains the programs `format` and `stats`,\n"
"and a subdirectory called `old`, with a file `oldtool`."

#: shell-novice/_episodes/07-find.md:402
msgid ""
"For our first command,\n"
"let's run `find .`."
msgstr ""
"For our first command,\n"
"let's run `find .`."

# code block
#: shell-novice/_episodes/07-find.md:405
msgid ""
"~~~\n"
"$ find .\n"
"~~~"
msgstr ""
"~~~\n"
"$ find .\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:410
msgid ""
"~~~\n"
".\n"
"./data\n"
"./data/one.txt\n"
"./data/LittleWomen.txt\n"
"./data/two.txt\n"
"./tools\n"
"./tools/format\n"
"./tools/old\n"
"./tools/old/oldtool\n"
"./tools/stats\n"
"./haiku.txt\n"
"./thesis\n"
"./thesis/empty-draft.md\n"
"~~~"
msgstr ""
"~~~\n"
".\n"
"./data\n"
"./data/one.txt\n"
"./data/LittleWomen.txt\n"
"./data/two.txt\n"
"./tools\n"
"./tools/format\n"
"./tools/old\n"
"./tools/old/oldtool\n"
"./tools/stats\n"
"./haiku.txt\n"
"./thesis\n"
"./thesis/empty-draft.md\n"
"~~~"

#: shell-novice/_episodes/07-find.md:427
msgid ""
"As always,\n"
"the `.` on its own means the current working directory,\n"
"which is where we want our search to start.\n"
"`find`'s output is the names of every file **and** directory\n"
"under the current working directory.\n"
"This can seem useless at first but `find` has many options\n"
"to filter the output and in this lesson we will discover some \n"
"of them."
msgstr ""
"As always,\n"
"the `.` on its own means the current working directory,\n"
"which is where we want our search to start.\n"
"`find`'s output is the names of every file **and** directory\n"
"under the current working directory.\n"
"This can seem useless at first but `find` has many options\n"
"to filter the output and in this lesson we will discover some \n"
"of them."

#: shell-novice/_episodes/07-find.md:436
msgid ""
"The first option in our list is\n"
"`-type d` that means \"things that are directories\".\n"
"Sure enough,\n"
"`find`'s output is the names of the six directories in our little tree\n"
"(including `.`):"
msgstr ""
"The first option in our list is\n"
"`-type d` that means \"things that are directories\".\n"
"Sure enough,\n"
"`find`'s output is the names of the six directories in our little tree\n"
"(including `.`):"

# code block
#: shell-novice/_episodes/07-find.md:442
msgid ""
"~~~\n"
"$ find . -type d\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -type d\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:447
msgid ""
"~~~\n"
"./\n"
"./data\n"
"./thesis\n"
"./tools\n"
"./tools/old\n"
"~~~"
msgstr ""
"~~~\n"
"./\n"
"./data\n"
"./thesis\n"
"./tools\n"
"./tools/old\n"
"~~~"

#: shell-novice/_episodes/07-find.md:456
msgid ""
"Notice that the objects `find` finds are not listed in any particular "
"order.\n"
"If we change `-type d` to `-type f`,\n"
"we get a listing of all the files instead:"
msgstr ""
"Notice that the objects `find` finds are not listed in any particular "
"order.\n"
"If we change `-type d` to `-type f`,\n"
"we get a listing of all the files instead:"

# code block
#: shell-novice/_episodes/07-find.md:460
msgid ""
"~~~\n"
"$ find . -type f\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -type f\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:465
msgid ""
"~~~\n"
"./haiku.txt\n"
"./tools/stats\n"
"./tools/old/oldtool\n"
"./tools/format\n"
"./thesis/empty-draft.md\n"
"./data/one.txt\n"
"./data/LittleWomen.txt\n"
"./data/two.txt\n"
"~~~"
msgstr ""
"~~~\n"
"./haiku.txt\n"
"./tools/stats\n"
"./tools/old/oldtool\n"
"./tools/format\n"
"./thesis/empty-draft.md\n"
"./data/one.txt\n"
"./data/LittleWomen.txt\n"
"./data/two.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:477
msgid "Now let's try matching by name:"
msgstr "Now let's try matching by name:"

# code block
#: shell-novice/_episodes/07-find.md:479
msgid ""
"~~~\n"
"$ find . -name *.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -name *.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:484
msgid ""
"~~~\n"
"./haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"./haiku.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:489
msgid ""
"We expected it to find all the text files,\n"
"but it only prints out `./haiku.txt`.\n"
"The problem is that the shell expands wildcard characters like `*` *before* "
"commands run.\n"
"Since `*.txt` in the current directory expands to `haiku.txt`,\n"
"the command we actually ran was:"
msgstr ""
"We expected it to find all the text files,\n"
"but it only prints out `./haiku.txt`.\n"
"The problem is that the shell expands wildcard characters like `*` *before* "
"commands run.\n"
"Since `*.txt` in the current directory expands to `haiku.txt`,\n"
"the command we actually ran was:"

# code block
#: shell-novice/_episodes/07-find.md:495
msgid ""
"~~~\n"
"$ find . -name haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -name haiku.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:500
msgid "`find` did what we asked; we just asked for the wrong thing."
msgstr "`find` did what we asked; we just asked for the wrong thing."

#: shell-novice/_episodes/07-find.md:502
msgid ""
"To get what we want,\n"
"let's do what we did with `grep`:\n"
"put `*.txt` in single quotes to prevent the shell from expanding the `*` "
"wildcard.\n"
"This way,\n"
"`find` actually gets the pattern `*.txt`, not the expanded filename `haiku."
"txt`:"
msgstr ""
"To get what we want,\n"
"let's do what we did with `grep`:\n"
"put `*.txt` in single quotes to prevent the shell from expanding the `*` "
"wildcard.\n"
"This way,\n"
"`find` actually gets the pattern `*.txt`, not the expanded filename `haiku."
"txt`:"

# code block
#: shell-novice/_episodes/07-find.md:508
msgid ""
"~~~\n"
"$ find . -name '*.txt'\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -name '*.txt'\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:513
msgid ""
"~~~\n"
"./data/one.txt\n"
"./data/LittleWomen.txt\n"
"./data/two.txt\n"
"./haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"./data/one.txt\n"
"./data/LittleWomen.txt\n"
"./data/two.txt\n"
"./haiku.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:521
msgid "> ## Listing vs. Finding"
msgstr "> ## Listing vs. Finding"

#: shell-novice/_episodes/07-find.md:522
msgid ""
">\n"
"> `ls` and `find` can be made to do similar things given the right options,\n"
"> but under normal circumstances,\n"
"> `ls` lists everything it can,\n"
"> while `find` searches for things with certain properties and shows them."
msgstr ""
">\n"
"> `ls` and `find` can be made to do similar things given the right options,\n"
"> but under normal circumstances,\n"
"> `ls` lists everything it can,\n"
"> while `find` searches for things with certain properties and shows them."

#: shell-novice/_episodes/07-find.md:529
msgid ""
"As we said earlier,\n"
"the command line's power lies in combining tools.\n"
"We've seen how to do that with pipes;\n"
"let's look at another technique.\n"
"As we just saw,\n"
"`find . -name '*.txt'` gives us a list of all text files in or below the "
"current directory.\n"
"How can we combine that with `wc -l` to count the lines in all those files?"
msgstr ""
"As we said earlier,\n"
"the command line's power lies in combining tools.\n"
"We've seen how to do that with pipes;\n"
"let's look at another technique.\n"
"As we just saw,\n"
"`find . -name '*.txt'` gives us a list of all text files in or below the "
"current directory.\n"
"How can we combine that with `wc -l` to count the lines in all those files?"

#: shell-novice/_episodes/07-find.md:537
msgid "The simplest way is to put the `find` command inside `$()`:"
msgstr "The simplest way is to put the `find` command inside `$()`:"

# code block
#: shell-novice/_episodes/07-find.md:539
msgid ""
"~~~\n"
"$ wc -l $(find . -name '*.txt')\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l $(find . -name '*.txt')\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:544
msgid ""
"~~~\n"
"11 ./haiku.txt\n"
"300 ./data/two.txt\n"
"21022 ./data/LittleWomen.txt\n"
"70 ./data/one.txt\n"
"21403 total\n"
"~~~"
msgstr ""
"~~~\n"
"11 ./haiku.txt\n"
"300 ./data/two.txt\n"
"21022 ./data/LittleWomen.txt\n"
"70 ./data/one.txt\n"
"21403 total\n"
"~~~"

#: shell-novice/_episodes/07-find.md:553
msgid ""
"When the shell executes this command,\n"
"the first thing it does is run whatever is inside the `$()`.\n"
"It then replaces the `$()` expression with that command's output.\n"
"Since the output of `find` is the four filenames `./data/one.txt`, `./data/"
"LittleWomen.txt`, `./data/two.txt`, and `./haiku.txt`,\n"
"the shell constructs the command:"
msgstr ""
"When the shell executes this command,\n"
"the first thing it does is run whatever is inside the `$()`.\n"
"It then replaces the `$()` expression with that command's output.\n"
"Since the output of `find` is the four filenames `./data/one.txt`, `./data/"
"LittleWomen.txt`, `./data/two.txt`, and `./haiku.txt`,\n"
"the shell constructs the command:"

# code block
#: shell-novice/_episodes/07-find.md:559
msgid ""
"~~~\n"
"$ wc -l ./data/one.txt ./data/LittleWomen.txt ./data/two.txt ./haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l ./data/one.txt ./data/LittleWomen.txt ./data/two.txt ./haiku.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:564
msgid ""
"which is what we wanted.\n"
"This expansion is exactly what the shell does when it expands wildcards like "
"`*` and `?`,\n"
"but lets us use any command we want as our own \"wildcard\"."
msgstr ""
"which is what we wanted.\n"
"This expansion is exactly what the shell does when it expands wildcards like "
"`*` and `?`,\n"
"but lets us use any command we want as our own \"wildcard\"."

#: shell-novice/_episodes/07-find.md:568
msgid ""
"It's very common to use `find` and `grep` together.\n"
"The first finds files that match a pattern;\n"
"the second looks for lines inside those files that match another pattern.\n"
"Here, for example, we can find PDB files that contain iron atoms\n"
"by looking for the string \"FE\" in all the `.pdb` files above the current "
"directory:"
msgstr ""
"It's very common to use `find` and `grep` together.\n"
"The first finds files that match a pattern;\n"
"the second looks for lines inside those files that match another pattern.\n"
"Here, for example, we can find PDB files that contain iron atoms\n"
"by looking for the string \"FE\" in all the `.pdb` files above the current "
"directory:"

# code block
#: shell-novice/_episodes/07-find.md:574
msgid ""
"~~~\n"
"$ grep \"FE\" $(find .. -name '*.pdb')\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep \"FE\" $(find .. -name '*.pdb')\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:579
msgid ""
"~~~\n"
"../data/pdb/heme.pdb:ATOM     25 FE           1      -0.924   0.535  -0.518\n"
"~~~"
msgstr ""
"~~~\n"
"../data/pdb/heme.pdb:ATOM     25 FE           1      -0.924   0.535  -0.518\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:584
msgid "> ## Matching and Subtracting"
msgstr "> ## Matching and Subtracting"

#: shell-novice/_episodes/07-find.md:585
msgid ""
">\n"
"> The `-v` flag to `grep` inverts pattern matching, so that only lines\n"
"> which do *not* match the pattern are printed. Given that, which of\n"
"> the following commands will find all files in `/data` whose names\n"
"> end in `s.txt` (e.g., `animals.txt` or `planets.txt`), but do\n"
"> *not* contain the word `net`?\n"
"> Once you have thought about your answer, you can test the commands in the "
"`data-shell`\n"
"> directory.\n"
">\n"
"> 1.  `find data -name '*s.txt' | grep -v net`\n"
"> 2.  `find data -name *s.txt | grep -v net`\n"
"> 3.  `grep -v \"temp\" $(find data -name '*s.txt')`\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 1. Putting the match expression in quotes prevents "
"the shell\n"
"> > expanding it, so it gets passed to the `find` command.\n"
"> >\n"
"> > Option 2 is incorrect because the shell expands `*s.txt` instead of "
"passing the wildcard\n"
"> > expression to `find`.\n"
"> >\n"
"> > Option 3 is incorrect because it searches the contents of the files for "
"lines which\n"
"> > do not match \"temp\", rather than searching the file names."
msgstr ""
">\n"
"> The `-v` flag to `grep` inverts pattern matching, so that only lines\n"
"> which do *not* match the pattern are printed. Given that, which of\n"
"> the following commands will find all files in `/data` whose names\n"
"> end in `s.txt` (e.g., `animals.txt` or `planets.txt`), but do\n"
"> *not* contain the word `net`?\n"
"> Once you have thought about your answer, you can test the commands in the "
"`data-shell`\n"
"> directory.\n"
">\n"
"> 1.  `find data -name '*s.txt' | grep -v net`\n"
"> 2.  `find data -name *s.txt | grep -v net`\n"
"> 3.  `grep -v \"temp\" $(find data -name '*s.txt')`\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 1. Putting the match expression in quotes prevents "
"the shell\n"
"> > expanding it, so it gets passed to the `find` command.\n"
"> >\n"
"> > Option 2 is incorrect because the shell expands `*s.txt` instead of "
"passing the wildcard\n"
"> > expression to `find`.\n"
"> >\n"
"> > Option 3 is incorrect because it searches the contents of the files for "
"lines which\n"
"> > do not match \"temp\", rather than searching the file names."

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:611
msgid "> ## Binary Files"
msgstr "> ## Binary Files"

#: shell-novice/_episodes/07-find.md:612
msgid ""
">\n"
"> We have focused exclusively on finding things in text files. What if\n"
"> your data is stored as images, in databases, or in some other format?\n"
"> One option would be to extend tools like `grep` to handle those formats.\n"
"> This hasn't happened, and probably won't, because there are too many\n"
"> formats to support.\n"
">\n"
"> The second option is to convert the data to text, or extract the\n"
"> text-ish bits from the data. This is probably the most common approach,\n"
"> since it only requires people to build one tool per data format (to\n"
"> extract information). On the one hand, it makes simple things easy to\n"
"> do. On the negative side, complex things are usually impossible. For\n"
"> example, it's easy enough to write a program that will extract X and Y\n"
"> dimensions from image files for `grep` to play with, but how would you\n"
"> write something to find values in a spreadsheet whose cells contained\n"
"> formulas?\n"
">\n"
"> The third choice is to recognize that the shell and text processing have\n"
"> their limits, and to use another programming language.\n"
"> When the time comes to do this, don't be too hard on the shell: many\n"
"> modern programming languages have borrowed a lot of\n"
"> ideas from it, and imitation is also the sincerest form of praise."
msgstr ""
">\n"
"> We have focused exclusively on finding things in text files. What if\n"
"> your data is stored as images, in databases, or in some other format?\n"
"> One option would be to extend tools like `grep` to handle those formats.\n"
"> This hasn't happened, and probably won't, because there are too many\n"
"> formats to support.\n"
">\n"
"> The second option is to convert the data to text, or extract the\n"
"> text-ish bits from the data. This is probably the most common approach,\n"
"> since it only requires people to build one tool per data format (to\n"
"> extract information). On the one hand, it makes simple things easy to\n"
"> do. On the negative side, complex things are usually impossible. For\n"
"> example, it's easy enough to write a program that will extract X and Y\n"
"> dimensions from image files for `grep` to play with, but how would you\n"
"> write something to find values in a spreadsheet whose cells contained\n"
"> formulas?\n"
">\n"
"> The third choice is to recognize that the shell and text processing have\n"
"> their limits, and to use another programming language.\n"
"> When the time comes to do this, don't be too hard on the shell: many\n"
"> modern programming languages have borrowed a lot of\n"
"> ideas from it, and imitation is also the sincerest form of praise."

#: shell-novice/_episodes/07-find.md:636
msgid ""
"The Unix shell is older than most of the people who use it. It has\n"
"survived so long because it is one of the most productive programming\n"
"environments ever created --- maybe even *the* most productive. Its syntax\n"
"may be cryptic, but people who have mastered it can experiment with\n"
"different commands interactively, then use what they have learned to\n"
"automate their work. Graphical user interfaces may be better at the\n"
"first, but the shell is still unbeaten at the second. And as Alfred\n"
"North Whitehead wrote in 1911, \"Civilization advances by extending the\n"
"number of important operations which we can perform without thinking\n"
"about them.\""
msgstr ""
"The Unix shell is older than most of the people who use it. It has\n"
"survived so long because it is one of the most productive programming\n"
"environments ever created --- maybe even *the* most productive. Its syntax\n"
"may be cryptic, but people who have mastered it can experiment with\n"
"different commands interactively, then use what they have learned to\n"
"automate their work. Graphical user interfaces may be better at the\n"
"first, but the shell is still unbeaten at the second. And as Alfred\n"
"North Whitehead wrote in 1911, \"Civilization advances by extending the\n"
"number of important operations which we can perform without thinking\n"
"about them.\""

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:647
msgid "> ## `find` Pipeline Reading Comprehension"
msgstr "> ## `find` Pipeline Reading Comprehension"

#: shell-novice/_episodes/07-find.md:648
msgid ""
">\n"
"> Write a short explanatory comment for the following shell script:\n"
">\n"
"> ~~~\n"
"> wc -l $(find . -name '*.dat') | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > 1. Find all files with a `.dat` extension in the current directory\n"
"> > 2. Count the number of lines each of these files contains\n"
"> > 3. Sort the output from step 2. numerically"
msgstr ""
">\n"
"> Write a short explanatory comment for the following shell script:\n"
">\n"
"> ~~~\n"
"> wc -l $(find . -name '*.dat') | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > 1. Find all files with a `.dat` extension in the current directory\n"
"> > 2. Count the number of lines each of these files contains\n"
"> > 3. Sort the output from step 2. numerically"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:663
msgid "> ## Finding Files With Different Properties"
msgstr "> ## Finding Files With Different Properties"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:665
msgid ""
"> The `find` command can be given several other criteria known as \"tests\""
msgstr ""
"> The `find` command can be given several other criteria known as \"tests\""

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:666
msgid ""
"> to locate files with specific attributes, such as creation time, size,"
msgstr ""
"> to locate files with specific attributes, such as creation time, size,"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:667
msgid "> permissions, or ownership.  Use `man find` to explore these, and then"
msgstr ""
"> permissions, or ownership.  Use `man find` to explore these, and then"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:668
msgid ""
"> write a single command to find all files in or below the current directory"
msgstr ""
"> write a single command to find all files in or below the current directory"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:669
msgid "> that were modified by the user `ahmed` in the last 24 hours."
msgstr "> that were modified by the user `ahmed` in the last 24 hours."

#: shell-novice/_episodes/07-find.md:670
msgid ""
">\n"
"> Hint 1: you will need to use three tests: `-type`, `-mtime`, and `-user`.\n"
">\n"
"> Hint 2: The value for `-mtime` will need to be negative---why?\n"
">\n"
"> > ## Solution\n"
"> > Assuming that Nelle’s home is our working directory we type:\n"
"> >\n"
"> > ~~~\n"
"> > $ find ./ -type f -mtime -1 -user ahmed\n"
"> > ~~~\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Hint 1: you will need to use three tests: `-type`, `-mtime`, and `-user`.\n"
">\n"
"> Hint 2: The value for `-mtime` will need to be negative---why?\n"
">\n"
"> > ## Solution\n"
"> > Assuming that Nelle’s home is our working directory we type:\n"
"> >\n"
"> > ~~~\n"
"> > $ find ./ -type f -mtime -1 -user ahmed\n"
"> > ~~~\n"
"> > {: .language-bash}"

# Front Matter
#: shell-novice/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"

#: shell-novice/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr "{% include carpentries.html %}"

# Front Matter
#: shell-novice/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Discussion\"\n"
"permalink: /discuss/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Discussion\"\n"
"permalink: /discuss/\n"
"---"

# header
#: shell-novice/_extras/discuss.md:6
msgid "## Alphabet Soup"
msgstr "## Alphabet Soup"

#: shell-novice/_extras/discuss.md:8
msgid ""
"If the command to find out who we are is `whoami`, the command to find\n"
"out where we are ought to be called `whereami`, so why is it `pwd`\n"
"instead? The usual answer is that in the early 1970s, when Unix was\n"
"first being developed, every keystroke counted: the devices of the day\n"
"were slow, and backspacing on a teletype was so painful that cutting the\n"
"number of keystrokes in order to cut the number of typing mistakes was\n"
"actually a win for usability. The reality is that commands were added to\n"
"Unix one by one, without any master plan, by people who were immersed in\n"
"its jargon. The result is as inconsistent as the roolz uv Inglish\n"
"speling, but we're stuck with it now."
msgstr ""
"If the command to find out who we are is `whoami`, the command to find\n"
"out where we are ought to be called `whereami`, so why is it `pwd`\n"
"instead? The usual answer is that in the early 1970s, when Unix was\n"
"first being developed, every keystroke counted: the devices of the day\n"
"were slow, and backspacing on a teletype was so painful that cutting the\n"
"number of keystrokes in order to cut the number of typing mistakes was\n"
"actually a win for usability. The reality is that commands were added to\n"
"Unix one by one, without any master plan, by people who were immersed in\n"
"its jargon. The result is as inconsistent as the roolz uv Inglish\n"
"speling, but we're stuck with it now."

# header
#: shell-novice/_extras/discuss.md:19
msgid "## Job Control Codes"
msgstr "## Job Control Codes"

#: shell-novice/_extras/discuss.md:21
msgid ""
"The shell accepts a few special commands that allow users to interact\n"
"with running processes or programs. You can enter each of these\n"
"\"control codes\" by holding down the `Ctrl` key and then pressing one\n"
"of the control characters. In other tutorials, you may see the term\n"
"`Control` or the `^` used to represent the `Ctrl` key (e.g. the\n"
"following are all equivalent `Ctrl-C`, `Ctrl+C`, `Control-C`, `Control+C`, "
"`^C`)."
msgstr ""
"The shell accepts a few special commands that allow users to interact\n"
"with running processes or programs. You can enter each of these\n"
"\"control codes\" by holding down the `Ctrl` key and then pressing one\n"
"of the control characters. In other tutorials, you may see the term\n"
"`Control` or the `^` used to represent the `Ctrl` key (e.g. the\n"
"following are all equivalent `Ctrl-C`, `Ctrl+C`, `Control-C`, `Control+C`, "
"`^C`)."

# unordered list
#: shell-novice/_extras/discuss.md:28
msgid "*   `Ctrl-C`:"
msgstr "*   `Ctrl-C`:"

#: shell-novice/_extras/discuss.md:29
msgid ""
"    interrupts and cancels a running program.\n"
"    This is useful if you want to cancel a command that is taking too long "
"to execute."
msgstr ""
"    interrupts and cancels a running program.\n"
"    This is useful if you want to cancel a command that is taking too long "
"to execute."

# unordered list
#: shell-novice/_extras/discuss.md:32
msgid "*   `Ctrl-D`:"
msgstr "*   `Ctrl-D`:"

#: shell-novice/_extras/discuss.md:33
msgid ""
"    indicates the end of a file or stream of characters that you are "
"entering on the command line.\n"
"    For example, we saw earlier that the `wc` command counts lines, words, "
"and characters in a file.\n"
"    If we just type `wc` and hit the Enter key without providing a file "
"name,\n"
"    then `wc` will assume we want it to analyze all the stuff we type next.\n"
"    After typing our magnum opus directly into the shell prompt,\n"
"    we can then type Ctrl-D to tell `wc` that we're done and we'd like to "
"see the results of the word count."
msgstr ""
"    indicates the end of a file or stream of characters that you are "
"entering on the command line.\n"
"    For example, we saw earlier that the `wc` command counts lines, words, "
"and characters in a file.\n"
"    If we just type `wc` and hit the Enter key without providing a file "
"name,\n"
"    then `wc` will assume we want it to analyze all the stuff we type next.\n"
"    After typing our magnum opus directly into the shell prompt,\n"
"    we can then type Ctrl-D to tell `wc` that we're done and we'd like to "
"see the results of the word count."

# unordered list
#: shell-novice/_extras/discuss.md:40
msgid "*   `Ctrl-Z`:"
msgstr "*   `Ctrl-Z`:"

#: shell-novice/_extras/discuss.md:41
msgid ""
"    Suspends a process but does not terminate it.\n"
"    You can then use the command `fg` to restart the job in the foreground."
msgstr ""
"    Suspends a process but does not terminate it.\n"
"    You can then use the command `fg` to restart the job in the foreground."

#: shell-novice/_extras/discuss.md:44
msgid ""
"For new shell users, these control codes can all appear to have\n"
"the same effect: they make things \"go away.\" But it is helpful to\n"
"understand the differences. In general, if something went wrong and\n"
"you just want to get your shell prompt back, it is better to use\n"
"`Ctrl-C`."
msgstr ""
"For new shell users, these control codes can all appear to have\n"
"the same effect: they make things \"go away.\" But it is helpful to\n"
"understand the differences. In general, if something went wrong and\n"
"you just want to get your shell prompt back, it is better to use\n"
"`Ctrl-C`."

# header
#: shell-novice/_extras/discuss.md:50
msgid "## Other Shells"
msgstr "## Other Shells"

#: shell-novice/_extras/discuss.md:52
msgid ""
"Before Bash became popular in the end of nineties, scientists widely\n"
"used (and some still use) another shell, C-shell, or Csh. Bash and Csh\n"
"have similar feature sets, but their syntax rules are different and\n"
"this makes them incompatible with each other. A few other shells have\n"
"appeared since, including ksh, zsh, and a number of others; they are\n"
"mostly compatible with Bash, and Bash is the default shell on most\n"
"modern implementations of Unix (including most packages that provide\n"
"Unix-like tools for Windows) but if you get strange errors in shell\n"
"scripts written by colleagues, check to see which shell they were\n"
"written for."
msgstr ""
"Before Bash became popular in the end of nineties, scientists widely\n"
"used (and some still use) another shell, C-shell, or Csh. Bash and Csh\n"
"have similar feature sets, but their syntax rules are different and\n"
"this makes them incompatible with each other. A few other shells have\n"
"appeared since, including ksh, zsh, and a number of others; they are\n"
"mostly compatible with Bash, and Bash is the default shell on most\n"
"modern implementations of Unix (including most packages that provide\n"
"Unix-like tools for Windows) but if you get strange errors in shell\n"
"scripts written by colleagues, check to see which shell they were\n"
"written for."

# header
#: shell-novice/_extras/discuss.md:63
msgid "## Bash Configurations"
msgstr "## Bash Configurations"

#: shell-novice/_extras/discuss.md:65
msgid ""
"Want to customize paths, environment variables, aliases,\n"
"and other behaviors of your shell?\n"
"This excellent blog post \"[Bash Configurations Demystified][bash-"
"demystified]\"\n"
"from Dalton Hubble\n"
"covers tips, tricks, and how to avoid dangers."
msgstr ""
"Want to customize paths, environment variables, aliases,\n"
"and other behaviors of your shell?\n"
"This excellent blog post \"[Bash Configurations Demystified][bash-"
"demystified]\"\n"
"from Dalton Hubble\n"
"covers tips, tricks, and how to avoid dangers."

#: shell-novice/_extras/discuss.md:71
msgid ""
"[bash-demystified]: https://blog.dghubble.io/post/.bashprofile-.profile-and-."
"bashrc-conventions/"
msgstr ""
"[bash-demystified]: https://blog.dghubble.io/post/.bashprofile-.profile-and-."
"bashrc-conventions/"

# Front Matter
#: shell-novice/_extras/figures.md:1
msgid ""
"---\n"
"layout: page\n"
"title: Figures\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Figures\n"
"---"

# inline html
#: shell-novice/_extras/figures.md:5
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")"
"[0];\n"
"          article_here.appendChild(htmlDocArticle."
"getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")"
"[0];\n"
"          article_here.appendChild(htmlDocArticle."
"getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

#: shell-novice/_extras/figures.md:34 shell-novice/aio.md:31
msgid ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"

# Front Matter
#: shell-novice/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"permalink: /guide/\n"
"---"

# unordered list
#: shell-novice/_extras/guide.md:6
msgid "*   Why do we learn to use the shell?"
msgstr "*   Why do we learn to use the shell?"

# unordered list
#: shell-novice/_extras/guide.md:7
msgid "    *   Allows users to automate repetitive tasks"
msgstr "    *   Allows users to automate repetitive tasks"

# unordered list
#: shell-novice/_extras/guide.md:8
msgid ""
"    *   And capture small data manipulation steps that are normally not "
"recorded"
msgstr ""
"    *   And capture small data manipulation steps that are normally not "
"recorded"

#: shell-novice/_extras/guide.md:9
msgid ""
"        to make research reproducible\n"
"*   The Problem\n"
"    *   Running the same workflow on several samples can be unnecessarily "
"labour intensive\n"
"    *   Manual manipulation of data files:\n"
"        *   is often not captured in documentation\n"
"        *   is hard to reproduce\n"
"        *   is hard to troubleshoot, review, or improve\n"
"*   The Shell\n"
"    *   Workflows can be automated through the use of shell scripts\n"
"    *   Built-in commands allow for easy data manipulation (e.g. sort, grep, "
"etc.)\n"
"    *   Every step can be captured in the shell script and allow "
"reproducibility and easy troubleshooting"
msgstr ""
"        to make research reproducible\n"
"*   The Problem\n"
"    *   Running the same workflow on several samples can be unnecessarily "
"labour intensive\n"
"    *   Manual manipulation of data files:\n"
"        *   is often not captured in documentation\n"
"        *   is hard to reproduce\n"
"        *   is hard to troubleshoot, review, or improve\n"
"*   The Shell\n"
"    *   Workflows can be automated through the use of shell scripts\n"
"    *   Built-in commands allow for easy data manipulation (e.g. sort, grep, "
"etc.)\n"
"    *   Every step can be captured in the shell script and allow "
"reproducibility and easy troubleshooting"

# header
#: shell-novice/_extras/guide.md:21
msgid "## Overall"
msgstr "## Overall"

#: shell-novice/_extras/guide.md:23
msgid ""
"Many people have questioned whether we should still teach the shell.\n"
"After all,\n"
"anyone who wants to rename several thousand data files\n"
"can easily do so interactively in the Python interpreter,\n"
"and anyone who's doing serious data analysis\n"
"is probably going to do most of their work inside the IPython Notebook or R "
"Studio.\n"
"So why teach the shell?"
msgstr ""
"Many people have questioned whether we should still teach the shell.\n"
"After all,\n"
"anyone who wants to rename several thousand data files\n"
"can easily do so interactively in the Python interpreter,\n"
"and anyone who's doing serious data analysis\n"
"is probably going to do most of their work inside the IPython Notebook or R "
"Studio.\n"
"So why teach the shell?"

#: shell-novice/_extras/guide.md:31
msgid ""
"The first answer is,\n"
"\"Because so much else depends on it.\"\n"
"Installing software,\n"
"configuring your default editor,\n"
"and controlling remote machines frequently assume a basic familiarity with "
"the shell,\n"
"and with related ideas like standard input and output.\n"
"Many tools also use its terminology\n"
"(for example, the `%ls` and `%cd` magic commands in IPython)."
msgstr ""
"The first answer is,\n"
"\"Because so much else depends on it.\"\n"
"Installing software,\n"
"configuring your default editor,\n"
"and controlling remote machines frequently assume a basic familiarity with "
"the shell,\n"
"and with related ideas like standard input and output.\n"
"Many tools also use its terminology\n"
"(for example, the `%ls` and `%cd` magic commands in IPython)."

#: shell-novice/_extras/guide.md:40
msgid ""
"The second answer is,\n"
"\"Because it's an easy way to introduce some fundamental ideas about how to "
"use computers.\"\n"
"As we teach people how to use the Unix shell,\n"
"we teach them that they should get the computer to repeat things\n"
"(via tab completion,\n"
"`!` followed by a command number,\n"
"and `for` loops)\n"
"rather than repeating things themselves.\n"
"We also teach them to take things they've discovered they do frequently\n"
"and save them for later re-use\n"
"(via shell scripts),\n"
"to give things sensible names,\n"
"and to write a little bit of documentation\n"
"(like comment at the top of shell scripts)\n"
"to make their future selves' lives better."
msgstr ""
"The second answer is,\n"
"\"Because it's an easy way to introduce some fundamental ideas about how to "
"use computers.\"\n"
"As we teach people how to use the Unix shell,\n"
"we teach them that they should get the computer to repeat things\n"
"(via tab completion,\n"
"`!` followed by a command number,\n"
"and `for` loops)\n"
"rather than repeating things themselves.\n"
"We also teach them to take things they've discovered they do frequently\n"
"and save them for later re-use\n"
"(via shell scripts),\n"
"to give things sensible names,\n"
"and to write a little bit of documentation\n"
"(like comment at the top of shell scripts)\n"
"to make their future selves' lives better."

#: shell-novice/_extras/guide.md:56
msgid ""
"The third answer is,\n"
"\"Because it enables use of many domain-specific tools and compute resources "
"researchers cannot access otherwise.\"\n"
"Familiarity with the shell is very useful for remote accessing machines,\n"
"using high-performance computing infrastructure,\n"
"and running new specialist tools in many disciplines.\n"
"We do not teach HPC or domain-specific skills here\n"
"but lay the groundwork for further development of these skills.\n"
"In particular,\n"
"understanding the syntax of commands, flags, and help systems is useful for "
"domain specific tools\n"
"and understanding the file system (and how to navigate it) is useful for "
"remote access."
msgstr ""
"The third answer is,\n"
"\"Because it enables use of many domain-specific tools and compute resources "
"researchers cannot access otherwise.\"\n"
"Familiarity with the shell is very useful for remote accessing machines,\n"
"using high-performance computing infrastructure,\n"
"and running new specialist tools in many disciplines.\n"
"We do not teach HPC or domain-specific skills here\n"
"but lay the groundwork for further development of these skills.\n"
"In particular,\n"
"understanding the syntax of commands, flags, and help systems is useful for "
"domain specific tools\n"
"and understanding the file system (and how to navigate it) is useful for "
"remote access."

#: shell-novice/_extras/guide.md:67
msgid ""
"Finally,\n"
"and perhaps most importantly,\n"
"teaching people the shell lets us teach them\n"
"to think about programming in terms of function composition.\n"
"In the case of the shell,\n"
"this takes the form of pipelines rather than nested function calls,\n"
"but the core idea of \"small pieces, loosely joined\" is the same."
msgstr ""
"Finally,\n"
"and perhaps most importantly,\n"
"teaching people the shell lets us teach them\n"
"to think about programming in terms of function composition.\n"
"In the case of the shell,\n"
"this takes the form of pipelines rather than nested function calls,\n"
"but the core idea of \"small pieces, loosely joined\" is the same."

#: shell-novice/_extras/guide.md:75
msgid ""
"All of this material can be covered in three hours\n"
"as long as learners using Windows do not run into roadblocks such as:"
msgstr ""
"All of this material can be covered in three hours\n"
"as long as learners using Windows do not run into roadblocks such as:"

# unordered list
#: shell-novice/_extras/guide.md:78
msgid "*   not being able to figure out where their home directory is"
msgstr "*   not being able to figure out where their home directory is"

#: shell-novice/_extras/guide.md:79
msgid ""
"    (particularly if they're using Cygwin);\n"
"*   not being able to run a plain text editor;\n"
"    and\n"
"*   the shell refusing to run scripts that include DOS line endings."
msgstr ""
"    (particularly if they're using Cygwin);\n"
"*   not being able to run a plain text editor;\n"
"    and\n"
"*   the shell refusing to run scripts that include DOS line endings."

# header
#: shell-novice/_extras/guide.md:84
msgid "## Preparing to Teach"
msgstr "## Preparing to Teach"

# unordered list
#: shell-novice/_extras/guide.md:86
msgid ""
"*   Use the `data` directory for in-workshop exercises and live coding "
"examples."
msgstr ""
"*   Use the `data` directory for in-workshop exercises and live coding "
"examples."

#: shell-novice/_extras/guide.md:87
msgid ""
"     You can clone the shell-novice directory or use the `Download ZIP`\n"
"     button on the right to get the entire [repository](https://github.com/"
"swcarpentry/shell-novice). We also now provide\n"
"     a zip file of the `data` directory that can be downloaded on its own\n"
"     from the repository by right-click + save or see the [\"setup\"]"
"({{ page.root }}/setup/) page on the lesson website for more details.  "
msgstr ""
"     You can clone the shell-novice directory or use the `Download ZIP`\n"
"     button on the right to get the entire [repository](https://github.com/"
"swcarpentry/shell-novice). We also now provide\n"
"     a zip file of the `data` directory that can be downloaded on its own\n"
"     from the repository by right-click + save or see the [\"setup\"]"
"({{ page.root }}/setup/) page on the lesson website for more details.  "

# unordered list
#: shell-novice/_extras/guide.md:92
msgid "*   Website: various practices have been used."
msgstr "*   Website: various practices have been used."

# unordered list
#: shell-novice/_extras/guide.md:93
msgid ""
"    *   Option 1: Can give links to learners before the lesson so they can "
"follow along,"
msgstr ""
"    *   Option 1: Can give links to learners before the lesson so they can "
"follow along,"

#: shell-novice/_extras/guide.md:94
msgid ""
"        catch up,\n"
"\tand see exercises (particularly if you're following the lesson content "
"without many changes).\n"
"    *   Option 2: Don't show the website to the learners during the lesson, "
"as it can be distracting:\n"
"        students may read instead of listen, and having another window open "
"is an additional cognitive load.\n"
"\t*   In any case, make sure to point to website as a post-workshop "
"reference."
msgstr ""
"        catch up,\n"
"\tand see exercises (particularly if you're following the lesson content "
"without many changes).\n"
"    *   Option 2: Don't show the website to the learners during the lesson, "
"as it can be distracting:\n"
"        students may read instead of listen, and having another window open "
"is an additional cognitive load.\n"
"\t*   In any case, make sure to point to website as a post-workshop "
"reference."

# unordered list
#: shell-novice/_extras/guide.md:100
msgid "*   Content:"
msgstr "*   Content:"

#: shell-novice/_extras/guide.md:101
msgid ""
"    Unless you have a truly generous amount of time (4+ hours),\n"
"    it is likely that you will not cover ALL the material in this lesson in "
"a single half-day session.\n"
"    Plan ahead on what you might skip, what you really want to emphasize, "
"etc."
msgstr ""
"    Unless you have a truly generous amount of time (4+ hours),\n"
"    it is likely that you will not cover ALL the material in this lesson in "
"a single half-day session.\n"
"    Plan ahead on what you might skip, what you really want to emphasize, "
"etc."

# unordered list
#: shell-novice/_extras/guide.md:105
msgid "*   Exercises:"
msgstr "*   Exercises:"

#: shell-novice/_extras/guide.md:106
msgid ""
"    Think in advance about how you might want to handle exercises during the "
"lesson.\n"
"    How are you assigning them (website, slide, handout)?\n"
"    Do you want everyone to try it and then you show the solution?\n"
"    Have a learner show the solution?\n"
"    Have groups each do a different exercise and present their solutions?"
msgstr ""
"    Think in advance about how you might want to handle exercises during the "
"lesson.\n"
"    How are you assigning them (website, slide, handout)?\n"
"    Do you want everyone to try it and then you show the solution?\n"
"    Have a learner show the solution?\n"
"    Have groups each do a different exercise and present their solutions?"

# unordered list
#: shell-novice/_extras/guide.md:112
msgid ""
"*   `reference.md` can be printed out and given to students as a reference, "
"your choice."
msgstr ""
"*   `reference.md` can be printed out and given to students as a reference, "
"your choice."

# unordered list
#: shell-novice/_extras/guide.md:114
msgid "*   Other preparation:"
msgstr "*   Other preparation:"

#: shell-novice/_extras/guide.md:115
msgid ""
"    Feel free to add your own examples or side comments,\n"
"    but know that it shouldn't be necessary:\n"
"    the topics and commands can be taught as given on the lesson pages.\n"
"    If you think there is a place where the lesson is lacking,\n"
"    feel free to file an issue or submit a pull request."
msgstr ""
"    Feel free to add your own examples or side comments,\n"
"    but know that it shouldn't be necessary:\n"
"    the topics and commands can be taught as given on the lesson pages.\n"
"    If you think there is a place where the lesson is lacking,\n"
"    feel free to file an issue or submit a pull request."

# header
#: shell-novice/_extras/guide.md:121
msgid "## Teaching Notes"
msgstr "## Teaching Notes"

# unordered list
#: shell-novice/_extras/guide.md:123
msgid "*   Super cool online resource!"
msgstr "*   Super cool online resource!"

#: shell-novice/_extras/guide.md:124
msgid ""
"    <http://explainshell.com/> will dissect any shell command you type in\n"
"    and display help text for each piece. Additional nice manual tool could\n"
"    be <http://tldr-pages.github.io/> with short very descriptive manuals\n"
"    for shell commands, useful especially on Windows while using Git BASH\n"
"    where `man` could not work."
msgstr ""
"     <http://explainshell.com/> will dissect any shell command you type in\n"
"    and display help text for each piece. Additional nice manual tool could\n"
"    be <http://tldr-pages.github.io/> with short very descriptive manuals\n"
"    for shell commands, useful especially on Windows while using Git BASH\n"
"    where `man` could not work."

# unordered list
#: shell-novice/_extras/guide.md:130
msgid "*   Another super cool online resource is <http://www.shellcheck.net>,"
msgstr "*   Another super cool online resource is <http://www.shellcheck.net>,"

#: shell-novice/_extras/guide.md:131
msgid ""
"    which will check shell scripts (both uploaded and typed in) for common "
"errors."
msgstr ""
"    which will check shell scripts (both uploaded and typed in) for common "
"errors."

# unordered list
#: shell-novice/_extras/guide.md:133
msgid "*   Resources for \"splitting\" your shell so that recent commands"
msgstr "*   Resources for \"splitting\" your shell so that recent commands"

#: shell-novice/_extras/guide.md:134
msgid ""
"    remain in view: <https://github.com/rgaiacs/swc-shell-split-window>."
msgstr ""
"    remain in view: <https://github.com/rgaiacs/swc-shell-split-window>."

# unordered list
#: shell-novice/_extras/guide.md:136
msgid "*   Running a text editor from the command line can be"
msgstr "*   Running a text editor from the command line can be"

#: shell-novice/_extras/guide.md:137
msgid ""
"    the biggest stumbling block during the entire lesson:\n"
"    many will try to run the same editor as the instructor\n"
"    (which may leave them trapped in the awful nether hell that is Vim),\n"
"    or will not know how to navigate to the right directory\n"
"    to save their file,\n"
"    or will run a word processor rather than a plain text editor.\n"
"    The quickest way past these problems is to have more knowledgeable "
"learners\n"
"    help those who need it."
msgstr ""
"    the biggest stumbling block during the entire lesson:\n"
"    many will try to run the same editor as the instructor\n"
"    (which may leave them trapped in the awful nether hell that is Vim),\n"
"    or will not know how to navigate to the right directory\n"
"    to save their file,\n"
"    or will run a word processor rather than a plain text editor.\n"
"    The quickest way past these problems is to have more knowledgeable "
"learners\n"
"    help those who need it."

# unordered list
#: shell-novice/_extras/guide.md:146
msgid "*   Introducing and navigating the filesystem in the shell (covered in"
msgstr "*   Introducing and navigating the filesystem in the shell (covered in"

#: shell-novice/_extras/guide.md:147
#, fuzzy
msgid ""
"    [Navigating Files and Directories]({{ page.root }}/02-filedir/) "
"section)\n"
"    can be confusing. You may have both terminal and GUI file explorer "
"open \n"
"    side by side so learners can see the content and file structure while\n"
"    they're using terminal to navigate the system."
msgstr ""
"    [Navigating Files and Directories]({{ page.root }}/02-filedir/) "
"section)\n"
"    can be confusing. You may have both terminal and GUI file explorer open\n"
"    side by side so learners can see the content and file structure while\n"
"    they're using terminal to navigate the system."

# unordered list
#: shell-novice/_extras/guide.md:152
msgid "*   Tab completion sounds like a small thing: it isn't."
msgstr "*   Tab completion sounds like a small thing: it isn't."

#: shell-novice/_extras/guide.md:153
msgid ""
"    Re-running old commands using `!123` or `!wc`\n"
"    isn't a small thing either,\n"
"    and neither are wildcard expansion and `for` loops.\n"
"    Each one is an opportunity to repeat one of the big ideas of Software "
"Carpentry:\n"
"    if the computer *can* repeat it,\n"
"    some programmer somewhere will almost certainly have built\n"
"    some way for the computer *to* repeat it."
msgstr ""
"    Re-running old commands using `!123` or `!wc`\n"
"    isn't a small thing either,\n"
"    and neither are wildcard expansion and `for` loops.\n"
"    Each one is an opportunity to repeat one of the big ideas of Software "
"Carpentry:\n"
"    if the computer *can* repeat it,\n"
"    some programmer somewhere will almost certainly have built\n"
"    some way for the computer *to* repeat it."

# unordered list
#: shell-novice/_extras/guide.md:161
msgid "*   Building up a pipeline with four or five stages,"
msgstr "*   Building up a pipeline with four or five stages,"

#: shell-novice/_extras/guide.md:162
msgid ""
"    then putting it in a shell script for re-use\n"
"    and calling that script inside a `for` loop,\n"
"    is a great opportunity to show how\n"
"    \"seven plus or minus two\"\n"
"    connects to programming.\n"
"    Once we have figured out how to do something moderately complicated,\n"
"    we make it re-usable and give it a name\n"
"    so that it only takes up one slot in working memory\n"
"    rather than several.\n"
"    It is also a good opportunity to talk about exploratory programming:\n"
"    rather than designing a program up front,\n"
"    we can do a few useful things\n"
"    and then retroactively decide which are worth encapsulating\n"
"    for future re-use."
msgstr ""
"    then putting it in a shell script for re-use\n"
"    and calling that script inside a `for` loop,\n"
"    is a great opportunity to show how\n"
"    \"seven plus or minus two\"\n"
"    connects to programming.\n"
"    Once we have figured out how to do something moderately complicated,\n"
"    we make it re-usable and give it a name\n"
"    so that it only takes up one slot in working memory\n"
"    rather than several.\n"
"    It is also a good opportunity to talk about exploratory programming:\n"
"    rather than designing a program up front,\n"
"    we can do a few useful things\n"
"    and then retroactively decide which are worth encapsulating\n"
"    for future re-use."

# unordered list
#: shell-novice/_extras/guide.md:177
msgid "*   If everything is going well, you can drive home the point that file"
msgstr ""
"*   If everything is going well, you can drive home the point that file"

#: shell-novice/_extras/guide.md:178
msgid ""
"    extensions are essentially there to help computers (and human\n"
"    readers) understand file content and are not a requirement of files\n"
"    (covered briefly in [Navigating Files and Directories]({{ page."
"root }}/02-filedir/)).\n"
"    This can be done in the [Pipes and Filters]({{ page.root }}/04-"
"pipefilter/) section by showing that you\n"
"    can redirect standard output to a file without the .txt extension\n"
"    (e.g., lengths), and that the resulting file is still a perfectly usable "
"text file.\n"
"    Make the point that if double-clicked in the GUI, the computer will\n"
"    probably ask you what you want to do."
msgstr ""
"    extensions are essentially there to help computers (and human\n"
"    readers) understand file content and are not a requirement of files\n"
"    (covered briefly in [Navigating Files and Directories]({{ page."
"root }}/02-filedir/)).\n"
"    This can be done in the [Pipes and Filters]({{ page.root }}/04-"
"pipefilter/) section by showing that you\n"
"    can redirect standard output to a file without the .txt extension\n"
"    (e.g., lengths), and that the resulting file is still a perfectly usable "
"text file.\n"
"    Make the point that if double-clicked in the GUI, the computer will\n"
"    probably ask you what you want to do."

# unordered list
#: shell-novice/_extras/guide.md:187
msgid ""
"*   We have to leave out many important things because of time constraints,"
msgstr ""
"*   We have to leave out many important things because of time constraints,"

#: shell-novice/_extras/guide.md:188
msgid ""
"    including file permissions, job control, and SSH.\n"
"    If learners already understand the basic material,\n"
"    this can be covered instead using the online lessons as guidelines.\n"
"    These limitations also have follow-on consequences:"
msgstr ""
"    including file permissions, job control, and SSH.\n"
"    If learners already understand the basic material,\n"
"    this can be covered instead using the online lessons as guidelines.\n"
"    These limitations also have follow-on consequences:"

# unordered list
#: shell-novice/_extras/guide.md:193
msgid "*   It's hard to discuss `#!` (shebang) without first discussing"
msgstr "*   It's hard to discuss `#!` (shebang) without first discussing"

#: shell-novice/_extras/guide.md:194
msgid ""
"    permissions, which we don't do.  `#!` is also [pretty\n"
"    complicated][shebang], so even if we did discuss permissions, we\n"
"    probably still wouldn't want to discuss `#!`."
msgstr ""
"    permissions, which we don't do.  `#!` is also [pretty\n"
"    complicated][shebang], so even if we did discuss permissions, we\n"
"    probably still wouldn't want to discuss `#!`."

# unordered list
#: shell-novice/_extras/guide.md:198
msgid "*   Installing Bash and a reasonable set of Unix commands on Windows"
msgstr "*   Installing Bash and a reasonable set of Unix commands on Windows"

#: shell-novice/_extras/guide.md:199
msgid ""
"    always involves some fiddling and frustration.\n"
"    Please see the latest set of installation guidelines for advice,\n"
"    and try it out yourself *before* teaching a class."
msgstr ""
"    always involves some fiddling and frustration.\n"
"    Please see the latest set of installation guidelines for advice,\n"
"    and try it out yourself *before* teaching a class."

# unordered list
#: shell-novice/_extras/guide.md:203
msgid "*   On Windows machines"
msgstr "*   On Windows machines"

#: shell-novice/_extras/guide.md:204
msgid ""
"    if `nano` hasn't been properly installed with the\n"
"    [Software Carpentry Windows Installer][windows-installer]\n"
"    it is possible to use `notepad` as an alternative.  There will be a GUI\n"
"    interface and line endings are treated differently, but otherwise, for\n"
"    the purposes of this lesson, `notepad` and `nano` can be used almost "
"interchangeably."
msgstr ""
"    if `nano` hasn't been properly installed with the\n"
"    [Software Carpentry Windows Installer][windows-installer]\n"
"    it is possible to use `notepad` as an alternative.  There will be a GUI\n"
"    interface and line endings are treated differently, but otherwise, for\n"
"    the purposes of this lesson, `notepad` and `nano` can be used almost "
"interchangeably."

# unordered list
#: shell-novice/_extras/guide.md:210
msgid "*   On Windows, it appears that:"
msgstr "*   On Windows, it appears that:"

#: shell-novice/_extras/guide.md:212
msgid ""
"    ~~~\n"
"    $ cd\n"
"    $ cd Desktop\n"
"    ~~~"
msgstr ""
"    ~~~\n"
"    $ cd\n"
"    $ cd Desktop\n"
"    ~~~"

#: shell-novice/_extras/guide.md:218
msgid ""
"    will always put someone on their desktop.\n"
"    Have them create the example directory for the shell exercises there\n"
"    so that they can find it easily\n"
"    and watch it evolve."
msgstr ""
"    will always put someone on their desktop.\n"
"    Have them create the example directory for the shell exercises there\n"
"    so that they can find it easily\n"
"    and watch it evolve."

# unordered list
#: shell-novice/_extras/guide.md:223
msgid ""
"*  Stay within POSIX-compliant commands, as all the teaching materials do."
msgstr ""
"*  Stay within POSIX-compliant commands, as all the teaching materials do."

#: shell-novice/_extras/guide.md:224
msgid ""
"   Your particular shell may have extensions beyond POSIX that are not "
"available\n"
"   on other machines, especially the default OSX bash and Windows bash "
"emulators.\n"
"   For example, POSIX `ls` does not have an `--ignore=` or `-I` option, and "
"POSIX\n"
"   `head` takes `-n 10` or `-10`, but not the long form of `--lines=10`."
msgstr ""
"   Your particular shell may have extensions beyond POSIX that are not "
"available\n"
"   on other machines, especially the default OSX bash and Windows bash "
"emulators.\n"
"   For example, POSIX `ls` does not have an `--ignore=` or `-I` option, and "
"POSIX\n"
"   `head` takes `-n 10` or `-10`, but not the long form of `--lines=10`."

# header
#: shell-novice/_extras/guide.md:229
msgid "## Windows"
msgstr "## Windows"

#: shell-novice/_extras/guide.md:231
msgid ""
"Installing Bash and a reasonable set of Unix commands on Windows\n"
"always involves some fiddling and frustration.\n"
"Please see the latest set of installation guidelines for advice,\n"
"and try it out yourself *before* teaching a class.\n"
"Options we have explored include:"
msgstr ""
"Installing Bash and a reasonable set of Unix commands on Windows\n"
"always involves some fiddling and frustration.\n"
"Please see the latest set of installation guidelines for advice,\n"
"and try it out yourself *before* teaching a class.\n"
"Options we have explored include:"

# ordered list
#: shell-novice/_extras/guide.md:237
msgid "1.  [msysGit](http://msysgit.github.io/) (also called \"Git Bash\"),"
msgstr "1.  [msysGit](http://msysgit.github.io/) (also called \"Git Bash\"),"

# ordered list
#: shell-novice/_extras/guide.md:238
msgid "2.  [Cygwin](http://www.cygwin.com/),"
msgstr "2.  [Cygwin](http://www.cygwin.com/),"

# ordered list
#: shell-novice/_extras/guide.md:239
msgid "3.  using a desktop virtual machine, and"
msgstr "3.  using a desktop virtual machine, and"

# ordered list
#: shell-novice/_extras/guide.md:240
msgid ""
"4.  having learners connect to a remote Unix machine (typically a VM in the "
"cloud)."
msgstr ""
"4.  having learners connect to a remote Unix machine (typically a VM in the "
"cloud)."

#: shell-novice/_extras/guide.md:242
msgid ""
"Cygwin was the preferred option until mid-2013,\n"
"but once we started teaching Git,\n"
"msysGit proved to work better.\n"
"Desktop virtual machines and cloud-based VMs work well for technically "
"sophisticated learners,\n"
"and can reduce installation and configuration at the start of the workshop,\n"
"but:"
msgstr ""
"Cygwin was the preferred option until mid-2013,\n"
"but once we started teaching Git,\n"
"msysGit proved to work better.\n"
"Desktop virtual machines and cloud-based VMs work well for technically "
"sophisticated learners,\n"
"and can reduce installation and configuration at the start of the workshop,\n"
"but:"

# ordered list
#: shell-novice/_extras/guide.md:249
msgid "1.  they don't work well on underpowered machines,"
msgstr "1.  they don't work well on underpowered machines,"

# ordered list
#: shell-novice/_extras/guide.md:250
msgid ""
"2.  they're confusing for novices (because simple things like copy and paste "
"work differently),"
msgstr ""
"2.  they're confusing for novices (because simple things like copy and paste "
"work differently),"

# ordered list
#: shell-novice/_extras/guide.md:251
msgid ""
"3.  learners leave the workshop without a working environment on their "
"operating system of choice, and"
msgstr ""
"3.  learners leave the workshop without a working environment on their "
"operating system of choice, and"

# ordered list
#: shell-novice/_extras/guide.md:252
msgid ""
"4.  learners may show up without having downloaded the VM or the wireless "
"will go down (or become congested) during the lesson."
msgstr ""
"4.  learners may show up without having downloaded the VM or the wireless "
"will go down (or become congested) during the lesson."

#: shell-novice/_extras/guide.md:254
msgid ""
"Whatever you use,\n"
"please *test it yourself* on a Windows machine *before* your workshop:\n"
"things may always have changed behind your back since your last workshop.\n"
"And please also make use of our\n"
"[Software Carpentry Windows Installer][windows-installer]."
msgstr ""
"Whatever you use,\n"
"please *test it yourself* on a Windows machine *before* your workshop:\n"
"things may always have changed behind your back since your last workshop.\n"
"And please also make use of our\n"
"[Software Carpentry Windows Installer][windows-installer]."

#: shell-novice/_extras/guide.md:260
msgid ""
"[shebang]: http://www.in-ulm.de/~mascheck/various/shebang/\n"
"[windows-installer]: {{ site.swc_github }}/windows-installer"
msgstr ""
"[shebang]: http://www.in-ulm.de/~mascheck/various/shebang/\n"
"[windows-installer]: {{ site.swc_github }}/windows-installer"

#: shell-novice/_includes/links.md:1
msgid ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[concept-maps]: http://carpentries.github.io/instructor-training/05-memory/\n"
"[email]: mailto:lessons@software-carpentry.org\n"
"[contrib-covenant]: http://contributor-covenant.org/\n"
"[contributing]: {{ site.github.repository_url }}/blob/gh-pages/CONTRIBUTING."
"md\n"
"[cran-checkpoint]: https://cran.r-project.org/web/packages/checkpoint/index."
"html\n"
"[cran-knitr]: https://cran.r-project.org/web/packages/knitr/index.html\n"
"[cran-stringr]: https://cran.r-project.org/web/packages/stringr/index.html\n"
"[github-importer]: https://import.github.com/\n"
"[importer]: https://github.com/new/import\n"
"[jekyll-collection]: https://jekyllrb.com/docs/collections/\n"
"[jekyll-install]: https://jekyllrb.com/docs/installation/\n"
"[jekyll-windows]: http://jekyll-windows.juthilo.com/\n"
"[jekyll]: https://jekyllrb.com/\n"
"[jupyter]: https://jupyter.org/\n"
"[mit-license]: http://opensource.org/licenses/mit-license.html\n"
"[morea]: https://morea-framework.github.io/\n"
"[numfocus]: http://numfocus.org/\n"
"[osi]: http://opensource.org\n"
"[pandoc]: https://pandoc.org/\n"
"[paper-now]: https://github.com/PeerJ/paper-now\n"
"[python-gapminder]: https://swcarpentry.github.io/python-novice-gapminder/\n"
"[pyyaml]: https://pypi.python.org/pypi/PyYAML\n"
"[r-markdown]: http://rmarkdown.rstudio.com/\n"
"[rstudio]: https://www.rstudio.com/\n"
"[ruby-install-guide]: https://www.ruby-lang.org/en/downloads/\n"
"[ruby-installer]: http://rubyinstaller.org/\n"
"[rubygems]: https://rubygems.org/pages/download/\n"
"[styles]: https://github.com/swcarpentry/styles/\n"
"[training]: http://swcarpentry.github.io/instructor-training/\n"
"[workshop-repo]: {{ site.workshop_repo }}\n"
"[yaml]: http://yaml.org/\n"
"[coc]: https://software-carpentry.org/conduct/\n"
"[coc-reporting]: https://software-carpentry.org/CoC-reporting/"
msgstr ""
"[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[concept-maps]: http://carpentries.github.io/instructor-training/05-memory/\n"
"[email]: mailto:lessons@software-carpentry.org\n"
"[contrib-covenant]: http://contributor-covenant.org/\n"
"[contributing]: {{ site.github.repository_url }}/blob/gh-pages/CONTRIBUTING."
"md\n"
"[cran-checkpoint]: https://cran.r-project.org/web/packages/checkpoint/index."
"html\n"
"[cran-knitr]: https://cran.r-project.org/web/packages/knitr/index.html\n"
"[cran-stringr]: https://cran.r-project.org/web/packages/stringr/index.html\n"
"[github-importer]: https://import.github.com/\n"
"[importer]: https://github.com/new/import\n"
"[jekyll-collection]: https://jekyllrb.com/docs/collections/\n"
"[jekyll-install]: https://jekyllrb.com/docs/installation/\n"
"[jekyll-windows]: http://jekyll-windows.juthilo.com/\n"
"[jekyll]: https://jekyllrb.com/\n"
"[jupyter]: https://jupyter.org/\n"
"[mit-license]: http://opensource.org/licenses/mit-license.html\n"
"[morea]: https://morea-framework.github.io/\n"
"[numfocus]: http://numfocus.org/\n"
"[osi]: http://opensource.org\n"
"[pandoc]: https://pandoc.org/\n"
"[paper-now]: https://github.com/PeerJ/paper-now\n"
"[python-gapminder]: https://swcarpentry.github.io/python-novice-gapminder/\n"
"[pyyaml]: https://pypi.python.org/pypi/PyYAML\n"
"[r-markdown]: http://rmarkdown.rstudio.com/\n"
"[rstudio]: https://www.rstudio.com/\n"
"[ruby-install-guide]: https://www.ruby-lang.org/en/downloads/\n"
"[ruby-installer]: http://rubyinstaller.org/\n"
"[rubygems]: https://rubygems.org/pages/download/\n"
"[styles]: https://github.com/swcarpentry/styles/\n"
"[training]: http://swcarpentry.github.io/instructor-training/\n"
"[workshop-repo]: {{ site.workshop_repo }}\n"
"[yaml]: http://yaml.org/\n"
"[coc]: https://software-carpentry.org/conduct/\n"
"[coc-reporting]: https://software-carpentry.org/CoC-reporting/"

# Front Matter
#: shell-novice/aio.md:1
msgid ""
"---\n"
"layout: page \n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: page \n"
"root: .\n"
"---"

# inline html
#: shell-novice/aio.md:5
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every "
"episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. "
"*/\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"      if (this.readyState == 4 && this.status == 200) {\n"
"        var article_here = document.getElementById(this.episode);\n"
"        var parser = new DOMParser();\n"
"        var htmlDoc = parser.parseFromString(this.responseText,\"text/html"
"\");\n"
"        var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"        article_here.innerHTML = htmlDocArticle.innerHTML;\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

# Front Matter
#: shell-novice/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .\n"
"---"

#: shell-novice/index.md:6
msgid ""
"The Unix shell has been around longer than most of its users have been "
"alive.\n"
"It has survived so long because it's a power tool\n"
"that allows people to do complex things with just a few keystrokes.\n"
"More importantly,\n"
"it helps them combine existing programs in new ways\n"
"and automate repetitive tasks\n"
"so they aren't typing the same things over and over again.\n"
"Use of the shell is fundamental to using a wide range of other powerful "
"tools \n"
"and computing resources (including \"high-performance computing\" "
"supercomputers).\n"
"These lessons will start you on a path towards using these resources "
"effectively."
msgstr ""
"Unixシェルは、ほとんどのユーザーが生きていたよりもずっと長くなっています。 \n"
"それは人々がちょうど少数のキーストロークで複雑なことをすることを可能にする電"
"動工具であるので、\n"
"ずっと生き延びてきました。 さらに重要なことは、既存のプログラムを新しい方法で"
"組み合わせ、\n"
"繰り返しの作業を自動化して、同じことを何度も繰り返し入力しないようにすること"
"です。 \n"
"シェルの使用は、他の強力なツールやコンピューティングリソース\n"
"（「高性能コンピューティング」スーパーコンピュータを含む）を幅広く使用する上"
"で基本的です。 \n"
"これらのレッスンは、これらのリソースを効果的に使用するための道を歩み始めま"
"す。"

# blockquote, which can be cascaded
#: shell-novice/index.md:17
msgid "> ## Prerequisites"
msgstr "> ## 予備知識"

#: shell-novice/index.md:18
msgid ""
">\n"
"> This lesson guides you through the basics of file systems and the\n"
"> shell.  If you have stored files on a computer at all and recognize\n"
"> the word “file” and either “directory” or “folder” (two common words\n"
"> for the same thing), you're ready for this lesson.\n"
">\n"
"> If you're already comfortable manipulating files and directories,\n"
"> searching for files with `grep` and `find`, and writing simple loops\n"
"> and scripts, you probably want to explore the next lesson: [shell-extras]"
"(swcarpentry.github.io/shell-extras)."
msgstr ""
"> このレッスンでは、ファイルシステムとシェルの基本について説明します。 \n"
"> コンピュータにファイルを保存して、「ファイル」という単語と「ディレクト"
"リ」\n"
"> または「フォルダ」（同じことの2つの一般的な単語）を認識している場合は、\n"
"> このレッスンの準備が整いました。\n"
"> \n"
">ファイルやディレクトリを操作したり、grepとfindでファイルを検索したり、\n"
"> 単純なループやスクリプトを書いたりするのが快適であれば、\n"
"> おそらく次のレッスンを探そうと思っています:\n"
"> [shell-extras](swcarpentry.github.io/shell-extras)を実行します。"

# SC/DC Template label
#: shell-novice/index.md:27
msgid "{: .prereq}"
msgstr "{: .prereq}"

# Front Matter
#: shell-novice/reference.md:1
#, fuzzy
msgid ""
"---\n"
"layout: reference\n"
"Title: \"Reference\"\n"
"root: ..\n"
"permalink: /reference/\n"
"---"
msgstr ""
"---\n"
"layout: reference\n"
"permalink: /reference/\n"
"---"

# header
#: shell-novice/reference.md:8
msgid "## Summary of Basic Commands"
msgstr "## 基本コマンドのまとめ"

#: shell-novice/reference.md:10
msgid ""
"| Action      | Files | Folders      |\n"
"|-------------|-------|--------------|\n"
"| Inspect     | ls    | ls           |\n"
"| View content| cat   | ls           |\n"
"| Navigate to |       | cd           |\n"
"| Move        | mv    | mv           |\n"
"| Copy        | cp    | cp -r        |\n"
"| Create      | nano  | mkdir        |\n"
"| Delete      | rm    | rmdir, rm -r |"
msgstr ""
"| アクション | ファイル | フォルダ         |\n"
"|-------------|-------|--------------|\n"
"| 検査     | ls    | ls           |\n"
"| コンテンツを表示| cat   | ls           |\n"
"| 移動 |       | cd           |\n"
"| 移動        | mv    | mv           |\n"
"| コピー        | cp    | cp -r        |\n"
"| 作成      | nano  | mkdir        |\n"
"| 削除      | rm    | rmdir, rm -r |"

# header
#: shell-novice/reference.md:20
msgid "## Filesystem hierarchy"
msgstr "## Filesystem hierarchy"

#: shell-novice/reference.md:22
msgid ""
"The following is an overview of a standard Unix filesystem.\n"
"The exact hierarchy depends on the platform,\n"
"so you may not see exactly the same files/directories on your computer:"
msgstr ""
"The following is an overview of a standard Unix filesystem.\n"
"The exact hierarchy depends on the platform,\n"
"so you may not see exactly the same files/directories on your computer:"

#: shell-novice/reference.md:26
msgid "![Linux filesystem hierarchy](../fig/standard-filesystem-hierarchy.svg)"
msgstr ""
"![Linux filesystem hierarchy](../fig/standard-filesystem-hierarchy.svg)"

# header
#: shell-novice/reference.md:28
msgid "## Glossary"
msgstr "## Glossary"

#: shell-novice/reference.md:30
msgid ""
"{:auto_ids}\n"
"absolute path\n"
":   A [path](#path) that refers to a particular location in a file system.\n"
"    Absolute paths are usually written with respect to the file system's\n"
"    [root directory](#root-directory),\n"
"    and begin with either \"/\" (on Unix) or \"\\\\\" (on Microsoft "
"Windows).\n"
"    See also: [relative path](#relative-path)."
msgstr ""
"{:auto_ids}\n"
"absolute path\n"
":   A [path](#path) that refers to a particular location in a file system.\n"
"    Absolute paths are usually written with respect to the file system's\n"
"    [root directory](#root-directory),\n"
"    and begin with either \"/\" (on Unix) or \"\\\\\" (on Microsoft "
"Windows).\n"
"    See also: [relative path](#relative-path)."

#: shell-novice/reference.md:38
msgid ""
"argument\n"
":   A value given to a function or program when it runs.\n"
"    The term is often used interchangeably (and inconsistently) with "
"[parameter](#parameter)."
msgstr ""
"argument\n"
":   A value given to a function or program when it runs.\n"
"    The term is often used interchangeably (and inconsistently) with "
"[parameter](#parameter)."

#: shell-novice/reference.md:42
msgid ""
"command shell\n"
":   See [shell](#shell)"
msgstr ""
"command shell\n"
":   See [shell](#shell)"

#: shell-novice/reference.md:45
msgid ""
"command-line interface\n"
":   A user interface based on typing commands,\n"
"    usually at a [REPL](#read-evaluate-print-loop).\n"
"    See also: [graphical user interface](#graphical-user-interface)."
msgstr ""
"command-line interface\n"
":   A user interface based on typing commands,\n"
"    usually at a [REPL](#read-evaluate-print-loop).\n"
"    See also: [graphical user interface](#graphical-user-interface)."

#: shell-novice/reference.md:50
msgid ""
"comment\n"
":   A remark in a program that is intended to help human readers understand "
"what is going on,\n"
"    but is ignored by the computer.\n"
"    Comments in Python, R, and the Unix shell start with a `#` character and "
"run to the end of the line;\n"
"    comments in SQL start with `--`,\n"
"    and other languages have other conventions."
msgstr ""
"comment\n"
":   A remark in a program that is intended to help human readers understand "
"what is going on,\n"
"    but is ignored by the computer.\n"
"    Comments in Python, R, and the Unix shell start with a `#` character and "
"run to the end of the line;\n"
"    comments in SQL start with `--`,\n"
"    and other languages have other conventions."

#: shell-novice/reference.md:58
msgid ""
"current working directory\n"
":   The directory that [relative paths](#relative-path) are calculated "
"from;\n"
"    equivalently,\n"
"    the place where files referenced by name only are searched for.\n"
"    Every [process](#process) has a current working directory.\n"
"    The current working directory is usually referred to using the shorthand "
"notation `.` (pronounced \"dot\")."
msgstr ""
"current working directory\n"
":   The directory that [relative paths](#relative-path) are calculated "
"from;\n"
"    equivalently,\n"
"    the place where files referenced by name only are searched for.\n"
"    Every [process](#process) has a current working directory.\n"
"    The current working directory is usually referred to using the shorthand "
"notation `.` (pronounced \"dot\")."

#: shell-novice/reference.md:65
msgid ""
"file system\n"
":   A set of files, directories, and I/O devices (such as keyboards and "
"screens).\n"
"    A file system may be spread across many physical devices,\n"
"    or many file systems may be stored on a single physical device;\n"
"    the [operating system](#operating-system) manages access."
msgstr ""
"file system\n"
":   A set of files, directories, and I/O devices (such as keyboards and "
"screens).\n"
"    A file system may be spread across many physical devices,\n"
"    or many file systems may be stored on a single physical device;\n"
"    the [operating system](#operating-system) manages access."

#: shell-novice/reference.md:71
msgid ""
"filename extension\n"
":   The portion of a file's name that comes after the final \".\" "
"character.\n"
"    By convention this identifies the file's type:\n"
"    `.txt` means \"text file\", `.png` means \"Portable Network Graphics file"
"\",\n"
"    and so on. These conventions are not enforced by most operating "
"systems:\n"
"    it is perfectly possible (but confusing!) to name an MP3 sound file "
"`homepage.html`.\n"
"    Since many applications use filename extensions to identify the [MIME "
"type](#mime-type) of the file,\n"
"    misnaming files may cause those applications to fail."
msgstr ""
"filename extension\n"
":   The portion of a file's name that comes after the final \".\" "
"character.\n"
"    By convention this identifies the file's type:\n"
"    `.txt` means \"text file\", `.png` means \"Portable Network Graphics file"
"\",\n"
"    and so on. These conventions are not enforced by most operating "
"systems:\n"
"    it is perfectly possible (but confusing!) to name an MP3 sound file "
"`homepage.html`.\n"
"    Since many applications use filename extensions to identify the [MIME "
"type](#mime-type) of the file,\n"
"    misnaming files may cause those applications to fail."

#: shell-novice/reference.md:80
msgid ""
"filter\n"
":   A program that transforms a stream of data.\n"
"    Many Unix command-line tools are written as filters:\n"
"    they read data from [standard input](#standard-input),\n"
"    process it, and write the result to [standard output](#standard-output)."
msgstr ""
"filter\n"
":   A program that transforms a stream of data.\n"
"    Many Unix command-line tools are written as filters:\n"
"    they read data from [standard input](#standard-input),\n"
"    process it, and write the result to [standard output](#standard-output)."

#: shell-novice/reference.md:86
msgid ""
"flag\n"
":   A terse way to specify an option or setting to a command-line program.\n"
"    By convention Unix applications use a dash followed by a single letter,\n"
"    such as `-v`, or two dashes followed by a word, such as `--verbose`,\n"
"    while DOS applications use a slash, such as `/V`.\n"
"    Depending on the application, a flag may be followed by a single "
"argument, as in `-o /tmp/output.txt`."
msgstr ""
"flag\n"
":   A terse way to specify an option or setting to a command-line program.\n"
"    By convention Unix applications use a dash followed by a single letter,\n"
"    such as `-v`, or two dashes followed by a word, such as `--verbose`,\n"
"    while DOS applications use a slash, such as `/V`.\n"
"    Depending on the application, a flag may be followed by a single "
"argument, as in `-o /tmp/output.txt`."

#: shell-novice/reference.md:93
msgid ""
"for loop\n"
":   A loop that is executed once for each value in some kind of set, list, "
"or range.\n"
"    See also: [while loop](#while-loop)."
msgstr ""
"for loop\n"
":   A loop that is executed once for each value in some kind of set, list, "
"or range.\n"
"    See also: [while loop](#while-loop)."

#: shell-novice/reference.md:97
msgid ""
"graphical user interface\n"
":   A user interface based on selecting items and actions from a graphical "
"display,\n"
"    usually controlled by using a mouse.\n"
"    See also: [command-line interface](#command-line-interface)."
msgstr ""
"graphical user interface\n"
":   A user interface based on selecting items and actions from a graphical "
"display,\n"
"    usually controlled by using a mouse.\n"
"    See also: [command-line interface](#command-line-interface)."

#: shell-novice/reference.md:102
msgid ""
"home directory\n"
":   The default directory associated with an account on a computer system.\n"
"    By convention, all of a user's files are stored in or below her home "
"directory."
msgstr ""
"home directory\n"
":   The default directory associated with an account on a computer system.\n"
"    By convention, all of a user's files are stored in or below her home "
"directory."

#: shell-novice/reference.md:106
msgid ""
"loop\n"
":   A set of instructions to be executed multiple times. Consists of a [loop "
"body](#loop-body) and (usually) a\n"
"    condition for exiting the loop. See also [for loop](#for-loop) and "
"[while loop](#while-loop)."
msgstr ""
"loop\n"
":   A set of instructions to be executed multiple times. Consists of a [loop "
"body](#loop-body) and (usually) a\n"
"    condition for exiting the loop. See also [for loop](#for-loop) and "
"[while loop](#while-loop)."

#: shell-novice/reference.md:110
msgid ""
"loop body\n"
":   The set of statements or commands that are repeated inside a [for loop]"
"(#for-loop)\n"
"    or [while loop](#while-loop)."
msgstr ""
"loop body\n"
":   The set of statements or commands that are repeated inside a [for loop]"
"(#for-loop)\n"
"    or [while loop](#while-loop)."

#: shell-novice/reference.md:114
msgid ""
"MIME type\n"
":   MIME (Multi-Purpose Internet Mail Extensions) types describe different "
"file types for exchange on the Internet,\n"
"    for example images, audio, and documents."
msgstr ""
"MIME type\n"
":   MIME (Multi-Purpose Internet Mail Extensions) types describe different "
"file types for exchange on the Internet,\n"
"    for example images, audio, and documents."

#: shell-novice/reference.md:118
msgid ""
"operating system\n"
":   Software that manages interactions between users, hardware, and software "
"[processes](#process). Common\n"
"    examples are Linux, OS X, and Windows."
msgstr ""
"operating system\n"
":   Software that manages interactions between users, hardware, and software "
"[processes](#process). Common\n"
"    examples are Linux, OS X, and Windows."

#: shell-novice/reference.md:122
msgid ""
"orthogonal\n"
":   To have meanings or behaviors that are independent of each other.\n"
"    If a set of concepts or tools are orthogonal,\n"
"    they can be combined in any way."
msgstr ""
"orthogonal\n"
":   To have meanings or behaviors that are independent of each other.\n"
"    If a set of concepts or tools are orthogonal,\n"
"    they can be combined in any way."

#: shell-novice/reference.md:127
msgid ""
"parameter\n"
":   A variable named in a function's declaration that is used to hold a "
"value passed into the call.\n"
"    The term is often used interchangeably (and inconsistently) with "
"[argument](#argument)."
msgstr ""
"parameter\n"
":   A variable named in a function's declaration that is used to hold a "
"value passed into the call.\n"
"    The term is often used interchangeably (and inconsistently) with "
"[argument](#argument)."

#: shell-novice/reference.md:131
msgid ""
"parent directory\n"
":   The directory that \"contains\" the one in question.\n"
"    Every directory in a file system except the [root directory](#root-"
"directory) has a parent.\n"
"    A directory's parent is usually referred to using the shorthand notation "
"`..` (pronounced \"dot dot\")."
msgstr ""
"parent directory\n"
":   The directory that \"contains\" the one in question.\n"
"    Every directory in a file system except the [root directory](#root-"
"directory) has a parent.\n"
"    A directory's parent is usually referred to using the shorthand notation "
"`..` (pronounced \"dot dot\")."

#: shell-novice/reference.md:136
msgid ""
"path\n"
":   A description that specifies the location of a file or directory within "
"a [file system](#file-system).\n"
"    See also: [absolute path](#absolute-path), [relative path](#relative-"
"path)."
msgstr ""
"path\n"
":   A description that specifies the location of a file or directory within "
"a [file system](#file-system).\n"
"    See also: [absolute path](#absolute-path), [relative path](#relative-"
"path)."

#: shell-novice/reference.md:141
msgid ""
"pipe\n"
":   A connection from the output of one program to the input of another.\n"
"    When two or more programs are connected in this way, they are called a "
"\"pipeline\"."
msgstr ""
"pipe\n"
":   A connection from the output of one program to the input of another.\n"
"    When two or more programs are connected in this way, they are called a "
"\"pipeline\"."

#: shell-novice/reference.md:145
msgid ""
"process\n"
":   A running instance of a program, containing code, variable values,\n"
"    open files and network connections, and so on.\n"
"    Processes are the \"actors\" that the [operating system](#operating-"
"system) manages;\n"
"    it typically runs each process for a few milliseconds at a time\n"
"    to give the impression that they are executing simultaneously."
msgstr ""
"process\n"
":   A running instance of a program, containing code, variable values,\n"
"    open files and network connections, and so on.\n"
"    Processes are the \"actors\" that the [operating system](#operating-"
"system) manages;\n"
"    it typically runs each process for a few milliseconds at a time\n"
"    to give the impression that they are executing simultaneously."

#: shell-novice/reference.md:153
msgid ""
"prompt\n"
":   A character or characters display by a [REPL](#read-evaluate-print-loop) "
"to show that\n"
"    it is waiting for its next command."
msgstr ""
"prompt\n"
":   A character or characters display by a [REPL](#read-evaluate-print-loop) "
"to show that\n"
"    it is waiting for its next command."

#: shell-novice/reference.md:157
msgid ""
"quoting\n"
":   (in the shell):\n"
"    Using quotation marks of various kinds to prevent the shell from "
"interpreting special characters.\n"
"    For example, to pass the string `*.txt` to a program,\n"
"    it is usually necessary to write it as `'*.txt'` (with single quotes)\n"
"    so that the shell will not try to expand the `*` wildcard."
msgstr ""
"quoting\n"
":   (in the shell):\n"
"    Using quotation marks of various kinds to prevent the shell from "
"interpreting special characters.\n"
"    For example, to pass the string `*.txt` to a program,\n"
"    it is usually necessary to write it as `'*.txt'` (with single quotes)\n"
"    so that the shell will not try to expand the `*` wildcard."

#: shell-novice/reference.md:164
msgid ""
"read-evaluate-print loop\n"
":   (REPL): A [command-line interface](#command-line-interface) that reads a "
"command from the user,\n"
"    executes it, prints the result, and waits for another command."
msgstr ""
"read-evaluate-print loop\n"
":   (REPL): A [command-line interface](#command-line-interface) that reads a "
"command from the user,\n"
"    executes it, prints the result, and waits for another command."

#: shell-novice/reference.md:168
msgid ""
"redirect\n"
":   To send a command's output to a file rather than to the screen or "
"another command,\n"
"    or equivalently to read a command's input from a file."
msgstr ""
"redirect\n"
":   To send a command's output to a file rather than to the screen or "
"another command,\n"
"    or equivalently to read a command's input from a file."

#: shell-novice/reference.md:172
msgid ""
"regular expression\n"
":   A pattern that specifies a set of character strings.\n"
"    REs are most often used to find sequences of characters in strings."
msgstr ""
"regular expression\n"
":   A pattern that specifies a set of character strings.\n"
"    REs are most often used to find sequences of characters in strings."

#: shell-novice/reference.md:176
msgid ""
"relative path\n"
":   A [path](#path) that specifies the location of a file or directory\n"
"    with respect to the [current working directory](#current-working-"
"directory).\n"
"    Any path that does not begin with a separator character (\"/\" or \"\\\\"
"\") is a relative path.\n"
"    See also: [absolute path](#absolute-path)."
msgstr ""
"relative path\n"
":   A [path](#path) that specifies the location of a file or directory\n"
"    with respect to the [current working directory](#current-working-"
"directory).\n"
"    Any path that does not begin with a separator character (\"/\" or \"\\\\"
"\") is a relative path.\n"
"    See also: [absolute path](#absolute-path)."

#: shell-novice/reference.md:182
msgid ""
"root directory\n"
":   The top-most directory in a [file system](#file-system).\n"
"    Its name is \"/\" on Unix (including Linux and Mac OS X) and \"\\\\\" on "
"Microsoft Windows."
msgstr ""
"root directory\n"
":   The top-most directory in a [file system](#file-system).\n"
"    Its name is \"/\" on Unix (including Linux and Mac OS X) and \"\\\\\" on "
"Microsoft Windows."

#: shell-novice/reference.md:186
msgid ""
"shell\n"
":   A [command-line interface](#cli) such as Bash (the Bourne-Again Shell)\n"
"    or the Microsoft Windows DOS shell\n"
"    that allows a user to interact with the [operating system](#operating-"
"system)."
msgstr ""
"shell\n"
":   A [command-line interface](#cli) such as Bash (the Bourne-Again Shell)\n"
"    or the Microsoft Windows DOS shell\n"
"    that allows a user to interact with the [operating system](#operating-"
"system)."

#: shell-novice/reference.md:191
msgid ""
"shell script\n"
":   A set of [shell](#shell) commands stored in a file for re-use.\n"
"    A shell script is a program executed by the shell;\n"
"    the name \"script\" is used for historical reasons."
msgstr ""
"shell script\n"
":   A set of [shell](#shell) commands stored in a file for re-use.\n"
"    A shell script is a program executed by the shell;\n"
"    the name \"script\" is used for historical reasons."

#: shell-novice/reference.md:197
msgid ""
"standard input\n"
":   A process's default input stream.\n"
"    In interactive command-line applications,\n"
"    it is typically connected to the keyboard;\n"
"    in a [pipe](#pipe),\n"
"    it receives data from the [standard output](#standard-output) of the "
"preceding process."
msgstr ""
"standard input\n"
":   A process's default input stream.\n"
"    In interactive command-line applications,\n"
"    it is typically connected to the keyboard;\n"
"    in a [pipe](#pipe),\n"
"    it receives data from the [standard output](#standard-output) of the "
"preceding process."

#: shell-novice/reference.md:205
msgid ""
"standard output\n"
":   A process's default output stream.\n"
"    In interactive command-line applications,\n"
"    data sent to standard output is displayed on the screen;\n"
"    in a [pipe](#pipe),\n"
"    it is passed to the [standard input](#standard-input) of the next "
"process."
msgstr ""
"standard output\n"
":   A process's default output stream.\n"
"    In interactive command-line applications,\n"
"    data sent to standard output is displayed on the screen;\n"
"    in a [pipe](#pipe),\n"
"    it is passed to the [standard input](#standard-input) of the next "
"process."

#: shell-novice/reference.md:213
msgid ""
"sub-directory\n"
":   A directory contained within another directory."
msgstr ""
"sub-directory\n"
":   A directory contained within another directory."

#: shell-novice/reference.md:216
msgid ""
"tab completion\n"
":   A feature provided by many interactive systems in which\n"
"    pressing the Tab key triggers automatic completion of the current word "
"or command."
msgstr ""
"tab completion\n"
":   A feature provided by many interactive systems in which\n"
"    pressing the Tab key triggers automatic completion of the current word "
"or command."

#: shell-novice/reference.md:220
msgid ""
"variable\n"
":   A name in a program that is associated with a value or a collection of "
"values."
msgstr ""
"variable\n"
":   A name in a program that is associated with a value or a collection of "
"values."

#: shell-novice/reference.md:223
msgid ""
"while loop\n"
":   A loop that keeps executing as long as some condition is true.\n"
"    See also: [for loop](#for-loop)."
msgstr ""
"while loop\n"
":   A loop that keeps executing as long as some condition is true.\n"
"    See also: [for loop](#for-loop)."

#: shell-novice/reference.md:227
msgid ""
"wildcard\n"
":   A character used in pattern matching.\n"
"    In the Unix shell,\n"
"    the wildcard `*` matches zero or more characters,\n"
"    so that `*.txt` matches all files whose names end in `.txt`."
msgstr ""
"wildcard\n"
":   A character used in pattern matching.\n"
"    In the Unix shell,\n"
"    the wildcard `*` matches zero or more characters,\n"
"    so that `*.txt` matches all files whose names end in `.txt`."

# header
#: shell-novice/reference.md:233
msgid "## External references"
msgstr "## External references"

# header
#: shell-novice/reference.md:235
msgid "### Opening a terminal"
msgstr "### Opening a terminal"

# unordered list
#: shell-novice/reference.md:236
msgid ""
"* [How to Use Terminal on a Mac](http://www.macworld.co.uk/feature/mac-"
"software/how-use-terminal-on-mac-3608274/)"
msgstr ""
"* [How to Use Terminal on a Mac](http://www.macworld.co.uk/feature/mac-"
"software/how-use-terminal-on-mac-3608274/)"

# unordered list
#: shell-novice/reference.md:237
msgid "* [Git for Windows](https://git-for-windows.github.io/)"
msgstr "* [Git for Windows](https://git-for-windows.github.io/)"

# unordered list
#: shell-novice/reference.md:238
msgid ""
"* [How to Install Bash shell command-line tool on Windows 10](https://www."
"windowscentral.com/how-install-bash-shell-command-line-windows-10)"
msgstr ""
"* [How to Install Bash shell command-line tool on Windows 10](https://www."
"windowscentral.com/how-install-bash-shell-command-line-windows-10)"

# unordered list
#: shell-novice/reference.md:239
msgid ""
"* [Install and Use the Linux Bash Shell on Windows 10](https://www.howtogeek."
"com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/)"
msgstr ""
"* [Install and Use the Linux Bash Shell on Windows 10](https://www.howtogeek."
"com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/)"

# unordered list
#: shell-novice/reference.md:240
msgid ""
"* [Using the Windows 10 Bash Shell](https://www.howtogeek.com/265900/"
"everything-you-can-do-with-windows-10s-new-bash-shell/)"
msgstr ""
"* [Using the Windows 10 Bash Shell](https://www.howtogeek.com/265900/"
"everything-you-can-do-with-windows-10s-new-bash-shell/)"

# unordered list
#: shell-novice/reference.md:241
msgid ""
"* [Using a UNIX/Linux emulator (Cygwin) or Secure Shell (SSH) client (Putty)]"
"(http://faculty.smu.edu/reynolds/unixtut/windows.html)"
msgstr ""
"* [Using a UNIX/Linux emulator (Cygwin) or Secure Shell (SSH) client (Putty)]"
"(http://faculty.smu.edu/reynolds/unixtut/windows.html)"

# header
#: shell-novice/reference.md:243
msgid "### Manuals"
msgstr "### Manuals"

# unordered list
#: shell-novice/reference.md:244
msgid "* [GNU manuals](http://www.gnu.org/manual/manual.html)"
msgstr "* [GNU manuals](http://www.gnu.org/manual/manual.html)"

# unordered list
#: shell-novice/reference.md:245
msgid ""
"* [Core GNU utilities](http://www.gnu.org/software/coreutils/manual/"
"coreutils.html)"
msgstr ""
"* [Core GNU utilities](http://www.gnu.org/software/coreutils/manual/"
"coreutils.html)"

# header
#: shell-novice/reference.md:247
msgid "### Miscellaneous"
msgstr "### Miscellaneous"

# unordered list
#: shell-novice/reference.md:248
msgid "* [North Pacific Gyre](http://en.wikipedia.org/wiki/North_Pacific_Gyre)"
msgstr ""
"* [North Pacific Gyre](http://en.wikipedia.org/wiki/North_Pacific_Gyre)"

# unordered list
#: shell-novice/reference.md:249
msgid ""
"* [Great Pacific Garbage Patch](http://en.wikipedia.org/wiki/"
"Great_Pacific_Garbage_Patch)"
msgstr ""
"* [Great Pacific Garbage Patch](http://en.wikipedia.org/wiki/"
"Great_Pacific_Garbage_Patch)"

# unordered list
#: shell-novice/reference.md:250
msgid ""
"* ['Ensuring the longevity of digital information' by Jeff Rothenberg]"
"(http://www.clir.org/pubs/archives/ensuring.pdf)"
msgstr ""
"* ['Ensuring the longevity of digital information' by Jeff Rothenberg]"
"(http://www.clir.org/pubs/archives/ensuring.pdf)"

# unordered list
#: shell-novice/reference.md:251
msgid "* [Computer error haikus](http://wiki.c2.com/?ComputerErrorHaiku)"
msgstr "* [Computer error haikus](http://wiki.c2.com/?ComputerErrorHaiku)"

# Front Matter
#: shell-novice/setup.md:1
#, fuzzy
msgid ""
"---\n"
"layout: page\n"
"title: Setup\n"
"root: ..\n"
"permalink: /setup/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: Setup\n"
"root: .\n"
"---"

#: shell-novice/setup.md:8
msgid "You need to download some files to follow this lesson:"
msgstr "You need to download some files to follow this lesson:"

# ordered list
#: shell-novice/setup.md:10
msgid ""
"1. Download [data-shell.zip]({{ page.root }}/data/data-shell.zip) and move "
"the file to your Desktop."
msgstr ""
"1. Download [data-shell.zip]({{ page.root }}/data/data-shell.zip) and move "
"the file to your Desktop."

# ordered list
#: shell-novice/setup.md:11
msgid ""
"2. Unzip/extract the file (ask your instructor if you need help with this "
"step). You should end up with a new folder called **data-shell** on your "
"Desktop."
msgstr ""
"2. Unzip/extract the file (ask your instructor if you need help with this "
"step). You should end up with a new folder called **data-shell** on your "
"Desktop."

# ordered list
#: shell-novice/setup.md:12
msgid ""
"3. Open a terminal and type `cd`, then press the Enter key. That last step "
"will make sure you start with your home folder as your working directory."
msgstr ""
"3. Open a terminal and type `cd`, then press the Enter key. That last step "
"will make sure you start with your home folder as your working directory."

#: shell-novice/setup.md:14
msgid ""
"In the lesson, you will find out how to access the data in this folder.  "
msgstr ""
"In the lesson, you will find out how to access the data in this folder.  "

# blockquote, which can be cascaded
#: shell-novice/setup.md:16
msgid "> ## Where to type commands: How to open a new shell"
msgstr "> ## Where to type commands: How to open a new shell"

# blockquote, which can be cascaded
#: shell-novice/setup.md:17
msgid ""
"> The `shell` is a program that enables us to send commands to the computer "
"and receive output. It is also referred to as the `terminal` or `command "
"line`."
msgstr ""
"> The `shell` is a program that enables us to send commands to the computer "
"and receive output. It is also referred to as the `terminal` or `command "
"line`."

#: shell-novice/setup.md:18
msgid ""
">\n"
"> Some computers include a default Unix Shell program. \n"
"> The steps below describe some methods for identifying and opening a Unix "
"Shell program if you already have one installed. \n"
"> There are also options for identifying and downloading a Unix Shell "
"program, a Linux/UNIX emulator, or a program to access a UNIX server. \n"
">\n"
"> If none of the options below address your circumstances, try an online "
"search for: UNIX shell [your computer model] [your operating system].\n"
">\n"
"> ### Linux\n"
"> The default shell for Linux operating systems is usually Bash.\n"
"> On most versions of Linux, it is accessible by running the Terminal "
"program,\n"
">  which can be found via the applications menu or the search bar.  \n"
"> If your machine is set up to use something other than bash, you can run it "
"by opening a terminal and typing `bash`.\n"
">\n"
"> ### Mac OS\n"
"> For a Mac computer, the default Unix Shell is Bash,\n"
"> and it is available via the Terminal Utilities program within your "
"Applications folder.\n"
">\n"
"> To open Terminal, try one or both of the following:\n"
"> * Go to your Applications. Within Applications, open the Utilities folder. "
"Locate Terminal in the Utilities folder and open it.\n"
"> * Use the Mac ‘Spotlight’ computer search function. Search for: Terminal "
"and press [Enter] - this will open Terminal.\n"
">\n"
"> #### Reference \n"
"> [How to Use Terminal on a Mac](http://www.macworld.co.uk/feature/mac-"
"software/how-use-terminal-on-mac-3608274/)\n"
">\n"
"> ### Windows\n"
"> Computers with Windows operating systems do not automatically have a Unix "
"Shell program installed.\n"
"> In this lesson, we encourage you to use an emulator included in Git for "
"Windows, \n"
"> which gives you access to both Bash shell commands and Git. \n"
"> If you are attending a SWC session, it is likely you have already received "
"instructions on how to install Git for Windows.\n"
">\n"
"> Once installed, you can open a terminal by running the program Git Bash "
"from the Windows start menu.\n"
">\n"
"> Other solutions are available for running Bash commands on Windows "
"systems. \n"
"> There is now a Bash shell command-line tool available for Windows 10. \n"
"> Additionally, you can run Bash commands on a remote UNIX computer or "
"server from your Windows machine. \n"
"> This can be done through a Secure Shell (SSH) client. \n"
"> One such client available for free for Windows computers is PuTTY. \n"
"> See the reference below for information on installing and using PuTTY, \n"
"> using the Windows 10 command-line tool, or installing and using a UNIX/"
"Linux emulator.\n"
">\n"
"> #### Reference\n"
"> * [Git for Windows](https://git-for-windows.github.io/)\n"
"> * [How to Install Bash shell command-line tool on Windows 10](https://www."
"windowscentral.com/how-install-bash-shell-command-line-windows-10)\n"
"> * [Install and Use the Linux Bash Shell on Windows 10](https://www."
"howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-"
"windows-10/)\n"
"> * [Using the Windows 10 Bash Shell](https://www.howtogeek.com/265900/"
"everything-you-can-do-with-windows-10s-new-bash-shell/)\n"
"> * [Using a UNIX/Linux emulator (Cygwin) or Secure Shell (SSH) client "
"(Putty)](http://faculty.smu.edu/reynolds/unixtut/windows.html)"
msgstr ""
">\n"
"> Some computers include a default Unix Shell program. \n"
"> The steps below describe some methods for identifying and opening a Unix "
"Shell program if you already have one installed. \n"
"> There are also options for identifying and downloading a Unix Shell "
"program, a Linux/UNIX emulator, or a program to access a UNIX server. \n"
">\n"
"> If none of the options below address your circumstances, try an online "
"search for: UNIX shell [your computer model] [your operating system].\n"
">\n"
"> ### Linux\n"
"> The default shell for Linux operating systems is usually Bash.\n"
"> On most versions of Linux, it is accessible by running the Terminal "
"program,\n"
">  which can be found via the applications menu or the search bar.  \n"
"> If your machine is set up to use something other than bash, you can run it "
"by opening a terminal and typing `bash`.\n"
">\n"
"> ### Mac OS\n"
"> For a Mac computer, the default Unix Shell is Bash,\n"
"> and it is available via the Terminal Utilities program within your "
"Applications folder.\n"
">\n"
"> To open Terminal, try one or both of the following:\n"
"> * Go to your Applications. Within Applications, open the Utilities folder. "
"Locate Terminal in the Utilities folder and open it.\n"
"> * Use the Mac ‘Spotlight’ computer search function. Search for: Terminal "
"and press [Enter] - this will open Terminal.\n"
">\n"
"> #### Reference \n"
"> [How to Use Terminal on a Mac](http://www.macworld.co.uk/feature/mac-"
"software/how-use-terminal-on-mac-3608274/)\n"
">\n"
"> ### Windows\n"
"> Computers with Windows operating systems do not automatically have a Unix "
"Shell program installed.\n"
"> In this lesson, we encourage you to use an emulator included in Git for "
"Windows, \n"
"> which gives you access to both Bash shell commands and Git. \n"
"> If you are attending a SWC session, it is likely you have already received "
"instructions on how to install Git for Windows.\n"
">\n"
"> Once installed, you can open a terminal by running the program Git Bash "
"from the Windows start menu.\n"
">\n"
"> Other solutions are available for running Bash commands on Windows "
"systems. \n"
"> There is now a Bash shell command-line tool available for Windows 10. \n"
"> Additionally, you can run Bash commands on a remote UNIX computer or "
"server from your Windows machine. \n"
"> This can be done through a Secure Shell (SSH) client. \n"
"> One such client available for free for Windows computers is PuTTY. \n"
"> See the reference below for information on installing and using PuTTY, \n"
"> using the Windows 10 command-line tool, or installing and using a UNIX/"
"Linux emulator.\n"
">\n"
"> #### Reference\n"
"> * [Git for Windows](https://git-for-windows.github.io/)\n"
"> * [How to Install Bash shell command-line tool on Windows 10](https://www."
"windowscentral.com/how-install-bash-shell-command-line-windows-10)\n"
"> * [Install and Use the Linux Bash Shell on Windows 10](https://www."
"howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-"
"windows-10/)\n"
"> * [Using the Windows 10 Bash Shell](https://www.howtogeek.com/265900/"
"everything-you-can-do-with-windows-10s-new-bash-shell/)\n"
"> * [Using a UNIX/Linux emulator (Cygwin) or Secure Shell (SSH) client "
"(Putty)](http://faculty.smu.edu/reynolds/unixtut/windows.html)"

#~ msgid ""
#~ "As contributors and maintainers of this project,\n"
#~ "we pledge to respect all people who contribute through reporting issues,\n"
#~ "posting feature requests,\n"
#~ "updating documentation,\n"
#~ "submitting pull requests or patches,\n"
#~ "and other activities."
#~ msgstr ""
#~ "As contributors and maintainers of this project,\n"
#~ "we pledge to respect all people who contribute through reporting issues,\n"
#~ "posting feature requests,\n"
#~ "updating documentation,\n"
#~ "submitting pull requests or patches,\n"
#~ "and other activities."

#~ msgid ""
#~ "We are committed to making participation in this project a harassment-"
#~ "free experience for everyone,\n"
#~ "regardless of level of experience,\n"
#~ "gender,\n"
#~ "gender identity and expression,\n"
#~ "sexual orientation,\n"
#~ "disability,\n"
#~ "personal appearance,\n"
#~ "body size,\n"
#~ "race,\n"
#~ "ethnicity,\n"
#~ "age,\n"
#~ "or religion."
#~ msgstr ""
#~ "We are committed to making participation in this project a harassment-"
#~ "free experience for everyone,\n"
#~ "regardless of level of experience,\n"
#~ "gender,\n"
#~ "gender identity and expression,\n"
#~ "sexual orientation,\n"
#~ "disability,\n"
#~ "personal appearance,\n"
#~ "body size,\n"
#~ "race,\n"
#~ "ethnicity,\n"
#~ "age,\n"
#~ "or religion."

#~ msgid ""
#~ "Examples of unacceptable behavior by participants include the use of "
#~ "sexual language or imagery,\n"
#~ "derogatory comments or personal attacks,\n"
#~ "trolling,\n"
#~ "public or private harassment,\n"
#~ "insults,\n"
#~ "or other unprofessional conduct."
#~ msgstr ""
#~ "Examples of unacceptable behavior by participants include the use of "
#~ "sexual language or imagery,\n"
#~ "derogatory comments or personal attacks,\n"
#~ "trolling,\n"
#~ "public or private harassment,\n"
#~ "insults,\n"
#~ "or other unprofessional conduct."

#~ msgid ""
#~ "Project maintainers have the right and responsibility to remove, edit, or "
#~ "reject\n"
#~ "comments, commits, code, wiki edits, issues, and other contributions\n"
#~ "that are not aligned to our [Code of Conduct][coc].\n"
#~ "Project maintainers who do not follow the Code of Conduct may be removed "
#~ "from the project team."
#~ msgstr ""
#~ "Project maintainers have the right and responsibility to remove, edit, or "
#~ "reject\n"
#~ "comments, commits, code, wiki edits, issues, and other contributions\n"
#~ "that are not aligned to our [Code of Conduct][coc].\n"
#~ "Project maintainers who do not follow the Code of Conduct may be removed "
#~ "from the project team."

# unordered list
#~ msgid "- [Software and Data Carpentry Code of Conduct][coc]"
#~ msgstr "- [Software and Data Carpentry Code of Conduct][coc]"

# unordered list
#~ msgid "- [Code of Conduct Reporting Guide][coc-reporting]"
#~ msgstr "- [Code of Conduct Reporting Guide][coc-reporting]"
