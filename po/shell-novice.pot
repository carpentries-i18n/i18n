# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 19:32:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: shell-novice/404.md:1
# Front Matter
msgid "---\n"
"layout: base\n"
"root: .\n"
"permalink: 404.html\n"
"title: \"Page not found\"\n"
"---"
msgstr ""

#: shell-novice/404.md:8
# header
msgid "# Oops! We cannot find that page."
msgstr ""

#: shell-novice/404.md:9
msgid "{: style=\"text-align: center;\"}"
msgstr ""

#: shell-novice/404.md:11
# blockquote, which can be cascaded
msgid "> ## Our apologies!"
msgstr ""

#: shell-novice/404.md:12
msgid ">\n"
"> We cannot seem to find the page you are looking for.\n"
"> Try going back to the <a href=\"javascript:history.back()\">previous page</a> or\n"
"> navigate to any other page using the navigation bar above\n"
"> {%- if site.kind == \"lesson\" -%} or the schedule below {%- endif -%}.\n"
"> If you got here by clicking on a link in the\n"
"> {%- if site.kind == \"lesson\" -%} lesson {%- else -%} workshop {%- endif -%},\n"
"> please report this link to the\n"
"> {%- if site.kind == \"lesson\" -%} lesson developers {%- else -%} workshop organizers {%- endif -%}."
msgstr ""

#: shell-novice/404.md:21
# SC/DC Template label
msgid "{: .caution}"
msgstr ""

#: shell-novice/404.md:23
msgid "{% if site.kind == \"lesson\" %}\n"
"  {% include syllabus.html %}\n"
"{% endif%}"
msgstr ""

#: shell-novice/CODE_OF_CONDUCT.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"---"
msgstr ""

#: shell-novice/CODE_OF_CONDUCT.md:5
msgid "As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""

#: shell-novice/CODE_OF_CONDUCT.md:8
msgid "Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""

#: shell-novice/CODE_OF_CONDUCT.md:11
msgid "[coc]: https://docs.carpentries.org/topic_folders/policies/code-of-conduct.html\n"
"[coc-reporting]: https://docs.carpentries.org/topic_folders/policies/incident-reporting.html"
msgstr ""

#: shell-novice/CONTRIBUTING.md:1
# header
msgid "# Contributing"
msgstr ""

#: shell-novice/CONTRIBUTING.md:3
msgid "[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""

#: shell-novice/CONTRIBUTING.md:10
# header
msgid "## Contributor Agreement"
msgstr ""

#: shell-novice/CONTRIBUTING.md:12
msgid "By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CONDUCT.md)."
msgstr ""

#: shell-novice/CONTRIBUTING.md:20
# header
msgid "## How to Contribute"
msgstr ""

#: shell-novice/CONTRIBUTING.md:22
msgid "The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""

#: shell-novice/CONTRIBUTING.md:29
# ordered list
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:30
msgid "    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""

#: shell-novice/CONTRIBUTING.md:34
# ordered list
msgid "2.  If you have a [GitHub][github] account,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:35
msgid "    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue][issues].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""

#: shell-novice/CONTRIBUTING.md:41
# ordered list
msgid "3.  If you are comfortable with Git,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:42
msgid "    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""

#: shell-novice/CONTRIBUTING.md:46
# header
msgid "## Where to Contribute"
msgstr ""

#: shell-novice/CONTRIBUTING.md:48
# ordered list
msgid "1.  If you wish to change this lesson,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:49
msgid "    please work in <https://github.com/swcarpentry/shell-novice>,\n"
"    which can be viewed at <https://swcarpentry.github.io/shell-novice>."
msgstr ""

#: shell-novice/CONTRIBUTING.md:52
# ordered list
msgid "2.  If you wish to change the example lesson,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:53
msgid "    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""

#: shell-novice/CONTRIBUTING.md:57
# ordered list
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:58
msgid "    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-template>\n"
"    provide more background on our design choices."
msgstr ""

#: shell-novice/CONTRIBUTING.md:63
# ordered list
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""

#: shell-novice/CONTRIBUTING.md:64
msgid "    or HTML boilerplate for lessons or workshops stored in `_includes` or `_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""

#: shell-novice/CONTRIBUTING.md:67
# header
msgid "## What to Contribute"
msgstr ""

#: shell-novice/CONTRIBUTING.md:69
msgid "There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""

#: shell-novice/CONTRIBUTING.md:79
msgid "Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""

#: shell-novice/CONTRIBUTING.md:86
# header
msgid "## What *Not* to Contribute"
msgstr ""

#: shell-novice/CONTRIBUTING.md:88
msgid "Our lessons already contain more material than we can cover in a typical workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""

#: shell-novice/CONTRIBUTING.md:97
msgid "We are also not looking for exercises or other material that only run on one platform.\n"
"Our workshops typically contain a mixture of Windows, macOS, and Linux users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""

#: shell-novice/CONTRIBUTING.md:102
# header
msgid "## Using GitHub"
msgstr ""

#: shell-novice/CONTRIBUTING.md:104
msgid "If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""

#: shell-novice/CONTRIBUTING.md:109
# ordered list
msgid "1.  The published copy of the lesson is in the `gh-pages` branch of the repository"
msgstr ""

#: shell-novice/CONTRIBUTING.md:110
msgid "    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your `gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""

#: shell-novice/CONTRIBUTING.md:117
# ordered list
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""

#: shell-novice/CONTRIBUTING.md:118
msgid "    1.  Create a new branch in your desktop copy of this repository for each significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository][repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""

#: shell-novice/CONTRIBUTING.md:126
msgid "Each lesson has two maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""

#: shell-novice/CONTRIBUTING.md:131
# header
msgid "## Other Resources"
msgstr ""

#: shell-novice/CONTRIBUTING.md:133
msgid "General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""

#: shell-novice/CONTRIBUTING.md:138
msgid "[contact]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: https://carpentries.topicbox.com/groups/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://github.com/swcarpentry/shell-novice/issues/\n"
"[repo]: https://github.com/swcarpentry/shell-novice/\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"
msgstr ""

#: shell-novice/LICENSE.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"root: .\n"
"---"
msgstr ""

#: shell-novice/LICENSE.md:6
# header
msgid "## Instructional Material"
msgstr ""

#: shell-novice/LICENSE.md:8
msgid "All Software Carpentry, Data Carpentry, and Library Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""

#: shell-novice/LICENSE.md:14
msgid "You are free:"
msgstr ""

#: shell-novice/LICENSE.md:16
# unordered list
msgid "* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""

#: shell-novice/LICENSE.md:17
# unordered list
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""

#: shell-novice/LICENSE.md:19
msgid "for any purpose, even commercially."
msgstr ""

#: shell-novice/LICENSE.md:21
msgid "The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""

#: shell-novice/LICENSE.md:24
msgid "Under the following terms:"
msgstr ""

#: shell-novice/LICENSE.md:26
# unordered list
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""

#: shell-novice/LICENSE.md:27
msgid "  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""

#: shell-novice/LICENSE.md:34
msgid "**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""

#: shell-novice/LICENSE.md:38
msgid "Notices:"
msgstr ""

#: shell-novice/LICENSE.md:40
# unordered list
msgid "* You do not have to comply with the license for elements of the"
msgstr ""

#: shell-novice/LICENSE.md:41
msgid "  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""

#: shell-novice/LICENSE.md:48
# header
msgid "## Software"
msgstr ""

#: shell-novice/LICENSE.md:50
msgid "Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""

#: shell-novice/LICENSE.md:55
msgid "Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""

#: shell-novice/LICENSE.md:63
msgid "The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""

#: shell-novice/LICENSE.md:66
msgid "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""

#: shell-novice/LICENSE.md:74
# header
msgid "## Trademark"
msgstr ""

#: shell-novice/LICENSE.md:76
msgid "\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""

#: shell-novice/LICENSE.md:79
msgid "[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""

#: shell-novice/README.md:1
msgid "[![Create a Slack Account with us][create_slack_svg]][slack_invite]\n"
"[![Slack Status][slack_status_svg]][slack_status]\n"
"[![DOI][doi_svg]][doi]"
msgstr ""

#: shell-novice/README.md:5
msgid "shell-novice\n"
"============"
msgstr ""

#: shell-novice/README.md:8
msgid "An introduction to the Unix shell for people who have never used the command line before.\n"
"Please see <https://swcarpentry.github.io/shell-novice/> for a rendered version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""

#: shell-novice/README.md:14
# header
msgid "## Maintainers"
msgstr ""

#: shell-novice/README.md:16
# unordered list
msgid "* [Gerard Capes][gerard_capes]"
msgstr ""

#: shell-novice/README.md:17
# unordered list
msgid "* [Jacob Deppen][jacob_deppen]"
msgstr ""

#: shell-novice/README.md:18
# unordered list
msgid "* [Benson Muite][benson_muite]"
msgstr ""

#: shell-novice/README.md:20
# header
msgid "## Contributing"
msgstr ""

#: shell-novice/README.md:22
msgid "If you would like to contribute to the development of the lesson, you can find details in our\n"
"[CONTRIBUTING guide](https://github.com/swcarpentry/shell-novice/blob/gh-pages/CONTRIBUTING.md).\n"
"Contributions can come in many different forms: typo and formatting fixes, additions or subtractions\n"
"of content, suggestions, clarifications, and more."
msgstr ""

#: shell-novice/README.md:27
msgid "[gerard_capes]: https://carpentries.org/instructors/#capes_gerard\n"
"[jacob_deppen]: https://deppen8.github.io/\n"
"[benson_muite]: https://carpentries.org/instructors/#benson_muite\n"
"[lesson-example]: https://carpentries.github.io/lesson-example/\n"
"[create_slack_svg]: https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg\n"
"[slack_invite]: https://swc-slack-invite.herokuapp.com/\n"
"[slack_status]: https://swcarpentry.slack.com/messages/C9X3XTHJ8\n"
"[slack_status_svg]: https://img.shields.io/badge/Slack_Channel-swc--shell-E01563.svg\n"
"[doi]: https://doi.org/10.5281/zenodo.3266823\n"
"[doi_svg]: https://zenodo.org/badge/DOI/10.5281/zenodo.3266823.svg"
msgstr ""

#: shell-novice/_episodes/01-intro.md:1
# Front Matter
msgid "---\n"
"title: \"Introducing the Shell\"\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"What is a command shell and why would I use one?\"\n"
"objectives:\n"
"- \"Explain how the shell relates to the keyboard, the screen, the operating system, and users' programs.\"\n"
"- \"Explain when and why command-line interfaces should be used instead of graphical interfaces.\"\n"
"keypoints:\n"
"- \"A shell is a program whose primary purpose is to read commands and run other programs.\"\n"
"-  \"This lesson uses Bash, the default shell in many implementations of Unix.\"\n"
"-  \"Programs can be run in Bash by entering commands at the command-line prompt.\"\n"
"- \"The shell's main advantages are its high action-to-keystroke ratio, its support for\n"
"automating repetitive tasks, and its capacity to access networked machines.\"\n"
"- \"The shell's main disadvantages are its primarily textual nature and how\n"
"cryptic its commands and operation can be.\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/01-intro.md:19
# header
msgid "### Background"
msgstr ""

#: shell-novice/_episodes/01-intro.md:21
msgid "Humans and computers commonly interact in many different ways, such as through a keyboard and mouse,\n"
"touch screen interfaces, or using speech recognition systems.\n"
"The most widely used way to interact with personal computers is called a\n"
"**graphical user interface** (GUI).\n"
"With a GUI, we give instructions by clicking a mouse and using menu-driven interactions."
msgstr ""

#: shell-novice/_episodes/01-intro.md:27
msgid "While the visual aid of a GUI makes it intuitive to learn,\n"
"this way of delivering instructions to a computer scales very poorly.\n"
"Imagine the following task:\n"
"for a literature search, you have to copy the third line of one thousand text files in one thousand\n"
"different directories and paste it into a single file.\n"
"Using a GUI, you would not only be clicking at your desk for several hours,\n"
"but you could potentially also commit an error in the process of completing this repetitive task.\n"
"This is where we take advantage of the Unix shell.\n"
"The Unix shell is both a **command-line interface** (CLI) and a scripting language,\n"
"allowing such repetitive tasks to be done automatically and fast.\n"
"With the proper commands, the shell can repeat tasks with or without some modification\n"
"as many times as we want.\n"
"Using the shell, the task in the literature example can be accomplished in seconds."
msgstr ""

#: shell-novice/_episodes/01-intro.md:42
# header
msgid "### The Shell"
msgstr ""

#: shell-novice/_episodes/01-intro.md:45
msgid "The shell is a program where users can type commands.\n"
"With the shell, it's possible to invoke complicated programs like climate modeling software\n"
"or simple commands that create an empty directory with only one line of code.\n"
"The most popular Unix shell is Bash (the Bourne Again SHell ---\n"
"so-called because it's derived from a shell written by Stephen Bourne).\n"
"Bash is the default shell on most modern implementations of Unix and in most packages that provide\n"
"Unix-like tools for Windows."
msgstr ""

#: shell-novice/_episodes/01-intro.md:53
msgid "Using the shell will take some effort and some time to learn.\n"
"While a GUI presents you with choices to select, CLI choices are not automatically presented to you,\n"
"so you must learn a few commands like new vocabulary in a language you're studying.\n"
"However, unlike a spoken language, a small number of \"words\" (i.e. commands) gets you a long way,\n"
"and we'll cover those essential few today."
msgstr ""

#: shell-novice/_episodes/01-intro.md:59
msgid "The grammar of a shell allows you to combine existing tools into powerful\n"
"pipelines and handle large volumes of data automatically. Sequences of\n"
"commands can be written into a *script*, improving the reproducibility of\n"
"workflows."
msgstr ""

#: shell-novice/_episodes/01-intro.md:64
msgid "In addition, the command line is often the easiest way to interact with remote machines\n"
"and supercomputers.\n"
"Familiarity with the shell is near essential to run a variety of specialized tools and resources\n"
"including high-performance computing systems.\n"
"As clusters and cloud computing systems become more popular for scientific data crunching,\n"
"being able to interact with the shell is becoming a necessary skill.\n"
"We can build on the command-line skills covered here\n"
"to tackle a wide range of scientific questions and computational challenges."
msgstr ""

#: shell-novice/_episodes/01-intro.md:73
msgid "Let's get started."
msgstr ""

#: shell-novice/_episodes/01-intro.md:75
msgid "When the shell is first opened, you are presented with a **prompt**,\n"
"indicating that the shell is waiting for input."
msgstr ""

#: shell-novice/_episodes/01-intro.md:78
#: shell-novice/_episodes/03-create.md:376
# code block
msgid "~~~\n"
"$\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/01-intro.md:81
#: shell-novice/_episodes/01-intro.md:101
#: shell-novice/_episodes/02-filedir.md:50
#: shell-novice/_episodes/02-filedir.md:137
#: shell-novice/_episodes/02-filedir.md:163
#: shell-novice/_episodes/02-filedir.md:212
#: shell-novice/_episodes/02-filedir.md:342
#: shell-novice/_episodes/02-filedir.md:376
#: shell-novice/_episodes/02-filedir.md:404
#: shell-novice/_episodes/02-filedir.md:420
#: shell-novice/_episodes/02-filedir.md:430
#: shell-novice/_episodes/02-filedir.md:444
#: shell-novice/_episodes/02-filedir.md:464
#: shell-novice/_episodes/02-filedir.md:476
#: shell-novice/_episodes/02-filedir.md:489
#: shell-novice/_episodes/02-filedir.md:528
#: shell-novice/_episodes/02-filedir.md:535
#: shell-novice/_episodes/02-filedir.md:552
#: shell-novice/_episodes/02-filedir.md:579
#: shell-novice/_episodes/02-filedir.md:589
#: shell-novice/_episodes/02-filedir.md:729
#: shell-novice/_episodes/02-filedir.md:757
#: shell-novice/_episodes/02-filedir.md:772
#: shell-novice/_episodes/02-filedir.md:786
#: shell-novice/_episodes/02-filedir.md:824
#: shell-novice/_episodes/02-filedir.md:833
#: shell-novice/_episodes/02-filedir.md:841
#: shell-novice/_episodes/02-filedir.md:854
#: shell-novice/_episodes/03-create.md:38
#: shell-novice/_episodes/03-create.md:54
#: shell-novice/_episodes/03-create.md:69
#: shell-novice/_episodes/03-create.md:80
#: shell-novice/_episodes/03-create.md:92
#: shell-novice/_episodes/03-create.md:101
#: shell-novice/_episodes/03-create.md:110
#: shell-novice/_episodes/03-create.md:168
#: shell-novice/_episodes/03-create.md:232
#: shell-novice/_episodes/03-create.md:317
#: shell-novice/_episodes/03-create.md:327
#: shell-novice/_episodes/03-create.md:340
#: shell-novice/_episodes/03-create.md:366
#: shell-novice/_episodes/03-create.md:374
#: shell-novice/_episodes/03-create.md:387
#: shell-novice/_episodes/03-create.md:401
#: shell-novice/_episodes/03-create.md:452
#: shell-novice/_episodes/03-create.md:466
#: shell-novice/_episodes/03-create.md:473
#: shell-novice/_episodes/03-create.md:571
#: shell-novice/_episodes/03-create.md:578
#: shell-novice/_episodes/03-create.md:622
#: shell-novice/_episodes/03-create.md:637
#: shell-novice/_episodes/04-pipefilter.md:35
#: shell-novice/_episodes/04-pipefilter.md:48
#: shell-novice/_episodes/04-pipefilter.md:64
#: shell-novice/_episodes/04-pipefilter.md:85
#: shell-novice/_episodes/04-pipefilter.md:134
#: shell-novice/_episodes/04-pipefilter.md:148
#: shell-novice/_episodes/04-pipefilter.md:164
#: shell-novice/_episodes/04-pipefilter.md:244
#: shell-novice/_episodes/04-pipefilter.md:268
#: shell-novice/_episodes/04-pipefilter.md:382
#: shell-novice/_episodes/04-pipefilter.md:407
#: shell-novice/_episodes/04-pipefilter.md:425
#: shell-novice/_episodes/04-pipefilter.md:614
#: shell-novice/_episodes/04-pipefilter.md:634
#: shell-novice/_episodes/04-pipefilter.md:656
#: shell-novice/_episodes/04-pipefilter.md:676
#: shell-novice/_episodes/05-loop.md:44
#: shell-novice/_episodes/05-loop.md:58
#: shell-novice/_episodes/05-loop.md:68
#: shell-novice/_episodes/05-loop.md:144
#: shell-novice/_episodes/05-loop.md:154
#: shell-novice/_episodes/05-loop.md:384
#: shell-novice/_episodes/05-loop.md:395
#: shell-novice/_episodes/05-loop.md:416
#: shell-novice/_episodes/05-loop.md:486
#: shell-novice/_episodes/05-loop.md:493
#: shell-novice/_episodes/05-loop.md:524
#: shell-novice/_episodes/05-loop.md:531
#: shell-novice/_episodes/05-loop.md:538
#: shell-novice/_episodes/05-loop.md:581
#: shell-novice/_episodes/05-loop.md:604
#: shell-novice/_episodes/05-loop.md:631
#: shell-novice/_episodes/05-loop.md:639
#: shell-novice/_episodes/05-loop.md:654
#: shell-novice/_episodes/06-script.md:43
#: shell-novice/_episodes/06-script.md:71
#: shell-novice/_episodes/06-script.md:107
#: shell-novice/_episodes/06-script.md:123
#: shell-novice/_episodes/06-script.md:139
#: shell-novice/_episodes/06-script.md:170
#: shell-novice/_episodes/06-script.md:182
#: shell-novice/_episodes/06-script.md:199
#: shell-novice/_episodes/06-script.md:217
#: shell-novice/_episodes/06-script.md:239
#: shell-novice/_episodes/06-script.md:262
#: shell-novice/_episodes/06-script.md:274
#: shell-novice/_episodes/06-script.md:348
#: shell-novice/_episodes/06-script.md:412
#: shell-novice/_episodes/06-script.md:424
#: shell-novice/_episodes/06-script.md:432
#: shell-novice/_episodes/06-script.md:439
#: shell-novice/_episodes/06-script.md:456
#: shell-novice/_episodes/07-find.md:46
#: shell-novice/_episodes/07-find.md:68
#: shell-novice/_episodes/07-find.md:93
#: shell-novice/_episodes/07-find.md:114
#: shell-novice/_episodes/07-find.md:130
#: shell-novice/_episodes/07-find.md:148
#: shell-novice/_episodes/07-find.md:167
#: shell-novice/_episodes/07-find.md:180
#: shell-novice/_episodes/07-find.md:195
#: shell-novice/_episodes/07-find.md:219
#: shell-novice/_episodes/07-find.md:234
#: shell-novice/_episodes/07-find.md:467
#: shell-novice/_episodes/07-find.md:507
#: shell-novice/_episodes/07-find.md:525
#: shell-novice/_episodes/07-find.md:549
#: shell-novice/_episodes/07-find.md:565
#: shell-novice/_episodes/07-find.md:578
#: shell-novice/_episodes/07-find.md:608
#: shell-novice/_episodes/07-find.md:627
#: shell-novice/_episodes/07-find.md:642
msgid "{: .language-bash}"
msgstr ""

#: shell-novice/_episodes/01-intro.md:83
msgid "The shell typically uses `$ ` as the prompt, but may use a different symbol.\n"
"In the examples for this lesson, we'll show the prompt as `$ `.\n"
"Most importantly:\n"
"when typing commands, either from these lessons or from other sources,\n"
"*do not type the prompt*, only the commands that follow it.\n"
"Also note that after you type a command, you have to press the <kbd>Enter</kbd> key to execute it."
msgstr ""

#: shell-novice/_episodes/01-intro.md:90
msgid "The prompt is followed by a **text cursor**, a character that indicates the position where your\n"
"typing will appear.\n"
"The cursor is usually a flashing or solid block, but it can also be an underscore or a pipe.\n"
"You may have seen it in a text editor program, for example."
msgstr ""

#: shell-novice/_episodes/01-intro.md:95
msgid "So let's try our first command, `ls` which is short for listing.\n"
"This command will list the contents of the current directory:"
msgstr ""

#: shell-novice/_episodes/01-intro.md:98
#: shell-novice/_episodes/02-filedir.md:134
#: shell-novice/_episodes/03-create.md:229
#: shell-novice/_episodes/04-pipefilter.md:32
# code block
msgid "~~~\n"
"$ ls\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/01-intro.md:103
# code block
msgid "~~~\n"
"Desktop     Downloads   Movies      Pictures\n"
"Documents   Library     Music       Public\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/01-intro.md:107
#: shell-novice/_episodes/02-filedir.md:55
#: shell-novice/_episodes/02-filedir.md:143
#: shell-novice/_episodes/02-filedir.md:169
#: shell-novice/_episodes/02-filedir.md:241
#: shell-novice/_episodes/02-filedir.md:347
#: shell-novice/_episodes/02-filedir.md:381
#: shell-novice/_episodes/02-filedir.md:425
#: shell-novice/_episodes/02-filedir.md:435
#: shell-novice/_episodes/02-filedir.md:481
#: shell-novice/_episodes/02-filedir.md:494
#: shell-novice/_episodes/02-filedir.md:540
#: shell-novice/_episodes/02-filedir.md:584
#: shell-novice/_episodes/02-filedir.md:763
#: shell-novice/_episodes/02-filedir.md:777
#: shell-novice/_episodes/02-filedir.md:793
#: shell-novice/_episodes/03-create.md:43
#: shell-novice/_episodes/03-create.md:59
#: shell-novice/_episodes/03-create.md:85
#: shell-novice/_episodes/03-create.md:120
#: shell-novice/_episodes/03-create.md:237
#: shell-novice/_episodes/03-create.md:345
#: shell-novice/_episodes/03-create.md:379
#: shell-novice/_episodes/03-create.md:406
#: shell-novice/_episodes/03-create.md:457
#: shell-novice/_episodes/03-create.md:482
#: shell-novice/_episodes/04-pipefilter.md:41
#: shell-novice/_episodes/04-pipefilter.md:53
#: shell-novice/_episodes/04-pipefilter.md:75
#: shell-novice/_episodes/04-pipefilter.md:96
#: shell-novice/_episodes/04-pipefilter.md:153
#: shell-novice/_episodes/04-pipefilter.md:175
#: shell-novice/_episodes/04-pipefilter.md:255
#: shell-novice/_episodes/04-pipefilter.md:273
#: shell-novice/_episodes/04-pipefilter.md:387
#: shell-novice/_episodes/04-pipefilter.md:418
#: shell-novice/_episodes/04-pipefilter.md:430
#: shell-novice/_episodes/04-pipefilter.md:627
#: shell-novice/_episodes/04-pipefilter.md:643
#: shell-novice/_episodes/04-pipefilter.md:665
#: shell-novice/_episodes/04-pipefilter.md:681
#: shell-novice/_episodes/05-loop.md:75
#: shell-novice/_episodes/05-loop.md:402
#: shell-novice/_episodes/05-loop.md:591
#: shell-novice/_episodes/05-loop.md:614
#: shell-novice/_episodes/05-loop.md:671
#: shell-novice/_episodes/06-script.md:80
#: shell-novice/_episodes/06-script.md:132
#: shell-novice/_episodes/06-script.md:148
#: shell-novice/_episodes/06-script.md:191
#: shell-novice/_episodes/06-script.md:208
#: shell-novice/_episodes/06-script.md:288
#: shell-novice/_episodes/07-find.md:61
#: shell-novice/_episodes/07-find.md:75
#: shell-novice/_episodes/07-find.md:99
#: shell-novice/_episodes/07-find.md:119
#: shell-novice/_episodes/07-find.md:135
#: shell-novice/_episodes/07-find.md:155
#: shell-novice/_episodes/07-find.md:173
#: shell-novice/_episodes/07-find.md:187
#: shell-novice/_episodes/07-find.md:208
#: shell-novice/_episodes/07-find.md:227
#: shell-novice/_episodes/07-find.md:257
#: shell-novice/_episodes/07-find.md:455
#: shell-novice/_episodes/07-find.md:489
#: shell-novice/_episodes/07-find.md:516
#: shell-novice/_episodes/07-find.md:542
#: shell-novice/_episodes/07-find.md:554
#: shell-novice/_episodes/07-find.md:585
#: shell-novice/_episodes/07-find.md:616
#: shell-novice/_episodes/07-find.md:648
# SC/DC Template label
msgid "{: .output}"
msgstr ""

#: shell-novice/_episodes/01-intro.md:109
# blockquote, which can be cascaded
msgid "> ## Command not found"
msgstr ""

#: shell-novice/_episodes/01-intro.md:110
# blockquote, which can be cascaded
msgid "> If the shell can't find a program whose name is the command you typed, it"
msgstr ""

#: shell-novice/_episodes/01-intro.md:111
# blockquote, which can be cascaded
msgid "> will print an error message such as:"
msgstr ""

#: shell-novice/_episodes/01-intro.md:112
msgid ">\n"
"> ~~~\n"
"> $ ks\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> ks: command not found\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/01-intro.md:120
#: shell-novice/_episodes/02-filedir.md:698
#: shell-novice/_episodes/03-create.md:522
#: shell-novice/_episodes/03-create.md:530
#: shell-novice/_episodes/03-create.md:671
#: shell-novice/_episodes/03-create.md:867
#: shell-novice/_episodes/03-create.md:880
#: shell-novice/_episodes/03-create.md:888
#: shell-novice/_episodes/03-create.md:918
#: shell-novice/_episodes/04-pipefilter.md:216
#: shell-novice/_episodes/04-pipefilter.md:227
#: shell-novice/_episodes/04-pipefilter.md:312
#: shell-novice/_episodes/04-pipefilter.md:556
#: shell-novice/_episodes/04-pipefilter.md:582
#: shell-novice/_episodes/05-loop.md:207
#: shell-novice/_episodes/05-loop.md:475
#: shell-novice/_episodes/05-loop.md:702
#: shell-novice/_episodes/07-find.md:266
#: shell-novice/_episodes/07-find.md:299
# SC/DC Template label
msgid "> {: .output}"
msgstr ""

#: shell-novice/_episodes/01-intro.md:121
msgid ">\n"
"> This might happen if the command was mis-typed or if the program corresponding to that command\n"
"> is not installed."
msgstr ""

#: shell-novice/_episodes/01-intro.md:124
#: shell-novice/_episodes/02-filedir.md:76
#: shell-novice/_episodes/02-filedir.md:114
#: shell-novice/_episodes/02-filedir.md:181
#: shell-novice/_episodes/02-filedir.md:257
#: shell-novice/_episodes/02-filedir.md:292
#: shell-novice/_episodes/02-filedir.md:518
#: shell-novice/_episodes/02-filedir.md:631
#: shell-novice/_episodes/03-create.md:128
#: shell-novice/_episodes/03-create.md:158
#: shell-novice/_episodes/03-create.md:192
#: shell-novice/_episodes/03-create.md:224
#: shell-novice/_episodes/03-create.md:309
#: shell-novice/_episodes/03-create.md:594
#: shell-novice/_episodes/03-create.md:722
#: shell-novice/_episodes/04-pipefilter.md:121
#: shell-novice/_episodes/04-pipefilter.md:186
#: shell-novice/_episodes/04-pipefilter.md:296
#: shell-novice/_episodes/05-loop.md:84
#: shell-novice/_episodes/05-loop.md:126
#: shell-novice/_episodes/05-loop.md:476
#: shell-novice/_episodes/05-loop.md:660
#: shell-novice/_episodes/05-loop.md:706
#: shell-novice/_episodes/05-loop.md:724
#: shell-novice/_episodes/06-script.md:96
#: shell-novice/_episodes/06-script.md:155
#: shell-novice/_episodes/07-find.md:307
#: shell-novice/_episodes/07-find.md:593
#: shell-novice/_episodes/07-find.md:698
#: shell-novice/setup.md:41
# SC/DC Template label
msgid "{: .callout}"
msgstr ""

#: shell-novice/_episodes/01-intro.md:127
# header
msgid "## Nelle's Pipeline: A Typical Problem"
msgstr ""

#: shell-novice/_episodes/01-intro.md:129
msgid "Nelle Nemo, a marine biologist,\n"
"has just returned from a six-month survey of the\n"
"[North Pacific Gyre](http://en.wikipedia.org/wiki/North_Pacific_Gyre),\n"
"where she has been sampling gelatinous marine life in the\n"
"[Great Pacific Garbage Patch](http://en.wikipedia.org/wiki/Great_Pacific_Garbage_Patch).\n"
"She has 1520 samples that she's run through an assay machine to measure the relative abundance\n"
"of 300 proteins.\n"
"She needs to run these 1520 files through an imaginary program called `goostats.sh` she inherited.\n"
"On top of this huge task, she has to write up results by the end of the month so her paper\n"
"can appear in a special issue of *Aquatic Goo Letters*."
msgstr ""

#: shell-novice/_episodes/01-intro.md:140
msgid "The bad news is that if she has to run `goostats.sh` by hand using a GUI,\n"
"she'll have to select and open a file 1520 times.\n"
"If `goostats.sh` takes 30 seconds to run each file, the whole process will take more than 12 hours\n"
"of Nelle's attention.\n"
"With the shell, Nelle can instead assign her computer this mundane task while she focuses\n"
"her attention on writing her paper."
msgstr ""

#: shell-novice/_episodes/01-intro.md:147
msgid "The next few lessons will explore the ways Nelle can achieve this.\n"
"More specifically,\n"
"they explain how she can use a command shell to run the `goostats.sh` program,\n"
"using loops to automate the repetitive steps of entering file names,\n"
"so that her computer can work while she writes her paper."
msgstr ""

#: shell-novice/_episodes/01-intro.md:153
msgid "As a bonus,\n"
"once she has put a processing pipeline together,\n"
"she will be able to use it again whenever she collects more data."
msgstr ""

#: shell-novice/_episodes/01-intro.md:157
msgid "In order to achieve her task, Nelle needs to know how to:\n"
"- navigate to a file/directory\n"
"- create a file/directory\n"
"- check the length of a file\n"
"- chain commands together\n"
"- retrieve a set of files\n"
"- iterate over files\n"
"- run a shell script containing her pipeline"
msgstr ""

#: shell-novice/_episodes/01-intro.md:166
#: shell-novice/_episodes/02-filedir.md:868
#: shell-novice/_episodes/03-create.md:974
#: shell-novice/_episodes/04-pipefilter.md:718
#: shell-novice/_episodes/05-loop.md:808
#: shell-novice/_episodes/06-script.md:649
#: shell-novice/_episodes/07-find.md:728
msgid "{% include links.md %}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:1
# Front Matter
msgid "---\n"
"title: \"Navigating Files and Directories\"\n"
"teaching: 30\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I move around on my computer?\"\n"
"- \"How can I see what files and directories I have?\"\n"
"- \"How can I specify the location of a file or directory on my computer?\"\n"
"objectives:\n"
"- \"Explain the similarities and differences between a file and a directory.\"\n"
"- \"Translate an absolute path into a relative path and vice versa.\"\n"
"- \"Construct absolute and relative paths that identify specific files and directories.\"\n"
"- \"Use options and arguments to change the behaviour of a shell command.\"\n"
"- \"Demonstrate the use of tab completion and explain its advantages.\"\n"
"keypoints:\n"
"- \"The file system is responsible for managing information on the disk.\"\n"
"- \"Information is stored in files, which are stored in directories (folders).\"\n"
"- \"Directories can also store other directories, which then form a directory tree.\"\n"
"- \"`pwd` prints the user's current working directory.\"\n"
"- \"`ls [path]` prints a listing of a specific file or directory; `ls` on its own lists the current working directory.\"\n"
"- \"`cd [path]` changes the current working directory.\"\n"
"- \"Most commands take options that begin with a single `-`.\"\n"
"- \"Directory names in a path are separated with `/` on Unix, but `\\\\` on Windows.\"\n"
"- \"`/` on its own is the root directory of the whole file system.\"\n"
"- \"An absolute path specifies a location from the root of the file system.\"\n"
"- \"A relative path specifies a location starting from the current location.\"\n"
"- \"`.` on its own means 'the current directory'; `..` means 'the directory above the current one'.\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:30
msgid "The part of the operating system responsible for managing files and directories\n"
"is called the **file system**.\n"
"It organizes our data into files,\n"
"which hold information,\n"
"and directories (also called 'folders'),\n"
"which hold files or other directories."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:37
msgid "Several commands are frequently used to create, inspect, rename, and delete files and directories.\n"
"To start exploring them, we'll go to our open shell window."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:40
msgid "First, let's find out where we are by running a command called `pwd`\n"
"(which stands for 'print working directory'). Directories are like *places* — at any time\n"
"while we are using the shell, we are in exactly one place called\n"
"our **current working directory**. Commands mostly read and write files in the\n"
"current working directory, i.e. 'here', so knowing where you are before running\n"
"a command is important. `pwd` shows you where you are:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:47
#: shell-novice/_episodes/02-filedir.md:417
#: shell-novice/_episodes/02-filedir.md:473
#: shell-novice/_episodes/02-filedir.md:532
#: shell-novice/_episodes/02-filedir.md:576
#: shell-novice/_episodes/03-create.md:35
# code block
msgid "~~~\n"
"$ pwd\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:52
#: shell-novice/_episodes/02-filedir.md:537
# code block
msgid "~~~\n"
"/Users/nelle\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:57
msgid "Here,\n"
"the computer's response is `/Users/nelle`,\n"
"which is Nelle's **home directory**:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:61
# blockquote, which can be cascaded
msgid "> ## Home Directory Variation"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:62
msgid ">\n"
"> The home directory path will look different on different operating systems.\n"
"> On Linux, it may look like `/home/nelle`,\n"
"> and on Windows, it will be similar to `C:\\Documents and Settings\\nelle` or\n"
"> `C:\\Users\\nelle`.\n"
"> (Note that it may look slightly different for different versions of Windows.)\n"
"> In future examples, we've used Mac output as the default - Linux and Windows\n"
"> output may differ slightly but should be generally similar.\n"
">\n"
"> We will also assume that your `pwd` command returns your user's home directory.\n"
"> If `pwd` returns something different, you may need to navigate there using `cd`\n"
"> or some commands in this lesson will not work as written.\n"
"> See [Exploring Other Directories](#exploring-other-directories) for more details\n"
"> on the `cd` command."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:78
msgid "To understand what a 'home directory' is,\n"
"let's have a look at how the file system as a whole is organized.  For the\n"
"sake of this example, we'll be\n"
"illustrating the filesystem on our scientist Nelle's computer.  After this\n"
"illustration, you'll be learning commands to explore your own filesystem,\n"
"which will be constructed in a similar way, but not be exactly identical."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:85
msgid "On Nelle's computer, the filesystem looks like this:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:87
msgid "![The file system is made up of a root directory that contains sub-directories\n"
"titled bin, data, users, and tmp](../fig/filesystem.svg)"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:90
msgid "At the top is the **root directory**\n"
"that holds everything else.\n"
"We refer to it using a slash character, `/`, on its own;\n"
"this character is the leading slash in `/Users/nelle`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:95
msgid "Inside that directory are several other directories:\n"
"`bin` (which is where some built-in programs are stored),\n"
"`data` (for miscellaneous data files),\n"
"`Users` (where users' personal directories are located),\n"
"`tmp` (for temporary files that don't need to be stored long-term),\n"
"and so on."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:102
msgid "We know that our current working directory `/Users/nelle` is stored inside `/Users`\n"
"because `/Users` is the first part of its name.\n"
"Similarly,\n"
"we know that `/Users` is stored inside the root directory `/`\n"
"because its name begins with `/`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:108
# blockquote, which can be cascaded
msgid "> ## Slashes"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:109
msgid ">\n"
"> Notice that there are two meanings for the `/` character.\n"
"> When it appears at the front of a file or directory name,\n"
"> it refers to the root directory. When it appears *inside* a path,\n"
"> it's just a separator."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:116
msgid "Underneath `/Users`,\n"
"we find one directory for each user with an account on Nelle's machine,\n"
"her colleagues *imhotep* and *larry*."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:120
msgid "![Like other directories, home directories are sub-directories underneath\n"
"\"/Users\" like \"/Users/imhotep\", \"/Users/larry\" or\n"
"\"/Users/nelle\"](../fig/home-directories.svg)"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:124
msgid "The user *imhotep*'s files are stored in `/Users/imhotep`,\n"
"user *larry*'s in `/Users/larry`,\n"
"and Nelle's in `/Users/nelle`. Nelle is the user in our\n"
"examples here, therefore we get `/Users/nelle` as our home directory.\n"
"Typically, when you open a new command prompt, you will be in\n"
"your home directory to start."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:131
msgid "Now let's learn the command that will let us see the contents of our\n"
"own filesystem.  We can see what's in our home directory by running `ls`:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:139
# code block
msgid "~~~\n"
"Applications Documents    Library      Music        Public\n"
"Desktop      Downloads    Movies       Pictures\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:145
msgid "(Again, your results may be slightly different depending on your operating\n"
"system and how you have customized your filesystem.)"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:148
msgid "`ls` prints the names of the files and directories in the current directory.\n"
"We can make its output more comprehensible by using the `-F` **option**\n"
"which tells `ls` to classify the output\n"
"by adding a marker to file and directory names to indicate what they are:\n"
"- a trailing `/` indicates that this is a directory\n"
"- `@` indicates a link\n"
"- `*` indicates an executable"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:156
msgid "Depending on your shell's default settings,\n"
"the shell might also use colors to indicate whether each entry is a file or\n"
"directory."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:160
#: shell-novice/_episodes/02-filedir.md:427
#: shell-novice/_episodes/03-create.md:51
#: shell-novice/_episodes/03-create.md:77
# code block
msgid "~~~\n"
"$ ls -F\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:165
# code block
msgid "~~~\n"
"Applications/ Documents/    Library/      Music/        Public/\n"
"Desktop/      Downloads/    Movies/       Pictures/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:171
msgid "Here,\n"
"we can see that our home directory contains only **sub-directories**.\n"
"Any names in our output that don't have a classification symbol\n"
"are plain old **files**."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:176
# blockquote, which can be cascaded
msgid "> ## Clearing your terminal"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:177
msgid ">\n"
"> If your screen gets too cluttered, you can clear your terminal using the\n"
"> `clear` command. You can still access previous commands using <kbd>↑</kbd>\n"
"> and <kbd>↓</kbd> to move line-by-line, or by scrolling in your terminal."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:183
# header
msgid "### Getting help"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:185
msgid "`ls` has lots of other **options**. There are two common ways to find out how\n"
"to use a command and what options it accepts ---\n"
"**depending on your environment, you might find that only one of these ways works:**"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:189
# ordered list
msgid "1. We can pass a `--help` option to the command (available on Linux and Git Bash), such as:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:190
msgid "    ~~~\n"
"    $ ls --help\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:195
# ordered list
msgid "2. We can read its manual with `man` (available on Linux and macOS), such as:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:196
msgid "    ~~~\n"
"    $ man ls\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:201
msgid "We'll describe both ways next."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:203
# header
msgid "#### The `--help` option"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:205
msgid "Most bash commands and programs that people have written to be\n"
"run from within bash, support a `--help` option that displays more\n"
"information on how to use the command or program."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:209
# code block
msgid "~~~\n"
"$ ls --help\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:214
# code block
msgid "~~~\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.\n"
"\n"
"Mandatory arguments to long options are mandatory for short options, too.\n"
"  -a, --all                  do not ignore entries starting with .\n"
"  -A, --almost-all           do not list implied . and ..\n"
"      --author               with -l, print the author of each file\n"
"  -b, --escape               print C-style escapes for nongraphic characters\n"
"      --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,\n"
"                               '--block-size=M' prints sizes in units of\n"
"                               1,048,576 bytes; see SIZE format below\n"
"  -B, --ignore-backups       do not list implied entries ending with ~\n"
"  -c                         with -lt: sort by, and show, ctime (time of last\n"
"                               modification of file status information);\n"
"                               with -l: show ctime and sort by name;\n"
"                               otherwise: sort by ctime, newest first\n"
"  -C                         list entries by columns\n"
"      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\n"
"                               if omitted), 'auto', or 'never'; more info below\n"
"  -d, --directory            list directories themselves, not their contents\n"
"  -D, --dired                generate output designed for Emacs' dired mode\n"
"  -f                         do not sort, enable -aU, disable -ls --color\n"
"  -F, --classify             append indicator (one of */=>@|) to entries\n"
"...        ...        ...\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:243
# blockquote, which can be cascaded
msgid "> ## Unsupported command-line options"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:244
# blockquote, which can be cascaded
msgid "> If you try to use an option that is not supported, `ls` and other commands"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:245
# blockquote, which can be cascaded
msgid "> will usually print an error message similar to:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:246
msgid ">\n"
"> ~~~\n"
"> $ ls -j\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> ls: invalid option -- 'j'\n"
"> Try 'ls --help' for more information.\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:256
#: shell-novice/_episodes/05-loop.md:460
# SC/DC Template label
msgid "> {: .error}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:259
# header
msgid "#### The `man` command"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:261
msgid "The other way to learn about `ls` is to type\n"
"~~~\n"
"$ man ls\n"
"~~~\n"
"{: .language-bash}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:267
msgid "This command will turn your terminal into a page with a description\n"
"of the `ls` command and its options."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:270
msgid "To navigate through the `man` pages,\n"
"you may use <kbd>↑</kbd> and <kbd>↓</kbd> to move line-by-line,\n"
"or try <kbd>B</kbd> and <kbd>Spacebar</kbd> to skip up and down by a full page.\n"
"To search for a character or word in the `man` pages,\n"
"use <kbd>/</kbd> followed by the character or word you are searching for.\n"
"Sometimes a search will result in multiple hits.\n"
"If so, you can move between hits using <kbd>N</kbd> (for moving forward) and\n"
"<kbd>Shift</kbd>+<kbd>N</kbd> (for moving backward)."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:279
msgid "To **quit** the `man` pages, press <kbd>Q</kbd>."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:281
# blockquote, which can be cascaded
msgid "> ## Manual pages on the web"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:282
msgid ">\n"
"> Of course, there is a third way to access help for commands:\n"
"> searching the internet via your web browser.\n"
"> When using internet search, including the phrase `unix man page` in your search\n"
"> query will help to find relevant results.\n"
">\n"
"> GNU provides links to its\n"
"> [manuals](http://www.gnu.org/manual/manual.html) including the\n"
"> [core GNU utilities](http://www.gnu.org/software/coreutils/manual/coreutils.html),\n"
"> which covers many commands introduced within this lesson."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:294
# blockquote, which can be cascaded
msgid "> ## Exploring More `ls` Flags"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:295
msgid ">\n"
"> You can also use two options at the same time. What does the command `ls` do when used\n"
"> with the `-l` option? What about if you use both the `-l` and the `-h` option?\n"
">\n"
"> Some of its output is about properties that we do not cover in this lesson (such\n"
"> as file permissions and ownership), but the rest should be useful\n"
"> nevertheless.\n"
">\n"
"> > ## Solution\n"
"> > The `-l` option makes `ls` use a **l**ong listing format, showing not only\n"
"> > the file/directory names but also additional information, such as the file size\n"
"> > and the time of its last modification. If you use both the `-h` option and the `-l` option,\n"
"> > this makes the file size '**h**uman readable', i.e. displaying something like `5.3K`\n"
"> > instead of `5369`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:309
#: shell-novice/_episodes/02-filedir.md:326
#: shell-novice/_episodes/02-filedir.md:660
#: shell-novice/_episodes/02-filedir.md:685
#: shell-novice/_episodes/02-filedir.md:715
#: shell-novice/_episodes/03-create.md:274
#: shell-novice/_episodes/03-create.md:437
#: shell-novice/_episodes/03-create.md:508
#: shell-novice/_episodes/03-create.md:559
#: shell-novice/_episodes/03-create.md:612
#: shell-novice/_episodes/03-create.md:689
#: shell-novice/_episodes/03-create.md:754
#: shell-novice/_episodes/03-create.md:852
#: shell-novice/_episodes/03-create.md:898
#: shell-novice/_episodes/03-create.md:971
#: shell-novice/_episodes/04-pipefilter.md:233
#: shell-novice/_episodes/04-pipefilter.md:338
#: shell-novice/_episodes/04-pipefilter.md:367
#: shell-novice/_episodes/04-pipefilter.md:463
#: shell-novice/_episodes/04-pipefilter.md:527
#: shell-novice/_episodes/04-pipefilter.md:568
#: shell-novice/_episodes/04-pipefilter.md:601
#: shell-novice/_episodes/04-pipefilter.md:715
#: shell-novice/_episodes/05-loop.md:196
#: shell-novice/_episodes/05-loop.md:269
#: shell-novice/_episodes/05-loop.md:293
#: shell-novice/_episodes/05-loop.md:314
#: shell-novice/_episodes/05-loop.md:343
#: shell-novice/_episodes/05-loop.md:371
#: shell-novice/_episodes/05-loop.md:778
#: shell-novice/_episodes/05-loop.md:805
#: shell-novice/_episodes/06-script.md:333
#: shell-novice/_episodes/06-script.md:384
#: shell-novice/_episodes/06-script.md:509
#: shell-novice/_episodes/06-script.md:555
#: shell-novice/_episodes/06-script.md:604
#: shell-novice/_episodes/06-script.md:646
#: shell-novice/_episodes/07-find.md:276
#: shell-novice/_episodes/07-find.md:375
#: shell-novice/_episodes/07-find.md:425
#: shell-novice/_episodes/07-find.md:676
#: shell-novice/_episodes/07-find.md:724
# SC/DC Template label
msgid "> {: .solution}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:310
#: shell-novice/_episodes/02-filedir.md:327
#: shell-novice/_episodes/02-filedir.md:661
#: shell-novice/_episodes/02-filedir.md:686
#: shell-novice/_episodes/02-filedir.md:716
#: shell-novice/_episodes/03-create.md:285
#: shell-novice/_episodes/03-create.md:438
#: shell-novice/_episodes/03-create.md:509
#: shell-novice/_episodes/03-create.md:560
#: shell-novice/_episodes/03-create.md:613
#: shell-novice/_episodes/03-create.md:690
#: shell-novice/_episodes/03-create.md:755
#: shell-novice/_episodes/03-create.md:853
#: shell-novice/_episodes/03-create.md:899
#: shell-novice/_episodes/03-create.md:972
#: shell-novice/_episodes/04-pipefilter.md:234
#: shell-novice/_episodes/04-pipefilter.md:339
#: shell-novice/_episodes/04-pipefilter.md:368
#: shell-novice/_episodes/04-pipefilter.md:464
#: shell-novice/_episodes/04-pipefilter.md:528
#: shell-novice/_episodes/04-pipefilter.md:569
#: shell-novice/_episodes/04-pipefilter.md:602
#: shell-novice/_episodes/04-pipefilter.md:716
#: shell-novice/_episodes/05-loop.md:197
#: shell-novice/_episodes/05-loop.md:270
#: shell-novice/_episodes/05-loop.md:315
#: shell-novice/_episodes/05-loop.md:344
#: shell-novice/_episodes/05-loop.md:372
#: shell-novice/_episodes/05-loop.md:779
#: shell-novice/_episodes/05-loop.md:806
#: shell-novice/_episodes/06-script.md:334
#: shell-novice/_episodes/06-script.md:385
#: shell-novice/_episodes/06-script.md:510
#: shell-novice/_episodes/06-script.md:556
#: shell-novice/_episodes/06-script.md:605
#: shell-novice/_episodes/06-script.md:647
#: shell-novice/_episodes/07-find.md:277
#: shell-novice/_episodes/07-find.md:376
#: shell-novice/_episodes/07-find.md:426
#: shell-novice/_episodes/07-find.md:677
#: shell-novice/_episodes/07-find.md:725
# SC/DC Template label
msgid "{: .challenge}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:312
# blockquote, which can be cascaded
msgid "> ## Listing in Reverse Chronological Order"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:313
msgid ">\n"
"> By default, `ls` lists the contents of a directory in alphabetical\n"
"> order by name. The command `ls -t` lists items by time of last\n"
"> change instead of alphabetically. The command `ls -r` lists the\n"
"> contents of a directory in reverse order.\n"
"> Which file is displayed last when you combine the `-t` and `-r` options?\n"
"> Hint: You may need to use the `-l` option to see the\n"
"> last changed dates.\n"
">\n"
"> > ## Solution\n"
"> > The most recently changed file is listed last when using `-rt`. This\n"
"> > can be very useful for finding your most recent edits or checking to\n"
"> > see if a new output file was written."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:329
# header
msgid "### Exploring Other Directories"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:331
msgid "Not only can we use `ls` on the current working directory,\n"
"but we can use it to list the contents of a different directory.\n"
"Let's take a look at our `Desktop` directory by running `ls -F Desktop`,\n"
"i.e.,\n"
"the command `ls` with the `-F` **option** and the [**argument**][Arguments]  `Desktop`.\n"
"The argument `Desktop` tells `ls` that\n"
"we want a listing of something other than our current working directory:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:339
# code block
msgid "~~~\n"
"$ ls -F Desktop\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:344
# code block
msgid "~~~\n"
"shell-lesson-data/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:349
msgid "Note that if a directory named `Desktop` does not exist in your current working directory,\n"
"this command will return an error. Typically, a `Desktop` directory exists in your\n"
"home directory, which we assume is the current working directory of your bash shell."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:353
msgid "Your output should be a list of all the files and sub-directories in your\n"
"Desktop directory, including the `shell-lesson-data` directory you downloaded at\n"
"the [setup for this lesson]({{ page.root }}{% link setup.md %}).\n"
"On many systems,\n"
"the command line Desktop directory is the same as your GUI Desktop.\n"
"Take a look at your Desktop to confirm that your output is accurate."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:360
msgid "As you may now see, using a bash shell is strongly dependent on the idea that\n"
"your files are organized in a hierarchical file system.\n"
"Organizing things hierarchically in this way helps us keep track of our work:\n"
"it's possible to put hundreds of files in our home directory,\n"
"just as it's possible to pile hundreds of printed papers on our desk,\n"
"but it's a self-defeating strategy."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:367
msgid "Now that we know the `shell-lesson-data` directory is located in our Desktop directory, we\n"
"can do two things."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:370
msgid "First, we can look at its contents, using the same strategy as before, passing\n"
"a directory name to `ls`:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:373
# code block
msgid "~~~\n"
"$ ls -F Desktop/shell-lesson-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:378
# code block
msgid "~~~\n"
"exercise-data/  north-pacific-gyre/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:383
msgid "Second, we can actually change our location to a different directory, so\n"
"we are no longer located in\n"
"our home directory."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:387
msgid "The command to change locations is `cd` followed by a\n"
"directory name to change our working directory.\n"
"`cd` stands for 'change directory',\n"
"which is a bit misleading:\n"
"the command doesn't change the directory;\n"
"it changes the shell's current working directory.\n"
"In other words it changes the shell's idea of what directory we are in.\n"
"The `cd` command is akin to double-clicking a folder in a graphical interface to get into a folder."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:396
msgid "Let's say we want to move into the `exercise-data` directory we saw above. We can\n"
"use the following series of commands to get there:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:399
# code block
msgid "~~~\n"
"$ cd Desktop\n"
"$ cd shell-lesson-data\n"
"$ cd exercise-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:406
msgid "These commands will move us from our home directory into our Desktop directory, then into\n"
"the `shell-lesson-data` directory, then into the `exercise-data` directory.\n"
"You will notice that `cd` doesn't print anything. This is normal.\n"
"Many shell commands will not output anything to the screen when successfully executed.\n"
"But if we run `pwd` after it, we can see that we are now\n"
"in `/Users/nelle/Desktop/shell-lesson-data/exercise-data`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:413
msgid "If we run `ls -F` without arguments now,\n"
"it lists the contents of `/Users/nelle/Desktop/shell-lesson-data/exercise-data`,\n"
"because that's where we now are:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:422
#: shell-novice/_episodes/02-filedir.md:581
# code block
msgid "~~~\n"
"/Users/nelle/Desktop/shell-lesson-data/exercise-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:432
# code block
msgid "~~~\n"
"animal-counts/  creatures/  numbers.txt  proteins/  writing/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:437
msgid "We now know how to go down the directory tree (i.e. how to go into a subdirectory),\n"
"but how do we go up (i.e. how do we leave a directory and go into its parent directory)?\n"
"We might try the following:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:441
# code block
msgid "~~~\n"
"$ cd shell-lesson-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:446
# code block
msgid "~~~\n"
"-bash: cd: shell-lesson-data: No such file or directory\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:449
#: shell-novice/_episodes/03-create.md:392
#: shell-novice/_episodes/03-create.md:583
#: shell-novice/_episodes/03-create.md:627
#: shell-novice/_episodes/05-loop.md:500
# SC/DC Template label
msgid "{: .error}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:451
msgid "But we get an error! Why is this?"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:453
msgid "With our methods so far,\n"
"`cd` can only see sub-directories inside your current directory. There are\n"
"different ways to see directories above your current location; we'll start\n"
"with the simplest."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:458
msgid "There is a shortcut in the shell to move up one directory level\n"
"that looks like this:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:461
# code block
msgid "~~~\n"
"$ cd ..\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:466
msgid "`..` is a special directory name meaning\n"
"\"the directory containing this one\",\n"
"or more succinctly,\n"
"the **parent** of the current directory.\n"
"Sure enough,\n"
"if we run `pwd` after running `cd ..`, we're back in `/Users/nelle/Desktop/shell-lesson-data`:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:478
#: shell-novice/_episodes/03-create.md:40
# code block
msgid "~~~\n"
"/Users/nelle/Desktop/shell-lesson-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:483
msgid "The special directory `..` doesn't usually show up when we run `ls`. If we want\n"
"to display it, we can add the `-a` option to `ls -F`:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:486
# code block
msgid "~~~\n"
"$ ls -F -a\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:491
# code block
msgid "~~~\n"
"./  ../  exercise-data/  north-pacific-gyre/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:496
msgid "`-a` stands for 'show all' (including hidden files);\n"
"it forces `ls` to show us file and directory names that begin with `.`,\n"
"such as `..` (which, if we're in `/Users/nelle`, refers to the `/Users` directory).\n"
"As you can see,\n"
"it also displays another special directory that's just called `.`,\n"
"which means 'the current working directory'.\n"
"It may seem redundant to have a name for it,\n"
"but we'll see some uses for it soon."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:505
msgid "Note that in most command line tools, multiple options can be combined\n"
"with a single `-` and no spaces between the options: `ls -F -a` is\n"
"equivalent to `ls -Fa`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:509
# blockquote, which can be cascaded
msgid "> ## Other Hidden Files"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:510
msgid ">\n"
"> In addition to the hidden directories `..` and `.`, you may also see a file\n"
"> called `.bash_profile`. This file usually contains shell configuration\n"
"> settings. You may also see other files and directories beginning\n"
"> with `.`. These are usually files and directories that are used to configure\n"
"> different programs on your computer. The prefix `.` is used to prevent these\n"
"> configuration files from cluttering the terminal when a standard `ls` command\n"
"> is used."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:520
msgid "These three commands are the basic commands for navigating the filesystem on your computer:\n"
"`pwd`, `ls`, and `cd`. Let's explore some variations on those commands. What happens\n"
"if you type `cd` on its own, without giving\n"
"a directory?"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:525
# code block
msgid "~~~\n"
"$ cd\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:530
msgid "How can you check what happened? `pwd` gives us the answer!"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:542
msgid "It turns out that `cd` without an argument will return you to your home directory,\n"
"which is great if you've got lost in your own filesystem."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:545
msgid "Let's try returning to the `exercise-data` directory from before. Last time, we used\n"
"three commands, but we can actually string together the list of directories\n"
"to move to `exercise-data` in one step:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:549
# code block
msgid "~~~\n"
"$ cd Desktop/shell-lesson-data/exercise-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:554
msgid "Check that we've moved to the right place by running `pwd` and `ls -F`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:556
msgid "If we want to move up one level from the data directory, we could use `cd ..`.  But\n"
"there is another way to move to any directory, regardless of your\n"
"current location."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:560
msgid "So far, when specifying directory names, or even a directory path (as above),\n"
"we have been using **relative paths**.  When you use a relative path with a command\n"
"like `ls` or `cd`, it tries to find that location from where we are,\n"
"rather than from the root of the file system."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:565
msgid "However, it is possible to specify the **absolute path** to a directory by\n"
"including its entire path from the root directory, which is indicated by a\n"
"leading slash. The leading `/` tells the computer to follow the path from\n"
"the root of the file system, so it always refers to exactly one directory,\n"
"no matter where we are when we run the command."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:571
msgid "This allows us to move to our `shell-lesson-data` directory from anywhere on\n"
"the filesystem (including from inside `exercise-data`). To find the absolute path\n"
"we're looking for, we can use `pwd` and then extract the piece we need\n"
"to move to `shell-lesson-data`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:586
# code block
msgid "~~~\n"
"$ cd /Users/nelle/Desktop/shell-lesson-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:591
msgid "Run `pwd` and `ls -F` to ensure that we're in the directory we expect."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:593
# blockquote, which can be cascaded
msgid "> ## Two More Shortcuts"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:594
msgid ">\n"
"> The shell interprets a tilde (`~`) character at the start of a path to\n"
"> mean \"the current user's home directory\". For example, if Nelle's home\n"
"> directory is `/Users/nelle`, then `~/data` is equivalent to\n"
"> `/Users/nelle/data`. This only works if it is the first character in the\n"
"> path: `here/there/~/elsewhere` is *not* `here/there/Users/nelle/elsewhere`.\n"
">\n"
"> Another shortcut is the `-` (dash) character. `cd` will translate `-` into\n"
"> *the previous directory I was in*, which is faster than having to remember,\n"
"> then type, the full path.  This is a *very* efficient way of moving\n"
"> *back and forth between two directories* -- i.e. if you execute `cd -` twice,\n"
"> you end up back in the starting directory.\n"
">\n"
"> The difference between `cd ..` and `cd -` is\n"
"> that the former brings you *up*, while the latter brings you *back*.\n"
">\n"
"> ----\n"
"> Try it!\n"
"> First navigate to `~/Desktop/shell-lesson-data` (you should already be there).\n"
"> ~~~\n"
"> $ cd ~/Desktop/shell-lesson-data\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Then `cd` into the `exercise-data/creatures` directory\n"
"> ~~~\n"
"> $ cd exercise-data/creatures\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Now if you run\n"
"> ~~~\n"
"> $ cd -\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> you'll see you're back in `~/Desktop/shell-lesson-data`.\n"
"> Run `cd -` again and you're back in `~/Desktop/shell-lesson-data/exercise-data/creatures`"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:633
# blockquote, which can be cascaded
msgid "> ## Absolute vs Relative Paths"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:634
msgid ">\n"
"> Starting from `/Users/amanda/data`,\n"
"> which of the following commands could Amanda use to navigate to her home directory,\n"
"> which is `/Users/amanda`?\n"
">\n"
"> 1. `cd .`\n"
"> 2. `cd /`\n"
"> 3. `cd /home/amanda`\n"
"> 4. `cd ../..`\n"
"> 5. `cd ~`\n"
"> 6. `cd home`\n"
"> 7. `cd ~/data/..`\n"
"> 8. `cd`\n"
"> 9. `cd ..`\n"
">\n"
"> > ## Solution\n"
"> > 1. No: `.` stands for the current directory.\n"
"> > 2. No: `/` stands for the root directory.\n"
"> > 3. No: Amanda's home directory is `/Users/amanda`.\n"
"> > 4. No: this command goes up two levels, i.e. ends in `/Users`.\n"
"> > 5. Yes: `~` stands for the user's home directory, in this case `/Users/amanda`.\n"
"> > 6. No: this command would navigate into a directory `home` in the current directory\n"
"> >     if it exists.\n"
"> > 7. Yes: unnecessarily complicated, but correct.\n"
"> > 8. Yes: shortcut to go back to the user's home directory.\n"
"> > 9. Yes: goes up one level."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:663
# blockquote, which can be cascaded
msgid "> ## Relative Path Resolution"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:664
msgid ">\n"
"> Using the filesystem diagram below, if `pwd` displays `/Users/thing`,\n"
"> what will `ls -F ../backup` display?\n"
">\n"
"> 1.  `../backup: No such file or directory`\n"
"> 2.  `2012-12-01 2013-01-08 2013-01-27`\n"
"> 3.  `2012-12-01/ 2013-01-08/ 2013-01-27/`\n"
"> 4.  `original/ pnas_final/ pnas_sub/`\n"
">\n"
"> ![A directory tree below the Users directory where \"/Users\" contains the\n"
"directories \"backup\" and \"thing\"; \"/Users/backup\" contains \"original\",\n"
"\"pnas_final\" and \"pnas_sub\"; \"/Users/thing\" contains \"backup\"; and\n"
"\"/Users/thing/backup\" contains \"2012-12-01\", \"2013-01-08\" and\n"
"\"2013-01-27\"](../fig/filesystem-challenge.svg)\n"
">\n"
"> > ## Solution\n"
"> > 1. No: there *is* a directory `backup` in `/Users`.\n"
"> > 2. No: this is the content of `Users/thing/backup`,\n"
"> >    but with `..`, we asked for one level further up.\n"
"> > 3. No: see previous explanation.\n"
"> > 4. Yes: `../backup/` refers to `/Users/backup/`."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:688
# blockquote, which can be cascaded
msgid "> ## `ls` Reading Comprehension"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:689
msgid ">\n"
"> Using the filesystem diagram below,\n"
"> if `pwd` displays `/Users/backup`,\n"
"> and `-r` tells `ls` to display things in reverse order,\n"
"> what command(s) will result in the following output:\n"
">\n"
"> ~~~\n"
"> pnas_sub/ pnas_final/ original/\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:699
msgid ">\n"
"> ![A directory tree below the Users directory where \"/Users\" contains the\n"
"directories \"backup\" and \"thing\"; \"/Users/backup\" contains \"original\",\n"
"\"pnas_final\" and \"pnas_sub\"; \"/Users/thing\" contains \"backup\"; and\n"
"\"/Users/thing/backup\" contains \"2012-12-01\", \"2013-01-08\" and\n"
"\"2013-01-27\"](../fig/filesystem-challenge.svg)\n"
">\n"
"> 1.  `ls pwd`\n"
"> 2.  `ls -r -F`\n"
"> 3.  `ls -r -F /Users/backup`\n"
">\n"
"> > ## Solution\n"
"> >  1. No: `pwd` is not the name of a directory.\n"
"> >  2. Yes: `ls` without directory argument lists files and directories\n"
"> >     in the current directory.\n"
"> >  3. Yes: uses the absolute path explicitly."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:719
# header
msgid "## General Syntax of a Shell Command"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:720
msgid "We have now encountered commands, options, and arguments,\n"
"but it is perhaps useful to formalise some terminology."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:723
msgid "Consider the command below as a general example of a command,\n"
"which we will dissect into its component parts:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:726
#: shell-novice/_episodes/02-filedir.md:783
# code block
msgid "~~~\n"
"$ ls -F /\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:731
msgid "![General syntax of a shell command](../fig/shell_command_syntax.svg)"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:733
msgid "`ls` is the **command**, with an **option** `-F` and an\n"
"**argument** `/`.\n"
"We've already encountered options  which\n"
"either start with a single dash (`-`) or two dashes (`--`),\n"
"and they change the behavior of a command.\n"
"[Arguments] tell the command what to operate on (e.g. files and directories).\n"
"Sometimes options and arguments are referred to as **parameters**.\n"
"A command can be called with more than one option and more than one argument, but a\n"
"command doesn't always require an argument or an option."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:743
msgid "You might sometimes see options being referred to as **switches** or **flags**,\n"
"especially for options that take no argument. In this lesson we will stick with\n"
"using the term *option*."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:747
msgid "Each part is separated by spaces: if you omit the space\n"
"between `ls` and `-F` the shell will look for a command called `ls-F`, which\n"
"doesn't exist. Also, capitalization can be important.\n"
"For example, `ls -s` will display the size of files and directories alongside the names,\n"
"while `ls -S` will sort the files and directories by size, as shown below:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:753
# code block
msgid "~~~\n"
"$ cd ~/Desktop/shell-lesson-data\n"
"$ ls -s exercise-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:759
# code block
msgid "~~~\n"
"total 28\n"
" 4 animal-counts   4 creatures  12 numbers.txt   4 proteins   4 writing\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:765
msgid "Note that the sizes returned by `ls -s` are in *blocks*. \n"
"As these are defined differently for different operating systems,\n"
"you may not obtain the same figures as in the example."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:769
# code block
msgid "~~~\n"
"$ ls -S exercise-data\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:774
# code block
msgid "~~~\n"
"animal-counts  creatures  proteins  writing  numbers.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:779
msgid "Putting all that together, our command above gives us a listing\n"
"of files and directories in the root directory `/`.\n"
"An example of the output you might get from the above command is given below:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:788
# code block
msgid "~~~\n"
"Applications/         System/\n"
"Library/              Users/\n"
"Network/              Volumes/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:796
# header
msgid "### Nelle's Pipeline: Organizing Files"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:798
msgid "Knowing this much about files and directories,\n"
"Nelle is ready to organize the files that the protein assay machine will create."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:801
msgid "She creates a directory called `north-pacific-gyre`\n"
"(to remind herself where the data came from),\n"
"which will contain the data files from the assay machine,\n"
"and her data processing scripts."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:807
msgid "Each of her physical samples is labelled according to her lab's convention\n"
"with a unique ten-character ID,\n"
"such as 'NENE01729A'.\n"
"This ID is what she used in her collection log\n"
"to record the location, time, depth, and other characteristics of the sample,\n"
"so she decides to use it as part of each data file's name.\n"
"Since the assay machine's output is plain text,\n"
"she will call her files `NENE01729A.txt`, `NENE01812A.txt`, and so on.\n"
"All 1520 files will go into the same directory."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:818
msgid "Now in her current directory `shell-lesson-data`,\n"
"Nelle can see what files she has using the command:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:821
#: shell-novice/_episodes/02-filedir.md:838
# code block
msgid "~~~\n"
"$ ls north-pacific-gyre/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:826
msgid "This command is a lot to type,\n"
"but she can let the shell do most of the work through what is called **tab completion**.\n"
"If she types:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:830
# code block
msgid "~~~\n"
"$ ls nor\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:835
msgid "and then presses <kbd>Tab</kbd> (the tab key on her keyboard),\n"
"the shell automatically completes the directory name for her:"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:843
msgid "Pressing <kbd>Tab</kbd> again does nothing,\n"
"since there are multiple possibilities;\n"
"pressing <kbd>Tab</kbd> twice brings up a list of all the files."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:847
msgid "If Nelle adds <kbd>G</kbd> and presses <kbd>Tab</kbd> again,\n"
"the shell will append 'goo' since all files that start with 'g' share\n"
"the first three characters 'goo'."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:851
# code block
msgid "~~~\n"
"$ ls north-pacific-gyre/goo\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:856
msgid "To see all of those files, she can press <kbd>Tab</kbd> twice more.\n"
"~~~\n"
"ls north-pacific-gyre/goo\n"
"goodiff.sh   goostats.sh\n"
"~~~\n"
"{: .language-bash}"
msgstr ""

#: shell-novice/_episodes/02-filedir.md:863
msgid "This is called **tab completion**,\n"
"and we will see it in many other tools as we go on."
msgstr ""

#: shell-novice/_episodes/02-filedir.md:866
msgid "[Arguments]: https://swcarpentry.github.io/shell-novice/reference.html#argument"
msgstr ""

#: shell-novice/_episodes/03-create.md:1
# Front Matter
msgid "---\n"
"title: \"Working With Files and Directories\"\n"
"teaching: 30\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I create, copy, and delete files and directories?\"\n"
"- \"How can I edit files?\"\n"
"objectives:\n"
"- \"Create a directory hierarchy that matches a given diagram.\"\n"
"- \"Create files in that hierarchy using an editor or by copying and renaming existing files.\"\n"
"- \"Delete, copy and move specified files and/or directories.\"\n"
"keypoints:\n"
"- \"`cp [old] [new]` copies a file.\"\n"
"- \"`mkdir [path]` creates a new directory.\"\n"
"- \"`mv [old] [new]` moves (renames) a file or directory.\"\n"
"- \"`rm [path]` removes (deletes) a file.\"\n"
"- \"`*` matches zero or more characters in a filename, so `*.txt` matches all files ending in `.txt`.\"\n"
"- \"`?` matches any single character in a filename, so `?.txt` matches `a.txt` but not `any.txt`.\"\n"
"- \"Use of the Control key may be described in many ways, including `Ctrl-X`, `Control-X`, and `^X`.\"\n"
"- \"The shell does not have a trash bin: once something is deleted, it's really gone.\"\n"
"- \"Most files' names are `something.extension`. The extension isn't required, and doesn't guarantee anything, but is normally used to indicate the type of data in the file.\"\n"
"- \"Depending on the type of work you do, you may need a more powerful text editor than Nano.\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/03-create.md:24
# header
msgid "## Creating directories"
msgstr ""

#: shell-novice/_episodes/03-create.md:25
msgid "We now know how to explore files and directories,\n"
"but how do we create them in the first place?"
msgstr ""

#: shell-novice/_episodes/03-create.md:28
msgid "In this episode we will learn about creating and moving files and directories,\n"
"using the `exercise-data/writing` directory as an example."
msgstr ""

#: shell-novice/_episodes/03-create.md:31
# header
msgid "### Step one: see where we are and what we already have"
msgstr ""

#: shell-novice/_episodes/03-create.md:32
msgid "We should still be in the `shell-lesson-data` directory on the Desktop,\n"
"which we can check using:"
msgstr ""

#: shell-novice/_episodes/03-create.md:45
msgid "Next we'll move to the `exercise-data/writing` directory and see what it contains:\n"
"~~~\n"
"$ cd exercise-data/writing/\n"
"~~~\n"
"{:  .language-bash}"
msgstr ""

#: shell-novice/_episodes/03-create.md:56
# code block
msgid "~~~\n"
"haiku.txt  LittleWomen.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:61
# header
msgid "### Create a directory"
msgstr ""

#: shell-novice/_episodes/03-create.md:63
msgid "Let's create a new directory called `thesis` using the command `mkdir thesis`\n"
"(which has no output):"
msgstr ""

#: shell-novice/_episodes/03-create.md:66
# code block
msgid "~~~\n"
"$ mkdir thesis\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:71
msgid "As you might guess from its name,\n"
"`mkdir` means 'make directory'.\n"
"Since `thesis` is a relative path\n"
"(i.e., does not have a leading slash, like `/what/ever/thesis`),\n"
"the new directory is created in the current working directory:"
msgstr ""

#: shell-novice/_episodes/03-create.md:82
# code block
msgid "~~~\n"
"haiku.txt  LittleWomen.txt  thesis/\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:87
msgid "Since we've just created the `thesis` directory, there's nothing in it yet:"
msgstr ""

#: shell-novice/_episodes/03-create.md:89
# code block
msgid "~~~\n"
"$ ls -F thesis\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:94
msgid "Note that `mkdir` is not limited to creating single directories one at a time.\n"
"The `-p` option allows `mkdir` to create a directory with nested subdirectories\n"
"in a single operation:"
msgstr ""

#: shell-novice/_episodes/03-create.md:98
# code block
msgid "~~~\n"
"$ mkdir -p ../project/data ../project/results\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:103
msgid "The `-R` option to the `ls` command will list all nested subdirectories within a directory.\n"
"Let's use `ls -FR` to recursively list the new directory hierarchy we just created in the\n"
"`project` directory:"
msgstr ""

#: shell-novice/_episodes/03-create.md:107
# code block
msgid "~~~\n"
"$ ls -FR ../project\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:112
# code block
msgid "~~~\n"
"../project/:\n"
"data/  results/\n"
"\n"
"../project/data:\n"
"\n"
"../project/results:\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:122
# blockquote, which can be cascaded
msgid "> ## Two ways of doing the same thing"
msgstr ""

#: shell-novice/_episodes/03-create.md:123
# blockquote, which can be cascaded
msgid "> Using the shell to create a directory is no different than using a file explorer."
msgstr ""

#: shell-novice/_episodes/03-create.md:124
# blockquote, which can be cascaded
msgid "> If you open the current directory using your operating system's graphical file explorer,"
msgstr ""

#: shell-novice/_episodes/03-create.md:125
# blockquote, which can be cascaded
msgid "> the `thesis` directory will appear there too."
msgstr ""

#: shell-novice/_episodes/03-create.md:126
# blockquote, which can be cascaded
msgid "> While the shell and the file explorer are two different ways of interacting with the files,"
msgstr ""

#: shell-novice/_episodes/03-create.md:127
# blockquote, which can be cascaded
msgid "> the files and directories themselves are the same."
msgstr ""

#: shell-novice/_episodes/03-create.md:130
# blockquote, which can be cascaded
msgid "> ## Good names for files and directories"
msgstr ""

#: shell-novice/_episodes/03-create.md:131
msgid ">\n"
"> Complicated names of files and directories can make your life painful\n"
"> when working on the command line. Here we provide a few useful\n"
"> tips for the names of your files and directories.\n"
">\n"
"> 1. Don't use spaces.\n"
">\n"
">    Spaces can make a name more meaningful,\n"
">    but since spaces are used to separate arguments on the command line\n"
">    it is better to avoid them in names of files and directories.\n"
">    You can use `-` or `_` instead (e.g. `north-pacific-gyre/` rather than `north pacific gyre/`).\n"
">    To test this out, try typing `mkdir north pacific gyre`and see what directory (or directories!)\n"
">    are made when you check with `ls -F`.\n"
">\n"
"> 2. Don't begin the name with `-` (dash).\n"
">\n"
">    Commands treat names starting with `-` as options.\n"
">\n"
"> 3. Stick with letters, numbers, `.` (period or 'full stop'), `-` (dash) and `_` (underscore).\n"
">\n"
">    Many other characters have special meanings on the command line.\n"
">    We will learn about some of these during this lesson.\n"
">    There are special characters that can cause your command to not work as\n"
">    expected and can even result in data loss.\n"
">\n"
"> If you need to refer to names of files or directories that have spaces\n"
"> or other special characters, you should surround the name in quotes (`\"\"`)."
msgstr ""

#: shell-novice/_episodes/03-create.md:160
# header
msgid "### Create a text file"
msgstr ""

#: shell-novice/_episodes/03-create.md:161
msgid "Let's change our working directory to `thesis` using `cd`,\n"
"then run a text editor called Nano to create a file called `draft.txt`:"
msgstr ""

#: shell-novice/_episodes/03-create.md:164
# code block
msgid "~~~\n"
"$ cd thesis\n"
"$ nano draft.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:170
# blockquote, which can be cascaded
msgid "> ## Which Editor?"
msgstr ""

#: shell-novice/_episodes/03-create.md:171
msgid ">\n"
"> When we say, '`nano` is a text editor' we really do mean 'text': it can\n"
"> only work with plain character data, not tables, images, or any other\n"
"> human-friendly media. We use it in examples because it is one of the\n"
"> least complex text editors. However, because of this trait, it may\n"
"> not be powerful enough or flexible enough for the work you need to do\n"
"> after this workshop. On Unix systems (such as Linux and macOS),\n"
"> many programmers use [Emacs](http://www.gnu.org/software/emacs/) or\n"
"> [Vim](http://www.vim.org/) (both of which require more time to learn),\n"
"> or a graphical editor such as\n"
"> [Gedit](http://projects.gnome.org/gedit/). On Windows, you may wish to\n"
"> use [Notepad++](http://notepad-plus-plus.org/).  Windows also has a built-in\n"
"> editor called `notepad` that can be run from the command line in the same\n"
"> way as `nano` for the purposes of this lesson.\n"
">\n"
"> No matter what editor you use, you will need to know where it searches\n"
"> for and saves files. If you start it from the shell, it will (probably)\n"
"> use your current working directory as its default location. If you use\n"
"> your computer's start menu, it may want to save files in your desktop or\n"
"> documents directory instead. You can change this by navigating to\n"
"> another directory the first time you 'Save As...'"
msgstr ""

#: shell-novice/_episodes/03-create.md:194
msgid "Let's type in a few lines of text.\n"
"Once we're happy with our text, we can press <kbd>Ctrl</kbd>+<kbd>O</kbd>\n"
"(press the <kbd>Ctrl</kbd> or <kbd>Control</kbd> key and, while\n"
"holding it down, press the <kbd>O</kbd> key) to write our data to disk\n"
"(we'll be asked what file we want to save this to:\n"
"press <kbd>Return</kbd> to accept the suggested default of `draft.txt`)."
msgstr ""

#: shell-novice/_episodes/03-create.md:201
msgid "<div style=\"width:80%; margin: auto;\"><img alt=\"screenshot of nano text editor in action\"\n"
"src=\"../fig/nano-screenshot.png\"></div>"
msgstr ""

#: shell-novice/_episodes/03-create.md:204
msgid "Once our file is saved, we can use <kbd>Ctrl</kbd>+<kbd>X</kbd> to quit the editor and\n"
"return to the shell."
msgstr ""

#: shell-novice/_episodes/03-create.md:207
# blockquote, which can be cascaded
msgid "> ## Control, Ctrl, or ^ Key"
msgstr ""

#: shell-novice/_episodes/03-create.md:208
msgid ">\n"
"> The Control key is also called the 'Ctrl' key. There are various ways\n"
"> in which using the Control key may be described. For example, you may\n"
"> see an instruction to press the <kbd>Control</kbd> key and, while holding it down,\n"
"> press the <kbd>X</kbd> key, described as any of:\n"
">\n"
"> * `Control-X`\n"
"> * `Control+X`\n"
"> * `Ctrl-X`\n"
"> * `Ctrl+X`\n"
"> * `^X`\n"
"> * `C-x`\n"
">\n"
"> In nano, along the bottom of the screen you'll see `^G Get Help ^O WriteOut`.\n"
"> This means that you can use `Control-G` to get help and `Control-O` to save your\n"
"> file."
msgstr ""

#: shell-novice/_episodes/03-create.md:226
msgid "`nano` doesn't leave any output on the screen after it exits,\n"
"but `ls` now shows that we have created a file called `draft.txt`:"
msgstr ""

#: shell-novice/_episodes/03-create.md:234
# code block
msgid "~~~\n"
"draft.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:239
# blockquote, which can be cascaded
msgid "> ## Creating Files a Different Way"
msgstr ""

#: shell-novice/_episodes/03-create.md:240
msgid ">\n"
"> We have seen how to create text files using the `nano` editor.\n"
"> Now, try the following command:\n"
">\n"
"> ~~~\n"
"> $ touch my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  What did the `touch` command do?\n"
">     When you look at your current directory using the GUI file explorer,\n"
">     does the file show up?\n"
">\n"
"> 2.  Use `ls -l` to inspect the files.  How large is `my_file.txt`?\n"
">\n"
"> 3.  When might you want to create a file this way?\n"
">\n"
"> > ## Solution\n"
"> > 1.  The `touch` command generates a new file called `my_file.txt` in\n"
"> >     your current directory.  You\n"
"> >     can observe this newly generated file by typing `ls` at the\n"
"> >     command line prompt.  `my_file.txt` can also be viewed in your\n"
"> >     GUI file explorer.\n"
"> >\n"
"> > 2.  When you inspect the file with `ls -l`, note that the size of\n"
"> >     `my_file.txt` is 0 bytes.  In other words, it contains no data.\n"
"> >     If you open `my_file.txt` using your text editor it is blank.\n"
"> >\n"
"> > 3.  Some programs do not generate output files themselves, but\n"
"> >     instead require that empty files have already been generated.\n"
"> >     When the program is run, it searches for an existing file to\n"
"> >     populate with its output.  The touch command allows you to\n"
"> >     efficiently generate a blank text file to be used by such\n"
"> >     programs."
msgstr ""

#: shell-novice/_episodes/03-create.md:275
msgid ">\n"
"> To avoid confusion later on,\n"
"> we suggest removing the file you've just created before proceeding with the rest\n"
"> of the episode, otherwise future outputs may vary from those given in the lesson.\n"
"> To do this, use the following command:\n"
">\n"
"> ~~~\n"
"> $ rm my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/03-create.md:287
# blockquote, which can be cascaded
msgid "> ## What's In A Name?"
msgstr ""

#: shell-novice/_episodes/03-create.md:288
msgid ">\n"
"> You may have noticed that all of Nelle's files are named 'something dot\n"
"> something', and in this part of the lesson, we always used the extension\n"
"> `.txt`.  This is just a convention: we can call a file `mythesis` or\n"
"> almost anything else we want. However, most people use two-part names\n"
"> most of the time to help them (and their programs) tell different kinds\n"
"> of files apart. The second part of such a name is called the\n"
"> **filename extension** and indicates\n"
"> what type of data the file holds: `.txt` signals a plain text file, `.pdf`\n"
"> indicates a PDF document, `.cfg` is a configuration file full of parameters\n"
"> for some program or other, `.png` is a PNG image, and so on.\n"
">\n"
"> This is just a convention, albeit an important one. Files contain\n"
"> bytes: it's up to us and our programs to interpret those bytes\n"
"> according to the rules for plain text files, PDF documents, configuration\n"
"> files, images, and so on.\n"
">\n"
"> Naming a PNG image of a whale as `whale.mp3` doesn't somehow\n"
"> magically turn it into a recording of whale song, though it *might*\n"
"> cause the operating system to try to open it with a music player\n"
"> when someone double-clicks it."
msgstr ""

#: shell-novice/_episodes/03-create.md:311
# header
msgid "## Moving files and directories"
msgstr ""

#: shell-novice/_episodes/03-create.md:312
msgid "Returning to the `shell-lesson-data/exercise-data/writing` directory,"
msgstr ""

#: shell-novice/_episodes/03-create.md:314
# code block
msgid "```\n"
"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing\n"
"```"
msgstr ""

#: shell-novice/_episodes/03-create.md:319
msgid "In our `thesis` directory we have a file `draft.txt`\n"
"which isn't a particularly informative name,\n"
"so let's change the file's name using `mv`,\n"
"which is short for 'move':"
msgstr ""

#: shell-novice/_episodes/03-create.md:324
# code block
msgid "~~~\n"
"$ mv thesis/draft.txt thesis/quotes.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:329
msgid "The first argument tells `mv` what we're 'moving',\n"
"while the second is where it's to go.\n"
"In this case,\n"
"we're moving `thesis/draft.txt` to `thesis/quotes.txt`,\n"
"which has the same effect as renaming the file.\n"
"Sure enough,\n"
"`ls` shows us that `thesis` now contains one file called `quotes.txt`:"
msgstr ""

#: shell-novice/_episodes/03-create.md:337
#: shell-novice/_episodes/03-create.md:371
# code block
msgid "~~~\n"
"$ ls thesis\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:342
#: shell-novice/_episodes/03-create.md:403
# code block
msgid "~~~\n"
"quotes.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:347
msgid "One must be careful when specifying the target file name, since `mv` will\n"
"silently overwrite any existing file with the same name, which could\n"
"lead to data loss. An additional option, `mv -i` (or `mv --interactive`),\n"
"can be used to make `mv` ask you for confirmation before overwriting."
msgstr ""

#: shell-novice/_episodes/03-create.md:352
msgid "Note that `mv` also works on directories."
msgstr ""

#: shell-novice/_episodes/03-create.md:354
msgid "Let's move `quotes.txt` into the current working directory.\n"
"We use `mv` once again,\n"
"but this time we'll use just the name of a directory as the second argument\n"
"to tell `mv` that we want to keep the filename\n"
"but put the file somewhere new.\n"
"(This is why the command is called 'move'.)\n"
"In this case,\n"
"the directory name we use is the special directory name `.` that we mentioned earlier."
msgstr ""

#: shell-novice/_episodes/03-create.md:363
# code block
msgid "~~~\n"
"$ mv thesis/quotes.txt .\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:368
msgid "The effect is to move the file from the directory it was in to the current working directory.\n"
"`ls` now shows us that `thesis` is empty:"
msgstr ""

#: shell-novice/_episodes/03-create.md:381
msgid "Alternatively, we can confirm the file `quotes.txt` is no longer present in the `thesis` directory\n"
"by explicitly trying to list it:"
msgstr ""

#: shell-novice/_episodes/03-create.md:384
# code block
msgid "~~~\n"
"$ ls thesis/quotes.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:389
# code block
msgid "```\n"
"ls: cannot access 'thesis/quotes.txt': No such file or directory\n"
"```"
msgstr ""

#: shell-novice/_episodes/03-create.md:394
msgid "`ls` with a filename or directory as an argument only lists the requested file or directory.\n"
"If the file given as the argument doesn't exist, the shell returns an error as we saw above.\n"
"We can use this to see that `quotes.txt` is now present in our current directory:"
msgstr ""

#: shell-novice/_episodes/03-create.md:398
#: shell-novice/_episodes/03-create.md:575
# code block
msgid "~~~\n"
"$ ls quotes.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:408
# blockquote, which can be cascaded
msgid "> ## Moving Files to a new folder"
msgstr ""

#: shell-novice/_episodes/03-create.md:409
msgid ">\n"
"> After running the following commands,\n"
"> Jamie realizes that she put the files `sucrose.dat` and `maltose.dat` into the wrong folder.\n"
"> The files should have been placed in the `raw` folder.\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
">  analyzed/ raw/\n"
"> $ ls -F analyzed\n"
"> fructose.dat glucose.dat maltose.dat sucrose.dat\n"
"> $ cd analyzed\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Fill in the blanks to move these files to the `raw/` folder\n"
"> (i.e. the one she forgot to put them in)\n"
">\n"
"> ~~~\n"
"> $ mv sucrose.dat maltose.dat ____/____\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ mv sucrose.dat maltose.dat ../raw\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Recall that `..` refers to the parent directory (i.e. one above the current directory)\n"
"> > and that `.` refers to the current directory."
msgstr ""

#: shell-novice/_episodes/03-create.md:440
# header
msgid "## Copying files and directories"
msgstr ""

#: shell-novice/_episodes/03-create.md:442
msgid "The `cp` command works very much like `mv`,\n"
"except it copies a file instead of moving it.\n"
"We can check that it did the right thing using `ls`\n"
"with two paths as arguments --- like most Unix commands,\n"
"`ls` can be given multiple paths at once:"
msgstr ""

#: shell-novice/_episodes/03-create.md:448
# code block
msgid "~~~\n"
"$ cp quotes.txt thesis/quotations.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:454
# code block
msgid "~~~\n"
"quotes.txt   thesis/quotations.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:459
msgid "We can also copy a directory and all its contents by using the\n"
"[recursive](https://en.wikipedia.org/wiki/Recursion) option `-r`,\n"
"e.g. to back up a directory:"
msgstr ""

#: shell-novice/_episodes/03-create.md:463
# code block
msgid "```\n"
"$ cp -r thesis thesis_backup\n"
"```"
msgstr ""

#: shell-novice/_episodes/03-create.md:468
msgid "We can check the result by listing the contents of both the `thesis` and `thesis_backup` directory:"
msgstr ""

#: shell-novice/_episodes/03-create.md:470
# code block
msgid "```\n"
"$ ls thesis thesis_backup\n"
"```"
msgstr ""

#: shell-novice/_episodes/03-create.md:475
# code block
msgid "```\n"
"thesis:\n"
"quotations.txt\n"
"\n"
"thesis_backup:\n"
"quotations.txt\n"
"```"
msgstr ""

#: shell-novice/_episodes/03-create.md:485
# blockquote, which can be cascaded
msgid "> ## Renaming Files"
msgstr ""

#: shell-novice/_episodes/03-create.md:486
msgid ">\n"
"> Suppose that you created a plain-text file in your current directory to contain a list of the\n"
"> statistical tests you will need to do to analyze your data, and named it: `statstics.txt`\n"
">\n"
"> After creating and saving this file you realize you misspelled the filename! You want to\n"
"> correct the mistake, which of the following commands could you use to do so?\n"
">\n"
"> 1. `cp statstics.txt statistics.txt`\n"
"> 2. `mv statstics.txt statistics.txt`\n"
"> 3. `mv statstics.txt .`\n"
"> 4. `cp statstics.txt .`\n"
">\n"
"> > ## Solution\n"
"> > 1. No.  While this would create a file with the correct name,\n"
"> > the incorrectly named file still exists in the directory\n"
"> > and would need to be deleted.\n"
"> > 2. Yes, this would work to rename the file.\n"
"> > 3. No, the period(.) indicates where to move the file, but does not provide a new file name;\n"
"> > identical file names\n"
"> > cannot be created.\n"
"> > 4. No, the period(.) indicates where to copy the file, but does not provide a new file name;\n"
"> > identical file names cannot be created."
msgstr ""

#: shell-novice/_episodes/03-create.md:511
# blockquote, which can be cascaded
msgid "> ## Moving and Copying"
msgstr ""

#: shell-novice/_episodes/03-create.md:512
msgid ">\n"
"> What is the output of the closing `ls` command in the sequence shown below?\n"
">\n"
"> ~~~\n"
"> $ pwd\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> /Users/jamie/data\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:523
#: shell-novice/_episodes/03-create.md:525
#: shell-novice/_episodes/03-create.md:527
#: shell-novice/_episodes/03-create.md:529
#: shell-novice/_episodes/03-create.md:531
#: shell-novice/_episodes/03-create.md:536
#: shell-novice/_episodes/03-create.md:672
#: shell-novice/_episodes/03-create.md:674
#: shell-novice/_episodes/03-create.md:881
#: shell-novice/_episodes/03-create.md:883
#: shell-novice/_episodes/03-create.md:885
#: shell-novice/_episodes/03-create.md:887
# blockquote, which can be cascaded
msgid "> ~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:524
#: shell-novice/_episodes/03-create.md:535
# blockquote, which can be cascaded
msgid "> $ ls"
msgstr ""

#: shell-novice/_episodes/03-create.md:526
#: shell-novice/_episodes/03-create.md:537
#: shell-novice/_episodes/03-create.md:675
#: shell-novice/_episodes/03-create.md:884
# blockquote, which can be cascaded
msgid "> {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/03-create.md:528
# blockquote, which can be cascaded
msgid "> proteins.dat"
msgstr ""

#: shell-novice/_episodes/03-create.md:532
# blockquote, which can be cascaded
msgid "> $ mkdir recombined"
msgstr ""

#: shell-novice/_episodes/03-create.md:533
# blockquote, which can be cascaded
msgid "> $ mv proteins.dat recombined/"
msgstr ""

#: shell-novice/_episodes/03-create.md:534
# blockquote, which can be cascaded
msgid "> $ cp recombined/proteins.dat ../proteins-saved.dat"
msgstr ""

#: shell-novice/_episodes/03-create.md:538
msgid ">\n"
">\n"
"> 1.   `proteins-saved.dat recombined`\n"
"> 2.   `recombined`\n"
"> 3.   `proteins.dat recombined`\n"
"> 4.   `proteins-saved.dat`\n"
">\n"
"> > ## Solution\n"
"> > We start in the `/Users/jamie/data` directory, and create a new folder called `recombined`.\n"
"> > The second line moves (`mv`) the file `proteins.dat` to the new folder (`recombined`).\n"
"> > The third line makes a copy of the file we just moved.\n"
"> > The tricky part here is where the file was copied to.\n"
"> > Recall that `..` means 'go up a level', so the copied file is now in `/Users/jamie`.\n"
"> > Notice that `..` is interpreted with respect to the current working\n"
"> > directory, **not** with respect to the location of the file being copied.\n"
"> > So, the only thing that will show using ls (in `/Users/jamie/data`) is the recombined folder.\n"
"> >\n"
"> > 1. No, see explanation above.  `proteins-saved.dat` is located at `/Users/jamie`\n"
"> > 2. Yes\n"
"> > 3. No, see explanation above.  `proteins.dat` is located at `/Users/jamie/data/recombined`\n"
"> > 4. No, see explanation above.  `proteins-saved.dat` is located at `/Users/jamie`"
msgstr ""

#: shell-novice/_episodes/03-create.md:562
# header
msgid "## Removing files and directories"
msgstr ""

#: shell-novice/_episodes/03-create.md:564
msgid "Returning to the `shell-lesson-data/exercise-data/writing` directory,\n"
"let's tidy up this directory by removing the `quotes.txt` file we created.\n"
"The Unix command we'll use for this is `rm` (short for 'remove'):"
msgstr ""

#: shell-novice/_episodes/03-create.md:568
# code block
msgid "~~~\n"
"$ rm quotes.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:573
msgid "We can confirm the file has gone using `ls`:"
msgstr ""

#: shell-novice/_episodes/03-create.md:580
# code block
msgid "```\n"
"ls: cannot access 'quotes.txt': No such file or directory\n"
"```"
msgstr ""

#: shell-novice/_episodes/03-create.md:585
# blockquote, which can be cascaded
msgid "> ## Deleting Is Forever"
msgstr ""

#: shell-novice/_episodes/03-create.md:586
msgid ">\n"
"> The Unix shell doesn't have a trash bin that we can recover deleted\n"
"> files from (though most graphical interfaces to Unix do).  Instead,\n"
"> when we delete files, they are unlinked from the file system so that\n"
"> their storage space on disk can be recycled. Tools for finding and\n"
"> recovering deleted files do exist, but there's no guarantee they'll\n"
"> work in any particular situation, since the computer may recycle the\n"
"> file's disk space right away."
msgstr ""

#: shell-novice/_episodes/03-create.md:597
# blockquote, which can be cascaded
msgid "> ## Using `rm` Safely"
msgstr ""

#: shell-novice/_episodes/03-create.md:598
msgid ">\n"
"> What happens when we execute `rm -i thesis_backup/quotations.txt`?\n"
"> Why would we want this protection when using `rm`?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > rm: remove regular file 'thesis_backup/quotations.txt'? y\n"
"> > ```\n"
"> > {: .output}\n"
"> > The `-i` option will prompt before (every) removal (use <kbd>Y</kbd> to confirm deletion\n"
"> > or <kbd>N</kbd> to keep the file).\n"
"> > The Unix shell doesn't have a trash bin, so all the files removed will disappear forever.\n"
"> > By using the `-i` option, we have the chance to check that we are deleting only the files\n"
"> > that we want to remove."
msgstr ""

#: shell-novice/_episodes/03-create.md:616
msgid "If we try to remove the `thesis` directory using `rm thesis`,\n"
"we get an error message:"
msgstr ""

#: shell-novice/_episodes/03-create.md:619
# code block
msgid "~~~\n"
"$ rm thesis\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:624
# code block
msgid "~~~\n"
"rm: cannot remove `thesis': Is a directory\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:629
msgid "This happens because `rm` by default only works on files, not directories."
msgstr ""

#: shell-novice/_episodes/03-create.md:631
msgid "`rm` can remove a directory *and all its contents* if we use the\n"
"recursive option `-r`, and it will do so *without any confirmation prompts*:"
msgstr ""

#: shell-novice/_episodes/03-create.md:634
# code block
msgid "~~~\n"
"$ rm -r thesis\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:639
msgid "Given that there is no way to retrieve files deleted using the shell,\n"
"`rm -r` *should be used with great caution*\n"
"(you might consider adding the interactive option `rm -r -i`)."
msgstr ""

#: shell-novice/_episodes/03-create.md:643
# header
msgid "## Operations with multiple files and directories"
msgstr ""

#: shell-novice/_episodes/03-create.md:645
msgid "Oftentimes one needs to copy or move several files at once.\n"
"This can be done by providing a list of individual filenames,\n"
"or specifying a naming pattern using wildcards."
msgstr ""

#: shell-novice/_episodes/03-create.md:649
# blockquote, which can be cascaded
msgid "> ## Copy with Multiple Filenames"
msgstr ""

#: shell-novice/_episodes/03-create.md:650
msgid ">\n"
"> For this exercise, you can test the commands in the `shell-lesson-data/exercise-data` directory.\n"
">\n"
"> In the example below, what does `cp` do when given several filenames and a directory name?\n"
">\n"
"> ~~~\n"
"> $ mkdir backup\n"
"> $ cp creatures/minotaur.dat creatures/unicorn.dat backup/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> In the example below, what does `cp` do when given three or more file names?\n"
">\n"
"> ~~~\n"
"> $ cd creatures\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> basilisk.dat  minotaur.dat  unicorn.dat\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:673
# blockquote, which can be cascaded
msgid "> $ cp minotaur.dat unicorn.dat basilisk.dat"
msgstr ""

#: shell-novice/_episodes/03-create.md:676
msgid ">\n"
"> > ## Solution\n"
"> > If given more than one file name followed by a directory name\n"
"> > (i.e. the destination directory must be the last argument),\n"
"> > `cp` copies the files to the named directory.\n"
"> >\n"
"> > If given three file names, `cp` throws an error such as the one below,\n"
"> > because it is expecting a directory name as the last argument.\n"
"> >\n"
"> > ```\n"
"> > cp: target 'basilisk.dat' is not a directory\n"
"> > ```\n"
"> > {: .error}"
msgstr ""

#: shell-novice/_episodes/03-create.md:692
# header
msgid "### Using wildcards for accessing multiple files at once"
msgstr ""

#: shell-novice/_episodes/03-create.md:694
#: shell-novice/_episodes/07-find.md:279
# blockquote, which can be cascaded
msgid "> ## Wildcards"
msgstr ""

#: shell-novice/_episodes/03-create.md:695
msgid ">\n"
"> `*` is a **wildcard**, which matches zero or more  characters.\n"
"> Let's consider the `shell-lesson-data/exercise-data/proteins` directory:\n"
"> `*.pdb` matches `ethane.pdb`, `propane.pdb`, and every\n"
"> file that ends with '.pdb'. On the other hand, `p*.pdb` only matches\n"
"> `pentane.pdb` and `propane.pdb`, because the 'p' at the front only\n"
"> matches filenames that begin with the letter 'p'.\n"
">\n"
"> `?` is also a wildcard, but it matches exactly one character.\n"
"> So `?ethane.pdb` would match `methane.pdb` whereas\n"
"> `*ethane.pdb` matches both `ethane.pdb`, and `methane.pdb`.\n"
">\n"
"> Wildcards can be used in combination with each other\n"
"> e.g. `???ane.pdb` matches three characters followed by `ane.pdb`,\n"
"> giving `cubane.pdb  ethane.pdb  octane.pdb`.\n"
">\n"
"> When the shell sees a wildcard, it expands the wildcard to create a\n"
"> list of matching filenames *before* running the command that was\n"
"> asked for. As an exception, if a wildcard expression does not match\n"
"> any file, Bash will pass the expression as an argument to the command\n"
"> as it is. For example, typing `ls *.pdf` in the `proteins` directory\n"
"> (which contains only files with names ending with `.pdb`) results in\n"
"> an error message that there is no file called `*.pdf`.\n"
"> However, generally commands like `wc` and `ls` see the lists of\n"
"> file names matching these expressions, but not the wildcards\n"
"> themselves. It is the shell, not the other programs, that deals with\n"
"> expanding wildcards."
msgstr ""

#: shell-novice/_episodes/03-create.md:724
# blockquote, which can be cascaded
msgid "> ## List filenames matching a pattern"
msgstr ""

#: shell-novice/_episodes/03-create.md:725
msgid ">\n"
"> When run in the `proteins` directory, which `ls` command(s) will\n"
"> produce this output?\n"
">\n"
"> `ethane.pdb   methane.pdb`\n"
">\n"
"> 1. `ls *t*ane.pdb`\n"
"> 2. `ls *t?ne.*`\n"
"> 3. `ls *t??ne.pdb`\n"
"> 4. `ls ethane.*`\n"
">\n"
"> > ## Solution\n"
">>  The solution is `3.`\n"
">>\n"
">> `1.` shows all files whose names contain zero or more characters (`*`)\n"
">> followed by the letter `t`,\n"
">> then zero or more characters (`*`) followed by `ane.pdb`.\n"
">> This gives `ethane.pdb  methane.pdb  octane.pdb  pentane.pdb`.\n"
">>\n"
">> `2.` shows all files whose names start with zero or more characters (`*`) followed by\n"
">> the letter `t`,\n"
">> then a single character (`?`), then `ne.` followed by zero or more characters (`*`).\n"
">> This will give us `octane.pdb` and `pentane.pdb` but doesn't match anything\n"
">> which ends in `thane.pdb`.\n"
">>\n"
">> `3.` fixes the problems of option 2 by matching two characters (`??`) between `t` and `ne`.\n"
">> This is the solution.\n"
">>\n"
">> `4.` only shows files starting with `ethane.`."
msgstr ""

#: shell-novice/_episodes/03-create.md:757
# blockquote, which can be cascaded
msgid "> ## More on Wildcards"
msgstr ""

#: shell-novice/_episodes/03-create.md:758
msgid ">\n"
"> Sam has a directory containing calibration data, datasets, and descriptions of\n"
"> the datasets:\n"
">\n"
"> ~~~\n"
"> .\n"
"> ├── 2015-10-23-calibration.txt\n"
"> ├── 2015-10-23-dataset1.txt\n"
"> ├── 2015-10-23-dataset2.txt\n"
"> ├── 2015-10-23-dataset_overview.txt\n"
"> ├── 2015-10-26-calibration.txt\n"
"> ├── 2015-10-26-dataset1.txt\n"
"> ├── 2015-10-26-dataset2.txt\n"
"> ├── 2015-10-26-dataset_overview.txt\n"
"> ├── 2015-11-23-calibration.txt\n"
"> ├── 2015-11-23-dataset1.txt\n"
"> ├── 2015-11-23-dataset2.txt\n"
"> ├── 2015-11-23-dataset_overview.txt\n"
"> ├── backup\n"
"> │   ├── calibration\n"
"> │   └── datasets\n"
"> └── send_to_bob\n"
">     ├── all_datasets_created_on_a_23rd\n"
">     └── all_november_files\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Before heading off to another field trip, she wants to back up her data and\n"
"> send some datasets to her colleague Bob. Sam uses the following commands\n"
"> to get the job done:\n"
">\n"
"> ~~~\n"
"> $ cp *dataset* backup/datasets\n"
"> $ cp ____calibration____ backup/calibration\n"
"> $ cp 2015-____-____ send_to_bob/all_november_files/\n"
"> $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Help Sam by filling in the blanks.\n"
">\n"
"> The resulting directory structure should look like this\n"
"> ```\n"
"> .\n"
"> ├── 2015-10-23-calibration.txt\n"
"> ├── 2015-10-23-dataset1.txt\n"
"> ├── 2015-10-23-dataset2.txt\n"
"> ├── 2015-10-23-dataset_overview.txt\n"
"> ├── 2015-10-26-calibration.txt\n"
"> ├── 2015-10-26-dataset1.txt\n"
"> ├── 2015-10-26-dataset2.txt\n"
"> ├── 2015-10-26-dataset_overview.txt\n"
"> ├── 2015-11-23-calibration.txt\n"
"> ├── 2015-11-23-dataset1.txt\n"
"> ├── 2015-11-23-dataset2.txt\n"
"> ├── 2015-11-23-dataset_overview.txt\n"
"> ├── backup\n"
"> │   ├── calibration\n"
"> │   │   ├── 2015-10-23-calibration.txt\n"
"> │   │   ├── 2015-10-26-calibration.txt\n"
"> │   │   └── 2015-11-23-calibration.txt\n"
"> │   └── datasets\n"
"> │       ├── 2015-10-23-dataset1.txt\n"
"> │       ├── 2015-10-23-dataset2.txt\n"
"> │       ├── 2015-10-23-dataset_overview.txt\n"
"> │       ├── 2015-10-26-dataset1.txt\n"
"> │       ├── 2015-10-26-dataset2.txt\n"
"> │       ├── 2015-10-26-dataset_overview.txt\n"
"> │       ├── 2015-11-23-dataset1.txt\n"
"> │       ├── 2015-11-23-dataset2.txt\n"
"> │       └── 2015-11-23-dataset_overview.txt\n"
"> └── send_to_bob\n"
">     ├── all_datasets_created_on_a_23rd\n"
">     │   ├── 2015-10-23-dataset1.txt\n"
">     │   ├── 2015-10-23-dataset2.txt\n"
">     │   ├── 2015-10-23-dataset_overview.txt\n"
">     │   ├── 2015-11-23-dataset1.txt\n"
">     │   ├── 2015-11-23-dataset2.txt\n"
">     │   └── 2015-11-23-dataset_overview.txt\n"
">     └── all_november_files\n"
">         ├── 2015-11-23-calibration.txt\n"
">         ├── 2015-11-23-dataset1.txt\n"
">         ├── 2015-11-23-dataset2.txt\n"
">         └── 2015-11-23-dataset_overview.txt\n"
"> ```\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cp *calibration.txt backup/calibration\n"
"> > $ cp 2015-11-* send_to_bob/all_november_files/\n"
"> > $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/03-create.md:855
# blockquote, which can be cascaded
msgid "> ## Organizing Directories and Files"
msgstr ""

#: shell-novice/_episodes/03-create.md:856
msgid ">\n"
"> Jamie is working on a project and she sees that her files aren't very well\n"
"> organized:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/  fructose.dat    raw/   sucrose.dat\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:868
msgid ">\n"
"> The `fructose.dat` and `sucrose.dat` files contain output from her data\n"
"> analysis. What command(s) covered in this lesson does she need to run\n"
"> so that the commands below will produce the output shown?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/   raw/\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:882
# blockquote, which can be cascaded
msgid "> $ ls analyzed"
msgstr ""

#: shell-novice/_episodes/03-create.md:886
# blockquote, which can be cascaded
msgid "> fructose.dat    sucrose.dat"
msgstr ""

#: shell-novice/_episodes/03-create.md:889
msgid ">\n"
"> > ## Solution\n"
"> > ```\n"
"> > mv *.dat analyzed\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Jamie needs to move her files `fructose.dat` and `sucrose.dat` to the `analyzed` directory.\n"
"> > The shell will expand *.dat to match all .dat files in the current directory.\n"
"> > The `mv` command then moves the list of .dat files to the 'analyzed' directory."
msgstr ""

#: shell-novice/_episodes/03-create.md:901
# blockquote, which can be cascaded
msgid "> ## Reproduce a folder structure"
msgstr ""

#: shell-novice/_episodes/03-create.md:902
msgid ">\n"
"> You're starting a new experiment and would like to duplicate the directory\n"
"> structure from your previous experiment so you can add new data.\n"
">\n"
"> Assume that the previous experiment is in a folder called `2016-05-18`,\n"
"> which contains a `data` folder that in turn contains folders named `raw` and\n"
"> `processed` that contain data files.  The goal is to copy the folder structure\n"
"> of the `2016-05-18` folder into a folder called `2016-05-20`\n"
"> so that your final directory structure looks like this:\n"
">\n"
"> ~~~\n"
"> 2016-05-20/\n"
"> └── data\n"
">    ├── processed\n"
">    └── raw\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/03-create.md:919
msgid ">\n"
"> Which of the following set of commands would achieve this objective?\n"
"> What would the other commands do?\n"
">\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ mkdir 2016-05-20/data\n"
"> $ mkdir 2016-05-20/data/processed\n"
"> $ mkdir 2016-05-20/data/raw\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ cd 2016-05-20\n"
"> $ mkdir data\n"
"> $ cd data\n"
"> $ mkdir raw processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20/data/raw\n"
"> $ mkdir 2016-05-20/data/processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir -p 2016-05-20/data/raw\n"
"> $ mkdir -p 2016-05-20/data/processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ cd 2016-05-20\n"
"> $ mkdir data\n"
"> $ mkdir raw processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> >\n"
"> > ## Solution\n"
"> > The first two sets of commands achieve this objective.\n"
"> > The first set uses relative paths to create the top-level directory before\n"
"> > the subdirectories.\n"
"> >\n"
"> > The third set of commands will give an error because the default behavior of `mkdir`\n"
"> > won't create a subdirectory of a non-existent directory:\n"
"> > the intermediate level folders must be created first.\n"
"> >\n"
"> > The fourth set of commands achieve this objective. Remember, the `-p` option,\n"
"> > followed by a path of one or more\n"
"> > directories, will cause `mkdir` to create any intermediate subdirectories as required.\n"
"> >\n"
"> > The final set of commands generates the 'raw' and 'processed' directories at the same level\n"
"> > as the 'data' directory."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:1
# Front Matter
msgid "---\n"
"title: \"Pipes and Filters\"\n"
"teaching: 25\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I combine existing commands to do new things?\"\n"
"objectives:\n"
"- \"Redirect a command's output to a file.\"\n"
"- \"Construct command pipelines with two or more stages.\"\n"
"- \"Explain what usually happens if a program or pipeline isn't given any input to process.\"\n"
"- \"Explain the advantage of linking commands with pipes and filters.\"\n"
"keypoints:\n"
"- \"`wc` counts lines, words, and characters in its inputs.\"\n"
"- \"`cat` displays the contents of its inputs.\"\n"
"- \"`sort` sorts its inputs.\"\n"
"- \"`head` displays the first 10 lines of its input.\"\n"
"- \"`tail` displays the last 10 lines of its input.\"\n"
"- \"`command > [file]` redirects a command's output to a file (overwriting any existing content).\"\n"
"- \"`command >> [file]` appends a command's output to a file.\"\n"
"- \"`[first] | [second]` is a pipeline: the output of the first command is used as the input to the second.\"\n"
"- \"The best way to use the shell is to use pipes to combine simple single-purpose programs (filters).\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:24
msgid "Now that we know a few basic commands,\n"
"we can finally look at the shell's most powerful feature:\n"
"the ease with which it lets us combine existing programs in new ways.\n"
"We'll start with the directory `shell-lesson-data/exercise-data/proteins`\n"
"that contains six files describing some simple organic molecules.\n"
"The `.pdb` extension indicates that these files are in Protein Data Bank format,\n"
"a simple text format that specifies the type and position of each atom in the molecule."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:37
# code block
msgid "~~~\n"
"cubane.pdb    methane.pdb    pentane.pdb\n"
"ethane.pdb    octane.pdb     propane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:43
msgid "Let's run an example command:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:45
# code block
msgid "~~~\n"
"$ wc cubane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:50
# code block
msgid "~~~\n"
"20  156 1158 cubane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:55
msgid "`wc` is the 'word count' command:\n"
"it counts the number of lines, words, and characters in files (from left to right, in that order)."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:58
msgid "If we run the command `wc *.pdb`, the `*` in `*.pdb` matches zero or more characters,\n"
"so the shell turns `*.pdb` into a list of all `.pdb` files in the current directory:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:61
# code block
msgid "~~~\n"
"$ wc *.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:66
# code block
msgid "~~~\n"
"  20  156  1158  cubane.pdb\n"
"  12  84   622   ethane.pdb\n"
"   9  57   422   methane.pdb\n"
"  30  246  1828  octane.pdb\n"
"  21  165  1226  pentane.pdb\n"
"  15  111  825   propane.pdb\n"
" 107  819  6081  total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:77
msgid "Note that `wc *.pdb` also shows the total number of all lines in the last line of the output."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:79
msgid "If we run `wc -l` instead of just `wc`,\n"
"the output shows only the number of lines per file:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:82
# code block
msgid "~~~\n"
"$ wc -l *.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:87
#: shell-novice/_episodes/04-pipefilter.md:166
# code block
msgid "~~~\n"
"  20  cubane.pdb\n"
"  12  ethane.pdb\n"
"   9  methane.pdb\n"
"  30  octane.pdb\n"
"  21  pentane.pdb\n"
"  15  propane.pdb\n"
" 107  total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:98
msgid "The `-m` and `-w` options can also be used with the `wc` command, to show\n"
"only the number of characters or the number of words in the files."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:101
# blockquote, which can be cascaded
msgid "> ## Why Isn't It Doing Anything?"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:102
msgid ">\n"
"> What happens if a command is supposed to process a file, but we\n"
"> don't give it a filename? For example, what if we type:\n"
">\n"
"> ~~~\n"
"> $ wc -l\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> but don't type `*.pdb` (or anything else) after the command?\n"
"> Since it doesn't have any filenames, `wc` assumes it is supposed to\n"
"> process input given at the command prompt, so it just sits there and waits for us to give\n"
"> it some data interactively. From the outside, though, all we see is it\n"
"> sitting there: the command doesn't appear to do anything.\n"
">\n"
"> If you make this kind of mistake, you can escape out of this state by holding down\n"
"> the control key (<kbd>Ctrl</kbd>) and typing the letter <kbd>C</kbd> once and\n"
"> letting go of the <kbd>Ctrl</kbd> key.\n"
"> <kbd>Ctrl</kbd>+<kbd>C</kbd>"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:124
# header
msgid "## Capturing output from commands"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:126
msgid "Which of these files contains the fewest lines?\n"
"It's an easy question to answer when there are only six files,\n"
"but what if there were 6000?\n"
"Our first step toward a solution is to run the command:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:131
# code block
msgid "~~~\n"
"$ wc -l *.pdb > lengths.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:136
msgid "The greater than symbol, `>`, tells the shell to **redirect** the command's output\n"
"to a file instead of printing it to the screen. (This is why there is no screen output:\n"
"everything that `wc` would have printed has gone into the\n"
"file `lengths.txt` instead.)  The shell will create\n"
"the file if it doesn't exist. If the file exists, it will be\n"
"silently overwritten, which may lead to data loss and thus requires\n"
"some caution.\n"
"`ls lengths.txt` confirms that the file exists:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:145
# code block
msgid "~~~\n"
"$ ls lengths.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:150
# code block
msgid "~~~\n"
"lengths.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:155
msgid "We can now send the content of `lengths.txt` to the screen using `cat lengths.txt`.\n"
"The `cat` command gets its name from 'concatenate' i.e. join together,\n"
"and it prints the contents of files one after another.\n"
"There's only one file in this case,\n"
"so `cat` just shows us what it contains:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:161
# code block
msgid "~~~\n"
"$ cat lengths.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:177
# blockquote, which can be cascaded
msgid "> ## Output Page by Page"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:178
msgid ">\n"
"> We'll continue to use `cat` in this lesson, for convenience and consistency,\n"
"> but it has the disadvantage that it always dumps the whole file onto your screen.\n"
"> More useful in practice is the command `less`,\n"
"> which you use with `less lengths.txt`.\n"
"> This displays a screenful of the file, and then stops.\n"
"> You can go forward one screenful by pressing the spacebar,\n"
"> or back one by pressing `b`.  Press `q` to quit."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:189
# header
msgid "## Filtering output"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:191
msgid "Next we'll use the `sort` command to sort the contents of the `lengths.txt` file.\n"
"But first we'll use an exercise to learn a little about the sort command:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:194
# blockquote, which can be cascaded
msgid "> ## What Does `sort -n` Do?"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:195
msgid ">\n"
"> The file `shell-lesson-data/exercise-data/numbers.txt` contains the following lines:\n"
">\n"
"> ~~~\n"
"> 10\n"
"> 2\n"
"> 19\n"
"> 22\n"
"> 6\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:205
#: shell-novice/_episodes/04-pipefilter.md:504
#: shell-novice/_episodes/05-loop.md:438
#: shell-novice/_episodes/06-script.md:304
#: shell-novice/_episodes/07-find.md:324
#: shell-novice/_episodes/07-find.md:336
# SC/DC Template label
msgid "> {: .source}"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:206
msgid ">\n"
"> If we run `sort` on this file, the output is:\n"
">\n"
"> ~~~\n"
"> 10\n"
"> 19\n"
"> 2\n"
"> 22\n"
"> 6\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:217
msgid ">\n"
"> If we run `sort -n` on the same file, we get this instead:\n"
">\n"
"> ~~~\n"
"> 2\n"
"> 6\n"
"> 10\n"
"> 19\n"
"> 22\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:228
msgid ">\n"
"> Explain why `-n` has this effect.\n"
">\n"
"> > ## Solution\n"
"> > The `-n` option specifies a numerical rather than an alphanumerical sort."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:236
msgid "We will also use the `-n` option to specify that the sort is\n"
"numerical instead of alphanumerical.\n"
"This does *not* change the file;\n"
"instead, it sends the sorted result to the screen:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:241
# code block
msgid "~~~\n"
"$ sort -n lengths.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:246
# code block
msgid "~~~\n"
"  9  methane.pdb\n"
" 12  ethane.pdb\n"
" 15  propane.pdb\n"
" 20  cubane.pdb\n"
" 21  pentane.pdb\n"
" 30  octane.pdb\n"
"107  total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:258
msgid "We can put the sorted list of lines in another temporary file called `sorted-lengths.txt`\n"
"by putting `> sorted-lengths.txt` after the command,\n"
"just as we used `> lengths.txt` to put the output of `wc` into `lengths.txt`.\n"
"Once we've done that,\n"
"we can run another command called `head` to get the first few lines in `sorted-lengths.txt`:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:264
# code block
msgid "~~~\n"
"$ sort -n lengths.txt > sorted-lengths.txt\n"
"$ head -n 1 sorted-lengths.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:270
#: shell-novice/_episodes/04-pipefilter.md:384
# code block
msgid "~~~\n"
"  9  methane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:275
msgid "Using `-n 1` with `head` tells it that\n"
"we only want the first line of the file;\n"
"`-n 20` would get the first 20,\n"
"and so on.\n"
"Since `sorted-lengths.txt` contains the lengths of our files ordered from least to greatest,\n"
"the output of `head` must be the file with the fewest lines."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:282
# blockquote, which can be cascaded
msgid "> ## Redirecting to the same file"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:283
msgid ">\n"
"> It's a very bad idea to try redirecting\n"
"> the output of a command that operates on a file\n"
"> to the same file. For example:\n"
">\n"
"> ~~~\n"
"> $ sort -n lengths.txt > lengths.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Doing something like this may give you\n"
"> incorrect results and/or delete\n"
"> the contents of `lengths.txt`."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:298
# blockquote, which can be cascaded
msgid "> ## What Does `>>` Mean?"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:299
msgid ">\n"
"> We have seen the use of `>`, but there is a similar operator `>>`\n"
"> which works slightly differently.\n"
"> We'll learn about the differences between these two operators by printing some strings.\n"
"> We can use the `echo` command to print strings e.g.\n"
">\n"
"> ~~~\n"
"> $ echo The echo command prints text\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> The echo command prints text\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:313
msgid ">\n"
"> Now test the commands below to reveal the difference between the two operators:\n"
">\n"
"> ~~~\n"
"> $ echo hello > testfile01.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> and:\n"
">\n"
"> ~~~\n"
"> $ echo hello >> testfile02.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: Try executing each command twice in a row and then examining the output files.\n"
">\n"
"> > ## Solution\n"
"> > In the first example with `>`, the string 'hello' is written to `testfile01.txt`,\n"
"> > but the file gets overwritten each time we run the command.\n"
"> >\n"
"> > We see from the second example that the `>>` operator also writes 'hello' to a file\n"
"> > (in this case`testfile02.txt`),\n"
"> > but appends the string to the file if it already exists\n"
"> > (i.e. when we run it for the second time)."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:341
# blockquote, which can be cascaded
msgid "> ## Appending Data"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:342
msgid ">\n"
"> We have already met the `head` command, which prints lines from the start of a file.\n"
"> `tail` is similar, but prints lines from the end of a file instead.\n"
">\n"
"> Consider the file `shell-lesson-data/exercise-data/animal-counts/animals.csv`.\n"
"> After these commands, select the answer that\n"
"> corresponds to the file `animals-subset.csv`:\n"
">\n"
"> ~~~\n"
"> $ head -n 3 animals.csv > animals-subset.csv\n"
"> $ tail -n 2 animals.csv >> animals-subset.csv\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. The first three lines of `animals.csv`\n"
"> 2. The last two lines of `animals.csv`\n"
"> 3. The first three lines and the last two lines of `animals.csv`\n"
"> 4. The second and third lines of `animals.csv`\n"
">\n"
"> > ## Solution\n"
"> > Option 3 is correct.\n"
"> > For option 1 to be correct we would only run the `head` command.\n"
"> > For option 2 to be correct we would only run the `tail` command.\n"
"> > For option 4 to be correct we would have to pipe the output of `head` into `tail -n 2`\n"
"> >  by doing `head -n 3 animals.csv | tail -n 2 > animals-subset.csv`"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:371
# header
msgid "## Passing output to another command"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:372
msgid "In our example of finding the file with the fewest lines,\n"
"we are using two intermediate files `lengths.txt` and `sorted-lengths.txt` to store output.\n"
"This is a confusing way to work because\n"
"even once you understand what `wc`, `sort`, and `head` do,\n"
"those intermediate files make it hard to follow what's going on.\n"
"We can make it easier to understand by running `sort` and `head` together:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:379
# code block
msgid "~~~\n"
"$ sort -n lengths.txt | head -n 1\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:389
msgid "The vertical bar, `|`, between the two commands is called a **pipe**.\n"
"It tells the shell that we want to use\n"
"the output of the command on the left\n"
"as the input to the command on the right."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:394
msgid "This has removed the need for the `sorted-lengths.txt` file."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:396
# header
msgid "## Combining multiple commands"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:397
msgid "Nothing prevents us from chaining pipes consecutively.\n"
"We can for example send the output of `wc` directly to `sort`,\n"
"and then the resulting output to `head`.\n"
"This removes the need for any intermediate files."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:402
msgid "We'll start by using a pipe to send the output of `wc` to `sort`:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:404
#: shell-novice/_episodes/06-script.md:236
# code block
msgid "~~~\n"
"$ wc -l *.pdb | sort -n\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:409
# code block
msgid "~~~\n"
"   9 methane.pdb\n"
"  12 ethane.pdb\n"
"  15 propane.pdb\n"
"  20 cubane.pdb\n"
"  21 pentane.pdb\n"
"  30 octane.pdb\n"
" 107 total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:420
msgid "We can then send that output through another pipe, to `head`, so that the full pipeline becomes:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:422
# code block
msgid "~~~\n"
"$ wc -l *.pdb | sort -n | head -n 1\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:427
# code block
msgid "~~~\n"
"   9  methane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:432
msgid "This is exactly like a mathematician nesting functions like *log(3x)*\n"
"and saying 'the log of three times *x*'.\n"
"In our case,\n"
"the calculation is 'head of sort of line count of `*.pdb`'."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:438
msgid "The redirection and pipes used in the last few commands are illustrated below:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:440
msgid "![Redirects and Pipes of different commands: \"wc -l *.pdb\" will direct the\n"
"output to the shell. \"wc -l *.pdb > lengths\" will direct output to the file\n"
"\"lengths\". \"wc -l *.pdb | sort -n | head -n 1\" will build a pipeline where the\n"
"output of the \"wc\" command is the input to the \"sort\" command, the output of\n"
"the \"sort\" command is the input to the \"head\" command and the output of the\n"
"\"head\" command is directed to the shell](../fig/redirects-and-pipes.svg)"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:447
# blockquote, which can be cascaded
msgid "> ## Piping Commands Together"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:448
msgid ">\n"
"> In our current directory, we want to find the 3 files which have the least number of\n"
"> lines. Which command listed below would work?\n"
">\n"
"> 1. `wc -l * > sort -n > head -n 3`\n"
"> 2. `wc -l * | sort -n | head -n 1-3`\n"
"> 3. `wc -l * | head -n 3 | sort -n`\n"
"> 4. `wc -l * | sort -n | head -n 3`\n"
">\n"
"> > ## Solution\n"
"> > Option 4 is the solution.\n"
"> > The pipe character `|` is used to connect the output from one command to\n"
"> > the input of another.\n"
"> > `>` is used to redirect standard output to a file.\n"
"> > Try it in the `shell-lesson-data/exercise-data/proteins` directory!"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:467
# header
msgid "## Tools designed to work together"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:468
msgid "This idea of linking programs together is why Unix has been so successful.\n"
"Instead of creating enormous programs that try to do many different things,\n"
"Unix programmers focus on creating lots of simple tools that each do one job well,\n"
"and that work well with each other.\n"
"This programming model is called 'pipes and filters'.\n"
"We've already seen pipes;\n"
"a **filter** is a program like `wc` or `sort`\n"
"that transforms a stream of input into a stream of output.\n"
"Almost all of the standard Unix tools can work this way:\n"
"unless told to do otherwise,\n"
"they read from standard input,\n"
"do something with what they've read,\n"
"and write to standard output."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:482
msgid "The key is that any program that reads lines of text from standard input\n"
"and writes lines of text to standard output\n"
"can be combined with every other program that behaves this way as well.\n"
"You can *and should* write your programs this way\n"
"so that you and other people can put those programs into pipes to multiply their power."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:489
# blockquote, which can be cascaded
msgid "> ## Pipe Reading Comprehension"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:490
msgid ">\n"
"> A file called `animals.csv` (in the `shell-lesson-data/exercise-data/animal-counts` folder)\n"
"> contains the following data:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer,5\n"
"> 2012-11-05,rabbit,22\n"
"> 2012-11-05,raccoon,7\n"
"> 2012-11-06,rabbit,19\n"
"> 2012-11-06,deer,2\n"
"> 2012-11-06,fox,4\n"
"> 2012-11-07,rabbit,16\n"
"> 2012-11-07,bear,1\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:505
msgid ">\n"
"> What text passes through each of the pipes and the final redirect in the pipeline below?\n"
"> Note, the `sort -r` command sorts in reverse order.\n"
">\n"
"> ~~~\n"
"> $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> Hint: build the pipeline up one command at a time to test your understanding\n"
"> > ## Solution\n"
"> > The `head` command extracts the first 5 lines from `animals.csv`.\n"
"> > Then, the last 3 lines are extracted from the previous 5 by using the `tail` command.\n"
"> > With the `sort -r` command those 3 lines are sorted in reverse order and finally,\n"
"> > the output is redirected to a file `final.txt`.\n"
"> > The content of this file can be checked by executing `cat final.txt`.\n"
"> > The file should contain the following lines:\n"
"> > ```\n"
"> > 2012-11-06,rabbit,19\n"
"> > 2012-11-06,deer,2\n"
"> > 2012-11-05,raccoon,7\n"
"> > ```\n"
"> > {: .source}"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:530
# blockquote, which can be cascaded
msgid "> ## Pipe Construction"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:531
msgid ">\n"
"> For the file `animals.csv` from the previous exercise, consider the following command:\n"
">\n"
"> ~~~\n"
"> $ cut -d , -f 2 animals.csv\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> The `cut` command is used to remove or 'cut out' certain sections of each line in the file,\n"
"> and `cut` expects the lines to be separated into columns by a <kbd>Tab</kbd> character.\n"
"> A character used in this way is a called a **delimiter**.\n"
"> In the example above we use the `-d` option to specify the comma as our delimiter character.\n"
"> We have also used the `-f` option to specify that we want to extract the second field (column).\n"
"> This gives the following output:\n"
">\n"
"> ~~~\n"
"> deer\n"
"> rabbit\n"
"> raccoon\n"
"> rabbit\n"
"> deer\n"
"> fox\n"
"> rabbit\n"
"> bear\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:557
msgid ">\n"
"> The `uniq` command filters out adjacent matching lines in a file.\n"
"> How could you extend this pipeline (using `uniq` and another command) to find\n"
"> out what animals the file contains (without any duplicates in their\n"
"> names)?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cut -d , -f 2 animals.csv | sort | uniq\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:571
# blockquote, which can be cascaded
msgid "> ## Which Pipe?"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:572
msgid ">\n"
"> The file `animals.csv` contains 8 lines of data formatted as follows:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer,5\n"
"> 2012-11-05,rabbit,22\n"
"> 2012-11-05,raccoon,7\n"
"> 2012-11-06,rabbit,19\n"
"> ...\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:583
msgid ">\n"
"> The `uniq` command has a `-c` option which gives a count of the\n"
"> number of times a line occurs in its input.  Assuming your current\n"
"> directory is `shell-lesson-data/exercise-data/animal-counts`,\n"
"> what command would you use to produce a table that shows\n"
"> the total count of each type of animal in the file?\n"
">\n"
"> 1.  `sort animals.csv | uniq -c`\n"
"> 2.  `sort -t, -k2,2 animals.csv | uniq -c`\n"
"> 3.  `cut -d, -f 2 animals.csv | uniq -c`\n"
"> 4.  `cut -d, -f 2 animals.csv | sort | uniq -c`\n"
"> 5.  `cut -d, -f 2 animals.csv | sort | uniq -c | wc -l`\n"
">\n"
"> > ## Solution\n"
"> > Option 4. is the correct answer.\n"
"> > If you have difficulty understanding why, try running the commands, or sub-sections of\n"
"> > the pipelines (make sure you are in the `shell-lesson-data/exercise-data/animal-counts`\n"
"> > directory)."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:604
# header
msgid "## Nelle's Pipeline: Checking Files"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:606
msgid "Nelle has run her samples through the assay machines\n"
"and created 17 files in the `north-pacific-gyre` directory described earlier.\n"
"As a quick check, starting from the `shell-lesson-data` directory, Nelle types:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:610
# code block
msgid "~~~\n"
"$ cd north-pacific-gyre\n"
"$ wc -l *.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:616
msgid "The output is 18 lines that look like this:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:618
# code block
msgid "~~~\n"
"300 NENE01729A.txt\n"
"300 NENE01729B.txt\n"
"300 NENE01736A.txt\n"
"300 NENE01751A.txt\n"
"300 NENE01751B.txt\n"
"300 NENE01812A.txt\n"
"... ...\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:629
msgid "Now she types this:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:631
# code block
msgid "~~~\n"
"$ wc -l *.txt | sort -n | head -n 5\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:636
# code block
msgid "~~~\n"
" 240 NENE02018B.txt\n"
" 300 NENE01729A.txt\n"
" 300 NENE01729B.txt\n"
" 300 NENE01736A.txt\n"
" 300 NENE01751A.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:645
msgid "Whoops: one of the files is 60 lines shorter than the others.\n"
"When she goes back and checks it,\n"
"she sees that she did that assay at 8:00 on a Monday morning --- someone\n"
"was probably in using the machine on the weekend,\n"
"and she forgot to reset it.\n"
"Before re-running that sample,\n"
"she checks to see if any files have too much data:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:653
# code block
msgid "~~~\n"
"$ wc -l *.txt | sort -n | tail -n 5\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:658
# code block
msgid "~~~\n"
" 300 NENE02040B.txt\n"
" 300 NENE02040Z.txt\n"
" 300 NENE02043A.txt\n"
" 300 NENE02043B.txt\n"
"5040 total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:667
msgid "Those numbers look good --- but what's that 'Z' doing there in the third-to-last line?\n"
"All of her samples should be marked 'A' or 'B';\n"
"by convention,\n"
"her lab uses 'Z' to indicate samples with missing information.\n"
"To find others like it, she does this:"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:673
# code block
msgid "~~~\n"
"$ ls *Z.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:678
# code block
msgid "~~~\n"
"NENE01971Z.txt    NENE02040Z.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:683
msgid "Sure enough,\n"
"when she checks the log on her laptop,\n"
"there's no depth recorded for either of those samples.\n"
"Since it's too late to get the information any other way,\n"
"she must exclude those two files from her analysis.\n"
"She could delete them using `rm`,\n"
"but there are actually some analyses she might do later where depth doesn't matter,\n"
"so instead, she'll have to be careful later on to select files using the wildcard expressions\n"
"`NENE*A.txt NENE*B.txt`."
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:694
# blockquote, which can be cascaded
msgid "> ## Removing Unneeded Files"
msgstr ""

#: shell-novice/_episodes/04-pipefilter.md:695
msgid ">\n"
"> Suppose you want to delete your processed data files, and only keep\n"
"> your raw files and processing script to save storage.\n"
"> The raw files end in `.dat` and the processed files end in `.txt`.\n"
"> Which of the following would remove all the processed data files,\n"
"> and *only* the processed data files?\n"
">\n"
"> 1. `rm ?.txt`\n"
"> 2. `rm *.txt`\n"
"> 3. `rm * .txt`\n"
"> 4. `rm *.*`\n"
">\n"
"> > ## Solution\n"
"> > 1. This would remove `.txt` files with one-character names\n"
"> > 2. This is the correct answer\n"
"> > 3. The shell would expand `*` to match everything in the current directory,\n"
"> > so the command would try to remove all matched files and an additional\n"
"> > file called `.txt`\n"
"> > 4. The shell would expand `*.*` to match all files with any extension,\n"
"> > so this command would delete all files"
msgstr ""

#: shell-novice/_episodes/05-loop.md:1
# Front Matter
msgid "---\n"
"title: \"Loops\"\n"
"teaching: 40\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I perform the same actions on many different files?\"\n"
"objectives:\n"
"- \"Write a loop that applies one or more commands separately to each file in a set of files.\"\n"
"- \"Trace the values taken on by a loop variable during execution of the loop.\"\n"
"- \"Explain the difference between a variable's name and its value.\"\n"
"- \"Explain why spaces and some punctuation characters shouldn't be used in file names.\"\n"
"- \"Demonstrate how to see what commands have recently been executed.\"\n"
"- \"Re-run recently executed commands without retyping them.\"\n"
"keypoints:\n"
"- \"A `for` loop repeats commands once for every thing in a list.\"\n"
"- \"Every `for` loop needs a variable to refer to the thing it is currently operating on.\"\n"
"- \"Use `$name` to expand a variable (i.e., get its value). `${name}` can also be used.\"\n"
"- \"Do not use spaces, quotes, or wildcard characters such as '*' or '?' in filenames, as it complicates variable expansion.\"\n"
"- \"Give files consistent names that are easy to match with wildcard patterns to make it easy to select them for looping.\"\n"
"- \"Use the up-arrow key to scroll up through previous commands to edit and repeat them.\"\n"
"- \"Use <kbd>Ctrl</kbd>+<kbd>R</kbd> to search through the previously entered commands.\"\n"
"- \"Use `history` to display recent commands, and `![number]` to repeat a command by number.\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/05-loop.md:25
msgid "**Loops** are a programming construct which allow us to repeat a command or set of commands\n"
"for each item in a list.\n"
"As such they are key to productivity improvements through automation.\n"
"Similar to wildcards and tab completion, using loops also reduces the\n"
"amount of typing required (and hence reduces the number of typing mistakes)."
msgstr ""

#: shell-novice/_episodes/05-loop.md:31
msgid "Suppose we have several hundred genome data files named `basilisk.dat`, `minotaur.dat`, and\n"
"`unicorn.dat`.\n"
"For this example, we'll use the `exercise-data/creatures` directory which only has three\n"
"example files,\n"
"but the principles can be applied to many many more files at once."
msgstr ""

#: shell-novice/_episodes/05-loop.md:37
msgid "The structure of these files is the same: the common name, classification, and updated date are\n"
"presented on the first three lines, with DNA sequences on the following lines.\n"
"Let's look at the files:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:41
# code block
msgid "```\n"
"$ head -n 5 basilisk.dat minotaur.dat unicorn.dat\n"
"```"
msgstr ""

#: shell-novice/_episodes/05-loop.md:46
msgid "We would like to print out the classification for each species, which is given on the second\n"
"line of each file.\n"
"For each file, we would need to execute the command `head -n 2` and pipe this to `tail -n 1`.\n"
"We’ll use a loop to solve this problem, but first let’s look at the general form of a loop,\n"
"using the pseudo-code below:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:52
# code block
msgid "```\n"
"for thing in list_of_things\n"
"do\n"
"    operation_using $thing    # Indentation within the loop is not required, but aids legibility\n"
"done\n"
"```"
msgstr ""

#: shell-novice/_episodes/05-loop.md:60
msgid "and we can apply this to our example like this:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:62
# code block
msgid "```\n"
"$ for filename in basilisk.dat minotaur.dat unicorn.dat\n"
"> do\n"
">     head -n 2 $filename | tail -n 1\n"
"> done\n"
"```"
msgstr ""

#: shell-novice/_episodes/05-loop.md:70
# code block
msgid "```\n"
"CLASSIFICATION: basiliscus vulgaris\n"
"CLASSIFICATION: bos hominus\n"
"CLASSIFICATION: equus monoceros\n"
"```"
msgstr ""

#: shell-novice/_episodes/05-loop.md:78
# blockquote, which can be cascaded
msgid "> ## Follow the Prompt"
msgstr ""

#: shell-novice/_episodes/05-loop.md:79
msgid ">\n"
"> The shell prompt changes from `$` to `>` and back again as we were\n"
"> typing in our loop. The second prompt, `>`, is different to remind\n"
"> us that we haven't finished typing a complete command yet. A semicolon, `;`,\n"
"> can be used to separate two commands written on a single line."
msgstr ""

#: shell-novice/_episodes/05-loop.md:86
msgid "When the shell sees the keyword `for`,\n"
"it knows to repeat a command (or group of commands) once for each item in a list.\n"
"Each time the loop runs (called an iteration), an item in the list is assigned in sequence to\n"
"the **variable**, and the commands inside the loop are executed, before moving on to\n"
"the next item in the list.\n"
"Inside the loop,\n"
"we call for the variable's value by putting `$` in front of it.\n"
"The `$` tells the shell interpreter to treat\n"
"the variable as a variable name and substitute its value in its place,\n"
"rather than treat it as text or an external command."
msgstr ""

#: shell-novice/_episodes/05-loop.md:97
msgid "In this example, the list is three filenames: `basilisk.dat`, `minotaur.dat`, and `unicorn.dat`.\n"
"Each time the loop iterates, it will assign a file name to the variable `filename`\n"
"and run the `head` command.\n"
"The first time through the loop,\n"
"`$filename` is `basilisk.dat`.\n"
"The interpreter runs the command `head` on `basilisk.dat`\n"
"and pipes the first two lines to the `tail` command,\n"
"which then prints the second line of `basilisk.dat`.\n"
"For the second iteration, `$filename` becomes\n"
"`minotaur.dat`. This time, the shell runs `head` on `minotaur.dat`\n"
"and pipes the first two lines to the `tail` command,\n"
"which then prints the second line of `minotaur.dat`.\n"
"For the third iteration, `$filename` becomes\n"
"`unicorn.dat`, so the shell runs the `head` command on that file,\n"
"and `tail` on the output of that.\n"
"Since the list was only three items, the shell exits the `for` loop."
msgstr ""

#: shell-novice/_episodes/05-loop.md:114
# blockquote, which can be cascaded
msgid "> ## Same Symbols, Different Meanings"
msgstr ""

#: shell-novice/_episodes/05-loop.md:115
msgid ">\n"
"> Here we see `>` being used as a shell prompt, whereas `>` is also\n"
"> used to redirect output.\n"
"> Similarly, `$` is used as a shell prompt, but, as we saw earlier,\n"
"> it is also used to ask the shell to get the value of a variable.\n"
">\n"
"> If the *shell* prints `>` or `$` then it expects you to type something,\n"
"> and the symbol is a prompt.\n"
">\n"
"> If *you* type `>` or `$` yourself, it is an instruction from you that\n"
"> the shell should redirect output or get the value of a variable."
msgstr ""

#: shell-novice/_episodes/05-loop.md:128
msgid "When using variables it is also\n"
"possible to put the names into curly braces to clearly delimit the variable\n"
"name: `$filename` is equivalent to `${filename}`, but is different from\n"
"`${file}name`. You may find this notation in other people's programs."
msgstr ""

#: shell-novice/_episodes/05-loop.md:133
msgid "We have called the variable in this loop `filename`\n"
"in order to make its purpose clearer to human readers.\n"
"The shell itself doesn't care what the variable is called;\n"
"if we wrote this loop as:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:138
# code block
msgid "~~~\n"
"$ for x in basilisk.dat minotaur.dat unicorn.dat\n"
"> do\n"
">     head -n 2 $x | tail -n 1\n"
"> done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:146
msgid "or:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:148
# code block
msgid "~~~\n"
"$ for temperature in basilisk.dat minotaur.dat unicorn.dat\n"
"> do\n"
">     head -n 2 $temperature | tail -n 1\n"
"> done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:156
msgid "it would work exactly the same way.\n"
"*Don't do this.*\n"
"Programs are only useful if people can understand them,\n"
"so meaningless names (like `x`) or misleading names (like `temperature`)\n"
"increase the odds that the program won't do what its readers think it does."
msgstr ""

#: shell-novice/_episodes/05-loop.md:162
msgid "In the above examples, the variables (`thing`, `filename`, `x` and `temperature`)\n"
"could have been given any other name, as long as it is meaningful to both the person\n"
"writing the code and the person reading it."
msgstr ""

#: shell-novice/_episodes/05-loop.md:166
msgid "Note also that loops can be used for other things than filenames, like a list of numbers\n"
"or a subset of data."
msgstr ""

#: shell-novice/_episodes/05-loop.md:169
# blockquote, which can be cascaded
msgid "> ## Write your own loop"
msgstr ""

#: shell-novice/_episodes/05-loop.md:170
msgid ">\n"
"> How would you write a loop that echoes all 10 numbers from 0 to 9?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > $ for loop_variable in 0 1 2 3 4 5 6 7 8 9\n"
"> > > do\n"
"> > >     echo $loop_variable\n"
"> > > done\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ```\n"
"> > 0\n"
"> > 1\n"
"> > 2\n"
"> > 3\n"
"> > 4\n"
"> > 5\n"
"> > 6\n"
"> > 7\n"
"> > 8\n"
"> > 9\n"
"> > ```\n"
"> > {: .output}"
msgstr ""

#: shell-novice/_episodes/05-loop.md:199
# blockquote, which can be cascaded
msgid "> ## Variables in Loops"
msgstr ""

#: shell-novice/_episodes/05-loop.md:200
msgid ">\n"
"> This exercise refers to the `shell-lesson-data/exercise-data/proteins` directory.\n"
"> `ls *.pdb` gives the following output:\n"
">\n"
"> ~~~\n"
"> cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:208
msgid ">\n"
"> What is the output of the following code?\n"
">\n"
"> ~~~\n"
"> $ for datafile in *.pdb\n"
"> > do\n"
"> >     ls *.pdb\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Now, what is the output of the following code?\n"
">\n"
"> ~~~\n"
"> $ for datafile in *.pdb\n"
"> > do\n"
"> >     ls $datafile\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Why do these two loops give different outputs?\n"
">\n"
"> > ## Solution\n"
"> > The first code block gives the same output on each iteration through\n"
"> > the loop.\n"
"> > Bash expands the wildcard `*.pdb` within the loop body (as well as\n"
"> > before the loop starts) to match all files ending in `.pdb`\n"
"> > and then lists them using `ls`.\n"
"> > The expanded loop would look like this:\n"
"> > ```\n"
"> > $ for datafile in cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > > do\n"
"> > >     ls cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > > done\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ```\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb\n"
"> > ```\n"
"> > {: .output}\n"
"> >\n"
"> > The second code block lists a different file on each loop iteration.\n"
"> > The value of the `datafile` variable is evaluated using `$datafile`,\n"
"> > and then listed using `ls`.\n"
"> >\n"
"> > ```\n"
"> > cubane.pdb\n"
"> > ethane.pdb\n"
"> > methane.pdb\n"
"> > octane.pdb\n"
"> > pentane.pdb\n"
"> > propane.pdb\n"
"> > ```\n"
"> > {: .output}"
msgstr ""

#: shell-novice/_episodes/05-loop.md:272
# blockquote, which can be cascaded
msgid "> ## Limiting Sets of Files"
msgstr ""

#: shell-novice/_episodes/05-loop.md:273
msgid ">\n"
"> What would be the output of running the following loop in the\n"
"> `shell-lesson-data/exercise-data/proteins` directory?\n"
">\n"
"> ~~~\n"
"> $ for filename in c*\n"
"> > do\n"
"> >     ls $filename\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  No files are listed.\n"
"> 2.  All files are listed.\n"
"> 3.  Only `cubane.pdb`, `octane.pdb` and `pentane.pdb` are listed.\n"
"> 4.  Only `cubane.pdb` is listed.\n"
">\n"
"> > ## Solution\n"
"> > 4 is the correct answer. `*` matches zero or more characters, so any file name starting with\n"
"> > the letter c, followed by zero or more other characters will be matched."
msgstr ""

#: shell-novice/_episodes/05-loop.md:294
msgid ">\n"
"> How would the output differ from using this command instead?\n"
">\n"
"> ~~~\n"
"> $ for filename in *c*\n"
"> > do\n"
"> >     ls $filename\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  The same files would be listed.\n"
"> 2.  All the files are listed this time.\n"
"> 3.  No files are listed this time.\n"
"> 4.  The files `cubane.pdb` and `octane.pdb` will be listed.\n"
"> 5.  Only the file `octane.pdb` will be listed.\n"
">\n"
"> > ## Solution\n"
"> > 4 is the correct answer. `*` matches zero or more characters, so a file name with zero or more\n"
"> > characters before a letter c and zero or more characters after the letter c will be matched."
msgstr ""

#: shell-novice/_episodes/05-loop.md:317
# blockquote, which can be cascaded
msgid "> ## Saving to a File in a Loop - Part One"
msgstr ""

#: shell-novice/_episodes/05-loop.md:318
msgid ">\n"
"> In the `shell-lesson-data/exercise-data/proteins` directory, what is the effect of this loop?\n"
">\n"
"> ~~~\n"
"> for alkanes in *.pdb\n"
"> do\n"
">     echo $alkanes\n"
">     cat $alkanes > alkanes.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, `pentane.pdb` and\n"
">    `propane.pdb`, and the text from `propane.pdb` will be saved to a file called `alkanes.pdb`.\n"
"> 2.  Prints `cubane.pdb`, `ethane.pdb`, and `methane.pdb`, and the text from all three files\n"
">     would be concatenated and saved to a file called `alkanes.pdb`.\n"
"> 3.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, and `pentane.pdb`,\n"
">     and the text from `propane.pdb` will be saved to a file called `alkanes.pdb`.\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > 1. The text from each file in turn gets written to the `alkanes.pdb` file.\n"
"> > However, the file gets overwritten on each loop iteration, so the final content of\n"
"> > `alkanes.pdb`\n"
"> > is the text from the `propane.pdb` file."
msgstr ""

#: shell-novice/_episodes/05-loop.md:346
# blockquote, which can be cascaded
msgid "> ## Saving to a File in a Loop - Part Two"
msgstr ""

#: shell-novice/_episodes/05-loop.md:347
msgid ">\n"
"> Also in the `shell-lesson-data/exercise-data/proteins` directory,\n"
"> what would be the output of the following loop?\n"
">\n"
"> ~~~\n"
"> for datafile in *.pdb\n"
"> do\n"
">     cat $datafile >> all.pdb\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, and\n"
">     `pentane.pdb` would be concatenated and saved to a file called `all.pdb`.\n"
"> 2.  The text from `ethane.pdb` will be saved to a file called `all.pdb`.\n"
"> 3.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, `pentane.pdb`\n"
">     and `propane.pdb` would be concatenated and saved to a file called `all.pdb`.\n"
"> 4.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, `pentane.pdb`\n"
">     and `propane.pdb` would be printed to the screen and saved to a file called `all.pdb`.\n"
">\n"
"> > ## Solution\n"
"> > 3 is the correct answer. `>>` appends to a file, rather than overwriting it with the redirected\n"
"> > output from a command.\n"
"> > Given the output from the `cat` command has been redirected, nothing is printed to the screen."
msgstr ""

#: shell-novice/_episodes/05-loop.md:374
msgid "Let's continue with our example in the `shell-lesson-data/exercise-data/creatures` directory.\n"
"Here's a slightly more complicated loop:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:377
# code block
msgid "~~~\n"
"$ for filename in *.dat\n"
"> do\n"
">     echo $filename\n"
">     head -n 100 $filename | tail -n 20\n"
"> done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:386
msgid "The shell starts by expanding `*.dat` to create the list of files it will process.\n"
"The **loop body**\n"
"then executes two commands for each of those files.\n"
"The first command, `echo`, prints its command-line arguments to standard output.\n"
"For example:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:392
# code block
msgid "~~~\n"
"$ echo hello there\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:397
msgid "prints:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:399
# code block
msgid "~~~\n"
"hello there\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:404
msgid "In this case,\n"
"since the shell expands `$filename` to be the name of a file,\n"
"`echo $filename` prints the name of the file.\n"
"Note that we can't write this as:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:409
# code block
msgid "~~~\n"
"$ for filename in *.dat\n"
"> do\n"
">     $filename\n"
">     head -n 100 $filename | tail -n 20\n"
"> done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:418
msgid "because then the first time through the loop,\n"
"when `$filename` expanded to `basilisk.dat`, the shell would try to run `basilisk.dat` as\n"
"a program.\n"
"Finally,\n"
"the `head` and `tail` combination selects lines 81-100\n"
"from whatever file is being processed\n"
"(assuming the file has at least 100 lines)."
msgstr ""

#: shell-novice/_episodes/05-loop.md:426
# blockquote, which can be cascaded
msgid "> ## Spaces in Names"
msgstr ""

#: shell-novice/_episodes/05-loop.md:427
msgid ">\n"
"> Spaces are used to separate the elements of the list\n"
"> that we are going to loop over. If one of those elements\n"
"> contains a space character, we need to surround it with\n"
"> quotes, and do the same thing to our loop variable.\n"
"> Suppose our data files are named:\n"
">\n"
"> ~~~\n"
"> red dragon.dat\n"
"> purple unicorn.dat\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:439
msgid ">\n"
"> To loop over these files, we would need to add double quotes like so:\n"
">\n"
"> ~~~\n"
"> $ for filename in \"red dragon.dat\" \"purple unicorn.dat\"\n"
"> > do\n"
"> >     head -n 100 \"$filename\" | tail -n 20\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> It is simpler to avoid using spaces (or other special characters) in filenames.\n"
">\n"
"> The files above don't exist, so if we run the above code, the `head` command will be unable\n"
"> to find them, however the error message returned will show the name of the files it is\n"
"> expecting:\n"
">\n"
"> ~~~\n"
"> head: cannot open ‘red dragon.dat’ for reading: No such file or directory\n"
"> head: cannot open ‘purple unicorn.dat’ for reading: No such file or directory\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:461
msgid ">\n"
"> Try removing the quotes around `$filename` in the loop above to see the effect of the quote\n"
"> marks on spaces. Note that we get a result from the loop command for unicorn.dat\n"
"> when we run this code in the `creatures` directory:\n"
">\n"
"> ~~~\n"
"> head: cannot open ‘red’ for reading: No such file or directory\n"
"> head: cannot open ‘dragon.dat’ for reading: No such file or directory\n"
"> head: cannot open ‘purple’ for reading: No such file or directory\n"
"> CGGTACCGAA\n"
"> AAGGGTCGCG\n"
"> CAAGTGTTCC\n"
"> ...\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:478
msgid "We would like to modify each of the files in `shell-lesson-data/exercise-data/creatures`,\n"
"but also save a version\n"
"of the original files, naming the copies `original-basilisk.dat` and `original-unicorn.dat`.\n"
"We can't use:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:483
# code block
msgid "~~~\n"
"$ cp *.dat original-*.dat\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:488
msgid "because that would expand to:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:490
# code block
msgid "~~~\n"
"$ cp basilisk.dat minotaur.dat unicorn.dat original-*.dat\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:495
msgid "This wouldn't back up our files, instead we get an error:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:497
# code block
msgid "~~~\n"
"cp: target `original-*.dat' is not a directory\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:502
msgid "This problem arises when `cp` receives more than two inputs. When this happens, it\n"
"expects the last input to be a directory where it can copy all the files it was passed.\n"
"Since there is no directory named `original-*.dat` in the `creatures` directory we get an\n"
"error."
msgstr ""

#: shell-novice/_episodes/05-loop.md:507
msgid "Instead, we can use a loop:\n"
"~~~\n"
"$ for filename in *.dat\n"
"> do\n"
">     cp $filename original-$filename\n"
"> done\n"
"~~~\n"
"{: .language-bash}"
msgstr ""

#: shell-novice/_episodes/05-loop.md:516
msgid "This loop runs the `cp` command once for each filename.\n"
"The first time,\n"
"when `$filename` expands to `basilisk.dat`,\n"
"the shell executes:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:521
# code block
msgid "~~~\n"
"cp basilisk.dat original-basilisk.dat\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:526
msgid "The second time, the command is:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:528
# code block
msgid "~~~\n"
"cp minotaur.dat original-minotaur.dat\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:533
msgid "The third and last time, the command is:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:535
# code block
msgid "~~~\n"
"cp unicorn.dat original-unicorn.dat\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:540
msgid "Since the `cp` command does not normally produce any output, it's hard to check\n"
"that the loop is doing the correct thing.\n"
"However, we learned earlier how to print strings using `echo`, and we can modify the loop\n"
"to use `echo` to print our commands without actually executing them.\n"
"As such we can check what commands *would be* run in the unmodified loop."
msgstr ""

#: shell-novice/_episodes/05-loop.md:546
msgid "The following diagram\n"
"shows what happens when the modified loop is executed, and demonstrates how the\n"
"judicious use of `echo` is a good debugging technique."
msgstr ""

#: shell-novice/_episodes/05-loop.md:550
msgid "![The for loop \"for filename in *.dat; do echo cp $filename original-$filename;\n"
"done\" will successively assign the names of all \"*.dat\" files in your current\n"
"directory to the variable \"$filename\" and then execute the command. With the\n"
"files \"basilisk.dat\", \"minotaur.dat\" and \"unicorn.dat\" in the current directory\n"
"the loop will successively call the echo command three times and print three\n"
"lines: \"cp basislisk.dat original-basilisk.dat\", then \"cp minotaur.dat\n"
"original-minotaur.dat\" and finally \"cp unicorn.dat\n"
"original-unicorn.dat\"](../fig/shell_script_for_loop_flow_chart.svg)"
msgstr ""

#: shell-novice/_episodes/05-loop.md:559
# header
msgid "## Nelle's Pipeline: Processing Files"
msgstr ""

#: shell-novice/_episodes/05-loop.md:561
msgid "Nelle is now ready to process her data files using `goostats.sh` ---\n"
"a shell script written by her supervisor.\n"
"This calculates some statistics from a protein sample file, and takes two arguments:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:565
# ordered list
msgid "1. an input file (containing the raw data)"
msgstr ""

#: shell-novice/_episodes/05-loop.md:566
# ordered list
msgid "2. an output file (to store the calculated statistics)"
msgstr ""

#: shell-novice/_episodes/05-loop.md:568
msgid "Since she's still learning how to use the shell,\n"
"she decides to build up the required commands in stages.\n"
"Her first step is to make sure that she can select the right input files --- remember,\n"
"these are ones whose names end in 'A' or 'B', rather than 'Z'.\n"
"Starting from her home directory, Nelle types:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:574
# code block
msgid "~~~\n"
"$ cd north-pacific-gyre\n"
"$ for datafile in NENE*A.txt NENE*B.txt\n"
"> do\n"
">     echo $datafile\n"
"> done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:583
# code block
msgid "~~~\n"
"NENE01729A.txt\n"
"NENE01729B.txt\n"
"NENE01736A.txt\n"
"...\n"
"NENE02043A.txt\n"
"NENE02043B.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:593
msgid "Her next step is to decide\n"
"what to call the files that the `goostats.sh` analysis program will create.\n"
"Prefixing each input file's name with 'stats' seems simple,\n"
"so she modifies her loop to do that:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:598
# code block
msgid "~~~\n"
"$ for datafile in NENE*A.txt NENE*B.txt\n"
"> do\n"
">     echo $datafile stats-$datafile\n"
"> done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:606
# code block
msgid "~~~\n"
"NENE01729A.txt stats-NENE01729A.txt\n"
"NENE01729B.txt stats-NENE01729B.txt\n"
"NENE01736A.txt stats-NENE01736A.txt\n"
"...\n"
"NENE02043A.txt stats-NENE02043A.txt\n"
"NENE02043B.txt stats-NENE02043B.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:616
msgid "She hasn't actually run `goostats.sh` yet,\n"
"but now she's sure she can select the right files and generate the right output filenames."
msgstr ""

#: shell-novice/_episodes/05-loop.md:619
msgid "Typing in commands over and over again is becoming tedious,\n"
"though,\n"
"and Nelle is worried about making mistakes,\n"
"so instead of re-entering her loop,\n"
"she presses <kbd>↑</kbd>.\n"
"In response,\n"
"the shell redisplays the whole loop on one line\n"
"(using semi-colons to separate the pieces):"
msgstr ""

#: shell-novice/_episodes/05-loop.md:628
# code block
msgid "~~~\n"
"$ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:633
msgid "Using the left arrow key,\n"
"Nelle backs up and changes the command `echo` to `bash goostats.sh`:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:636
# code block
msgid "~~~\n"
"$ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:641
msgid "When she presses <kbd>Enter</kbd>,\n"
"the shell runs the modified command.\n"
"However, nothing appears to happen --- there is no output.\n"
"After a moment, Nelle realizes that since her script doesn't print anything to the screen\n"
"any longer, she has no idea whether it is running, much less how quickly.\n"
"She kills the running command by typing <kbd>Ctrl</kbd>+<kbd>C</kbd>,\n"
"uses <kbd>↑</kbd> to repeat the command,\n"
"and edits it to read:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:650
# code block
msgid "~~~\n"
"$ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile;\n"
"bash goostats.sh $datafile stats-$datafile; done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:656
# blockquote, which can be cascaded
msgid "> ## Beginning and End"
msgstr ""

#: shell-novice/_episodes/05-loop.md:657
msgid ">\n"
"> We can move to the beginning of a line in the shell by typing <kbd>Ctrl</kbd>+<kbd>A</kbd>\n"
"> and to the end using <kbd>Ctrl</kbd>+<kbd>E</kbd>."
msgstr ""

#: shell-novice/_episodes/05-loop.md:662
msgid "When she runs her program now,\n"
"it produces one line of output every five seconds or so:"
msgstr ""

#: shell-novice/_episodes/05-loop.md:665
# code block
msgid "~~~\n"
"NENE01729A.txt\n"
"NENE01729B.txt\n"
"NENE01736A.txt\n"
"...\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:673
msgid "1518 times 5 seconds,\n"
"divided by 60,\n"
"tells her that her script will take about two hours to run.\n"
"As a final check,\n"
"she opens another terminal window,\n"
"goes into `north-pacific-gyre`,\n"
"and uses `cat stats-NENE01729B.txt`\n"
"to examine one of the output files.\n"
"It looks good,\n"
"so she decides to get some coffee and catch up on her reading."
msgstr ""

#: shell-novice/_episodes/05-loop.md:684
# blockquote, which can be cascaded
msgid "> ## Those Who Know History Can Choose to Repeat It"
msgstr ""

#: shell-novice/_episodes/05-loop.md:685
msgid ">\n"
"> Another way to repeat previous work is to use the `history` command to\n"
"> get a list of the last few hundred commands that have been executed, and\n"
"> then to use `!123` (where '123' is replaced by the command number) to\n"
"> repeat one of those commands. For example, if Nelle types this:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
">   456  ls -l NENE0*.txt\n"
">   457  rm stats-NENE01729B.txt.txt\n"
">   458  bash goostats.sh NENE01729B.txt stats-NENE01729B.txt\n"
">   459  ls -l NENE0*.txt\n"
">   460  history\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/05-loop.md:703
msgid ">\n"
"> then she can re-run `goostats.sh` on `NENE01729B.txt` simply by typing\n"
"> `!458`."
msgstr ""

#: shell-novice/_episodes/05-loop.md:708
# blockquote, which can be cascaded
msgid "> ## Other History Commands"
msgstr ""

#: shell-novice/_episodes/05-loop.md:709
msgid ">\n"
"> There are a number of other shortcut commands for getting at the history.\n"
">\n"
"> - <kbd>Ctrl</kbd>+<kbd>R</kbd> enters a history search mode 'reverse-i-search' and finds the\n"
"> most recent command in your history that matches the text you enter next.\n"
"> Press <kbd>Ctrl</kbd>+<kbd>R</kbd> one or more additional times to search for earlier matches.\n"
"> You can then use the left and right arrow keys to choose that line and edit\n"
"> it then hit <kbd>Return</kbd> to run the command.\n"
"> - `!!` retrieves the immediately preceding command\n"
"> (you may or may not find this more convenient than using <kbd>↑</kbd>)\n"
"> - `!$` retrieves the last word of the last command.\n"
"> That's useful more often than you might expect: after\n"
"> `bash goostats.sh NENE01729B.txt stats-NENE01729B.txt`, you can type\n"
"> `less !$` to look at the file `stats-NENE01729B.txt`, which is\n"
"> quicker than doing <kbd>↑</kbd> and editing the command-line."
msgstr ""

#: shell-novice/_episodes/05-loop.md:726
# blockquote, which can be cascaded
msgid "> ## Doing a Dry Run"
msgstr ""

#: shell-novice/_episodes/05-loop.md:727
msgid ">\n"
"> A loop is a way to do many things at once --- or to make many mistakes at\n"
"> once if it does the wrong thing. One way to check what a loop *would* do\n"
"> is to `echo` the commands it would run instead of actually running them.\n"
">\n"
"> Suppose we want to preview the commands the following loop will execute\n"
"> without actually running those commands:\n"
">\n"
"> ~~~\n"
"> $ for datafile in *.pdb\n"
"> > do\n"
"> >     cat $datafile >> all.pdb\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the difference between the two loops below, and which one would we\n"
"> want to run?\n"
">\n"
"> ~~~\n"
"> # Version 1\n"
"> $ for datafile in *.pdb\n"
"> > do\n"
"> >     echo cat $datafile >> all.pdb\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Version 2\n"
"> $ for datafile in *.pdb\n"
"> > do\n"
"> >     echo \"cat $datafile >> all.pdb\"\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > The second version is the one we want to run.\n"
"> > This prints to screen everything enclosed in the quote marks, expanding the\n"
"> > loop variable name because we have prefixed it with a dollar sign.\n"
"> > It also *does not* modify nor create the file `all.pdb`, as the `>>`\n"
"> > is treated literally as part of a string rather than as a\n"
"> > redirection instruction.\n"
"> >\n"
"> > The first version appends the output from the command `echo cat $datafile`\n"
"> > to the file, `all.pdb`. This file will just contain the list;\n"
"> > `cat cubane.pdb`, `cat ethane.pdb`, `cat methane.pdb` etc.\n"
"> >\n"
"> > Try both versions for yourself to see the output! Be sure to open the\n"
"> > `all.pdb` file to view its contents."
msgstr ""

#: shell-novice/_episodes/05-loop.md:781
# blockquote, which can be cascaded
msgid "> ## Nested Loops"
msgstr ""

#: shell-novice/_episodes/05-loop.md:782
msgid ">\n"
"> Suppose we want to set up a directory structure to organize\n"
"> some experiments measuring reaction rate constants with different compounds\n"
"> *and* different temperatures.  What would be the\n"
"> result of the following code:\n"
">\n"
"> ~~~\n"
"> $ for species in cubane ethane methane\n"
"> > do\n"
"> >     for temperature in 25 30 37 40\n"
"> >     do\n"
"> >         mkdir $species-$temperature\n"
"> >     done\n"
"> > done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > We have a nested loop, i.e. contained within another loop, so for each species\n"
"> > in the outer loop, the inner loop (the nested loop) iterates over the list of\n"
"> > temperatures, and creates a new directory for each combination.\n"
"> >\n"
"> > Try running the code for yourself to see which directories are created!"
msgstr ""

#: shell-novice/_episodes/06-script.md:1
# Front Matter
msgid "---\n"
"title: \"Shell Scripts\"\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I save and re-use commands?\"\n"
"objectives:\n"
"- \"Write a shell script that runs a command or series of commands for a fixed set of files.\"\n"
"- \"Run a shell script from the command line.\"\n"
"- \"Write a shell script that operates on a set of files defined by the user on the command line.\"\n"
"- \"Create pipelines that include shell scripts you, and others, have written.\"\n"
"keypoints:\n"
"- \"Save commands in files (usually called shell scripts) for re-use.\"\n"
"- \"`bash [filename]` runs the commands saved in a file.\"\n"
"- \"`$@` refers to all of a shell script's command-line arguments.\"\n"
"- \"`$1`, `$2`, etc., refer to the first command-line argument, the second command-line argument, etc.\"\n"
"- \"Place variables in quotes if the values might have spaces in them.\"\n"
"- \"Letting users decide what files to process is more flexible and more consistent with built-in Unix commands.\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/06-script.md:21
msgid "We are finally ready to see what makes the shell such a powerful programming environment.\n"
"We are going to take the commands we repeat frequently and save them in files\n"
"so that we can re-run all those operations again later by typing a single command.\n"
"For historical reasons,\n"
"a bunch of commands saved in a file is usually called a **shell script**,\n"
"but make no mistake:\n"
"these are actually small programs."
msgstr ""

#: shell-novice/_episodes/06-script.md:29
msgid "Not only will writing shell scripts make your work faster ---\n"
"you won't have to retype the same commands over and over again ---\n"
"it will also make it more accurate (fewer chances for typos) and more reproducible.\n"
"If you come back to your work later (or if someone else finds your work and wants to build on it)\n"
"you will be able to reproduce the same results simply by running your script,\n"
"rather than having to remember or retype a long list of commands."
msgstr ""

#: shell-novice/_episodes/06-script.md:36
msgid "Let's start by going back to `proteins/` and creating a new file, `middle.sh` which will\n"
"become our shell script:"
msgstr ""

#: shell-novice/_episodes/06-script.md:39
# code block
msgid "~~~\n"
"$ cd proteins\n"
"$ nano middle.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:45
msgid "The command `nano middle.sh` opens the file `middle.sh` within the text editor 'nano'\n"
"(which runs within the shell).\n"
"If the file does not exist, it will be created.\n"
"We can use the text editor to directly edit the file -- we'll simply insert the following line:"
msgstr ""

#: shell-novice/_episodes/06-script.md:50
# code block
msgid "~~~\n"
"head -n 15 octane.pdb | tail -n 5\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:53
#: shell-novice/_episodes/06-script.md:114
#: shell-novice/_episodes/06-script.md:175
#: shell-novice/_episodes/06-script.md:224
#: shell-novice/_episodes/06-script.md:269
#: shell-novice/_episodes/06-script.md:359
# SC/DC Template label
msgid "{: .source}"
msgstr ""

#: shell-novice/_episodes/06-script.md:55
msgid "This is a variation on the pipe we constructed earlier:\n"
"it selects lines 11-15 of the file `octane.pdb`.\n"
"Remember, we are *not* running it as a command just yet:\n"
"we are putting the commands in a file."
msgstr ""

#: shell-novice/_episodes/06-script.md:60
msgid "Then we save the file (`Ctrl-O` in nano),\n"
" and exit the text editor (`Ctrl-X` in nano).\n"
"Check that the directory `proteins` now contains a file called `middle.sh`."
msgstr ""

#: shell-novice/_episodes/06-script.md:64
msgid "Once we have saved the file,\n"
"we can ask the shell to execute the commands it contains.\n"
"Our shell is called `bash`, so we run the following command:"
msgstr ""

#: shell-novice/_episodes/06-script.md:68
# code block
msgid "~~~\n"
"$ bash middle.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:73
#: shell-novice/_episodes/06-script.md:125
# code block
msgid "~~~\n"
"ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00\n"
"ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00\n"
"ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00\n"
"ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00\n"
"ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:82
msgid "Sure enough,\n"
"our script's output is exactly what we would get if we ran that pipeline directly."
msgstr ""

#: shell-novice/_episodes/06-script.md:85
# blockquote, which can be cascaded
msgid "> ## Text vs. Whatever"
msgstr ""

#: shell-novice/_episodes/06-script.md:86
msgid ">\n"
"> We usually call programs like Microsoft Word or LibreOffice Writer \"text\n"
"> editors\", but we need to be a bit more careful when it comes to\n"
"> programming. By default, Microsoft Word uses `.docx` files to store not\n"
"> only text, but also formatting information about fonts, headings, and so\n"
"> on. This extra information isn't stored as characters and doesn't mean\n"
"> anything to tools like `head`: they expect input files to contain\n"
"> nothing but the letters, digits, and punctuation on a standard computer\n"
"> keyboard. When editing programs, therefore, you must either use a plain\n"
"> text editor, or be careful to save files as plain text."
msgstr ""

#: shell-novice/_episodes/06-script.md:98
msgid "What if we want to select lines from an arbitrary file?\n"
"We could edit `middle.sh` each time to change the filename,\n"
"but that would probably take longer than typing the command out again\n"
"in the shell and executing it with a new file name.\n"
"Instead, let's edit `middle.sh` and make it more versatile:"
msgstr ""

#: shell-novice/_episodes/06-script.md:104
#: shell-novice/_episodes/06-script.md:167
#: shell-novice/_episodes/06-script.md:214
# code block
msgid "~~~\n"
"$ nano middle.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:109
msgid "Now, within \"nano\", replace the text `octane.pdb` with the special variable called `$1`:"
msgstr ""

#: shell-novice/_episodes/06-script.md:111
# code block
msgid "~~~\n"
"head -n 15 \"$1\" | tail -n 5\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:116
msgid "Inside a shell script,\n"
"`$1` means 'the first filename (or other argument) on the command line'.\n"
"We can now run our script like this:"
msgstr ""

#: shell-novice/_episodes/06-script.md:120
# code block
msgid "~~~\n"
"$ bash middle.sh octane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:134
msgid "or on a different file like this:"
msgstr ""

#: shell-novice/_episodes/06-script.md:136
# code block
msgid "~~~\n"
"$ bash middle.sh pentane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:141
#: shell-novice/_episodes/06-script.md:184
# code block
msgid "~~~\n"
"ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00\n"
"ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00\n"
"ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00\n"
"ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00\n"
"ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:150
# blockquote, which can be cascaded
msgid "> ## Double-Quotes Around Arguments"
msgstr ""

#: shell-novice/_episodes/06-script.md:151
msgid ">\n"
"> For the same reason that we put the loop variable inside double-quotes,\n"
"> in case the filename happens to contain any spaces,\n"
"> we surround `$1` with double-quotes."
msgstr ""

#: shell-novice/_episodes/06-script.md:157
msgid "Currently, we need to edit `middle.sh` each time we want to adjust the range of\n"
"lines that is returned.\n"
"Let's fix that by configuring our script to instead use three command-line arguments.\n"
"After the first command-line argument (`$1`), each additional argument that we\n"
"provide will be accessible via the special variables `$1`, `$2`, `$3`,\n"
"which refer to the first, second, third command-line arguments, respectively."
msgstr ""

#: shell-novice/_episodes/06-script.md:164
msgid "Knowing this, we can use additional arguments to define the range of lines to\n"
"be passed to `head` and `tail` respectively:"
msgstr ""

#: shell-novice/_episodes/06-script.md:172
# code block
msgid "~~~\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:177
msgid "We can now run:"
msgstr ""

#: shell-novice/_episodes/06-script.md:179
# code block
msgid "~~~\n"
"$ bash middle.sh pentane.pdb 15 5\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:193
msgid "By changing the arguments to our command we can change our script's\n"
"behaviour:"
msgstr ""

#: shell-novice/_episodes/06-script.md:196
# code block
msgid "~~~\n"
"$ bash middle.sh pentane.pdb 20 5\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:201
# code block
msgid "~~~\n"
"ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00\n"
"ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00\n"
"ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00\n"
"ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00\n"
"TER      18              1\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:210
msgid "This works,\n"
"but it may take the next person who reads `middle.sh` a moment to figure out what it does.\n"
"We can improve our script by adding some **comments** at the top:"
msgstr ""

#: shell-novice/_episodes/06-script.md:219
# code block
msgid "~~~\n"
"# Select lines from the middle of a file.\n"
"# Usage: bash middle.sh filename end_line num_lines\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:226
msgid "A comment starts with a `#` character and runs to the end of the line.\n"
"The computer ignores comments,\n"
"but they're invaluable for helping people (including your future self) understand and use scripts.\n"
"The only caveat is that each time you modify the script,\n"
"you should check that the comment is still accurate:\n"
"an explanation that sends the reader in the wrong direction is worse than none at all."
msgstr ""

#: shell-novice/_episodes/06-script.md:233
msgid "What if we want to process many files in a single pipeline?\n"
"For example, if we want to sort our `.pdb` files by length, we would type:"
msgstr ""

#: shell-novice/_episodes/06-script.md:241
msgid "because `wc -l` lists the number of lines in the files\n"
"(recall that `wc` stands for 'word count', adding the `-l` option means 'count lines' instead)\n"
"and `sort -n` sorts things numerically.\n"
"We could put this in a file,\n"
"but then it would only ever sort a list of `.pdb` files in the current directory.\n"
"If we want to be able to get a sorted list of other kinds of files,\n"
"we need a way to get all those names into the script.\n"
"We can't use `$1`, `$2`, and so on\n"
"because we don't know how many files there are.\n"
"Instead, we use the special variable `$@`,\n"
"which means,\n"
"'All of the command-line arguments to the shell script'.\n"
"We also should put `$@` inside double-quotes\n"
"to handle the case of arguments containing spaces\n"
"(`\"$@\"` is special syntax and is equivalent to `\"$1\"` `\"$2\"` ...)."
msgstr ""

#: shell-novice/_episodes/06-script.md:257
msgid "Here's an example:"
msgstr ""

#: shell-novice/_episodes/06-script.md:259
# code block
msgid "~~~\n"
"$ nano sorted.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:264
# code block
msgid "~~~\n"
"# Sort files by their length.\n"
"# Usage: bash sorted.sh one_or_more_filenames\n"
"wc -l \"$@\" | sort -n\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:271
# code block
msgid "~~~\n"
"$ bash sorted.sh *.pdb ../creatures/*.dat\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:276
# code block
msgid "~~~\n"
"9 methane.pdb\n"
"12 ethane.pdb\n"
"15 propane.pdb\n"
"20 cubane.pdb\n"
"21 pentane.pdb\n"
"30 octane.pdb\n"
"163 ../creatures/basilisk.dat\n"
"163 ../creatures/minotaur.dat\n"
"163 ../creatures/unicorn.dat\n"
"596 total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:290
# blockquote, which can be cascaded
msgid "> ## List Unique Species"
msgstr ""

#: shell-novice/_episodes/06-script.md:291
msgid ">\n"
"> Leah has several hundred data files, each of which is formatted like this:\n"
">\n"
"> ~~~\n"
"> 2013-11-05,deer,5\n"
"> 2013-11-05,rabbit,22\n"
"> 2013-11-05,raccoon,7\n"
"> 2013-11-06,rabbit,19\n"
"> 2013-11-06,deer,2\n"
"> 2013-11-06,fox,1\n"
"> 2013-11-07,rabbit,18\n"
"> 2013-11-07,bear,1\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:305
msgid ">\n"
"> An example of this type of file is given in\n"
"> `shell-lesson-data/exercise-data/animal-counts/animals.csv`.\n"
">\n"
"> We can use the command `cut -d , -f 2 animals.csv | sort | uniq` to produce\n"
"> the unique species in `animals.csv`.\n"
"> In order to avoid having to type out this series of commands every time,\n"
"> a scientist may choose to write a shell script instead.\n"
">\n"
"> Write a shell script called `species.sh` that takes any number of\n"
"> filenames as command-line arguments, and uses a variation of the above command\n"
"> to print a list of the unique species appearing in each of those files separately.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Script to find unique species in csv files where species is the second data field\n"
"> > # This script accepts any number of file names as command line arguments\n"
"> >\n"
"> > # Loop over all files\n"
"> > for file in $@\n"
"> > do\n"
"> >     echo \"Unique species in $file:\"\n"
"> >     # Extract species names\n"
"> >     cut -d , -f 2 $file | sort | uniq\n"
"> > done\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/06-script.md:337
msgid "Suppose we have just run a series of commands that did something useful --- for example,\n"
"that created a graph we'd like to use in a paper.\n"
"We'd like to be able to re-create the graph later if we need to,\n"
"so we want to save the commands in a file.\n"
"Instead of typing them in again\n"
"(and potentially getting them wrong)\n"
"we can do this:"
msgstr ""

#: shell-novice/_episodes/06-script.md:345
# code block
msgid "~~~\n"
"$ history | tail -n 5 > redo-figure-3.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:350
msgid "The file `redo-figure-3.sh` now contains:"
msgstr ""

#: shell-novice/_episodes/06-script.md:352
# code block
msgid "~~~\n"
"297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt\n"
"298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt\n"
"299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt\n"
"300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png\n"
"301 history | tail -n 5 > redo-figure-3.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:361
msgid "After a moment's work in an editor to remove the serial numbers on the commands,\n"
"and to remove the final line where we called the `history` command,\n"
"we have a completely accurate record of how we created that figure."
msgstr ""

#: shell-novice/_episodes/06-script.md:365
# blockquote, which can be cascaded
msgid "> ## Why Record Commands in the History Before Running Them?"
msgstr ""

#: shell-novice/_episodes/06-script.md:366
msgid ">\n"
"> If you run the command:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5 > recent.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the last command in the file is the `history` command itself, i.e.,\n"
"> the shell has added `history` to the command log before actually\n"
"> running it. In fact, the shell *always* adds commands to the log\n"
"> before running them. Why do you think it does this?\n"
">\n"
"> > ## Solution\n"
"> > If a command causes something to crash or hang, it might be useful\n"
"> > to know what that command was, in order to investigate the problem.\n"
"> > Were the command only be recorded after running it, we would not\n"
"> > have a record of the last command run in the event of a crash."
msgstr ""

#: shell-novice/_episodes/06-script.md:387
msgid "In practice, most people develop shell scripts by running commands at the shell prompt a few times\n"
"to make sure they're doing the right thing,\n"
"then saving them in a file for re-use.\n"
"This style of work allows people to recycle\n"
"what they discover about their data and their workflow with one call to `history`\n"
"and a bit of editing to clean up the output\n"
"and save it as a shell script."
msgstr ""

#: shell-novice/_episodes/06-script.md:395
# header
msgid "## Nelle's Pipeline: Creating a Script"
msgstr ""

#: shell-novice/_episodes/06-script.md:398
msgid "Nelle's supervisor insisted that all her analytics must be reproducible.\n"
"The easiest way to capture all the steps is in a script."
msgstr ""

#: shell-novice/_episodes/06-script.md:401
msgid "First we return to Nelle's project directory:\n"
"```\n"
"$ cd ../../north-pacific-gyre/\n"
"```\n"
"{: .language-bash}"
msgstr ""

#: shell-novice/_episodes/06-script.md:407
msgid "She creates a file using `nano` ..."
msgstr ""

#: shell-novice/_episodes/06-script.md:409
# code block
msgid "~~~\n"
"$ nano do-stats.sh\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:414
msgid "...which contains the following:"
msgstr ""

#: shell-novice/_episodes/06-script.md:416
# code block
msgid "~~~\n"
"# Calculate stats for data files.\n"
"for datafile in \"$@\"\n"
"do\n"
"    echo $datafile\n"
"    bash goostats.sh $datafile stats-$datafile\n"
"done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:426
msgid "She saves this in a file called `do-stats.sh`\n"
"so that she can now re-do the first stage of her analysis by typing:"
msgstr ""

#: shell-novice/_episodes/06-script.md:429
# code block
msgid "~~~\n"
"$ bash do-stats.sh NENE*A.txt NENE*B.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:434
msgid "She can also do this:"
msgstr ""

#: shell-novice/_episodes/06-script.md:436
# code block
msgid "~~~\n"
"$ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:441
msgid "so that the output is just the number of files processed\n"
"rather than the names of the files that were processed."
msgstr ""

#: shell-novice/_episodes/06-script.md:444
msgid "One thing to note about Nelle's script is that\n"
"it lets the person running it decide what files to process.\n"
"She could have written it as:"
msgstr ""

#: shell-novice/_episodes/06-script.md:448
# code block
msgid "~~~\n"
"# Calculate stats for Site A and Site B data files.\n"
"for datafile in NENE*A.txt NENE*B.txt\n"
"do\n"
"    echo $datafile\n"
"    bash goostats.sh $datafile stats-$datafile\n"
"done\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/06-script.md:458
msgid "The advantage is that this always selects the right files:\n"
"she doesn't have to remember to exclude the 'Z' files.\n"
"The disadvantage is that it *always* selects just those files --- she can't run it on all files\n"
"(including the 'Z' files),\n"
"or on the 'G' or 'H' files her colleagues in Antarctica are producing,\n"
"without editing the script.\n"
"If she wanted to be more adventurous,\n"
"she could modify her script to check for command-line arguments,\n"
"and use `NENE*A.txt NENE*B.txt` if none were provided.\n"
"Of course, this introduces another tradeoff between flexibility and complexity."
msgstr ""

#: shell-novice/_episodes/06-script.md:469
# blockquote, which can be cascaded
msgid "> ## Variables in Shell Scripts"
msgstr ""

#: shell-novice/_episodes/06-script.md:470
msgid ">\n"
"> In the `proteins` directory, imagine you have a shell script called `script.sh` containing the\n"
"> following commands:\n"
">\n"
"> ~~~\n"
"> head -n $2 $1\n"
"> tail -n $3 $1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> While you are in the `proteins` directory, you type the following command:\n"
">\n"
"> ~~~\n"
"> $ bash script.sh '*.pdb' 1 1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Which of the following outputs would you expect to see?\n"
">\n"
"> 1. All of the lines between the first and the last lines of each file ending in `.pdb`\n"
">    in the `proteins` directory\n"
"> 2. The first and the last line of each file ending in `.pdb` in the `proteins` directory\n"
"> 3. The first and the last line of each file in the `proteins` directory\n"
"> 4. An error because of the quotes around `*.pdb`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 2.\n"
"> >\n"
"> > The special variables $1, $2 and $3 represent the command line arguments given to the\n"
"> > script, such that the commands run are:\n"
"> >\n"
"> > ```\n"
"> > $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > The shell does not expand `'*.pdb'` because it is enclosed by quote marks.\n"
"> > As such, the first argument to the script is `'*.pdb'` which gets expanded within the\n"
"> > script by `head` and `tail`."
msgstr ""

#: shell-novice/_episodes/06-script.md:512
# blockquote, which can be cascaded
msgid "> ## Find the Longest File With a Given Extension"
msgstr ""

#: shell-novice/_episodes/06-script.md:513
msgid ">\n"
"> Write a shell script called `longest.sh` that takes the name of a\n"
"> directory and a filename extension as its arguments, and prints\n"
"> out the name of the file with the most lines in that directory\n"
"> with that extension. For example:\n"
">\n"
"> ~~~\n"
"> $ bash longest.sh shell-lesson-data/exercise-data/proteins pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> would print the name of the `.pdb` file in `shell-lesson-data/exercise-data/proteins` that has\n"
"> the most lines.\n"
">\n"
"> Feel free to test your script on another directory e.g.\n"
"> ~~~\n"
"> $ bash longest.sh shell-lesson-data/exercise-data/writing txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Shell script which takes two arguments:\n"
"> > #    1. a directory name\n"
"> > #    2. a file extension\n"
"> > # and prints the name of the file in that directory\n"
"> > # with the most lines which matches the file extension.\n"
"> >\n"
"> > wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > The first part of the pipeline, `wc -l $1/*.$2 | sort -n`, counts\n"
"> > the lines in each file and sorts them numerically (largest last). When\n"
"> > there's more than one file, `wc` also outputs a final summary line,\n"
"> > giving the total number of lines across _all_ files.  We use `tail\n"
"> > -n 2 | head -n 1` to throw away this last line.\n"
"> >\n"
"> > With `wc -l $1/*.$2 | sort -n | tail -n 1` we'll see the final summary\n"
"> > line: we can build our pipeline up in pieces to be sure we understand\n"
"> > the output."
msgstr ""

#: shell-novice/_episodes/06-script.md:558
# blockquote, which can be cascaded
msgid "> ## Script Reading Comprehension"
msgstr ""

#: shell-novice/_episodes/06-script.md:559
msgid ">\n"
"> For this question, consider the `shell-lesson-data/exercise-data/proteins` directory once again.\n"
"> This contains a number of `.pdb` files in addition to any other files you\n"
"> may have created.\n"
"> Explain what each of the following three scripts would do when run as\n"
"> `bash script1.sh *.pdb`, `bash script2.sh *.pdb`, and `bash script3.sh *.pdb` respectively.\n"
">\n"
"> ~~~\n"
"> # Script 1\n"
"> echo *.*\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 2\n"
"> for filename in $1 $2 $3\n"
"> do\n"
">     cat $filename\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 3\n"
"> echo $@.pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solutions\n"
"> > In each case, the shell expands the wildcard in `*.pdb` before passing the resulting\n"
"> > list of file names as arguments to the script.\n"
"> >\n"
"> > Script 1 would print out a list of all files containing a dot in their name.\n"
"> > The arguments passed to the script are not actually used anywhere in the script.\n"
"> >\n"
"> > Script 2 would print the contents of the first 3 files with a `.pdb` file extension.\n"
"> > `$1`, `$2`, and `$3` refer to the first, second, and third argument respectively.\n"
"> >\n"
"> > Script 3 would print all the arguments to the script (i.e. all the `.pdb` files),\n"
"> > followed by `.pdb`.\n"
"> > `$@` refers to *all* the arguments given to a shell script.\n"
"> > ```\n"
"> > cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb\n"
"> > ```\n"
"> > {: .output}"
msgstr ""

#: shell-novice/_episodes/06-script.md:607
# blockquote, which can be cascaded
msgid "> ## Debugging Scripts"
msgstr ""

#: shell-novice/_episodes/06-script.md:608
msgid ">\n"
"> Suppose you have saved the following script in a file called `do-errors.sh`\n"
"> in Nelle's `north-pacific-gyre/scripts` directory:\n"
">\n"
"> ~~~\n"
"> # Calculate stats for data files.\n"
"> for datafile in \"$@\"\n"
"> do\n"
">     echo $datfile\n"
">     bash goostats.sh $datafile stats-$datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you run it from the `north-pacific-gyre` directory:\n"
">\n"
"> ~~~\n"
"> $ bash do-errors.sh NENE*A.txt NENE*B.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the output is blank.\n"
"> To figure out why, re-run the script using the `-x` option:\n"
">\n"
"> ~~~\n"
"> $ bash -x do-errors.sh NENE*A.txt NENE*B.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the output showing you?\n"
"> Which line is responsible for the error?\n"
">\n"
"> > ## Solution\n"
"> > The `-x` option causes `bash` to run in debug mode.\n"
"> > This prints out each command as it is run, which will help you to locate errors.\n"
"> > In this example, we can see that `echo` isn't printing anything. We have made a typo\n"
"> > in the loop variable name, and the variable `datfile` doesn't exist, hence returning\n"
"> > an empty string."
msgstr ""

#: shell-novice/_episodes/07-find.md:1
# Front Matter
msgid "---\n"
"title: \"Finding Things\"\n"
"teaching: 25\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I find files?\"\n"
"- \"How can I find things in files?\"\n"
"objectives:\n"
"- \"Use `grep` to select lines from text files that match simple patterns.\"\n"
"- \"Use `find` to find files and directories whose names match simple patterns.\"\n"
"- \"Use the output of one command as the command-line argument(s) to another command.\"\n"
"- \"Explain what is meant by 'text' and 'binary' files, and why many common tools don't handle the latter well.\"\n"
"keypoints:\n"
"- \"`find` finds files with specific properties that match patterns.\"\n"
"- \"`grep` selects lines in files that match patterns.\"\n"
"- \"`--help` is an option supported by many bash commands, and programs that can be run from within Bash, to display more information on how to use these commands or programs.\"\n"
"- \"`man [command]` displays the manual page for a given command.\"\n"
"- \"`$([command])` inserts a command's output in place.\"\n"
"---"
msgstr ""

#: shell-novice/_episodes/07-find.md:21
msgid "In the same way that many of us now use 'Google' as a\n"
"verb meaning 'to find', Unix programmers often use the\n"
"word 'grep'.\n"
"'grep' is a contraction of 'global/regular expression/print',\n"
"a common sequence of operations in early Unix text editors.\n"
"It is also the name of a very useful command-line program."
msgstr ""

#: shell-novice/_episodes/07-find.md:28
msgid "`grep` finds and prints lines in files that match a pattern.\n"
"For our examples,\n"
"we will use a file that contains three haiku taken from a\n"
"[1998 competition](https://web.archive.org/web/19991201042211/http://salon.com/21st/chal/1998/01/26chal.html)\n"
"in *Salon* magazine (Credit to authors Bill Torcaso, Howard Korder, and \n"
"Margaret Segall, respectively. See \n"
"Haiku Error Messsages archived\n"
"[Page 1](https://web.archive.org/web/20000310061355/http://www.salon.com/21st/chal/1998/02/10chal2.html)\n"
"and\n"
"[Page 2](https://web.archive.org/web/20000229135138/http://www.salon.com/21st/chal/1998/02/10chal3.html)\n"
".). For this set of examples,\n"
"we're going to be working in the writing subdirectory:"
msgstr ""

#: shell-novice/_episodes/07-find.md:41
# code block
msgid "~~~\n"
"$ cd\n"
"$ cd Desktop/shell-lesson-data/exercise-data/writing\n"
"$ cat haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:48
# code block
msgid "~~~\n"
"The Tao that is seen\n"
"Is not the true Tao, until\n"
"You bring fresh toner.\n"
"\n"
"With searching comes loss\n"
"and the presence of absence:\n"
"\"My Thesis\" not found.\n"
"\n"
"Yesterday it worked\n"
"Today it is not working\n"
"Software is like that.\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:63
msgid "Let's find lines that contain the word 'not':"
msgstr ""

#: shell-novice/_episodes/07-find.md:65
# code block
msgid "~~~\n"
"$ grep not haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:70
# code block
msgid "~~~\n"
"Is not the true Tao, until\n"
"\"My Thesis\" not found\n"
"Today it is not working\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:77
msgid "Here, `not` is the pattern we're searching for.\n"
"The grep command searches through the file, looking for matches to the pattern specified.\n"
"To use it type `grep`, then the pattern we're searching for and finally\n"
"the name of the file (or files) we're searching in."
msgstr ""

#: shell-novice/_episodes/07-find.md:82
msgid "The output is the three lines in the file that contain the letters 'not'."
msgstr ""

#: shell-novice/_episodes/07-find.md:84
msgid "By default, grep searches for a pattern in a case-sensitive way.\n"
"In addition, the search pattern we have selected does not have to form a complete word,\n"
"as we will see in the next example."
msgstr ""

#: shell-novice/_episodes/07-find.md:88
msgid "Let's search for the pattern: 'The'."
msgstr ""

#: shell-novice/_episodes/07-find.md:90
# code block
msgid "~~~\n"
"$ grep The haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:95
# code block
msgid "~~~\n"
"The Tao that is seen\n"
"\"My Thesis\" not found.\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:101
msgid "This time, two lines that include the letters 'The' are outputted,\n"
"one of which contained our search pattern within a larger word, 'Thesis'."
msgstr ""

#: shell-novice/_episodes/07-find.md:104
msgid "To restrict matches to lines containing the word 'The' on its own,\n"
"we can give `grep` the `-w` option.\n"
"This will limit matches to word boundaries."
msgstr ""

#: shell-novice/_episodes/07-find.md:108
msgid "Later in this lesson, we will also see how we can change the search behavior of grep\n"
"with respect to its case sensitivity."
msgstr ""

#: shell-novice/_episodes/07-find.md:111
# code block
msgid "~~~\n"
"$ grep -w The haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:116
# code block
msgid "~~~\n"
"The Tao that is seen\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:121
msgid "Note that a 'word boundary' includes the start and end of a line, so not\n"
"just letters surrounded by spaces.\n"
"Sometimes we don't\n"
"want to search for a single word, but a phrase. This is also easy to do with\n"
"`grep` by putting the phrase in quotes."
msgstr ""

#: shell-novice/_episodes/07-find.md:127
# code block
msgid "~~~\n"
"$ grep -w \"is not\" haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:132
# code block
msgid "~~~\n"
"Today it is not working\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:137
msgid "We've now seen that you don't have to have quotes around single words,\n"
"but it is useful to use quotes when searching for multiple words.\n"
"It also helps to make it easier to distinguish between the search term or phrase\n"
"and the file being searched.\n"
"We will use quotes in the remaining examples."
msgstr ""

#: shell-novice/_episodes/07-find.md:143
msgid "Another useful option is `-n`, which numbers the lines that match:"
msgstr ""

#: shell-novice/_episodes/07-find.md:145
# code block
msgid "~~~\n"
"$ grep -n \"it\" haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:150
# code block
msgid "~~~\n"
"5:With searching comes loss\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:157
msgid "Here, we can see that lines 5, 9, and 10 contain the letters 'it'."
msgstr ""

#: shell-novice/_episodes/07-find.md:159
msgid "We can combine options (i.e. flags) as we do with other Unix commands.\n"
"For example, let's find the lines that contain the word 'the'.\n"
"We can combine the option `-w` to find the lines that contain the word 'the'\n"
"and `-n` to number the lines that match:"
msgstr ""

#: shell-novice/_episodes/07-find.md:164
# code block
msgid "~~~\n"
"$ grep -n -w \"the\" haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:169
# code block
msgid "~~~\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:175
msgid "Now we want to use the option `-i` to make our search case-insensitive:"
msgstr ""

#: shell-novice/_episodes/07-find.md:177
# code block
msgid "~~~\n"
"$ grep -n -w -i \"the\" haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:182
# code block
msgid "~~~\n"
"1:The Tao that is seen\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:189
msgid "Now, we want to use the option `-v` to invert our search, i.e., we want to output\n"
"the lines that do not contain the word 'the'."
msgstr ""

#: shell-novice/_episodes/07-find.md:192
# code block
msgid "~~~\n"
"$ grep -n -w -v \"the\" haiku.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:197
# code block
msgid "~~~\n"
"1:The Tao that is seen\n"
"3:You bring fresh toner.\n"
"4:\n"
"5:With searching comes loss\n"
"7:\"My Thesis\" not found.\n"
"8:\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"11:Software is like that.\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:211
msgid "If we use the `-r` (recursive) option,\n"
"`grep` can search for a pattern recursively through a set of files in subdirectories."
msgstr ""

#: shell-novice/_episodes/07-find.md:214
msgid "Let's search recursively for `Yesterday` in the `shell-lesson-data/exercise-data/writing` directory:"
msgstr ""

#: shell-novice/_episodes/07-find.md:216
# code block
msgid "```\n"
"$ grep -r Yesterday .\n"
"```"
msgstr ""

#: shell-novice/_episodes/07-find.md:221
# code block
msgid "```\n"
"./LittleWomen.txt:\"Yesterday, when Aunt was asleep and I was trying to be as still as a\n"
"./LittleWomen.txt:Yesterday at dinner, when an Austrian officer stared at us and then\n"
"./LittleWomen.txt:Yesterday was a quiet day spent in teaching, sewing, and writing in my\n"
"./haiku.txt:Yesterday it worked\n"
"```"
msgstr ""

#: shell-novice/_episodes/07-find.md:229
msgid "`grep` has lots of other options. To find out what they are, we can type:"
msgstr ""

#: shell-novice/_episodes/07-find.md:231
# code block
msgid "~~~\n"
"$ grep --help\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:236
# code block
msgid "~~~\n"
"Usage: grep [OPTION]... PATTERN [FILE]...\n"
"Search for PATTERN in each FILE or standard input.\n"
"PATTERN is, by default, a basic regular expression (BRE).\n"
"Example: grep -i 'hello world' menu.h main.c\n"
"\n"
"Regexp selection and interpretation:\n"
"  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n"
"  -F, --fixed-strings       PATTERN is a set of newline-separated fixed strings\n"
"  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n"
"  -P, --perl-regexp         PATTERN is a Perl regular expression\n"
"  -e, --regexp=PATTERN      use PATTERN for matching\n"
"  -f, --file=FILE           obtain PATTERN from FILE\n"
"  -i, --ignore-case         ignore case distinctions\n"
"  -w, --word-regexp         force PATTERN to match only whole words\n"
"  -x, --line-regexp         force PATTERN to match only whole lines\n"
"  -z, --null-data           a data line ends in 0 byte, not newline\n"
"\n"
"Miscellaneous:\n"
"...        ...        ...\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:259
# blockquote, which can be cascaded
msgid "> ## Using `grep`"
msgstr ""

#: shell-novice/_episodes/07-find.md:260
msgid ">\n"
"> Which command would result in the following output:\n"
">\n"
"> ~~~\n"
"> and the presence of absence:\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:267
msgid ">\n"
"> 1. `grep \"of\" haiku.txt`\n"
"> 2. `grep -E \"of\" haiku.txt`\n"
"> 3. `grep -w \"of\" haiku.txt`\n"
"> 4. `grep -i \"of\" haiku.txt`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 3, because the `-w` option looks only for whole-word matches.\n"
"> > The other options will also match 'of' when part of another word."
msgstr ""

#: shell-novice/_episodes/07-find.md:280
msgid ">\n"
"> `grep`'s real power doesn't come from its options, though; it comes from\n"
"> the fact that patterns can include wildcards. (The technical name for\n"
"> these is **regular expressions**, which\n"
"> is what the 're' in 'grep' stands for.) Regular expressions are both complex\n"
"> and powerful; if you want to do complex searches, please look at the lesson\n"
"> on [our website](http://v4.software-carpentry.org/regexp/index.html). As a taster, we can\n"
"> find lines that have an 'o' in the second position like this:\n"
">\n"
"> ~~~\n"
"> $ grep -E \"^.o\" haiku.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> You bring fresh toner.\n"
"> Today it is not working\n"
"> Software is like that.\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:300
msgid ">\n"
"> We use the `-E` option and put the pattern in quotes to prevent the shell\n"
"> from trying to interpret it. (If the pattern contained a `*`, for\n"
"> example, the shell would try to expand it before running `grep`.) The\n"
"> `^` in the pattern anchors the match to the start of the line. The `.`\n"
"> matches a single character (just like `?` in the shell), while the `o`\n"
"> matches an actual 'o'."
msgstr ""

#: shell-novice/_episodes/07-find.md:309
# blockquote, which can be cascaded
msgid "> ## Tracking a Species"
msgstr ""

#: shell-novice/_episodes/07-find.md:310
msgid ">\n"
"> Leah has several hundred\n"
"> data files saved in one directory, each of which is formatted like this:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer,5\n"
"> 2012-11-05,rabbit,22\n"
"> 2012-11-05,raccoon,7\n"
"> 2012-11-06,rabbit,19\n"
"> 2012-11-06,deer,2\n"
"> 2012-11-06,fox,4\n"
"> 2012-11-07,rabbit,16\n"
"> 2012-11-07,bear,1\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:325
msgid ">\n"
"> She wants to write a shell script that takes a species as the first command-line argument\n"
"> and a directory as the second argument. The script should return one file called `<species>.txt`\n"
"> containing a list of dates and the number of that species seen on each date.\n"
"> For example using the data shown above, `rabbit.txt` would contain:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,22\n"
"> 2012-11-06,19\n"
"> 2012-11-07,16\n"
"> ~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:337
msgid ">\n"
"> Below, each line contains an individual command, or pipe.  Arrange their\n"
"> sequence in one command in order to achieve Leah's goal:\n"
">\n"
"> ~~~\n"
"> cut -d : -f 2\n"
"> >\n"
"> |\n"
"> grep -w $1 -r $2\n"
"> |\n"
"> $1.txt\n"
"> cut -d , -f 1,3\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: use `man grep` to look for how to grep text recursively in a directory\n"
"> and `man cut` to select more than one field in a line.\n"
">\n"
"> An example of such a file is provided in\n"
"> `shell-lesson-data/exercise-data/animal-counts/animals.csv`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3 > $1.txt\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Actually, you can swap the order of the two cut commands and it still works. At the\n"
"> > command line, try changing the order of the cut commands, and have a look at the output\n"
"> > from each step to see why this is the case.\n"
"> >\n"
"> > You would call the script above like this:\n"
"> >\n"
"> > ```\n"
"> > $ bash count-species.sh bear .\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""

#: shell-novice/_episodes/07-find.md:378
# blockquote, which can be cascaded
msgid "> ## Little Women"
msgstr ""

#: shell-novice/_episodes/07-find.md:379
msgid ">\n"
"> You and your friend, having just finished reading *Little Women* by\n"
"> Louisa May Alcott, are in an argument.  Of the four sisters in the\n"
"> book, Jo, Meg, Beth, and Amy, your friend thinks that Jo was the\n"
"> most mentioned.  You, however, are certain it was Amy.  Luckily, you\n"
"> have a file `LittleWomen.txt` containing the full text of the novel\n"
"> (`shell-lesson-data/exercise-data/writing/LittleWomen.txt`).\n"
"> Using a `for` loop, how would you tabulate the number of times each\n"
"> of the four sisters is mentioned?\n"
">\n"
"> Hint: one solution might employ\n"
"> the commands `grep` and `wc` and a `|`, while another might utilize\n"
"> `grep` options.\n"
"> There is often more than one way to solve a programming task, so a\n"
"> particular solution is usually chosen based on a combination of\n"
"> yielding the correct result, elegance, readability, and speed.\n"
">\n"
"> > ## Solutions\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> >     echo $sis:\n"
"> >     grep -ow $sis LittleWomen.txt | wc -l\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Alternative, slightly inferior solution:\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> >     echo $sis:\n"
"> >     grep -ocw $sis LittleWomen.txt\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > This solution is inferior because `grep -c` only reports the number of lines matched.\n"
"> > The total number of matches reported by this method will be lower if there is more\n"
"> > than one match per line.\n"
"> >\n"
"> > Perceptive observers may have noticed that character names sometimes appear in all-uppercase\n"
"> > in chapter titles (e.g. 'MEG GOES TO VANITY FAIR').\n"
"> > If you wanted to count these as well, you could add the `-i` option for case-insensitivity\n"
"> > (though in this case, it doesn't affect the answer to which sister is mentioned\n"
"> > most frequently)."
msgstr ""

#: shell-novice/_episodes/07-find.md:428
msgid "While `grep` finds lines in files,\n"
"the `find` command finds files themselves.\n"
"Again,\n"
"it has a lot of options;\n"
"to show how the simplest ones work, we'll use the `shell-lesson-data/exercise-data`\n"
"directory tree shown below."
msgstr ""

#: shell-novice/_episodes/07-find.md:435
# code block
msgid "~~~\n"
".\n"
"├── animal-counts/\n"
"│   └── animals.csv\n"
"├── creatures/\n"
"│   ├── basilisk.dat\n"
"│   ├── minotaur.dat\n"
"│   └── unicorn.dat\n"
"├── numbers.txt\n"
"├── proteins/\n"
"│   ├── cubane.pdb\n"
"│   ├── ethane.pdb\n"
"│   ├── methane.pdb\n"
"│   ├── octane.pdb\n"
"│   ├── pentane.pdb\n"
"│   └── propane.pdb\n"
"└── writing/\n"
"    ├── haiku.txt\n"
"    └── LittleWomen.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:457
msgid "The `exercise-data` directory contains one file, `numbers.txt` and four directories:\n"
"`animal-counts`, `creatures`, `proteins` and `writing` containing various files."
msgstr ""

#: shell-novice/_episodes/07-find.md:461
msgid "For our first command,\n"
"let's run `find .` (remember to run this command from the `shell-lesson-data/exercise-data` folder)."
msgstr ""

#: shell-novice/_episodes/07-find.md:464
# code block
msgid "~~~\n"
"$ find .\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:469
# code block
msgid "~~~\n"
".\n"
"./writing\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./creatures\n"
"./creatures/basilisk.dat\n"
"./creatures/unicorn.dat\n"
"./creatures/minotaur.dat\n"
"./animal-counts\n"
"./animal-counts/animals.csv\n"
"./numbers.txt\n"
"./proteins\n"
"./proteins/ethane.pdb\n"
"./proteins/propane.pdb\n"
"./proteins/octane.pdb\n"
"./proteins/pentane.pdb\n"
"./proteins/methane.pdb\n"
"./proteins/cubane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:492
msgid "As always, the `.` on its own means the current working directory,\n"
"which is where we want our search to start.\n"
"`find`'s output is the names of every file **and** directory\n"
"under the current working directory.\n"
"This can seem useless at first but `find` has many options\n"
"to filter the output and in this lesson we will discover some\n"
"of them."
msgstr ""

#: shell-novice/_episodes/07-find.md:500
msgid "The first option in our list is\n"
"`-type d` that means 'things that are directories'.\n"
"Sure enough, `find`'s output is the names of the five directories (including `.`):"
msgstr ""

#: shell-novice/_episodes/07-find.md:504
# code block
msgid "~~~\n"
"$ find . -type d\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:509
# code block
msgid "~~~\n"
".\n"
"./writing\n"
"./creatures\n"
"./animal-counts\n"
"./proteins\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:518
msgid "Notice that the objects `find` finds are not listed in any particular order.\n"
"If we change `-type d` to `-type f`,\n"
"we get a listing of all the files instead:"
msgstr ""

#: shell-novice/_episodes/07-find.md:522
# code block
msgid "~~~\n"
"$ find . -type f\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:527
# code block
msgid "~~~\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./creatures/basilisk.dat\n"
"./creatures/unicorn.dat\n"
"./creatures/minotaur.dat\n"
"./animal-counts/animals.csv\n"
"./numbers.txt\n"
"./proteins/ethane.pdb\n"
"./proteins/propane.pdb\n"
"./proteins/octane.pdb\n"
"./proteins/pentane.pdb\n"
"./proteins/methane.pdb\n"
"./proteins/cubane.pdb\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:544
msgid "Now let's try matching by name:"
msgstr ""

#: shell-novice/_episodes/07-find.md:546
# code block
msgid "~~~\n"
"$ find . -name *.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:551
# code block
msgid "~~~\n"
"./numbers.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:556
msgid "We expected it to find all the text files,\n"
"but it only prints out `./numbers.txt`.\n"
"The problem is that the shell expands wildcard characters like `*` *before* commands run.\n"
"Since `*.txt` in the current directory expands to `./numbers.txt`,\n"
"the command we actually ran was:"
msgstr ""

#: shell-novice/_episodes/07-find.md:562
# code block
msgid "~~~\n"
"$ find . -name numbers.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:567
msgid "`find` did what we asked; we just asked for the wrong thing."
msgstr ""

#: shell-novice/_episodes/07-find.md:569
msgid "To get what we want,\n"
"let's do what we did with `grep`:\n"
"put `*.txt` in quotes to prevent the shell from expanding the `*` wildcard.\n"
"This way,\n"
"`find` actually gets the pattern `*.txt`, not the expanded filename `numbers.txt`:"
msgstr ""

#: shell-novice/_episodes/07-find.md:575
# code block
msgid "~~~\n"
"$ find . -name \"*.txt\"\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:580
# code block
msgid "~~~\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./numbers.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:587
# blockquote, which can be cascaded
msgid "> ## Listing vs. Finding"
msgstr ""

#: shell-novice/_episodes/07-find.md:588
msgid ">\n"
"> `ls` and `find` can be made to do similar things given the right options,\n"
"> but under normal circumstances,\n"
"> `ls` lists everything it can,\n"
"> while `find` searches for things with certain properties and shows them."
msgstr ""

#: shell-novice/_episodes/07-find.md:595
msgid "As we said earlier,\n"
"the command line's power lies in combining tools.\n"
"We've seen how to do that with pipes;\n"
"let's look at another technique.\n"
"As we just saw,\n"
"`find . -name \"*.txt\"` gives us a list of all text files in or below the current directory.\n"
"How can we combine that with `wc -l` to count the lines in all those files?"
msgstr ""

#: shell-novice/_episodes/07-find.md:603
msgid "The simplest way is to put the `find` command inside `$()`:"
msgstr ""

#: shell-novice/_episodes/07-find.md:605
# code block
msgid "~~~\n"
"$ wc -l $(find . -name \"*.txt\")\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:610
# code block
msgid "~~~\n"
"  21022 ./writing/LittleWomen.txt\n"
"     11 ./writing/haiku.txt\n"
"      5 ./numbers.txt\n"
"  21038 total\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:618
msgid "When the shell executes this command,\n"
"the first thing it does is run whatever is inside the `$()`.\n"
"It then replaces the `$()` expression with that command's output.\n"
"Since the output of `find` is the three filenames `./writing/LittleWomen.txt`,\n"
"`./writing/haiku.txt`, and `./numbers.txt`, the shell constructs the command:"
msgstr ""

#: shell-novice/_episodes/07-find.md:624
# code block
msgid "~~~\n"
"$ wc -l ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:629
msgid "which is what we wanted.\n"
"This expansion is exactly what the shell does when it expands wildcards like `*` and `?`,\n"
"but lets us use any command we want as our own 'wildcard'."
msgstr ""

#: shell-novice/_episodes/07-find.md:633
msgid "It's very common to use `find` and `grep` together.\n"
"The first finds files that match a pattern;\n"
"the second looks for lines inside those files that match another pattern.\n"
"Here, for example, we can find txt files that contain the word \"searching\"\n"
"by looking for the string 'searching' in all the `.txt` files in the current directory:"
msgstr ""

#: shell-novice/_episodes/07-find.md:639
# code block
msgid "~~~\n"
"$ grep \"searching\" $(find . -name \"*.txt\")\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:644
# code block
msgid "~~~\n"
"./writing/LittleWomen.txt:sitting on the top step, affected to be searching for her book, but was\n"
"./writing/haiku.txt:With searching comes loss\n"
"~~~"
msgstr ""

#: shell-novice/_episodes/07-find.md:650
# blockquote, which can be cascaded
msgid "> ## Matching and Subtracting"
msgstr ""

#: shell-novice/_episodes/07-find.md:651
msgid ">\n"
"> The `-v` option to `grep` inverts pattern matching, so that only lines\n"
"> which do *not* match the pattern are printed. Given that, which of\n"
"> the following commands will find all .dat files in `creatures`\n"
"> except `unicorn.dat`?\n"
"> Once you have thought about your answer, you can test the commands in the\n"
"> `shell-lesson-data/exercise-data` directory.\n"
">\n"
"> 1.  `find creatures -name \"*.dat\" | grep -v unicorn`\n"
"> 2.  `find creatures -name *.dat | grep -v unicorn`\n"
"> 3.  `grep -v \"unicorn\" $(find creatures -name \"*.dat\")`\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > Option 1. is correct. Putting the match expression in quotes prevents the shell\n"
"> > expanding it, so it gets passed to the `find` command.\n"
"> >\n"
"> > Option 2 is also works in this instance because the shell tries to expand `*.dat`\n"
"> > but there are no `*.dat` files in the current directory,\n"
"> > so the wildcard expression gets passed to `find`.\n"
"> > We first encountered this in\n"
"> > [episode 3]({{ page.root }}{% link _episodes/03-create.md %}/#wildcards).\n"
"> >\n"
"> > Option 3 is incorrect because it searches the contents of the files for lines which\n"
"> > do not match 'unicorn', rather than searching the file names."
msgstr ""

#: shell-novice/_episodes/07-find.md:679
# blockquote, which can be cascaded
msgid "> ## Binary Files"
msgstr ""

#: shell-novice/_episodes/07-find.md:680
msgid ">\n"
"> We have focused exclusively on finding patterns in text files. What if\n"
"> your data is stored as images, in databases, or in some other format?\n"
">\n"
"> A handful of tools extend `grep` to handle a few non text formats. But a\n"
"> more generalizable approach is to convert the data to text, or\n"
"> extract the text-like elements from the data. On the one hand, it makes simple\n"
"> things easy to do. On the other hand, complex things are usually impossible. For\n"
"> example, it's easy enough to write a program that will extract X and Y\n"
"> dimensions from image files for `grep` to play with, but how would you\n"
"> write something to find values in a spreadsheet whose cells contained\n"
"> formulas?\n"
">\n"
"> A last option is to recognize that the shell and text processing have\n"
"> their limits, and to use another programming language.\n"
"> When the time comes to do this, don't be too hard on the shell: many\n"
"> modern programming languages have borrowed a lot of\n"
"> ideas from it, and imitation is also the sincerest form of praise."
msgstr ""

#: shell-novice/_episodes/07-find.md:700
msgid "The Unix shell is older than most of the people who use it. It has\n"
"survived so long because it is one of the most productive programming\n"
"environments ever created --- maybe even *the* most productive. Its syntax\n"
"may be cryptic, but people who have mastered it can experiment with\n"
"different commands interactively, then use what they have learned to\n"
"automate their work. Graphical user interfaces may be easier to use at\n"
"first, but once learned, the productivity in the shell is unbeatable.\n"
"And as Alfred North Whitehead wrote in 1911, 'Civilization advances by\n"
"extending the number of important operations which we can perform\n"
"without thinking about them.'"
msgstr ""

#: shell-novice/_episodes/07-find.md:711
# blockquote, which can be cascaded
msgid "> ## `find` Pipeline Reading Comprehension"
msgstr ""

#: shell-novice/_episodes/07-find.md:712
# blockquote, which can be cascaded
msgid "> "
msgstr ""

#: shell-novice/_episodes/07-find.md:713
# blockquote, which can be cascaded
msgid "> Write a short explanatory comment for the following shell script:"
msgstr ""

#: shell-novice/_episodes/07-find.md:714
msgid ">\n"
"> ~~~\n"
"> wc -l $(find . -name \"*.dat\") | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > 1. Find all files with a `.dat` extension recursively from the current directory\n"
"> > 2. Count the number of lines each of these files contains\n"
"> > 3. Sort the output from step 2. numerically"
msgstr ""

#: shell-novice/_extras/about.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: About\n"
"---"
msgstr ""

#: shell-novice/_extras/about.md:5
msgid "{% include carpentries.html %}"
msgstr ""

#: shell-novice/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Discussion\"\n"
"---"
msgstr ""

#: shell-novice/_extras/discuss.md:5
# header
msgid "## Alphabet Soup"
msgstr ""

#: shell-novice/_extras/discuss.md:7
msgid "If the command to find out who we are is `whoami`, the command to find\n"
"out where we are ought to be called `whereami`, so why is it `pwd`\n"
"instead? The usual answer is that in the early 1970s, when Unix was\n"
"first being developed, every keystroke counted: the devices of the day\n"
"were slow, and backspacing on a teletype was so painful that cutting the\n"
"number of keystrokes in order to cut the number of typing mistakes was\n"
"actually a win for usability. The reality is that commands were added to\n"
"Unix one by one, without any master plan, by people who were immersed in\n"
"its jargon. The result is as inconsistent as the roolz uv Inglish\n"
"speling, but we're stuck with it now."
msgstr ""

#: shell-novice/_extras/discuss.md:18
# header
msgid "## Job Control Codes"
msgstr ""

#: shell-novice/_extras/discuss.md:20
msgid "The shell accepts a few special commands that allow users to interact\n"
"with running processes or programs. You can enter each of these\n"
"\"control codes\" by holding down the `Ctrl` key and then pressing one\n"
"of the control characters. In other tutorials, you may see the term\n"
"`Control` or the `^` used to represent the `Ctrl` key (e.g. the\n"
"following are all equivalent `Ctrl-C`, `Ctrl+C`, `Control-C`, `Control+C`, `^C`)."
msgstr ""

#: shell-novice/_extras/discuss.md:27
# unordered list
msgid "*   `Ctrl-C`:"
msgstr ""

#: shell-novice/_extras/discuss.md:28
msgid "    interrupts and cancels a running program.\n"
"    This is useful if you want to cancel a command that is taking too long to execute."
msgstr ""

#: shell-novice/_extras/discuss.md:31
# unordered list
msgid "*   `Ctrl-D`:"
msgstr ""

#: shell-novice/_extras/discuss.md:32
msgid "    indicates the end of a file or stream of characters that you are entering on the command line.\n"
"    For example, we saw earlier that the `wc` command counts lines, words, and characters in a file.\n"
"    If we just type `wc` and hit the Enter key without providing a file name,\n"
"    then `wc` will assume we want it to analyze all the stuff we type next.\n"
"    After typing our magnum opus directly into the shell prompt,\n"
"    we can then type Ctrl-D to tell `wc` that we're done\n"
"    and we'd like to see the results of the word count."
msgstr ""

#: shell-novice/_extras/discuss.md:40
# unordered list
msgid "*   `Ctrl-Z`:"
msgstr ""

#: shell-novice/_extras/discuss.md:41
msgid "    Suspends a process but does not terminate it.\n"
"    You can then use the command `fg` to restart the job in the foreground."
msgstr ""

#: shell-novice/_extras/discuss.md:44
msgid "For new shell users, these control codes can all appear to have\n"
"the same effect: they make things \"go away.\" But it is helpful to\n"
"understand the differences. In general, if something went wrong and\n"
"you just want to get your shell prompt back, it is better to use\n"
"`Ctrl-C`."
msgstr ""

#: shell-novice/_extras/discuss.md:50
# header
msgid "## Other Shells"
msgstr ""

#: shell-novice/_extras/discuss.md:52
msgid "Before Bash became popular in the end of nineties, scientists widely\n"
"used (and some still use) another shell, C-shell, or Csh. Bash and Csh\n"
"have similar feature sets, but their syntax rules are different and\n"
"this makes them incompatible with each other. A few other shells have\n"
"appeared since, including ksh, zsh, and a number of others; they are\n"
"mostly compatible with Bash, and Bash is the default shell on most\n"
"modern implementations of Unix (including most packages that provide\n"
"Unix-like tools for Windows) but if you get strange errors in shell\n"
"scripts written by colleagues, check to see which shell they were\n"
"written for."
msgstr ""

#: shell-novice/_extras/discuss.md:63
# header
msgid "## Bash Configurations"
msgstr ""

#: shell-novice/_extras/discuss.md:65
msgid "Want to customize paths, environment variables, aliases,\n"
"and other behaviors of your shell?\n"
"This excellent blog post \"[Bash Configurations Demystified][bash-demystified]\"\n"
"from Dalton Hubble\n"
"covers tips, tricks, and how to avoid dangers."
msgstr ""

#: shell-novice/_extras/discuss.md:71
msgid "[bash-demystified]: https://blog.dghubble.io/posts/.bashprofile-.profile-and-.bashrc-conventions/"
msgstr ""

#: shell-novice/_extras/figures.md:1
# Front Matter
msgid "---\n"
"title: Figures\n"
"---"
msgstr ""

#: shell-novice/_extras/figures.md:4
# inline html
msgid "<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url}}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"          article_here.appendChild(htmlDocArticle.getElementsByTagName(\"h1\")[0]);\n"
"          for (let image of htmlDocArticle.getElementsByTagName(\"img\")) {\n"
"            article_here.appendChild(image);\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ page.root }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: shell-novice/_extras/figures.md:33
msgid "{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\"></article>\n"
"{% endfor %}"
msgstr ""

#: shell-novice/_extras/guide.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"---"
msgstr ""

#: shell-novice/_extras/guide.md:5
# unordered list
msgid "*   Why do we learn to use the shell?"
msgstr ""

#: shell-novice/_extras/guide.md:6
# unordered list
msgid "    *   Allows users to automate repetitive tasks"
msgstr ""

#: shell-novice/_extras/guide.md:7
# unordered list
msgid "    *   And capture small data manipulation steps that are normally not recorded"
msgstr ""

#: shell-novice/_extras/guide.md:8
msgid "        to make research reproducible\n"
"*   The Problem\n"
"    *   Running the same workflow on several samples can be unnecessarily labour intensive\n"
"    *   Manual manipulation of data files:\n"
"        *   is often not captured in documentation\n"
"        *   is hard to reproduce\n"
"        *   is hard to troubleshoot, review, or improve\n"
"*   The Shell\n"
"    *   Workflows can be automated through the use of shell scripts\n"
"    *   Built-in commands allow for easy data manipulation (e.g. sort, grep, etc.)\n"
"    *   Every step can be captured in the shell script and allow reproducibility and\n"
"        easy troubleshooting"
msgstr ""

#: shell-novice/_extras/guide.md:21
# header
msgid "## Overall"
msgstr ""

#: shell-novice/_extras/guide.md:23
msgid "Many people have questioned whether we should still teach the shell.\n"
"After all,\n"
"anyone who wants to rename several thousand data files\n"
"can easily do so interactively in the Python interpreter,\n"
"and anyone who's doing serious data analysis\n"
"is probably going to do most of their work inside the IPython Notebook or R Studio.\n"
"So why teach the shell?"
msgstr ""

#: shell-novice/_extras/guide.md:31
msgid "The first answer is,\n"
"\"Because so much else depends on it.\"\n"
"Installing software,\n"
"configuring your default editor,\n"
"and controlling remote machines frequently assume a basic familiarity with the shell,\n"
"and with related ideas like standard input and output.\n"
"Many tools also use its terminology\n"
"(for example, the `%ls` and `%cd` magic commands in IPython)."
msgstr ""

#: shell-novice/_extras/guide.md:40
msgid "The second answer is,\n"
"\"Because it's an easy way to introduce some fundamental ideas about how to use computers.\"\n"
"As we teach people how to use the Unix shell,\n"
"we teach them that they should get the computer to repeat things\n"
"(via tab completion,\n"
"`!` followed by a command number,\n"
"and `for` loops)\n"
"rather than repeating things themselves.\n"
"We also teach them to take things they've discovered they do frequently\n"
"and save them for later re-use\n"
"(via shell scripts),\n"
"to give things sensible names,\n"
"and to write a little bit of documentation\n"
"(like comment at the top of shell scripts)\n"
"to make their future selves' lives better."
msgstr ""

#: shell-novice/_extras/guide.md:56
msgid "The third answer is,\n"
"\"Because it enables use of many domain-specific tools and compute resources researchers\n"
"cannot access otherwise.\"\n"
"Familiarity with the shell is very useful for remote accessing machines,\n"
"using high-performance computing infrastructure,\n"
"and running new specialist tools in many disciplines.\n"
"We do not teach HPC or domain-specific skills here\n"
"but lay the groundwork for further development of these skills.\n"
"In particular,\n"
"understanding the syntax of commands, flags, and help systems is useful for domain specific tools\n"
"and understanding the file system (and how to navigate it) is useful for remote access."
msgstr ""

#: shell-novice/_extras/guide.md:68
msgid "Finally,\n"
"and perhaps most importantly,\n"
"teaching people the shell lets us teach them\n"
"to think about programming in terms of function composition.\n"
"In the case of the shell,\n"
"this takes the form of pipelines rather than nested function calls,\n"
"but the core idea of \"small pieces, loosely joined\" is the same."
msgstr ""

#: shell-novice/_extras/guide.md:76
msgid "All of this material can be covered in three hours\n"
"as long as learners using Windows do not run into roadblocks such as:"
msgstr ""

#: shell-novice/_extras/guide.md:79
# unordered list
msgid "*   not being able to figure out where their home directory is"
msgstr ""

#: shell-novice/_extras/guide.md:80
msgid "    (particularly if they're using Cygwin);\n"
"*   not being able to run a plain text editor;\n"
"    and\n"
"*   the shell refusing to run scripts that include DOS line endings."
msgstr ""

#: shell-novice/_extras/guide.md:85
# header
msgid "## Preparing to Teach"
msgstr ""

#: shell-novice/_extras/guide.md:87
# unordered list
msgid "*   Use the `data` directory for in-workshop exercises and live coding examples."
msgstr ""

#: shell-novice/_extras/guide.md:88
msgid "    You can clone the shell-novice directory or use the *Download ZIP*\n"
"    button on the right to get the entire\n"
"    [Git repository](https://github.com/swcarpentry/shell-novice). We also now provide\n"
"    a zip file of the `data` directory\n"
"    at the [Setup page]({{ page.root }}{% link setup.md %})."
msgstr ""

#: shell-novice/_extras/guide.md:94
# unordered list
msgid "*   Website: various practices have been used."
msgstr ""

#: shell-novice/_extras/guide.md:95
# unordered list
msgid "    *   Option 1: Can give links to learners before the lesson so they can follow along,"
msgstr ""

#: shell-novice/_extras/guide.md:96
msgid "        catch up,\n"
"	and see exercises (particularly if you're following the lesson content without many changes).\n"
"    *   Option 2: Don't show the website to the learners during the lesson,\n"
"        as it can be distracting:\n"
"        students may read instead of listen, and having another window open is an additional\n"
"        cognitive load.\n"
"	*   In any case, make sure to point to website as a post-workshop reference."
msgstr ""

#: shell-novice/_extras/guide.md:104
# unordered list
msgid "*   Content:"
msgstr ""

#: shell-novice/_extras/guide.md:105
msgid "    Unless you have a truly generous amount of time (4+ hours),\n"
"    it is likely that you will not cover ALL the material in this lesson in a single half-day\n"
"    session.\n"
"    Plan ahead on what you might skip, what you really want to emphasize, etc."
msgstr ""

#: shell-novice/_extras/guide.md:110
# unordered list
msgid "*   Exercises:"
msgstr ""

#: shell-novice/_extras/guide.md:111
msgid "    Think in advance about how you might want to handle exercises during the lesson.\n"
"    How are you assigning them (website, slide, handout)?\n"
"    Do you want everyone to try it and then you show the solution?\n"
"    Have a learner show the solution?\n"
"    Have groups each do a different exercise and present their solutions?"
msgstr ""

#: shell-novice/_extras/guide.md:117
# unordered list
msgid "*   The [Reference page]({{ page.root }}{% link reference.md %}) can be printed out"
msgstr ""

#: shell-novice/_extras/guide.md:118
msgid "    and given to students as a reference, your choice."
msgstr ""

#: shell-novice/_extras/guide.md:120
# unordered list
msgid "*   Other preparation:"
msgstr ""

#: shell-novice/_extras/guide.md:121
msgid "    Feel free to add your own examples or side comments,\n"
"    but know that it shouldn't be necessary:\n"
"    the topics and commands can be taught as given on the lesson pages.\n"
"    If you think there is a place where the lesson is lacking,\n"
"    feel free to file an issue or submit a pull request."
msgstr ""

#: shell-novice/_extras/guide.md:127
# header
msgid "## Teaching Notes"
msgstr ""

#: shell-novice/_extras/guide.md:129
# unordered list
msgid "*   Super cool online resource!"
msgstr ""

#: shell-novice/_extras/guide.md:130
msgid "    <http://explainshell.com/> will dissect any shell command you type in\n"
"    and display help text for each piece.\n"
"    Additional nice manual tool could be <http://tldr-pages.github.io/>\n"
"    with short very descriptive manuals for shell commands,\n"
"    useful especially on Windows while using Git BASH where `man` could not work."
msgstr ""

#: shell-novice/_extras/guide.md:136
# unordered list
msgid "*   Another super cool online resource is <http://www.shellcheck.net>,"
msgstr ""

#: shell-novice/_extras/guide.md:137
msgid "    which will check shell scripts (both uploaded and typed in) for common errors."
msgstr ""

#: shell-novice/_extras/guide.md:139
# unordered list
msgid "*   Resources for \"splitting\" your shell so that recent commands"
msgstr ""

#: shell-novice/_extras/guide.md:140
msgid "    remain in view: <https://github.com/rgaiacs/swc-shell-split-window>."
msgstr ""

#: shell-novice/_extras/guide.md:142
# unordered list
msgid "*   Learners can sometimes get trapped within command-line text editors such as"
msgstr ""

#: shell-novice/_extras/guide.md:143
msgid "    Vim, Emacs, or Nano.\n"
"    Closing the terminal emulator and opening a new one can be frustrating\n"
"    as learners will have to navigate to the correct folder again.\n"
"    Our recommendation to mitigate this problem is that instructors should use\n"
"    the same text editor as the learners during workshops (in most cases Nano)."
msgstr ""

#: shell-novice/_extras/guide.md:149
# unordered list
msgid "*   Introducing and navigating the filesystem in the shell (covered in"
msgstr ""

#: shell-novice/_extras/guide.md:150
msgid "    [Navigating Files and Directories]({{ page.root }}{% link _episodes/02-filedir.md %}) section)\n"
"    can be confusing.\n"
"    You may have both terminal and GUI file explorer open side by side so learners can see the\n"
"    content and file structure while they're using terminal to navigate the system."
msgstr ""

#: shell-novice/_extras/guide.md:155
# unordered list
msgid "*   Tab completion sounds like a small thing: it isn't."
msgstr ""

#: shell-novice/_extras/guide.md:156
msgid "    Re-running old commands using `!123` or `!wc`\n"
"    isn't a small thing either,\n"
"    and neither are wildcard expansion and `for` loops.\n"
"    Each one is an opportunity to repeat one of the big ideas of Software Carpentry:\n"
"    if the computer *can* repeat it,\n"
"    some programmer somewhere will almost certainly have built\n"
"    some way for the computer *to* repeat it."
msgstr ""

#: shell-novice/_extras/guide.md:164
# unordered list
msgid "*   Building up a pipeline with four or five stages,"
msgstr ""

#: shell-novice/_extras/guide.md:165
msgid "    then putting it in a shell script for re-use\n"
"    and calling that script inside a `for` loop,\n"
"    is a great opportunity to show how\n"
"    \"seven plus or minus two\"\n"
"    connects to programming.\n"
"    Once we have figured out how to do something moderately complicated,\n"
"    we make it re-usable and give it a name\n"
"    so that it only takes up one slot in working memory\n"
"    rather than several.\n"
"    It is also a good opportunity to talk about exploratory programming:\n"
"    rather than designing a program up front,\n"
"    we can do a few useful things\n"
"    and then retroactively decide which are worth encapsulating\n"
"    for future re-use."
msgstr ""

#: shell-novice/_extras/guide.md:180
# unordered list
msgid "*   If everything is going well, you can drive home the point that file"
msgstr ""

#: shell-novice/_extras/guide.md:181
msgid "    extensions are essentially there to help computers (and human\n"
"    readers) understand file content and are not a requirement of files\n"
"    (covered briefly in\n"
"    [Navigating Files and Directories]({{ page.root }}{% link _episodes/02-filedir.md %})).\n"
"    This can be done in the\n"
"    [Pipes and Filters]({{ page.root }}{% link _episodes/04-pipefilter.md %}) section by showing\n"
"    that you can redirect standard output to a file without the .txt extension\n"
"    (e.g., lengths), and that the resulting file is still a perfectly usable text file.\n"
"    Make the point that if double-clicked in the GUI, the computer will\n"
"    probably ask you what you want to do."
msgstr ""

#: shell-novice/_extras/guide.md:192
# unordered list
msgid "*   We have to leave out many important things because of time constraints,"
msgstr ""

#: shell-novice/_extras/guide.md:193
msgid "    including file permissions, job control, and SSH.\n"
"    If learners already understand the basic material,\n"
"    this can be covered instead using the online lessons as guidelines.\n"
"    These limitations also have follow-on consequences:"
msgstr ""

#: shell-novice/_extras/guide.md:198
# unordered list
msgid "*   It's hard to discuss `#!` (shebang) without first discussing"
msgstr ""

#: shell-novice/_extras/guide.md:199
msgid "    permissions, which we don't do.  `#!` is also [pretty\n"
"    complicated][shebang], so even if we did discuss permissions, we\n"
"    probably still wouldn't want to discuss `#!`."
msgstr ""

#: shell-novice/_extras/guide.md:203
# unordered list
msgid "*   Installing Bash and a reasonable set of Unix commands on Windows"
msgstr ""

#: shell-novice/_extras/guide.md:204
msgid "    always involves some fiddling and frustration.\n"
"    Please see the latest set of installation guidelines for advice,\n"
"    and try it out yourself *before* teaching a class."
msgstr ""

#: shell-novice/_extras/guide.md:208
# unordered list
msgid "*   On Windows machines"
msgstr ""

#: shell-novice/_extras/guide.md:209
msgid "    if `nano` hasn't been properly installed with the\n"
"    [Software Carpentry Windows Installer][windows-installer]\n"
"    it is possible to use `notepad` as an alternative.  There will be a GUI\n"
"    interface and line endings are treated differently, but otherwise, for\n"
"    the purposes of this lesson, `notepad` and `nano` can be used almost interchangeably."
msgstr ""

#: shell-novice/_extras/guide.md:215
# unordered list
msgid "*   On Windows, it appears that:"
msgstr ""

#: shell-novice/_extras/guide.md:217
msgid "    ~~~\n"
"    $ cd\n"
"    $ cd Desktop\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

#: shell-novice/_extras/guide.md:223
msgid "    will always put someone on their desktop\n"
"    (unless their machine is backed up using enterprise OneDrive, see next point).\n"
"    Have them create the example directory for the shell exercises there\n"
"    so that they can find it easily\n"
"    and watch it evolve."
msgstr ""

#: shell-novice/_extras/guide.md:229
# unordered list
msgid "*   If a Windows machine is backed up with enterprise OneDrive, their GUI desktop may"
msgstr ""

#: shell-novice/_extras/guide.md:230
msgid "    be rendered from a folder within OneDrive, which will not match the contents of `~/Desktop`.\n"
"    The OneDrive desktop should be accessible using one of the following commands\n"
"    (if the name of the enterprise isn't clear, look through the output of `ls` to find\n"
"    the right folder):"
msgstr ""

#: shell-novice/_extras/guide.md:235
msgid "    ~~~\n"
"    $ cd \"~/OneDrive - Name Of Enterprise/Desktop\"\n"
"    $ cd \"C:/Users/Username/OneDrive - Name Of Enterprise/Desktop\"\n"
"    ~~~\n"
"    {: .language-bash}"
msgstr ""

#: shell-novice/_extras/guide.md:241
msgid "    One way to spot if the computer is using this kind of configuration is to look at files,\n"
"    folders or links on the desktop. Usually the icon contains a shortcut/arrow symbol if it\n"
"    is a link, or just the plain icon if the file is just saved in the `Desktop` folder.\n"
"    Files synced with OneDrive contain an additional symbol indicating the sync status\n"
"    (typically blue arrows for 'sync pending' or a green tick for 'synced')."
msgstr ""

#: shell-novice/_extras/guide.md:247
# unordered list
msgid "*  Stay within POSIX-compliant commands, as all the teaching materials do."
msgstr ""

#: shell-novice/_extras/guide.md:248
msgid "   Your particular shell may have extensions beyond POSIX that are not available\n"
"   on other machines, especially the default macOS bash and Windows bash emulators.\n"
"   For example, POSIX `ls` does not have an `--ignore=` or `-I` option, and POSIX\n"
"   `head` takes `-n 10` or `-10`, but not the long form of `--lines=10`."
msgstr ""

#: shell-novice/_extras/guide.md:253
# header
msgid "## Windows"
msgstr ""

#: shell-novice/_extras/guide.md:255
msgid "Installing Bash and a reasonable set of Unix commands on Windows\n"
"always involves some fiddling and frustration.\n"
"Please see the latest set of installation guidelines for advice,\n"
"and try it out yourself *before* teaching a class.\n"
"Options we have explored include:"
msgstr ""

#: shell-novice/_extras/guide.md:261
# ordered list
msgid "1.  [msysGit](http://msysgit.github.io/) (also called \"Git Bash\"),"
msgstr ""

#: shell-novice/_extras/guide.md:262
# ordered list
msgid "2.  [Cygwin](http://www.cygwin.com/),"
msgstr ""

#: shell-novice/_extras/guide.md:263
# ordered list
msgid "3.  using a desktop virtual machine, and"
msgstr ""

#: shell-novice/_extras/guide.md:264
# ordered list
msgid "4.  having learners connect to a remote Unix machine (typically a VM in the cloud)."
msgstr ""

#: shell-novice/_extras/guide.md:266
msgid "Cygwin was the preferred option until mid-2013,\n"
"but once we started teaching Git,\n"
"msysGit proved to work better.\n"
"Desktop virtual machines and cloud-based VMs work well for technically sophisticated learners,\n"
"and can reduce installation and configuration at the start of the workshop,\n"
"but:"
msgstr ""

#: shell-novice/_extras/guide.md:273
# ordered list
msgid "1.  they don't work well on underpowered machines,"
msgstr ""

#: shell-novice/_extras/guide.md:274
# ordered list
msgid "2.  they're confusing for novices (because simple things like copy and paste work differently),"
msgstr ""

#: shell-novice/_extras/guide.md:275
# ordered list
msgid "3.  learners leave the workshop without a working environment on their operating system of choice,"
msgstr ""

#: shell-novice/_extras/guide.md:276
msgid "    and\n"
"4.  learners may show up without having downloaded the VM or the wireless will go down\n"
"    (or become congested) during the lesson."
msgstr ""

#: shell-novice/_extras/guide.md:280
msgid "Whatever you use,\n"
"please *test it yourself* on a Windows machine *before* your workshop:\n"
"things may always have changed behind your back since your last workshop.\n"
"And please also make use of our\n"
"[Software Carpentry Windows Installer][windows-installer]."
msgstr ""

#: shell-novice/_extras/guide.md:286
msgid "[shebang]: http://www.in-ulm.de/~mascheck/various/shebang/\n"
"[windows-installer]: {{ site.swc_github }}/windows-installer"
msgstr ""

#: shell-novice/aio.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"
msgstr ""

#: shell-novice/aio.md:7
msgid "{% comment %}\n"
"As a maintainer, you do not need to edit this file.\n"
"If you notice that something does not work, please \n"
"open an issue: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"
msgstr ""

#: shell-novice/aio.md:13
msgid "{% include base_path.html %}"
msgstr ""

#: shell-novice/aio.md:15
msgid "{% include aio-script.md %}"
msgstr ""

#: shell-novice/index.md:1
# Front Matter
msgid "---\n"
"layout: lesson\n"
"root: .\n"
"---"
msgstr ""

#: shell-novice/index.md:6
msgid "The Unix shell has been around longer than most of its users\n"
"have been alive. It has survived because it's a powerful tool that\n"
"allows users to perform complex and powerful tasks, often with just\n"
" a few keystrokes or lines of code. It helps users automate repetitive\n"
" tasks and easily combine smaller tasks into larger, more powerful workflows."
msgstr ""

#: shell-novice/index.md:12
msgid "Use of the shell is fundamental to a wide range of advanced computing\n"
"tasks, including high-performance computing. These lessons will introduce\n"
"you to this powerful tool."
msgstr ""

#: shell-novice/index.md:16
# blockquote, which can be cascaded
msgid "> ## Prerequisites"
msgstr ""

#: shell-novice/index.md:17
msgid ">\n"
"> This lesson guides you through the basics of file systems and the\n"
"> shell. If you have stored files on a computer at all and recognize\n"
"> the word \"file\" and either \"directory\" or \"folder\" (two common words\n"
"> for the same thing), you're ready for this lesson.\n"
">\n"
"> If you're already comfortable manipulating files and directories,\n"
"> searching for files with `grep` and `find`, and writing simple loops\n"
"> and scripts, you probably want to explore the next lesson:\n"
"> [shell-extras](https://carpentries-incubator.github.io/shell-extras/)."
msgstr ""

#: shell-novice/index.md:27
# SC/DC Template label
msgid "{: .prereq}"
msgstr ""

#: shell-novice/reference.md:1
# Front Matter
msgid "---\n"
"layout: reference\n"
"---"
msgstr ""

#: shell-novice/reference.md:5
# header
msgid "## Summary of Basic Commands"
msgstr ""

#: shell-novice/reference.md:7
msgid "| Action      | Files | Folders      |\n"
"|-------------|-------|--------------|\n"
"| Inspect     | ls    | ls           |\n"
"| View content| cat   | ls           |\n"
"| Navigate to |       | cd           |\n"
"| Move        | mv    | mv           |\n"
"| Copy        | cp    | cp -r        |\n"
"| Create      | nano  | mkdir        |\n"
"| Delete      | rm    | rmdir, rm -r |"
msgstr ""

#: shell-novice/reference.md:17
# header
msgid "## Filesystem hierarchy"
msgstr ""

#: shell-novice/reference.md:19
msgid "The following is an overview of a standard Unix filesystem.\n"
"The exact hierarchy depends on the platform. Your file/directory structure may differ slightly:"
msgstr ""

#: shell-novice/reference.md:22
msgid "![Linux filesystem hierarchy](fig/standard-filesystem-hierarchy.svg)"
msgstr ""

#: shell-novice/reference.md:24
# header
msgid "## Glossary"
msgstr ""

#: shell-novice/reference.md:26
msgid "{:auto_ids}\n"
"absolute path\n"
":   A [path](#path) that refers to a particular location in a file system.\n"
"    Absolute paths are usually written with respect to the file system's\n"
"    [root directory](#root-directory),\n"
"    and begin with either \"/\" (on Unix) or \"\\\\\" (on Microsoft Windows).\n"
"    See also: [relative path](#relative-path)."
msgstr ""

#: shell-novice/reference.md:34
msgid "argument\n"
":   A value given to a function or program when it runs.\n"
"    The term is often used interchangeably (and inconsistently) with [parameter](#parameter)."
msgstr ""

#: shell-novice/reference.md:38
msgid "command shell\n"
":   See [shell](#shell)"
msgstr ""

#: shell-novice/reference.md:41
msgid "command-line interface\n"
":   A user interface based on typing commands,\n"
"    usually at a [REPL](#read-evaluate-print-loop).\n"
"    See also: [graphical user interface](#graphical-user-interface)."
msgstr ""

#: shell-novice/reference.md:46
msgid "comment\n"
":   A remark in a program that is intended to help human readers understand what is going on,\n"
"    but is ignored by the computer.\n"
"    Comments in Python, R, and the Unix shell start with a `#` character\n"
"    and run to the end of the line;\n"
"    comments in SQL start with `--`,\n"
"    and other languages have other conventions."
msgstr ""

#: shell-novice/reference.md:55
msgid "current working directory\n"
":   The directory that [relative paths](#relative-path) are calculated from;\n"
"    equivalently,\n"
"    the place where files referenced by name only are searched for.\n"
"    Every [process](#process) has a current working directory.\n"
"    The current working directory is usually referred to using the shorthand notation `.`\n"
"    (pronounced \"dot\")."
msgstr ""

#: shell-novice/reference.md:63
msgid "file system\n"
":   A set of files, directories, and I/O devices (such as keyboards and screens).\n"
"    A file system may be spread across many physical devices,\n"
"    or many file systems may be stored on a single physical device;\n"
"    the [operating system](#operating-system) manages access."
msgstr ""

#: shell-novice/reference.md:69
msgid "filename extension\n"
":   The portion of a file's name that comes after the final \".\" character.\n"
"    By convention this identifies the file's type:\n"
"    `.txt` means \"text file\", `.png` means \"Portable Network Graphics file\",\n"
"    and so on. These conventions are not enforced by most operating systems:\n"
"    it is perfectly possible (but confusing!) to name an MP3 sound file `homepage.html`.\n"
"    Since many applications use filename extensions to identify the\n"
"    [MIME type](#mime-type) of the file,\n"
"    misnaming files may cause those applications to fail."
msgstr ""

#: shell-novice/reference.md:79
msgid "filter\n"
":   A program that transforms a stream of data.\n"
"    Many Unix command-line tools are written as filters:\n"
"    they read data from [standard input](#standard-input),\n"
"    process it, and write the result to [standard output](#standard-output)."
msgstr ""

#: shell-novice/reference.md:85
msgid "for loop\n"
":   A loop that is executed once for each value in some kind of set, list, or range.\n"
"    See also: [while loop](#while-loop)."
msgstr ""

#: shell-novice/reference.md:89
msgid "graphical user interface\n"
":   A user interface based on selecting items and actions from a graphical display,\n"
"    usually controlled by using a mouse.\n"
"    See also: [command-line interface](#command-line-interface)."
msgstr ""

#: shell-novice/reference.md:94
msgid "home directory\n"
":   The default directory associated with an account on a computer system.\n"
"    By convention, all of a user's files are stored in or below her home directory."
msgstr ""

#: shell-novice/reference.md:98
msgid "loop\n"
":   A set of instructions to be executed multiple times.\n"
"    Consists of a [loop body](#loop-body) and (usually) a\n"
"    condition for exiting the loop. See also [for loop](#for-loop) and [while loop](#while-loop)."
msgstr ""

#: shell-novice/reference.md:103
msgid "loop body\n"
":   The set of statements or commands that are repeated inside a [for loop](#for-loop)\n"
"    or [while loop](#while-loop)."
msgstr ""

#: shell-novice/reference.md:107
msgid "MIME type\n"
":   MIME (Multi-Purpose Internet Mail Extensions) types describe different file types for exchange\n"
"    on the Internet, for example, images, audio, and documents."
msgstr ""

#: shell-novice/reference.md:111
msgid "operating system\n"
":   Software that manages interactions between users, hardware, and software [processes](#process).\n"
"    Common examples are Linux, macOS, and Windows."
msgstr ""

#: shell-novice/reference.md:115
msgid "option\n"
":   A way to specify an argument or setting to a command-line program.\n"
"    By convention Unix applications use a dash followed by a single letter,\n"
"    such as `-v`, or two dashes followed by a word, such as `--verbose`,\n"
"    while DOS applications use a slash, such as `/V`.\n"
"    Depending on the application, an option may be followed by a single argument,\n"
"    as in `-o /tmp/output.txt`."
msgstr ""

#: shell-novice/reference.md:123
msgid "parameter\n"
":   A variable named in a function's declaration that is used to hold a value passed into the call.\n"
"    The term is often used interchangeably (and inconsistently) with [argument](#argument)."
msgstr ""

#: shell-novice/reference.md:127
msgid "parent directory\n"
":   The directory that \"contains\" the one in question.\n"
"    Every directory in a file system except the [root directory](#root-directory) has a parent.\n"
"    A directory's parent is usually referred to using the shorthand notation `..`\n"
"    (pronounced \"dot dot\")."
msgstr ""

#: shell-novice/reference.md:133
msgid "path\n"
":   A description that specifies the location of a file or directory within a\n"
"    [file system](#file-system).\n"
"    See also: [absolute path](#absolute-path), [relative path](#relative-path)."
msgstr ""

#: shell-novice/reference.md:139
msgid "pipe\n"
":   A connection from the output of one program to the input of another.\n"
"    When two or more programs are connected in this way, they are called a \"pipeline\"."
msgstr ""

#: shell-novice/reference.md:143
msgid "process\n"
":   A running instance of a program, containing code, variable values,\n"
"    open files and network connections, and so on.\n"
"    Processes are the \"actors\" that the [operating system](#operating-system) manages;\n"
"    it typically runs each process for a few milliseconds at a time\n"
"    to give the impression that they are executing simultaneously."
msgstr ""

#: shell-novice/reference.md:151
msgid "prompt\n"
":   A character or characters display by a [REPL](#read-evaluate-print-loop) to show that\n"
"    it is waiting for its next command."
msgstr ""

#: shell-novice/reference.md:155
msgid "quoting\n"
":   (in the shell):\n"
"    Using quotation marks of various kinds to prevent the shell from interpreting special\n"
"    characters.\n"
"    For example, to pass the string `*.txt` to a program,\n"
"    it is usually necessary to write it as `'*.txt'` (with single quotes)\n"
"    so that the shell will not try to expand the `*` wildcard."
msgstr ""

#: shell-novice/reference.md:163
msgid "read-evaluate-print loop\n"
":   (REPL): A [command-line interface](#command-line-interface) that reads a command from the user,\n"
"    executes it, prints the result, and waits for another command."
msgstr ""

#: shell-novice/reference.md:167
msgid "redirect\n"
":   To send a command's output to a file rather than to the screen or another command,\n"
"    or equivalently to read a command's input from a file."
msgstr ""

#: shell-novice/reference.md:171
msgid "regular expression\n"
":   A pattern that specifies a set of character strings.\n"
"    REs are most often used to find sequences of characters in strings."
msgstr ""

#: shell-novice/reference.md:175
msgid "relative path\n"
":   A [path](#path) that specifies the location of a file or directory\n"
"    with respect to the [current working directory](#current-working-directory).\n"
"    Any path that does not begin with a separator character (\"/\" or \"\\\\\") is a relative path.\n"
"    See also: [absolute path](#absolute-path)."
msgstr ""

#: shell-novice/reference.md:181
msgid "root directory\n"
":   The top-most directory in a [file system](#file-system).\n"
"    Its name is \"/\" on Unix (including Linux and macOS) and \"\\\\\" on Microsoft Windows."
msgstr ""

#: shell-novice/reference.md:185
msgid "shell\n"
":   A [command-line interface](#cli) such as Bash (the Bourne-Again Shell)\n"
"    or the Microsoft Windows DOS shell\n"
"    that allows a user to interact with the [operating system](#operating-system)."
msgstr ""

#: shell-novice/reference.md:190
msgid "shell script\n"
":   A set of [shell](#shell) commands stored in a file for re-use.\n"
"    A shell script is a program executed by the shell;\n"
"    the name \"script\" is used for historical reasons."
msgstr ""

#: shell-novice/reference.md:196
msgid "standard input\n"
":   A process's default input stream.\n"
"    In interactive command-line applications,\n"
"    it is typically connected to the keyboard;\n"
"    in a [pipe](#pipe),\n"
"    it receives data from the [standard output](#standard-output) of the preceding process."
msgstr ""

#: shell-novice/reference.md:204
msgid "standard output\n"
":   A process's default output stream.\n"
"    In interactive command-line applications,\n"
"    data sent to standard output is displayed on the screen;\n"
"    in a [pipe](#pipe),\n"
"    it is passed to the [standard input](#standard-input) of the next process."
msgstr ""

#: shell-novice/reference.md:212
msgid "sub-directory\n"
":   A directory contained within another directory."
msgstr ""

#: shell-novice/reference.md:215
msgid "tab completion\n"
":   A feature provided by many interactive systems in which\n"
"    pressing the Tab key triggers automatic completion of the current word or command."
msgstr ""

#: shell-novice/reference.md:219
msgid "variable\n"
":   A name in a program that is associated with a value or a collection of values."
msgstr ""

#: shell-novice/reference.md:222
msgid "while loop\n"
":   A loop that keeps executing as long as some condition is true.\n"
"    See also: [for loop](#for-loop)."
msgstr ""

#: shell-novice/reference.md:226
msgid "wildcard\n"
":   A character used in pattern matching.\n"
"    In the Unix shell,\n"
"    the wildcard `*` matches zero or more characters,\n"
"    so that `*.txt` matches all files whose names end in `.txt`."
msgstr ""

#: shell-novice/reference.md:232
# header
msgid "## External references"
msgstr ""

#: shell-novice/reference.md:234
# header
msgid "### Opening a terminal"
msgstr ""

#: shell-novice/reference.md:235
# unordered list
msgid "* [How to Use Terminal on a Mac](http://www.macworld.co.uk/feature/mac-software/how-use-terminal-on-mac-3608274/)"
msgstr ""

#: shell-novice/reference.md:236
# unordered list
msgid "* [Git for Windows](https://git-for-windows.github.io/)"
msgstr ""

#: shell-novice/reference.md:237
# unordered list
msgid "* [How to Install Bash shell command-line tool on Windows 10](https://www.windowscentral.com/how-install-bash-shell-command-line-windows-10)"
msgstr ""

#: shell-novice/reference.md:238
# unordered list
msgid "* [Install and Use the Linux Bash Shell on Windows 10](https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/)"
msgstr ""

#: shell-novice/reference.md:239
# unordered list
msgid "* [Using the Windows 10 Bash Shell](https://www.howtogeek.com/265900/everything-you-can-do-with-windows-10s-new-bash-shell/)"
msgstr ""

#: shell-novice/reference.md:240
# unordered list
msgid "* [Using a UNIX/Linux emulator (Cygwin) or Secure Shell (SSH) client (Putty)](http://faculty.smu.edu/reynolds/unixtut/windows.html)"
msgstr ""

#: shell-novice/reference.md:242
# header
msgid "### Manuals"
msgstr ""

#: shell-novice/reference.md:243
# unordered list
msgid "* [GNU manuals](http://www.gnu.org/manual/manual.html)"
msgstr ""

#: shell-novice/reference.md:244
# unordered list
msgid "* [Core GNU utilities](http://www.gnu.org/software/coreutils/manual/coreutils.html)"
msgstr ""

#: shell-novice/reference.md:246
# header
msgid "### Miscellaneous"
msgstr ""

#: shell-novice/reference.md:247
# unordered list
msgid "* [North Pacific Gyre](http://en.wikipedia.org/wiki/North_Pacific_Gyre)"
msgstr ""

#: shell-novice/reference.md:248
# unordered list
msgid "* [Great Pacific Garbage Patch](http://en.wikipedia.org/wiki/Great_Pacific_Garbage_Patch)"
msgstr ""

#: shell-novice/reference.md:249
# unordered list
msgid "* ['Ensuring the longevity of digital information' by Jeff Rothenberg](http://www.clir.org/pubs/archives/ensuring.pdf)"
msgstr ""

#: shell-novice/reference.md:250
# unordered list
msgid "* [Computer error haikus](http://wiki.c2.com/?ComputerErrorHaiku)"
msgstr ""

#: shell-novice/reference.md:251
# unordered list
msgid "* [How to name files nicely, by Jenny Bryan](https://speakerdeck.com/jennybc/how-to-name-files)"
msgstr ""

#: shell-novice/setup.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Setup\n"
"root: .\n"
"---"
msgstr ""

#: shell-novice/setup.md:7
# header
msgid "## Download files"
msgstr ""

#: shell-novice/setup.md:8
msgid "You need to download some files to follow this lesson."
msgstr ""

#: shell-novice/setup.md:10
# ordered list
msgid "1. Download [shell-lesson-data.zip][zip-file] and move the file to your Desktop."
msgstr ""

#: shell-novice/setup.md:11
# ordered list
msgid "2. Unzip/extract the file."
msgstr ""

#: shell-novice/setup.md:12
msgid "   **Let your instructor know if you need help with this step**.\n"
"   You should end up with a new folder called **`shell-lesson-data`** on your Desktop."
msgstr ""

#: shell-novice/setup.md:15
# header
msgid "## Install software"
msgstr ""

#: shell-novice/setup.md:16
msgid "If you do not already have the shell software installed, you will need to\n"
"[download and install][install_shell] it."
msgstr ""

#: shell-novice/setup.md:19
# header
msgid "## Open a new shell"
msgstr ""

#: shell-novice/setup.md:20
msgid "After installing the software\n"
"3. Open a terminal.\n"
"   If you're not sure how to open a terminal on your operating system, see the instructions below.\n"
"4. In the terminal type `cd` then press the <kbd>Return</kbd> key.\n"
"   This step will make sure you start with your home folder as your working directory."
msgstr ""

#: shell-novice/setup.md:26
msgid "In the lesson, you will find out how to access the data files in this folder."
msgstr ""

#: shell-novice/setup.md:28
# blockquote, which can be cascaded
msgid "> ## Where to type commands: How to open a new shell"
msgstr ""

#: shell-novice/setup.md:29
msgid ">\n"
"> The shell is a program that enables us to send commands to the computer and receive output.\n"
"> It is also referred to as the terminal or command line.\n"
">\n"
"> Some computers include a default Unix Shell program.\n"
"> The steps below describe some methods for identifying and opening\n"
"> a Unix Shell program if you already have one installed.\n"
"> There are also options for identifying and downloading a Unix Shell program,\n"
"> a Linux/UNIX emulator, or a program to access a Unix Shell on a server.\n"
">\n"
"> If none of the options below address your circumstances,\n"
"> try an online search for: Unix shell [your computer model] [your operating system]."
msgstr ""

#: shell-novice/setup.md:43
msgid "{::options parse_block_html=\"true\" /}\n"
"<div>\n"
"<ul class=\"nav nav-tabs nav-justified\" role=\"tablist\">\n"
"<li role=\"presentation\" class=\"active\"><a data-os=\"windows\" href=\"#windows\" aria-controls=\"Windows\"\n"
"role=\"tab\" data-toggle=\"tab\">Windows</a></li>\n"
"<li role=\"presentation\"><a data-os=\"macos\" href=\"#macos\" aria-controls=\"macOS\" role=\"tab\"\n"
"data-toggle=\"tab\">macOS</a></li>\n"
"<li role=\"presentation\"><a data-os=\"linux\" href=\"#linux\" aria-controls=\"Linux\" role=\"tab\"\n"
"data-toggle=\"tab\">Linux</a></li>\n"
"</ul>"
msgstr ""

#: shell-novice/setup.md:54
msgid "<div class=\"tab-content\">\n"
"<article role=\"tabpanel\" class=\"tab-pane active\" id=\"windows\">\n"
"Computers with Windows operating systems do not automatically have a Unix Shell program\n"
"installed.\n"
"In this lesson, we encourage you to use an emulator included in [Git for Windows][install_shell],\n"
"which gives you access to both Bash shell commands and Git."
msgstr ""

#: shell-novice/setup.md:61
msgid "Once installed, you can open a terminal by running the program Git Bash from the Windows start\n"
"menu."
msgstr ""

#: shell-novice/setup.md:64
msgid "**For advanced users:**"
msgstr ""

#: shell-novice/setup.md:66
msgid "As an alternative to Git for Windows you may wish to [Install the Windows Subsystem for Linux][wsl]\n"
"which gives access to a Bash shell command-line tool in Windows 10."
msgstr ""

#: shell-novice/setup.md:69
msgid "Please note that commands in the Windows Subsystem for Linux (WSL) may differ slightly\n"
"from those shown in the lesson or presented in the workshop.\n"
"</article>"
msgstr ""

#: shell-novice/setup.md:73
msgid "<article role=\"tabpanel\" class=\"tab-pane\" id=\"macos\">\n"
"For a Mac computer running macOS Mojave or earlier releases, the default Unix Shell is Bash.\n"
"For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh.\n"
"Your default shell is available via the Terminal program within your Utilities folder."
msgstr ""

#: shell-novice/setup.md:78
msgid "To open Terminal, try one or both of the following:\n"
"* In Finder, select the Go menu, then select Utilities.\n"
"  Locate Terminal in the Utilities folder and open it.\n"
"* Use the Mac 'Spotlight' computer search function.\n"
"  Search for: `Terminal` and press <kbd>Return</kbd>."
msgstr ""

#: shell-novice/setup.md:84
msgid "To check if your machine is set up to use something other than Bash,\n"
"type `echo $SHELL` in your terminal window."
msgstr ""

#: shell-novice/setup.md:87
msgid "If your machine is set up to use something other than Bash,\n"
"you can run it by opening a terminal and typing `bash`."
msgstr ""

#: shell-novice/setup.md:90
msgid "[How to Use Terminal on a Mac][mac-terminal]\n"
"</article>"
msgstr ""

#: shell-novice/setup.md:93
msgid "<article role=\"tabpanel\" class=\"tab-pane\" id=\"linux\">\n"
"The default Unix Shell for Linux operating systems is usually Bash.\n"
"On most versions of Linux, it is accessible by running the\n"
"[Gnome Terminal][gnome-terminal] or [KDE Konsole][kde-konsole] or [xterm][xterm],\n"
"which can be found via the applications menu or the search bar.\n"
"If your machine is set up to use something other than Bash,\n"
"you can run it by opening a terminal and typing `bash`.\n"
"</article>\n"
"</div>\n"
"</div>"
msgstr ""

#: shell-novice/setup.md:104
msgid "[zip-file]: {{ page.root }}/data/shell-lesson-data.zip\n"
"[wsl]: https://docs.microsoft.com/en-us/windows/wsl/install-win10\n"
"[mac-terminal]: http://www.macworld.co.uk/feature/mac-software/how-use-terminal-on-mac-3608274/\n"
"[gnome-terminal]: https://help.gnome.org/users/gnome-terminal/stable/\n"
"[kde-konsole]: https://konsole.kde.org/\n"
"[xterm]: https://en.wikipedia.org/wiki/Xterm\n"
"[install_shell]: https://carpentries.github.io/workshop-template/#shell"
msgstr ""

