# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# David PS <dps.helio@gmail.com>, 2022.
# Mariya Spatar, 2023.
# Maryna Novozhylova, 2022.
# Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023.
# Olexandr Konovalov, 2022.
# Olexandr Konovalov, 2023.
# Svitlana Braichenko, 2023.
# Марина Новожилова, 2022.
# Ольга Чуб, 2022.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023\n"
"Language-Team: Ukrainian (https://www.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: python-novice-gapminder/_episodes/01-run-quit.md:1
msgid ""
"---\n"
"title: \"Running and Quitting\"\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I run Python programs?\"\n"
"objectives:\n"
"- \"Launch the JupyterLab server.\" \n"
"- \"Create a new Python script.\" \n"
"- \"Create a Jupyter notebook.\"\n"
"- \"Shutdown the JupyterLab server.\"\n"
"- \"Understand the difference between a Python script and a Jupyter notebook.\"\n"
"- \"Create Markdown cells in a notebook.\"\n"
"- \"Create and run Python cells in a notebook.\"\n"
"keypoints:\n"
"- \"Python scripts are plain text files.\"\n"
"- \"Use the Jupyter Notebook for editing and running Python.\"\n"
"- \"The Notebook has Command and Edit modes.\"\n"
"- \"Use the keyboard and mouse to select and edit cells.\"\n"
"- \"The Notebook will turn Markdown into pretty-printed documentation.\"\n"
"- \"Markdown does most of what HTML does.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Запуск та завершення\"\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"Як запустити програми Python?\"\n"
"objectives:\n"
"- \"Запустити сервер JupyterLab.\"\n"
"- \"Створити новий сценарій Python.\"\n"
"- \"Створити блокнот Jupyter.\"\n"
"- \"Зупинити сервер JupyterLab.\"\n"
"- \"Зрозуміти різницю між сценарієм Python і блокнотом Jupyter.\"\n"
"- \"Створити клітинки Markdown у блокноті.\"\n"
"- \"Створити та запустити клітинки Python в блокноті.\"\n"
"keypoints:\n"
"- \"Сценарії Python - це звичайні текстові файли.\"\n"
"- \"Використовуйте Jupyter Notebook для редагування та запуску Python.\"\n"
"- \"Jupyter Notebook має режими Команд та Редагування.\"\n"
"- \"Використовуйте клавіатуру та мишу для виділення та редагування клітинок.\"\n"
"- \"The Notebook перетворює Markdown в якісно оформлену документацію.\"\n"
"- \"Markdown робить більшість того, що робить HTML.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:24
msgid "## Getting Started with JupyterLab"
msgstr "## Початок роботи з JupyterLab"

#: python-novice-gapminder/_episodes/01-run-quit.md:26
msgid ""
"While many software developers will often use an integrated development environment (IDE) or a \n"
"text editor to create and edit their Python programs we will be using [JupyterLab][jupyterlab] \n"
"during this lesson. "
msgstr ""
"Багато розробників програмного забезпечення для створення\n"
"та редагування своїх програм мовою Python використовують інтегроване\n"
"середовище розробника (integrated development environment, або IDE)\n"
"або текстовий редактор. Це загальний підхід, але протягом цього уроку ми будемо використовувати [JupyterLab][jupyterlab]."

#: python-novice-gapminder/_episodes/01-run-quit.md:30
msgid ""
"JupyterLab is an application with a web-based user interface from [Project Jupyter][jupyter] that \n"
"enables one to work with documents and activities such as Jupyter notebooks, text editors, terminals,\n"
"and even custom components in a flexible, integrated, and extensible manner. JupyterLab requires a\n"
"reasonably up-to-date browser (ideally a current version of Chrome, Safari, or Firefox); Internet\n"
"Explorer versions 9 and below are *not* supported."
msgstr ""
"JupyterLab є програмним додатком з веборієнтованим інтерфейсом користувача з [Project Jupyter][jupyter] , який\n"
"уможливлює опрацювання документів та застосування таких інструментів, як Jupyter notebooks, текстові редактори, термінали\n"
"і навіть спеціальні компоненти користувача у гнучкий,  інтегрований та розширюваний спосіб. JupyterLab потребує\n"
"досить сучасний браузер (в ідеалі це має бути остання версія Chrome, Safari або Firefox); Internet\n"
"Explorer версії 9 і нижче  *не* підтримується."

#: python-novice-gapminder/_episodes/01-run-quit.md:36
msgid ""
"JupyterLab is included as part of the Anaconda Python distribution. If you have not already \n"
"installed the Anaconda Python distribution, see [the setup instructions]({{ page.root }}/setup/) \n"
"for installation instructions."
msgstr ""
"JupyterLab є частиною інсталяційного пакета Anaconda Python. Якщо ви не \n"
"встановили дистрибутив Anaconda Python, зверніть увагу на  [інструкції з налаштування]({{ page.root }}/setup/) ,\n"
"де розміщено інструкції щодо процесу інсталяції."

#: python-novice-gapminder/_episodes/01-run-quit.md:40
msgid ""
"Even though JupyterLab is a web-based application, JupyterLab runs locally on your machine and \n"
"does not require an internet connection.\n"
"*   The JupyterLab server sends messages to your web browser.\n"
"*   The JupyterLab server does the work and the web browser renders the result.\n"
"*   You will type code into the browser and see the result when the web page talks to the \n"
"    JupyterLab server."
msgstr ""
"Незважаючи на те, що JupyterLab є вебдодатком, JupyterLab працює локально на вашому комп'ютері та\n"
"не потребує зв'язку з інтернетом.\n"
"* Сервер JupyterLab надсилає повідомлення вашому веббраузеру.\n"
"* Сервер JupyterLab опрацьовує інформацію, та веббраузер відображає результат.\n"
"* Ви вводите код в браузер і бачите результат, коли веб сторінка зв'яжеться з \n"
"сервером JupyterLab."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:47
msgid "> ## JupyterLab? What about Jupyter notebooks?"
msgstr "> ## JupyterLab? А чому не Jupyter notebooks? "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:48
#: python-novice-gapminder/_episodes/01-run-quit.md:52
#: python-novice-gapminder/_episodes/07-reading-tabular.md:368
#: python-novice-gapminder/_episodes/08-data-frames.md:370
#: python-novice-gapminder/_episodes/09-plotting.md:130
#: python-novice-gapminder/_episodes/09-plotting.md:278
#: python-novice-gapminder/_episodes/09-plotting.md:288
msgid "> "
msgstr "> "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:49
msgid ""
"> JupyterLab is the [next stage in the evolution of the Jupyter "
"Notebook](https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html#overview)."
" If you have prior "
msgstr ""
"> JupyterLab є [подальшим кроком в еволюції  Jupyter "
"Notebook](https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html#overview)."
" Якщо ви раніше "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:50
msgid ""
"> experience working with Jupyter notebooks, then you will have a a good "
"idea of what to expect "
msgstr ""
"> використовували Jupyter notebooks, то ви добре зрозумієте діапазон "
"можливостей "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:51
msgid "> from JupyterLab. "
msgstr "> JupyterLab. "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:53
msgid ""
"> Experienced users of Jupyter notebooks interested in a more detailed "
"discussion of the similarities and differences"
msgstr ""
"> Користувачі, що мають досвід застосування Jupyter notebooks та зацікавлені"
" в більш детальному описі подібностей та відмінностей"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:54
msgid ""
"> between the JupyterLab and Jupyter notebook user interfaces can find more "
"information in the "
msgstr ""
"> між інтерфейсами користувача JupyterLab та Jupyter notebook, можуть знайти"
" більше інформації в "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:55
msgid "> [JupyterLab user interface documentation][jupyterlab-ui]."
msgstr "> [JupyterLab документації інтерфейсу користувача][jupyterlab-ui]."

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:56
#: python-novice-gapminder/_episodes/01-run-quit.md:182
#: python-novice-gapminder/_episodes/01-run-quit.md:226
#: python-novice-gapminder/_episodes/02-variables.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:35
#: python-novice-gapminder/_episodes/07-reading-tabular.md:72
#: python-novice-gapminder/_episodes/09-plotting.md:153
#: python-novice-gapminder/_episodes/09-plotting.md:312
#: python-novice-gapminder/_episodes/09-plotting.md:320
#: python-novice-gapminder/_episodes/13-conditionals.md:251
#: python-novice-gapminder/_episodes/13-conditionals.md:427
#: python-novice-gapminder/_episodes/18-style.md:99
#: python-novice-gapminder/_extras/design.md:14
#: python-novice-gapminder/index.md:21
msgid "{: .callout}"
msgstr "{: .callout}"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:58
msgid "## Starting JupyterLab"
msgstr "## Початок роботи з JupyterLab"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:60
msgid "### Mac OS X"
msgstr "### Користувачі Mac OS X"

#: python-novice-gapminder/_episodes/01-run-quit.md:61
msgid ""
"To start the JupyterLab server you will need to access the command line through the Terminal. \n"
"There are two ways to open Terminal on Mac."
msgstr ""
"Для запуску сервера JupyterLab server ви маєте отримати доступ до командного рядка через Terminal. Terminal — це стандартний застосунок Mac OS, емулятор консолі, так званий command line interface. \n"
"Є два способи відкрити Terminal на Mac."

# ordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:64
msgid ""
"1. In your Applications folder, open Utilities and double-click on Terminal"
msgstr ""
"1. У директорії Applications відкрийте теку Utilities і двічі натисніть "
"Terminal"

# ordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:65
msgid ""
"2. Press <kbd>Command</kbd> + <kbd>spacebar</kbd> to launch Spotlight. Type "
"`Terminal` and then "
msgstr ""
"2. Натисніть <kbd>Command</kbd> + <kbd>spacebar</kbd>, щоб запустити "
"Spotlight. Введіть `Terminal` і потім "

#: python-novice-gapminder/_episodes/01-run-quit.md:66
msgid "double-click the search result or hit <kbd>Enter</kbd>"
msgstr ""
"зробіть подвійне натискання на результат пошуку або натисніть "
"<kbd>Enter</kbd>"

#: python-novice-gapminder/_episodes/01-run-quit.md:68
msgid ""
"After you have launched Terminal, type the command to launch the JupyterLab "
"server."
msgstr ""
"Після запуску Terminal введіть команду для запуску сервера JupyterLab. "

# code block
#: python-novice-gapminder/_episodes/01-run-quit.md:70
#: python-novice-gapminder/_episodes/01-run-quit.md:82
#: python-novice-gapminder/_episodes/01-run-quit.md:505
msgid ""
"~~~\n"
"$ jupyter lab\n"
"~~~"
msgstr ""
"~~~\n"
"$ jupyter lab\n"
"~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:73
#: python-novice-gapminder/_episodes/01-run-quit.md:85
msgid "{: .bash}"
msgstr "{: .bash}"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:75
msgid "### Windows Users"
msgstr "### Користувачі Windows"

#: python-novice-gapminder/_episodes/01-run-quit.md:76
msgid ""
"To start the JupyterLab server you will need to access the open Anaconda "
"Prompt."
msgstr ""
"Для запуску JupyterLab server вам потрібен доступ до додатку Anaconda "
"Prompt."

#: python-novice-gapminder/_episodes/01-run-quit.md:78
msgid ""
"Press <kbd>Windows Logo Key</kbd> and search for `Anaconda Prompt`, click "
"the result or press enter."
msgstr ""
"Натисніть <kbd>Windows Logo Key</kbd> і знайдіть `Anaconda Prompt`, "
"натисніть на результат пошуку або на клавішу enter."

#: python-novice-gapminder/_episodes/01-run-quit.md:80
msgid "After you have launched the Anaconda Prompt, type the command:"
msgstr "Після запуску Anaconda Prompt введіть команду:"

#: python-novice-gapminder/_episodes/01-run-quit.md:87
msgid ""
"Below is a screenshot of a similar JupyterLab landing page to the one that should open in your \n"
"default web browser after starting the JupyterLab server on wither Mac OS X or Windows."
msgstr ""
"Нижче наведено скріншот екрана цільової сторінки JupyterLab, схожої на ту, яка має відкритися у вашому \n"
"веббраузері за замовчуванням після запуску сервера JupyterLab в операційній системі Mac OS X або ОС Windows."

#: python-novice-gapminder/_episodes/01-run-quit.md:90
msgid ""
"<p align='center'>\n"
"  <img alt=\"JupyterLab landing page\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_landing_page.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"  <img alt=\"JupyterLab landing page\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_landing_page.png\" width=\"750\"/>\n"
"</p>"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:94
msgid "## The JupyterLab Interface"
msgstr "## Інтерфейс JupyterLab"

#: python-novice-gapminder/_episodes/01-run-quit.md:96
msgid ""
"JupyterLab has many features found in traditional integrated development environments (IDEs) but \n"
"is focused on providing flexible building blocks for interactive, exploratory computing."
msgstr ""
"JupyterLab має багато можливостей традиційних інтегрованих середовищ розробки (IDE), але\n"
"його особливістю є забезпечення гнучких будівельних блоків для інтерактивних дослідницьких обчислень."

#: python-novice-gapminder/_episodes/01-run-quit.md:99
msgid ""
"The [JupyterLab Interface](https://jupyterlab.readthedocs.io/en/stable/user/interface.html) \n"
"consists of the Menu Bar, a collapsable Left Side Bar, and the Main Work Area which contains tabs \n"
"of documents and activities."
msgstr ""
"[Інтерфейс JupyterLab](https://jupyterlab.readthedocs.io/en/stable/user/interface.html) \n"
"складається з панелі меню, півої бічної панелі, що згортається, і основної робочої області, яка містить вкладки\n"
"з документами та діями."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:103
msgid "### Menu Bar"
msgstr "### Панель Меню"

#: python-novice-gapminder/_episodes/01-run-quit.md:105
msgid ""
"The Menu Bar at the top of JupyterLab has the top-level menus that expose various actions \n"
"available in JupyterLab along with their keyboard shortcuts (where applicable). The following \n"
"menus are included by default."
msgstr ""
"Панель меню у верхній частині JupyterLab містить меню верхнього рівня, яке відображає різні дії, \n"
"доступні в JupyterLab разом із їхніми комбінаціями клавіш (де це можливо). Наступні \n"
"пункти меню включені за замовчуванням."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:109
msgid ""
"*   **File:** Actions related to files and directories such as *New*, "
"*Open*, *Close*, *Save*, etc. The *File* menu also includes the *Quit* "
"action used to shutdown the JupyterLab server."
msgstr ""
"* **File:** Дії, пов’язані з упорядкуванням файлів та директорій, такі як "
"*New*, *Open*, *Close*, *Save*, і так далі. Меню *File* також включає  дію "
"*Quit*, яка  застосовується для завершення роботи сервера JupyterLab."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:110
msgid ""
"*   **Edit:** Actions related to editing documents and other activities such"
" as *Undo*, *Cut*, *Copy*, *Paste*, etc."
msgstr ""
"*  **Edit:** Дії, пов’язані з редагуванням документів та іншими видами "
"діяльності, такими, як *Undo*, *Cut*, *Copy*, *Paste* тощо."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:111
msgid "*   **View:** Actions that alter the appearance of JupyterLab."
msgstr "*  **View:** Дії, які змінюють зовнішній вигляд JupyterLab."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:112
msgid ""
"*   **Run:** Actions for running code in different activities such as "
"notebooks and code consoles (discussed below)."
msgstr ""
"*  **Run:** Дії для запуску коду в різних інструментах, таких як notebooks "
"та кодові консолі (розглянуто нижче)."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:113
msgid ""
"*   **Kernel:** Actions for managing kernels which, as mentioned above, are "
"separate processes for running code."
msgstr ""
"*   **Kernel:** Дії для керування ядрами, які є окремими процесами для "
"запуску коду."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:114
msgid ""
"*   **Tabs:** A list of the open documents and activities in the dock panel."
msgstr "*  **Tabs:** Список відкритих документів і дій в dock panel."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:115
msgid ""
"*   **Settings:** Common JupyterLab settings can be configured using this "
"menu. There is also an *Advanced Settings Editor* option in the dropdown "
"menu that provides more fine-grained control of JupyterLab settings and "
"configuration options."
msgstr ""
"*  **Settings:** Загальні параметри JupyterLab можна налаштувати за "
"допомогою цього меню.  Крім того, у меню, що випадає, також є опція "
"*Advanced Settings Editor*, яка забезпечує більш детальний контроль "
"параметрів і опцій конфігурації JupyterLab. "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:116
msgid "*   **Help:** A list of JupyterLab and kernel help links."
msgstr "*  **Help:** Список посилань на довідку JupyterLab і ядра."

#: python-novice-gapminder/_episodes/01-run-quit.md:118
msgid "A screenshot of the default Menu Bar is provided below."
msgstr "Нижче наведено скриншот панелі меню за замовчуванням."

#: python-novice-gapminder/_episodes/01-run-quit.md:120
msgid ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Menu Bar\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_menu_bar.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Menu Bar\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_menu_bar.png\" width=\"750\"/>\n"
"</p>"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:124
msgid "### Left Sidebar"
msgstr "### Ліва бічна панель"

#: python-novice-gapminder/_episodes/01-run-quit.md:126
msgid ""
"The left sidebar contains a number of commonly-used tabs, such as a file browser (showing the \n"
"contents of the directory in which the JupyterLab server was launched!), a list of running kernels \n"
"and terminals, the command palette, and a list of open tabs in the main work area. A screenshot of \n"
"the default Left Side Bar is provided below."
msgstr ""
"Ліва бічна панель містить множину  вкладок, що часто використовуються, а саме: браузер файлів (показує \n"
"вміст каталогу, де сервер JupyterLab server був запущений!), перелік працюючих ядер \n"
"та терміналов, панель команд і список відкритих вкладок в основній робочій області.Скріншот \n"
"вигляду лівої бічної панелі за замовчуванням наведений нижче."

#: python-novice-gapminder/_episodes/01-run-quit.md:131
msgid ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Left Side Bar\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_left_side_bar.png\" width=\"250\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Left Side Bar\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_left_side_bar.png\" width=\"250\"/>\n"
"</p>"

#: python-novice-gapminder/_episodes/01-run-quit.md:135
msgid ""
"The left sidebar can be collapsed or expanded by selecting “Show Left Sidebar” in the View menu or \n"
"by clicking on the active sidebar tab."
msgstr ""
"Ліву бічну панель можна згорнути або розгорнути за допомогою вибору пункту “Show Left Sidebar” меню View або \n"
"натиснувши на активну вкладку бічної панелі."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:138
msgid "### Main Work Area"
msgstr "### Основна робоча область"

#: python-novice-gapminder/_episodes/01-run-quit.md:140
msgid ""
"The main work area in JupyterLab enables you to arrange documents (notebooks, text files, etc.) \n"
"and other activities (terminals, code consoles, etc.) into panels of tabs that can be resized or \n"
"subdivided. A screenshot of the default Menu Bar is provided below."
msgstr ""
"Основна робоча область JupyterLab уможливлює групування документів (блокнотів, текстових файлів, і так далі) \n"
"та інших інструментів (терміналів, консолей кода, та інше) у вигляді панелей зі вкладками, які можна розділити або \n"
"змінити їх розмір. Скриншот панелі меню надано нижче."

#: python-novice-gapminder/_episodes/01-run-quit.md:144
msgid ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Main Work Area\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_main_work_area.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"JupyterLab Main Work Area\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_main_work_area.png\" width=\"750\"/>\n"
"</p>"

#: python-novice-gapminder/_episodes/01-run-quit.md:148
msgid ""
"Drag a tab to the center of a tab panel to move the tab to the panel. Subdivide a tab panel by \n"
"dragging a tab to the left, right, top, or bottom of the panel. The work area has a single current \n"
"activity. The tab for the current activity is marked with a colored top border (blue by default)."
msgstr ""
"Перетягніть вкладку в центр панелі вкладок, щоб перемістити вкладку на панель. Розділіть панель вкладок за допомогою \n"
"перетягування вкладки ліворуч, праворуч, до верху або до низу панелі. Робоча панель має одну поточну \n"
"дію. Вкладка для поточної дії позначена кольоровою верхньою рамкою (за замовчуванням - синьою)."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:152
msgid "## Creating a Python script"
msgstr "## Створення сценарію Python"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:154
msgid ""
"*   To start writing a new Python program click the Text File icon under the"
" *Other* header in the Launcher tab of the Main Work Area."
msgstr ""
"* Щоб почати писати нову програму на Python, натисніть  піктограму "
"текстового файлу під заголовком *Інше* на вкладці  Launcher (Запуск) "
"головної робочої області. "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:155
msgid ""
"    *   You can also create a new plain text file by selecting the *New -> "
"Text File* from the *File* menu in the Menu Bar."
msgstr ""
"* Можна також створити новий звичайний текстовий файл, якщо обрати  *New -> "
"Text File* меню *File* на панелі  Menu."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:156
msgid ""
"*   To convert this plain text file to a Python program, select the *Save "
"File As* action from the *File* menu in the Menu Bar and give your new text "
"file a name that ends with the `.py` extension."
msgstr ""
"*  Щоб перетворити цей звичайний текстовий файл на програму Python, виберіть"
" дію *Save File As* у меню *File* на панелі мenu та надайте новому "
"текстовому файлу назву, яка закінчується розширенням `.py`."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:157
msgid ""
"    *   The `.py` extension lets everyone (including the operating system) "
"know that this text file is a Python program."
msgstr ""
" * Розширення `.py`  повідомляє всім ( операційній системі включно), що цей "
"текстовий файл є програмою Python. "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:158
msgid "    *   This is convention, not a requirement."
msgstr " *  Це умовність, а не вимога."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:160
msgid "## Creating a Jupyter Notebook"
msgstr "## Створення Jupyter Notebook"

#: python-novice-gapminder/_episodes/01-run-quit.md:162
msgid ""
"To open a new notebook click the Python 3 icon under the *Notebook* header in the Launcher tab in \n"
"the main work area. You can also create a new notebook by selecting *New -> Notebook* from the *File* menu in the Menu Bar."
msgstr ""
"Щоб відкрити новий блокнот, натисніть піктограму Python 3 під заголовком *Notebook* на вкладці Запуск в \n"
" у головній робочій області. Ви також можете створити новий блокнот, обравши *New -> Notebook* у меню *File* на панелі меню."

#: python-novice-gapminder/_episodes/01-run-quit.md:165
msgid "Additional notes on Jupyter notebooks."
msgstr "Додаткові зауваження щодо Jupyter notebooks."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:167
msgid ""
"  *   Notebook files have the extension `.ipynb` to distinguish them from "
"plain-text Python programs."
msgstr ""
" *  Файли, створені в notebook, мають розширення `.ipynb`, щоб відрізнити їх"
" від  програм на Python, створених як звичайний текстовий файл."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:168
msgid ""
"  *   Notebooks can be exported as Python scripts that can be run from the "
"command line."
msgstr ""
" *  Notebooks можна експортувати як сценарії Python, які можна запускати з "
"командного рядка."

#: python-novice-gapminder/_episodes/01-run-quit.md:170
msgid ""
"Below is a screenshot of a Jupyter notebook running inside JupyterLab. If you are interested in \n"
"more details, then see the [official notebook documentation][jupyterlab-notebook-docs]."
msgstr ""
"Нижче наведено скриншот екрана Jupyter notebook, який працює в JupyterLab. Якщо вам цікаво,\n"
"докладніше дивиться в [official notebook documentation][jupyterlab-notebook-docs]."

#: python-novice-gapminder/_episodes/01-run-quit.md:173
msgid ""
"<p align='center'>\n"
"    <img alt=\"Example Jupyter Notebook\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_notebook_screenshot.png\" width=\"750\"/>\n"
"</p>"
msgstr ""
"<p align='center'>\n"
"    <img alt=\"Example Jupyter Notebook\" src=\"{{ site.baseurl }}/fig/0_jupyterlab_notebook_screenshot.png\" width=\"750\"/>\n"
"</p>"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:177
msgid "> ## How It's Stored"
msgstr "> ## Як це зберігається"

#: python-novice-gapminder/_episodes/01-run-quit.md:178
msgid ""
">\n"
"> *   The notebook file is stored in a format called JSON.\n"
"> *   Just like a webpage, what's saved looks different from what you see in your browser.\n"
"> *   But this format allows Jupyter to mix source code, text, and images, all in one file."
msgstr ""
">\n"
"> * Файл notebook зберігається у форматі JSON.\n"
"> * Подібно до вебсторінки, те, що зберігається, відрізняється від того, що ви бачите у своєму браузері.\n"
"> * Але формат JSON дозволяє Jupyter змішувати вихідний код, текст і зображення в одному файлі."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:184
msgid "> ## Arranging Documents into Panels of Tabs"
msgstr "> ## Упорядкування документів в панелях вкладок"

#: python-novice-gapminder/_episodes/01-run-quit.md:185
msgid ""
">\n"
"> In the JupyterLab Main Work Area you can arrange documents into panels of tabs. Here is an \n"
"> example from the [official documentation][jupyterlab].\n"
"> \n"
"> <p align='center'>\n"
">    <img alt=\"Multi-panel JupyterLab\" src=\"{{ site.baseurl }}/fig/0_multipanel_jupyterlab_screenshot.png\" width=\"750\"/>\n"
"> </p>\n"
">\n"
"> First, create a text file, Python console, and terminal window and arrange then into three \n"
"> panels in the main work area. Next, create a notebook, terminal window, and text file and \n"
"> arrange then into three panels in the main work area. Finally, create your own combination of \n"
"> panels and tabs. What combination of panels and tabs do you think will be most useful for your \n"
"> workflow?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > After creating the necessary tabs, you can drag one of the tabs to the center of a panel to \n"
"> > move the tab to the panel; next you can subdivide a tab panel by dragging a tab to the left, \n"
"> > right, top, or bottom of the panel."
msgstr ""
">\n"
"> У головній робочій області JupyterLab ви можете впорядковувати документи на панелі вкладок. Нижче наведено \n"
"> приклад з [official documentation][jupyterlab].\n"
"> \n"
"> <p align='center'>\n"
">    <img alt=\"Multi-panel JupyterLab\" src=\"{{ site.baseurl }}/fig/0_multipanel_jupyterlab_screenshot.png\" width=\"750\"/>\n"
"> </p>\n"
">\n"
"> Спочатку створіть текстовий файл, консоль Python і вікно терміналу, а потім розділіть їх на три \n"
"> панелі в основній робочій зоні. Далі створіть блокнот, вікно терміналу та текстовий файл та \n"
"> потім розподіліть на три панелі в основній робочій зоні. Нарешті, створіть власну комбінацію\n"
"> панелей та вкладок. Яка, на вашу думку, комбінація панелей та вкладок буде найбільш корисною для Вашого \n"
"> робочого процесу?\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Після створення необхідних вкладок Ви можете перетягнути одну з вкладок у центр панелі для \n"
"> > переміщення вкладки по панелі; потім ви можете розділити панель вкладок, перетягнувши вкладку ліворуч,> > праворуч, вгору або до низу панелі."

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:204
#: python-novice-gapminder/_episodes/01-run-quit.md:255
#: python-novice-gapminder/_episodes/01-run-quit.md:419
#: python-novice-gapminder/_episodes/01-run-quit.md:441
#: python-novice-gapminder/_episodes/01-run-quit.md:471
#: python-novice-gapminder/_episodes/01-run-quit.md:497
#: python-novice-gapminder/_episodes/02-variables.md:295
#: python-novice-gapminder/_episodes/02-variables.md:313
#: python-novice-gapminder/_episodes/02-variables.md:332
#: python-novice-gapminder/_episodes/02-variables.md:352
#: python-novice-gapminder/_episodes/03-types-conversion.md:227
#: python-novice-gapminder/_episodes/03-types-conversion.md:248
#: python-novice-gapminder/_episodes/03-types-conversion.md:273
#: python-novice-gapminder/_episodes/03-types-conversion.md:327
#: python-novice-gapminder/_episodes/03-types-conversion.md:398
#: python-novice-gapminder/_episodes/03-types-conversion.md:423
#: python-novice-gapminder/_episodes/03-types-conversion.md:460
#: python-novice-gapminder/_episodes/04-built-in.md:258
#: python-novice-gapminder/_episodes/04-built-in.md:311
#: python-novice-gapminder/_episodes/04-built-in.md:323
#: python-novice-gapminder/_episodes/04-built-in.md:336
#: python-novice-gapminder/_episodes/06-libraries.md:149
#: python-novice-gapminder/_episodes/06-libraries.md:206
#: python-novice-gapminder/_episodes/06-libraries.md:237
#: python-novice-gapminder/_episodes/06-libraries.md:255
#: python-novice-gapminder/_episodes/06-libraries.md:294
#: python-novice-gapminder/_episodes/06-libraries.md:326
#: python-novice-gapminder/_episodes/06-libraries.md:356
#: python-novice-gapminder/_episodes/06-libraries.md:377
#: python-novice-gapminder/_episodes/07-reading-tabular.md:240
#: python-novice-gapminder/_episodes/07-reading-tabular.md:335
#: python-novice-gapminder/_episodes/07-reading-tabular.md:364
#: python-novice-gapminder/_episodes/07-reading-tabular.md:387
#: python-novice-gapminder/_episodes/08-data-frames.md:355
#: python-novice-gapminder/_episodes/08-data-frames.md:393
#: python-novice-gapminder/_episodes/08-data-frames.md:449
#: python-novice-gapminder/_episodes/08-data-frames.md:470
#: python-novice-gapminder/_episodes/08-data-frames.md:510
#: python-novice-gapminder/_episodes/08-data-frames.md:557
#: python-novice-gapminder/_episodes/09-plotting.md:199
#: python-novice-gapminder/_episodes/09-plotting.md:221
#: python-novice-gapminder/_episodes/09-plotting.md:241
#: python-novice-gapminder/_episodes/09-plotting.md:274
#: python-novice-gapminder/_episodes/11-lists.md:235
#: python-novice-gapminder/_episodes/11-lists.md:248
#: python-novice-gapminder/_episodes/11-lists.md:274
#: python-novice-gapminder/_episodes/11-lists.md:303
#: python-novice-gapminder/_episodes/11-lists.md:332
#: python-novice-gapminder/_episodes/11-lists.md:352
#: python-novice-gapminder/_episodes/11-lists.md:390
#: python-novice-gapminder/_episodes/11-lists.md:431
#: python-novice-gapminder/_episodes/12-for-loops.md:186
#: python-novice-gapminder/_episodes/12-for-loops.md:211
#: python-novice-gapminder/_episodes/12-for-loops.md:236
#: python-novice-gapminder/_episodes/12-for-loops.md:260
#: python-novice-gapminder/_episodes/12-for-loops.md:278
#: python-novice-gapminder/_episodes/12-for-loops.md:298
#: python-novice-gapminder/_episodes/12-for-loops.md:313
#: python-novice-gapminder/_episodes/12-for-loops.md:343
#: python-novice-gapminder/_episodes/12-for-loops.md:381
#: python-novice-gapminder/_episodes/12-for-loops.md:403
#: python-novice-gapminder/_episodes/13-conditionals.md:273
#: python-novice-gapminder/_episodes/13-conditionals.md:311
#: python-novice-gapminder/_episodes/13-conditionals.md:338
#: python-novice-gapminder/_episodes/13-conditionals.md:375
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:122
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:154
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:184
#: python-novice-gapminder/_episodes/16-writing-functions.md:172
#: python-novice-gapminder/_episodes/16-writing-functions.md:198
#: python-novice-gapminder/_episodes/16-writing-functions.md:238
#: python-novice-gapminder/_episodes/16-writing-functions.md:265
#: python-novice-gapminder/_episodes/16-writing-functions.md:300
#: python-novice-gapminder/_episodes/16-writing-functions.md:331
#: python-novice-gapminder/_episodes/16-writing-functions.md:402
#: python-novice-gapminder/_episodes/16-writing-functions.md:497
#: python-novice-gapminder/_episodes/16-writing-functions.md:543
#: python-novice-gapminder/_episodes/18-style.md:153
#: python-novice-gapminder/_episodes/18-style.md:232
msgid "> {: .solution}"
msgstr "> {: .solution}"

# SC/DC Template label
#: python-novice-gapminder/_episodes/01-run-quit.md:205
#: python-novice-gapminder/_episodes/01-run-quit.md:256
#: python-novice-gapminder/_episodes/01-run-quit.md:420
#: python-novice-gapminder/_episodes/01-run-quit.md:442
#: python-novice-gapminder/_episodes/01-run-quit.md:472
#: python-novice-gapminder/_episodes/01-run-quit.md:498
#: python-novice-gapminder/_episodes/01-run-quit.md:512
#: python-novice-gapminder/_episodes/02-variables.md:235
#: python-novice-gapminder/_episodes/02-variables.md:262
#: python-novice-gapminder/_episodes/02-variables.md:296
#: python-novice-gapminder/_episodes/02-variables.md:314
#: python-novice-gapminder/_episodes/02-variables.md:333
#: python-novice-gapminder/_episodes/02-variables.md:353
#: python-novice-gapminder/_episodes/03-types-conversion.md:228
#: python-novice-gapminder/_episodes/03-types-conversion.md:249
#: python-novice-gapminder/_episodes/03-types-conversion.md:274
#: python-novice-gapminder/_episodes/03-types-conversion.md:328
#: python-novice-gapminder/_episodes/03-types-conversion.md:399
#: python-novice-gapminder/_episodes/03-types-conversion.md:424
#: python-novice-gapminder/_episodes/03-types-conversion.md:461
#: python-novice-gapminder/_episodes/04-built-in.md:259
#: python-novice-gapminder/_episodes/04-built-in.md:312
#: python-novice-gapminder/_episodes/04-built-in.md:324
#: python-novice-gapminder/_episodes/04-built-in.md:337
#: python-novice-gapminder/_episodes/06-libraries.md:150
#: python-novice-gapminder/_episodes/06-libraries.md:207
#: python-novice-gapminder/_episodes/06-libraries.md:238
#: python-novice-gapminder/_episodes/06-libraries.md:256
#: python-novice-gapminder/_episodes/06-libraries.md:295
#: python-novice-gapminder/_episodes/06-libraries.md:327
#: python-novice-gapminder/_episodes/06-libraries.md:357
#: python-novice-gapminder/_episodes/06-libraries.md:378
#: python-novice-gapminder/_episodes/07-reading-tabular.md:241
#: python-novice-gapminder/_episodes/07-reading-tabular.md:336
#: python-novice-gapminder/_episodes/07-reading-tabular.md:365
#: python-novice-gapminder/_episodes/07-reading-tabular.md:388
#: python-novice-gapminder/_episodes/08-data-frames.md:342
#: python-novice-gapminder/_episodes/08-data-frames.md:356
#: python-novice-gapminder/_episodes/08-data-frames.md:369
#: python-novice-gapminder/_episodes/08-data-frames.md:394
#: python-novice-gapminder/_episodes/08-data-frames.md:409
#: python-novice-gapminder/_episodes/08-data-frames.md:450
#: python-novice-gapminder/_episodes/08-data-frames.md:463
#: python-novice-gapminder/_episodes/08-data-frames.md:471
#: python-novice-gapminder/_episodes/08-data-frames.md:483
#: python-novice-gapminder/_episodes/08-data-frames.md:511
#: python-novice-gapminder/_episodes/08-data-frames.md:549
#: python-novice-gapminder/_episodes/08-data-frames.md:558
#: python-novice-gapminder/_episodes/08-data-frames.md:567
#: python-novice-gapminder/_episodes/09-plotting.md:200
#: python-novice-gapminder/_episodes/09-plotting.md:242
#: python-novice-gapminder/_episodes/09-plotting.md:275
#: python-novice-gapminder/_episodes/11-lists.md:236
#: python-novice-gapminder/_episodes/11-lists.md:249
#: python-novice-gapminder/_episodes/11-lists.md:275
#: python-novice-gapminder/_episodes/11-lists.md:304
#: python-novice-gapminder/_episodes/11-lists.md:333
#: python-novice-gapminder/_episodes/11-lists.md:353
#: python-novice-gapminder/_episodes/11-lists.md:391
#: python-novice-gapminder/_episodes/11-lists.md:432
#: python-novice-gapminder/_episodes/12-for-loops.md:187
#: python-novice-gapminder/_episodes/12-for-loops.md:212
#: python-novice-gapminder/_episodes/12-for-loops.md:237
#: python-novice-gapminder/_episodes/12-for-loops.md:314
#: python-novice-gapminder/_episodes/12-for-loops.md:344
#: python-novice-gapminder/_episodes/12-for-loops.md:382
#: python-novice-gapminder/_episodes/12-for-loops.md:404
#: python-novice-gapminder/_episodes/13-conditionals.md:274
#: python-novice-gapminder/_episodes/13-conditionals.md:312
#: python-novice-gapminder/_episodes/13-conditionals.md:339
#: python-novice-gapminder/_episodes/13-conditionals.md:376
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:123
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:155
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:185
#: python-novice-gapminder/_episodes/16-writing-functions.md:173
#: python-novice-gapminder/_episodes/16-writing-functions.md:199
#: python-novice-gapminder/_episodes/16-writing-functions.md:239
#: python-novice-gapminder/_episodes/16-writing-functions.md:266
#: python-novice-gapminder/_episodes/16-writing-functions.md:301
#: python-novice-gapminder/_episodes/16-writing-functions.md:332
#: python-novice-gapminder/_episodes/16-writing-functions.md:403
#: python-novice-gapminder/_episodes/16-writing-functions.md:498
#: python-novice-gapminder/_episodes/16-writing-functions.md:544
#: python-novice-gapminder/_episodes/17-scope.md:74
#: python-novice-gapminder/_episodes/17-scope.md:109
#: python-novice-gapminder/_episodes/18-style.md:126
#: python-novice-gapminder/_episodes/18-style.md:154
#: python-novice-gapminder/_episodes/18-style.md:233
msgid "{: .challenge}"
msgstr "{: .challenge}"

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:207
msgid "## Use the Jupyter Notebook for editing and running Python."
msgstr "## Застосування Jupyter Notebook для редагування та запуску Python"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:209
msgid ""
"*   While it's common to write Python scripts using a text editor, we are "
"going to use the [Jupyter Notebook][jupyter] for the remainder of this "
"workshop."
msgstr ""
"*   Незважаючи на те, що сценарії Python зазвичай пишуть за допомогою "
"текстового редактора, ми надалі будемо використовувати [Jupyter "
"Notebook][jupyter]. "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:210
msgid "*   This has several advantages:"
msgstr "* Застосування Jupyter Notebook має кілька переваг:"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:211
msgid "    *   You can easily type, edit, and copy and paste blocks of code."
msgstr ""
" * Ви можете легко вводити, редагувати, копіювати та вставляти блоки коду."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:212
msgid ""
"    *   Tab complete allows you to easily access the names of things you are"
" using"
msgstr ""
" *  Автодоповнення за допомогою клавіші Tab дозволяє легко отримати доступ "
"до назв об'єктів, які ви використовуєте,"

#: python-novice-gapminder/_episodes/01-run-quit.md:213
msgid ""
"        and learn more about them.\n"
"    *   It allows you to annotate your code with links, different sized text, bullets, etc.\n"
"        to make it more accessible to you and your collaborators.\n"
"    *   It allows you to display figures next to the code that produces them\n"
"        to tell a complete story of the analysis.\n"
"*   Each notebook contains one or more cells that contain code, text, or images."
msgstr ""
"та отримати  додаткову інформацію.\n"
"* Ви можете коментувати свій код посиланнями, текстом різного розміру, маркерами тощо,\n"
"щоб зробити його більш читабельним для себе та своїх колег \n"
"* Ви можете відображати результати одразу за кодом, який їх продукує,\n"
"щоб вести повну історію аналізу.\n"
"* Кожен блокнот має одну або кілька клітинок, які містять код, текст або зображення."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:220
msgid "> ## Code vs. Text"
msgstr "> ## Код проти тексту"

#: python-novice-gapminder/_episodes/01-run-quit.md:221
msgid ""
">\n"
"> Jupyter mixes code and text in different types of blocks, called cells. We often use the term\n"
"> \"code\" to mean \"the source code of software written in a language such as Python\".\n"
"> A \"code cell\" in a Notebook is a cell that contains software;\n"
"> a \"text cell\" is one that contains ordinary prose written for human beings."
msgstr ""
">\n"
"> Jupyter змішує код і текст у різних типах блоків, які називаються клітинками. Ми часто використовуємо термін\n"
"> «код», що означає «вихідний код програмного забезпечення, написаний такою мовою, як Python».\n"
"> «Клітинка коду» в блокноті — це клітинка, що містить програмне забезпечення;\n"
"> «текстова клітинка» — це клітинка, що містить звичайний текст, написаний для людей."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:228
msgid "## The Notebook has Command and Edit modes."
msgstr "##  Jupiter Notebook має режими команд та редагування "

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:230
msgid ""
"*   If you press <kbd>Esc</kbd> and <kbd>Return</kbd> alternately, the outer"
" border of your code cell will change from gray to blue."
msgstr ""
"*  Якщо ви натиснете<kbd>Esc</kbd> та <kbd>Return</kbd> по черзі, то "
"зовнішня границя клітинки коду зміниться з сірої на синю."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:231
msgid ""
"*   These are the **Command** (gray) and **Edit** (blue) modes of your "
"notebook."
msgstr ""
"*  Існують **Command** (сірий) та **Edit** (синій) режими вашого блокноту."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:232
msgid ""
"*   Command mode allows you to edit notebook-level features, and Edit mode "
"changes the content of cells."
msgstr ""
"*   Командний режим дозволяє редагувати функції на рівні блокнота, а режим "
"редагування змінює вміст клітинок."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:233
msgid "*   When in Command mode (esc/gray),"
msgstr "*   В командному режимі (esc/сірий),"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:234
msgid ""
"    *   The <kbd>b</kbd> key will make a new cell below the currently "
"selected cell."
msgstr ""
"    *   Клавіша <kbd>b</kbd> створює нову клітинку нижче поточної обраної "
"клітинки."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:235
msgid "    *   The <kbd>a</kbd> key will make one above."
msgstr "    *    Клавіша <kbd>a</kbd> створює одну клітинку вище поточної."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:236
msgid "    *   The <kbd>x</kbd> key will delete the current cell."
msgstr "    *   Клавіша <kbd>x</kbd> видаляє поточну клітинку."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:237
msgid ""
"    *   The <kbd>z</kbd> key will undo your last cell operation (which could"
" be a deletion, creation, etc)."
msgstr ""
"    *   Клавіша <kbd>z</kbd> скасовує вашу останню операцію з клітинкою (це "
"може бути операція видалення, створення тощо)."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:238
msgid ""
"*   All actions can be done using the menus, but there are lots of keyboard "
"shortcuts to speed things up."
msgstr ""
"*   Усі дії можна виконувати за допомогою меню, але є багато комбінацій "
"клавіш для прискорення."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:240
msgid "> ## Command Vs. Edit"
msgstr "> ## Команди проти Редагування"

#: python-novice-gapminder/_episodes/01-run-quit.md:241
msgid ""
">\n"
"> In the Jupyter notebook page are you currently in Command or Edit mode?  \n"
"> Switch between the modes. \n"
"> Use the shortcuts to generate a new cell. \n"
"> Use the shortcuts to delete a cell.\n"
"> Use the shortcuts to undo the last cell operation you performed.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Command mode has a grey border and Edit mode has a blue border. \n"
"> > Use <kbd>Esc</kbd> and <kbd>Return</kbd> to switch between modes. \n"
"> > You need to be in Command mode (Press <kbd>Esc</kbd> if your cell is blue).  Type <kbd>b</kbd> or <kbd>a</kbd>.\n"
"> > You need to be in Command mode (Press <kbd>Esc</kbd> if your cell is blue).  Type <kbd>x</kbd>.\n"
"> > You need to be in Command mode (Press <kbd>Esc</kbd> if your cell is blue).  Type <kbd>z</kbd>."
msgstr ""
">\n"
"> На сторінці Jupyter notebook ви зараз перебуваєте в командному режимі чи режимі редагування?  \n"
"> Переключиться між режимами. \n"
"> Використайте комбінації клавіш, щоб створити нову клітинку. \n"
"> Використайте комбінації клавіш, щоб видалити клітинку.\n"
"> Використайте комбінації клавіш, щоб скасувати останню операцію з клітинкою.\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> >Командний режим має сіру рамку, а режим редагування — синю. \n"
"> > Використовуйте  <kbd>Esc</kbd> та <kbd>Return</kbd>, щоб переключатися між режимами. \n"
"> > Ви маєте бути в командному режимі (Натисніть <kbd>Esc</kbd>, якщо ваша клітинка синя).  Натисніть <kbd>b</kbd> або <kbd>a</kbd>.\n"
"> >  Ви маєте бути в командному режимі (Натисніть  <kbd>Esc</kbd>, якщо ваша клітинка синя).  Натисніть <kbd>x</kbd>.\n"
"> > Ви маєте бути в командному режимі (Натисніть <kbd>Esc</kbd> якщо ваша клітинка синя). Натисніть <kbd>z</kbd>."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:258
msgid "### Use the keyboard and mouse to select and edit cells."
msgstr ""
"### Використовуйте клавіатуру та мишу для виділення та редагування клітинок."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:260
msgid ""
"*   Pressing the <kbd>Return</kbd> key turns the border blue and engages "
"Edit mode, which allows "
msgstr ""
"*   Натискання клавіші <kbd>Return</kbd> перетворює рамку на синю та вмикає "
"режим редагування, що дозволяє "

#: python-novice-gapminder/_episodes/01-run-quit.md:261
msgid ""
"    you to type within the cell.\n"
"*   Because we want to be able to write many lines of code in a single cell,\n"
"    pressing the <kbd>Return</kbd> key when in Edit mode (blue) moves the cursor to the next line \n"
"    in the cell just like in a text editor.\n"
"*   We need some other way to tell the Notebook we want to run what's in the cell.\n"
"*   Pressing <kbd>Shift</kbd>+<kbd>Return</kbd> together will execute the contents of the cell.\n"
"*   Notice that the <kbd>Return</kbd> and <kbd>Shift</kbd> keys on the right of the keyboard are \n"
"    right next to each other."
msgstr ""
"вам вводити інформацію в клітинку.\n"
"*   Якщо є необхідність введення кількох рядків кода в одну клітинку,\n"
"    натискання клавіші <kbd>Return</kbd> в режимі редагування (синя рамка) переміщує курсор на наступний рядок \n"
"   в клітинці як у текстовому редакторі.\n"
"*  Якщо ми хочемо запустити код, що знаходиться в клітинці, нам потрібен інший спосіб повідомити про це Notebook.\n"
"*   Одночасне натискання клавіш  <kbd>Shift</kbd>+<kbd>Return</kbd> призведе до виконання вмісту клітинки.\n"
"*   Зверніть увагу, що клавіші <kbd>Return</kbd> та <kbd>Shift</kbd>  розташовані поруч на клавіатурі\n"
"справа .\n"
"    "

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:270
msgid "### The Notebook will turn Markdown into pretty-printed documentation."
msgstr "### Notebook підтримує мову розмітки текстів Markdown"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:272
msgid "*   Notebooks can also render [Markdown][markdown]."
msgstr "*   Notebooks також можуть відображати [Markdown][markdown]."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:273
msgid "    *   A simple plain-text format for writing lists, links, "
msgstr "    *  Простий текстовий формат для створення списків, посилань"

#: python-novice-gapminder/_episodes/01-run-quit.md:274
msgid ""
"        and other things that might go into a web page.\n"
"    *   Equivalently, a subset of HTML that looks like what you'd send in an old-fashioned email.\n"
"*   Turn the current cell into a Markdown cell by entering the Command mode (<kbd>Esc</kbd>/gray) \n"
"    and press the <kbd>M</kbd> key.\n"
"*   `In [ ]:` will disappear to show it is no longer a code cell and you will be able to write in \n"
"    Markdown.\n"
"*   Turn the current cell into a Code cell by entering the Command mode (<kbd>Esc</kbd>/gray) and \n"
"    press the <kbd>y</kbd> key."
msgstr ""
"       та інших елементів, які можуть бути розміщені на вебсторінці.\n"
"    *   Відповідно, це підмножина HTML, яка виглядає як те, що Ви надіслали б у старомодному електронному листі.\n"
"*   Перетворіть поточну клітинку на клітинку Markdown, увійшовши в командний режим (<kbd>Esc</kbd>/gray) \n"
"    та натиснувши <kbd>M</kbd> key.\n"
"*   `In [ ]:` зникне, щоб показати, що це вже не клітинка коду, і Ви зможете писати в \n"
"    Markdown.\n"
"*   Перетворіть поточну клітинку на клітинку з кодом, увійшовши в командний режим (<kbd>Esc</kbd>/gray) та натиснувши клавішу <kbd>y</kbd> ."

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:283
msgid "### Markdown does most of what HTML does."
msgstr "### Markdown робить більшість того, що робить HTML."

#: python-novice-gapminder/_episodes/01-run-quit.md:285
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*   Use asterisks\n"
"*   to create\n"
"*   bullet lists.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*   Use asterisks\n"
"*   to create\n"
"*   bullet lists.\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*   Використовуйте зірочки\n"
"*   щоб створити\n"
"*   марковані списки.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*   Використовуйте зірочки\n"
"*   щоб створити\n"
"*   марковані списки.\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:300
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"1.  Use numbers\n"
"1.  to create\n"
"1.  numbered lists.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"1.  Use numbers\n"
"1.  to create\n"
"1.  numbered lists.\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"1.  Використовуйте цифри,\n"
"1.  щоб створити\n"
"1.  нумеровані списки.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"1.  Використовуйте цифри,\n"
"1.  щоб створити\n"
"1.  нумеровані списки.\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:315
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*  You can use indents\n"
"\t*  To create sublists \n"
"\t*  of the same type\n"
"*  Or sublists\n"
"\t1. Of different\n"
"\t1. types\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*  You can use indents\n"
"\t*  To create sublists\n"
"\t*  of the same type\n"
"*  Or sublists\n"
"\t1. Of different\n"
"\t1. types\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"*  Можна використовувати відступи,\n"
"\t*  щоб створити підсписки\n"
"\t*  одного типу\n"
"*  Або підсписки\n"
"\t1. різних \n"
"\t1. типів\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"*  Можна використовувати відступи,\n"
"\t*  щоб створити підсписки\n"
"\t*  одного типу\n"
"*  Або підсписки\n"
"\t1. різних\n"
"\t1. типів\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:336
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"# A Level-1 Heading\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"# A Level-1 Heading\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"# Заголовок рівня-1\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"# Заголовок рівня-1\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:347
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"## A Level-2 Heading (etc.)\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"## A Level-2 Heading (etc.)\n"
"  </div>\n"
"</div>"
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"## Заголовок рівня 2 (і так далі)\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"## Заголовок рівня 2 (і так далі)\n"
"  </div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:358
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"Line breaks\n"
"don't matter."
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"Розриви рядків\n"
"не мають значення."

#: python-novice-gapminder/_episodes/01-run-quit.md:364
msgid ""
"But blank lines\n"
"create new paragraphs.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"Line breaks\n"
"don't matter."
msgstr ""
"Але порожні рядки\n"
"створюють нові параграфи.\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"Розриви рядків\n"
"не мають значення."

#: python-novice-gapminder/_episodes/01-run-quit.md:372
msgid ""
"But blank lines\n"
"create new paragraphs.\n"
"  </div>\n"
"</div>"
msgstr ""
"Але порожні рядки\n"
"створюють нові параграфи.\n"
"</div>\n"
"</div>"

#: python-novice-gapminder/_episodes/01-run-quit.md:377
msgid ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"[Create links](http://software-carpentry.org) with `[...](...)`.\n"
"Or use [named links][data_carpentry]."
msgstr ""
"<div class=\"row\">\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"~~~\n"
"[Create links](http://software-carpentry.org) разом з `[...](...)`.\n"
"Або використовуйте  [named links][data_carpentry]."

#: python-novice-gapminder/_episodes/01-run-quit.md:383
msgid ""
"[data_carpentry]: http://datacarpentry.org\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"[Create links](http://software-carpentry.org) with `[...](...)`.\n"
"Or use [named links][data_carpentry]."
msgstr ""
"[data_carpentry]: http://datacarpentry.org\n"
"~~~\n"
"  </div>\n"
"  <div class=\"col-md-6\" markdown=\"1\">\n"
"[Create links](http://software-carpentry.org) разом з `[...](...)`.\n"
"Або використовуйте [named links][data_carpentry]."

#: python-novice-gapminder/_episodes/01-run-quit.md:390
msgid ""
"[data_carpentry]: http://datacarpentry.org\n"
"  </div>\n"
"</div>"
msgstr ""
"[data_carpentry]: http://datacarpentry.org\n"
"  </div>\n"
"</div>"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:394
msgid "> ## Creating Lists in Markdown"
msgstr "> ## Створення списків в Markdown"

#: python-novice-gapminder/_episodes/01-run-quit.md:395
msgid ""
">\n"
"> Create a nested list in a Markdown cell in a notebook that looks like this:\n"
">\n"
"> 1.  Get funding.\n"
"> 2.  Do work.\n"
">     *   Design experiment.\n"
">     *   Collect data.\n"
">     *   Analyze.\n"
"> 3.  Write up.\n"
"> 4.  Publish.\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > This challenge integrates both the numbered list and bullet list. \n"
"> > Note that the bullet list is indented 2 spaces so that it is inline with the items of the numbered list.\n"
"> > ~~~\n"
"> > 1.  Get funding.\n"
"> > 2.  Do work.\n"
"> >     *   Design experiment.\n"
"> >     *   Collect data.\n"
"> >     *   Analyze.\n"
"> > 3.  Write up.\n"
"> > 4.  Publish.\n"
"> > ~~~"
msgstr ""
">\n"
"> Створіть вкладений список в  Markdown клітинці блокноту так, щоб вона виглядала наступним чином:\n"
">\n"
"> 1.  Знайти фінансування.\n"
"> 2.  Виконати роботу.\n"
">     *   Провести експеримент.\n"
">     *   Зібрати дані.\n"
">     *   Провести аналіз.\n"
"> 3.  Написати статтю.\n"
"> 4.  Опублікувати.\n"
"> \n"
"> > ## Рішення\n"
"> >\n"
"> > Це завдання поєднує як нумерований, так і маркований списки. \n"
"> > Зверніть увагу, що маркований список має відступ на 2 проміжки, щоб він не збігався з елементами нумерованого списку.\n"
"> > ~~~\n"
"> > 1.  Знайти фінансування.\n"
"> > 2.  Виконати роботу.\n"
"> >     *   Провести експеримент.\n"
"> >     *   Зібрати дані.\n"
"> >     *   Провести аналіз.\n"
"> > 3.  Написати статтю.\n"
"> > 4.  Опублікувати.\n"
"> > ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:422
msgid "> ## More Math"
msgstr "> ## Більше математики"

#: python-novice-gapminder/_episodes/01-run-quit.md:423
msgid ""
">\n"
"> What is displayed when a Python cell in a notebook\n"
"> that contains several calculations is executed?\n"
"> For example, what happens when this cell is executed?\n"
">\n"
"> ~~~\n"
"> 7 * 3\n"
"> 2 + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > Python returns the output of the last calculation.\n"
"> > ~~~\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Що відображається, коли виконується клітинка Python в блокноті,\n"
"> що містить  декілька обчислень?\n"
"> Наприклад, що трапиться при виконанні дій наступної клітинки?\n"
">\n"
"> ~~~\n"
"> 7 * 3\n"
"> 2 + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Рішення\n"
"> >\n"
"> > Python поверне результат останнього обчислення.\n"
"> > ~~~\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:444
msgid "> ## Change an Existing Cell from Code to Markdown"
msgstr "> ## Зміна типу певної клітинки з Code на Markdown"

#: python-novice-gapminder/_episodes/01-run-quit.md:445
msgid ""
">\n"
"> What happens if you write some Python in a code cell\n"
"> and then you switch it to a Markdown cell?\n"
"> For example,\n"
"> put the following in a code cell:\n"
">\n"
"> ~~~\n"
"> x = 6 * 7 + 12\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> And then run it with <kbd>Shift</kbd>+<kbd>Return</kbd> to be sure that it works as a code cell.\n"
"> Now go back to the cell and use <kbd>Esc</kbd> then <kbd>m</kbd> to switch the cell to Markdown\n"
"> and \"run\" it with <kbd>Shift</kbd>+<kbd>Return</kbd>.\n"
"> What happened and how might this be useful?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > The Python code gets treated like Markdown text.\n"
"> > The lines appear as if they are part of one contiguous paragraph.\n"
"> > This could be useful to temporarily turn on and off cells in notebooks that get used for multiple purposes. \n"
"> > ~~~\n"
"> > x = 6 * 7 + 12 print(x)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Що станеться, якщо Ви напишете код Python у клітинку\n"
"> а потім перемкнете клітинку у режим Markdown?\n"
"> Наприклад,\n"
"> помістіть наступний код в клітинку:\n"
">\n"
"> ~~~\n"
"> x = 6 * 7 + 12\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> а потім запустіть цей код за допомогою <kbd>Shift</kbd>+<kbd>Return</kbd>, щоб переконатися, що він працює.\n"
"> Тепер поверніться до клітинки, використайте комбінацію <kbd>Esc</kbd> та <kbd>m</kbd>, щоб переключитися в режим Markdown,\n"
"> а потім \"запустіть\" її за допомогою <kbd>Shift</kbd>+<kbd>Return</kbd>.\n"
">  Що сталося, і як це може бути корисним?\n"
"> \n"
"> > ## Рішення\n"
"> >\n"
"> > Код Python розглядається як текст Markdown. \n"
"> > Рядки виглядають так, ніби вони є частиною одного суміжного абзацу.\n"
"> > Це може бути корисним для тимчасового вмикання та вимикання клітинок у блокнотах, які використовуються для різних цілей. \n"
"> > ~~~\n"
"> > x = 6 * 7 + 12 print(x)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:474
msgid "> ## Equations"
msgstr "> ## Рівняння"

#: python-novice-gapminder/_episodes/01-run-quit.md:475
msgid ""
">\n"
"> Standard Markdown (such as we're using for these notes) won't render equations,\n"
"> but the Notebook will.\n"
"> Create a new Markdown cell\n"
"> and enter the following:\n"
">\n"
"> ~~~\n"
"> $\\sum_{i=1}^{N} 2^{-i} \\approx 1$\n"
"> ~~~\n"
">\n"
"> (It's probably easier to copy and paste.)\n"
"> What does it display?\n"
"> What do you think the underscore, `_`, circumflex, `^`, and dollar sign, `$`, do?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > The notebook shows the equation as it would be rendered from LaTeX equation syntax.\n"
"> > The dollar sign, `$`, is used to tell Markdown that the text in between is a LaTeX equation.\n"
"> > If you're not familiar with LaTeX,  underscore, `_`, is used for subscripts and circumflex, `^`, is used for superscripts.\n"
"> > A pair of curly braces, `{` and `}`, is used to group text together so that the statement `i=1` becomes the subscript and `N` becomes the superscript.\n"
"> > Similarly, `-i` is in curly braces to make the whole statement the superscript for `2`.\n"
"> > `\\sum` and `\\approx` are LaTeX commands for \"sum over\" and \"approximate\" symbols. "
msgstr ""
">\n"
"> Стандартний Markdown (наприклад, який ми використовуємо для цих приміток) не відтворює рівняння,\n"
"> але Notebook може.\n"
"> Створіть нову клітинку Markdown\n"
"> і введіть наступне:\n"
">\n"
"> ~~~\n"
"> $\\sum_{i=1}^{N} 2^{-i} \\approx 1$\n"
"> ~~~\n"
">\n"
">(Ймовірно, легше скопіювати та вставити).\n"
"> Що ми побачимо?\n"
"> Як Ви думаєте, що роблять: підкреслення `_`, циркумфлекс `^` і знак долара `$`?\n"
"> \n"
"> > ## Рішення\n"
"> >\n"
"> > Блокнот показує рівняння так, як воно було б відтворено за допомогою синтаксису рівняння LaTeX.\n"
"> > Знаки долара, `$`, використовуються, щоб повідомити Markdown, що текст між ними є рівнянням LaTeX.\n"
"> > Якщо ви не знайомі з LaTeX, то повідомляємо, що символ підкреслення `_` використовується для нижніх індексів, а циркумфлекс `^` використовується для верхніх індексів.\n"
"> > Пара фігурних дужок, `{` і `}`, використовується для групування тексту так, що оператор `i=1` стає нижнім індексом, а `N` стає верхнім індексом.\n"
"> > Подібним чином, `-i` у фігурних дужках використовується, щоб зробити весь оператор верхнім індексом для `2`.\n"
"> > `\\sum` and `\\approx` є командами LaTeX символів «сума» і «приблизно».  "

# header
#: python-novice-gapminder/_episodes/01-run-quit.md:500
msgid "## Closing JupyterLab"
msgstr "## Закриття JupyterLab"

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:502
msgid ""
"*   From the Menu Bar select the \"File\" menu and the choose \"Quit\" at "
"the bottom of the dropdown menu. You will be prompted to confirm that you "
"wish to shutdown the JupyterLab server (don't forget to save your work!). "
"Click \"Confirm\" to shutdown the JupyterLab server."
msgstr ""
"*   На панелі меню оберіть меню «File» і натисніть «Quit» внизу спадного "
"меню. Вам буде запропоновано підтвердити, що Ви бажаєте вимкнути сервер "
"JupyterLab (не забудьте зберегти свою роботу!). Натисніть «Confirm», щоб "
"вимкнути сервер JupyterLab."

# unordered list
#: python-novice-gapminder/_episodes/01-run-quit.md:503
msgid ""
"*   To restart the JupyterLab server you will need to re-run the following "
"command from a shell."
msgstr ""
"*   Щоб перезапустити сервер JupyterLab, Вам потрібно буде повторно "
"активувати наступну команду з оболонки."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/01-run-quit.md:509
msgid "> ## Closing JupyerLab"
msgstr "> ## Закриття JupyterLab"

#: python-novice-gapminder/_episodes/01-run-quit.md:510
msgid ""
">\n"
"> Practice closing and restarting the JupyterLab server."
msgstr ""
">\n"
"> Потренуйтеся закривати та перезапускати сервер JupyterLab."

#: python-novice-gapminder/_episodes/01-run-quit.md:513
msgid ""
"[anaconda]: https://docs.continuum.io/anaconda/install\n"
"[jupyterlab-ui]: https://jupyterlab.readthedocs.io/en/stable/user/interface.html\n"
"[jupyterlab-notebook-docs]: https://jupyterlab.readthedocs.io/en/stable/user/notebook.html\n"
"[markdown]: https://en.wikipedia.org/wiki/Markdown"
msgstr ""
"[anaconda]: https://docs.continuum.io/anaconda/install\n"
"[jupyterlab-ui]: https://jupyterlab.readthedocs.io/en/stable/user/interface.html\n"
"[jupyterlab-notebook-docs]: https://jupyterlab.readthedocs.io/en/stable/user/notebook.html\n"
"[markdown]: https://en.wikipedia.org/wiki/Markdown"

# Front Matter
#: python-novice-gapminder/_episodes/02-variables.md:1
msgid ""
"---\n"
"title: \"Variables and Assignment\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I store data in programs?\"\n"
"objectives:\n"
"- \"Write programs that assign scalar values to variables and perform calculations with those values.\"\n"
"- \"Correctly trace value changes in programs that use scalar assignment.\"\n"
"keypoints:\n"
"- \"Use variables to store values.\"\n"
"- \"Use `print` to display values.\"\n"
"- \"Variables persist between cells.\"\n"
"- \"Variables must be created before they are used.\"\n"
"- \"Variables can be used in calculations.\"\n"
"- \"Use an index to get a single character from a string.\"\n"
"- \"Use a slice to get a substring.\"\n"
"- \"Use the built-in function `len` to find the length of a string.\"\n"
"- \"Python is case-sensitive.\"\n"
"- \"Use meaningful variable names.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Змінні та присвоєння\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу зберігати дані в програмах?\"\n"
"objectives:\n"
"- \"Написати програми, які присвоюють скалярні значення змінним і виконують обчислення з цими значеннями.\"\n"
"- \"Правильнo відстежувати зміни значень у програмах, які використовують скалярне присвоєння.\"\n"
"keypoints:\n"
"- \"Використовуйте змінні для зберігання значень.\"\n"
"- \"Використовуйте `print` для відображення значень.\"\n"
"- \"Змінні зберігаються між клітинками.\"\n"
"- \"Змінні мають бути створені перед їх використанням.\"\n"
"- \"Змінні можна використовувати в обчисленнях.\"\n"
"- \"Використовуйте індекс, щоб отримати один символ із рядка (string).\"\n"
"- \"Використовуйте зріз, щоб отримати підрядок (substring).\"\n"
"- \"Використовуйте вбудовану функцію `len`, щоб знайти довжину рядка.\"\n"
"- \"Python чутливий до регістру.\"\n"
"- \"Використовуйте змістовні імена змінних.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/02-variables.md:22
msgid "## Use variables to store values."
msgstr "## Використовуйте змінні для зберігання значень."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:24
msgid "*   **Variables** are names for values."
msgstr "*   **Змінні** - це назви значень."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:25
msgid ""
"*   In Python the `=` symbol assigns the value on the right to the name on "
"the left."
msgstr ""
"*   У Python символ `=` використовується для присвоєння значення, яке "
"знаходиться праворуч, до її назви, яка вказана ліворуч."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:26
msgid "*   The variable is created when a value is assigned to it."
msgstr "*   Змінна створeна, коли ій присвоюється значення."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:27
msgid "*   Here, Python assigns an age to a variable `age`"
msgstr "*   Нижче Python присвоює значення року змінній `age`"

#: python-novice-gapminder/_episodes/02-variables.md:28
msgid "    and a name in quotes to a variable `first_name`."
msgstr "    та ім'я у лапках - змінній `first_name`."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:30
msgid ""
"~~~\n"
"age = 42\n"
"first_name = 'Ahmed'\n"
"~~~"
msgstr ""
"~~~\n"
"age = 42\n"
"first_name = 'Ahmed'\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:34
#: python-novice-gapminder/_episodes/02-variables.md:201
#: python-novice-gapminder/_episodes/04-built-in.md:34
#: python-novice-gapminder/_episodes/09-plotting.md:27
#: python-novice-gapminder/_episodes/09-plotting.md:39
#: python-novice-gapminder/_episodes/09-plotting.md:67
#: python-novice-gapminder/_episodes/09-plotting.md:79
#: python-novice-gapminder/_episodes/09-plotting.md:91
#: python-novice-gapminder/_episodes/09-plotting.md:107
#: python-novice-gapminder/_episodes/09-plotting.md:127
#: python-novice-gapminder/_episodes/09-plotting.md:163
#: python-novice-gapminder/_episodes/11-lists.md:150
#: python-novice-gapminder/_episodes/12-for-loops.md:34
#: python-novice-gapminder/_episodes/12-for-loops.md:43
#: python-novice-gapminder/_episodes/12-for-loops.md:60
#: python-novice-gapminder/_episodes/12-for-loops.md:111
#: python-novice-gapminder/_episodes/16-writing-functions.md:43
#: python-novice-gapminder/_episodes/16-writing-functions.md:111
#: python-novice-gapminder/_episodes/17-scope.md:31
#: python-novice-gapminder/_episodes/18-style.md:56
#: python-novice-gapminder/reference.md:104
#: python-novice-gapminder/reference.md:127
#: python-novice-gapminder/reference.md:152
#: python-novice-gapminder/reference.md:167
#: python-novice-gapminder/reference.md:181
msgid "{: .language-python}"
msgstr "{: .language-python}"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:36
msgid "*   Variable names"
msgstr "*  Назви змінних"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:37
msgid ""
"    * can **only** contain letters, digits, and underscore `_` (typically "
"used to separate words in long variable names)"
msgstr ""
"    * можуть складатися **тільки**  з букв, цифр та підкреслення `_` (яке "
"звичайно використовується, щоб відокремити слова у довгих назвах змінних)"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:38
msgid "    * cannot start with a digit"
msgstr "    * не можуть починатися з цифри"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:39
msgid ""
"    * are **case sensitive** (age, Age and AGE are three different "
"variables)"
msgstr ""
"    * **залежать від регістру** (тобто `age`, `Age` та `AGE` - це три різні "
"змінні)"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:40
msgid ""
"*   Variable names that start with underscores like `__alistairs_real_age` "
"have a special meaning"
msgstr ""
"*   Назви змінних які починаються з підкреслення, як наприклад "
"`__alistairs_real_age`, мають спеціальне значення,"

#: python-novice-gapminder/_episodes/02-variables.md:41
msgid "    so we won't do that until we understand the convention."
msgstr ""
"    і тому ми не будемо використовувати їх, доки не зрозуміємо цього "
"правила."

# header
#: python-novice-gapminder/_episodes/02-variables.md:43
msgid "## Use `print` to display values."
msgstr "## Використовуйте `print` для виводу значень."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:45
msgid ""
"*   Python has a built-in function called `print` that prints things as "
"text."
msgstr "*   Python має вбудовану функцію `print`, яка друкує щось як текст."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:46
msgid "*   Call the function (i.e., tell Python to run it) by using its name."
msgstr ""
"*   Щоб викликати функцію (тобто, щоб виконати її), треба вказати її ім'я."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:47
msgid ""
"*   Provide values to the function (i.e., the things to print) in "
"parentheses."
msgstr ""
"*   Щоб передати функції значення (тобто, те що треба надрукувати), їх треба"
" помістити у дужки."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:48
msgid ""
"*   To add a string to the printout, wrap the string in single or double "
"quotes."
msgstr ""
"*   Щоб направити до друку рядок тексту, його треба помістити у одинарні або"
" подвійні лапки."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:49
msgid "*   The values passed to the function are called **arguments**"
msgstr "*  Значення, які передаються до функції, називаються **аргументами**"

# code block
#: python-novice-gapminder/_episodes/02-variables.md:51
msgid ""
"~~~\n"
"print(first_name, 'is', age, 'years old')\n"
"~~~"
msgstr ""
"~~~\n"
"print(first_name, 'is', age, 'years old')\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:54
msgid ""
"{: .language-python}\n"
"~~~\n"
"Ahmed is 42 years old\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Ahmed is 42 years old\n"
"~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/02-variables.md:58
#: python-novice-gapminder/_episodes/02-variables.md:121
#: python-novice-gapminder/_episodes/02-variables.md:144
#: python-novice-gapminder/_episodes/02-variables.md:169
#: python-novice-gapminder/_episodes/02-variables.md:180
#: python-novice-gapminder/_episodes/03-types-conversion.md:44
#: python-novice-gapminder/_episodes/03-types-conversion.md:54
#: python-novice-gapminder/_episodes/03-types-conversion.md:67
#: python-novice-gapminder/_episodes/03-types-conversion.md:95
#: python-novice-gapminder/_episodes/03-types-conversion.md:108
#: python-novice-gapminder/_episodes/03-types-conversion.md:121
#: python-novice-gapminder/_episodes/03-types-conversion.md:169
#: python-novice-gapminder/_episodes/03-types-conversion.md:185
#: python-novice-gapminder/_episodes/03-types-conversion.md:204
#: python-novice-gapminder/_episodes/04-built-in.md:58
#: python-novice-gapminder/_episodes/04-built-in.md:76
#: python-novice-gapminder/_episodes/04-built-in.md:109
#: python-novice-gapminder/_episodes/04-built-in.md:120
#: python-novice-gapminder/_episodes/04-built-in.md:139
#: python-novice-gapminder/_episodes/04-built-in.md:236
#: python-novice-gapminder/_episodes/06-libraries.md:56
#: python-novice-gapminder/_episodes/06-libraries.md:94
#: python-novice-gapminder/_episodes/06-libraries.md:110
#: python-novice-gapminder/_episodes/06-libraries.md:126
#: python-novice-gapminder/_episodes/07-reading-tabular.md:54
#: python-novice-gapminder/_episodes/07-reading-tabular.md:101
#: python-novice-gapminder/_episodes/07-reading-tabular.md:128
#: python-novice-gapminder/_episodes/07-reading-tabular.md:153
#: python-novice-gapminder/_episodes/07-reading-tabular.md:180
#: python-novice-gapminder/_episodes/07-reading-tabular.md:221
#: python-novice-gapminder/_episodes/08-data-frames.md:55
#: python-novice-gapminder/_episodes/08-data-frames.md:69
#: python-novice-gapminder/_episodes/08-data-frames.md:93
#: python-novice-gapminder/_episodes/08-data-frames.md:112
#: python-novice-gapminder/_episodes/08-data-frames.md:132
#: python-novice-gapminder/_episodes/08-data-frames.md:156
#: python-novice-gapminder/_episodes/08-data-frames.md:168
#: python-novice-gapminder/_episodes/08-data-frames.md:203
#: python-novice-gapminder/_episodes/08-data-frames.md:223
#: python-novice-gapminder/_episodes/08-data-frames.md:243
#: python-novice-gapminder/_episodes/08-data-frames.md:298
#: python-novice-gapminder/_episodes/08-data-frames.md:326
#: python-novice-gapminder/_episodes/11-lists.md:41
#: python-novice-gapminder/_episodes/11-lists.md:56
#: python-novice-gapminder/_episodes/11-lists.md:70
#: python-novice-gapminder/_episodes/11-lists.md:88
#: python-novice-gapminder/_episodes/11-lists.md:113
#: python-novice-gapminder/_episodes/11-lists.md:134
#: python-novice-gapminder/_episodes/11-lists.md:166
#: python-novice-gapminder/_episodes/11-lists.md:201
#: python-novice-gapminder/_episodes/12-for-loops.md:52
#: python-novice-gapminder/_episodes/12-for-loops.md:131
#: python-novice-gapminder/_episodes/12-for-loops.md:153
#: python-novice-gapminder/_episodes/12-for-loops.md:172
#: python-novice-gapminder/_episodes/13-conditionals.md:39
#: python-novice-gapminder/_episodes/13-conditionals.md:57
#: python-novice-gapminder/_episodes/13-conditionals.md:80
#: python-novice-gapminder/_episodes/13-conditionals.md:107
#: python-novice-gapminder/_episodes/13-conditionals.md:127
#: python-novice-gapminder/_episodes/13-conditionals.md:143
#: python-novice-gapminder/_episodes/13-conditionals.md:173
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:49
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:73
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:82
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:103
#: python-novice-gapminder/_episodes/16-writing-functions.md:58
#: python-novice-gapminder/_episodes/16-writing-functions.md:80
#: python-novice-gapminder/_episodes/16-writing-functions.md:91
#: python-novice-gapminder/_episodes/16-writing-functions.md:121
#: python-novice-gapminder/_episodes/16-writing-functions.md:130
#: python-novice-gapminder/_episodes/16-writing-functions.md:144
#: python-novice-gapminder/_episodes/17-scope.md:50
#: python-novice-gapminder/_episodes/18-style.md:84
msgid "{: .output}"
msgstr "{: .output}"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:60
msgid ""
"*   `print` automatically puts a single space between items to separate "
"them."
msgstr ""
"*   `print` автоматично додає пропуск проміж надрукованими аргументами, щоб "
"розділити їх."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:61
msgid "*   And wraps around to a new line at the end."
msgstr "*   Також `print` переходить на новий рядок після друку."

# header
#: python-novice-gapminder/_episodes/02-variables.md:63
msgid "## Variables must be created before they are used."
msgstr "## Змінні мають бути створені перед їх використанням."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:65
msgid ""
"*   If a variable doesn't exist yet, or if the name has been mis-spelled,"
msgstr "*   Якщо змінна не їснує, або її назва написана з помилкою,"

#: python-novice-gapminder/_episodes/02-variables.md:66
msgid ""
"    Python reports an error. (Unlike some languages, which \"guess\" a "
"default value.)"
msgstr ""
"    Python видасть помилку. (На відміну від деяких іншіх мов, які можуть "
"\"вгадати\" якесь значення за замовчуванням.)"

# code block
#: python-novice-gapminder/_episodes/02-variables.md:68
msgid ""
"~~~\n"
"print(last_name)\n"
"~~~"
msgstr ""
"~~~\n"
"print(last_name)\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:71
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-1-c1fbb4e96102> in <module>()\n"
"----> 1 print(last_name)"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-1-c1fbb4e96102> in <module>()\n"
"----> 1 print(last_name)"

#: python-novice-gapminder/_episodes/02-variables.md:78
msgid ""
"NameError: name 'last_name' is not defined\n"
"~~~"
msgstr ""
"NameError: name 'last_name' is not defined\n"
"~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/02-variables.md:80
#: python-novice-gapminder/_episodes/03-types-conversion.md:81
#: python-novice-gapminder/_episodes/03-types-conversion.md:137
#: python-novice-gapminder/_episodes/03-types-conversion.md:155
#: python-novice-gapminder/_episodes/04-built-in.md:95
#: python-novice-gapminder/_episodes/04-built-in.md:156
#: python-novice-gapminder/_episodes/04-built-in.md:169
#: python-novice-gapminder/_episodes/04-built-in.md:183
#: python-novice-gapminder/_episodes/04-built-in.md:209
#: python-novice-gapminder/_episodes/11-lists.md:183
#: python-novice-gapminder/_episodes/12-for-loops.md:81
#: python-novice-gapminder/_episodes/12-for-loops.md:96
#: python-novice-gapminder/_episodes/17-scope.md:57
msgid "{: .error}"
msgstr "{: .error}"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:82
msgid "*   The last line of an error message is usually the most informative."
msgstr ""
"*   Останній рядок у повідомленні про помилку є найбільш інформативним."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:83
msgid ""
"*   We will look at error messages in detail [later]({{ page.root "
"}}/15-scope/#reading-error-messages)."
msgstr ""
"*   Ми більш детально подивимось на повідомлення про помилки [пізніше]({{ "
"page.root }}/15-scope/#reading-error-messages)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:85
msgid "> ## Variables Persist Between Cells"
msgstr "> ## Змінні зберігаються між клітинками"

#: python-novice-gapminder/_episodes/02-variables.md:86
msgid ""
">\n"
"> Be aware that it is the *order* of execution of cells that is important in a Jupyter notebook, not the order\n"
"> in which they appear. Python will remember *all* the code that was run previously, including any variables you have\n"
"> defined, irrespective of the order in the notebook. Therefore if you define variables lower down the notebook and then\n"
"> (re)run cells further up, those defined further down will still be present. As an example, create two cells with the\n"
"> following content, in this order:\n"
">\n"
"> ~~~\n"
"> print(myval)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> myval = 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> If you execute this in order, the first cell will give an error. However, if you run the first cell *after* the second\n"
"> cell it will print out `1`. To prevent confusion, it can be helpful to use the `Kernel` -> `Restart & Run All` option which\n"
"> clears the interpreter and runs everything from a clean slate going top to bottom."
msgstr ""
">\n"
"> Майте на увазі, що в блокноті Jupyter важливий *порядок* виконання клітинок, а не порядок \n"
"> їх появи. Python запам’ятає *весь* код, який було запущено раніше, включно з будь-якими змінними, \n"
"> які ви визначили, незалежно від порядку в блокноті. Тому, якщо ви визначите змінні нижче в блокноті, а потім\n"
"> (повторно) запустите комірки вище, то ті клітинки, що визначені нижче, все одно будуть присутні. \n"
"Для прикладу створіть дві клітинки з \n"
"таким вмістом у такому порядку:\n"
"\n"
">\n"
"> ~~~\n"
"> print(myval)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> myval = 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
">Якщо ви виконуєте це послідовно, перша клітинка дасть помилку. Однак,якщо ви запустите першу клітинку *після* другої,\n"
"> то буде надруковано `1`. Щоб уникнути плутанини, може бути корисним скористатися опцією `Kernel` -> `Restart & Run All`, яка\n"
"> очищує інтерпретатор і запускає все з чистого листа зверху вниз. "

# header
#: python-novice-gapminder/_episodes/02-variables.md:108
msgid "## Variables can be used in calculations."
msgstr "## Змінні можна використовувати для обчислень."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:110
msgid "*   We can use variables in calculations just as if they were values."
msgstr ""
"*   Ми можемо використовувати змінні в обчисленнях так само, як би вони були"
" значеннями."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:111
msgid "    *   Remember, we assigned the value `42` to `age` a few lines ago."
msgstr ""
"    *   Пам’ятайте, ми присвоїли значення `42` змінній `age` кількома "
"рядками вище."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:113
msgid ""
"~~~\n"
"age = age + 3\n"
"print('Age in three years:', age)\n"
"~~~"
msgstr ""
"~~~\n"
"age = age + 3\n"
"print('Age in three years:', age)\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:117
msgid ""
"{: .language-python}\n"
"~~~\n"
"Age in three years: 45\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Age in three years: 45\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/02-variables.md:123
msgid "## Use an index to get a single character from a string."
msgstr "## Використовуйте індекс, щоб отримати один символ із рядка."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:125
msgid ""
"*   The characters (individual letters, numbers, and so on) in a string are"
msgstr "*   Символи (окремі літери, цифри тощо) у рядку є"

#: python-novice-gapminder/_episodes/02-variables.md:126
msgid ""
"    ordered. For example, the string `'AB'` is not the same as `'BA'`. Because of\n"
"    this ordering, we can treat the string as a list of characters.\n"
"*   Each position in the string (first, second, etc.) is given a number. This\n"
"    number is called an **index** or sometimes a subscript.\n"
"*   Indices are numbered from 0.\n"
"*   Use the position's index in square brackets to get the character at that\n"
"    position."
msgstr ""
"    упорядкованими. Наприклад, рядок `'AB'` не те саме, що `'BA'`. Завдяки\n"
"  такому упорядкуванню ми можемо розглядати рядок як список символів.\n"
"*   Кожна позиція в рядку (перша, друга тощо) має номер. Це\n"
"число називається **індексом** або іноді нижнім індексом.\n"
"*   Індекси нумеруються від 0.\n"
"*   Використовуйте індекс позиції в квадратних дужках,  щоб отримати символ з тієї \n"
"    позиції."

#: python-novice-gapminder/_episodes/02-variables.md:134
msgid "![an illustration of indexing]({{ site.baseurl }}/fig/2_indexing.svg)"
msgstr "![Ілюстрація індексації]({{ site.baseurl }}/fig/2_indexing.svg)"

# code block
#: python-novice-gapminder/_episodes/02-variables.md:136
msgid ""
"~~~\n"
"atom_name = 'helium'\n"
"print(atom_name[0])\n"
"~~~"
msgstr ""
"~~~\n"
"atom_name = 'helium'\n"
"print(atom_name[0])\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:140
msgid ""
"{: .language-python}\n"
"~~~\n"
"h\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"h\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/02-variables.md:146
msgid "## Use a slice to get a substring."
msgstr "## Використовуйте зріз, щоб отримати підрядок."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:148
msgid ""
"*   A part of a string is called a **substring**. A substring can be as "
"short as a"
msgstr ""
"* Частина рядка має назву **підрядок**. Підрядок може бути дуже коротким - "

#: python-novice-gapminder/_episodes/02-variables.md:149
msgid ""
"    single character.\n"
"*   An item in a list is called an element. Whenever we treat a string as if it\n"
"    were a list, the string's elements are its individual characters.\n"
"*   A slice is a part of a string (or, more generally, any list-like thing).\n"
"*   We take a slice by using `[start:stop]`, where `start` is replaced with the\n"
"    index of the first element we want and `stop` is replaced with the index of\n"
"    the element just after the last element we want.\n"
"*   Mathematically, you might say that a slice selects `[start:stop)`.\n"
"*   The difference between `stop` and `start` is the slice's length.\n"
"*   Taking a slice does not change the contents of the original string. Instead,\n"
"    the slice is a copy of part of the original string."
msgstr ""
"лише один символ.\n"
"* Список складається з елементів. У випадку, коли рядок розглядається як\n"
"список, його елементами є окремі символи.\n"
"* Фрагмент - це частина рядка (в загальному випадку, будь-який вираз).\n"
"* Фрагмент вилучається за допомогою `[start:stop]`, де `start` замінюється на\n"
"індекс елемента, який повинен бути першим, а `stop` - на індекс\n"
"елемента, який розташований відразу після останнього потрібного елемента.\n"
"* З математичної точки зору, фрагмент вибирає `[start:stop)`.\n"
"* Проміжок між `stop` and `start` - це довжина фрагмента.\n"
"* Вилучення фрагмента не змінює вміст вихідного рядка. Навпаки,\n"
"фрагмент буде копією частини вихідного рядка."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:161
msgid ""
"~~~\n"
"atom_name = 'sodium'\n"
"print(atom_name[0:3])\n"
"~~~"
msgstr ""
"~~~\n"
"atom_name = 'sodium'\n"
"print(atom_name[0:3])\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:165
msgid ""
"{: .language-python}\n"
"~~~\n"
"sod\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"sod\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/02-variables.md:171
msgid "## Use the built-in function `len` to find the length of a string."
msgstr "## Використовуйте вбудовану функцію `len`, щоб знайти довжину рядка."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:173
msgid ""
"~~~\n"
"print(len('helium'))\n"
"~~~"
msgstr ""
"~~~\n"
"print(len('helium'))\n"
"~~~"

#: python-novice-gapminder/_episodes/02-variables.md:176
msgid ""
"{: .language-python}\n"
"~~~\n"
"6\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"6\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:182
msgid "*   Nested functions are evaluated from the inside out,"
msgstr "*   Вкладені функції опрацьовуються, починаючи з середини,"

#: python-novice-gapminder/_episodes/02-variables.md:183
msgid "     like in mathematics."
msgstr "     як в математиці."

# header
#: python-novice-gapminder/_episodes/02-variables.md:185
msgid "## Python is case-sensitive."
msgstr "## Python чутливий до регістру."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:187
msgid "*   Python thinks that upper- and lower-case letters are different,"
msgstr "*   Python вважає, що великі та малі літери різні,"

#: python-novice-gapminder/_episodes/02-variables.md:188
msgid ""
"    so `Name` and `name` are different variables.\n"
"*   There are conventions for using upper-case letters at the start of variable names so we will use lower-case letters for now."
msgstr ""
"    таким чинoм, `Name` та `name` є різними змінними.\n"
"*   Існують домовленості про використання великих літер на початку імен змінних, тому ми будемо використовувати малі літери."

# header
#: python-novice-gapminder/_episodes/02-variables.md:191
msgid "## Use meaningful variable names."
msgstr "## Використовуйте осмислені назви змінних."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:193
msgid ""
"*   Python doesn't care what you call variables as long as they obey the "
"rules"
msgstr ""
"*   Python байдуже, як ви називаєте змінні, якщо вони відповідають правилам"

#: python-novice-gapminder/_episodes/02-variables.md:194
msgid "    (alphanumeric characters and the underscore)."
msgstr "    (букви, цифри та підкреслення)."

# code block
#: python-novice-gapminder/_episodes/02-variables.md:196
msgid ""
"~~~\n"
"flabadab = 42\n"
"ewr_422_yY = 'Ahmed'\n"
"print(ewr_422_yY, 'is', flabadab, 'years old')\n"
"~~~"
msgstr ""
"~~~\n"
"flabadab = 42\n"
"ewr_422_yY = 'Ahmed'\n"
"print(ewr_422_yY, 'is', flabadab, 'years old')\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:203
msgid ""
"*   Use meaningful variable names to help other people understand what the "
"program does."
msgstr ""
"*   Використовуйте змістовні назви змінних, щоб допомогти іншим зрозуміти, "
"що робить програма."

# unordered list
#: python-novice-gapminder/_episodes/02-variables.md:204
msgid "*   The most important \"other person\" is your future self."
msgstr "*   Найважливіша «інша людина» — це ваше майбутнє."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:206
msgid "> ## Swapping Values"
msgstr "> ## Заміна значень"

#: python-novice-gapminder/_episodes/02-variables.md:207
msgid ""
">\n"
"> Fill the table showing the values of the variables in this program\n"
"> *after* each statement is executed.\n"
">\n"
"> ~~~\n"
"> # Command  # Value of x   # Value of y   # Value of swap #\n"
"> x = 1.0    #              #              #               #\n"
"> y = 3.0    #              #              #               #\n"
"> swap = x   #              #              #               #\n"
"> x = y      #              #              #               #\n"
"> y = swap   #              #              #               #\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > # Command  # Value of x   # Value of y   # Value of swap #\n"
"> > x = 1.0    # 1.0          # not defined  # not defined   #\n"
"> > y = 3.0    # 1.0          # 3.0          # not defined   #\n"
"> > swap = x   # 1.0          # 3.0          # 1.0           #\n"
"> > x = y      # 3.0          # 3.0          # 1.0           #\n"
"> > y = swap   # 3.0          # 1.0          # 1.0           #\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > These three lines exchange the values in `x` and `y` using the `swap`\n"
"> > variable for temporary storage. This is a fairly common programming idiom."
msgstr ""
">\n"
"> Заповніть таблицю, вказавши значення змінних у цій програмі\n"
"> *після* виконання кожного оператора.\n"
">\n"
"> ~~~\n"
"> # Оператор  # Значення x   # Значення y   # Значення  swap #\n"
"> x = 1.0     #              #              #               #\n"
"> y = 3.0     #              #              #               #\n"
"> swap = x    #              #              #               #\n"
"> x = y       #              #              #               #\n"
"> y = swap    #              #              #               #\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > # Оператор # Значення x # Значення y     # Значення swap     #\n"
"> > x = 1.0    # 1.0          # не визначено  # не визначено   #\n"
"> > y = 3.0    # 1.0          # 3.0          # не визначено   #\n"
"> > swap = x   # 1.0          # 3.0          # 1.0           #\n"
"> > x = y      # 3.0          # 3.0          # 1.0           #\n"
"> > y = swap   # 3.0          # 1.0          # 1.0           #\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > Ці три рядки обмінюються значеннями в `x` та `y` за допомогою `swap` - \n"
"> > змінною для тимчасового зберігання. Це досить поширена ідіома програмування."

# SC/DC Template label
#: python-novice-gapminder/_episodes/02-variables.md:234
#: python-novice-gapminder/_episodes/02-variables.md:261
msgid ">{: .solution}"
msgstr ">{: .Рішення}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:237
msgid "> ## Predicting Values"
msgstr "> ## Прогнозування значень"

#: python-novice-gapminder/_episodes/02-variables.md:238
msgid ""
">\n"
"> What is the final value of `position` in the program below?\n"
"> (Try to predict the value without running the program,\n"
"> then check your prediction.)\n"
">\n"
"> ~~~\n"
"> initial = 'left'\n"
"> position = initial\n"
"> initial = 'right'\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > 'left'\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
">> The `initial` variable is assigned the value `'left'`.\n"
"> > In the second line, the `position` variable also receives\n"
">> the string value `'left'`. In third line, the `initial` variable is given the\n"
">> value `'right'`, but the `position` variable retains its string value\n"
">> of `'left'`."
msgstr ""
">\n"
"> Яке кінцеве значення `position` у наведеній нижче програмі?\n"
"> (Спробуйте передбачити значення без запуску програми,\n"
"> а потім перевірте свій прогноз).\n"
">\n"
"> ~~~\n"
"> initial = 'left'\n"
"> position = initial\n"
"> initial = 'right'\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > 'left'\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
">> Змінній `initial` присвоюється значення `'left'`.\n"
"> > У другому рядку змінна `position` також отримує\n"
">> значення рядка `'left'`. У третьому рядку змінній `initial` надається\n"
">> значення `'right'`, але змінна `position` зберігає своє рядкове значення\n"
">> `'left'`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:264
msgid "> ## Challenge"
msgstr "> ## Випробування"

#: python-novice-gapminder/_episodes/02-variables.md:265
msgid ""
">\n"
"> If you assign `a = 123`,\n"
"> what happens if you try to get the second digit of `a` via `a[1]`?\n"
">\n"
"> > ## Solution\n"
"> > Numbers are not strings or sequences and Python will raise an error if you try to perform an index operation on a\n"
"> > number. In the [next lesson on types and type conversion]({{ page.root }}/03-types-conversion/#convert-numbers-and-strings)\n"
"> > we will learn more about types and how to convert between different types. If you want the Nth digit of a number you\n"
"> > can convert it into a string using the `str` built-in function and then perform an index operation on that string.\n"
"> >\n"
"> > ~~~\n"
"> > a = 123\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > TypeError: 'int' object is not subscriptable\n"
"> > ~~~\n"
"> > {: .error}\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > a = str(123)\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 2\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Якщо ви призначите `a = 123`,\n"
"> що станеться, якщо ви спробуєте отримати другу цифру `a` через `a[1]`\n"
">\n"
"> > ## Рішення\n"
"> > Числа не є рядками чи послідовностями, і Python поверне помилку, якщо ви спробуєте виконати операцію індексування на\n"
"> > числі. У [наступному уроці про типи та перетворення типів]({{ page.root }}/03-types-conversion/#convert-numbers-and-strings)\n"
"> > ми дізнаємося більше про типи та про правила конвертації різних типів. Якщо вам потрібна N-та цифра числа, ви\n"
"> > можете перетворити число на рядок за допомогою вбудованої функції `str`, а потім виконати операцію індексування цього рядка.\n"
"> >\n"
"> > ~~~\n"
"> > a = 123\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > TypeError: 'int' object is not subscriptable\n"
"> > ~~~\n"
"> > {: .error}\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > a = str(123)\n"
"> > print(a[1])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 2\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:298
msgid "> ## Choosing a Name"
msgstr "> ## Вибір імені"

#: python-novice-gapminder/_episodes/02-variables.md:299
msgid ""
">\n"
"> Which is a better variable name, `m`, `min`, or `minutes`?\n"
"> Why?\n"
"> Hint: think about which code you would rather inherit\n"
"> from someone who is leaving the lab:\n"
">\n"
"> 1. `ts = m * 60 + s`\n"
"> 2. `tot_sec = min * 60 + sec`\n"
"> 3. `total_seconds = minutes * 60 + seconds`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > `minutes` is better because `min` might mean something like \"minimum\"\n"
"> > (and actually is an existing built-in function in Python that we will cover later)."
msgstr ""
">\n"
"> Яка назва змінної є кращою: `m`, `min` або `minutes`?\n"
"> Чому?\n"
"> Підказка: подумайте, який код ви б хотіли успадкувати\n"
"> від когось, хто виходить з лабораторії:\n"
">\n"
"> 1. `ts = m * 60 + s`\n"
"> 2. `tot_sec = min * 60 + sec`\n"
"> 3. `total_seconds = minutes * 60 + seconds`\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > `minutes` краще, тому що `min` може означати щось на зразок \"мінімум\"\n"
"> > (і фактично це вбудована функція в Python, яку ми розглянемо пізніше)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:316
msgid "> ## Slicing practice"
msgstr "> ## Практика застосування зрізів"

#: python-novice-gapminder/_episodes/02-variables.md:317
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> atom_name = 'carbon'\n"
"> print('atom_name[1:3] is:', atom_name[1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > atom_name[1:3] is: ar\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Що надрукує наступна программа?\n"
">\n"
"> ~~~\n"
"> atom_name = 'carbon'\n"
"> print('atom_name[1:3] is:', atom_name[1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > atom_name[1:3] is: ar\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/02-variables.md:335
msgid "> ## Slicing concepts"
msgstr "> ## Визначення зрізів"

#: python-novice-gapminder/_episodes/02-variables.md:336
msgid ""
">\n"
"> 1.  What does `thing[low:high]` do?\n"
"> 2.  What does `thing[low:]` (without a value after the colon) do?\n"
"> 3.  What does `thing[:high]` (without a value before the colon) do?\n"
"> 4.  What does `thing[:]` (just a colon) do?\n"
"> 5.  What does `thing[number:some-negative-number]` do?\n"
"> 6.  What happens when you choose a `high` value which is out of range? (i.e., try `atom_name[0:15]`) \n"
">\n"
"> > ## Solutions\n"
"> >\n"
"> > 1. `thing[low:high]` returns a slice from `low` to the value before `high`\n"
"> > 2. `thing[low:]` returns a slice from `low` all the way to the end of `thing`\n"
"> > 3. `thing[:high]` returns a slice from the beginning of `thing` to the value before `high`\n"
"> > 4. `thing[:]` returns all of `thing`\n"
"> > 5. `thing[number:some-negative-number]` returns a slice from `number` to `some-negative-number` values from the end of `thing`\n"
"> > 6. If a part of the slice is out of range, the operation does not fail. `atom_name[0:15]` gives the same result as `atom_name[0:]`."
msgstr ""
">\n"
"> 1.  Що є результатом зрізу `thing[low:high]`?\n"
"> 2.  Що є результатом зрізу `thing[low:]` (без значення після двокрапки)?\n"
"> 3.  Що є результатом зрізу `thing[:high]` (без значення до двокрапки) ?\n"
"> 4.  Що є результатом зрізу `thing[:]` (тільки двокрапка)?\n"
"> 5.  Що є результатом зрізу `thing[number:some-negative-number]`?\n"
"> 6.  Що станеться, якщо ми оберемо значення `high`, яке виходить за рамки діапазону? (наприклад, спробуйте `atom_name[0:15]`) \n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1. `thing[low:high]` поверне зріз, починаючи зі значення `low` до значення перед `high`\n"
"> > 2. `thing[low:]` поверне зріз, починаючи зі значення `low`, що містить всі значення до кінця `thing`\n"
"> > 3. `thing[:high]` поверне зріз, починаючи зі значення `thing` до значення перед `high`\n"
"> > 4. `thing[:]` поверне всі значення рядка `thing`\n"
"> > 5. `thing[number:some-negative-number]` поверне зріз, починаючи зі значення `number` до значення `some-negative-number`, що розраховується з кінця рядка `thing`\n"
"> > 6. Якщо частина фрагмента виходить за межі діапазону, операція не завершується. `atom_name[0:15]` дає той самий результат, що й`atom_name[0:]`."

# Front Matter
#: python-novice-gapminder/_episodes/03-types-conversion.md:1
msgid ""
"---\n"
"title: \"Data Types and Type Conversion\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"What kinds of data do programs store?\"\n"
"- \"How can I convert one type to another?\"\n"
"objectives:\n"
"- \"Explain key differences between integers and floating point numbers.\"\n"
"- \"Explain key differences between numbers and character strings.\"\n"
"- \"Use built-in functions to convert between integers, floating point numbers, and strings.\"\n"
"keypoints:\n"
"- \"Every value has a type.\"\n"
"- \"Use the built-in function `type` to find the type of a value.\"\n"
"- \"Types control what operations can be done on values.\"\n"
"- \"Strings can be added and multiplied.\"\n"
"- \"Strings have a length (but numbers don't).\"\n"
"- \"Must convert numbers to strings or vice versa when operating on them.\"\n"
"- \"Can mix integers and floats freely in operations.\"\n"
"- \"Variables only change value when something is assigned to them.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Типи даних та їх перетворення\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Які типи даних зберігають програми?\"\n"
"- \"Як перетворити один тип в інший?\"\n"
"objectives:\n"
"- \"Зʼясувати, чим відрізняються цілі числа від чисел з плаваючою крапкою.\"\n"
"- \"Зʼясувати, чим відрізняються числа та рядки символів.\"\n"
"- \"Використовувати вбудовані функції для перетворень між цілими числами,  числами з плаваючою крапкою та рядками.\"\n"
"keypoints:\n"
"- \"Кожне значення має тип.\"\n"
"- \"Використовуйте вбудовану функцію `type` для визначення типу значення.\"\n"
"- \"Типи контролюють, які операції можуть бути виконані над значеннями.\"\n"
"- \"Рядки можна додавати та множити.\"\n"
"- \"Рядки мають довжину (а числа - ні).\"\n"
"- \"Деякі операції вимагають перетворення числа у рядок або навпаки.\"\n"
"- \"Цілі та дійсні числа можна використовувати разом для арифметичних дій.\"\n"
"- \"Змінні можуть змінити своє значення тільки через присвоювання.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:22
msgid "## Every value has a type."
msgstr "## Кожне значення має тип."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:24
msgid "*   Every value in a program has a specific type."
msgstr "*   Кожне значення, яке використовує програма, має деякий тип."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:25
msgid ""
"*   Integer (`int`): represents positive or negative whole numbers like 3 or"
" -512."
msgstr ""
"*   Ціле число (`int`): зображує додатні або від’ємні цілі числа, наприклад "
"3 або -512."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:26
msgid ""
"*   Floating point number (`float`): represents real numbers like 3.14159 or"
" -2.5."
msgstr ""
"*   Число з плаваючою крапкою (`float`): зображує дійсні числа, наприклад "
"3.14159 або -2.5."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:27
msgid "*   Character string (usually called \"string\", `str`): text."
msgstr ""
"*   Рядки символів (звичайно просто \"рядки\", `str`): представляють текст."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:28
msgid ""
"    *   Written in either single quotes or double quotes (as long as they "
"match)."
msgstr ""
"    *   Укладені в одинарні або подвійні лапки (тип лапок має збігатися)."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:29
msgid "    *   The quote marks aren't printed when the string is displayed."
msgstr "    *   Під час відображення рядку лапки не друкуються."

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:31
msgid "## Use the built-in function `type` to find the type of a value."
msgstr "## Вбудована функція `type` повертає тип значення."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:33
msgid ""
"*   Use the built-in function `type` to find out what type a value has."
msgstr ""
"*   Використовуйте вбудовану функцію `type`, щоб з'ясувати, який тип має "
"значення."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:34
msgid "*   Works on variables as well."
msgstr "*   Це також працює зі змінними."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:35
msgid ""
"    *   But remember: the *value* has the type --- the *variable* is just a "
"label."
msgstr ""
"    *   Але запамʼятайте: *значення* має свій тип, а *змінна* тільки вказує "
"на деяке значення."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:37
msgid ""
"~~~\n"
"print(type(52))\n"
"~~~"
msgstr ""
"~~~\n"
"print(type(52))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:40
msgid ""
"{: .language-python}\n"
"~~~\n"
"<class 'int'>\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"<class 'int'>\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:46
msgid ""
"~~~\n"
"fitness = 'average'\n"
"print(type(fitness))\n"
"~~~"
msgstr ""
"~~~\n"
"fitness = 'average'\n"
"print(type(fitness))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:50
msgid ""
"{: .language-python}\n"
"~~~\n"
"<class 'str'>\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"<class 'str'>\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:56
msgid ""
"## Types control what operations (or methods) can be performed on a given "
"value."
msgstr ""
"## Тип визначає, які операції (або методи) можна виконувати із даним "
"значенням."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:58
msgid "*   A value's type determines what the program can do to it."
msgstr "*   Тип значення визначає, що може робити з ним програма."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:60
msgid ""
"~~~\n"
"print(5 - 3)\n"
"~~~"
msgstr ""
"~~~\n"
"print(5 - 3)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:63
msgid ""
"{: .language-python}\n"
"~~~\n"
"2\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"2\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:69
msgid ""
"~~~\n"
"print('hello' - 'h')\n"
"~~~"
msgstr ""
"~~~\n"
"print('hello' - 'h')\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:72
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-2-67f5626a1e07> in <module>()\n"
"----> 1 print('hello' - 'h')"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-2-67f5626a1e07> in <module>()\n"
"----> 1 print('hello' - 'h')"

#: python-novice-gapminder/_episodes/03-types-conversion.md:79
msgid ""
"TypeError: unsupported operand type(s) for -: 'str' and 'str'\n"
"~~~"
msgstr ""
"TypeError: unsupported operand type(s) for -: 'str' and 'str'\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:83
msgid "## You can use the \"+\" and \"*\" operators on strings."
msgstr "## Ви можете використовувати оператори \"+\" та \"*\" для дій над рядками."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:85
msgid "*   \"Adding\" character strings concatenates them."
msgstr "*   \"Додавання\" рядків виконує їх конкатенацію."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:87
msgid ""
"~~~\n"
"full_name = 'Ahmed' + ' ' + 'Walsh'\n"
"print(full_name)\n"
"~~~"
msgstr ""
"~~~\n"
"full_name = 'Ahmed' + ' ' + 'Walsh'\n"
"print(full_name)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:91
msgid ""
"{: .language-python}\n"
"~~~\n"
"Ahmed Walsh\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Ahmed Walsh\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:97
msgid ""
"*   Multiplying a character string by an integer _N_ creates a new string "
"that consists of that character string repeated  _N_ times."
msgstr ""
"*   Якщо рядок помножити на ціле число _N_, то це створить новий рядок, який"
" буде містити вихідний рядок, повторений  _N_ разів."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:98
msgid "    *   Since multiplication is repeated addition."
msgstr "    *   Оскільки множення - це повторюване додавання."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:100
msgid ""
"~~~\n"
"separator = '=' * 10\n"
"print(separator)\n"
"~~~"
msgstr ""
"~~~\n"
"separator = '=' * 10\n"
"print(separator)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:104
msgid ""
"{: .language-python}\n"
"~~~\n"
"==========\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"==========\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:110
msgid "## Strings have a length (but numbers don't)."
msgstr "## Рядки мають довжину (але числа її не мають)."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:112
msgid ""
"*   The built-in function `len` counts the number of characters in a string."
msgstr "*   Вбудована функція `len` повертає кількість символів у рядку."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:114
msgid ""
"~~~\n"
"print(len(full_name))\n"
"~~~"
msgstr ""
"~~~\n"
"print(len(full_name))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:117
msgid ""
"{: .language-python}\n"
"~~~\n"
"11\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"11\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:123
msgid "*   But numbers don't have a length (not even zero)."
msgstr "*   Але числа не мають довжини (навіть нуль)."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:125
msgid ""
"~~~\n"
"print(len(52))\n"
"~~~"
msgstr ""
"~~~\n"
"print(len(52))\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:128
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-3-f769e8e8097d> in <module>()\n"
"----> 1 print(len(52))"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-3-f769e8e8097d> in <module>()\n"
"----> 1 print(len(52))"

#: python-novice-gapminder/_episodes/03-types-conversion.md:135
msgid ""
"TypeError: object of type 'int' has no len()\n"
"~~~"
msgstr ""
"TypeError: object of type 'int' has no len()\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:139
msgid ""
"## <a name='convert-numbers-and-strings'></a> Must convert numbers to "
"strings or vice versa when operating on them."
msgstr ""
"## <a name='convert-numbers-and-strings'></a> Деякі операції вимагають "
"перетворення числа у рядок або навпаки."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:141
msgid "*   Cannot add numbers and strings."
msgstr "*   Додавання чисел та рядків неможливе."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:143
msgid ""
"~~~\n"
"print(1 + '2')\n"
"~~~"
msgstr ""
"~~~\n"
"print(1 + '2')\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:146
msgid ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-4-fe4f54a023c6> in <module>()\n"
"----> 1 print(1 + '2')"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"---------------------------------------------------------------------------\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-4-fe4f54a023c6> in <module>()\n"
"----> 1 print(1 + '2')"

#: python-novice-gapminder/_episodes/03-types-conversion.md:153
msgid ""
"TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
"~~~"
msgstr ""
"TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:157
msgid ""
"*   Not allowed because it's ambiguous: should `1 + '2'` be `3` or `'12'`?"
msgstr ""
"*   Таке додавання не дозволено, тому що воно не визначене: чи має `1 + '2'`"
" повертати `3` чи `'12'`?"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:158
msgid ""
"*   Some types can be converted to other types by using the type name as a "
"function."
msgstr ""
"*   Перетворення типу виконується за допомогою функції, яка має те ж саме "
"імʼя, що і потрібний тип."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:160
msgid ""
"~~~\n"
"print(1 + int('2'))\n"
"print(str(1) + '2')\n"
"~~~"
msgstr ""
"~~~\n"
"print(1 + int('2'))\n"
"print(str(1) + '2')\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:164
msgid ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"12\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"12\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:171
msgid "## Can mix integers and floats freely in operations."
msgstr "## Цілі та дійсні числа можна використовувати разом."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:173
msgid "*   Integers and floating-point numbers can be mixed in arithmetic."
msgstr ""
"*   Цілі та дійсні числа можна використовувати разом для арифметичних дій."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:174
msgid ""
"    *   Python 3 automatically converts integers to floats as needed. "
"(Integer division in Python 2 will return an integer, the *floor* of the "
"division.)"
msgstr ""
"    *   Python 3 автоматично перетворить цілі числа у дійсні, якщо це "
"потрібно. (У Python 2 ділення цілих чисел поверне ціле число, яке буде цілою"
" частиною відповідного дійсного числа)."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:176
msgid ""
"~~~\n"
"print('half is', 1 / 2.0)\n"
"print('three squared is', 3.0 ** 2)\n"
"~~~"
msgstr ""
"~~~\n"
"print('half is', 1 / 2.0)\n"
"print('three squared is', 3.0 ** 2)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:180
msgid ""
"{: .language-python}\n"
"~~~\n"
"half is 0.5\n"
"three squared is 9.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"half is 0.5\n"
"three squared is 9.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/03-types-conversion.md:187
msgid "## Variables only change value when something is assigned to them."
msgstr "## Змінні можуть набути своє значення тільки через присвоювання."

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:189
msgid "*   If we make one cell in a spreadsheet depend on another,"
msgstr "*   В електроних таблицях, якщо одна клітинка залежить від іншої,"

#: python-novice-gapminder/_episodes/03-types-conversion.md:190
msgid ""
"    and update the latter,\n"
"    the former updates automatically.\n"
"*   This does **not** happen in programming languages."
msgstr ""
"    то у разі зміни у останній,\n"
"    залежна клітинка оновиться автоматично.\n"
"*   Це **не** трапляється у мовах програмування."

# code block
#: python-novice-gapminder/_episodes/03-types-conversion.md:194
msgid ""
"~~~\n"
"first = 1\n"
"second = 5 * first\n"
"first = 2\n"
"print('first is', first, 'and second is', second)\n"
"~~~"
msgstr ""
"~~~\n"
"first = 1\n"
"second = 5 * first\n"
"first = 2\n"
"print('first is', first, 'and second is', second)\n"
"~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:200
msgid ""
"{: .language-python}\n"
"~~~\n"
"first is 2 and second is 5\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"first is 2 and second is 5\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/03-types-conversion.md:206
msgid ""
"*   The computer reads the value of `first` when doing the multiplication,"
msgstr ""
"*   Компʼютер використовує значення змінної `first` коли виконує множення,"

#: python-novice-gapminder/_episodes/03-types-conversion.md:207
msgid ""
"    creates a new value, and assigns it to `second`.\n"
"*   After that, `second` does not remember where it came from."
msgstr ""
"    створює нове значення, та присвоює його змінній `second`.\n"
"*   Після цього значення `second` встановлюється на нове значення і не залежить від `first`, тому його значення не змінюється автоматично, коли змінюється значення `first`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:210
msgid "> ## Fractions"
msgstr "> ## Дроби"

#: python-novice-gapminder/_episodes/03-types-conversion.md:211
msgid ""
">\n"
"> What type of value is 3.4?\n"
"> How can you find out?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > It is a floating-point number (often abbreviated \"float\").\n"
"> >\n"
"> > ~~~\n"
"> > print(type(3.4))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Який тип має число 3.4?\n"
"> Як це можна встановити?\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Це - дійсне число (або число з плаваючою крапкою).\n"
"> >\n"
"> > ~~~\n"
"> > print(type(3.4))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:230
msgid "> ## Automatic Type Conversion"
msgstr "> ## Автоматичне перетворення типів"

#: python-novice-gapminder/_episodes/03-types-conversion.md:231
msgid ""
">\n"
"> What type of value is 3.25 + 4?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > It is a float:\n"
"> > integers are automatically converted to floats as necessary.\n"
"> >\n"
"> > ~~~\n"
"> > result = 3.25 + 4\n"
"> > print(result, 'is', type(result))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 7.25 is <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Який тип має 3.25 + 4?\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Це - дійсне число:\n"
"> > цілі числа автоматично перетворюються у дійсні, коли це необхідно.\n"
"> >\n"
"> > ~~~\n"
"> > result = 3.25 + 4\n"
"> > print(result, 'is', type(result))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 7.25 is <class 'float'>\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:251
msgid "> ## Choose a Type"
msgstr "> ## Вибір типу"

#: python-novice-gapminder/_episodes/03-types-conversion.md:252
msgid ""
">\n"
"> What type of value (integer, floating point number, or character string)\n"
"> would you use to represent each of the following?  Try to come up with more than one good answer for each problem.  For example, in  # 1, when would counting days with a floating point variable make more sense than using an integer?  \n"
">\n"
"> 1. Number of days since the start of the year.\n"
"> 2. Time elapsed from the start of the year until now in days.\n"
"> 3. Serial number of a piece of lab equipment.\n"
"> 4. A lab specimen's age\n"
"> 5. Current population of a city.\n"
"> 6. Average population of a city over time.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answers to the questions are:\n"
"> > 1. Integer, since the number of days would lie between 1 and 365. \n"
"> > 2. Floating point, since fractional days are required\n"
"> > 3. Character string if serial number contains letters and numbers, otherwise integer if the serial number consists only of numerals\n"
"> > 4. This will vary! How do you define a specimen's age? whole days since collection (integer)? date and time (string)?\n"
"> > 5. Choose floating point to represent population as large aggregates (eg millions), or integer to represent population in units of individuals.\n"
"> > 6. Floating point number, since an average is likely to have a fractional part.\n"
"> > {: .output}"
msgstr ""
">\n"
"> Який тип (ціле число, дійсне число, рядок символів) ви будете використовувати для зберігання наступних значень? Спробуйте надати більш ніж одну відповідь у кожному випадку. Наприклад, в питанні # 1, коли для рахування днів дійсні числа можуть бути більш доречними, ніж цілі?  \n"
">\n"
"> 1. Кількість днів з початку року.\n"
"> 2. Час, який пройшов з початку року до поточного моменту, у днях.\n"
"> 3. Серійний номер лабораторного обладнання.\n"
"> 4. Вік лабораторного зразка.\n"
"> 5. Чисельність населення міста.\n"
"> 6. Середня чисельність населення міста за певний час.\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Ці питання мають наступні відповіді:\n"
"> > 1. Ціле число, оскільки кількість днів приймає значення від 1 до 365. \n"
"> > 2. Дійсне число, оскільки треба використовувати частини дня.\n"
"> > 3. Рядок символів, якщо серійний номер містить букви та цифри; ціле число, якщо він містить тільки цифри.\n"
"> > 4. Це залежить від багатьох факторів! Як вимірюється вік зразка? Кількість днів з моменту, коли його було виготовлено (ціле число)? Дата і час (рядок)?\n"
"> > 5. Виберіть дійсне число, щоб представити приблизну кількість населення за допомогою округлення (наприклад, до мільйонів), або ціле число, щоб представити точну кількість населення.\n"
"> > 6. Дійсне число, оскільки результат усереднення, швидше за все, буде мати дрібну частину.\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:276
msgid "> ## Division Types"
msgstr "> ## Типи операцій ділення "

#: python-novice-gapminder/_episodes/03-types-conversion.md:277
msgid ""
">\n"
"> In Python 3, the `//` operator performs integer (whole-number) floor division, the `/` operator performs floating-point\n"
"> division, and the '%' (or *modulo*) operator calculates and returns the remainder from integer division:\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 5//3)\n"
"> print('5 / 3:', 5/3)\n"
"> print('5 % 3:', 5%3)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 5 // 3: 1\n"
"> 5 / 3: 1.6666666666666667\n"
"> 5 % 3: 2\n"
"> ~~~"
msgstr ""
">\n"
"> У Python 3 оператор `//` виконує ціле ділення (повертає цілу частину результату), оператор `/` виконує ділення з плаваючою крапкою,\n"
"> та оператор '%' (або *модуль*) повертає залишок від цілого ділення:\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 5//3)\n"
"> print('5 / 3:', 5/3)\n"
"> print('5 % 3:', 5%3)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 5 // 3: 1\n"
"> 5 / 3: 1.6666666666666667\n"
"> 5 % 3: 2\n"
"> ~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/03-types-conversion.md:293
#: python-novice-gapminder/_episodes/03-types-conversion.md:345
#: python-novice-gapminder/_episodes/03-types-conversion.md:445
#: python-novice-gapminder/_episodes/07-reading-tabular.md:352
#: python-novice-gapminder/_episodes/11-lists.md:222
#: python-novice-gapminder/_episodes/11-lists.md:264
#: python-novice-gapminder/_episodes/13-conditionals.md:297
#: python-novice-gapminder/_episodes/13-conditionals.md:409
#: python-novice-gapminder/_episodes/16-writing-functions.md:217
msgid "> {: .output}"
msgstr "> {: .output}"

#: python-novice-gapminder/_episodes/03-types-conversion.md:294
msgid ""
">\n"
"> However in Python2 (and other languages), the `/` operator between two integer types perform a floor (`//`) division. To perform a float division, we have to convert one of the integers to float.\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 1)\n"
"> print('5 / 3:', 1 )\n"
"> print('5 / float(3):', 1.6666667 )\n"
"> print('float(5) / 3:', 1.6666667 )\n"
"> print('float(5 / 3):', 1.0 )\n"
"> print('5 % 3:', 2)\n"
"> ~~~\n"
">\n"
"> If `num_subjects` is the number of subjects taking part in a study,\n"
"> and `num_per_survey` is the number that can take part in a single survey,\n"
"> write an expression that calculates the number of surveys needed\n"
"> to reach everyone once.\n"
">\n"
"> > ## Solution\n"
"> > We want the minimum number of surveys that reaches everyone once, which is\n"
"> > the rounded up value of `num_subjects / num_per_survey`. This is \n"
"> > equivalent to performing an integer division with `//` and adding 1.\n"
"> > ~~~\n"
"> > num_subjects = 600\n"
"> > num_per_survey = 42\n"
"> > num_surveys = num_subjects // num_per_survey + 1\n"
"> >\n"
"> > print(num_subjects, 'subjects,', num_per_survey, 'per survey:', num_surveys)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 600 subjects, 42 per survey: 15\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Але у Python 2 (та інших мовах) оператор `/` для двох цілих чисел буде виконувати ціле (`//`) ділення. Щоб виконати ділення з плаваючою крапкою, треба перетворити одне з цілих чисел на дійсне.\n"
">\n"
"> ~~~\n"
"> print('5 // 3:', 1)\n"
"> print('5 / 3:', 1 )\n"
"> print('5 / float(3):', 1.6666667 )\n"
"> print('float(5) / 3:', 1.6666667 )\n"
"> print('float(5 / 3):', 1.0 )\n"
"> print('5 % 3:', 2)\n"
"> ~~~\n"
">\n"
"> Нехай `num_subjects` - це загальне число людей, які беруть участь у дослідженні,\n"
"> а `num_per_survey` - це число людей, які можуть взяти участь у одному опитуванні.\n"
"> Як обчислити кількість досліджень, необхідну,\n"
"> щоб опитати кожного один раз?\n"
">\n"
"> > ## Рішення\n"
"> > Нам треба знайти мінімальну кількість опитувань, необхідну, щоб опитати кожного один раз, тобто\n"
"> > округлити до більшого цілого числа `num_subjects / num_per_survey`. Це\n"
"> > еквивалентно виконанню цілого ділення за допомогою `//` з додаванням  1.\n"
"> > ~~~\n"
"> > num_subjects = 600\n"
"> > num_per_survey = 42\n"
"> > num_surveys = num_subjects // num_per_survey + 1\n"
"> >\n"
"> > print(num_subjects, 'subjects,', num_per_survey, 'per survey:', num_surveys)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 600 subjects, 42 per survey: 15\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:330
msgid "> ## Strings to Numbers"
msgstr "> ## Перетворення рядків у числа"

#: python-novice-gapminder/_episodes/03-types-conversion.md:331
msgid ""
">\n"
"> Where reasonable, `float()` will convert a string to a floating point number,\n"
"> and `int()` will convert a floating point number to an integer:\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"3.4\"))\n"
"> print(\"float to int:\", int(3.4))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> string to float: 3.4\n"
"> float to int: 3\n"
"> ~~~"
msgstr ""
">\n"
"> Коли доцільно, `float()` перетворить рядок на число з плаваючою крапкою,\n"
"> а `int()` перетворить число з плаваючою крапкою на ціле:\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"3.4\"))\n"
"> print(\"float to int:\", int(3.4))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> string to float: 3.4\n"
"> float to int: 3\n"
"> ~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:346
msgid ""
">\n"
"> If the conversion doesn't make sense, however, an error message will occur\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"Hello world!\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> ValueError                                Traceback (most recent call last)\n"
"> <ipython-input-5-df3b790bf0a2> in <module>()\n"
"> ----> 1 print(\"string to float:\", float(\"Hello world!\"))\n"
">\n"
"> ValueError: could not convert string to float: 'Hello world!'\n"
"> ~~~"
msgstr ""
">\n"
"> Однак якщо перетворення не має сенсу, то зʼявиться повідомлення про помилку\n"
">\n"
"> ~~~\n"
"> print(\"string to float:\", float(\"Hello world!\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> ValueError                                Traceback (most recent call last)\n"
"> <ipython-input-5-df3b790bf0a2> in <module>()\n"
"> ----> 1 print(\"string to float:\", float(\"Hello world!\"))\n"
">\n"
"> ValueError: could not convert string to float: 'Hello world!'\n"
"> ~~~"

# SC/DC Template label
#: python-novice-gapminder/_episodes/03-types-conversion.md:362
#: python-novice-gapminder/_episodes/06-libraries.md:248
#: python-novice-gapminder/_episodes/07-reading-tabular.md:71
#: python-novice-gapminder/_episodes/17-scope.md:108
msgid "> {: .error}"
msgstr "> {: .error}"

#: python-novice-gapminder/_episodes/03-types-conversion.md:363
msgid ""
">\n"
"> Given this information, what do you expect the following program to do?\n"
">\n"
"> What does it actually do?\n"
">\n"
"> Why do you think it does that?\n"
">\n"
"> ~~~\n"
"> print(\"fractional string to int:\", int(\"3.4\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> > What do you expect this program to do? It would not be so unreasonable to expect the Python 3 `int` command to\n"
"> > convert the string \"3.4\" to 3.4 and an additional type conversion to 3. After all, Python 3 performs a lot of other\n"
"> > magic - isn't that part of its charm?\n"
"> > \n"
"> > However, Python 3 throws an error. Why? To be consistent, possibly. If you ask Python to perform two consecutive\n"
"> > typecasts, you must convert it explicitly in code.\n"
"> >\n"
"> > ~~~\n"
"> > int(\"3.4\")\n"
"> > int(float(\"3.4\"))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > In [2]: int(\"3.4\")\n"
"> > ---------------------------------------------------------------------------\n"
"> > ValueError                                Traceback (most recent call last)\n"
"> > <ipython-input-2-ec6729dfccdc> in <module>()\n"
"> > ----> 1 int(\"3.4\")\n"
"> > ValueError: invalid literal for int() with base 10: '3.4'\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Беручи це до уваги, чого ви чекаєте від наступної програми?\n"
">\n"
"> Що вона робить насправді?\n"
">\n"
"> Як це пояснити?\n"
">\n"
"> ~~~\n"
"> print(\"fractional string to int:\", int(\"3.4\"))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Рішення\n"
"> > Чого можна очікувати від цієї програми? Чому б не очікувати, що у Python 3 команда `int` \n"
"> > перетворить рядок \"3.4\" на 3.4 та виконає додаткове перетворення у ціле число 3. Зрештою, Python 3 створює багато іншої\n"
"> > магії - хіба це не частина його чарівності?\n"
"> > \n"
"> > Однак Python 3 видає помилку. Чому? Можливо, щоб бути послідовним. Якщо ви просите Python виконати два послідовних\n"
"> > перетворення типу, ви маєте явним чином вказати це у коді програми.\n"
"> >\n"
"> > ~~~\n"
"> > int(\"3.4\")\n"
"> > int(float(\"3.4\"))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > In [2]: int(\"3.4\")\n"
"> > ---------------------------------------------------------------------------\n"
"> > ValueError                                Traceback (most recent call last)\n"
"> > <ipython-input-2-ec6729dfccdc> in <module>()\n"
"> > ----> 1 int(\"3.4\")\n"
"> > ValueError: invalid literal for int() with base 10: '3.4'\n"
"> > 3\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:401
msgid "> ## Arithmetic with Different Types"
msgstr "> ## Арифметичні дії з різними типами"

#: python-novice-gapminder/_episodes/03-types-conversion.md:402
msgid ""
">\n"
"> Which of the following will return the floating point number `2.0`?\n"
"> Note: there may be more than one right answer.\n"
">\n"
"> ~~~\n"
"> first = 1.0\n"
"> second = \"1\"\n"
"> third = \"1.1\"\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. `first + float(second)`\n"
"> 2. `float(second) + float(third)`\n"
"> 3. `first + int(third)`\n"
"> 4. `first + int(float(third))`\n"
"> 5. `int(first) + int(float(third))`\n"
"> 6. `2.0 * second`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Answer: 1 and 4"
msgstr ""
">\n"
"> Яка з наступних команд поверне дійсне число `2.0`?\n"
"> Примітка: це питання може мати декілька коректних відповідей.\n"
">\n"
"> ~~~\n"
"> first = 1.0\n"
"> second = \"1\"\n"
"> third = \"1.1\"\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. `first + float(second)`\n"
"> 2. `float(second) + float(third)`\n"
"> 3. `first + int(third)`\n"
"> 4. `first + int(float(third))`\n"
"> 5. `int(first) + int(float(third))`\n"
"> 6. `2.0 * second`\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Відповідь: 1 та 4"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/03-types-conversion.md:426
msgid "> ## Complex Numbers"
msgstr "> ## Комплексні числа"

#: python-novice-gapminder/_episodes/03-types-conversion.md:427
msgid ""
">\n"
"> Python provides complex numbers,\n"
"> which are written as `1.0+2.0j`.\n"
"> If `val` is an imaginary number,\n"
"> its real and imaginary parts can be accessed using *dot notation*\n"
"> as `val.real` and `val.imag`.\n"
">\n"
"> ~~~\n"
"> complex = 6 + 2j\n"
"> print(complex.real)\n"
"> print(complex.imag)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 6.0\n"
"> 2.0\n"
"> ~~~"
msgstr ""
">\n"
"> Python підтримує комплексні числа,\n"
"> які записуються як `1.0+2.0j`.\n"
"> Якщо `val` - комплексне число,\n"
"> то до його дійсної та уявної частин можна отримати доступ за допомогою *крапкової нотації*\n"
"> як `val.real` та `val.imag`.\n"
">\n"
"> ~~~\n"
"> complex = 6 + 2j\n"
"> print(complex.real)\n"
"> print(complex.imag)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 6.0\n"
"> 2.0\n"
"> ~~~"

#: python-novice-gapminder/_episodes/03-types-conversion.md:446
msgid ""
">\n"
">\n"
"> 1.  Why do you think Python uses `j` instead of `i` for the imaginary part?\n"
"> 2.  What do you expect `1+2j + 3` to produce?\n"
"> 3.  What do you expect `4j` to be?  What about `4 j` or `4 + j`?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > 1. Standard mathematics treatments typically use `i` to denote an imaginary number. However, from media reports it\n"
"> > was an early convention established from electrical engineering that now presents a technically expensive area to\n"
"> > change. [Stack Overflow provides additional explanation and\n"
"> > discussion.](http://stackoverflow.com/questions/24812444/why-are-complex-numbers-in-python-denoted-with-j-instead-of-i)\n"
"> > 2. `(4+2j)`\n"
"> > 3. `4j`, `Syntax Error: invalid syntax`, in this case _j_ is considered a variable and this depends on if _j_ is defined and if so, its assigned value"
msgstr ""
">\n"
">\n"
"> 1.  Чому, на вашу думку, Python використовує `j` замість `i` для уявної частини?\n"
"> 2.  Що ви очікуєте отримати від `1+2j + 3`?\n"
"> 3.  Що ви очікуєте від `4j`?  А що від `4 j` або `4 + j`?\n"
"> \n"
"> > ## Рішення\n"
"> >\n"
"> > 1. Стандартні математичні позначення зазвичай використовують `i` для позначення комплексного числа. Однак, судячи з різних джерел, це\n"
"> > було раннє позначення, яке використовувалось у електротехніці, та зараз було б дуже дорого його\n"
"> > змінити. [Stack Overflow містить додаткові пояснення та\n"
"> > обговорення.](http://stackoverflow.com/questions/24812444/why-are-complex-numbers-in-python-denoted-with-j-instead-of-i)\n"
"> > 2. `(4+2j)`\n"
"> > 3. `4j`, `Syntax Error: invalid syntax`, у цьому випадку _j_ вважається змінною, і це залежить від того, чи визначене _j_, і якщо так, то його присвоєне значення"

# Front Matter
#: python-novice-gapminder/_episodes/04-built-in.md:1
msgid ""
"---\n"
"title: \"Built-in Functions and Help\"\n"
"teaching: 15\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use built-in functions?\"\n"
"- \"How can I find out what they do?\"\n"
"- \"What kind of errors can occur in programs?\"\n"
"objectives:\n"
"- \"Explain the purpose of functions.\"\n"
"- \"Correctly call built-in Python functions.\"\n"
"- \"Correctly nest calls to built-in functions.\"\n"
"- \"Use help to display documentation for built-in functions.\"\n"
"- \"Correctly describe situations in which SyntaxError and NameError occur.\"\n"
"keypoints:\n"
"- \"Use comments to add documentation to programs.\"\n"
"- \"A function may take zero or more arguments.\"\n"
"- \"Commonly-used built-in functions include `max`, `min`, and `round`.\"\n"
"- \"Functions may only work for certain (combinations of) arguments.\"\n"
"- \"Functions may have default values for some arguments.\"\n"
"- \"Use the built-in function `help` to get help for a function.\"\n"
"- \"The Jupyter Notebook has two ways to get help.\"\n"
"- \"Every function returns something.\"\n"
"- \"Python reports a syntax error when it can't understand the source of a program.\"\n"
"- \"Python reports a runtime error when something goes wrong while a program is executing.\"\n"
"- \"Fix syntax errors by reading the source code, and runtime errors by tracing the program's execution.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Вбудовані функції та довідка\"\n"
"teaching: 15\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу використовувати вбудовані функції?\"\n"
"- \"Як я можу дізнатися, що вони роблять?\"\n"
"- \"Які помилки можуть виникати в програмах?\"\n"
"objectives:\n"
"- \"Пояснення призначення функцій.\"\n"
"- \"Коректний виклик вбудованих функцій Python.\"\n"
"- \"Коректний виклик вкладених вбудованих функцій.\"\n"
"- \"Використання довідки для перегляду документації про вбудовані функції.\"\n"
"- \"Правильний опис ситуації, в яких виникають SyntaxError і NameError\"\n"
"keypoints:\n"
"- \"Використовуйте коментарі при створенні документації програм.\"\n"
"- \"Функції можуть сприймати нуль або деяку кількість аргументів.\"\n"
"- \"Поширені вбудовані функції `max`, `min` та `round`.\"\n"
"- \"Функції можуть працювати лише з певними аргументами (комбінаціями аргументів).\"\n"
"- \"Функції можуть мати значення за замовчуванням для певних аргументів.\"\n"
"- \"Використання вбудованої функції `help` для отримання довідки про функції\".\n"
"- \"Два шляхи отримання допомоги у Jupyter Notebook.\"\n"
"- \"Кожна функція щось повертає.\"\n"
"- \"Python повідомляє про синтаксичну помилку, коли джерело програми не зрозуміле.\"\n"
"- \"Python повідомляє про помилку виконання, коли щось йде не так під час компілювання програми.\"\n"
"- \"Виправлення синтаксичних помилок у процесі читання вихідного коду, а помилок виконання - у процесі компіляції програми.\""

# header
#: python-novice-gapminder/_episodes/04-built-in.md:28
msgid "## Use comments to add documentation to programs."
msgstr "## Використовуйте коментарі при створенні документації програм."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:30
msgid ""
"~~~\n"
"# This sentence isn't executed by Python.\n"
"adjustment = 0.5   # Neither is this - anything after '#' is ignored.\n"
"~~~"
msgstr ""
"~~~\n"
"# Цю строку Python не виконує.\n"
"adjustment = 0.5   # Усе після '#' ігнорується.\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:36
msgid "## A function may take zero or more arguments."
msgstr "## Функції можуть сприймати нуль або деяку кількість аргументів."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:38
msgid ""
"*   We have seen some functions already --- now let's take a closer look."
msgstr "*   Ми вже бачили деякі функції --- тепер розглянемо їх ближче."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:39
msgid "*   An *argument* is a value passed into a function."
msgstr "*   *Аргумент* - це значення, яке передається у функцію."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:40
msgid "*   `len` takes exactly one."
msgstr "*   `len` потребує тільки один аргумент."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:41
msgid "*   `int`, `str`, and `float` create a new value from an existing one."
msgstr "*   `int`, `str` та `float` створюють нові значення з існуючих."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:42
msgid "*   `print` takes zero or more."
msgstr ""
"*   `print` в якості аргументу може використовувати як нульове, так і "
"ненульове значення."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:43
msgid "*   `print` with no arguments prints a blank line."
msgstr "*   `print` без аргументів повертає порожній рядок."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:44
msgid "    *   Must always use parentheses, even if they're empty,"
msgstr ""
"    *   Необхідно завжди використовувати дужки, навіть якщо вони порожні,"

#: python-novice-gapminder/_episodes/04-built-in.md:45
msgid "        so that Python knows a function is being called."
msgstr "        щоб Python розумів, що викликається функція."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:47
msgid ""
"~~~\n"
"print('before')\n"
"print()\n"
"print('after')\n"
"~~~"
msgstr ""
"~~~\n"
"print('before')\n"
"print()\n"
"print('after')\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:52
msgid ""
"{: .language-python}\n"
"~~~\n"
"before"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"before"

#: python-novice-gapminder/_episodes/04-built-in.md:56
msgid ""
"after\n"
"~~~"
msgstr ""
"after\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:60
msgid "## Commonly-used built-in functions include `max`, `min`, and `round`."
msgstr "## Поширені вбудовані функції `max`, `min` та `round`."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:62
msgid "*   Use `max` to find the largest value of one or more values."
msgstr ""
"*   Використовуйте `max`, щоб знайти найбільше з одного або декількох "
"значень."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:63
msgid "*   Use `min` to find the smallest."
msgstr "*   Використовуйте `min`, щоб знайти найменше значення."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:64
msgid "*   Both work on character strings as well as numbers."
msgstr ""
"*   Обидві функції в якості аргументу можуть використовувати як символьний "
"рядок, так і число."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:65
msgid "    *   \"Larger\" and \"smaller\" use (0-9, A-Z, a-z) to compare letters."
msgstr ""
"    *   Для порівняння літер використовуйте «Більші» та «менші» (0-9, A-Z, "
"a-z) літери."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:67
msgid ""
"~~~\n"
"print(max(1, 2, 3))\n"
"print(min('a', 'A', '0'))\n"
"~~~"
msgstr ""
"~~~\n"
"print(max(1, 2, 3))\n"
"print(min('a', 'A', '0'))\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:71
msgid ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3\n"
"0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:78
msgid "## Functions may only work for certain (combinations of) arguments."
msgstr ""
"## Функції можуть працювати лише з певними аргументами (комбінаціями "
"аргументів)."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:80
msgid "*   `max` and `min` must be given at least one argument."
msgstr "*   `max` та `min` повинні мати принаймні один аргумент."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:81
msgid "    *   \"Largest of the empty set\" is a meaningless question."
msgstr ""
"    *   \"Найбільше значення з порожньої множини\" - запит, який не має "
"сенсу."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:82
msgid "*   And they must be given things that can meaningfully be compared."
msgstr ""
"*   Крім того, аргументи функції повинні бути зіставні, щоб їх можна було "
"порівнювати."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:84
msgid ""
"~~~\n"
"print(max(1, 'a'))\n"
"~~~"
msgstr ""
"~~~\n"
"print(max(1, 'a'))\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:87
msgid ""
"{: .language-python}\n"
"~~~\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-52-3f049acf3762> in <module>\n"
"----> 1 print(max(1, 'a'))"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"TypeError                                 Traceback (most recent call last)\n"
"<ipython-input-52-3f049acf3762> in <module>\n"
"----> 1 print(max(1, 'a'))"

#: python-novice-gapminder/_episodes/04-built-in.md:93
msgid ""
"TypeError: '>' not supported between instances of 'str' and 'int'\n"
"~~~"
msgstr ""
"TypeError: '>' not supported between instances of 'str' and 'int'\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:97
msgid "## Functions may have default values for some arguments."
msgstr ""
"## Функції можуть мати значення за замовчуванням для певних аргументів."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:99
msgid "*   `round` will round off a floating-point number."
msgstr "*   `round` округляє число з плаваючою крапкою."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:100
msgid "*   By default, rounds to zero decimal places."
msgstr "*   За замовчуванням округлює до нуля знаків після крапки."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:102
msgid ""
"~~~\n"
"round(3.712)\n"
"~~~"
msgstr ""
"~~~\n"
"round(3.712)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:105
msgid ""
"{: .language-python}\n"
"~~~\n"
"4\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"4\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:111
msgid "*   We can specify the number of decimal places we want."
msgstr "*   Ми можемо вказати потрібну кількість десяткових знаків."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:113
msgid ""
"~~~\n"
"round(3.712, 1)\n"
"~~~"
msgstr ""
"~~~\n"
"round(3.712, 1)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:116
msgid ""
"{: .language-python}\n"
"~~~\n"
"3.7\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3.7\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:122
msgid "## Use the built-in function `help` to get help for a function."
msgstr ""
"## Використовуйте вбудовану функцію `help`, щоб отримати довідку щодо "
"функції."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:124
msgid "*   Every built-in function has online documentation."
msgstr "*   Кожна вбудована функція має онлайн-документацію."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:126
msgid ""
"~~~\n"
"help(round)\n"
"~~~"
msgstr ""
"~~~\n"
"help(round)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:129
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on built-in function round in module builtins:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Допомога щодо вбудованих функцій у модулі builtins:"

#: python-novice-gapminder/_episodes/04-built-in.md:133
msgid ""
"round(number, ndigits=None)\n"
"    Round a number to a given precision in decimal digits."
msgstr ""
"round(number, ndigits=None)\n"
"    Округлення числа до заданої точності в десяткових цифрах."

#: python-novice-gapminder/_episodes/04-built-in.md:136
msgid ""
"    The return value is an integer if ndigits is omitted or None.  Otherwise\n"
"    the return value has the same type as the number.  ndigits may be negative.\n"
"~~~"
msgstr ""
"    Повернене значення є цілим числом, якщо ndigits опущено - None.  Інакше\n"
"    значення, що повертається, має той самий тип, що й число. ndigits може бути від'ємним.\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/04-built-in.md:141
msgid ""
"## Python reports a syntax error when it can't understand the source of a "
"program."
msgstr ""
"## Python повідомляє про синтаксичну помилку, коли він не може зрозуміти "
"джерело програми."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:143
msgid "*   Won't even try to run the program if it can't be parsed."
msgstr ""
"*   Він навіть не намагатиметься запустити програму, якщо її неможливо "
"коректно прочитати."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:145
msgid ""
"~~~\n"
"# Forgot to close the quote marks around the string.\n"
"name = 'Feng\n"
"~~~"
msgstr ""
"~~~\n"
"# Рядок не взято в лапки.\n"
"name = 'Feng\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:149
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-56-f42768451d55>\", line 2\n"
"    name = 'Feng\n"
"                ^\n"
"SyntaxError: EOL while scanning string literal\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-56-f42768451d55>\", line 2\n"
"    name = 'Feng\n"
"                ^\n"
"SyntaxError: EOL while scanning string literal\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:158
msgid ""
"~~~\n"
"# An extra '=' in the assignment.\n"
"age = = 52\n"
"~~~"
msgstr ""
"~~~\n"
"# Додатковий знак '=' у присвоєнні.\n"
"age = = 52\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:162
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-57-ccc3df3cf902>\", line 2\n"
"    age = = 52\n"
"          ^\n"
"SyntaxError: invalid syntax\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"   File \"<ipython-input-57-ccc3df3cf902>\", line 2\n"
"    age = = 52\n"
"          ^\n"
"SyntaxError: invalid syntax\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:171
msgid "*   Look more closely at the error message:"
msgstr "*   Подивіться уважніше на повідомлення про помилку:"

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:173
msgid ""
"~~~\n"
"print(\"hello world\"\n"
"~~~"
msgstr ""
"~~~\n"
"print(\"hello world\"\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:176
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-6-d1cc229bf815>\", line 1\n"
"    print (\"hello world\"\n"
"                        ^\n"
"SyntaxError: unexpected EOF while parsing\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-6-d1cc229bf815>\", line 1\n"
"    print (\"hello world\"\n"
"                        ^\n"
"SyntaxError: unexpected EOF while parsing\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:185
msgid ""
"*   The message indicates a problem on first line of the input (\"line 1\")."
msgstr ""
"*   Повідомлення вказує на проблему в першому рядку введеної програми "
"(\"line 1\")."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:186
msgid ""
"    *   In this case the \"ipython-input\" section of the file name tells us"
" that"
msgstr ""
"    *   У цьому випадку розділ імені файлу «ipython-input» повідомляє нам, "
"що "

#: python-novice-gapminder/_episodes/04-built-in.md:187
msgid ""
"        we are working with input into IPython,\n"
"        the Python interpreter used by the Jupyter Notebook.\n"
"*   The `-6-` part of the filename indicates that\n"
"    the error occurred in cell 6 of our Notebook.\n"
"*   Next is the problematic line of code,\n"
"    indicating the problem with a `^` pointer."
msgstr ""
"        ми працюємо з введенням в IPython,\n"
"        з інтерпретатором Python, який використовується в Jupyter Notebook.\n"
"*   Частина `-6-` в назві файлу вказує на те, що\n"
"    помилка сталася в клітинці 6.\n"
"*   Далі йде проблемний рядок коду,\n"
"    на що вказує символ `^`."

# header
#: python-novice-gapminder/_episodes/04-built-in.md:194
msgid ""
"## <a name='runtime-error'></a> Python reports a runtime error when "
"something goes wrong while a program is executing."
msgstr ""
"## <a name='runtime-error'></a> Python повідомляє про помилку \"runtime "
"error\", коли щось йде не так під час виконання програми."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:196
msgid ""
"~~~\n"
"age = 53\n"
"remaining = 100 - aege # mis-spelled 'age'\n"
"~~~"
msgstr ""
"~~~\n"
"age = 53\n"
"remaining = 100 - aege # неправильно написано 'age'\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:200
msgid ""
"{: .language-python}\n"
"~~~\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-59-1214fb6c55fc> in <module>\n"
"      1 age = 53\n"
"----> 2 remaining = 100 - aege # mis-spelled 'age'"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"NameError                                 Traceback (most recent call last)\n"
"<ipython-input-59-1214fb6c55fc> в <module>\n"
"      1 age = 53\n"
"----> 2 remaining = 100 - aege # неправильно написано 'age'"

#: python-novice-gapminder/_episodes/04-built-in.md:207
msgid ""
"NameError: name 'aege' is not defined\n"
"~~~"
msgstr ""
"NameError: name 'aege' is not defined\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:211
msgid ""
"*   Fix syntax errors by reading the source and runtime errors by tracing "
"execution."
msgstr ""
"*   Якщо перечитаєте джерело, можна виправити синтаксичні помилки, а якщо "
"відстежите компілювання - помилки виконання."

# header
#: python-novice-gapminder/_episodes/04-built-in.md:213
msgid "## The Jupyter Notebook has two ways to get help."
msgstr "## Два шляхи отримання допомоги у Jupyter Notebook."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:215
msgid "*   Place the cursor anywhere in the function invocation "
msgstr "*   Розмістіть курсор у будь-якому місці виклику функції"

#: python-novice-gapminder/_episodes/04-built-in.md:216
msgid ""
"    (i.e., the function name or its parameters),\n"
"    hold down `shift`,\n"
"    and press `tab`.\n"
"*   Or type a function name with a question mark after it."
msgstr ""
"    (тобто в імені функції або її параметрах),\n"
"    утримуйте `shift`\n"
"    та натисніть `tab`.\n"
"*   Або введіть назву функції зі знаком питання після неї."

# header
#: python-novice-gapminder/_episodes/04-built-in.md:221
msgid "## Every function returns something."
msgstr "## Кожна функція щось повертає."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:223
msgid "*   Every function call produces some result."
msgstr "*   Кожен виклик функції дає певний результат."

# unordered list
#: python-novice-gapminder/_episodes/04-built-in.md:224
msgid "*   If the function doesn't have a useful result to return,"
msgstr "*   Якщо функція не повертає корисного результату,"

#: python-novice-gapminder/_episodes/04-built-in.md:225
msgid "    it usually returns the special value `None`."
msgstr "    зазвичай вона повертає спеціальне значення `None`."

# code block
#: python-novice-gapminder/_episodes/04-built-in.md:227
msgid ""
"~~~\n"
"result = print('example')\n"
"print('result of print is', result)\n"
"~~~"
msgstr ""
"~~~\n"
"result = print('example')\n"
"print('result of print is', result)\n"
"~~~"

#: python-novice-gapminder/_episodes/04-built-in.md:231
msgid ""
"{: .language-python}\n"
"~~~\n"
"example\n"
"result of print is None\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"example\n"
"result of print is None\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:238
msgid "> ## What Happens When"
msgstr "> ## Що відбувається?"

#: python-novice-gapminder/_episodes/04-built-in.md:239
msgid ""
">\n"
"> 1. Explain in simple terms the order of operations in the following program:\n"
">    when does the addition happen, when does the subtraction happen,\n"
">    when is each function called, etc.\n"
"> 2. What is the final value of `radiance`?\n"
">\n"
"> ~~~\n"
"> radiance = 1.0\n"
"> radiance = max(2.1, 2.0 + min(radiance, 1.1 * radiance - 0.5))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > 1.\n"
"> >    1. `1.1 * radiance = 1.1`\n"
"> >    2. `1.1 - 0.5 = 0.6`\n"
"> >    3. `min(radiance, 0.6) = 0.6`\n"
"> >    4. `2.0 + 0.6 = 2.6`\n"
"> >    5. `max(2.1, 2.6) = 2.6`\n"
"> > 2. At the end, `radiance = 2.6`"
msgstr ""
">\n"
"> 1. Поясніть простими словами порядок операцій у наступній програмі:\n"
">    коли відбувається додавання, коли відбувається віднімання,\n"
">    коли викликається кожна функція тощо.\n"
"> 2. Яке кінцеве значення величини `radiance`?\n"
">\n"
"> ~~~\n"
"> radiance = 1.0\n"
"> radiance = max(2.1, 2.0 + min(radiance, 1.1 * radiance - 0.5))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > 1.\n"
"> >    1. `1.1 * radiance = 1.1`\n"
"> >    2. `1.1 - 0.5 = 0.6`\n"
"> >    3. `min(radiance, 0.6) = 0.6`\n"
"> >    4. `2.0 + 0.6 = 2.6`\n"
"> >    5. `max(2.1, 2.6) = 2.6`\n"
"> > 2. В підсумку, `radiance = 2.6`"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:261
msgid "> ## Spot the Difference"
msgstr "> ## Знайдіть відмінності"

#: python-novice-gapminder/_episodes/04-built-in.md:262
msgid ""
">\n"
"> 1. Predict what each of the `print` statements in the program below will print.\n"
"> 2. Does `max(len(rich), poor)` run or produce an error message?\n"
">    If it runs, does its result make any sense?\n"
">\n"
"> ~~~\n"
"> easy_string = \"abc\"\n"
"> print(max(easy_string))\n"
"> rich = \"gold\"\n"
"> poor = \"tin\"\n"
"> print(max(rich, poor))\n"
"> print(max(len(rich), len(poor)))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > print(max(easy_string))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > c\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(rich, poor))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > tin\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(len(rich), len(poor)))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 4\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > `max(len(rich), poor)` throws a TypeError. This turns into `max(4, 'tin')` and \n"
"> > as we discussed earlier a string and integer cannot meaningfully be compared.\n"
"> > ~~~\n"
"> > TypeError                                 Traceback (most recent call last)\n"
"> > <ipython-input-65-bc82ad05177a> in <module>\n"
"> > ----> 1 max(len(rich), poor)\n"
"> > \n"
"> > TypeError: '>' not supported between instances of 'str' and 'int'\n"
"> > ~~~\n"
"> > {: .error }"
msgstr ""
">\n"
"> 1. Подумайте, що виведе кожен з операторів `print` у наведеній нижче програмі.\n"
"> 2. Функція `max(len(rich), poor)` поверне відповідь або повідомлення про помилку?\n"
">    Якщо поверне відповідь, чи буде вона мати сенс?\n"
">\n"
"> ~~~\n"
"> easy_string = \"abc\"\n"
"> print(max(easy_string))\n"
"> rich = \"gold\"\n"
"> poor = \"tin\"\n"
"> print(max(rich, poor))\n"
"> print(max(len(rich), len(poor)))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > print(max(easy_string))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > c\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(rich, poor))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > tin\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > print(max(len(rich), len(poor)))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > 4\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > `max(len(rich), poor)` поверне TypeError. Це станеться на `max(4, 'tin')` і, \n"
"> > як ми говорили раніше, порівнювати рядок і ціле число не можна.\n"
"> > ~~~\n"
"> > TypeError                                 Traceback (most recent call last)\n"
"> > <ipython-input-65-bc82ad05177a> в <module>\n"
"> > ----> 1 max(len(rich), poor)\n"
"> > \n"
"> > TypeError: '>' not supported between instances of 'str' and 'int'\n"
"> > ~~~\n"
"> > {: .error }"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:314
msgid "> ## Why Not?"
msgstr "> ## Чому ні?"

#: python-novice-gapminder/_episodes/04-built-in.md:315
msgid ""
">\n"
"> Why don't `max` and `min` return `None` when they are given no arguments?\n"
">\n"
"> > ## Solution\n"
"> > `max` and `min` return TypeErrors in this case because the correct number of parameters\n"
"> > was not supplied. If it just returned `None`, the error would be much harder to trace as it\n"
"> > would likely be stored into a variable and used later in the program, only to likely throw\n"
"> > a runtime error."
msgstr ""
">\n"
"> Чому функції `max` і `min` не повертають `None`, якщо їм не надано аргументів?\n"
">\n"
"> > ## Рішення\n"
"> > `max` і `min` у цьому випадку повертають TypeErrors, оскільки правильна кількість параметрів\n"
"> > не була надана. Якби функції повернули тільки `None`, таку помилку було б набагато важче відстежити.\n"
"> > Швидше за все, значення `None` буде збережено у змінній і використано пізніше в програмі лише для того, щоб повернути\n"
"> > помилку виконання."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/04-built-in.md:326
msgid "> ## Last Character of a String"
msgstr "> ## Останній символ рядка"

#: python-novice-gapminder/_episodes/04-built-in.md:327
msgid ""
">\n"
"> If Python starts counting from zero,\n"
"> and `len` returns the number of characters in a string,\n"
"> what index expression will get the last character in the string `name`?\n"
"> (Note: we will see a simpler way to do this in a later episode.)\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > `name[len(name) - 1]`"
msgstr ""
">\n"
"> Якщо Python починає рахувати з нуля,\n"
"> та `len` повертає кількість символів у рядку,\n"
"> то який індекс отримає останній символ у рядку `name`?\n"
"> (Примітка: ми побачимо простіший спосіб зробити це в наступному епізоді.)\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > `name[len(name) - 1]`"

# Front Matter
#: python-novice-gapminder/_episodes/05-coffee.md:1
msgid ""
"---\n"
"layout: break\n"
"title: \"Morning Coffee\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"
msgstr ""
"---\n"
"layout: break\n"
"title: \"Ранкова кава\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"

# header
#: python-novice-gapminder/_episodes/05-coffee.md:8
#: python-novice-gapminder/_episodes/15-coffee.md:8
msgid "# Reflection exercise"
msgstr "# Вправа для рефлексії"

#: python-novice-gapminder/_episodes/05-coffee.md:10
msgid ""
"Over coffee, reflect on and discuss the following:\n"
"* What are the different kinds of errors Python will report?\n"
"* Did the code always produce the results you expected? If not, why?\n"
"* Is there something we can do to prevent errors when we write code?"
msgstr ""
"За кавою поміркуйте та обговоріть наступне:\n"
"* Про які різні типи помилок повідомлятиме Python?\n"
"* Чи завжди код давав очікувані результати? Якщо ні, то чому?\n"
"* Чи можна щось зробити, щоб запобігти помилкам під час написання коду?"

# Front Matter
#: python-novice-gapminder/_episodes/06-libraries.md:1
msgid ""
"---\n"
"title: \"Libraries\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use software that other people have written?\"\n"
"- \"How can I find out what that software does?\"\n"
"objectives:\n"
"- \"Explain what software libraries are and why programmers create and use them.\"\n"
"- \"Write programs that import and use libraries from Python's standard library.\"\n"
"- \"Find and read documentation for standard libraries interactively (in the interpreter) and online.\"\n"
"keypoints:\n"
"- \"Most of the power of a programming language is in its libraries.\"\n"
"- \"A program must import a library module in order to use it.\"\n"
"- \"Use `help` to learn about the contents of a library module.\"\n"
"- \"Import specific items from a library to shorten programs.\"\n"
"- \"Create an alias for a library when importing it to shorten programs.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Бібліотеки\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу використовувати програмне забезпечення, яке написали інші люди?\"\n"
"- \"Як я можу дізнатися, що робить це програмне забезпечення?\"\n"
"цілі:\n"
"- \"Пояснити, що таке програмні бібліотеки і для чого їх створюють і використовують програмісти.\"\n"
"- \"Написати програми, які імпортують і використовують бібліотеки зі стандартної бібліотеки Python.\"\n"
"- \"Знайти та прочитати документацію для стандартних бібліотек в інтерактивному режимі (в інтерпретаторі) та онлайн\"\n"
"keypoints:\n"
"- \"Більша частина потужності мови програмування полягає в її бібліотеках.\"\n"
"- \"Програма має імпортувати бібліотечний модуль, щоб використовувати його.\"\n"
"- \"Використовуйте `help` , щоб дізнатися про вміст бібліотечного модуля.\"\n"
"- \"Імпортуйте певні елементи із бібліотеки для скорочення програм.\"\n"
"- \"Створіть псевдонім для бібліотеки під час її імпорту для скорочення програм.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:19
msgid "## Most of the power of a programming language is in its libraries."
msgstr ""
"## Більша частина потужності мови програмування полягає в її бібліотеках."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:21
msgid ""
"*   A *library* is a collection of files (called *modules*) that contains"
msgstr ""
"*   *Бібліотека* — це набір файлів (так званих *модулів*), які містять"

#: python-novice-gapminder/_episodes/06-libraries.md:22
msgid ""
"    functions for use by other programs.\n"
"    *   May also contain data values (e.g., numerical constants) and other things.\n"
"    *   Library's contents are supposed to be related, but there's no way to enforce that.\n"
"*   The Python [standard library][stdlib] is an extensive suite of modules that comes\n"
"    with Python itself.\n"
"*   Many additional libraries are available from [PyPI][pypi] (the Python Package Index).\n"
"*   We will see later how to write new libraries."
msgstr ""
"бібліотека    функції для використання іншими програмами.\n"
"    *   Може також містити значення даних (наприклад, числові константи) та інші дані.\n"
"    *   Передбачається, що зміст бібліотеки певним чином пов'язаний, але немає засобів це проконтролювати.\n"
"*    [Standard library][stdlib]  Python — це великий набір модулів, що постачається\n"
"з самим Python.\n"
"*   Багато додаткових бібліотек доступні в [PyPI][pypi] (the Python Package Index).\n"
"*   Пізніше ми побачимо, як писати нові бібліотеки."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:30
msgid "> ## Libraries and modules"
msgstr "> ## Бібліотеки та модулі"

#: python-novice-gapminder/_episodes/06-libraries.md:31
msgid ""
">\n"
"> A library is a collection of modules, but the terms are often used\n"
"> interchangeably, especially since many libraries only consist of a single\n"
"> module, so don't worry if you mix them."
msgstr ""
">\n"
"> Бібліотека — це набір модулів, але ці терміни часто вважаються \n"
"> взаємозамінними, особливо тому, що багато бібліотек складаються лише з одного\n"
"> модуля, тому не хвилюйтеся, якщо ви їх плутаєте."

# header
#: python-novice-gapminder/_episodes/06-libraries.md:38
msgid "## A program must import a library module before using it."
msgstr ""
"## Програма повинна імпортувати бібліотечний модуль перед його "
"використанням."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:40
msgid "*   Use `import` to load a library module into a program's memory."
msgstr ""
"*   Використовуйте `import`, щоб завантажити модуль бібліотеки в пам'ять "
"програми."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:41
msgid "*   Then refer to things from the module as `module_name.thing_name`."
msgstr ""
"*   Потім посилайтеся на функції модуля як `module_name.function_name`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:42
msgid "    *   Python uses `.` to mean \"part of\"."
msgstr ""
"    *   У Python синтакс `a.b` означає що `a` містить `b`, або іншими "
"словами,  `b`  є частиною `a`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:43
msgid "*   Using `math`, one of the modules in the standard library:"
msgstr ""
"*   Використовуючи `math`, один із модулів у стандартній бібліотеці, маємо: "

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:45
msgid ""
"~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:51
msgid ""
"{: .language-python}\n"
"~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:58
msgid "*   Have to refer to each item with the module's name."
msgstr "*   Потрібно посилатися на кожен елемент разом із назвою модуля."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:59
msgid "    *   `math.cos(pi)` won't work: the reference to `pi`"
msgstr "    *   `math.cos(pi)` не буде працювати: посилання на `pi`"

#: python-novice-gapminder/_episodes/06-libraries.md:60
msgid "        doesn't somehow \"inherit\" the function's reference to `math`."
msgstr "        жодним чином не \"успадковує\" посилання функції на `math`."

# header
#: python-novice-gapminder/_episodes/06-libraries.md:62
msgid "## Use `help` to learn about the contents of a library module."
msgstr ""
"## Використовуйте `help`, щоб дізнатися про вміст бібліотечного модуля. "

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:64
msgid "*   Works just like help for a function."
msgstr "*   Працює так само, як довідка для функції."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:66
msgid ""
"~~~\n"
"help(math)\n"
"~~~"
msgstr ""
"~~~\n"
"help(math)\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:69
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"

#: python-novice-gapminder/_episodes/06-libraries.md:73
msgid ""
"NAME\n"
"    math"
msgstr ""
"NAME\n"
"    math"

#: python-novice-gapminder/_episodes/06-libraries.md:76
msgid ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"
msgstr ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"

#: python-novice-gapminder/_episodes/06-libraries.md:79
msgid ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."
msgstr ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."

#: python-novice-gapminder/_episodes/06-libraries.md:85
msgid ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."
msgstr ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."

#: python-novice-gapminder/_episodes/06-libraries.md:89
msgid ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"
msgstr ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:96
msgid "## Import specific items from a library module to shorten programs."
msgstr ""
"## Імпортуйте певні елементи з бібліотечного модуля, щоб скоротити програми."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:98
msgid ""
"*   Use `from ... import ...` to load only specific items from a library "
"module."
msgstr ""
"*   Використовуйте `from ... import ...`, щоб завантажити лише певні "
"елементи з бібліотечного модуля."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:99
msgid "*   Then refer to them directly without library name as prefix."
msgstr ""
"*   Потім звертайтеся до них безпосередньо без назви бібліотеки як префікса."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:101
msgid ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"
msgstr ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:122
msgid ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) is -1.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:112
msgid ""
"## Create an alias for a library module when importing it to shorten "
"programs."
msgstr ""
"## Створіть псевдонім для бібліотечного модуля під час його імпорту для "
"скорочення програм."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:114
msgid ""
"*   Use `import ... as ...` to give a library a short *alias* while "
"importing it."
msgstr ""
"*   Використовуйте `import ... as ...`, щоб надати бібліотеці короткий "
"*псевдонім* під час її імпорту."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:115
msgid "*   Then refer to items in the library using that shortened name."
msgstr ""
"*   Потім звертайтеся до елементів у бібліотеці, використовуючи цю скорочену"
" назву."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:117
msgid ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:128
msgid ""
"*   Commonly used for libraries that are frequently used or have long names."
msgstr ""
"*   Зазвичай цей прийом використовується для бібліотек, які часто "
"використовуються або мають довгі імена."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:129
msgid "    *   E.g., `matplotlib` plotting library is often aliased as `mpl`."
msgstr ""
"    *   Наприклад, бібліотека для побудови графіків `matplotlib` часто має "
"псевдонім `mpl`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:130
msgid "*   But can make programs harder to understand,"
msgstr "*   Але це може ускладнювати розуміння програм,"

#: python-novice-gapminder/_episodes/06-libraries.md:131
msgid "    since readers must learn your program's aliases."
msgstr ""
"    оскільки у цьому разі читачі повинні знати псевдоніми вашої програми."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:133
msgid "> ## Exploring the Math Module"
msgstr "> ## Знайомство з модулем math"

#: python-novice-gapminder/_episodes/06-libraries.md:134
msgid ""
">\n"
"> 1. What function from the `math` module can you use to calculate a square root\n"
">    *without* using `sqrt`?\n"
"> 2. Since the library contains this function, why does `sqrt` exist?\n"
">\n"
"> > ## Solution\n"
"> > 1. Using `help(math)` we see that we've got `pow(x,y)` in addition to `sqrt(x)`,\n"
"> >    so we could use `pow(x, 0.5)` to find a square root.\n"
"> > 2. The `sqrt(x)` function is arguably more readable than `pow(x, 0.5)` when\n"
"> >    implementing equations. Readability is a cornerstone of good programming, so it\n"
"> >    makes sense to provide a special function for this specific common case.\n"
"> >\n"
"> >    Also, the design of Python's `math` library has its origin in the C standard,\n"
"> >    which includes both `sqrt(x)` and `pow(x,y)`, so a little bit of the history\n"
"> >    of programming is showing in Python's function names."
msgstr ""
">\n"
"> 1. За допомогою якої функції з модуля `math` можна обчислити квадратний корінь\n"
">    *без* використання `sqrt`?\n"
"> 2. Оскільки бібліотека містить цю функцію, чому існує `sqrt`?\n"
">\n"
"> > ## Рішення\n"
"> > 1. Використовуючи `help(math)` ми бачимо, що у нас є `pow(x,y)` на додаток до `sqrt(x)`,\n"
"> >    отже ми можемо застосувати `pow(x, 0.5)` для визначення квадратного кореня.\n"
"> > 2. Функція `sqrt(x)`, можливо, легша для читання, ніж `pow(x, 0.5)`, коли\n"
"> >    реалізуються рівняння. Читабельність є наріжним каменем хорошого стилю програмування, отже\n"
"> >    має сенс надати спеціальну функцію для цього конкретного звичайного випадку.\n"
"> >\n"
"> >    Крім того, дизайн бібліотеки `math` Python бере свій початок у стандарті C,\n"
"> >    який включає як `sqrt(x)`, так і `pow(x,y)`, тож трохи історії\n"
"> >    програмування відображається в назвах функцій Python."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:152
msgid "> ## Locating the Right Module"
msgstr "> ## Пошук правильного модуля"

#: python-novice-gapminder/_episodes/06-libraries.md:153
msgid ""
">\n"
"> You want to select a random character from a string:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Which [standard library][stdlib] module could help you?\n"
"> 2. Which function would you select from that module? Are there alternatives?\n"
"> 3. Try to write a program that uses the function.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The [random module][randommod] seems like it could help you.\n"
"> >\n"
"> > The string has 11 characters, each having a positional index from 0 to 10.\n"
"> > You could use `random.randrange` function (or the alias `random.randint`\n"
"> > if you find that easier to remember) to get a random integer between 0 and\n"
"> > 10, and then pick out the character at that position:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > or more compactly:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Perhaps you found the `random.sample` function? It allows for slightly\n"
"> > less typing:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Note that this function returns a list of values. We will learn about\n"
"> > lists in [episode 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > There's also other functions you could use, but with more convoluted\n"
"> > code as a result."
msgstr ""
">\n"
"> Ви хочете вибрати випадковий символ із рядка:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Який модуль зі [standard library][stdlib]  може допомогти?\n"
"> 2. Яку функцію ви б вибрали з цього модуля? Чи є альтернативи?\n"
"> 3. Спробуйте написати програму, яка використовує функцію.\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Здається, модуль [random][randommod] може допомогти.\n"
"> >\n"
"> > Рядок містить 11 символів, кожен з яких має позиційний індекс від 0 до 10.\n"
"> > Ви можете використати функцію `random.randrange`  (або псевдонім `random.randint`\n"
"> > якщо вам легше запам’ятати), щоб отримати випадкове ціле число від 0 до\n"
"> > 10, а потім вибрати символ у цій позиції:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > або більш компактно:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Можливо, ви знайшли функцію `random.sample`? Це дозволяє набирати\n"
"> > трохи менше коду:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Зауважте, що ця функція повертає список значень. Ми дізнаємось про\n"
"> > списки в [episode 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > Існують також інші функції, які ви можете використовувати, але з більш складним\n"
"> > результуючим кодом."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:210
msgid "> ## Jigsaw Puzzle (Parson's Problem) Programming Example"
msgstr "> ## Головоломка (задача Парсона). Приклад програмування"

#: python-novice-gapminder/_episodes/06-libraries.md:211
msgid ""
">\n"
"> Rearrange the following statements so that a random\n"
"> DNA base is printed and its index in the string.  Not all statements may be needed.  Feel free to use/add\n"
"> intermediate variables.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Упорядкуйте наступні оператори таким чином, щоб друкувалась\n"
"> випадкова ДНК база  та її індекс в рядку.  Не всі оператори можуть бути потрібні.  За необхідності додавайте\n"
"> проміжні змінні.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:240
msgid "> ## When Is Help Available?"
msgstr "> ## Коли доступна допомога?"

#: python-novice-gapminder/_episodes/06-libraries.md:241
msgid ""
">\n"
"> When a colleague of yours types `help(math)`,\n"
"> Python reports an error:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"
msgstr ""
">\n"
"> Коли ваш колега набирає `help(math)`,\n"
"> Python повідомляє про помилку:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:249
msgid ""
">\n"
"> What has your colleague forgotten to do?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Importing the math module (`import math`)"
msgstr ""
">\n"
"> Що забув зробити ваш колега?\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Імпортувати модуль math (`import math`)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:258
msgid "> ## Importing With Aliases"
msgstr "> ## Імпорт із псевдонімами"

#: python-novice-gapminder/_episodes/06-libraries.md:259
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Rewrite the program so that it uses `import` *without* `as`.\n"
"> 3. Which form do you find easier to read?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > can be written as\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Since you just wrote the code and are familiar with it, you might actually\n"
"> > find the first version easier to read. But when trying to read a huge piece\n"
"> > of code written by someone else, or when getting back to your own huge piece\n"
"> > of code after several months, non-abbreviated names are often easier, except\n"
"> > where there are clear abbreviation conventions."
msgstr ""
">\n"
"> 1. Заповніть порожні поля так, щоб програма, наведена нижче, надрукувала `90.0`.\n"
"> 2. Перепишіть програму так, щоб вона використовувала `import` *без* `as`.\n"
"> 3. Яку форму вам легше читати?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > можна записати як\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Оскільки ви щойно написали код і знайомі з ним, ви можете насправді\n"
"> > вважати, що першу версію легше читати. Але при спробі прочитати величезну купу\n"
"> > коду, написаного кимось іншим, або коли повертаєтесь до свого власного величезного фрагменту\n"
"> > коду через кілька місяців, нескорочені імена часто легші, за винятком\n"
"> > випадку, де є чіткі умовні позначення скорочень."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:297
msgid "> ## There Are Many Ways To Import Libraries!"
msgstr "> ## Існує багато способів імпорту бібліотек!"

#: python-novice-gapminder/_episodes/06-libraries.md:298
msgid ""
">\n"
"> Match the following print statements with the appropriate library calls.\n"
">\n"
"> Print commands:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Library calls:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Library calls 1 and 4. In order to directly refer to `sin` and `pi` without\n"
"> >    the library name as prefix, you need to use the `from ... import ...`\n"
"> >    statement. Whereas library call 1 specifically imports the two functions\n"
"> >    `sin` and `pi`, library call 4 imports all functions in the `math` module.\n"
"> > 2. Library call 3. Here `sin` and `pi` are referred to with a shortened library\n"
"> >    name `m` instead of `math`. Library call 3 does exactly that using the\n"
"> >    `import ... as ...` syntax - it creates an alias for `math` in the form of\n"
"> >    the shortened name `m`.\n"
"> > 3. Library call 2. Here `sin` and `pi` are referred to with the regular library\n"
"> >    name `math`, so the regular `import ...` call suffices."
msgstr ""
">\n"
"> Зіставте наступні оператори друку з відповідними викликами бібліотеки.\n"
">\n"
"> Оператори друку:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Виклики бібліотеки:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1. Виклики бібліотеки 1 та 4. Для прямого посилання на `sin` та `pi` без\n"
"> >    назви бібліотеки як префікса, вам потрібно використовувати `from ... import ...`\n"
"> >    оператор. Виклик бібліотеки 1 спеціально імпортує дві функції\n"
"> >    `sin` та `pi`, тоді як виклик бібліотеки 4 імпортує всі functions з модуля `math`.\n"
"> > 2. Виклик бібліотеки 3. Тут `sin` та `pi` посилаються на   скорочену назву бібліотеки\n"
"> >    `m` замість `math`. Виклик бібліотеки 3 робить саме це за допомогою\n"
"> >  синтаксису  `import ... as ...` , що створює псевдонім для `math` в формі\n"
"> >    скороченої назви  `m`.\n"
"> > 3. Виклик бібліотеки 2. Тут `sin` та `pi`  посилаються на звичайну бібліотеку\n"
"> >   `math`, тому буде достатньо звичайного виклику `import ...` ."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:329
msgid "> ## Importing Specific Items"
msgstr "> ## Імпорт певних елементів"

#: python-novice-gapminder/_episodes/06-libraries.md:330
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Do you find this version easier to read than preceding ones?\n"
"> 3. Why *wouldn't* programmers always use this form of `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Most likely you find this version easier to read since it's less dense.\n"
"> > The main reason not to use this form of import is to avoid name clashes.\n"
"> > For instance, you wouldn't import `degrees` this way if you also wanted to\n"
"> > use the name `degrees` for a variable or function of your own. Or if you\n"
"> > were to also import a function named `degrees` from another library."
msgstr ""
">\n"
"> 1. Заповніть порожні поля так, щоб програма, наведена нижче, вивела `90.0`.\n"
"> 2. Чи вважаєте ви цю версію легшою для читання, ніж попередні?\n"
"> 3. Чому *не* програмісти завжди використовують цю форму `імпорту`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Швидше за все, вам легше читати цю версію, оскільки вона менш щільна.\n"
"> > Основною причиною не використовувати цю форму імпорту є уникнення зіткнень імен.\n"
"> > Наприклад, ви б не імпортували `degrees` таким чином, якби також хотіли\n"
"> > використовувати назву `degrees` для власної змінної або функції. Або якщо вам\n"
"> > необхідно також імпортувати функцію з назвою `degrees` з іншої бібліотеки."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:359
#: python-novice-gapminder/_episodes/17-scope.md:76
msgid "> ## Reading Error Messages"
msgstr "> ## Читання повідомлень про помилки"

#: python-novice-gapminder/_episodes/06-libraries.md:360
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are without running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. The logarithm of `x` is only defined for `x > 0`, so 0 is outside the\n"
"> >    domain of the function.\n"
"> > 2. You get an error of type \"ValueError\", indicating that the function\n"
"> >    received an inappropriate argument value. The additional message\n"
"> >    \"math domain error\" makes it clearer what the problem is."
msgstr ""
">\n"
"> 1. Прочитайте наведений нижче код і спробуйте визначити помилки перед його виконанням.\n"
"> 2. Запустіть код і прочитайте повідомлення про помилку. Який тип цієї помилки?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1. Логарифм `x` визначено лише для `x > 0`, тому 0 знаходиться за межами\n"
"> >    області визначення функції.\n"
"> > 2. Ви отримуєте повідомлення про помилку типу \"ValueError\", яке вказує на те, що функція\n"
"> >    отримала невідповідне значення аргументу. Додаткове повідомлення\n"
"> >    \"math domain error\" пояснює, в чому полягає проблема."

#: python-novice-gapminder/_episodes/06-libraries.md:380
msgid ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
msgstr ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"

# Front Matter
#: python-novice-gapminder/_episodes/07-reading-tabular.md:1
msgid ""
"---\n"
"title: \"Reading Tabular Data into DataFrames\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I read tabular data?\"\n"
"objectives:\n"
"- \"Import the Pandas library.\"\n"
"- \"Use Pandas to load a simple CSV data set.\"\n"
"- \"Get some basic information about a Pandas DataFrame.\"\n"
"keypoints:\n"
"- \"Use the Pandas library to get basic statistics out of tabular data.\"\n"
"- \"Use `index_col` to specify that a column's values should be used as row headings.\"\n"
"- \"Use `DataFrame.info` to find out more about a dataframe.\"\n"
"- \"The `DataFrame.columns` variable stores information about the dataframe's columns.\"\n"
"- \"Use `DataFrame.T` to transpose a dataframe.\"\n"
"- \"Use `DataFrame.describe` to get summary statistics about data.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Читання табличних даних у DataFrames\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу читати табличні дані?\"\n"
"objectives:\n"
"- \"Імпортувати бібліотеку Pandas\"\n"
"- \"Використати Pandas для завантаження простого набору даних CSV.\"\n"
"- \"Отримати базову інформацію про Pandas DataFrame.\"\n"
"keypoints:\n"
"- \"Використовуйте бібліотеку Pandas, щоб отримати базову статистику з табличних даних.\"\n"
"- \"Використовуйте `index_col`, щоб вказати, що значення стовпця мають використовуватися як заголовки рядків.\"\n"
"- \"Використовуйте `DataFrame.info`, щоб дізнатися більше про фрейм даних.\"\n"
"- \"Змінна `DataFrame.columns` зберігає інформацію про стовпці фрейму даних.\"\n"
"- \"Використовуйте `DataFrame.T`, щоб транспортувати фрейм даних.\"\n"
"- \"Використовуйте `DataFrame.describe`, щоб отримати підсумкову статистику даних.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:19
msgid "## Use the Pandas library to do statistics on tabular data."
msgstr ""
"## Використовуйте бібліотеку Pandas, щоб отримати статистику з табличних "
"даних."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:21
msgid ""
"*   Pandas is a widely-used Python library for statistics, particularly on "
"tabular data."
msgstr ""
"*   Pandas — це бібліотека Python, яка  широко використовується для "
"статистики, зокрема на основі табличних даних."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:22
msgid "*   Borrows many features from R's dataframes."
msgstr "*   Ця бібліотека запозичує багато функцій з фреймів даних мови R."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:23
msgid "    *   A 2-dimensional table whose columns have names"
msgstr "    *   Фрейм — це двовимірна таблиця, стовпці якої мають імена"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:24
msgid ""
"        and potentially have different data types.\n"
"*   Load it with `import pandas as pd`. The alias pd is commonly used for Pandas.\n"
"*   Read a Comma Separate Values (CSV) data file with `pd.read_csv`.\n"
"    *   Argument is the name of the file to be read.\n"
"    *   Assign result to a variable to store the data that was read."
msgstr ""
"        і потенційно мають різні типи даних.\n"
"*   Завантажте цю бібліотеку за допомогою `import pandas as pd`. Псевдонім pd зазвичай використовується для Pandas.\n"
"*   Читайте файл даних із роздільними комами (Comma Separate Values - CSV) за допомогою `pd.read_csv`.\n"
"    *   Аргумент — це ім'я файлу, який потрібно прочитати.\n"
"    *   Призначте результат змінній для збереження даних, які були прочитані."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:30
msgid ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv')\n"
"print(data)\n"
"~~~"
msgstr ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv')\n"
"print(data)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:36
msgid ""
"{: .language-python}\n"
"~~~\n"
"       country  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"0    Australia     10039.59564     10949.64959     12217.22686\n"
"1  New Zealand     10556.57566     12247.39532     13175.67800"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"       country  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"0    Australia     10039.59564     10949.64959     12217.22686\n"
"1  New Zealand     10556.57566     12247.39532     13175.67800"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:42
msgid ""
"   gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"0     14526.12465     16788.62948     18334.19751     19477.00928\n"
"1     14463.91893     16046.03728     16233.71770     17632.41040"
msgstr ""
"   gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"0     14526.12465     16788.62948     18334.19751     19477.00928\n"
"1     14463.91893     16046.03728     16233.71770     17632.41040"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:46
msgid ""
"   gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"0     21888.88903     23424.76683     26997.93657     30687.75473\n"
"1     19007.19129     18363.32494     21050.41377     23189.80135"
msgstr ""
"   gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"0     21888.88903     23424.76683     26997.93657     30687.75473\n"
"1     19007.19129     18363.32494     21050.41377     23189.80135"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:50
msgid ""
"   gdpPercap_2007\n"
"0     34435.36744\n"
"1     25185.00911\n"
"~~~"
msgstr ""
"   gdpPercap_2007\n"
"0     34435.36744\n"
"1     25185.00911\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:56
msgid ""
"*   The columns in a dataframe are the observed variables, and the rows are "
"the observations."
msgstr ""
"*   Стовпці у фреймі даних є змінними у спостереженнях, а рядки – "
"спостереженнями"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:57
msgid ""
"*   Pandas uses backslash `\\` to show wrapped lines when output is too wide"
" to fit the screen."
msgstr ""
"*   Pandas використовує зворотну скісну риску `\\`, щоб показати перенесення"
" рядку, коли вивід занадто широкий, щоб поміститися на екран."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:59
msgid "> ## File Not Found"
msgstr "> ## Файл не знайдено"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:60
msgid ""
">\n"
"> Our lessons store their data files in a `data` sub-directory,\n"
"> which is why the path to the file is `data/gapminder_gdp_oceania.csv`.\n"
"> If you forget to include `data/`,\n"
"> or if you include it but your copy of the file is somewhere else,\n"
"> you will get a [runtime error]({{ page.root }}/04-built-in/#runtime-error)\n"
"> that ends with a line like this:\n"
">\n"
"> ~~~\n"
"> OSError: File b'gapminder_gdp_oceania.csv' does not exist\n"
"> ~~~"
msgstr ""
">\n"
"> Наші уроки зберігають свої файли даних у підкаталозі `data`,\n"
"> тому шлях до файлу – `data/gapminder_gdp_oceania.csv`.\n"
"> Якщо ви забули включити `data/`,\n"
"> або, якщо ви включите його, але ваша копія файлу знаходиться в іншому місці,\n"
"> ви отримаєте [runtime error]({{ page.root }}/04-built-in/#runtime-error)\n"
"> який закінчується таким рядком:\n"
">\n"
"> ~~~\n"
"> OSError: File b'gapminder_gdp_oceania.csv' does not exist\n"
"> ~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:74
msgid ""
"## Use `index_col` to specify that a column's values should be used as row "
"headings."
msgstr ""
"## Використовуйте `index_col`, щоб вказати, що значення стовпця мають "
"використовуватися як заголовки рядків."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:76
msgid "*   Row headings are numbers (0 and 1 in this case)."
msgstr "*  Заголовки рядків є числами (0 і 1 у цьому випадку)."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:77
msgid "*   Really want to index by country."
msgstr "*   Насправді краще індексувати за назвами країн."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:78
msgid ""
"*   Pass the name of the column to `read_csv` as its `index_col` parameter "
"to do this."
msgstr ""
"*   Для цього передайте назву стовпця в `read_csv` як його параметр "
"`index_col`."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:80
msgid ""
"~~~\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"print(data)\n"
"~~~"
msgstr ""
"~~~\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"print(data)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:84
msgid ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"country\n"
"Australia       10039.59564     10949.64959     12217.22686     14526.12465\n"
"New Zealand     10556.57566     12247.39532     13175.67800     14463.91893"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"country\n"
"Australia       10039.59564     10949.64959     12217.22686     14526.12465\n"
"New Zealand     10556.57566     12247.39532     13175.67800     14463.91893"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:91
msgid ""
"             gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"country\n"
"Australia       16788.62948     18334.19751     19477.00928     21888.88903\n"
"New Zealand     16046.03728     16233.71770     17632.41040     19007.19129"
msgstr ""
"             gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"country\n"
"Australia       16788.62948     18334.19751     19477.00928     21888.88903\n"
"New Zealand     16046.03728     16233.71770     17632.41040     19007.19129"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:96
msgid ""
"             gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"country\n"
"Australia       23424.76683     26997.93657     30687.75473     34435.36744\n"
"New Zealand     18363.32494     21050.41377     23189.80135     25185.00911\n"
"~~~"
msgstr ""
"             gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"country\n"
"Australia       23424.76683     26997.93657     30687.75473     34435.36744\n"
"New Zealand     18363.32494     21050.41377     23189.80135     25185.00911\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:103
msgid "## Use `DataFrame.info` to find out more about a dataframe."
msgstr ""
"## Використовуйте `DataFrame.info`, щоб дізнатися більше про фрейми даних."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:105
msgid ""
"~~~\n"
"data.info()\n"
"~~~"
msgstr ""
"~~~\n"
"data.info()\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:108
msgid ""
"{: .language-python}\n"
"~~~\n"
"<class 'pandas.core.frame.DataFrame'>\n"
"Index: 2 entries, Australia to New Zealand\n"
"Data columns (total 12 columns):\n"
"gdpPercap_1952    2 non-null float64\n"
"gdpPercap_1957    2 non-null float64\n"
"gdpPercap_1962    2 non-null float64\n"
"gdpPercap_1967    2 non-null float64\n"
"gdpPercap_1972    2 non-null float64\n"
"gdpPercap_1977    2 non-null float64\n"
"gdpPercap_1982    2 non-null float64\n"
"gdpPercap_1987    2 non-null float64\n"
"gdpPercap_1992    2 non-null float64\n"
"gdpPercap_1997    2 non-null float64\n"
"gdpPercap_2002    2 non-null float64\n"
"gdpPercap_2007    2 non-null float64\n"
"dtypes: float64(12)\n"
"memory usage: 208.0+ bytes\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"<class 'pandas.core.frame.DataFrame'>\n"
"Index: 2 entries, Australia to New Zealand\n"
"Data columns (total 12 columns):\n"
"gdpPercap_1952    2 non-null float64\n"
"gdpPercap_1957    2 non-null float64\n"
"gdpPercap_1962    2 non-null float64\n"
"gdpPercap_1967    2 non-null float64\n"
"gdpPercap_1972    2 non-null float64\n"
"gdpPercap_1977    2 non-null float64\n"
"gdpPercap_1982    2 non-null float64\n"
"gdpPercap_1987    2 non-null float64\n"
"gdpPercap_1992    2 non-null float64\n"
"gdpPercap_1997    2 non-null float64\n"
"gdpPercap_2002    2 non-null float64\n"
"gdpPercap_2007    2 non-null float64\n"
"dtypes: float64(12)\n"
"memory usage: 208.0+ bytes\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:130
msgid "*   This is a `DataFrame`"
msgstr "*   Це `DataFrame`"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:131
msgid "*   Two rows named `'Australia'` and `'New Zealand'`"
msgstr "*   Містить два рядки з назвами `'Australia'` та `'New Zealand'`"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:132
msgid ""
"*   Twelve columns, each of which has two actual 64-bit floating point "
"values."
msgstr ""
"*   А також дванадцять стовпців, кожен з яких містить два фактичних "
"64-розрядних значення з плаваючою крапкою."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:133
msgid ""
"    *   We will talk later about null values, which are used to represent "
"missing observations."
msgstr ""
"    *   Пізніше ми поговоримо про нульові значення, які використовуються для"
" представлення відсутніх спостережень."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:134
msgid "*   Uses 208 bytes of memory."
msgstr "*   Використано 208 байтів пам'яті."

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:136
msgid ""
"## The `DataFrame.columns` variable stores information about the dataframe's"
" columns."
msgstr ""
"## Змінна `DataFrame.columns` зберігає інформацію про стовпці фрейму даних."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:138
msgid "*   Note that this is data, *not* a method."
msgstr "*   Зверніть увагу, що це дані, а не метод."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:139
msgid "    *   Like `math.pi`."
msgstr "    *   Подібно до `math.pi`."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:140
msgid "    *   So do not use `()` to try to call it."
msgstr "    *   Тому не використовуйте `()`, щоб спробувати її викликати."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:141
msgid "*   Called a *member variable*, or just *member*."
msgstr "*   Ця змінна називається *змінною-членом* або просто *членом*."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:143
msgid ""
"~~~\n"
"print(data.columns)\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.columns)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:146
msgid ""
"{: .language-python}\n"
"~~~\n"
"Index(['gdpPercap_1952', 'gdpPercap_1957', 'gdpPercap_1962', 'gdpPercap_1967',\n"
"       'gdpPercap_1972', 'gdpPercap_1977', 'gdpPercap_1982', 'gdpPercap_1987',\n"
"       'gdpPercap_1992', 'gdpPercap_1997', 'gdpPercap_2002', 'gdpPercap_2007'],\n"
"      dtype='object')\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Index(['gdpPercap_1952', 'gdpPercap_1957', 'gdpPercap_1962', 'gdpPercap_1967',\n"
"       'gdpPercap_1972', 'gdpPercap_1977', 'gdpPercap_1982', 'gdpPercap_1987',\n"
"       'gdpPercap_1992', 'gdpPercap_1997', 'gdpPercap_2002', 'gdpPercap_2007'],\n"
"      dtype='object')\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:155
msgid "## Use `DataFrame.T` to transpose a dataframe."
msgstr "## Використовуйте `DataFrame.T`, щоб транспонувати фрейм даних."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:157
msgid "*   Sometimes want to treat columns as rows and vice versa."
msgstr "*  Іноді потрібно розглядати стовпці як рядки і навпаки."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:158
msgid ""
"*   Transpose (written `.T`) doesn't copy the data, just changes the "
"program's view of it."
msgstr ""
"*   Транспонування (written `.T`) не копіює дані, а лише змінює подання "
"даних."

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:159
msgid "*   Like `columns`, it is a member variable."
msgstr "*   Як і `columns`, це змінна-член."

# code block
#: python-novice-gapminder/_episodes/07-reading-tabular.md:161
msgid ""
"~~~\n"
"print(data.T)\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.T)\n"
"~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:164
msgid ""
"{: .language-python}\n"
"~~~\n"
"country           Australia  New Zealand\n"
"gdpPercap_1952  10039.59564  10556.57566\n"
"gdpPercap_1957  10949.64959  12247.39532\n"
"gdpPercap_1962  12217.22686  13175.67800\n"
"gdpPercap_1967  14526.12465  14463.91893\n"
"gdpPercap_1972  16788.62948  16046.03728\n"
"gdpPercap_1977  18334.19751  16233.71770\n"
"gdpPercap_1982  19477.00928  17632.41040\n"
"gdpPercap_1987  21888.88903  19007.19129\n"
"gdpPercap_1992  23424.76683  18363.32494\n"
"gdpPercap_1997  26997.93657  21050.41377\n"
"gdpPercap_2002  30687.75473  23189.80135\n"
"gdpPercap_2007  34435.36744  25185.00911\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"country           Australia  New Zealand\n"
"gdpPercap_1952  10039.59564  10556.57566\n"
"gdpPercap_1957  10949.64959  12247.39532\n"
"gdpPercap_1962  12217.22686  13175.67800\n"
"gdpPercap_1967  14526.12465  14463.91893\n"
"gdpPercap_1972  16788.62948  16046.03728\n"
"gdpPercap_1977  18334.19751  16233.71770\n"
"gdpPercap_1982  19477.00928  17632.41040\n"
"gdpPercap_1987  21888.88903  19007.19129\n"
"gdpPercap_1992  23424.76683  18363.32494\n"
"gdpPercap_1997  26997.93657  21050.41377\n"
"gdpPercap_2002  30687.75473  23189.80135\n"
"gdpPercap_2007  34435.36744  25185.00911\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/07-reading-tabular.md:182
msgid "## Use `DataFrame.describe` to get summary statistics about data."
msgstr ""
"## Використовуйте `DataFrame.describe`, щоб отримати зведену статистику "
"даних."

#: python-novice-gapminder/_episodes/07-reading-tabular.md:184
msgid ""
"DataFrame.describe() gets the summary statistics of only the columns that have numerical data. \n"
"All other columns are ignored, unless you use the argument `include='all'`.\n"
"~~~\n"
"print(data.describe())\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     10298.085650    11598.522455    12696.452430    14495.021790\n"
"std        365.560078      917.644806      677.727301       43.986086\n"
"min      10039.595640    10949.649590    12217.226860    14463.918930\n"
"25%      10168.840645    11274.086022    12456.839645    14479.470360\n"
"50%      10298.085650    11598.522455    12696.452430    14495.021790\n"
"75%      10427.330655    11922.958888    12936.065215    14510.573220\n"
"max      10556.575660    12247.395320    13175.678000    14526.124650"
msgstr ""
"DataFrame.describe() отримує зведену статистику лише для стовпців, які містять числові дані.\n"
"Усі інші стовпці ігноруються, якщо ви не використовуєте аргумент `include='all'`.\n"
"~~~\n"
"print(data.describe())\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     10298.085650    11598.522455    12696.452430    14495.021790\n"
"std        365.560078      917.644806      677.727301       43.986086\n"
"min      10039.595640    10949.649590    12217.226860    14463.918930\n"
"25%      10168.840645    11274.086022    12456.839645    14479.470360\n"
"50%      10298.085650    11598.522455    12696.452430    14495.021790\n"
"75%      10427.330655    11922.958888    12936.065215    14510.573220\n"
"max      10556.575660    12247.395320    13175.678000    14526.124650"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:201
msgid ""
"       gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"count         2.00000        2.000000        2.000000        2.000000\n"
"mean      16417.33338    17283.957605    18554.709840    20448.040160\n"
"std         525.09198     1485.263517     1304.328377     2037.668013\n"
"min       16046.03728    16233.717700    17632.410400    19007.191290\n"
"25%       16231.68533    16758.837652    18093.560120    19727.615725\n"
"50%       16417.33338    17283.957605    18554.709840    20448.040160\n"
"75%       16602.98143    17809.077557    19015.859560    21168.464595\n"
"max       16788.62948    18334.197510    19477.009280    21888.889030"
msgstr ""
"       gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"count         2.00000        2.000000        2.000000        2.000000\n"
"mean      16417.33338    17283.957605    18554.709840    20448.040160\n"
"std         525.09198     1485.263517     1304.328377     2037.668013\n"
"min       16046.03728    16233.717700    17632.410400    19007.191290\n"
"25%       16231.68533    16758.837652    18093.560120    19727.615725\n"
"50%       16417.33338    17283.957605    18554.709840    20448.040160\n"
"75%       16602.98143    17809.077557    19015.859560    21168.464595\n"
"max       16788.62948    18334.197510    19477.009280    21888.889030"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:211
msgid ""
"       gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     20894.045885    24024.175170    26938.778040    29810.188275\n"
"std       3578.979883     4205.533703     5301.853680     6540.991104\n"
"min      18363.324940    21050.413770    23189.801350    25185.009110\n"
"25%      19628.685413    22537.294470    25064.289695    27497.598692\n"
"50%      20894.045885    24024.175170    26938.778040    29810.188275\n"
"75%      22159.406358    25511.055870    28813.266385    32122.777857\n"
"max      23424.766830    26997.936570    30687.754730    34435.367440\n"
"~~~"
msgstr ""
"       gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     20894.045885    24024.175170    26938.778040    29810.188275\n"
"std       3578.979883     4205.533703     5301.853680     6540.991104\n"
"min      18363.324940    21050.413770    23189.801350    25185.009110\n"
"25%      19628.685413    22537.294470    25064.289695    27497.598692\n"
"50%      20894.045885    24024.175170    26938.778040    29810.188275\n"
"75%      22159.406358    25511.055870    28813.266385    32122.777857\n"
"max      23424.766830    26997.936570    30687.754730    34435.367440\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/07-reading-tabular.md:223
msgid "*   Not particularly useful with just two records,"
msgstr "*   Не дуже корисно лише з двома записами,"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:224
msgid "    but very helpful when there are thousands."
msgstr "   але дуже корисно, коли таких записів тисячі."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:226
msgid "> ## Reading Other Data"
msgstr "> ## Читання інших даних"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:227
msgid ""
">\n"
"> Read the data in `gapminder_gdp_americas.csv`\n"
"> (which should be in the same directory as `gapminder_gdp_oceania.csv`)\n"
"> into a variable called `americas`\n"
"> and display its summary statistics.\n"
">\n"
"> > ## Solution\n"
"> > To read in a CSV, we use `pd.read_csv` and pass the filename 'data/gapminder_gdp_americas.csv' to it. We also once again pass the\n"
"> > column name 'country' to the parameter `index_col` in order to index by country:\n"
"> > ~~~\n"
"> > americas = pd.read_csv('data/gapminder_gdp_americas.csv', index_col='country')\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""
">\n"
">Зчитайте дані з файлу `gapminder_gdp_americas.csv`\n"
"> (який має бути в тому ж каталозі, що й .`gapminder_gdp_oceania.csv`)\n"
"> у змінну `americas`\n"
"> і подайте його підсумкову статистику.\n"
">\n"
"> > ## Рішення\n"
"> > Для зчитування в форматі CSV ми використовуємо функцію `pd.read_csv` і передаємо назву файлу 'data/gapminder_gdp_americas.csv' в якості аргументу. Ми також передаємо \n"
"> > назву стовпцю 'country' як параметр `index_col`, щоб індексувати за назвами країн:\n"
"> > ~~~\n"
"> > americas = pd.read_csv('data/gapminder_gdp_americas.csv', index_col='country')\n"
"> > ~~~\n"
"> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:245
msgid "> ## Inspecting Data."
msgstr "> ## Перевірка даних"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:246
msgid ""
">\n"
"> After reading the data for the Americas,\n"
"> use `help(americas.head)` and `help(americas.tail)`\n"
"> to find out what `DataFrame.head` and `DataFrame.tail` do.\n"
">\n"
"> 1.  What method call will display the first three rows of this data?\n"
"> 2.  What method call will display the last three columns of this data?\n"
">     (Hint: you may need to change your view of the data.)\n"
">\n"
"> > ## Solution\n"
"> > 1. We can check out the first five rows of `americas` by executing `americas.head()` (allowing us to view the head\n"
"> > of the DataFrame). We can specify the number of rows we wish to see by specifying the parameter `n` in our call\n"
"> > to `americas.head()`. To view the first three rows, execute:\n"
"> >\n"
"> > ~~~\n"
"> > americas.head(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > \n"
"> > The output is then\n"
"> > ~~~\n"
"> >          continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"> >country                                                               \n"
"> >Argentina  Americas     5911.315053     6856.856212     7133.166023   \n"
"> >Bolivia    Americas     2677.326347     2127.686326     2180.972546   \n"
"> >Brazil     Americas     2108.944355     2487.365989     3336.585802   \n"
"> >\n"
"> >           gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"> >country                                                                     \n"
"> >Argentina     8052.953021     9443.038526    10079.026740     8997.897412   \n"
"> >Bolivia       2586.886053     2980.331339     3548.097832     3156.510452   \n"
"> >Brazil        3429.864357     4985.711467     6660.118654     7030.835878   \n"
"> >\n"
"> >           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"> >country                                                                     \n"
"> >Argentina     9139.671389     9308.418710    10967.281950     8797.640716   \n"
"> >Bolivia       2753.691490     2961.699694     3326.143191     3413.262690   \n"
"> >Brazil        7807.095818     6950.283021     7957.980824     8131.212843   \n"
"> >\n"
"> >           gdpPercap_2007  \n"
"> >country                    \n"
"> >Argentina    12779.379640  \n"
"> >Bolivia       3822.137084  \n"
"> >Brazil        9065.800825 \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > 2. To check out the last three rows of `americas`, we would use the command, `americas.tail(n=3)`,\n"
"> > analogous to `head()` used above. However, here we want to look at the last three columns so we need\n"
"> > to change our view and then use `tail()`. To do so, we create a new DataFrame in which rows and \n"
"> > columns are switched\n"
"> > \n"
"> > ~~~\n"
"> > americas_flipped = americas.T\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> >\n"
"> > We can then view the last three columns of `americas` by viewing the last three rows of `americas_flipped`:\n"
"> > ~~~\n"
"> > americas_flipped.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > The output is then\n"
"> > ~~~\n"
"> > country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \\\n"
"> > gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36   \n"
"> > gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26   \n"
"> > gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58   \n"
"> > \n"
"> > country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \\\n"
"> > gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...      \n"
"> > gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...      \n"
"> > gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...      \n"
"> > \n"
"> > country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \\\n"
"> > gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4   \n"
"> > gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6   \n"
"> > gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7   \n"
"> > \n"
"> > country        Trinidad and Tobago United States  Uruguay Venezuela  \n"
"> > gdpPercap_1997             8792.57       35767.4  9230.24   10165.5  \n"
"> > gdpPercap_2002             11460.6       39097.1     7727   8605.05  \n"
"> > gdpPercap_2007             18008.5       42951.7  10611.5   11415.8  \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > Note: we could have done the above in a single line of code by 'chaining' the commands:\n"
"> > ~~~\n"
"> > americas.T.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""
">\n"
"> Прочитавши дані для Південної Америки,\n"
"> використовуйте `help(americas.head)` та `help(americas.tail)`,\n"
">щоб дізнатися про призначення `DataFrame.head` and `DataFrame.tail`.\n"
">\n"
"> 1.  Виклик якого методу відобразить перші три рядки цих даних?\n"
"> 2.  Виклик якого методу відобразить останні три стовпці цих даних?\n"
">     (Підказка: вам може знадобитися змінити спосіб перегляду даних.)\n"
">\n"
"> > ## Рішення\n"
"> > 1. Ми можемо перевірити перші п’ять рядків `americas` за викликом `americas.head()` (що дозволяє нам переглянути заголовок \n"
"> > DataFrame). Ми можемо вказати кількість рядків, які ми хочемо бачити, визначивши параметр `n` у нашому виклику\n"
"> > `americas.head()`. TЩоб переглянути перші три рядки, виконайте:\n"
"> >\n"
"> > ~~~\n"
"> > americas.head(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > \n"
"> > Результат є таким:\n"
"> > ~~~\n"
"> >          continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"> >country                                                               \n"
"> >Argentina  Americas     5911.315053     6856.856212     7133.166023   \n"
"> >Bolivia    Americas     2677.326347     2127.686326     2180.972546   \n"
"> >Brazil     Americas     2108.944355     2487.365989     3336.585802   \n"
"> >\n"
"> >           gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"> >country                                                                     \n"
"> >Argentina     8052.953021     9443.038526    10079.026740     8997.897412   \n"
"> >Bolivia       2586.886053     2980.331339     3548.097832     3156.510452   \n"
"> >Brazil        3429.864357     4985.711467     6660.118654     7030.835878   \n"
"> >\n"
"> >           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"> >country                                                                     \n"
"> >Argentina     9139.671389     9308.418710    10967.281950     8797.640716   \n"
"> >Bolivia       2753.691490     2961.699694     3326.143191     3413.262690   \n"
"> >Brazil        7807.095818     6950.283021     7957.980824     8131.212843   \n"
"> >\n"
"> >           gdpPercap_2007  \n"
"> >country                    \n"
"> >Argentina    12779.379640  \n"
"> >Bolivia       3822.137084  \n"
"> >Brazil        9065.800825 \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > 2. Щоб перевірити останні три рядки `americas`, ми можемо використати команду, `americas.tail(n=3)`,\n"
"> > analogous to команді `head()` used, що застосовувалась вище. Однак тут ми хочемо переглянути останні три стовпці, отже, нам потрібно\n"
"> > змінити подання інформації, а потім використати `tail()`. Для цього ми створюємо новий DataFrame, у якому рядки та\n"
"> > стовпці транспонуються\n"
"> > \n"
"> > ~~~\n"
"> > americas_flipped = americas.T\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> >\n"
"> > Потім ми можемо переглянути останні три стовпці `americas`, переглянувши останні три рядки `americas_flipped`:\n"
"> > ~~~\n"
"> > americas_flipped.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > Результат є таким:\n"
"> > ~~~\n"
"> > country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \\\n"
"> > gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36   \n"
"> > gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26   \n"
"> > gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58   \n"
"> > \n"
"> > country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \\\n"
"> > gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...      \n"
"> > gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...      \n"
"> > gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...      \n"
"> > \n"
"> > country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \\\n"
"> > gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4   \n"
"> > gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6   \n"
"> > gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7   \n"
"> > \n"
"> > country        Trinidad and Tobago United States  Uruguay Venezuela  \n"
"> > gdpPercap_1997             8792.57       35767.4  9230.24   10165.5  \n"
"> > gdpPercap_2002             11460.6       39097.1     7727   8605.05  \n"
"> > gdpPercap_2007             18008.5       42951.7  10611.5   11415.8  \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > Примітка: ми могли б зробити вищезазначене в одному рядку коду, «поєднавши» команди:\n"
"> > ~~~\n"
"> > americas.T.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:338
msgid "> ## Reading Files in Other Directories"
msgstr "> ## Читання файлів в інших каталогах"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:339
msgid ""
">\n"
"> The data for your current project is stored in a file called `microbes.csv`,\n"
"> which is located in a folder called `field_data`.\n"
"> You are doing analysis in a notebook called `analysis.ipynb`\n"
"> in a sibling folder called `thesis`:\n"
">\n"
"> ~~~\n"
"> your_home_directory\n"
"> +-- field_data/\n"
"> |   +-- microbes.csv\n"
"> +-- thesis/\n"
">     +-- analysis.ipynb\n"
"> ~~~"
msgstr ""
">\n"
"> Дані вашого поточного проекту зберігаються у файлі під назвою `microbes.csv`,\n"
"> який знаходиться в каталозі під назвою `field_data`.\n"
"> Ви виконуєте аналіз у блокноті під назвою `analysis.ipynb`\n"
"> у спорідненому каталозі під назвою `thesis`:\n"
">\n"
"> ~~~\n"
"> Ваш_домашній_каталог\n"
"> +-- field_data/\n"
"> |   +-- microbes.csv\n"
"> +-- thesis/\n"
">     +-- analysis.ipynb\n"
"> ~~~"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:353
msgid ""
">\n"
"> What value(s) should you pass to `read_csv` to read `microbes.csv` in `analysis.ipynb`?\n"
"> \n"
"> > ## Solution\n"
"> > We need to specify the path to the file of interest in the call to `pd.read_csv`. We first need to 'jump' out of\n"
"> > the folder `thesis` using '../' and then into the folder `field_data` using 'field_data/'. Then we can specify the filename `microbes.csv.\n"
"> > The result is as follows:\n"
"> > ~~~\n"
"> > data_microbes = pd.read_csv('../field_data/microbes.csv')\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""
">\n"
"> Які значення потрібно передати в `read_csv`, щоб прочитати `microbes.csv` у `analysis.ipynb`?\n"
"> \n"
"> > ## Рішення\n"
"> > Нам потрібно вказати шлях до потрібного файлу як аргумент у виклику `pd.read_csv`. По-перше, потрібно «вистрибнути» з\n"
"> > теки `thesis` за допомогою '../', а потім зайти у теку  `field_data` за допомогою 'field_data/'. Після цього вказати назву файлу `microbes.csv.\n"
"> > Результат є таким:\n"
"> > ~~~\n"
"> > data_microbes = pd.read_csv('../field_data/microbes.csv')\n"
"> > ~~~\n"
"> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:367
msgid "> ## Writing Data"
msgstr "> ## Запис даних"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:369
msgid "> As well as the `read_csv` function for reading data from a file,"
msgstr "> Подібно функції `read_csv` для читання даних із файлу,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:370
msgid "> Pandas provides a `to_csv` function to write dataframes to files."
msgstr "> Pandas має функцію `to_csv` для запису кадрів даних у файли."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:371
msgid "> Applying what you've learned about reading from files,"
msgstr "> Застосовуючи те, що ви дізналися про читання з файлів,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:372
msgid "> write one of your dataframes to a file called `processed.csv`."
msgstr ""
"> запишіть один із ваших фреймів даних у файл під назвою `processed.csv`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:373
msgid "> You can use `help` to get information on how to use `to_csv`."
msgstr ""
"> Ви можете скористатися `help`, щоб отримати інформацію про застосування "
"`to_csv`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:374
#: python-novice-gapminder/_episodes/08-data-frames.md:371
#: python-novice-gapminder/_episodes/13-conditionals.md:298
msgid "> > ## Solution"
msgstr "> > ## Рішення"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:375
msgid ""
"> > In order to write the DataFrame `americas` to a file called "
"`processed.csv`, execute the following command:"
msgstr ""
"> > Щоб записати DataFrame `americas` у файл під назвою `processed.csv`, "
"виконайте таку команду:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:376
#: python-novice-gapminder/_episodes/07-reading-tabular.md:378
#: python-novice-gapminder/_episodes/07-reading-tabular.md:381
#: python-novice-gapminder/_episodes/07-reading-tabular.md:383
#: python-novice-gapminder/_episodes/08-data-frames.md:373
#: python-novice-gapminder/_episodes/08-data-frames.md:378
#: python-novice-gapminder/_episodes/08-data-frames.md:381
#: python-novice-gapminder/_episodes/08-data-frames.md:387
#: python-novice-gapminder/_episodes/13-conditionals.md:300
#: python-novice-gapminder/_episodes/13-conditionals.md:309
msgid "> > ~~~"
msgstr "> > ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:377
msgid "> > americas.to_csv('processed.csv')"
msgstr "> > americas.to_csv('processed.csv')"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:379
#: python-novice-gapminder/_episodes/07-reading-tabular.md:384
msgid "> >{: .language-python}"
msgstr "> >{: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:380
msgid "> > For help on `to_csv`, you could execute, for example,"
msgstr ""
"> >Щоб отримати допомогу щодо `to_csv`, ви можете виконати, наприклад,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:382
msgid "> > help(americas.to_csv)"
msgstr "> > help(americas.to_csv)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:385
msgid ""
"> > Note that `help(to_csv)` throws an error! This is a subtlety and is due "
"to the fact that `to_csv` is NOT a function in "
msgstr ""
"> > Зверніть увагу, що `help(to_csv)` видає помилку! Це тонкощі, і це "
"пов’язано з тим, що `to_csv` НЕ є функцією сама по собі"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/07-reading-tabular.md:386
msgid "> > and of itself and the actual call is `americas.to_csv`. "
msgstr "> > а фактичним викликом є `americas.to_csv`."

# Front Matter
#: python-novice-gapminder/_episodes/08-data-frames.md:1
msgid ""
"---\n"
"title: \"Pandas DataFrames\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I do statistical analysis of tabular data?\"\n"
"objectives:\n"
"- \"Select individual values from a Pandas dataframe.\"\n"
"- \"Select entire rows or entire columns from a dataframe.\"\n"
"- \"Select a subset of both rows and columns from a dataframe in a single operation.\"\n"
"- \"Select a subset of a dataframe by a single Boolean criterion.\"\n"
"keypoints:\n"
"- \"Use `DataFrame.iloc[..., ...]` to select values by integer location.\"\n"
"- \"Use `:` on its own to mean all columns or all rows.\"\n"
"- \"Select multiple columns or rows using `DataFrame.loc` and a named slice.\"\n"
"- \"Result of slicing can be used in further operations.\"\n"
"- \"Use comparisons to select data based on value.\"\n"
"- \"Select values or NaN using a Boolean mask.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Pandas DataFrames\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"Як я можу зробити статистичний аналіз табличних даних?\"\n"
"objectives:\n"
"- \"Вибір окремих значень з фрейму даних Pandas.\"\n"
"- \"Вибір цілих рядків або цілих стовпців з фрейму даних.\"\n"
"- \"Вибір підмножини рядків і стовпців з фрейму даних за одну операцію.\"\n"
"- \"Вибір підмножини фрейму даних за одним бульовим критерієм.\"\n"
"keypoints:\n"
"- \"Використовуйте `DataFrame.iloc[..., ...]` для вибору значень за їх позицією.\"\n"
"- \"Використовуйте `:` окремо для позначення всіх стовпців або всіх рядків.\"\n"
"- \"Вибирайте кілька стовпців або рядків за допомогою `DataFrame.loc` і визначеного зрізу.\"\n"
"- \"Результат зрізу можна використовувати в подальших операціях.\"\n"
"- \"Використовуйте порівняння для вибору даних на основі певного значення.\"\n"
"- \"Виберіть значення або NaN за допомогою булевої маски.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:21
msgid "## Note about Pandas DataFrames/Series"
msgstr "## Зауваження щодо Pandas DataFrames/Series"

#: python-novice-gapminder/_episodes/08-data-frames.md:23
msgid ""
"A [DataFrame][pandas-dataframe] is a collection of [Series][pandas-series];\n"
"The DataFrame is the way Pandas represents a table, and Series is the data-structure\n"
"Pandas use to represent a column."
msgstr ""
"[DataFrame][pandas-dataframe] є колекцією [Series][pandas-series];\n"
"DataFrame — це спосіб, у який Pandas представляє таблицю, а Series — це структура даних, яку\n"
"Pandas використовує для представлення стовпця."

#: python-novice-gapminder/_episodes/08-data-frames.md:27
msgid ""
"Pandas is built on top of the [Numpy][numpy] library, which in practice means that\n"
"most of the methods defined for Numpy Arrays apply to Pandas Series/DataFrames."
msgstr ""
"Pandas побудована на основі бібліотеки [Numpy][numpy],  що на практиці означає, що\n"
" більшість методів, визначених для Numpy Arrays, застосовуються до Pandas Series/DataFrames."

#: python-novice-gapminder/_episodes/08-data-frames.md:30
msgid ""
"What makes Pandas so attractive is the powerful interface to access individual records\n"
"of the table, proper handling of missing values, and relational-databases operations\n"
"between DataFrames."
msgstr ""
"Що робить Pandas таким привабливим? Це потужний інтерфейс для доступу до окремих записів\n"
"таблиці, належна обробка відсутніх значень і операції з з фреймами даних подібно до тих,\n"
" що застосовуються в реляційних базах даних."

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:34
msgid "## Selecting values"
msgstr "## Вибір значень"

#: python-novice-gapminder/_episodes/08-data-frames.md:36
msgid ""
"To access a value at the position `[i,j]` of a DataFrame, we have two options, depending on\n"
"what is the meaning of `i` in use.\n"
"Remember that a DataFrame provides an *index* as a way to identify the rows of the table;\n"
"a row, then, has a *position* inside the table as well as a *label*, which\n"
"uniquely identifies its *entry* in the DataFrame."
msgstr ""
"Щоб отримати доступ до значення в позиції `[i,j]` у DataFrame, у нас є два варіанти, залежно від того,\n"
"в якому значенні використовується `i`.\n"
"Пам’ятайте, що DataFrame використовує *індекс* як спосіб ідентифікації рядків таблиці;\n"
"крім того, рядок має *позицію* всередині таблиці, а також *мітку*, яка\n"
"унікально ідентифікує  *введення* значення у DataFrame."

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:42
msgid ""
"## Use `DataFrame.iloc[..., ...]` to select values by their (entry) position"
msgstr ""
"## Використовуйте `DataFrame.iloc[..., ...]` для вибору значень за їх "
"позицією"

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:44
msgid ""
"*   Can specify location by numerical index analogously to 2D version of "
"character selection in strings."
msgstr ""
"*   Можна вказати позицію значення за допомогою числового індексу аналогічно"
" 2D-версії вибору символів у рядках."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:46
msgid ""
"~~~\n"
"import pandas as pd\n"
"data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"print(data.iloc[0, 0])\n"
"~~~"
msgstr ""
"~~~\n"
"import pandas as pd\n"
"data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"print(data.iloc[0, 0])\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:51
#: python-novice-gapminder/_episodes/08-data-frames.md:65
msgid ""
"{: .language-python}\n"
"~~~\n"
"1601.056136\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"1601.056136\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:57
msgid ""
"## Use `DataFrame.loc[..., ...]` to select values by their (entry) label."
msgstr ""
"## Використовуйте `DataFrame.loc[..., ...]`, щоб вибрати значення за їх "
"міткою."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:59
msgid ""
"*   Can specify location by row name analogously to 2D version of dictionary"
" keys."
msgstr ""
"*    Можна вказати позицію за допомогою імені рядка аналогічно до 2D-версії "
"ключів словника."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:61
msgid ""
"~~~\n"
"data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"print(data.loc[\"Albania\", \"gdpPercap_1952\"])\n"
"~~~"
msgstr ""
"~~~\n"
"data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"print(data.loc[\"Albania\", \"gdpPercap_1952\"])\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:70
msgid "## Use `:` on its own to mean all columns or all rows."
msgstr ""
"## Використовуйте `:` окремо для позначення всіх стовпців або всіх рядків."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:72
msgid "*   Just like Python's usual slicing notation."
msgstr "*   Так само, як у звичайній Python нотації зрізу."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:74
msgid ""
"~~~\n"
"print(data.loc[\"Albania\", :])\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.loc[\"Albania\", :])\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:77
msgid ""
"{: .language-python}\n"
"~~~\n"
"gdpPercap_1952    1601.056136\n"
"gdpPercap_1957    1942.284244\n"
"gdpPercap_1962    2312.888958\n"
"gdpPercap_1967    2760.196931\n"
"gdpPercap_1972    3313.422188\n"
"gdpPercap_1977    3533.003910\n"
"gdpPercap_1982    3630.880722\n"
"gdpPercap_1987    3738.932735\n"
"gdpPercap_1992    2497.437901\n"
"gdpPercap_1997    3193.054604\n"
"gdpPercap_2002    4604.211737\n"
"gdpPercap_2007    5937.029526\n"
"Name: Albania, dtype: float64\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"gdpPercap_1952    1601.056136\n"
"gdpPercap_1957    1942.284244\n"
"gdpPercap_1962    2312.888958\n"
"gdpPercap_1967    2760.196931\n"
"gdpPercap_1972    3313.422188\n"
"gdpPercap_1977    3533.003910\n"
"gdpPercap_1982    3630.880722\n"
"gdpPercap_1987    3738.932735\n"
"gdpPercap_1992    2497.437901\n"
"gdpPercap_1997    3193.054604\n"
"gdpPercap_2002    4604.211737\n"
"gdpPercap_2007    5937.029526\n"
"Name: Albania, dtype: float64\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:95
msgid ""
"*   Would get the same result printing `data.loc[\"Albania\"]` (without a "
"second index)."
msgstr ""
"*   Той самий результат можна отримати, якщо надрукувати "
"`data.loc[\"Albania\"]` (без другого індексу)."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:97
msgid ""
"~~~\n"
"print(data.loc[:, \"gdpPercap_1952\"])\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.loc[:, \"gdpPercap_1952\"])\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:100
msgid ""
"{: .language-python}\n"
"~~~\n"
"country\n"
"Albania                    1601.056136\n"
"Austria                    6137.076492\n"
"Belgium                    8343.105127\n"
"⋮ ⋮ ⋮\n"
"Switzerland               14734.232750\n"
"Turkey                     1969.100980\n"
"United Kingdom             9979.508487\n"
"Name: gdpPercap_1952, dtype: float64\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"country\n"
"Albania                    1601.056136\n"
"Austria                    6137.076492\n"
"Belgium                    8343.105127\n"
"⋮ ⋮ ⋮\n"
"Switzerland               14734.232750\n"
"Turkey                     1969.100980\n"
"United Kingdom             9979.508487\n"
"Name: gdpPercap_1952, dtype: float64\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:114
msgid "*   Would get the same result printing `data[\"gdpPercap_1952\"]`"
msgstr ""
"*   Той самий результат можна отримати, якщо надрукувати "
"`data[\"gdpPercap_1952\"]`"

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:115
msgid ""
"*   Also get the same result printing `data.gdpPercap_1952` (not "
"recommended, because easily confused with `.` notation for methods)"
msgstr ""
"*   Також можна отримати той самий результат, застосовуючи нотацію "
"`data.gdpPercap_1952` (не рекомендовано, оскільки її легко сплутати з "
"позначенням `.` для методів)."

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:117
msgid ""
"## Select multiple columns or rows using `DataFrame.loc` and a named slice."
msgstr ""
"## Вибирайте кілька стовпців або рядків за допомогою `DataFrame.loc` та "
"визначеного зрізу. "

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:119
msgid ""
"~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'])\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'])\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:122
msgid ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy           8243.582340    10022.401310    12269.273780\n"
"Montenegro      4649.593785     5907.850937     7778.414017\n"
"Netherlands    12790.849560    15363.251360    18794.745670\n"
"Norway         13450.401510    16361.876470    18965.055510\n"
"Poland          5338.752143     6557.152776     8006.506993\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy           8243.582340    10022.401310    12269.273780\n"
"Montenegro      4649.593785     5907.850937     7778.414017\n"
"Netherlands    12790.849560    15363.251360    18794.745670\n"
"Norway         13450.401510    16361.876470    18965.055510\n"
"Poland          5338.752143     6557.152776     8006.506993\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:134
msgid ""
"In the above code, we discover that **slicing using `loc` is inclusive at both\n"
"ends**, which differs from **slicing using `iloc`**, where slicing indicates\n"
"everything up to but not including the final index. "
msgstr ""
"У наведеному вище коді ми бачимо, що  **зріз із застосуванням `loc` включає обидва \n"
"виміри**, що відрізняється від **зрізу із застосуванням `iloc`**, де зріз \n"
"включає все, крім кінцевого індексу. "

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:139
msgid "## Result of slicing can be used in further operations."
msgstr ""
"## Результат застосування операції зрізу може бути використаний у подальших "
"операціях."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:141
msgid "*   Usually don't just print a slice."
msgstr "*   Зазвичай не просто друкують фрагмент."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:142
msgid "*   All the statistical operators that work on entire dataframes"
msgstr "*   Усі статистичні оператори, які працюють із цілими фреймами даних,"

#: python-novice-gapminder/_episodes/08-data-frames.md:143
msgid ""
"    work the same way on slices.\n"
"*   E.g., calculate max of a slice."
msgstr ""
"    також працюють на зрізах.\n"
"*   Наприклад, обчислення максимальної кількості за стовпцями зрізу."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:146
msgid ""
"~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'].max())\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'].max())\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:149
msgid ""
"{: .language-python}\n"
"~~~\n"
"gdpPercap_1962    13450.40151\n"
"gdpPercap_1967    16361.87647\n"
"gdpPercap_1972    18965.05551\n"
"dtype: float64\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"gdpPercap_1962    13450.40151\n"
"gdpPercap_1967    16361.87647\n"
"gdpPercap_1972    18965.05551\n"
"dtype: float64\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:158
msgid ""
"~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'].min())\n"
"~~~"
msgstr ""
"~~~\n"
"print(data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972'].min())\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:161
msgid ""
"{: .language-python}\n"
"~~~\n"
"gdpPercap_1962    4649.593785\n"
"gdpPercap_1967    5907.850937\n"
"gdpPercap_1972    7778.414017\n"
"dtype: float64\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"gdpPercap_1962    4649.593785\n"
"gdpPercap_1967    5907.850937\n"
"gdpPercap_1972    7778.414017\n"
"dtype: float64\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:170
msgid "## Use comparisons to select data based on value."
msgstr ""
"## Використовуйте порівняння для вибору даних на основі певного значення."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:172
msgid "*   Comparison is applied element by element."
msgstr "*   Порівняння здійснюється поелементно."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:173
msgid "*   Returns a similarly-shaped dataframe of `True` and `False`."
msgstr "*   Повертає фрейм даних подібної форми, що містить `True` і `False`."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:175
msgid ""
"~~~\n"
"# Use a subset of data to keep output readable.\n"
"subset = data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972']\n"
"print('Subset of data:\\n', subset)\n"
"\n"
"# Which values were greater than 10000 ?\n"
"print('\\nWhere are values large?\\n', subset > 10000)\n"
"~~~"
msgstr ""
"~~~\n"
"# Використовуйте підмножину даних, щоб результат був читабельним.\n"
"subset = data.loc['Italy':'Poland', 'gdpPercap_1962':'gdpPercap_1972']\n"
"print('Підмножина даних:\\n', subset)\n"
"\n"
"# Які значення були більшими за 10000?\n"
"print('\\nЯкі значення більші?\\n', subset > 10000)\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:183
msgid ""
"{: .language-python}\n"
"~~~\n"
"Subset of data:\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy           8243.582340    10022.401310    12269.273780\n"
"Montenegro      4649.593785     5907.850937     7778.414017\n"
"Netherlands    12790.849560    15363.251360    18794.745670\n"
"Norway         13450.401510    16361.876470    18965.055510\n"
"Poland          5338.752143     6557.152776     8006.506993"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Підмножина даних:\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy           8243.582340    10022.401310    12269.273780\n"
"Montenegro      4649.593785     5907.850937     7778.414017\n"
"Netherlands    12790.849560    15363.251360    18794.745670\n"
"Norway         13450.401510    16361.876470    18965.055510\n"
"Poland          5338.752143     6557.152776     8006.506993"

#: python-novice-gapminder/_episodes/08-data-frames.md:194
msgid ""
"Where are values large?\n"
"            gdpPercap_1962 gdpPercap_1967 gdpPercap_1972\n"
"country\n"
"Italy                False           True           True\n"
"Montenegro           False          False          False\n"
"Netherlands           True           True           True\n"
"Norway                True           True           True\n"
"Poland               False          False          False\n"
"~~~"
msgstr ""
"Які значення більші?\n"
"            gdpPercap_1962 gdpPercap_1967 gdpPercap_1972\n"
"country\n"
"Italy                False           True           True\n"
"Montenegro           False          False          False\n"
"Netherlands           True           True           True\n"
"Norway                True           True           True\n"
"Poland               False          False          False\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:205
msgid "## Select values or NaN using a Boolean mask."
msgstr "## Виберіть значення або NaN за допомогою булевої маски."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:207
msgid ""
"*   A frame full of Booleans is sometimes called a *mask* because of how it "
"can be used."
msgstr ""
"*   Фрейм, повний булевих значень, іноді називають *маскою* через спосіб "
"його використання."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:209
msgid ""
"~~~\n"
"mask = subset > 10000\n"
"print(subset[mask])\n"
"~~~"
msgstr ""
"~~~\n"
"mask = subset > 10000\n"
"print(subset[mask])\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:213
msgid ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy                   NaN     10022.40131     12269.27378\n"
"Montenegro              NaN             NaN             NaN\n"
"Netherlands     12790.84956     15363.25136     18794.74567\n"
"Norway          13450.40151     16361.87647     18965.05551\n"
"Poland                  NaN             NaN             NaN\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"             gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"country\n"
"Italy                   NaN     10022.40131     12269.27378\n"
"Montenegro              NaN             NaN             NaN\n"
"Netherlands     12790.84956     15363.25136     18794.74567\n"
"Norway          13450.40151     16361.87647     18965.05551\n"
"Poland                  NaN             NaN             NaN\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:225
msgid ""
"*   Get the value where the mask is true, and NaN (Not a Number) where it is"
" false."
msgstr ""
"*   Отримайте значення, якщо маска є істинною, і NaN (не число), якщо вона "
"хибна."

# unordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:226
msgid ""
"*   Useful because NaNs are ignored by operations like max, min, average, "
"etc."
msgstr ""
"*   Корисно, оскільки NaN ігноруються такими операціями, як max, min, "
"average тощо."

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:228
msgid ""
"~~~\n"
"print(subset[subset > 10000].describe())\n"
"~~~"
msgstr ""
"~~~\n"
"print(subset[subset > 10000].describe())\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:231
msgid ""
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"count        2.000000        3.000000        3.000000\n"
"mean     13120.625535    13915.843047    16676.358320\n"
"std        466.373656     3408.589070     3817.597015\n"
"min      12790.849560    10022.401310    12269.273780\n"
"25%      12955.737547    12692.826335    15532.009725\n"
"50%      13120.625535    15363.251360    18794.745670\n"
"75%      13285.513523    15862.563915    18879.900590\n"
"max      13450.401510    16361.876470    18965.055510\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1962  gdpPercap_1967  gdpPercap_1972\n"
"count        2.000000        3.000000        3.000000\n"
"mean     13120.625535    13915.843047    16676.358320\n"
"std        466.373656     3408.589070     3817.597015\n"
"min      12790.849560    10022.401310    12269.273780\n"
"25%      12955.737547    12692.826335    15532.009725\n"
"50%      13120.625535    15363.251360    18794.745670\n"
"75%      13285.513523    15862.563915    18879.900590\n"
"max      13450.401510    16361.876470    18965.055510\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/08-data-frames.md:245
msgid "## Group By: split-apply-combine"
msgstr "## Групувати за: розділити-застосувати-комбінувати"

#: python-novice-gapminder/_episodes/08-data-frames.md:247
msgid ""
"Pandas vectorizing methods and grouping operations are features that provide users \n"
"much flexibility to analyse their data."
msgstr ""
"Методи векторизації та операції групування Pandas — це функції, які надають "
"користувачам велику гнучкість для аналізу своїх даних."

#: python-novice-gapminder/_episodes/08-data-frames.md:250
msgid ""
"For instance, let's say we want to have a clearer view on how the European countries \n"
"split themselves according to their GDP."
msgstr ""
"Наприклад, скажімо, ми хочемо мати більш чітке уявлення про те, як європейські країни\n"
"розподілені відповідно до свого ВВП. "

# ordered list
#: python-novice-gapminder/_episodes/08-data-frames.md:253
msgid ""
"1.  We may have a glance by splitting the countries in two groups during the"
" years surveyed,"
msgstr ""
"1. Ми можемо поглянути, розділивши країни на дві групи протягом "
"досліджуваних років,"

#: python-novice-gapminder/_episodes/08-data-frames.md:254
msgid ""
"    those who presented a GDP *higher* than the European average and those with a *lower* GDP.\n"
"2.  We then estimate a *wealthy score* based on the historical (from 1962 to 2007) values,\n"
"    where we account how many times a country has participated in the groups of *lower* or *higher* GDP"
msgstr ""
"   на тих, у кого ВВП *вищий* за середній європейський, та тих, у кого ВВП *нижчий*.\n"
"2.  Потім ми оцінюємо *показник заможності* на основі історичних значень (з 1962 по 2007 рік),\n"
"    де ми враховуємо, скільки разів країна була у групах з *нижчим* або *вищим* ВВП"

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:258
msgid ""
"~~~\n"
"mask_higher = data > data.mean()\n"
"wealth_score = mask_higher.aggregate('sum', axis=1) / len(data.columns)\n"
"wealth_score\n"
"~~~"
msgstr ""
"~~~\n"
"mask_higher = data > data.mean()\n"
"wealth_score = mask_higher.aggregate('sum', axis=1) / len(data.columns)\n"
"wealth_score\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:263
msgid ""
"{: .language-python}\n"
"~~~\n"
"country\n"
"Albania                   0.000000\n"
"Austria                   1.000000\n"
"Belgium                   1.000000\n"
"Bosnia and Herzegovina    0.000000\n"
"Bulgaria                  0.000000\n"
"Croatia                   0.000000\n"
"Czech Republic            0.500000\n"
"Denmark                   1.000000\n"
"Finland                   1.000000\n"
"France                    1.000000\n"
"Germany                   1.000000\n"
"Greece                    0.333333\n"
"Hungary                   0.000000\n"
"Iceland                   1.000000\n"
"Ireland                   0.333333\n"
"Italy                     0.500000\n"
"Montenegro                0.000000\n"
"Netherlands               1.000000\n"
"Norway                    1.000000\n"
"Poland                    0.000000\n"
"Portugal                  0.000000\n"
"Romania                   0.000000\n"
"Serbia                    0.000000\n"
"Slovak Republic           0.000000\n"
"Slovenia                  0.333333\n"
"Spain                     0.333333\n"
"Sweden                    1.000000\n"
"Switzerland               1.000000\n"
"Turkey                    0.000000\n"
"United Kingdom            1.000000\n"
"dtype: float64\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"country\n"
"Albania                   0.000000\n"
"Austria                   1.000000\n"
"Belgium                   1.000000\n"
"Bosnia and Herzegovina    0.000000\n"
"Bulgaria                  0.000000\n"
"Croatia                   0.000000\n"
"Czech Republic            0.500000\n"
"Denmark                   1.000000\n"
"Finland                   1.000000\n"
"France                    1.000000\n"
"Germany                   1.000000\n"
"Greece                    0.333333\n"
"Hungary                   0.000000\n"
"Iceland                   1.000000\n"
"Ireland                   0.333333\n"
"Italy                     0.500000\n"
"Montenegro                0.000000\n"
"Netherlands               1.000000\n"
"Norway                    1.000000\n"
"Poland                    0.000000\n"
"Portugal                  0.000000\n"
"Romania                   0.000000\n"
"Serbia                    0.000000\n"
"Slovak Republic           0.000000\n"
"Slovenia                  0.333333\n"
"Spain                     0.333333\n"
"Sweden                    1.000000\n"
"Switzerland               1.000000\n"
"Turkey                    0.000000\n"
"United Kingdom            1.000000\n"
"dtype: float64\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:300
msgid ""
"Finally, for each group in the `wealth_score` table, we sum their (financial) contribution\n"
"across the years surveyed:"
msgstr ""
"Нарешті, для кожної групи в таблиці `wealth_score` ми підсумовуємо їх (фінансовий) внесок\n"
"за роки дослідження:"

# code block
#: python-novice-gapminder/_episodes/08-data-frames.md:303
msgid ""
"~~~\n"
"data.groupby(wealth_score).sum()\n"
"~~~"
msgstr ""
"~~~\n"
"data.groupby(wealth_score).sum()\n"
"~~~"

#: python-novice-gapminder/_episodes/08-data-frames.md:306
msgid ""
"{: .language-python}\n"
"~~~\n"
"          gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"0.000000    36916.854200    46110.918793    56850.065437    71324.848786   \n"
"0.333333    16790.046878    20942.456800    25744.935321    33567.667670   \n"
"0.500000    11807.544405    14505.000150    18380.449470    21421.846200   \n"
"1.000000   104317.277560   127332.008735   149989.154201   178000.350040   "
msgstr ""
"{: .language-python}\n"
"~~~\n"
"          gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"0.000000    36916.854200    46110.918793    56850.065437    71324.848786   \n"
"0.333333    16790.046878    20942.456800    25744.935321    33567.667670   \n"
"0.500000    11807.544405    14505.000150    18380.449470    21421.846200   \n"
"1.000000   104317.277560   127332.008735   149989.154201   178000.350040   "

#: python-novice-gapminder/_episodes/08-data-frames.md:314
msgid ""
"          gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"0.000000    88569.346898   104459.358438   113553.768507   119649.599409   \n"
"0.333333    45277.839976    53860.456750    59679.634020    64436.912960   \n"
"0.500000    25377.727380    29056.145370    31914.712050    35517.678220   \n"
"1.000000   215162.343140   241143.412730   263388.781960   296825.131210   "
msgstr ""
"          gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"0.000000    88569.346898   104459.358438   113553.768507   119649.599409   \n"
"0.333333    45277.839976    53860.456750    59679.634020    64436.912960   \n"
"0.500000    25377.727380    29056.145370    31914.712050    35517.678220   \n"
"1.000000   215162.343140   241143.412730   263388.781960   296825.131210   "

#: python-novice-gapminder/_episodes/08-data-frames.md:320
msgid ""
"          gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007  \n"
"0.000000    92380.047256   103772.937598   118590.929863   149577.357928  \n"
"0.333333    67918.093220    80876.051580   102086.795210   122803.729520  \n"
"0.500000    36310.666080    40723.538700    45564.308390    51403.028210  \n"
"1.000000   315238.235970   346930.926170   385109.939210   427850.333420\n"
"~~~"
msgstr ""
"          gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007  \n"
"0.000000    92380.047256   103772.937598   118590.929863   149577.357928  \n"
"0.333333    67918.093220    80876.051580   102086.795210   122803.729520  \n"
"0.500000    36310.666080    40723.538700    45564.308390    51403.028210  \n"
"1.000000   315238.235970   346930.926170   385109.939210   427850.333420\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:329
msgid "> ## Selection of Individual Values"
msgstr "> ## Вибір індивідуальних значень"

#: python-novice-gapminder/_episodes/08-data-frames.md:330
msgid ""
">\n"
"> Assume Pandas has been imported into your notebook\n"
"> and the Gapminder GDP data for Europe has been loaded:\n"
">\n"
"> ~~~\n"
"> import pandas as pd\n"
">\n"
"> df = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Write an expression to find the Per Capita GDP of Serbia in 2007."
msgstr ""
">\n"
"> Припустімо, Pandas було імпортовано у ваш блокнот\n"
"> і дані Gapminder про ВВП Європи завантажено:\n"
">\n"
"> ~~~\n"
"> import pandas as pd\n"
">\n"
"> df = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Напишіть вираз для визначення ВВП на душу населення в Сербії у 2007 році."

#: python-novice-gapminder/_episodes/08-data-frames.md:343
msgid ""
">\n"
"> > ## Solution\n"
"> > The selection can be done by using the labels for both the row (\"Serbia\") and the column (\"gdpPercap_2007\"):\n"
"> > ~~~\n"
"> > print(df.loc['Serbia', 'gdpPercap_2007'])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > The output is\n"
"> > ~~~\n"
"> > 9786.534714\n"
"> > ~~~\n"
"> >{: .output}"
msgstr ""
">\n"
"> > ## Рішення\n"
"> > Вибір можна зробити за допомогою міток як для рядка (\"Serbia\"), так і для стовпця (\"gdpPercap_2007\"):\n"
"> > ~~~\n"
"> > print(df.loc['Serbia', 'gdpPercap_2007'])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Результат\n"
"> > ~~~\n"
"> > 9786.534714\n"
"> > ~~~\n"
"> >{: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:358
msgid "> ## Extent of Slicing"
msgstr "> ## Ступінь зріза"

#: python-novice-gapminder/_episodes/08-data-frames.md:359
msgid ""
">\n"
"> 1.  Do the two statements below produce the same output?\n"
"> 2.  Based on this,\n"
">     what rule governs what is included (or not) in numerical slices and named slices in Pandas?\n"
"> \n"
"> ~~~\n"
"> print(df.iloc[0:2, 0:2])\n"
"> print(df.loc['Albania':'Belgium', 'gdpPercap_1952':'gdpPercap_1962'])\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> 1.  Чи дають два наведені нижче твердження  однаковий результат?\n"
"> 2.  Виходячи з цього,\n"
">     яке правило керує тим, що включено (чи ні) до числових і іменованих зрізів у Pandas?\n"
"> \n"
"> ~~~\n"
"> print(df.iloc[0:2, 0:2])\n"
"> print(df.loc['Albania':'Belgium', 'gdpPercap_1952':'gdpPercap_1962'])\n"
"> ~~~\n"
"> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:372
msgid ""
"> > No, they do not produce the same output! The output of the first "
"statement is:"
msgstr ""
"> > Ні, вони не дають однакові результати! Результатом першого виразу є:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:374
msgid "> >         gdpPercap_1952  gdpPercap_1957"
msgstr "> >         gdpPercap_1952  gdpPercap_1957"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:375
msgid "> > country                                "
msgstr "> > country                                "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:376
msgid "> > Albania     1601.056136     1942.284244"
msgstr "> > Albania     1601.056136     1942.284244"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:377
msgid "> > Austria     6137.076492     8842.598030"
msgstr "> > Austria     6137.076492     8842.598030"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:379
#: python-novice-gapminder/_episodes/08-data-frames.md:388
msgid "> >{: .output}"
msgstr "> >{: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:380
msgid "> > The second statement gives:"
msgstr "> > Друге твердження дає:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:382
msgid "> >         gdpPercap_1952  gdpPercap_1957  gdpPercap_1962"
msgstr "> >         gdpPercap_1952  gdpPercap_1957  gdpPercap_1962"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:383
msgid "> > country                                                "
msgstr "> > country                                                "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:384
msgid "> > Albania     1601.056136     1942.284244     2312.888958"
msgstr "> > Albania     1601.056136     1942.284244     2312.888958"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:385
msgid "> > Austria     6137.076492     8842.598030    10750.721110"
msgstr "> > Austria     6137.076492     8842.598030    10750.721110"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:386
msgid "> > Belgium     8343.105127     9714.960623    10991.206760"
msgstr "> > Belgium     8343.105127     9714.960623    10991.206760"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:389
msgid ""
"> > Clearly, the second statement produces an additional column and an "
"additional row compared to the first statement.  "
msgstr ""
"> > Очевидно, що другий оператор створює додатковий стовпець і додатковий "
"рядок порівняно з першим оператором. "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:390
msgid ""
"> > What conclusion can we draw? We see that a numerical slice, 0:2, *omits*"
" the final index (i.e. index 2)"
msgstr ""
"> > Який висновок ми можемо зробити? Ми бачимо, що числовий зріз 0:2 "
"*опускає* остаточний індекс (тобто індекс 2)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:391
msgid "> > in the range provided,"
msgstr "> > в наданому діапазоні,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:392
msgid ""
"> > while a named slice, 'gdpPercap_1952':'gdpPercap_1962', *includes* the "
"final element."
msgstr ""
"> > тоді як іменований зріз, 'gdpPercap_1952':'gdpPercap_1962', *включає* "
"останній елемент."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:396
msgid "> ## Reconstructing Data"
msgstr "> ## Реконструювання даних"

#: python-novice-gapminder/_episodes/08-data-frames.md:397
msgid ""
">\n"
"> Explain what each line in the following short program does:\n"
"> what is in `first`, `second`, etc.?\n"
">\n"
"> ~~~\n"
"> first = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> second = first[first['continent'] == 'Americas']\n"
"> third = second.drop('Puerto Rico')\n"
"> fourth = third.drop('continent', axis = 1)\n"
"> fourth.to_csv('result.csv')\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Поясніть, що робить кожен рядок у наступній короткій програмі:\n"
"> що в `first`, `second`, etc.?\n"
">\n"
"> ~~~\n"
"> first = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> second = first[first['continent'] == 'Americas']\n"
"> third = second.drop('Puerto Rico')\n"
"> fourth = third.drop('continent', axis = 1)\n"
"> fourth.to_csv('result.csv')\n"
"> ~~~\n"
"> {: .language-python}"

#: python-novice-gapminder/_episodes/08-data-frames.md:410
msgid ""
">\n"
"> > ## Solution\n"
"> > Let's go through this piece of code line by line.\n"
"> > ~~~\n"
"> > first = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > This line loads the dataset containing the GDP data from all countries into a dataframe called \n"
"> > `first`. The `index_col='country'` parameter selects which column to use as the \n"
"> > row labels in the dataframe.  \n"
"> > ~~~\n"
"> > second = first[first['continent'] == 'Americas']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > This line makes a selection: only those rows of `first` for which the 'continent' column matches \n"
"> > 'Americas' are extracted. Notice how the Boolean expression inside the brackets, \n"
"> > `first['continent'] == 'Americas'`, is used to select only those rows where the expression is true. \n"
"> > Try printing this expression! Can you print also its individual True/False elements? \n"
"> > (hint: first assign the expression to a variable)\n"
"> > ~~~\n"
"> > third = second.drop('Puerto Rico')\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > As the syntax suggests, this line drops the row from `second` where the label is 'Puerto Rico'. The \n"
"> > resulting dataframe `third` has one row less than the original dataframe `second`.\n"
"> > ~~~\n"
"> > fourth = third.drop('continent', axis = 1)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Again we apply the drop function, but in this case we are dropping not a row but a whole column. \n"
"> > To accomplish this, we need to specify also the `axis` parameter (we want to drop the second column \n"
"> > which has index 1).\n"
"> > ~~~\n"
"> > fourth.to_csv('result.csv')\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > The final step is to write the data that we have been working on to a csv file. Pandas makes this easy \n"
"> > with the `to_csv()` function. The only required argument to the function is the filename. Note that the \n"
"> > file will be written in the directory from which you started the Jupyter or Python session."
msgstr ""
">\n"
"> > ## Рішення\n"
"> > Давайте переглянемо цей фрагмент коду рядок за рядком.\n"
"> > ~~~\n"
"> > first = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Цей рядок завантажує набір даних, що містить дані про ВВП усіх країн, у фрейм даних під назвою\n"
"> > `first`. Параметр `index_col='country'` вибирає, який стовпець використовувати як \n"
"> > мітки рядків у фреймі даних.  \n"
"> > ~~~\n"
"> > second = first[first['continent'] == 'Americas']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Цей рядок забезпечує  вибір: лише ті рядки `first`, для яких  стовпець 'continent' \n"
"> > відповідає значенню 'Americas'. Зверніть увагу, як логічний вираз у дужках, \n"
"> > `first['continent'] == 'Americas'`, використовується для вибору лише тих рядків, де вираз є істинним. \n"
"> > Спробуйте надрукувати цей вираз! Чи можете ви також надрукувати його окремі елементи True/False? \n"
"> > (підказка: спочатку призначте вираз змінній)\n"
"> > ~~~\n"
"> > third = second.drop('Puerto Rico')\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Як підказує синтаксис, цей вираз вилучає  рядок із `second` з міткою 'Пуерто-Ріко'. \n"
"> > Отриманий фрейм даних `third` має на один рядок менше, ніж вихідний фрейм даних `second`.\n"
"> > ~~~\n"
"> > fourth = third.drop('continent', axis = 1)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Ми знову застосовуємо функцію drop, але в цьому випадку ми видаляємо не рядок, а цілий стовпець. \n"
"> > Щоб виконати це, нам також потрібно вказати параметр `axis` (ми хочемо відкинути другий стовпець \n"
"> > який має індекс 1).\n"
"> > ~~~\n"
"> > fourth.to_csv('result.csv')\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Останнім кроком є ​​запис даних, над якими ми працювали, у файл CSV. Panda робить це легко  \n"
"> > за допомогою функції `to_csv()` . Єдиним обов’язковим аргументом для функції є ім’я файлу. Зверніть увагу, що \n"
"> > файл буде записано в каталозі, з якого ви розпочали сеанс Jupyter або Python."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:452
msgid "> ## Selecting Indices"
msgstr "> ## Вибір індексів"

#: python-novice-gapminder/_episodes/08-data-frames.md:453
msgid ""
">\n"
"> Explain in simple terms what `idxmin` and `idxmax` do in the short program below.\n"
"> When would you use these methods?\n"
">\n"
"> ~~~\n"
"> data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> print(data.idxmin())\n"
"> print(data.idxmax())\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Поясніть простими словами, що роблять `idxmin` і `idxmax` у короткій програмі нижче.\n"
"> Коли б ви використовували ці методи?\n"
">\n"
"> ~~~\n"
"> data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> print(data.idxmin())\n"
"> print(data.idxmax())\n"
"> ~~~\n"
"> {: .language-python}"

#: python-novice-gapminder/_episodes/08-data-frames.md:464
msgid ""
">\n"
"> > ## Solution\n"
"> > For each column in `data`, `idxmin` will return the index value corresponding to each column's minimum;\n"
"> > `idxmax` will do accordingly the same for each column's maximum value.\n"
"> >\n"
"> > You can use these functions whenever you want to get the row index of the minimum/maximum value and not the actual minimum/maximum value."
msgstr ""
">\n"
"> > ## Рішення\n"
"> >Для кожного стовпця в `data` `idxmin` поверне значення індексу, що відповідає мінімуму кожного стовпця;\n"
"> > `idxmax` зробить те саме для максимального значення кожного стовпця.\n"
"> >\n"
"> > Ви можете використовувати ці функції щоразу, коли хочете отримати індекс рядка мінімального/максимального значення, а не фактичне мінімальне/максимальне значення."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:473
msgid "> ## Practice with Selection"
msgstr "> ## Практика з вибором"

#: python-novice-gapminder/_episodes/08-data-frames.md:474
msgid ""
">\n"
"> Assume Pandas has been imported and the Gapminder GDP data for Europe has been loaded.\n"
"> Write an expression to select each of the following:\n"
">\n"
"> 1.  GDP per capita for all countries in 1982.\n"
"> 2.  GDP per capita for Denmark for all years.\n"
"> 3.  GDP per capita for all countries for years *after* 1985.\n"
"> 4.  GDP per capita for each country in 2007 as a multiple of \n"
">     GDP per capita for that country in 1952."
msgstr ""
">\n"
"> Припустімо, що Pandas було імпортовано та дані Gapminder про ВВП для Європи завантажено.\n"
"> Напишіть вираз, щоб вибрати кожне з наступного:\n"
">\n"
"> 1.  ВВП на душу населення для всіх країн у 1982р.\n"
"> 2. ВВП на душу населення для Данії за всі роки.\n"
"> 3.  ВВП на душу населення для всіх країн за роки *після* 1985.\n"
"> 4.  ВВП на душу населення для кожної країни у 2007 р. як кратне \n"
">    ВВП на душу населення для цієї країни в 1952 році."

#: python-novice-gapminder/_episodes/08-data-frames.md:484
msgid ""
">\n"
"> > ## Solution\n"
"> > 1:\n"
"> > ~~~\n"
"> > data['gdpPercap_1982']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 2:\n"
"> > ~~~\n"
"> > data.loc['Denmark',:]\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 3:\n"
"> > ~~~\n"
"> > data.loc[:,'gdpPercap_1985':]\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Pandas is smart enough to recognize the number at the end of the column label and does not give you an error, although no column named `gdpPercap_1985` actually exists. This is useful if new columns are added to the CSV file later.\n"
"> >\n"
"> > 4:\n"
"> > ~~~\n"
"> > data['gdpPercap_2007']/data['gdpPercap_1952']\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> > ## Рішення\n"
"> > 1:\n"
"> > ~~~\n"
"> > data['gdpPercap_1982']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 2:\n"
"> > ~~~\n"
"> > data.loc['Denmark',:]\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 3:\n"
"> > ~~~\n"
"> > data.loc[:,'gdpPercap_1985':]\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Pandas достатньо розумний, щоб розпізнати число в кінці мітки стовпця та не видає вам помилку, хоча стовпця з назвою `gdpPercap_1985` насправді не існує. Це корисно, якщо нові стовпці додаються до файлу CSV пізніше.\n"
"> >\n"
"> > 4:\n"
"> > ~~~\n"
"> > data['gdpPercap_2007']/data['gdpPercap_1952']\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:514
msgid "> ## Using the dir function to see available methods"
msgstr "> ## Використання функції dir для перегляду доступних методів"

#: python-novice-gapminder/_episodes/08-data-frames.md:515
msgid ""
">\n"
"> Python includes a `dir` function that can be used to display all of the available methods (functions) that are built into a data object.  As an example, the  functions available for a [list data type](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists) are:\n"
"> ~~~\n"
"> potatoes = [\"Russet\", \"Norkota\", \"Yukon Gold\", \"Pontiac\"]\n"
"> dir(potatoes)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> This command returns:\n"
"> ~~~\n"
"> ['__add__',\n"
"> ...\n"
"> '__subclasshook__',\n"
">  'append',\n"
">  'clear',\n"
">  'copy',\n"
">  'count',\n"
"> 'extend',\n"
"> 'index',\n"
"> 'insert',\n"
"> 'pop',\n"
"> 'remove',\n"
"> 'reverse',\n"
"> 'sort']\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> The double underscore functions can be ignored for now; functions that are not surrounded by double underscores are the *public interface* of the [list type](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists). So, if you want to sort the list of potatoes, according to `dir` you should try,\n"
"> ~~~\n"
"> potatoes.sort()\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Assume Pandas has been imported and the Gapminder GDP data for Europe has been loaded as `data`.  Then, use `dir` to find the function that prints out the median per-capita GDP across all European countries for each year that information is available.  "
msgstr ""
">\n"
"> Python включає функцію `dir`, яку можна використовувати для відображення всіх доступних методів (функцій), вбудованих в об’єкт даних. Як приклад, функції, доступні для [list data type](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists):\n"
"> ~~~\n"
"> potatoes = [\"Russet\", \"Norkota\", \"Yukon Gold\", \"Pontiac\"]\n"
"> dir(potatoes)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Ця команда повертає:\n"
"> ~~~\n"
"> ['__add__',\n"
"> ...\n"
"> '__subclasshook__',\n"
">  'append',\n"
">  'clear',\n"
">  'copy',\n"
">  'count',\n"
"> 'extend',\n"
"> 'index',\n"
"> 'insert',\n"
"> 'pop',\n"
"> 'remove',\n"
"> 'reverse',\n"
"> 'sort']\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Функції подвійного підкреслення можна поки що ігнорувати; функції, які не оточені подвійним підкресленням, є *загальнодоступним інтерфейсом* [list type](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists). Отже, якщо ви хочете відсортувати список картоплі відповідно до `dir`, вам слід спробувати \n"
"> ~~~\n"
"> potatoes.sort()\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Припустимо, Pandas було імпортовано, а дані Gapminder про ВВП для Європи завантажено як `data`. Потім скористайтеся `dir`, щоб знайти функцію, яка друкує середній ВВП на душу населення для всіх європейських країн за кожен рік, коли інформація доступна."

#: python-novice-gapminder/_episodes/08-data-frames.md:550
msgid ""
">\n"
"> > ## Solution\n"
"> > Among many choices, dir lists the `median()` function as a possibility.  Thus,\n"
"> > ~~~\n"
"> > data.median()\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> > ## Рішення\n"
"> > Серед багатьох варіантів dir пропонує функцію `median()` як можливість. Таким чином,\n"
"> > ~~~\n"
"> > data.median()\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/08-data-frames.md:561
msgid "> ## Interpretation"
msgstr "> ## Інтерпретація"

#: python-novice-gapminder/_episodes/08-data-frames.md:562
msgid ""
">\n"
"> Poland's borders have been stable since 1945,\n"
"> but changed several times in the years before then.\n"
"> How would you handle this if you were creating a table of GDP per capita for Poland\n"
"> for the entire twentieth century?"
msgstr ""
">\n"
"> Кордони Польщі стабільні з 1945 року,\n"
"> але кілька разів змінювалися перед цим.\n"
"> Як би ви впоралися з цим, якби створювали таблицю ВВП на душу населення для Польщі\n"
"> на все ХХ століття?"

#: python-novice-gapminder/_episodes/08-data-frames.md:570
msgid ""
"[pandas-dataframe]: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\n"
"[pandas-series]: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html\n"
"[numpy]: http://www.numpy.org/"
msgstr ""
"[pandas-dataframe]: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\n"
"[pandas-series]: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html\n"
"[numpy]: http://www.numpy.org/"

# Front Matter
#: python-novice-gapminder/_episodes/09-plotting.md:1
msgid ""
"---\n"
"title: \"Plotting\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I plot my data?\"\n"
"- \"How can I save my plot for publishing?\"\n"
"objectives:\n"
"- \"Create a time series plot showing a single data set.\"\n"
"- \"Create a scatter plot showing relationship between two data sets.\"\n"
"keypoints:\n"
"- \"[`matplotlib`](https://matplotlib.org/) is the most widely used scientific plotting library in Python.\"\n"
"- \"Plot data directly from a Pandas dataframe.\"\n"
"- \"Select and transform data, then plot it.\"\n"
"- \"Many styles of plot are available: see the [Python Graph Gallery](https://python-graph-gallery.com/matplotlib/) for more options.\"\n"
"- \"Can plot many sets of data together.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Побудова графіків\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"Я побудувати графік за моїми даними?\"\n"
"- \"Як зберегти графік для публікації?\"\n"
"objectives:\n"
"- \"Створити графік часового ряду для одного набору даних.\"\n"
"- \"Створити діаграму розсіювання, що показує зв’язок між двома наборами даних.\"\n"
"keypoints:\n"
"- \"[`matplotlib`](https://matplotlib.org/) є найбільш розповсюдженою графічною бібліотекою у Python.\"\n"
"- \"Будуйте графіки безпосередньо з фрейму даних Pandas.\"\n"
"- \"Виберіть і трансформуйте дані, а потім будуйте графік.\"\n"
"- \"Доступно багато стилів графіку: перегляньте [Python Graph Gallery](https://python-graph-gallery.com/matplotlib/) for more options.\"\n"
"- \"Можна будувати разом графіки за багатьма наборами даних.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/09-plotting.md:18
msgid ""
"## [`matplotlib`](https://matplotlib.org/) is the most widely used "
"scientific plotting library in Python."
msgstr ""
"## [`matplotlib`](https://matplotlib.org/)  є найбільш відомою науковою "
"бібіліотекою візуалізації даних  на Python."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:20
msgid ""
"*   Commonly use a sub-library called "
"[`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."
msgstr ""
"*   Найчастіше використовують підбібліотеку, що має назву "
"[`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:21
msgid ""
"*   The Jupyter Notebook will render plots inline if we ask it to using a "
"\"magic\" command."
msgstr ""
"*   Jupyter Notebook відтворюватиме графікі вбудовано, якщо ми попросимо "
"його про це за допомогою «магічної» команди"

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:23
msgid ""
"~~~\n"
"%matplotlib inline\n"
"import matplotlib.pyplot as plt\n"
"~~~"
msgstr ""
"~~~\n"
"%matplotlib inline\n"
"import matplotlib.pyplot as plt\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:29
msgid "*   Simple plots are then (fairly) simple to create."
msgstr "*   Прості графіки (досить) легко створити."

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:31
msgid ""
"~~~\n"
"time = [0, 1, 2, 3]\n"
"position = [0, 100, 200, 300]\n"
"\n"
"plt.plot(time, position)\n"
"plt.xlabel('Time (hr)')\n"
"plt.ylabel('Position (km)')\n"
"~~~"
msgstr ""
"~~~\n"
"time = [0, 1, 2, 3]\n"
"position = [0, 100, 200, 300]\n"
"\n"
"plt.plot(time, position)\n"
"plt.xlabel('Time (hr)')\n"
"plt.ylabel('Position (km)')\n"
"~~~"

#: python-novice-gapminder/_episodes/09-plotting.md:41
msgid ""
"![Simple Position-Time Plot]({{ site.baseurl }}/fig/9_simple_position_time_plot.svg)\n"
"## Plot data directly from a [`Pandas dataframe`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."
msgstr ""
"![Simple Position-Time Plot]({{ site.baseurl }}/fig/9_simple_position_time_plot.svg)\n"
"## Побудова графіків безпосередньо з [`Pandas dataframe`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:44
msgid ""
"*   We can also plot [Pandas dataframes](https://pandas.pydata.org/pandas-"
"docs/stable/generated/pandas.DataFrame.html)."
msgstr ""
"*   Можна також використовувати [Pandas "
"dataframes](https://pandas.pydata.org/pandas-"
"docs/stable/generated/pandas.DataFrame.html)."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:45
msgid ""
"*   This implicitly uses "
"[`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."
msgstr ""
"*   Це опосередковано використовує "
"[`matplotlib.pyplot`](https://matplotlib.org/api/pyplot_api.html)."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:46
msgid ""
"*   Before plotting, we convert the column headings from a `string` to "
"`integer` data type, since they represent numerical values"
msgstr ""
"*   Перед побудовою графіка ми перетворюємо заголовки стовпців з типу даних "
"\"string\" на \"integer\", оскільки вони представляють числові значення."

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:48
msgid ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"\n"
"# Extract year from last 4 characters of each column name\n"
"# The current column names are structured as 'gdpPercap_(year)', \n"
"# so we want to keep the (year) part only for clarity when plotting GDP vs. years\n"
"# To do this we use strip(), which removes from the string the characters stated in the argument\n"
"# This method works on strings, so we call str before strip()\n"
"\n"
"years = data.columns.str.strip('gdpPercap_')\n"
"\n"
"# Convert year values to integers, saving results back to dataframe\n"
"\n"
"data.columns = years.astype(int)\n"
"\n"
"data.loc['Australia'].plot()\n"
"~~~"
msgstr ""
"~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"\n"
"# Вилучаємо рік з останніх 4 символів назви кожного стовпця\n"
"# Поточні назви стовпців структуровані як 'gdpPercap_(year)', \n"
"# тому ми зберігаємо частину назви (рік) лише для чіткості під час побудови ВВП за роками\n"
"# Для цього ми використовуємо strip(), яка видаляє з рядка символи, що зазначені як аргумент\n"
"# Цей метод працює з рядками, тому ми викликаємо str перед strip()\n"
"\n"
"years = data.columns.str.strip('gdpPercap_')\n"
"\n"
"# Перетворіть значення років в цілі числа, зберігаючи результати назад у  dataframe\n"
"\n"
"data.columns = years.astype(int)\n"
"\n"
"data.loc['Australia'].plot()\n"
"~~~"

#: python-novice-gapminder/_episodes/09-plotting.md:69
msgid ""
"![GDP plot for Australia]({{ site.baseurl }}/fig/9_gdp_australia.svg)\n"
"## Select and transform data, then plot it."
msgstr ""
"![Графік ВВП Австралії]({{ site.baseurl }}/fig/9_gdp_australia.svg)\n"
"## Виберіть і трансформуйте дані, а потім будуйте графік»"

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:72
msgid ""
"*   By default, [`DataFrame.plot`](https://pandas.pydata.org/pandas-"
"docs/stable/generated/pandas.DataFrame.plot.html#pandas.DataFrame.plot) "
"plots with the rows as the X axis."
msgstr ""
"*  За замовчуванням, [`DataFrame.plot`](https://pandas.pydata.org/pandas-"
"docs/stable/generated/pandas.DataFrame.plot.html#pandas.DataFrame.plot) "
"зображує рядки на осі X."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:73
msgid "*   We can transpose the data in order to plot multiple series."
msgstr ""
"*   Ми можемо транспонувати дані, щоб побудувати кілька графіків разом."

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:75
msgid ""
"~~~\n"
"data.T.plot()\n"
"plt.ylabel('GDP per capita')\n"
"~~~"
msgstr ""
"~~~\n"
"data.T.plot()\n"
"plt.ylabel('ВВП на душу населення')\n"
"~~~"

#: python-novice-gapminder/_episodes/09-plotting.md:81
msgid ""
"![GDP plot for Australia and New Zealand]({{ site.baseurl }}/fig/9_gdp_australia_nz.svg)\n"
"## Many styles of plot are available."
msgstr ""
"![Графіки ВВП для Австралії та Нової Зеландії]({{ site.baseurl }}/fig/9_gdp_australia_nz.svg)\n"
"## Доступно багато типів графіків."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:84
msgid "*   For example, do a bar plot using a fancier style."
msgstr ""
"*  Наприклад, створіть стовпчикову діаграму, використовуючи більш вишуканий "
"стиль."

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:86
msgid ""
"~~~\n"
"plt.style.use('ggplot')\n"
"data.T.plot(kind='bar')\n"
"plt.ylabel('GDP per capita')\n"
"~~~"
msgstr ""
"~~~\n"
"plt.style.use('ggplot')\n"
"data.T.plot(kind='bar')\n"
"plt.ylabel('ВВП на душу населення)\n"
"~~~"

#: python-novice-gapminder/_episodes/09-plotting.md:93
msgid "![GDP barplot for Australia]({{ site.baseurl }}/fig/9_gdp_bar.svg)"
msgstr "![ Стовпчикова діаграма для ВВП Австралії]({{ site.baseurl }}/fig/9_gdp_bar.svg)"

# header
#: python-novice-gapminder/_episodes/09-plotting.md:95
msgid ""
"## Data can also be plotted by calling the `matplotlib` `plot` function "
"directly."
msgstr ""
"## Графік також можна побудувати, викликавши безпосередньо функцію `plot` "
"бібліотеки `matplotlib` ."

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:96
msgid "*   The command is `plt.plot(x, y)`"
msgstr "*   Формат команди є таким: `plt.plot(x, y)`"

# unordered list
#: python-novice-gapminder/_episodes/09-plotting.md:97
msgid ""
"*   The color / format of markers can also be specified as an optical "
"argument: e.g. 'b-' is a blue line, 'g--' is a green dashed line."
msgstr ""
"*   Колір / формат маркерів також можна вказати як оптичний аргумент: напр. "
"«b-» — синя лінія, «g--» — зелена пунктирна лінія."

# header
#: python-novice-gapminder/_episodes/09-plotting.md:99
msgid "## Get Australia data from dataframe"
msgstr "## Отримаємо дані Австралії з dataframe."

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:101
msgid ""
"~~~\n"
"years = data.columns\n"
"gdp_australia = data.loc['Australia']\n"
"\n"
"plt.plot(years, gdp_australia, 'g--')\n"
"~~~"
msgstr ""
"~~~\n"
"years = data.columns\n"
"gdp_australia = data.loc['Australia']\n"
"\n"
"plt.plot(years, gdp_australia, 'g--')\n"
"~~~"

#: python-novice-gapminder/_episodes/09-plotting.md:109
msgid ""
"![GDP formatted plot for Australia]({{ site.baseurl }}/fig/9_gdp_australia_formatted.svg)"
msgstr ""
"![Відформатований графік ВВП для "
"Австралії]({{ site.baseurl }}/fig/9_gdp_australia_formatted.svg)"

# header
#: python-novice-gapminder/_episodes/09-plotting.md:111
msgid "## Can plot many sets of data together."
msgstr "## Можна побудувати кілька графіків за різними наборами даних разом"

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:113
msgid ""
"~~~\n"
"# Select two countries' worth of data.\n"
"gdp_australia = data.loc['Australia']\n"
"gdp_nz = data.loc['New Zealand']\n"
"\n"
"# Plot with differently-colored markers.\n"
"plt.plot(years, gdp_australia, 'b-', label='Australia')\n"
"plt.plot(years, gdp_nz, 'g-', label='New Zealand')\n"
"\n"
"# Create legend.\n"
"plt.legend(loc='upper left')\n"
"plt.xlabel('Year')\n"
"plt.ylabel('GDP per capita ($)')\n"
"~~~"
msgstr ""
"~~~\n"
"# Виберіть дані для двох країн.\n"
"gdp_australia = data.loc['Australia']\n"
"gdp_nz = data.loc['New Zealand']\n"
"\n"
"# Побудуйте графіки з маркерами різних кольорів.\n"
"plt.plot(years, gdp_australia, 'b-', label='Australia')\n"
"plt.plot(years, gdp_nz, 'g-', label='New Zealand')\n"
"\n"
"# Створіть легенду.\n"
"plt.legend(loc='upper left')\n"
"plt.xlabel('Year')\n"
"plt.ylabel('ВВП на душу населення ($)')\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:129
msgid "> ## Adding a Legend"
msgstr "> ## Додавання легенди"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:131
msgid ""
"> Often when plotting multiple datasets on the same figure it is desirable "
"to have "
msgstr ""
"> Часто при побудові графіків з кількох наборів даних разом бажано мати "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:132
msgid "> a legend describing the data."
msgstr "> легенду,  що містить опис даних."

#: python-novice-gapminder/_episodes/09-plotting.md:133
msgid ""
">\n"
"> This can be done in `matplotlib` in two stages:\n"
"> \n"
"> * Provide a label for each dataset in the figure:\n"
">\n"
"> ~~~\n"
"> plt.plot(years, gdp_australia, label='Australia')\n"
"> plt.plot(years, gdp_nz, label='New Zealand')\n"
"> ~~~\n"
">\n"
"> * Instruct `matplotlib` to create the legend.\n"
">\n"
"> ~~~\n"
"> plt.legend()\n"
"> ~~~\n"
">\n"
"> By default matplotlib will attempt to place the legend in a suitable position. If you\n"
"> would rather specify a position this can be done with the `loc=` argument, e.g to place\n"
"> the legend in the upper left corner of the plot, specify `loc='upper left'`\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Легенда може бути створеною  in `matplotlib` за два кроки:\n"
"> \n"
"> * Забезпечимо мітку для кожного набору даних на графіку:\n"
">\n"
"> ~~~\n"
"> plt.plot(years, gdp_australia, label='Australia')\n"
"> plt.plot(years, gdp_nz, label='New Zealand')\n"
"> ~~~\n"
">\n"
"> * Доручимо `matplotlib` створити легенду.\n"
">\n"
"> ~~~\n"
"> plt.legend()\n"
"> ~~~\n"
">\n"
"> За замовчуванням matplotlib спробує розмістити легенду у відповідному місці. Якщо \n"
"> необхідно вказати конкретне розташування, можна застосувати аргументи функції `loc=`, наприклад, щоб розмістити \n"
"> легенду в лівому верхньому куті графіку, задайте `loc='upper left'`\n"
"> {: .language-python}"

#: python-novice-gapminder/_episodes/09-plotting.md:156
msgid ""
"![GDP formatted plot for Australia and New Zealand]({{ site.baseurl }}/fig/9_gdp_australia_nz_formatted.svg)\n"
"*   Plot a scatter plot correlating the GDP of Australia and New Zealand\n"
"*   Use either `plt.scatter` or `DataFrame.plot.scatter`"
msgstr ""
"![Відформатований графік ВВП Австралії та Нової Зеландії]({{ site.baseurl }}/fig/9_gdp_australia_nz_formatted.svg)\n"
"*   Побудуємо точкову діаграму співвідношення ВВП Австралії та Нової Зеландії\n"
"*   Використаємо `plt.scatter` або `DataFrame.plot.scatter`"

# code block
#: python-novice-gapminder/_episodes/09-plotting.md:160
msgid ""
"~~~\n"
"plt.scatter(gdp_australia, gdp_nz)\n"
"~~~"
msgstr ""
"~~~\n"
"plt.scatter(gdp_australia, gdp_nz)\n"
"~~~"

#: python-novice-gapminder/_episodes/09-plotting.md:165
msgid ""
"![GDP correlation using plt.scatter]({{ site.baseurl }}/fig/9_gdp_correlation_plt.svg)\n"
"~~~\n"
"data.T.plot.scatter(x = 'Australia', y = 'New Zealand')\n"
"~~~\n"
"{: .language-python}"
msgstr ""
"![Співвідношення ВВП  з використанням plt.scatter]({{ site.baseurl }}/fig/9_gdp_correlation_plt.svg)\n"
"~~~\n"
"data.T.plot.scatter(x = 'Австралія', y = 'Нова Зеландія')\n"
"~~~\n"
"{: .language-python}"

#: python-novice-gapminder/_episodes/09-plotting.md:171
msgid ""
"![GDP correlation using "
"data.T.plot.scatter]({{ site.baseurl }}/fig/9_gdp_correlation_data.svg)"
msgstr ""
"![Кореляція ВВП на основі "
"data.T.plot.scatter]({{ site.baseurl }}/fig/9_gdp_correlation_data.svg)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:173
msgid "> ## Minima and Maxima"
msgstr "> ## Мінімум та максимум"

#: python-novice-gapminder/_episodes/09-plotting.md:174
msgid ""
">\n"
"> Fill in the blanks below to plot the minimum GDP per capita over time\n"
"> for all the countries in Europe.\n"
"> Modify it again to plot the maximum GDP per capita over time for Europe.\n"
">\n"
"> ~~~\n"
"> data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> data_europe.____.plot(label='min')\n"
"> data_europe.____\n"
"> plt.legend(loc='best')\n"
"> plt.xticks(rotation=90)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> > data_europe.min().plot(label='min')\n"
"> > data_europe.max().plot(label='max')\n"
"> > plt.legend(loc='best')\n"
"> > plt.xticks(rotation=90)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ![Minima Maxima Solution]({{ site.baseurl }}/fig/9_minima_maxima_solution.png)"
msgstr ""
">\n"
"> Заповніть порожні поля нижче, щоб побудувати графік мінімального ВВП на душу населення протягом часу\n"
"> для всіх країн Європи.\n"
"> Потім побудуйте графік максимального ВВП на душу населення в Європі.\n"
">\n"
"> ~~~\n"
"> data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> data_europe.____.plot(label='min')\n"
"> data_europe.____\n"
"> plt.legend(loc='best')\n"
"> plt.xticks(rotation=90)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')\n"
"> > data_europe.min().plot(label='min')\n"
"> > data_europe.max().plot(label='max')\n"
"> > plt.legend(loc='best')\n"
"> > plt.xticks(rotation=90)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ![Мінімум Максимум Рішення]({{ site.baseurl }}/fig/9_minima_maxima_solution.png)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:202
msgid "> ## Correlations"
msgstr "> ## Співвідношення"

#: python-novice-gapminder/_episodes/09-plotting.md:203
msgid ""
">\n"
"> Modify the example in the notes to create a scatter plot showing\n"
"> the relationship between the minimum and maximum GDP per capita\n"
"> among the countries in Asia for each year in the data set.\n"
"> What relationship do you see (if any)?\n"
">\n"
"> ~~~\n"
"> data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.describe().T.plot(kind='scatter', x='min', y='max')\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ![Correlations Solution 1]({{ site.baseurl }}/fig/9_correlations_solution1.svg)\n"
"> >\n"
"> > No particular correlations can be seen between the minimum and maximum gdp values\n"
"> > year on year. It seems the fortunes of asian countries do not rise and fall together."
msgstr ""
">\n"
"> Модифікуйте приклад у примітках, щоб створити діаграму розсіювання, що показує\n"
"> співвідношення між мінімальним і максимальним ВВП на душу населення\n"
"> серед країн Азії за кожен рік у наборі даних.\n"
">Який зв’язок ви бачите (якщо такий є)?\n"
">\n"
"> ~~~\n"
"> data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.describe().T.plot(kind='scatter', x='min', y='max')\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ![Кореляції Рішення 1]({{ site.baseurl }}/fig/9_correlations_solution1.svg)\n"
"> >\n"
"> > Жодних особливих кореляцій між мінімальними та максимальними значеннями ВВП не простежується\n"
"> > з року в рік. Здається, статки азіатських країн не зростає і не падає разом."

#: python-novice-gapminder/_episodes/09-plotting.md:222
msgid ""
">\n"
"> You might note that the variability in the maximum is much higher than\n"
"> that of the minimum.  Take a look at the maximum and the max indexes:\n"
">\n"
"> ~~~\n"
"> data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.max().plot()\n"
"> print(data_asia.idxmax())\n"
"> print(data_asia.idxmin())\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ![Correlations Solution 2]({{ site.baseurl }}/fig/9_correlations_solution2.png)\n"
"> >\n"
"> > Seems the variability in this value is due to a sharp drop after 1972.\n"
"> > Some geopolitics at play perhaps? Given the dominance of oil producing countries,\n"
"> > maybe the Brent crude index would make an interesting comparison?\n"
"> > Whilst Myanmar consistently has the lowest gdp, the highest gdb nation has varied\n"
"> > more notably."
msgstr ""
">\n"
"> Можна помітити, що варіабельність максимуму набагато вища, ніж\n"
"> мінімуму.  Подивіться на максимальний і максимальний індекси::\n"
">\n"
"> ~~~\n"
"> data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')\n"
"> data_asia.max().plot()\n"
"> print(data_asia.idxmax())\n"
"> print(data_asia.idxmin())\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ![Кореляції Рішення 2]({{ site.baseurl }}/fig/9_correlations_solution2.png)\n"
"> >\n"
"> > Здається, варіабельність цього значення пов’язана з різким падінням після 1972 року\n"
"> > Можливо, якісь геополітичні фактори грають роль? Враховуючи домінування нафтовидобувних країн,\n"
"> > можливо, індекс нафти Brent стане цікавим порівнянням?\n"
"> > У той час як М’янма постійно має найнижчий ВВП, найвищий ВВП країн варіюється \n"
"> > більш помітно."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:244
msgid "> ## More Correlations"
msgstr "> ## Більше кореляцій"

#: python-novice-gapminder/_episodes/09-plotting.md:245
msgid ""
">\n"
"> This short program creates a plot showing\n"
"> the correlation between GDP and life expectancy for 2007,\n"
"> normalizing marker size by population:\n"
">\n"
"> ~~~\n"
"> data_all = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> data_all.plot(kind='scatter', x='gdpPercap_2007', y='lifeExp_2007',\n"
">               s=data_all['pop_2007']/1e6)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Using online help and other resources,\n"
"> explain what each argument to `plot` does.\n"
">\n"
"> > ## Solution\n"
"> > ![More Correlations Solution]({{ site.baseurl }}/fig/9_more_correlations_solution.svg)\n"
"> >\n"
"> > A good place to look is the documentation for the plot function -\n"
"> > help(data_all.plot).\n"
"> >\n"
"> > kind - As seen already this determines the kind of plot to be drawn.\n"
"> >\n"
"> > x and y - A column name or index that determines what data will be\n"
"> > placed on the x and y axes of the plot\n"
"> >\n"
"> > s - Details for this can be found in the documentation of plt.scatter.\n"
"> > A single number or one value for each data point. Determines the size\n"
"> > of the plotted points."
msgstr ""
">\n"
"> Ця невеличка програма створює графік, який демонструє\n"
"> кореляцію між ВВП  і очікуваною тривалістю життя на 2007 рік,\n"
"> нормалізуючи розмір маркерів за чисельністю населення:\n"
">\n"
"> ~~~\n"
"> data_all = pd.read_csv('data/gapminder_all.csv', index_col='country')\n"
"> data_all.plot(kind='scatter', x='ВВП_на_душу_населення_2007', y='Тривалість_Життя_2007',\n"
">               s=data_all['pop_2007']/1e6)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Використовуючи онлайн help та інші ресурси,\n"
"> поясніть кожний аргумент функції `plot`.\n"
">\n"
"> > ## Рішення\n"
"> > ![Більше кореляцій Рішення]({{ site.baseurl }}/fig/9_more_correlations_solution.svg)\n"
"> >\n"
"> > Багато корисної інформації щодо функції  plot  -\n"
"> > help(data_all.plot).\n"
"> >\n"
"> > kind - Як уже було показано, цей параметр визначає тип графіку, який буде створено.\n"
"> >\n"
"> > x та y - Назва стовпця або індекс, який визначає, які дані будуть\n"
"> > розміщені на осях x і y графіка\n"
"> > \n"
"> > s - Подробиці щодо цього параметру є в документації  по plt.scatter.\n"
"> > Це одне число або одне значення для кожної точки даних.  Визначає розмір\n"
"> > маркера."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:277
msgid "> ## Saving your plot to a file"
msgstr "> ## Збереження вашого графіка в файл"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:279
msgid ""
"> If you are satisfied with the plot you see you may want to save it to a "
"file,"
msgstr ""
"> Якщо вас задовольняє графік, який ви бачите, ви можете зберегти його у "
"файл,"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:280
msgid "> perhaps to include it in a publication. There is a function in the"
msgstr "> можливо, щоб включити його у публікацію. Існує функція в "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:281
msgid "> matplotlib.pyplot module that accomplishes this:"
msgstr ">  модулі matplotlib.pyplot , яка виконує це:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:282
msgid ""
"> "
"[savefig](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)."
msgstr ""
"> "
"[savefig](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:283
msgid "> Calling this function, e.g. with"
msgstr "> Виклик цієї функції, наприклад, наступним чином:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:284
#: python-novice-gapminder/_episodes/09-plotting.md:286
msgid "> ~~~"
msgstr "> ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:285
msgid "> plt.savefig('my_figure.png')"
msgstr "> plt.savefig('my_figure.png')"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:287
msgid "> {: .language-python}"
msgstr "> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:289
msgid ""
"> will save the current figure to the file `my_figure.png`. The file format"
msgstr "> збереже поточний графік у файл `my_figure.png`. Формат файла"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:290
msgid ""
"> will automatically be deduced from the file name extension (other formats"
msgstr ""
"> буде автоматично визначений з розширення файлу у його назві (інші формати"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:291
msgid "> are pdf, ps, eps and svg)."
msgstr "> - це pdf, ps, eps and svg)."

#: python-novice-gapminder/_episodes/09-plotting.md:292
msgid ""
">\n"
"> Note that functions in `plt` refer to a global figure variable\n"
"> and after a figure has been displayed to the screen (e.g. with `plt.show`) \n"
"> matplotlib will make this  variable refer to a new empty figure.\n"
"> Therefore, make sure you call `plt.savefig` before the plot is displayed to\n"
"> the screen, otherwise you may find a file with an empty plot.\n"
">\n"
"> When using dataframes, data is often generated and plotted to screen in one line,\n"
"> and `plt.savefig` seems not to be a possible approach.\n"
"> One possibility to save the figure to file is then to\n"
">\n"
"> * save a reference to the current figure in a local variable (with `plt.gcf`) \n"
"> * call the `savefig` class method from that variable.\n"
">\n"
"> ~~~\n"
"> fig = plt.gcf() # get current figure\n"
"> data.plot(kind='bar')\n"
"> fig.savefig('my_figure.png')\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Зауважимо, що функції в `plt` посилаються на глобальну змінну графіка\n"
"> і після того, як графік виведено на екран (наприклад, за допомогою `plt.show`) \n"
"> matplotlib змусить цю змінну посилатися на новий порожній графік.\n"
"> Тому переконайтеся, що ви викликаєте `plt.savefig` перед тим, як графік буде відображено\n"
"> на екрані, інакше ви можете створити файл із порожнім графіком.\n"
">\n"
"> При використанні  dataframes дані часто генеруються та відображаються на екрані в один рядок,\n"
"> тому `plt.savefig` вважається не найкращім рішенням.\n"
"> Однією з можливостей зберегти графік у файл є\n"
">\n"
"> * зберегти посилання на поточний графік у  локальну змінну  (з `plt.gcf`) ,\n"
"> * та викликати метод `savefig` з класу тієї змінної.\n"
">\n"
"> ~~~\n"
"> fig = plt.gcf() #  посилання на поточний графік у локальній змінній \n"
"> data.plot(kind='bar')\n"
"> fig.savefig('my_figure.png')\n"
"> ~~~\n"
"> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/09-plotting.md:314
msgid "> ## Making your plots accessible"
msgstr "> ## Зробіть ваш графік доступним"

#: python-novice-gapminder/_episodes/09-plotting.md:315
msgid ""
">\n"
"> Whenever you are generating plots to go into a paper or a presentation, there are a few things you can do to make sure that everyone can understand your plots.\n"
"> * Always make sure your text is large enough to read. Use the `fontsize` parameter in `xlabel`, `ylabel`, `title`, and `legend`, and [`tick_params` with `labelsize`](https://matplotlib.org/2.1.1/api/_as_gen/matplotlib.pyplot.tick_params.html) to increase the text size of the numbers on your axes.\n"
"> * Similarly, you should make your graph elements easy to see. Use `s` to increase the size of your scatterplot markers and `linewidth` to increase the sizes of your plot lines.\n"
"> * Using color (and nothing else) to distinguish between different plot elements will make your plots unreadable to anyone who is colorblind, or who happens to have a black-and-white office printer. For lines, the `linestyle` parameter lets you use different types of lines. For scatterplots, `marker` lets you change the shape of your points. If you're unsure about your colors, you can use [Coblis](https://www.color-blindness.com/coblis-color-blindness-simulator/) or [Color Oracle](https://colororacle.org/) to simulate what your plots would look like to those with colorblindness."
msgstr ""
">\n"
"> Щоразу, коли ви створюєте графіки для статті чи презентації, ви можете зробити кілька речей, щоб переконатися, що всі зрозуміють ваші графіки.\n"
"> * Завжди переконайтеся, що ваш текст достатньо великий для читання. Використовуйте параметр `fontsize` в `xlabel`, `ylabel`, `title`, та `legend`, and [`tick_params` with `labelsize`](https://matplotlib.org/2.1.1/api/_as_gen/matplotlib.pyplot.tick_params.html) щоб збільшити розмір тексту чисел на ваших осях.\n"
"> * Подібним чином, ви маєте зробити елементи графіка легкими для перегляду. Використовуйте `s` щоб збільшити розмір маркерів діаграми розсіювання, і `linewidth` щоб збільшити розміри ліній вашого графіка.\n"
"> * Використання кольору (і нічого іншого) для розрізнення різних елементів графіку зробить ваші графіки нечитабельними для будь-кого, хто є дальтоніком або має чорно-білий офісний принтер. Для ліній параметр `linestyle` дозволяє використовувати різні типи ліній. Для діаграм розсіювання `marker` дозволяє змінювати форму ваших точок. Якщо ви не впевнені щодо своїх кольорів, ви можете скористатися [Coblis](https://www.color-blindness.com/coblis-color-blindness-simulator/) or [Color Oracle](https://colororacle.org/) щоб імітувати, як виглядатимуть ваші графіки для людей з дальтонізмом"

# Front Matter
#: python-novice-gapminder/_episodes/10-lunch.md:1
msgid ""
"---\n"
"layout: break\n"
"title: \"Lunch\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 45\n"
"---"
msgstr ""
"---\n"
"layout: break\n"
"title: \"Ланч\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 45\n"
"---"

#: python-novice-gapminder/_episodes/10-lunch.md:8
msgid ""
"Over lunch, reflect on and discuss the following:\n"
"* What sort of packages might you use in Python and why would you use them?\n"
"* How would data need to be formatted to be used in Pandas data frames? Would the data you have meet these requirements?\n"
"* What limitations or problems might you run into when thinking about how to apply what we've learned to your own projects or data?"
msgstr ""
"Під час обіду поміркуйте та обговоріть наступне:\n"
"* Які типи пакетів ви можете використовувати в Python і чому ви їх використовуєте?\n"
"* Як мають бути відформатовані дані, щоб використовувати їх у фреймах даних Pandas? Чи відповідатимуть ваші дані цим вимогам?\n"
"* З якими обмеженнями або проблемами ви можете зіткнутися, коли думаєте про те, як застосувати те, що ми дізналися, до ваших власних проектів або даних?"

# Front Matter
#: python-novice-gapminder/_episodes/11-lists.md:1
msgid ""
"---\n"
"title: \"Lists\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I store multiple values?\"\n"
"objectives:\n"
"- \"Explain why programs need collections of values.\"\n"
"- \"Write programs that create flat lists, index them, slice them, and modify them through assignment and method calls.\"\n"
"keypoints:\n"
"- \"A list stores many values in a single structure.\"\n"
"- \"Use an item's index to fetch it from a list.\"\n"
"- \"Lists' values can be replaced by assigning to them.\"\n"
"- \"Appending items to a list lengthens it.\"\n"
"- \"Use `del` to remove items from a list entirely.\"\n"
"- \"The empty list contains no values.\"\n"
"- \"Lists may contain values of different types.\"\n"
"- \"Character strings can be indexed like lists.\"\n"
"- \"Character strings are immutable.\"\n"
"- \"Indexing beyond the end of the collection is an error.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Списки\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу зберігати набори значень?\"\n"
"objectives:\n"
"- \"Пояснити, навіщо програмам потрібні колекції значень\"\n"
"- \"Писати програми, які створюють плоскі списки, індексують їх, розрізають і змінюють через призначення та виклики методів.\"\n"
"keypoints:\n"
"- \"Список зберігає багато значень в одній структурі.\"\n"
"- \"Використовуйте індекс елемента, щоб отримати його зі списку.\"\n"
"- \"Значення списків можна замінити шляхом присвоєння.\"\n"
"- \"Додавання елементів до списку подовжує його\"\n"
"- \"Використовуйте `del`, щоб повністю видалити елементи зі списку.\"\n"
"- \"Порожній список не містить значень.\"\n"
"- \"Списки можуть містити значення різних типів.\"\n"
"- \"Рядки символів можна індексувати як списки.\"\n"
"- \"Рядки символів є незмінними.\"\n"
"- \"Індексація за межами колекції є помилкою..\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/11-lists.md:22
msgid "## A list stores many values in a single structure."
msgstr "## Список є структурою даних, яка містить в собі багато значень."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:24
msgid ""
"*   Doing calculations with a hundred variables called `pressure_001`, "
"`pressure_002`, etc.,"
msgstr ""
"*   Виконання обчислень із сотнею змінних під назвою `pressure_001`, "
"`pressure_002` тощо,"

#: python-novice-gapminder/_episodes/11-lists.md:25
msgid ""
"    would be at least as slow as doing them by hand.\n"
"*   Use a *list* to store many values together.\n"
"    *   Contained within square brackets `[...]`.\n"
"    *   Values separated by commas `,`.\n"
"*   Use `len` to find out how many values are in a list."
msgstr ""
"    було б принаймні так само повільно, як робити їх вручну.\n"
"*   Використовуйте *список* для зберігання багатьох значень разом.\n"
"    *   Список позначається квадратними дужками `[...]`.\n"
"    *   Значення розділяються комами `,`.\n"
"*   Використовуйте `len`, щоб дізнатися, скільки значень у списку."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:31
msgid ""
"~~~\n"
"pressures = [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"print('pressures:', pressures)\n"
"print('length:', len(pressures))\n"
"~~~"
msgstr ""
"~~~\n"
"pressures = [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"print('pressures:', pressures)\n"
"print('length:', len(pressures))\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:36
msgid ""
"{: .language-python}\n"
"~~~\n"
"pressures: [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"length: 5\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"pressures: [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"length: 5\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:43
msgid "## Use an item's index to fetch it from a list."
msgstr "## Щоб отримати елемент списку, використовуйте його індекс."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:45
msgid "*   Just like strings."
msgstr "*   Це робиться так само, як і при роботі з рядками."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:47
msgid ""
"~~~\n"
"print('zeroth item of pressures:', pressures[0])\n"
"print('fourth item of pressures:', pressures[4])\n"
"~~~"
msgstr ""
"~~~\n"
"print('zeroth item of pressures:', pressures[0])\n"
"print('fourth item of pressures:', pressures[4])\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:51
msgid ""
"{: .language-python}\n"
"~~~\n"
"zeroth item of pressures: 0.273\n"
"fourth item of pressures: 0.276\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"zeroth item of pressures: 0.273\n"
"fourth item of pressures: 0.276\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:58
msgid "## Lists' values can be replaced by assigning to them."
msgstr "## Значення елементів списків можна замінити шляхом присвоєння."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:60
msgid ""
"*   Use an index expression on the left of assignment to replace a value."
msgstr ""
"*   Використовуйте індексний вираз ліворуч від знаку присвоєння, щоб "
"замінити значення."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:62
msgid ""
"~~~\n"
"pressures[0] = 0.265\n"
"print('pressures is now:', pressures)\n"
"~~~"
msgstr ""
"~~~\n"
"pressures[0] = 0.265\n"
"print('нові значення pressures:', pressures)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:66
msgid ""
"{: .language-python}\n"
"~~~\n"
"pressures is now: [0.265, 0.275, 0.277, 0.275, 0.276]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Нові значення pressures: [0.265, 0.275, 0.277, 0.275, 0.276]\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:72
msgid "## Appending items to a list lengthens it."
msgstr "## Додавання елементів до списку подовжує його."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:74
msgid "*   Use `list_name.append` to add items to the end of a list."
msgstr ""
"*  Щоб додати елементи в кінець списку, використовуйте `list_name.append`."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:76
msgid ""
"~~~\n"
"primes = [2, 3, 5]\n"
"print('primes is initially:', primes)\n"
"primes.append(7)\n"
"primes.append(9)\n"
"print('primes has become:', primes)\n"
"~~~"
msgstr ""
"~~~\n"
"primes = [2, 3, 5]\n"
"print('початкові значення списку primes:', primes)\n"
"primes.append(7)\n"
"primes.append(9)\n"
"print('список primes змінився:', primes)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:83
msgid ""
"{: .language-python}\n"
"~~~\n"
"primes is initially: [2, 3, 5]\n"
"primes has become: [2, 3, 5, 7, 9]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"початкові значення primes: [2, 3, 5]\n"
"список primes змінився: [2, 3, 5, 7, 9]\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:90
msgid "*   `append` is a *method* of lists."
msgstr "*   `append` є *методом*, який належить до списків."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:91
msgid "    *   Like a function, but tied to a particular object."
msgstr ""
"    *   Методи подібні функціям, але вони прив’язані до певних об’єктів."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:92
msgid "*   Use `object_name.method_name` to call methods."
msgstr ""
"*   Для виклику методів використовується синтаксис  "
"`object_name.method_name` ."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:93
msgid ""
"    *   Deliberately resembles the way we refer to things in a library."
msgstr ""
"    *   Такий запис навмисно нагадує те, як ми посилаємось на щось визначене"
" у будь-якій бібліотеці."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:94
msgid "*   We will meet other methods of lists as we go along."
msgstr ""
"*   По ходу роботи ми познайомимося з іншими методами, визначеними для "
"списків."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:95
msgid "    *   Use `help(list)` for a preview."
msgstr ""
"    *  Якщо бажаєте подивитись на них зараз, використовуйте `help(list)`."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:96
msgid ""
"*   `extend` is similar to `append`, but it allows you to combine two lists."
"  For example:"
msgstr ""
"*  `extend` - це метод, схожий на `append`, але він дозволяє об’єднувати два"
" списки. Наприклад:"

# code block
#: python-novice-gapminder/_episodes/11-lists.md:98
msgid ""
"~~~\n"
"teen_primes = [11, 13, 17, 19]\n"
"middle_aged_primes = [37, 41, 43, 47]\n"
"print('primes is currently:', primes)\n"
"primes.extend(teen_primes)\n"
"print('primes has now become:', primes)\n"
"primes.append(middle_aged_primes)\n"
"print('primes has finally become:', primes)\n"
"~~~"
msgstr ""
"~~~\n"
"teen_primes = [11, 13, 17, 19]\n"
"middle_aged_primes = [37, 41, 43, 47]\n"
"print('поточний список primes:', primes)\n"
"primes.extend(teen_primes)\n"
"print('розширений список primes:', primes)\n"
"primes.append(middle_aged_primes)\n"
"print('фінальний список primes:', primes)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:107
msgid ""
"{: .language-python}\n"
"~~~\n"
"primes is currently: [2, 3, 5, 7, 9]\n"
"primes has now become: [2, 3, 5, 7, 9, 11, 13, 17, 19]\n"
"primes has finally become: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"поточний список primes: [2, 3, 5, 7, 9]\n"
"розширений список primes: [2, 3, 5, 7, 9, 11, 13, 17, 19]\n"
"фінальний список primes: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]]\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:115
msgid ""
"Note that while `extend` maintains the \"flat\" structure of the list, appending a list to a list makes the result\n"
"two-dimensional - the last element in `primes` is a list, not an integer."
msgstr ""
"Зауважимо, що хоча `extend` підтримує \"плоску\" структуру списку, додавання списку до списку дає результат\n"
"двовимірний - останній елемент у `primes` є списком, а не цілим числом."

# header
#: python-novice-gapminder/_episodes/11-lists.md:118
msgid "## Use `del` to remove items from a list entirely."
msgstr "## Щоб повністю видалити елементи зі списку, використовуйте `del`."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:120
msgid ""
"*   `del list_name[index]` removes an item from a list and shortens the "
"list."
msgstr ""
"*   `del list_name[index]` видаляє елемент зі списку та скорочує список."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:121
msgid "*   Not a function or a method, but a statement in the language."
msgstr "*   `del` - це оператор мови програмування, а не функція і не метод."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:123
msgid ""
"~~~\n"
"primes = [2, 3, 5, 7, 9]\n"
"print('primes before removing last item:', primes)\n"
"del primes[4]\n"
"print('primes after removing last item:', primes)\n"
"~~~"
msgstr ""
"~~~\n"
"primes = [2, 3, 5, 7, 9]\n"
"print('список primes перед видаленням останнього елемента:', primes)\n"
"del primes[4]\n"
"print('список primes після видалення останнього елемента:', primes)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:129
msgid ""
"{: .language-python}\n"
"~~~\n"
"primes before removing last item: [2, 3, 5, 7, 9]\n"
"primes after removing last item: [2, 3, 5, 7]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"список primes перед видаленням останнього елемента: [2, 3, 5, 7, 9]\n"
"список primes після видалення останнього елемента: [2, 3, 5, 7]\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:136
msgid "## The empty list contains no values."
msgstr "## Порожній список не містить жодних значень."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:138
msgid ""
"*   Use `[]` on its own to represent a list that doesn't contain any values."
msgstr ""
"*   Щоб створити список, який не містить жодних значень, використовуйте "
"`[]`."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:139
msgid "    *   \"The zero of lists.\""
msgstr "    *  Порожній список - це \"нуль списків.\""

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:140
msgid "*   Helpful as a starting point for collecting values"
msgstr "*   Він є корисним як початкова точка для збору значень"

#: python-novice-gapminder/_episodes/11-lists.md:141
msgid ""
"        (which we will see in the [next episode]({% link _episodes/12-for-"
"loops.md %})."
msgstr ""
"        (ми це побачимо в [наступному епізоді]({% link _episodes/12-for-"
"loops.md %})."

# header
#: python-novice-gapminder/_episodes/11-lists.md:143
msgid "## Lists may contain values of different types."
msgstr "## Списки можуть містити значення різних типів."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:145
msgid "*   A single list may contain numbers, strings, and anything else."
msgstr "*   Один список може містити числа, рядки та будь-що інше."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:147
msgid ""
"~~~\n"
"goals = [1, 'Create lists.', 2, 'Extract items from lists.', 3, 'Modify lists.']\n"
"~~~"
msgstr ""
"~~~\n"
"goals = [1, 'Створити списки.', 2, 'Вилучити елементи із списків.', 3, 'Змінити списки.']\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:152
msgid "## Character strings can be indexed like lists."
msgstr "## Рядки символів можна індексувати як списки."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:154
msgid ""
"*   Get single characters from a character string using indexes in square "
"brackets."
msgstr ""
"*   Отримати окремі символи з рядка символів можна за допомогою індексів у "
"квадратних дужках."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:156
msgid ""
"~~~\n"
"element = 'carbon'\n"
"print('zeroth character:', element[0])\n"
"print('third character:', element[3])\n"
"~~~"
msgstr ""
"~~~\n"
"element = 'carbon'\n"
"print('нульовий символ:', element[0])\n"
"print('третій символ:', element[3])\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:161
msgid ""
"{: .language-python}\n"
"~~~\n"
"zeroth character: c\n"
"third character: b\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"нульовий символ: c\n"
"третій символ: b\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:168
msgid "## Character strings are immutable."
msgstr "## Рядки символів незмінні."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:170
msgid ""
"*   Cannot change the characters in a string after it has been created."
msgstr "*   Неможливо змінити символи в рядку після його створення."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:171
msgid "    *   *Immutable*: can't be changed after creation."
msgstr "    *   *Незмінний* - тобто який не можна змінити після створення."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:172
msgid ""
"    *   In contrast, lists are *mutable*: they can be modified in place."
msgstr ""
"    *   На відміну від рядків, списки є *змінними*: їх можна змінювати на "
"місці."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:173
msgid "*   Python considers the string to be a single value with parts,"
msgstr "*   Python розглядає рядок як одне значення з частинами,"

#: python-novice-gapminder/_episodes/11-lists.md:174
msgid "    not a collection of values."
msgstr "  а не як сукупність значень."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:176
msgid ""
"~~~\n"
"element[0] = 'C'\n"
"~~~"
msgstr ""
"~~~\n"
"element[0] = 'C'\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:179
msgid ""
"{: .language-python}\n"
"~~~\n"
"TypeError: 'str' object does not support item assignment\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"TypeError: об'єкт 'str' не підтримує призначення елементів\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:185
msgid "*   Lists and character strings are both *collections*."
msgstr "*   Списки та рядки символів є *колекціями*."

# header
#: python-novice-gapminder/_episodes/11-lists.md:187
msgid "## Indexing beyond the end of the collection is an error."
msgstr "## Індексація після кінця колекції є помилкою."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:189
msgid ""
"*   Python reports an `IndexError` if we attempt to access a value that "
"doesn't exist."
msgstr ""
"*   Python повідомляє про помилку `IndexError`, якщо ми намагаємося отримати"
" доступ до значення, якого не існує."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:190
msgid ""
"    *   This is a kind of [runtime error]({{ page.root }}/04-built-"
"in/#runtime-error)."
msgstr ""
"    *   Це свого роду [помилка виконання]({{ page.root }}/04-built-"
"in/#runtime-error)."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:191
msgid "    *   Cannot be detected as the code is parsed"
msgstr "* Цю помилку неможливо виявити під час аналізу коду,"

#: python-novice-gapminder/_episodes/11-lists.md:192
msgid "        because the index might be calculated based on data."
msgstr "        оскільки індекс може бути розрахований на основі даних."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:194
msgid ""
"~~~\n"
"print('99th element of element is:', element[99])\n"
"~~~"
msgstr ""
"~~~\n"
"print('99м елементом списку element є:', element[99])\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:197
msgid ""
"{: .language-python}\n"
"~~~\n"
"IndexError: string index out of range\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"IndexError: string index out of range\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:203
msgid "> ## Fill in the Blanks"
msgstr "> ## Заповнити пропущені місця"

#: python-novice-gapminder/_episodes/11-lists.md:204
msgid ""
">\n"
"> Fill in the blanks so that the program below produces the output shown.\n"
">\n"
"> ~~~\n"
"> values = ____\n"
"> values.____(1)\n"
"> values.____(3)\n"
"> values.____(5)\n"
"> print('first time:', values)\n"
"> values = values[____]\n"
"> print('second time:', values)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> first time: [1, 3, 5]\n"
"> second time: [3, 5]\n"
"> ~~~"
msgstr ""
">\n"
"> Заповніть порожні поля, щоб програма, наведена нижче, видала показаний результат.\n"
">\n"
"> ~~~\n"
"> values = ____\n"
"> values.____(1)\n"
"> values.____(3)\n"
"> values.____(5)\n"
"> print('перший раз:', values)\n"
"> values = values[____]\n"
"> print('другий раз:', values)> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> перший раз: [1, 3, 5]\n"
"> другий раз: [3, 5]\n"
"> ~~~"

#: python-novice-gapminder/_episodes/11-lists.md:223
msgid ""
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > values = []\n"
"> > values.append(1)\n"
"> > values.append(3)\n"
"> > values.append(5)\n"
"> > print('first time:', values)\n"
"> > values = values[1:]\n"
"> > print('second time:', values)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > values = []\n"
"> > values.append(1)\n"
"> > values.append(3)\n"
"> > values.append(5)\n"
"> > print('перший раз:', values)\n"
"> > values = values[1:]\n"
"> > print('другий раз:', values)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:238
msgid "> ## How Large is a Slice?"
msgstr "> ## Наскільки є великим зріз?"

#: python-novice-gapminder/_episodes/11-lists.md:239
msgid ""
">\n"
"> If 'low' and 'high' are both non-negative integers,\n"
"> how long is the list `values[low:high]`?\n"
">\n"
"> > ## Solution\n"
"> > The list `values[low:high]` has `high - low` elements.  For example,\n"
"> > `values[1:4]` has the 3 elements `values[1]`, `values[2]`, and `values[3]`.\n"
"> > Note that the expression will only work if `high` is less than the total\n"
"> > length of the list `values`."
msgstr ""
">\n"
"> Якщо «low» і «high» є невід’ємними цілими числами,\n"
"> яка довжина списку `values[low:high]`?>\n"
"> > ## Рішення\n"
"> > Список `values[low:high]` має `high - low` elements.  Наприклад,\n"
"> > `values[1:4]` має 3 елементи `values[1]`, `values[2]`, and `values[3]`.\n"
"> >Зауважимо, що зріз працюватиме, лише якщо `high` менше загальної\n"
"> > довжини списку `значень`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:251
msgid "> ## From Strings to Lists and Back"
msgstr "> ## Від рядків до списків і назад."

#: python-novice-gapminder/_episodes/11-lists.md:252
msgid ""
">\n"
"> Given this:\n"
">\n"
"> ~~~\n"
"> print('string to list:', list('tin'))\n"
"> print('list to string:', ''.join(['g', 'o', 'l', 'd']))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> ~~~\n"
"> ['t', 'i', 'n']\n"
"> 'gold'\n"
"> ~~~"
msgstr ""
">\n"
"> Дано:\n"
">\n"
"> ~~~\n"
"> print('рядок у список:', list('tin'))\n"
"> print('список у рядок:', ''.join(['g', 'o', 'l', 'd']))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> ~~~\n"
"> ['t', 'i', 'n']\n"
"> 'gold'\n"
"> ~~~"

#: python-novice-gapminder/_episodes/11-lists.md:265
msgid ""
">\n"
"> 1.  What does `list('some string')` do?\n"
"> 2.  What does `'-'.join(['x', 'y', 'z'])` generate?\n"
">\n"
"> > ## Solution\n"
"> > 1. [`list('some string')`](https://docs.python.org/3/library/stdtypes.html#list) converts a string into a list containing all of its characters.\n"
"> > 2. [`join`](https://docs.python.org/3/library/stdtypes.html#str.join) returns a string that is the _concatenation_\n"
"> >    of each string element in the list and adds the separator between each element in the list. This results in\n"
"> >    `x-y-z`. The separator between the elements is the string that provides this method."
msgstr ""
">\n"
"> 1.  Що робить `list('якийсь рядок')`?\n"
"> 2.  Що генерує `'-'.join(['x', 'y', 'z'])`?>\n"
"> > ## Рішення\n"
"> > 1. [`list('якийсь рядок')`](https://docs.python.org/3/library/stdtypes.html#list) перетворює рядок на список, що містить усі його символи.\n"
"> > 2. [`join`](https://docs.python.org/3/library/stdtypes.html#str.join) повертає рядок, який є _конкатенацією_\n"
"> >    кожного елемента рядка у списку та додає роздільник між кожним елементом у списку. Це призводить до\n"
"> >    `x-y-z`. Роздільником між елементами є рядок, який забезпечує цей метод."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:277
msgid "> ## Working With the End"
msgstr "> ## Початок з кінця"

#: python-novice-gapminder/_episodes/11-lists.md:278
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'helium'\n"
"> print(element[-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  How does Python interpret a negative index?\n"
"> 2.  If a list or string has N elements,\n"
">     what is the most negative index that can safely be used with it,\n"
">     and what location does that index represent?\n"
"> 3.  If `values` is a list, what does `del values[-1]` do?\n"
"> 4.  How can you display all elements but the last one without changing `values`?\n"
">     (Hint: you will need to combine slicing and negative indexing.)\n"
">\n"
"> > ## Solution\n"
"> > The program prints `m`.\n"
"> > 1. Python interprets a negative index as starting from the end (as opposed to\n"
"> >    starting from the beginning).  The last element is `-1`.\n"
"> > 2. The last index that can safely be used with a list of N elements is element\n"
"> >    `-N`, which represents the first element.\n"
"> > 3. `del values[-1]` removes the last element from the list.\n"
"> > 4. `values[:-1]`"
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> element = 'helium'\n"
"> print(element[-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  Як Python інтерпретує від'ємний  індекс?\n"
"> 2.  Якщо список або рядок містить N елементів,\n"
">    який найбільший за модулем від'ємний індекс можна безпечно використовувати,\n"
">     і яку локацію визначає цей індекс?\n"
"> 3.  Якщо `values` є списком, що робить `del values[-1]`\n"
"> 4.  Як ви можете відобразити всі елементи, крім останнього, не змінюючи `values`?\n"
">     (Підказка: вам потрібно буде поєднати зрізи та від'ємну індексацію.)\n"
">\n"
"> > ## Рішення\n"
"> > Програма надрукує `m`.\n"
"> > 1. Python інтерпретує від'ємний індекс як початок з кінця (на відміну від\n"
"> >    початку).  Останній елемент – `-1`.\n"
"> > 2. Останнім індексом, який можна безпечно використовувати зі списком із N елементів, є елемент\n"
"> >    `-N`, який представляє перший елемент.\n"
"> > 3. `del values[-1]` видаляє останній елемент зі списку.\n"
"> > 4. `values[:-1]`"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:306
msgid "> ## Stepping Through a List"
msgstr "> ## Перехід по списку"

#: python-novice-gapminder/_episodes/11-lists.md:307
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'fluorine'\n"
"> print(element[::2])\n"
"> print(element[::-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  If we write a slice as `low:high:stride`, what does `stride` do?\n"
"> 2.  What expression would select all of the even-numbered items from a collection?\n"
">\n"
"> > ## Solution\n"
"> > The program prints\n"
"> > ~~~\n"
"> > furn\n"
"> > eniroulf\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > 1. `stride` is the step size of the slice\n"
"> > 2. The slice `1::2` selects all even-numbered items from a collection: it starts\n"
"> >    with element `1` (which is the second element, since indexing starts at `0`),\n"
"> >    goes on until the end (since no `end` is given), and uses a step size of `2`\n"
"> >    (i.e., selects every second element)."
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> element = 'fluorine'\n"
"> print(element[::2])\n"
"> print(element[::-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  Якщо ми пишемо фрагмент як `low:high:stride`, що робить `stride`?\n"
"> 2. Яка команда дозволить вибрати всі елементи з парними номерами з колекції?\n"
">\n"
"> > ## Рішення\n"
"> > Програма надрукує\n"
"> > ~~~\n"
"> > furn\n"
"> > eniroulf\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > 1. `stride` є розміром кроку зріза\n"
"> > 2. Зріз `1::2` вибирає всі елементи з парними номерами з колекції: він починається\n"
"> >    з елементу `1` (який є другим елементом, оскільки індексація починається з `0`),\n"
"> >    продовжується до кінця (оскільки `end` не задано) і використовує розмір кроку `2`\n"
"> >    (таким чином обираючи кожний другий елемент)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:335
msgid "> ## Slice Bounds"
msgstr "> ## Границі зрізу"

#: python-novice-gapminder/_episodes/11-lists.md:336
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'lithium'\n"
"> print(element[0:20])\n"
"> print(element[-1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > lithium\n"
"> > \n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> element = 'lithium'\n"
"> print(element[0:20])\n"
"> print(element[-1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > lithium\n"
"> > \n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:355
msgid "> ## Sort and Sorted"
msgstr "> ## Сортування на місці чи у новий список"

#: python-novice-gapminder/_episodes/11-lists.md:356
msgid ""
">\n"
"> What do these two programs print?\n"
"> In simple terms, explain the difference between `sorted(letters)` and `letters.sort()`.\n"
">\n"
"> ~~~\n"
"> # Program A\n"
"> letters = list('gold')\n"
"> result = sorted(letters)\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> # Program B\n"
"> letters = list('gold')\n"
"> result = letters.sort()\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> > Program A prints\n"
"> > ~~~\n"
"> > letters is ['g', 'o', 'l', 'd'] and result is ['d', 'g', 'l', 'o']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Program B prints\n"
"> > ~~~\n"
"> > letters is ['d', 'g', 'l', 'o'] and result is None\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `sorted(letters)` returns a sorted copy of the list `letters` (the original\n"
"> > list `letters` remains unchanged), while `letters.sort()` sorts the list\n"
"> > `letters` in-place and does not return anything."
msgstr ""
">\n"
"> Що друкують ці дві програми?\n"
"> Простими словами поясніть різницю між `sorted(letters)` and `letters.sort()`.\n"
">\n"
"> ~~~\n"
"> # Програма A\n"
"> letters = list('gold')\n"
"> result = sorted(letters)\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> # Програма B\n"
"> letters = list('gold')\n"
"> result = letters.sort()\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> > Програма A друкує\n"
"> > ~~~\n"
"> > літери  ['g', 'o', 'l', 'd'] і результат є таким: ['d', 'g', 'l', 'o']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Програма В друкує\n"
"> > ~~~\n"
"> > літери ['d', 'g', 'l', 'o'] і результат є None\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `sorted(letters)` повертає відсортовану копію списку `letters` (оригінал\n"
"> > списку `letters` залишається без змін), тоді як `letters.sort()` сортує список\n"
"> > `letters` на місці та нічого не повертає."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:393
msgid "> ## Copying (or Not)"
msgstr "> ## Копіювання (чи ні)"

#: python-novice-gapminder/_episodes/11-lists.md:394
msgid ""
">\n"
"> What do these two programs print?\n"
"> In simple terms, explain the difference between `new = old` and `new = old[:]`.\n"
">\n"
"> ~~~\n"
"> # Program A\n"
"> old = list('gold')\n"
"> new = old      # simple assignment\n"
"> new[0] = 'D'\n"
"> print('new is', new, 'and old is', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> # Program B\n"
"> old = list('gold')\n"
"> new = old[:]   # assigning a slice\n"
"> new[0] = 'D'\n"
"> print('new is', new, 'and old is', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> > Program A prints\n"
"> > ~~~\n"
"> > new is ['D', 'o', 'l', 'd'] and old is ['D', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > Program B prints\n"
"> > ~~~\n"
"> > new is ['D', 'o', 'l', 'd'] and old is ['g', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `new = old` makes `new` a reference to the list `old`; `new` and `old` point\n"
"> > towards the same object.\n"
"> > \n"
"> > `new = old[:]` however creates a new list object `new` containing all elements\n"
"> > from the list `old`; `new` and `old` are different objects."
msgstr ""
">\n"
"> Що друкують ці дві програми?\n"
"> Простими словами поясніть різницю між `new = old` and `new = old[:]`.\n"
">\n"
"> ~~~\n"
"> # Програма A\n"
"> old = list('gold')\n"
"> new = old      # просте присвоювання\n"
"> new[0] = 'D'\n"
"> print('новим є', new, 'і старим є', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~Програма B\n"
"> old = list('gold')\n"
"> new = old[:]   # присвоювання зріза\n"
"> new[0] = 'D'\n"
"> print('новим є', new, 'і старим є', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> > Програма А друкує\n"
"> > ~~~\n"
"> > новим є ['D', 'o', 'l', 'd'] і старим є ['D', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > Програма В друкує\n"
"> > ~~~\n"
"> > новим є ['D', 'o', 'l', 'd'] і старим є ['g', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `new = old` робить `new` посиланням на список `old`; `new` and `old` вказують\n"
"> >  на той самий об'єкт.\n"
"> > \n"
"> > `new = old[:]` однак створює новий об’єкт списку `new`, який містить усі елементи\n"
"> > зі списку `old`; `new` та `old` є різними об'єктами."

# Front Matter
#: python-novice-gapminder/_episodes/12-for-loops.md:1
msgid ""
"---\n"
"title: \"For Loops\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I make a program do many things?\"\n"
"objectives:\n"
"- \"Explain what for loops are normally used for.\"\n"
"- \"Trace the execution of a simple (unnested) loop and correctly state the values of variables in each iteration.\"\n"
"- \"Write for loops that use the Accumulator pattern to aggregate values.\"\n"
"keypoints:\n"
"- \"A *for loop* executes commands once for each value in a collection.\"\n"
"- \"A `for` loop is made up of a collection, a loop variable, and a body.\"\n"
"- \"The first line of the `for` loop must end with a colon, and the body must be indented.\"\n"
"- \"Indentation is always meaningful in Python.\"\n"
"- \"Loop variables can be called anything (but it is strongly advised to have a meaningful name to the looping variable).\"\n"
"- \"The body of a loop can contain many statements.\"\n"
"- \"Use `range` to iterate over a sequence of numbers.\"\n"
"- \"The Accumulator pattern turns many values into one.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Цикли for\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"Як змусити програму робити багато речей?\"\n"
"objectives:\n"
"- \"Поясніть, для чого зазвичай використовуються цикли for.\"\n"
"- \"Відстежуйте виконання простого (невкладеного) циклу та правильно вказуйте значення змінних у кожній ітерації.\"\n"
"- \"Пишить цикли for, які використовують паттерн накопичувача для агрегування значень.\"  \n"
"keypoints:\n"
"- \"Цикл *for* виконує команди один раз для кожного значення в колекції.\"\n"
"- \"Цикл `for` складається з колекції, змінної циклу та тіла.\"\n"
"- \"Перший рядок циклу `for` має закінчуватися двокрапкою, а тіло має бути з відступом.\"\n"
"- \"Відступи завжди важливі в Python.\"\n"
"- \"Змінні циклу можна називати як завгодно (але настійно рекомендується мати значущу назву для змінної циклу).\"\n"
"- \"Тіло циклу може містити багато операторів.\"\n"
"- \"Використовуйте `range` для перебору послідовності чисел.\"\n"
"- \"Патерн накопичувача перетворює багато значень в одне.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:21
msgid "## A *for loop* executes commands once for each value in a collection."
msgstr ""
"## *Цикл for* виконує команди один раз для кожного значення в колекції."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:23
msgid "*   Doing calculations on the values in a list one by one"
msgstr "*   Виконувати обчислення для значень у списку одне за іншим"

#: python-novice-gapminder/_episodes/12-for-loops.md:24
msgid ""
"    is as painful as working with `pressure_001`, `pressure_002`, etc.\n"
"*   A *for loop* tells Python to execute some statements once for each value in a list,\n"
"    a character string,\n"
"    or some other collection.\n"
"*   \"for each thing in this group, do these operations\""
msgstr ""
"    так само неприємно, як працювати з `pressure_001`, `pressure_002` і так далі.\n"
"*  *Цикл for* повідомляє Python що треба виконати деякі оператори один раз для кожного значення в списку,\n"
"    рядку символів,\n"
"    або якісь іншій колекції.\n"
"*   \"для кожного елемента в цій групі виконайте ці операції\""

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:30
#: python-novice-gapminder/_episodes/12-for-loops.md:56
msgid ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"    print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"    print(number)\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:36
msgid "*   This `for` loop is equivalent to:"
msgstr "*   Цей цикл `for` є еквівалентним наступному:"

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:38
msgid ""
"~~~\n"
"print(2)\n"
"print(3)\n"
"print(5)\n"
"~~~"
msgstr ""
"~~~\n"
"print(2)\n"
"print(3)\n"
"print(5)\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:45
msgid "*   And the `for` loop's output is:"
msgstr "*   І результат циклу `for` є таким:"

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:47
msgid ""
"~~~\n"
"2\n"
"3\n"
"5\n"
"~~~"
msgstr ""
"~~~\n"
"2\n"
"3\n"
"5\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:54
msgid ""
"## A `for` loop is made up of a collection, a loop variable, and a body."
msgstr "## Цикл `for` складається з колекції, змінної циклу та тіла циклу."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:62
msgid "*   The collection, `[2, 3, 5]`, is what the loop is being run on."
msgstr "*   Колекція `[2, 3, 5]` є тим, на чому виконується цикл."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:63
msgid ""
"*   The body, `print(number)`, specifies what to do for each value in the "
"collection."
msgstr ""
"*   Тіло циклу, `print(number)`, визначає, що робити для кожного значення в "
"колекції."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:64
msgid ""
"*   The loop variable, `number`, is what changes for each *iteration* of the"
" loop."
msgstr "*   Змінна циклу, `number`, змінюється для кожної *ітерації* циклу."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:65
msgid "    *   The \"current thing\"."
msgstr "    *   \"Актуальне\"."

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:67
msgid ""
"## The first line of the `for` loop must end with a colon, and the body must"
" be indented."
msgstr ""
"## Перший рядок циклу `for` має закінчуватися двокрапкою, а тіло циклу має "
"бути з відступом."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:69
msgid ""
"*   The colon at the end of the first line signals the start of a *block* of"
" statements."
msgstr ""
"*   Двокрапка в кінці першого рядка вказує на початок *блоку* операторів."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:70
msgid ""
"*   Python uses indentation rather than `{}` or `begin`/`end` to show "
"*nesting*."
msgstr ""
"*   Python використовує відступ, а не `{}` або `begin`/`end`, щоб показати "
"*вкладеність*."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:71
msgid ""
"    *   Any consistent indentation is legal, but almost everyone uses four "
"spaces."
msgstr ""
"    *   Будь-який послідовний відступ є допустимим, але майже усі "
"використовують чотири пробіли."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:73
msgid ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"print(number)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:77
msgid ""
"{: .language-python}\n"
"~~~\n"
"IndentationError: expected an indented block\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"IndentationError: expected an indented block\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:83
msgid "*   Indentation is always meaningful in Python."
msgstr "*   Відступи у Python завжди важливі."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:85
msgid ""
"~~~\n"
"firstName = \"Jon\"\n"
"  lastName = \"Smith\"\n"
"~~~"
msgstr ""
"~~~\n"
"firstName = \"Jon\"\n"
"  lastName = \"Smith\"\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:89
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-7-f65f2962bf9c>\", line 2\n"
"    lastName = \"Smith\"\n"
"    ^\n"
"IndentationError: unexpected indent\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-7-f65f2962bf9c>\", line 2\n"
"    lastName = \"Smith\"\n"
"    ^\n"
"IndentationError: unexpected indent\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:98
msgid "*   This error can be fixed by removing the extra spaces"
msgstr "*   Цю помилку можна виправити, видаливши зайві пробіли"

#: python-novice-gapminder/_episodes/12-for-loops.md:99
msgid "    at the beginning of the second line."
msgstr "    на початку другого рядка."

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:101
msgid "## Loop variables can be called anything."
msgstr "## Змінні циклу можна називати як завгодно. "

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:103
msgid "*   As with all variables, loop variables are:"
msgstr "*   Як і всі інші змінні, змінні циклу:"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:104
msgid "    *   Created on demand."
msgstr "    *   Створюються коли потрібно."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:105
msgid "    *   Meaningless: their names can be anything at all."
msgstr ""
"    *    Не несуть смислового навантаження: їхні імена можуть бути будь-"
"якими."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:107
msgid ""
"~~~\n"
"for kitten in [2, 3, 5]:\n"
"    print(kitten)\n"
"~~~"
msgstr ""
"~~~\n"
"for kitten in [2, 3, 5]:\n"
"    print(kitten)\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:113
msgid "## The body of a loop can contain many statements."
msgstr "## Тіло циклу може містити багато операторів."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:115
msgid "*   But no loop should be more than a few lines long."
msgstr "*   Але жоден цикл не повинен мати довжину більше кількох рядків."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:116
msgid "*   Hard for human beings to keep larger chunks of code in mind."
msgstr "*   Людям важко запам’ятати великі фрагменти коду."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:118
msgid ""
"~~~\n"
"primes = [2, 3, 5]\n"
"for p in primes:\n"
"    squared = p ** 2\n"
"    cubed = p ** 3\n"
"    print(p, squared, cubed)\n"
"~~~"
msgstr ""
"~~~\n"
"primes = [2, 3, 5]\n"
"for p in primes:\n"
"    squared = p ** 2\n"
"    cubed = p ** 3\n"
"    print(p, squared, cubed)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:125
msgid ""
"{: .language-python}\n"
"~~~\n"
"2 4 8\n"
"3 9 27\n"
"5 25 125\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"2 4 8\n"
"3 9 27\n"
"5 25 125\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:133
msgid "## Use `range` to iterate over a sequence of numbers."
msgstr "## Використовуйте `range` для перебору послідовності чисел."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:135
msgid ""
"*   The built-in function "
"[`range`](https://docs.python.org/3/library/stdtypes.html#range) produces a "
"sequence of numbers."
msgstr ""
"*   Вбудована функція "
"[`range`](https://docs.python.org/3/library/stdtypes.html#range) створює "
"послідовність чисел."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:136
msgid "    *   *Not* a list: the numbers are produced on demand"
msgstr "    *   Це *не* список: числа виготовляються на замовлення"

#: python-novice-gapminder/_episodes/12-for-loops.md:137
msgid ""
"        to make looping over large ranges more efficient.\n"
"*   `range(N)` is the numbers 0..N-1\n"
"    *   Exactly the legal indices of a list or character string of length N"
msgstr ""
"        щоб зробити цикл у великих діапазонах більш ефективним.\n"
"*   `range(N)`  - це числа 0..N-1\n"
"    *   Точно допустимі індекси списку або рядка символів довжиною N"

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:141
msgid ""
"~~~\n"
"print('a range is not a list: range(0, 3)')\n"
"for number in range(0, 3):\n"
"    print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"print('a range is not a list: range(0, 3)')\n"
"for number in range(0, 3):\n"
"    print(number)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:146
msgid ""
"{: .language-python}\n"
"~~~\n"
"a range is not a list: range(0, 3)\n"
"0\n"
"1\n"
"2\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"a range is not a list: range(0, 3)\n"
"0\n"
"1\n"
"2\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:155
msgid "## The Accumulator pattern turns many values into one."
msgstr "## Патерн накопичувача перетворює багато значень в одне."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:157
msgid "*   A common pattern in programs is to:"
msgstr "*   Загальний паттерн у програмах:"

#: python-novice-gapminder/_episodes/12-for-loops.md:158
msgid ""
"    1.  Initialize an *accumulator* variable to zero, the empty string, or the empty list.\n"
"    2.  Update the variable with values from a collection."
msgstr ""
"    1.  Ініціалізуйте *накопичувальну* змінну нулем, порожнім рядком або порожнім списком.\n"
"    2.  Оновіть змінну значеннями з колекції."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:161
msgid ""
"~~~\n"
"# Sum the first 10 integers.\n"
"total = 0\n"
"for number in range(10):\n"
"   total = total + (number + 1)\n"
"print(total)\n"
"~~~"
msgstr ""
"~~~\n"
"# Знайдіть суму перших 10 цілих чисел.\n"
"total = 0\n"
"for number in range(10):\n"
"   total = total + (number + 1)\n"
"print(total)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:168
msgid ""
"{: .language-python}\n"
"~~~\n"
"55\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"55\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:174
msgid "*   Read `total = total + (number + 1)` as:"
msgstr "*   Прочитайте `total = total + (number + 1)` наступним чином:"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:175
msgid "    *   Add 1 to the current value of the loop variable `number`."
msgstr "    *   Додати 1 до поточного значення  змінної циклу `number`."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:176
msgid ""
"    *   Add that to the current value of the accumulator variable `total`."
msgstr ""
"    *   Додати це до поточного значення накопичувальної змінної `total`."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:177
msgid "    *   Assign that to `total`, replacing the current value."
msgstr "    *   Призначити це `total`, замінивши поточне значення."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:178
msgid ""
"*   We have to add `number + 1` because `range` produces 0..9, not 1..10."
msgstr ""
"*   Ми маємо додавати `number + 1`, тому що `range` продукує 0..9, а не  "
"1..10."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:180
msgid "> ## Classifying Errors"
msgstr "> ## Класифікація помилок"

#: python-novice-gapminder/_episodes/12-for-loops.md:181
msgid ""
">\n"
"> Is an indentation error a syntax error or a runtime error?\n"
"> > ## Solution\n"
"> > An IndentationError is a syntax error. Programs with syntax errors cannot be started.\n"
"> > A program with a runtime error will start but an error will be thrown under certain conditions."
msgstr ""
">\n"
"> Помилка відступу є синтаксичною чи помилкою виконання?\n"
"> > ## Рішення\n"
"> > IndentationError є синтаксичною помилкою. Неможливо запустити програми з синтаксичними помилками.\n"
"> > Програма з помилкою виконання запускається, але за певних умов видається помилка."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:189
#: python-novice-gapminder/_episodes/13-conditionals.md:253
msgid "> ## Tracing Execution"
msgstr "> ## Відстеження виконання"

#: python-novice-gapminder/_episodes/12-for-loops.md:190
msgid ""
">\n"
"> Create a table showing the numbers of the lines that are executed when this program runs,\n"
"> and the values of the variables after each line is executed.\n"
">\n"
"> ~~~\n"
"> total = 0\n"
"> for char in \"tin\":\n"
">     total = total + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > | Line no | Variables            |\n"
"> > |---------|----------------------|\n"
"> > | 1       | total = 0            |\n"
"> > | 2       | total = 0 char = 't' |\n"
"> > | 3       | total = 1 char = 't' |\n"
"> > | 2       | total = 1 char = 'i' |\n"
"> > | 3       | total = 2 char = 'i' |\n"
"> > | 2       | total = 2 char = 'n' |\n"
"> > | 3       | total = 3 char = 'n' |"
msgstr ""
">\n"
"> Створіть таблицю з номерами рядків, які виконуються під час виконання цієї програми,\n"
"> і значення змінних після виконання кожного рядка.\n"
">\n"
"> ~~~\n"
"> total = 0\n"
"> for char in \"tin\":\n"
">     total = total + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > | Line no | Variables            |\n"
"> > |---------|----------------------|\n"
"> > | 1       | total = 0            |\n"
"> > | 2       | total = 0 char = 't' |\n"
"> > | 3       | total = 1 char = 't' |\n"
"> > | 2       | total = 1 char = 'i' |\n"
"> > | 3       | total = 2 char = 'i' |\n"
"> > | 2       | total = 2 char = 'n' |\n"
"> > | 3       | total = 3 char = 'n' |"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:214
msgid "> ## Reversing a String"
msgstr "> ## Перевертання рядка"

#: python-novice-gapminder/_episodes/12-for-loops.md:215
msgid ""
">\n"
"> Fill in the blanks in the program below so that it prints \"nit\"\n"
"> (the reverse of the original character string \"tin\").\n"
">\n"
"> ~~~\n"
"> original = \"tin\"\n"
"> result = ____\n"
"> for char in original:\n"
">     result = ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > original = \"tin\"\n"
"> > result = \"\"\n"
"> > for char in original:\n"
"> >     result = char + result\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Заповніть порожні місця в програмі нижче, щоб вона друкувала \"nit\"\n"
"> (зворотний вихідний рядок символів \"tin\").\n"
">\n"
"> ~~~\n"
"> original = \"tin\"\n"
"> result = ____\n"
"> for char in original:\n"
">     result = ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > original = \"tin\"\n"
"> > result = \"\"\n"
"> > for char in original:\n"
"> >     result = char + result\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:239
msgid "> ## Practice Accumulating"
msgstr "> ## Практика накопичення."

#: python-novice-gapminder/_episodes/12-for-loops.md:240
msgid ""
">\n"
"> Fill in the blanks in each of the programs below\n"
"> to produce the indicated result.\n"
">\n"
"> ~~~\n"
"> # Total length of the strings in the list: [\"red\", \"green\", \"blue\"] => 12\n"
"> total = 0\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     ____ = ____ + len(word)\n"
"> print(total)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > total = 0\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     total = total + len(word)\n"
"> > print(total)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Заповніть пропуски в кожній із наведених нижче програм,\n"
"> щоб отримати вказаний результат\n"
">\n"
"> ~~~\n"
"> # Загальна довжина рядків у списку: [\"red\", \"green\", \"blue\"] => 12\n"
"> total = 0\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     ____ = ____ + len(word)\n"
"> print(total)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > total = 0\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     total = total + len(word)\n"
"> > print(total)\n"
"> > ~~~\n"
"> > {: .language-python}"

#: python-novice-gapminder/_episodes/12-for-loops.md:261
msgid ""
">\n"
"> ~~~\n"
"> # List of word lengths: [\"red\", \"green\", \"blue\"] => [3, 5, 4]\n"
"> lengths = ____\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     lengths.____(____)\n"
"> print(lengths)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > lengths = []\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     lengths.append(len(word))\n"
"> > print(lengths)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> ~~~\n"
"> # Список довжин слів: [\"red\", \"green\", \"blue\"] => [3, 5, 4]\n"
"> lengths = ____\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     lengths.____(____)\n"
"> print(lengths)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > lengths = []\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     lengths.append(len(word))\n"
"> > print(lengths)\n"
"> > ~~~\n"
"> > {: .language-python}"

#: python-novice-gapminder/_episodes/12-for-loops.md:279
msgid ""
">\n"
"> ~~~\n"
"> # Concatenate all words: [\"red\", \"green\", \"blue\"] => \"redgreenblue\"\n"
"> words = [\"red\", \"green\", \"blue\"]\n"
"> result = ____\n"
"> for ____ in ____:\n"
">     ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > words = [\"red\", \"green\", \"blue\"]\n"
"> > result = \"\"\n"
"> > for word in words:\n"
"> >     result = result + word\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> ~~~\n"
"> # Concatenate all words: [\"red\", \"green\", \"blue\"] => \"redgreenblue\"\n"
"> words = [\"red\", \"green\", \"blue\"]\n"
"> result = ____\n"
"> for ____ in ____:\n"
">     ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > words = [\"red\", \"green\", \"blue\"]\n"
"> > result = \"\"\n"
"> > for word in words:\n"
"> >     result = result + word\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"

#: python-novice-gapminder/_episodes/12-for-loops.md:299
msgid ""
">\n"
"> ~~~\n"
"> # Create acronym: [\"red\", \"green\", \"blue\"] => \"RGB\"\n"
"> # write the whole thing\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > acronym = \"\"\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     acronym = acronym + word[0].upper()\n"
"> > print(acronym)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> ~~~\n"
"> # Створіть акронім: [\"red\", \"green\", \"blue\"] => \"RGB\"\n"
"> # Напишіть всю прграму\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > acronym = \"\"\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     acronym = acronym + word[0].upper()\n"
"> > print(acronym)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:316
msgid "> ## Cumulative Sum"
msgstr "> ## Кумулятивна сума"

#: python-novice-gapminder/_episodes/12-for-loops.md:317
msgid ""
">\n"
"> Reorder and properly indent the lines of code below\n"
"> so that they print a list with the cumulative sum of data.\n"
"> The result should be `[1, 3, 5, 10]`.\n"
">\n"
"> ~~~\n"
"> cumulative.append(sum)\n"
"> for number in data:\n"
"> cumulative = []\n"
"> sum += number\n"
"> sum = 0\n"
"> print(cumulative)\n"
"> data = [1,2,2,5]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > sum = 0\n"
"> > data = [1,2,2,5]\n"
"> > cumulative = []\n"
"> > for number in data:\n"
"> >     sum += number\n"
"> >     cumulative.append(sum)\n"
"> > print(cumulative)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Змініть порядок і належним чином розставте рядки коду нижче\n"
"> щоб в результаті отримати список із сукупною сумою даних.\n"
"> Результатом має бути `[1, 3, 5, 10]`.\n"
">\n"
"> ~~~\n"
"> cumulative.append(sum)\n"
"> for number in data:\n"
"> cumulative = []\n"
"> sum += number\n"
"> sum = 0\n"
"> print(cumulative)\n"
"> data = [1,2,2,5]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > sum = 0\n"
"> > data = [1,2,2,5]\n"
"> > cumulative = []\n"
"> > for number in data:\n"
"> >     sum += number\n"
"> >     cumulative.append(sum)\n"
"> > print(cumulative)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:346
msgid "> ## Identifying Variable Name Errors"
msgstr "> ## Виявлення помилок імен змінних"

#: python-novice-gapminder/_episodes/12-for-loops.md:347
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code and read the error message.\n"
">    What type of `NameError` do you think this is?\n"
">    Is it a string with no quotes, a misspelled variable, or a\n"
">    variable that should have been defined but was not?\n"
"> 3. Fix the error.\n"
"> 4. Repeat steps 2 and 3, until you have fixed all the errors.\n"
">\n"
"> ~~~\n"
"> for number in range(10):\n"
">     # use a if the number is a multiple of 3, otherwise use b\n"
">     if (Number % 3) == 0:\n"
">         message = message + a\n"
">     else:\n"
">         message = message + \"b\"\n"
"> print(message)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > The variable `message` needs to be initialized and Python variable names are case sensitive: `number` and `Number`\n"
"> > refer to different variables.\n"
"> > ~~~\n"
"> > message = \"\"\n"
"> > for number in range(10):\n"
"> >     # use a if the number is a multiple of 3, otherwise use b\n"
"> >     if (number % 3) == 0:\n"
"> >         message = message + \"a\"\n"
"> >     else:\n"
"> >         message = message + \"b\"\n"
"> > print(message)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> 1. Прочитайте наведений нижче код і спробуйте визначити, у чому полягають помилки\n"
">    *без* запуску програми.\n"
"> 2. Запустіть код і прочитайте повідомлення про помилку.\n"
">   Як ви думаєте, який це тип `NameError`?\n"
">   Це рядок без лапок, змінна з орфографічною помилкою чи \n"
">    змінна, яка мала бути визначена, але не була визначена?\n"
"> 3. Виправте помилку.\n"
"> 4. Повторюйте кроки 2 і 3, доки не виправите всі помилки.\n"
">\n"
"> ~~~\n"
"> for number in range(10):\n"
">     # use a if the number is a multiple of 3, otherwise use b\n"
">     if (Number % 3) == 0:\n"
">         message = message + a\n"
">     else:\n"
">         message = message + \"b\"\n"
"> print(message)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > TЗмінну `message` потрібно ініціалізувати, а назви змінних Python чутливі до регістру: `number` і `Number`\n"
"> > посилаються на різні змінні.\n"
"> > ~~~\n"
"> > message = \"\"\n"
"> > for number in range(10):\n"
"> >     # use a if the number is a multiple of 3, otherwise use b\n"
"> >     if (number % 3) == 0:\n"
"> >         message = message + \"a\"\n"
"> >     else:\n"
"> >         message = message + \"b\"\n"
"> > print(message)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:384
msgid "> ## Identifying Item Errors"
msgstr "> ## Виявлення помилок програми"

#: python-novice-gapminder/_episodes/12-for-loops.md:385
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
"> 3. Fix the error.\n"
">\n"
"> ~~~\n"
"> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> print('My favorite season is ', seasons[4])\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > This list has 4 elements and the index to access the last element in the list is `3`.\n"
"> > ~~~\n"
"> > seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> > print('My favorite season is ', seasons[3])\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> 1. Прочитайте наведений нижче код і спробуйте визначити, у чому полягають помилки\n"
">    *без* запуску програми.\n"
"> 2. Запустіть код і прочитайте повідомлення про помилку. Який тип помилки?\n"
"> 3. Виправте помилку.\n"
">\n"
"> ~~~\n"
"> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> print('My favorite season is ', seasons[4])\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > Цей список складається з 4 елементів, а індекс для доступу до останнього елемента в списку – «3».\n"
"> > ~~~\n"
"> > seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> > print('My favorite season is ', seasons[3])\n"
"> > ~~~\n"
"> > {: .language-python}"

# Front Matter
#: python-novice-gapminder/_episodes/13-conditionals.md:1
msgid ""
"---\n"
"title: \"Conditionals\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can programs do different things for different data?\"\n"
"objectives:\n"
"- \"Correctly write programs that use if and else statements and simple Boolean expressions (without logical operators).\"\n"
"- \"Trace the execution of unnested conditionals and conditionals inside loops.\"\n"
"keypoints:\n"
"- \"Use `if` statements to control whether or not a block of code is executed.\"\n"
"- \"Conditionals are often used inside loops.\"\n"
"- \"Use `else` to execute a block of code when an `if` condition is *not* true.\"\n"
"- \"Use `elif` to specify additional tests.\"\n"
"- \"Conditions are tested once, in order.\"\n"
"- \"Create a table showing variables' values to trace a program's execution.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Умовні оператори\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"Як програми можуть робити різні речі для різних даних?\"\n"
"objectives:\n"
"- \"Правильно писати програми, які використовують оператори if та else та прості логічні вирази (без логічних операторів).\"\n"
"- \"Відстежувати виконання невкладених умовних операторів і умовних операторів усередині циклів.\"\n"
"keypoints:\n"
"- \"Використовуйте оператори if, щоб контролювати виконання блоку коду.\"\n"
"- \"Умовні оператори часто використовуються всередині циклів.\"\n"
"- \"Використовуйте `else` для виконання блоку коду, коли умова `if` є *не* істинною.\"\n"
"- \"Використовуйте `elif` для визначення додаткових перевірок.\"\n"
"- \"Умови перевіряються один раз, по порядку.\"\n"
"- \"Створіть таблицю зі значеннями змінних для відстеження виконання програми\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/13-conditionals.md:18
msgid ""
"## Use `if` statements to control whether or not a block of code is "
"executed."
msgstr ""
"## Використовуйте оператори if, щоб контролювати виконання блоку коду.."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:20
msgid "*   An `if` statement (more properly called a *conditional* statement)"
msgstr "*   Оператор if (точніше його називають *умовним* оператором)"

#: python-novice-gapminder/_episodes/13-conditionals.md:21
msgid ""
"    controls whether some block of code is executed or not.\n"
"*   Structure is similar to a `for` statement:\n"
"    *   First line opens with `if` and ends with a colon\n"
"    *   Body containing one or more statements is indented (usually by 4 spaces)"
msgstr ""
"    контролює виконання певного блоку коду.\n"
"*   Структура подібна до оператора `for`:\n"
"    *   Перший рядок починається з `if` і закінчується двокрапкою\n"
"    *   Тіло оператору, що містить одне або кілька тверджень, має відступ (зазвичай на 4 пробіли)"

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:26
msgid ""
"~~~\n"
"mass = 3.54\n"
"if mass > 3.0:\n"
"    print(mass, 'is large')\n"
"\n"
"mass = 2.07\n"
"if mass > 3.0:\n"
"    print (mass, 'is large')\n"
"~~~"
msgstr ""
"~~~\n"
"mass = 3.54\n"
"if mass > 3.0:\n"
"    print(mass, 'є великим')\n"
"\n"
"mass = 2.07\n"
"if mass > 3.0:\n"
"    print (mass, 'є великим')\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:35
msgid ""
"{: .language-python}\n"
"~~~\n"
"3.54 is large\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3.54 є великим\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/13-conditionals.md:41
msgid "## Conditionals are often used inside loops."
msgstr "## Умовні оператори часто використовуються всередині циклів."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:43
msgid ""
"*   Not much point using a conditional when we know the value (as above)."
msgstr ""
"*   Немає особливого сенсу використовувати умовний оператор, коли ми знаємо "
"значення (як вище)."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:44
msgid "*   But useful when we have a collection to process."
msgstr "*   Але корисно, коли у нас є колекція для обробки."

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:46
msgid ""
"~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 3.0:\n"
"        print(m, 'is large')\n"
"~~~"
msgstr ""
"~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 3.0:\n"
"        print(m, 'є великим')\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:52
msgid ""
"{: .language-python}\n"
"~~~\n"
"3.54 is large\n"
"9.22 is large\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3.54 є великим\n"
"9.22 є великим\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/13-conditionals.md:59
msgid ""
"## Use `else` to execute a block of code when an `if` condition is *not* "
"true."
msgstr ""
"## Використовуйте `else` для виконання блоку коду, коли умова `if` є *не* "
"істинною."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:61
msgid "*   `else` can be used following an `if`."
msgstr "*   `else` можна використовувати після `if`."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:62
msgid ""
"*   Allows us to specify an alternative to execute when the `if` *branch* "
"isn't taken."
msgstr ""
"*   Дозволяє нам вказати альтернативу для виконання, коли умова *гілки* `if`"
" не виконується."

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:64
msgid ""
"~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 3.0:\n"
"        print(m, 'is large')\n"
"    else:\n"
"        print(m, 'is small')\n"
"~~~"
msgstr ""
"~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 3.0:\n"
"        print(m, 'є великим')\n"
"    else:\n"
"        print(m, 'є малим')\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:72
msgid ""
"{: .language-python}\n"
"~~~\n"
"3.54 is large\n"
"2.07 is small\n"
"9.22 is large\n"
"1.86 is small\n"
"1.71 is small\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3.54 є великим\n"
"2.07 є малим\n"
"9.22 є великим\n"
"1.86 є малим\n"
"1.71 є малим\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/13-conditionals.md:82
msgid "## Use `elif` to specify additional tests."
msgstr "## Використовуйте `elif` для визначення додаткових перевірок."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:84
msgid ""
"*   May want to provide several alternative choices, each with its own test."
msgstr ""
"*   Може знадобитися надати кілька альтернативних варіантів, кожен з яких "
"має своєю перевірку."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:85
msgid "*   Use `elif` (short for \"else if\") and a condition to specify these."
msgstr ""
"*   Використовуйте `elif` (скорочення від \"else if\") та умову, перевірки. "

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:86
msgid "*   Always associated with an `if`."
msgstr "*   Завжди асоціюється з `if`."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:87
msgid "*   Must come before the `else` (which is the \"catch all\")."
msgstr ""
"*   Має бути перед `else` (що слугує для того, щоб \"підібрати все інше\")."

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:89
msgid ""
"~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 9.0:\n"
"        print(m, 'is HUGE')\n"
"    elif m > 3.0:\n"
"        print(m, 'is large')\n"
"    else:\n"
"        print(m, 'is small')\n"
"~~~"
msgstr ""
"~~~\n"
"masses = [3.54, 2.07, 9.22, 1.86, 1.71]\n"
"for m in masses:\n"
"    if m > 9.0:\n"
"        print(m, 'є ВЕЛИЧЕЗНИМ')\n"
"    elif m > 3.0:\n"
"        print(m, 'є великим')\n"
"    else:\n"
"        print(m, 'є малим')\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:99
msgid ""
"{: .language-python}\n"
"~~~\n"
"3.54 is large\n"
"2.07 is small\n"
"9.22 is HUGE\n"
"1.86 is small\n"
"1.71 is small\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"3.54 є великим\n"
"2.07 є малим\n"
"9.22 є ВЕЛИЧЕЗНИМ\n"
"1.86 є малим\n"
"1.71 є малим\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/13-conditionals.md:109
msgid "## Conditions are tested once, in order."
msgstr "## Умови перевіряються один раз, по порядку."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:111
msgid ""
"*   Python steps through the branches of the conditional in order, testing "
"each in turn."
msgstr ""
"*   Python послідовно проходить гілки умовного оператора, перевіряючи кожну "
"по черзі."

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:112
msgid "*   So ordering matters."
msgstr "*   Отже, порядок має значення."

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:114
msgid ""
"~~~\n"
"grade = 85\n"
"if grade >= 70:\n"
"    print('grade is C')\n"
"elif grade >= 80:\n"
"    print('grade is B')\n"
"elif grade >= 90:\n"
"    print('grade is A')\n"
"~~~"
msgstr ""
"~~~\n"
"grade = 85\n"
"if grade >= 70:\n"
"    print('grade is C')\n"
"elif grade >= 80:\n"
"    print('grade is B')\n"
"elif grade >= 90:\n"
"    print('grade is A')\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:123
msgid ""
"{: .language-python}\n"
"~~~\n"
"grade is C\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"grade is C\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:129
msgid "*   Does *not* automatically go back and re-evaluate if values change."
msgstr ""
"*   Автоматично *не* повертається назад і не  оцінює повторно, якщо значення"
" змінюються."

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:131
msgid ""
"~~~\n"
"velocity = 10.0\n"
"if velocity > 20.0:\n"
"    print('moving too fast')\n"
"else:\n"
"    print('adjusting velocity')\n"
"    velocity = 50.0\n"
"~~~"
msgstr ""
"~~~\n"
"velocity = 10.0\n"
"if velocity > 20.0:\n"
"    print('рухається занадто швидко')\n"
"else:\n"
"    print('регулювання швидкості')\n"
"    velocity = 50.0\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:139
msgid ""
"{: .language-python}\n"
"~~~\n"
"adjusting velocity\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"регулювання швидкості\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:145
msgid ""
"*   Often use conditionals in a loop to \"evolve\" the values of variables."
msgstr ""
"*   Умовні оператори часто використовуються  в циклі, щоб «розвинути» "
"значення змінних."

# code block
#: python-novice-gapminder/_episodes/13-conditionals.md:147
msgid ""
"~~~\n"
"velocity = 10.0\n"
"for i in range(5): # execute the loop 5 times\n"
"    print(i, ':', velocity)\n"
"    if velocity > 20.0:\n"
"        print('moving too fast')\n"
"        velocity = velocity - 5.0\n"
"    else:\n"
"        print('moving too slow')\n"
"        velocity = velocity + 10.0\n"
"print('final velocity:', velocity)\n"
"~~~"
msgstr ""
"~~~\n"
"velocity = 10.0\n"
"for i in range(5): # виконати цикл 5 разів\n"
"    print(i, ':', velocity)\n"
"    if velocity > 20.0:\n"
"        print('рухається занадто швидко')\n"
"        velocity = velocity - 5.0\n"
"    else:\n"
"        print('рухається надто повільно')\n"
"        velocity = velocity + 10.0\n"
"print('кінцева швидкість:', velocity)\n"
"~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:159
msgid ""
"{: .language-python}\n"
"~~~\n"
"0 : 10.0\n"
"moving too slow\n"
"1 : 20.0\n"
"moving too slow\n"
"2 : 30.0\n"
"moving too fast\n"
"3 : 25.0\n"
"moving too fast\n"
"4 : 20.0\n"
"moving too slow\n"
"final velocity: 30.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"0 : 10.0\n"
"рухається занадто повільно\n"
"1 : 20.0\n"
"рухається занадто повільно\n"
"2 : 30.0\n"
"рухається занадто швидко\n"
"3 : 25.0\n"
"рухається занадто швидко\n"
"4 : 20.0\n"
"рухається занадто повільно\n"
"кінцева швидкість: 30.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/13-conditionals.md:175
msgid ""
"## Create a table showing variables' values to trace a program's execution."
msgstr ""
"## Створіть таблицю зі значеннями змінних для відстеження виконання "
"програми."

# inline html
#: python-novice-gapminder/_episodes/13-conditionals.md:177
msgid ""
"<table>\n"
"  <tr>\n"
"    <td><strong>i</strong></td>\n"
"    <td>0</td>\n"
"    <td>.</td>\n"
"    <td>1</td>\n"
"    <td>.</td>\n"
"    <td>2</td>\n"
"    <td>.</td>\n"
"    <td>3</td>\n"
"    <td>.</td>\n"
"    <td>4</td>\n"
"    <td>.</td>\n"
"  </tr>\n"
"  <tr>\n"
"    <td><strong>velocity</strong></td>\n"
"    <td>10.0</td>\n"
"    <td>20.0</td>\n"
"    <td>.</td>\n"
"    <td>30.0</td>\n"
"    <td>.</td>\n"
"    <td>25.0</td>\n"
"    <td>.</td>\n"
"    <td>20.0</td>\n"
"    <td>.</td>\n"
"    <td>30.0</td>\n"
"  </tr>\n"
"</table>"
msgstr ""
"<table>\n"
"  <tr>\n"
"    <td><strong>i</strong></td>\n"
"    <td>0</td>\n"
"    <td>.</td>\n"
"    <td>1</td>\n"
"    <td>.</td>\n"
"    <td>2</td>\n"
"    <td>.</td>\n"
"    <td>3</td>\n"
"    <td>.</td>\n"
"    <td>4</td>\n"
"    <td>.</td>\n"
"  </tr>\n"
"  <tr>\n"
"    <td><strong>швидкість</strong></td>\n"
"    <td>10.0</td>\n"
"    <td>20.0</td>\n"
"    <td>.</td>\n"
"    <td>30.0</td>\n"
"    <td>.</td>\n"
"    <td>25.0</td>\n"
"    <td>.</td>\n"
"    <td>20.0</td>\n"
"    <td>.</td>\n"
"    <td>30.0</td>\n"
"  </tr>\n"
"</table>"

# unordered list
#: python-novice-gapminder/_episodes/13-conditionals.md:206
msgid ""
"*   The program must have a `print` statement *outside* the body of the loop"
msgstr "*   Програма повинна мати оператор `print` *поза* тілом циклу,"

#: python-novice-gapminder/_episodes/13-conditionals.md:207
msgid ""
"    to show the final value of `velocity`,\n"
"    since its value is updated by the last iteration of the loop."
msgstr ""
"    щоб показати остаточне значення змінної `velocity`,\n"
"    оскільки її значення оновлюється останньою ітерацією циклу."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:210
msgid "> ## Compound Relations Using `and`, `or`, and Parentheses"
msgstr "> ## Комбінація відношень з використанням «і», «або» та круглих дужок"

#: python-novice-gapminder/_episodes/13-conditionals.md:211
msgid ""
">\n"
"> Often, you want some combination of things to be true.  You can combine\n"
"> relations within a conditional using `and` and `or`.  Continuing the example\n"
"> above, suppose you have\n"
">\n"
"> ~~~\n"
"> mass     = [ 3.54,  2.07,  9.22,  1.86,  1.71]\n"
"> velocity = [10.00, 20.00, 30.00, 25.00, 20.00]\n"
">\n"
"> i = 0\n"
"> for i in range(5):\n"
">     if mass[i] > 5 and velocity[i] > 20:\n"
">         print(\"Fast heavy object.  Duck!\")\n"
">     elif mass[i] > 2 and mass[i] <= 5 and velocity[i] <= 20:\n"
">         print(\"Normal traffic\")\n"
">     elif mass[i] <= 2 and velocity[i] <= 20:\n"
">         print(\"Slow light object.  Ignore it\")\n"
">     else:\n"
">         print(\"Whoa!  Something is up with the data.  Check it\")\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Just like with arithmetic, you can and should use parentheses whenever there\n"
"> is possible ambiguity.  A good general rule is to *always* use parentheses\n"
"> when mixing `and` and `or` in the same condition.  That is, instead of:\n"
">\n"
"> ~~~\n"
"> if mass[i] <= 2 or mass[i] >= 5 and velocity[i] > 20:\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> write one of these:\n"
">\n"
"> ~~~\n"
"> if (mass[i] <= 2 or mass[i] >= 5) and velocity[i] > 20:\n"
"> if mass[i] <= 2 or (mass[i] >= 5 and velocity[i] > 20):\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> so it is perfectly clear to a reader (and to Python) what you really mean."
msgstr ""
">\n"
"> Часто потрібно, щоб певна комбінація речей була правдою. Можна комбінувати\n"
"> відносини в умовному операторі з використанням «і» та «або». Продовжуючи приклад,\n"
"> наведений вище, припустімо, що у вас є>\n"
"> ~~~\n"
"> mass     = [ 3.54,  2.07,  9.22,  1.86,  1.71]\n"
"> velocity = [10.00, 20.00, 30.00, 25.00, 20.00]\n"
">\n"
"> i = 0\n"
"> for i in range(5):\n"
">     if mass[i] > 5 and velocity[i] > 20:\n"
">         print(\"Швидкий важкий предмет. Качка!\")\n"
">     elif mass[i] > 2 and mass[i] <= 5 and velocity[i] <= 20:\n"
">         print(\"Нормальний трафік\")\n"
">     elif mass[i] <= 2 and velocity[i] <= 20:\n"
">         print(\"Повільний, легкий предмет. Ігноруйте це\")\n"
">     else:\n"
">         print(\"ой! Щось сталося з даними. Перевірте це\")\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Так само, як і в арифметиці, ви можете і маєте використовувати круглі дужки,\n"
"> якщо у виразі можлива двозначність. Хорошим загальним правилом є використання круглих дужок *завжди*\n"
"> при одночасному використанні `і` та `або` в однакових умовах. Тобто замість:\n"
">\n"
"> ~~~\n"
"> if mass[i] <= 2 or mass[i] >= 5 and velocity[i] > 20:\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> напишіть одну умов нижче:\n"
">\n"
"> ~~~\n"
"> if (mass[i] <= 2 or mass[i] >= 5) and velocity[i] > 20:\n"
"> if mass[i] <= 2 or (mass[i] >= 5 and velocity[i] > 20):\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> і тоді читачеві (і Python) цілком зрозуміло, що ви насправді маєте на увазі."

#: python-novice-gapminder/_episodes/13-conditionals.md:254
msgid ""
">\n"
"> What does this program print?\n"
">\n"
"> ~~~\n"
"> pressure = 71.9\n"
"> if pressure > 50.0:\n"
">     pressure = 25.0\n"
"> elif pressure <= 50.0:\n"
">     pressure = 0.0\n"
"> print(pressure)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > 25.0\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Що надрукує ця програма?\n"
">\n"
"> ~~~\n"
"> pressure = 71.9\n"
"> if pressure > 50.0:\n"
">     pressure = 25.0\n"
"> elif pressure <= 50.0:\n"
">     pressure = 0.0\n"
"> print(pressure)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > 25.0\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:276
msgid "> ## Trimming Values"
msgstr "> ## Обрізання значень"

#: python-novice-gapminder/_episodes/13-conditionals.md:277
msgid ""
">\n"
"> Fill in the blanks so that this program creates a new list\n"
"> containing zeroes where the original list's values were negative\n"
"> and ones where the original list's values were positive.\n"
">\n"
"> ~~~\n"
"> original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]\n"
"> result = ____\n"
"> for value in original:\n"
">     if ____:\n"
">         result.append(0)\n"
">     else:\n"
">         ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> [0, 1, 1, 1, 0, 1]\n"
"> ~~~"
msgstr ""
">\n"
"> Заповніть порожні поля, щоб програма створила новий список,\n"
"> що містить нулі, якщо початкові значення списку були від’ємними\n"
"> та одиниці, де початкові значення списку були додатними.\n"
">\n"
"> ~~~\n"
"> original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]\n"
"> result = ____\n"
"> for value in original:\n"
">     if ____:\n"
">         result.append(0)\n"
">     else:\n"
">         ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> [0, 1, 1, 1, 0, 1]\n"
"> ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:299
msgid "> >"
msgstr "> >"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:301
msgid "> > original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]"
msgstr "> > original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:302
msgid "> > result = []"
msgstr "> > result = []"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:303
msgid "> > for value in original:"
msgstr "> > for value in original:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:304
msgid "> >     if value<0.0:"
msgstr "> >     if value<0.0:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:305
msgid "> >         result.append(0)"
msgstr "> >         result.append(0)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:306
msgid "> >     else:"
msgstr "> >     else:"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:307
msgid "> >         result.append(1)"
msgstr "> >         result.append(1)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:308
msgid "> > print(result)"
msgstr "> > print(result)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:310
msgid "> > {: .language-python}"
msgstr "> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:314
msgid "> ## Processing Small Files"
msgstr "> ## Обробка малих файлів"

#: python-novice-gapminder/_episodes/13-conditionals.md:315
msgid ""
">\n"
"> Modify this program so that it only processes files with fewer than 50 records.\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas as pd\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     contents = pd.read_csv(filename)\n"
">     ____:\n"
">         print(filename, len(contents))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > for filename in glob.glob('data/*.csv'):\n"
"> >     contents = pd.read_csv(filename)\n"
"> >     if len(contents)<50:\n"
"> >         print(filename, len(contents))\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Змініть цю програму так, щоб вона обробляла лише файли з менш ніж 50 записами.\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas as pd\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     contents = pd.read_csv(filename)\n"
">     ____:\n"
">         print(filename, len(contents))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > for filename in glob.glob('data/*.csv'):\n"
"> >     contents = pd.read_csv(filename)\n"
"> >     if len(contents)<50:\n"
"> >         print(filename, len(contents))\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:341
msgid "> ## Initializing"
msgstr "> ## Ініціалізація"

#: python-novice-gapminder/_episodes/13-conditionals.md:342
msgid ""
">\n"
"> Modify this program so that it finds the largest and smallest values in the list\n"
"> no matter what the range of values originally is.\n"
">\n"
"> ~~~\n"
"> values = [...some test data...]\n"
"> smallest, largest = None, None\n"
"> for v in values:\n"
">     if ____:\n"
">         smallest, largest = v, v\n"
">     ____:\n"
">         smallest = min(____, v)\n"
">         largest = max(____, v)\n"
"> print(smallest, largest)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> What are the advantages and disadvantages of using this method\n"
"> to find the range of the data?\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > values = [-2,1,65,78,-54,-24,100]\n"
"> > smallest, largest = None, None\n"
"> > for v in values:\n"
"> >     if smallest==None and largest==None:\n"
"> >         smallest, largest = v, v\n"
"> >     else:\n"
"> >         smallest = min(smallest, v)\n"
"> >         largest = max(largest, v)\n"
"> > print(smallest, largest)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Змініть цю програму так, щоб вона знаходила найбільше та найменше значення у списку\n"
"> незалежно від початкового діапазону значень.\n"
">\n"
"> ~~~\n"
"> values = [...деякі тестові дані...]\n"
"> smallest, largest = None, None\n"
"> for v in values:\n"
">     if ____:\n"
">         smallest, largest = v, v\n"
">     ____:\n"
">         smallest = min(____, v)\n"
">         largest = max(____, v)\n"
"> print(smallest, largest)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> Які переваги та недоліки використання цього методу\n"
"> для визначення діапазону даних?\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > values = [-2,1,65,78,-54,-24,100]\n"
"> > smallest, largest = None, None\n"
"> > for v in values:\n"
"> >     if smallest==None and largest==None:\n"
"> >         smallest, largest = v, v\n"
"> >     else:\n"
"> >         smallest = min(smallest, v)\n"
"> >         largest = max(largest, v)\n"
"> > print(smallest, largest)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/13-conditionals.md:378
msgid "> ## Using Functions With Conditionals in Pandas"
msgstr "> ## Використання функцій з умовними операторами в Pandas"

#: python-novice-gapminder/_episodes/13-conditionals.md:379
msgid ""
">\n"
"> Functions will often contain conditionals.  Here is a short example that\n"
"> will indicate which quartile the argument is in based on hand-coded values\n"
"> for the quartile cut points.\n"
">\n"
"> ~~~\n"
"> def calculate_life_quartile(exp):\n"
">     if exp < 58.41:\n"
">         # This observation is in the first quartile\n"
">         return 1\n"
">     elif exp >= 58.41 and exp < 67.05:\n"
">         # This observation is in the second quartile\n"
">        return 2\n"
">     elif exp >= 67.05 and exp < 71.70:\n"
">         # This observation is in the third quartile\n"
">        return 3\n"
">     elif exp >= 71.70:\n"
">         # This observation is in the fourth quartile\n"
">        return 4\n"
">     else:\n"
">         # This observation has bad data\n"
">        return None\n"
">\n"
"> calculate_life_quartile(62.5)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 2\n"
"> ~~~"
msgstr ""
">\n"
"> Функції часто містять умови. Ось короткий приклад, в якому \n"
"> на основі закодованих вручну значень визначається, у якому квартилі знаходиться аргумент,\n"
"> з урахуванням квартильних точок розрізу.\n"
">\n"
"> ~~~\n"
"> def calculate_life_quartile(exp):\n"
">     if exp < 58.41:\n"
">         # Це спостереження належить першому квартилю\n"
">         return 1\n"
">     elif exp >= 58.41 and exp < 67.05:\n"
">         # Це спостереження належить другому квартилю\n"
">        return 2\n"
">     elif exp >= 67.05 and exp < 71.70:\n"
">         # Це спостереження належить третьому квартилю\n"
">        return 3\n"
">     elif exp >= 71.70:\n"
">         # Це спостереження належить четвертому квартилю\n"
">        return 4\n"
">     else:\n"
">         # Це спостереження має погані дані\n"
">        return None\n"
">\n"
"> calculate_life_quartile(62.5)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> 2\n"
"> ~~~"

#: python-novice-gapminder/_episodes/13-conditionals.md:410
msgid ""
">\n"
"> That function would typically be used within a `for` loop, but Pandas has\n"
"> a different, more efficient way of doing the same thing, and that is by\n"
"> *applying* a function to a dataframe or a portion of a dataframe.  Here\n"
"> is an example, using the definition above.\n"
">\n"
"> ~~~\n"
"> data = pd.read_csv('Americas-data.csv')\n"
"> data['life_qrtl'] = data['lifeExp'].apply(calculate_life_quartile)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> There is a lot in that second line, so let's take it piece by piece.\n"
"> On the right side of the `=` we start with `data['lifeExp']`, which is the\n"
"> column in the dataframe called `data` labeled `lifExp`.  We use the\n"
"> `apply()` to do what it says, apply the `calculate_life_quartile` to the\n"
"> value of this column for every row in the dataframe."
msgstr ""
">\n"
"> Ця функція зазвичай використовується в циклі for, але Pandas має\n"
"> інший, більш ефективний спосіб робити те саме шляхом\n"
"> *застосування* функції до фрейму даних або частини фрейму даних. Розглянемо\n"
"> приклад, використовуючи наведене вище визначення функції.\n"
">\n"
"> ~~~\n"
"> data = pd.read_csv('Americas-data.csv')\n"
"> data['life_qrtl'] = data['lifeExp'].apply(calculate_life_quartile)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> У другому рядку є багато цікавого, тому давайте розглянемо це по частинах.\n"
"> Праворуч від `=` ми починаємо з `data['lifeExp']`, який є \n"
"> стовпцем з позначкою `lifExp` у фреймі даних `data` .  Ми використовуємо засіб\n"
"> `apply()`, щоб виконати функцію `calculate_life_quartile` для\n"
"> визначення значень стовпця  'life_qrtl' для кожного рядку фрему даних `data`"

# Front Matter
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:1
msgid ""
"---\n"
"title: \"Looping Over Data Sets\"\n"
"teaching: 5\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I process many data sets with a single command?\"\n"
"objectives:\n"
"- \"Be able to read and write globbing expressions that match sets of files.\"\n"
"- \"Use glob to create lists of files.\"\n"
"- \"Write for loops to perform operations on files given their names in a list.\"\n"
"keypoints:\n"
"- \"Use a `for` loop to process files given a list of their names.\"\n"
"- \"Use `glob.glob` to find sets of files whose names match a pattern.\"\n"
"- \"Use `glob` and `for` to process batches of files.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Перегляд наборів даних в циклі\"\n"
"teaching: 5\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу обробити багато наборів даних за допомогою однієї команди?\"\n"
"objectives:\n"
"- \"Вміти читати та писати  вирази глоббінгу, які відповідають наборам файлів\"\n"
"- \"Використовувати glob для створення списків файлів.\"\n"
"- \"Писати цикли for для виконання операцій над файлами, названими у списку.\"\n"
"keypoints:\n"
"- \"Використовуйте цикл `for` для обробки файлів із списком їх імен.\"\n"
"- \"Використовуйте `glob.glob`, щоб знайти набори файлів, імена яких відповідають шаблону.\"\n"
"- \"Використовуйте `glob` і `for` для обробки пакетів файлів.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:17
msgid "## Use a `for` loop to process files given a list of their names."
msgstr ""
"## Використовуйте цикл `for`  для обробки файлів, заданих списком їхніх "
"імен."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:19
msgid "*   A filename is a character string."
msgstr "*   Ім'я файлу - це рядок символів."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:20
msgid "*   And lists can contain character strings."
msgstr "*   І списки можуть містити рядки символів."

# code block
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:22
msgid ""
"~~~\n"
"import pandas as pd\n"
"for filename in ['data/gapminder_gdp_africa.csv', 'data/gapminder_gdp_asia.csv']:\n"
"    data = pd.read_csv(filename, index_col='country')\n"
"    print(filename, data.min())\n"
"~~~"
msgstr ""
"~~~\n"
"import pandas as pd\n"
"for filename in ['data/gapminder_gdp_africa.csv', 'data/gapminder_gdp_asia.csv']:\n"
"    data = pd.read_csv(filename, index_col='country')\n"
"    print(filename, data.min())\n"
"~~~"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:28
msgid ""
"{: .language-python}\n"
"~~~\n"
"data/gapminder_gdp_africa.csv gdpPercap_1952    298.846212\n"
"gdpPercap_1957    335.997115\n"
"gdpPercap_1962    355.203227\n"
"gdpPercap_1967    412.977514\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    312.188423\n"
"gdpPercap_2002    241.165877\n"
"gdpPercap_2007    277.551859\n"
"dtype: float64\n"
"data/gapminder_gdp_asia.csv gdpPercap_1952    331\n"
"gdpPercap_1957    350\n"
"gdpPercap_1962    388\n"
"gdpPercap_1967    349\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    415\n"
"gdpPercap_2002    611\n"
"gdpPercap_2007    944\n"
"dtype: float64\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"data/gapminder_gdp_africa.csv gdpPercap_1952    298.846212\n"
"gdpPercap_1957    335.997115\n"
"gdpPercap_1962    355.203227\n"
"gdpPercap_1967    412.977514\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    312.188423\n"
"gdpPercap_2002    241.165877\n"
"gdpPercap_2007    277.551859\n"
"dtype: float64\n"
"data/gapminder_gdp_asia.csv gdpPercap_1952    331\n"
"gdpPercap_1957    350\n"
"gdpPercap_1962    388\n"
"gdpPercap_1967    349\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    415\n"
"gdpPercap_2002    611\n"
"gdpPercap_2007    944\n"
"dtype: float64\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:51
msgid ""
"## Use [`glob.glob`](https://docs.python.org/3/library/glob.html#glob.glob) "
"to find sets of files whose names match a pattern."
msgstr ""
"## Використовуйте "
"[`glob.glob`](https://docs.python.org/3/library/glob.html#glob.glob), щоб "
"знайти набори файлів, імена яких відповідають шаблону."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:53
msgid ""
"*   In Unix, the term \"globbing\" means \"matching a set of files with a "
"pattern\"."
msgstr ""
"*   В Unix термін \"globbing\" означає \"відповідність набору файлів "
"шаблону\"."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:54
msgid "*   The most common patterns are:"
msgstr "*   Найпоширеніші моделі:"

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:55
msgid "    *   `*` meaning \"match zero or more characters\""
msgstr "    *   `*` означає \"відповідати нулю або більшій кількості  символів\""

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:56
msgid "    *   `?` meaning \"match exactly one character\""
msgstr "    *   `?` означає \"відповідати в точності одному символу\""

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:57
msgid ""
"*   Python contains the "
"[`glob`](https://docs.python.org/3/library/glob.html) library to provide "
"pattern matching functionality"
msgstr ""
"*   Python містить бібліотеку "
"[`glob`](https://docs.python.org/3/library/glob.html) для забезпечення "
"функції зіставлення шаблонів"

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:58
msgid ""
"*   The [`glob`](https://docs.python.org/3/library/glob.html) library "
"contains a function also called `glob` to match file patterns"
msgstr ""
"*   Бібліотека [`glob`](https://docs.python.org/3/library/glob.html) містить"
" функцію, яка також називається `glob` для відповідності шаблонам файлів."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:59
msgid ""
"*   E.g., `glob.glob('*.txt')` matches all files in the current directory "
msgstr ""
"*   Наприклад, `glob.glob('*.txt')` відповідає всім файлам у поточному "
"каталозі,"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:60
msgid ""
"    whose names end with `.txt`.\n"
"*   Result is a (possibly empty) list of character strings."
msgstr ""
"    імена яких закінчуються на `.txt`.\n"
"*   Результатом є (можливо, порожній) список рядків символів."

# code block
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:63
msgid ""
"~~~\n"
"import glob\n"
"print('all csv files in data directory:', glob.glob('data/*.csv'))\n"
"~~~"
msgstr ""
"~~~\n"
"import glob\n"
"print('all csv files in data directory:', glob.glob('data/*.csv'))\n"
"~~~"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:67
msgid ""
"{: .language-python}\n"
"~~~\n"
"all csv files in data directory: ['data/gapminder_all.csv', 'data/gapminder_gdp_africa.csv', \\\n"
"'data/gapminder_gdp_americas.csv', 'data/gapminder_gdp_asia.csv', 'data/gapminder_gdp_europe.csv', \\\n"
"'data/gapminder_gdp_oceania.csv']\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"all csv files in data directory: ['data/gapminder_all.csv', 'data/gapminder_gdp_africa.csv', \\\n"
"'data/gapminder_gdp_americas.csv', 'data/gapminder_gdp_asia.csv', 'data/gapminder_gdp_europe.csv', \\\n"
"'data/gapminder_gdp_oceania.csv']\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:75
msgid ""
"~~~\n"
"print('all PDB files:', glob.glob('*.pdb'))\n"
"~~~"
msgstr ""
"~~~\n"
"print('all PDB files:', glob.glob('*.pdb'))\n"
"~~~"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:78
msgid ""
"{: .language-python}\n"
"~~~\n"
"all PDB files: []\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"all PDB files: []\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:84
msgid "## Use `glob` and `for` to process batches of files."
msgstr "## Використовуйте `glob` і `for` для обробки пакетів файлів."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:86
msgid ""
"*   Helps a lot if the files are named and stored systematically and "
"consistently"
msgstr ""
"*   Дуже допомагає, якщо файли мають імена та зберігаються систематично та "
"послідовно,"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:87
msgid "    so that simple patterns will find the right data."
msgstr " так що прості шаблони знайдуть потрібні дані."

# code block
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:89
msgid ""
"~~~\n"
"for filename in glob.glob('data/gapminder_*.csv'):\n"
"    data = pd.read_csv(filename)\n"
"    print(filename, data['gdpPercap_1952'].min())\n"
"~~~"
msgstr ""
"~~~\n"
"for filename in glob.glob('data/gapminder_*.csv'):\n"
"    data = pd.read_csv(filename)\n"
"    print(filename, data['gdpPercap_1952'].min())\n"
"~~~"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:94
msgid ""
"{: .language-python}\n"
"~~~\n"
"data/gapminder_all.csv 298.8462121\n"
"data/gapminder_gdp_africa.csv 298.8462121\n"
"data/gapminder_gdp_americas.csv 1397.717137\n"
"data/gapminder_gdp_asia.csv 331.0\n"
"data/gapminder_gdp_europe.csv 973.5331948\n"
"data/gapminder_gdp_oceania.csv 10039.59564\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"data/gapminder_all.csv 298.8462121\n"
"data/gapminder_gdp_africa.csv 298.8462121\n"
"data/gapminder_gdp_americas.csv 1397.717137\n"
"data/gapminder_gdp_asia.csv 331.0\n"
"data/gapminder_gdp_europe.csv 973.5331948\n"
"data/gapminder_gdp_oceania.csv 10039.59564\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:105
msgid "*   This includes all data, as well as per-region data."
msgstr "*   Це включає всі дані, а також дані по регіонах."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:106
msgid ""
"*   Use a more specific pattern in the exercises to exclude the whole data "
"set."
msgstr ""
"*   Використовуйте більш конкретний шаблон у вправах, щоб виключити весь "
"набір даних."

# unordered list
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:107
msgid ""
"*   But note that the minimum of the entire data set is also the minimum of "
"one of the data sets,"
msgstr ""
"*   Але зауважте, що мінімум усього набору даних також є мінімумом одного з "
"наборів даних,"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:108
msgid "    which is a nice check on correctness."
msgstr "    що є хорошою перевіркою правильності."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:110
msgid "> ## Determining Matches"
msgstr "> ## Визначення збігів"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:111
msgid ""
">\n"
"> Which of these files is *not* matched by the expression `glob.glob('data/*as*.csv')`?\n"
">\n"
"> 1. `data/gapminder_gdp_africa.csv`\n"
"> 2. `data/gapminder_gdp_americas.csv`\n"
"> 3. `data/gapminder_gdp_asia.csv`\n"
"> 4. 1 and 2 are not matched.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1 is not matched by the glob."
msgstr ""
">\n"
"> Який із цих файлів *не* відповідає виразу `glob.glob('data/*as*.csv')`?\n"
">\n"
"> 1. `data/gapminder_gdp_africa.csv`\n"
"> 2. `data/gapminder_gdp_americas.csv`\n"
"> 3. `data/gapminder_gdp_asia.csv`\n"
"> 4. 1 and 2 are not matched.\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1 не відповідає glob."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:125
msgid "> ## Minimum File Size"
msgstr "> ## Мінімальний розмір файлу"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:126
msgid ""
">\n"
"> Modify this program so that it prints the number of records in\n"
"> the file that has the fewest records.\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas as pd\n"
"> fewest = ____\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     dataframe = pd.____(filename)\n"
">     fewest = min(____, dataframe.shape[0])\n"
"> print('smallest file has', fewest, 'records')\n"
"> ~~~\n"
"> {: .language-python}\n"
"> Note that the [shape method](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.shape.html)\n"
"> returns a tuple with the number of rows and columns of the data frame.\n"
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > fewest = float('Inf')\n"
"> > for filename in glob.glob('data/*.csv'):\n"
"> >     dataframe = pd.read_csv(filename)\n"
"> >     fewest = min(fewest, dataframe.shape[0])\n"
"> > print('smallest file has', fewest, 'records')\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Змініть цю програму так, щоб вона друкувала кількість записів\n"
"> файлі, який містить найменшу кількість записів\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas as pd\n"
"> fewest = ____\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     dataframe = pd.____(filename)\n"
">     fewest = min(____, dataframe.shape[0])\n"
"> print('smallest file has', fewest, 'records')\n"
"> ~~~\n"
"> {: .language-python}\n"
"> Зауважте, що [shape method](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.shape.html)\n"
"> повертає кортеж із кількістю рядків і стовпців фрейму даних.\n"
">\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > fewest = float('Inf')\n"
"> > for filename in glob.glob('data/*.csv'):\n"
"> >     dataframe = pd.read_csv(filename)\n"
"> >     fewest = min(fewest, dataframe.shape[0])\n"
"> > print('smallest file has', fewest, 'records')\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/14-looping-data-sets.md:157
msgid "> ## Comparing Data"
msgstr "> ## Порівняння даних"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:158
msgid ""
">\n"
"> Write a program that reads in the regional data sets\n"
"> and plots the average GDP per capita for each region over time\n"
"> in a single chart.\n"
"> > ## Solution\n"
"> > This solution builds a useful legend by using the string [`split`](https://docs.python.org/3/library/stdtypes.html#str.split) method to\n"
"> > extract the `region` from the path 'data/gapminder_gdp_a_specific_region.csv'. The [`pathlib module`]\n"
"> > also provides useful abstractions for file and path manipulation like returning the name of a file \n"
"> > without the file extension.\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > import matplotlib.pyplot as plt\n"
"> > fig, ax = plt.subplots(1,1)\n"
"> > for filename in glob.glob('data/gapminder_gdp*.csv'):\n"
"> >     dataframe = pd.read_csv(filename)\n"
"> >     # extract <region> from the filename, expected to be in the format 'data/gapminder_gdp_<region>.csv'.\n"
"> >     # we will split the string using the split method and `_` as our separator,\n"
"> >     # retrieve the last string in the list that split returns (`<region>.csv`), \n"
"> >     # and then remove the `.csv` extension from that string.\n"
"> >     region = filename.split('_')[-1][:-4] \n"
"> >     dataframe.mean().plot(ax=ax, label=region)\n"
"> > plt.legend()\n"
"> > plt.show()\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Напишіть програму, яка читає регіональні набори даних\n"
"> і будує графік середнього ВВП на душу населення для кожного регіону в часі\n"
"> в одній діаграмі.\n"
"> > ## Рішення\n"
"> > Це рішення створює корисну легенду за допомогою методу string [`split`](https://docs.python.org/3/library/stdtypes.html#str.split) для\n"
"> > вилучення  `region` зі шляху 'data/gapminder_gdp_a_specific_region.csv'. [`pathlib module`]\n"
"> > також забезпечує корисні абстракції для маніпулювання файлами та шляхами, такі як  повернення назви файлу \n"
"> > без розширення файлу.\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > import matplotlib.pyplot as plt\n"
"> > fig, ax = plt.subplots(1,1)\n"
"> > for filename in glob.glob('data/gapminder_gdp*.csv'):\n"
"> >     dataframe = pd.read_csv(filename)\n"
"> >     # вилучіть <region> з імені файла, який має бути у форматі 'data/gapminder_gdp_<region>.csv'.\n"
"> >     # ми розділимо рядок за допомогою методу split та з викоританням `_` як роздільника,\n"
"> >     # отримаємо останній рядок у списку, який повертає розділений (`<region>.csv`), \n"
"> >     # та потім видалимо розширення `.csv` з того рядка.\n"
"> >     region = filename.split('_')[-1][:-4] \n"
"> >     dataframe.mean().plot(ax=ax, label=region)\n"
"> > plt.legend()\n"
"> > plt.show()\n"
"> > ~~~\n"
"> > {: .language-python}"

# Front Matter
#: python-novice-gapminder/_episodes/15-coffee.md:1
msgid ""
"---\n"
"layout: break\n"
"title: \"Afternoon Coffee\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"
msgstr ""
"---\n"
"layout: break\n"
"title: \"Післяобідня кава\"\n"
"teaching: 0\n"
"exercises: 0\n"
"break: 15\n"
"---"

#: python-novice-gapminder/_episodes/15-coffee.md:10
msgid ""
"Over break, reflect on and discuss the following:\n"
"* A common refrain in software engineering is \"Don't Repeat Yourself\". How do the techniques we've learned in the last\n"
"lessons help us avoid repeating ourselves? _note that in practice there is some nuance to this and should be balanced\n"
"with doing the simplest thing that could possibly work_\n"
"* What are the pros / cons of making a variable global or local to a function? \n"
"* When would you consider turning a block of code into a function definition?"
msgstr ""
"Під час перерви поміркуйте та обговоріть наступне:\n"
"* Загальний приспів у розробці програмного забезпечення: «Не повторюйся\". Як  техніки, які ми вивчали на попередньому\n"
"занятті, допомагають нам не повторюватися? _зауважте, що на практиці в цьому є певний нюанс, який слід збалансувати\n"
"роблячи найпростішу річ, яка може спрацювати_\n"
"* Які плюси/мінуси створення глобальної чи локальної змінної для функції? \n"
"* В якому випадку є сенс перетворення блокк коду на визначення функції?"

# Front Matter
#: python-novice-gapminder/_episodes/16-writing-functions.md:1
msgid ""
"---\n"
"title: \"Writing Functions\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I create my own functions?\"\n"
"objectives:\n"
"- \"Explain and identify the difference between function definition and function call.\"\n"
"- \"Write a function that takes a small, fixed number of arguments and produces a single result.\"\n"
"keypoints:\n"
"- \"Break programs down into functions to make them easier to understand.\"\n"
"- \"Define a function using `def` with a name, parameters, and a block of code.\"\n"
"- \"Defining a function does not run it.\"\n"
"- \"Arguments in call are matched to parameters in definition.\"\n"
"- \"Functions may return a result to their caller using `return`.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Написання функцій\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"Як я можу створити власні функції?\"\n"
"objectives:\n"
"- \"Пояснити і визначитие різницю між визначенням функції та викликом функції.\"\n"
"- \"Написати функцію, яка приймає невелику фіксовану кількість аргументів і видає єдиний результат.\"\n"
"keypoints:\n"
"- \"Розбийте програми на функції, щоб їх було легше зрозуміти.\"\n"
"- \"Визначте функцію за допомогою `def` з назвою, параметрами та блоком коду.\"\n"
"- \"Визначення функції не запускає її.\"\n"
"- \"Аргументи у виклику зіставляються з параметрами у визначенні.\"\n"
"- \"Функції можуть повертати результат своєго виклику за допомогою `return`.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/16-writing-functions.md:17
msgid ""
"## Break programs down into functions to make them easier to understand."
msgstr "## Розбийте програми на функції, щоб їх було легше зрозуміти."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:19
msgid ""
"*   Human beings can only keep a few items in working memory at a time."
msgstr ""
"*  Людина може одночасно зберігати лише кілька елементів у робочій пам’яті. "

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:20
msgid ""
"*   Understand larger/more complicated ideas by understanding and combining "
"pieces."
msgstr ""
"*   Розуміти великі/складніші ідеї, розуміючи та комбінуючи їх частини."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:21
msgid "    *   Components in a machine."
msgstr "    *   Компоненти в машині."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:22
msgid "    *   Lemmas when proving theorems."
msgstr "    *   Леми при доведенні теорем."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:23
msgid "*   Functions serve the same purpose in programs."
msgstr "*   Функції служать тій же меті в програмах."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:24
msgid ""
"    *   *Encapsulate* complexity so that we can treat it as a single "
"\"thing\"."
msgstr ""
"    *   *Інкапсулю.nm* складність, щоб ми могли розглядати їх як одну «річ»."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:25
msgid "*   Also enables *re-use*."
msgstr "*   Також уможливлюють *повторне використання*."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:26
msgid "    *   Write one time, use many times."
msgstr "    *   Пишемо один раз, використовуємо багато разів.."

# header
#: python-novice-gapminder/_episodes/16-writing-functions.md:28
msgid ""
"## Define a function using `def` with a name, parameters, and a block of "
"code."
msgstr ""
"## Визначте функцію за допомогою `def` з назвою, параметрами та блоком "
"коду.\""

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:30
msgid "*   Begin the definition of a new function with `def`."
msgstr "*   Почніть визначення нової функції з `def`."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:31
msgid "*   Followed by the name of the function."
msgstr "*  Далі йде назва функції."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:32
msgid "    *   Must obey the same rules as variable names."
msgstr ""
"    *   Назви функцій мають відповідати тим самим правилам, що й імена "
"змінних."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:33
msgid "*   Then *parameters* in parentheses."
msgstr "*   Потім *параметри* в дужках."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:34
msgid "    *   Empty parentheses if the function doesn't take any inputs."
msgstr "    *   Порожні дужки, якщо функція не приймає жодних вхідних даних."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:35
msgid "    *   We will discuss this in detail in a moment."
msgstr "    *   Ми наразі обговоримо це детально."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:36
msgid "*   Then a colon."
msgstr "*   Потім двокрапка."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:37
msgid "*   Then an indented block of code."
msgstr "*   Потім блок коду з відступом."

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:39
msgid ""
"~~~\n"
"def print_greeting():\n"
"    print('Hello!')\n"
"~~~"
msgstr ""
"~~~\n"
"def print_greeting():\n"
"    print('Hello!')\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/16-writing-functions.md:45
msgid "## Defining a function does not run it."
msgstr "## Визначення функції не запускає її."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:47
msgid "*   Defining a function does not run it."
msgstr "*   Визначення функції не запускає її."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:48
msgid "    *   Like assigning a value to a variable."
msgstr "    *   Як присвоєння значення змінній."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:49
msgid "*   Must call the function to execute the code it contains."
msgstr "*   Необхідно викликати функцію, щоб виконати код, який вона містить."

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:51
msgid ""
"~~~\n"
"print_greeting()\n"
"~~~"
msgstr ""
"~~~\n"
"print_greeting()\n"
"~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:54
msgid ""
"{: .language-python}\n"
"~~~\n"
"Hello!\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Hello!\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/16-writing-functions.md:60
msgid "## Arguments in call are matched to parameters in definition."
msgstr "## Аргументи у виклику зіставляються з параметрами у визначенні."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:62
msgid "*   Functions are most useful when they can operate on different data."
msgstr ""
"*   Функції найбільш корисні, коли вони можуть працювати з різними даними."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:63
msgid "*   Specify *parameters* when defining a function."
msgstr "*   Укажіть *параметри* під час визначення функції."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:64
msgid "    *   These become variables when the function is executed."
msgstr "    *   Вони стають змінними під час виконання функції."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:65
msgid ""
"    *   Are assigned the arguments in the call (i.e., the values passed to "
"the function)."
msgstr ""
"    *   Праметрам присвоюються аргументи виклику (тобто значення, передані у"
" функцію)"

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:66
msgid ""
"    *   If you don't name the arguments when using them in the call, the "
"arguments will be matched to"
msgstr ""
"    *   Якщо ви не називаєте аргументи під час їх використання у виклику, "
"аргументи будуть зіставлені з"

#: python-novice-gapminder/_episodes/16-writing-functions.md:67
msgid "parameters in the order the parameters are defined in the function."
msgstr "параметрами в тому порядку, у якому вони визначені у функції."

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:69
msgid ""
"~~~\n"
"def print_date(year, month, day):\n"
"    joined = str(year) + '/' + str(month) + '/' + str(day)\n"
"    print(joined)\n"
"\n"
"print_date(1871, 3, 19)\n"
"~~~"
msgstr ""
"~~~\n"
"def print_date(year, month, day):\n"
"    joined = str(year) + '/' + str(month) + '/' + str(day)\n"
"    print(joined)\n"
"\n"
"print_date(1871, 3, 19)\n"
"~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:76
msgid ""
"{: .language-python}\n"
"~~~\n"
"1871/3/19\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"1871/3/19\n"
"~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:82
msgid ""
"Or, we can name the arguments when we call the function, which allows us to\n"
"specify them in any order:\n"
"~~~\n"
"print_date(month=3, day=19, year=1871)\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"1871/3/19\n"
"~~~"
msgstr ""
"Або ми можемо назвати аргументи під час виклику функції, що дозволяє нам це зробити\n"
"вказати їх у довільному порядку:\n"
"~~~\n"
"print_date(month=3, day=19, year=1871)\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"1871/3/19\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:93
msgid ""
"*   Via "
"[Twitter](https://twitter.com/minisciencegirl/status/693486088963272705):"
msgstr ""
"*   Згідно "
"[Twitter](https://twitter.com/minisciencegirl/status/693486088963272705):"

#: python-novice-gapminder/_episodes/16-writing-functions.md:94
msgid ""
"    `()` contains the ingredients for the function\n"
"    while the body contains the recipe."
msgstr ""
"    `()` містить інгредієнти для функції\n"
"    тоді як тіло містить рецепт."

# header
#: python-novice-gapminder/_episodes/16-writing-functions.md:97
msgid "## Functions may return a result to their caller using `return`."
msgstr ""
"## Функції можуть повертати результат до свого виклику за допомогою "
"`return`."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:99
msgid "*   Use `return ...` to give a value back to the caller."
msgstr ""
"*   Використовуте `return ...` щоб повернути значення у місце виклику."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:100
msgid "*   May occur anywhere in the function."
msgstr "*   Може виникнути будь-де у функції."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:101
msgid "*   But functions are easier to understand if `return` occurs:"
msgstr "*   Але функції легше зрозуміти, якщо реалізовано функцію `return`:"

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:102
msgid "    *   At the start to handle special cases."
msgstr "    *   На початку функції для обробки особливих випадків."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:103
msgid "    *   At the very end, with a final result."
msgstr "    *   У самому кінці з остаточним результатом."

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:105
msgid ""
"~~~\n"
"def average(values):\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"~~~"
msgstr ""
"~~~\n"
"def average(values):\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:113
msgid ""
"~~~\n"
"a = average([1, 3, 4])\n"
"print('average of actual values:', a)\n"
"~~~"
msgstr ""
"~~~\n"
"a = average([1, 3, 4])\n"
"print('середнє фактичних значень:', a)\n"
"~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:117
msgid ""
"{: .language-python}\n"
"~~~\n"
"average of actual values: 2.6666666666666665\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"середнє фактичних значень: 2.6666666666666665\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:123
msgid ""
"~~~\n"
"print('average of empty list:', average([]))\n"
"~~~"
msgstr ""
"~~~\n"
"print('середнє порожнього списку:', average([]))\n"
"~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:126
msgid ""
"{: .language-python}\n"
"~~~\n"
"average of empty list: None\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"середнє порожнього списку: None\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:132
msgid ""
"*   Remember: [every function returns something]({{ page.root }}/04-built-"
"in/)."
msgstr ""
"*   Пам'ятайте: [кожна функція щось повертає]({{ page.root }}/04-built-in/)."

# unordered list
#: python-novice-gapminder/_episodes/16-writing-functions.md:133
msgid ""
"*   A function that doesn't explicitly `return` a value automatically "
"returns `None`."
msgstr ""
"*   Функція, яка явно не містить `return` , автоматично повертає `None`."

# code block
#: python-novice-gapminder/_episodes/16-writing-functions.md:135
msgid ""
"~~~\n"
"result = print_date(1871, 3, 19)\n"
"print('result of call is:', result)\n"
"~~~"
msgstr ""
"~~~\n"
"result = print_date(1871, 3, 19)\n"
"print('результат виклику є таким:', result)\n"
"~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:139
msgid ""
"{: .language-python}\n"
"~~~\n"
"1871/3/19\n"
"result of call is: None\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"1871/3/19\n"
"результат виклику є таким: None\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:146
msgid "> ## Identifying Syntax Errors"
msgstr "> ## Виявлення синтаксичних помилок"

#: python-novice-gapminder/_episodes/16-writing-functions.md:147
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code and read the error message.\n"
">    Is it a `SyntaxError` or an `IndentationError`?\n"
"> 3. Fix the error.\n"
"> 4. Repeat steps 2 and 3 until you have fixed all the errors.\n"
">\n"
"> ~~~\n"
"> def another_function\n"
">   print(\"Syntax errors are annoying.\")\n"
">    print(\"But at least python tells us about them!\")\n"
">   print(\"So they are usually not too hard to fix.\")\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def another_function():\n"
"> >   print(\"Syntax errors are annoying.\")\n"
"> >   print(\"But at least Python tells us about them!\")\n"
"> >   print(\"So they are usually not too hard to fix.\")\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> 1. Прочитайте наведений нижче код і спробуйте визначити, у чому полягають помилки\n"
"> *без* запуску.\n"
"> 2. Запустіть код і прочитайте повідомлення про помилку.\n"
"> Це `SyntaxError` чи `IndentationError`?\n"
"> 3. Виправте помилку.\n"
"> 4. Повторюйте кроки 2 та 3 доки не виправите всі помилки.\n"
">\n"
"> ~~~\n"
"> def another_function\n"
"> print(\"Syntax errors are annoying.\")\n"
"> print(\"But at least python tells us about them!\")\n"
"> print(\"So they are usually not too hard to fix.\")\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > def another_function():\n"
"> > print(\"Синтаксичні помилки дратують.\")\n"
"> > print(\"Але принаймні Python розповідає нам про них!\")\n"
"> > print(\"Тож їх зазвичай не надто важко виправити.\")\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:175
msgid "> ## Definition and Use"
msgstr "> ## Визначення та використання"

#: python-novice-gapminder/_episodes/16-writing-functions.md:176
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> def report(pressure):\n"
">     print('pressure is', pressure)\n"
">\n"
"> print('calling', report, 22.5)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > calling <function report at 0x7fd128ff1bf8> 22.5\n"
"> > ~~~ \n"
"> > {: .output}\n"
"> >\n"
"> > A function call always needs parenthesis, otherwise you get memory address of the function object. So, if we wanted to call the function named report, and give it the value 22.5 to report on, we could have our function call as follows\n"
"> > ~~~\n"
"> > print(\"calling\")\n"
"> > report(22.5)\n"
"> > ~~~"
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> def report(pressure):\n"
">     print('тиск', pressure)\n"
">\n"
"> print('виклик', report, 22.5)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > calling <function report at 0x7fd128ff1bf8> 22.5\n"
"> > ~~~ \n"
"> > {: .output}\n"
"> >\n"
"> > Для виклику функції завжди потрібні круглі дужки, інакше ви отримаєте адресу пам’яті об’єкта функції. Отже, якщо ми хочемо викликати функцію під назвою report і надати їй значення 22,5 для звіту, ми могли б викликати нашу функцію так\n"
"> > ~~~\n"
"> > print(\"виклик\")\n"
"> > report(22.5)\n"
"> > ~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:202
msgid "> ## Order of Operations"
msgstr "> ## Порядок виконання операцій"

#: python-novice-gapminder/_episodes/16-writing-functions.md:203
msgid ""
">\n"
"> The example above:\n"
">\n"
"> ~~~\n"
"> result = print_date(1871, 3, 19)\n"
"> print('result of call is:', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> printed:\n"
"> ~~~\n"
"> 1871/3/19\n"
"> result of call is: None\n"
"> ~~~"
msgstr ""
">\n"
"> Приклад вище:\n"
">\n"
"> ~~~\n"
"> result = print_date(1871, 3, 19)\n"
"> print('результат виклику:', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> надруковано:\n"
"> ~~~\n"
"> 1871/3/19\n"
"> результат виклику: None\n"
"> ~~~"

#: python-novice-gapminder/_episodes/16-writing-functions.md:218
msgid ""
">\n"
"> Explain why the two lines of output appeared in the order they did.\n"
">\n"
"> What's wrong in this example?\n"
"> ~~~\n"
"> result = print_date(1871,3,19)\n"
">\n"
"> def print_date(year, month, day):\n"
">    joined = str(year) + '/' + str(month) + '/' + str(day)\n"
">    print(joined)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Solution\n"
"> > \n"
"> > 1. The first line of output (`1871/3/19`) is from the print function inside `print_date()`, while the second line\n"
"> > is from the print function below the function call. All of the code inside `print_date()` is executed first, and\n"
"> > the program then \"leaves\" the function and executes the rest of the code.   \n"
"> > 2. The problem with the example is that the function is defined *after* the call to the function is made. Python\n"
"> > therefore doesn't understand the function call."
msgstr ""
">\n"
"> Поясніть, чому два рядки виводу з’явилися в такому порядку.\n"
">\n"
"> Що не так у цьому прикладі?\n"
"> ~~~\n"
"> result = print_date(1871,3,19)\n"
">\n"
"> def print_date(year, month, day):\n"
">    joined = str(year) + '/' + str(month) + '/' + str(day)\n"
">    print(joined)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> \n"
"> > ## Рішення\n"
"> > \n"
"> > 1. Перший рядок виводу (`1871/3/19`) є результатом функції друку всередині `print_date()`, тоді як другий рядок\n"
"> > з функції друку під викликом функції. Весь код всередині `print_date()` виконується спочатку, а потім\n"
"> > програма \"залишає\" функцію та виконує решту коду.   \n"
"> > 2. Проблема з прикладом полягає в тому, що функція визначається *після* виклику функції. Тому Python\n"
"> > не розуміє виклик функції."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:241
msgid "> ## Encapsulation"
msgstr "> ## Інкапсуляція"

#: python-novice-gapminder/_episodes/16-writing-functions.md:242
msgid ""
">\n"
"> Fill in the blanks to create a function that takes a single filename as an argument,\n"
"> loads the data in the file named by the argument,\n"
"> and returns the minimum value in that data.\n"
">\n"
"> ~~~\n"
"> import pandas as pd\n"
">\n"
"> def min_in_data(____):\n"
">     data = ____\n"
">     return ____\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import pandas as pd\n"
"> > \n"
"> > def min_in_data(filename):\n"
"> >     data = pd.read_csv(filename)\n"
"> >     return data.min()\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Заповніть порожні поля, щоб створити функцію, яка приймає одне ім’я файлу як аргумент,\n"
"> завантажує дані у файл, названий аргументом,\n"
"> і повертає мінімальне значення цих даних.\n"
">\n"
"> ~~~\n"
"> import pandas as pd\n"
">\n"
"> def min_in_data(____):\n"
">     data = ____\n"
">     return ____\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > import pandas as pd\n"
"> > \n"
"> > def min_in_data(filename):\n"
"> >     data = pd.read_csv(filename)\n"
"> >     return data.min()\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:268
msgid "> ## Find the First"
msgstr "> ## Знайди Перший"

#: python-novice-gapminder/_episodes/16-writing-functions.md:269
msgid ""
">\n"
"> Fill in the blanks to create a function that takes a list of numbers as an argument\n"
"> and returns the first negative value in the list.\n"
"> What does your function do if the list is empty?\n"
">\n"
"> ~~~\n"
"> def first_negative(values):\n"
">     for v in ____:\n"
">         if ____:\n"
">             return ____\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def first_negative(values):\n"
"> >     for v in values:\n"
"> >         if v<0:\n"
"> >             return v\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > If an empty list is passed to this function, it returns `None`:\n"
"> > ~~~\n"
"> > my_list = []\n"
"> > print(first_negative(my_list))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > None\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Заповніть порожні поля, щоб створити функцію, яка приймає список чисел як аргумент\n"
"> і повертає перше від’ємне значення в списку.\n"
"> Що робить ваша функція, якщо список порожній?\n"
">\n"
"> ~~~\n"
"> def first_negative(values):\n"
">     for v in ____:\n"
">         if ____:\n"
">             return ____\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > def first_negative(values):\n"
"> >     for v in values:\n"
"> >         if v<0:\n"
"> >             return v\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Якщо цій функції передається порожній список, вона повертає `None`:\n"
"> > ~~~\n"
"> > my_list = []\n"
"> > print(first_negative(my_list))\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > ~~~\n"
"> > None\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:303
msgid "> ## Calling by Name"
msgstr "> ## Виклик по імені"

#: python-novice-gapminder/_episodes/16-writing-functions.md:304
msgid ""
">\n"
"> Earlier we saw this function:\n"
">\n"
"> ~~~\n"
"> def print_date(year, month, day):\n"
">     joined = str(year) + '/' + str(month) + '/' + str(day)\n"
">     print(joined)\n"
"> ~~~\n"
"> We saw that we can call the function using *named arguments*, like this:\n"
"> ~~~\n"
"> print_date(day=1, month=2, year=2003)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  What does `print_date(day=1, month=2, year=2003)` print?\n"
"> 2.  When have you seen a function call like this before?\n"
"> 3.  When and why is it useful to call functions this way?\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > \n"
"> > 1. `2003/2/1`\n"
"> > 2. We saw examples of using *named arguments* when working with the pandas library. For example, when reading in a dataset \n"
"> > using `data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')`, the last argument `index_col` is a \n"
"> > named argument.  \n"
"> > 3. Using named arguments can make code more readable since one can see from the function call what name the different arguments \n"
"> > have inside the function. It can also reduce the chances of passing arguments in the wrong order, since by using named arguments \n"
"> > the order doesn't matter."
msgstr ""
">\n"
"> Раніше ми розглядали таку функцію:\n"
">\n"
"> ~~~\n"
"> def print_date(year, month, day):\n"
">     joined = str(year) + '/' + str(month) + '/' + str(day)\n"
">     print(joined)\n"
"> ~~~\n"
"> Ми побачили, що можна викликати функцію за допомогою *іменованих аргументів*, наприклад:\n"
"> ~~~\n"
"> print_date(day=1, month=2, year=2003)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Що друкує `print_date(day=1, month=2, year=2003)`?\n"
"> 2. Коли ви раніше бачили подібний виклик функції?\n"
"> 3. Коли і чому корисно викликати функції таким чином?\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> > \n"
"> > 1. `2003/2/1`\n"
"> > 2. Ми бачили приклади використання *іменованих аргументів* під час роботи з бібліотекою pandas. Наприклад, під час читання в наборі даних \n"
"> > using `data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')`, останній аргумент `index_col` є \n"
"> > іменованим аргументом.  \n"
"> > 3. Використання іменованих аргументів може зробити код більш читабельним, оскільки з виклику функції можна побачити, які імена мають різні аргументи\n"
"> > всередині функції. Це також може зменшити ймовірність передачі аргументів у неправильному порядку, оскільки за допомогою іменованих аргументів \n"
"> > порядок не має значення."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:334
msgid "> ## Encapsulate of If/Print Block"
msgstr "> ## Інкапсуляція блоку If/Print"

#: python-novice-gapminder/_episodes/16-writing-functions.md:335
msgid ""
">\n"
"> The code below will run on a label-printer for chicken eggs.  A digital scale will report a chicken egg mass (in grams) to the computer and then the computer will print a label.  \n"
">\n"
"> Please re-write the code so that the if-block is folded into a function.\n"
">\n"
"> ~~~\n"
">  import random\n"
">  for i in range(10):\n"
">\n"
">     # simulating the mass of a chicken egg\n"
">     # the (random) mass will be 70 +/- 20 grams\n"
">     mass=70+20.0*(2.0*random.random()-1.0)\n"
">\n"
">     print(mass)\n"
">    \n"
">     #egg sizing machinery prints a label\n"
">     if(mass>=85):\n"
">        print(\"jumbo\")\n"
">     elif(mass>=70):\n"
">        print(\"large\")\n"
">     elif(mass<70 and mass>=55):\n"
">        print(\"medium\")\n"
">     else:\n"
">        print(\"small\")\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
">\n"
"> The simplified program  follows.  What function definition will make it functional?\n"
">\n"
"> ~~~\n"
">  # revised version\n"
">  import random\n"
">  for i in range(10):\n"
">\n"
">     # simulating the mass of a chicken egg\n"
">     # the (random) mass will be 70 +/- 20 grams\n"
">     mass=70+20.0*(2.0*random.random()-1.0)\n"
">\n"
">     print(mass,print_egg_label(mass))    \n"
">\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
">\n"
"> 1. Create a function definition for `print_egg_label()` that will work with the revised program above.  Note, the function's return value will be significant. Sample output might be `71.23 large`.\n"
"> 2.  A dirty egg might have a mass of more than 90 grams, and a spoiled or broken egg will probably have a mass that's less than 50 grams.  Modify your `print_egg_label()` function to account for these error conditions. Sample output could be `25 too light, probably spoiled`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def print_egg_label(mass):\n"
"> >     #egg sizing machinery prints a label\n"
"> >     if(mass>=90):\n"
"> >         return(\"warning: egg might be dirty\")\n"
"> >     elif(mass>=85):\n"
"> >         return(\"jumbo\")\n"
"> >     elif(mass>=70):\n"
"> >         return(\"large\")\n"
"> >     elif(mass<70 and mass>=55):\n"
"> >         return(\"medium\")\n"
"> >     elif(mass<50):\n"
"> >         return(\"too light, probably spoiled\")\n"
"> >     else:\n"
"> >         return(\"small\")\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Наведений нижче код запускатиметься на принтері етикеток для курячих яєць. Цифрові ваги повідомлять комп’ютеру про масу курячого яйця (у грамах), а потім комп’ютер друкує етикетку.  \n"
">\n"
"> Будь ласка, перепишіть код так, щоб if-блок був вкладений у функцію.\n"
">\n"
"> ~~~\n"
">  import random\n"
">  for i in range(10):\n"
">\n"
">     # імітація маси курячого яйця\n"
">     # (випадкова) маса становитиме 70 +/- 20 грамів\n"
">     mass=70+20.0*(2.0*random.random()-1.0)\n"
">\n"
">     print(mass)\n"
">    \n"
">     #машини для сортування яєць друкують етикетку\n"
">     if(mass>=85):\n"
">        print(\"джамбо\")\n"
">     elif(mass>=70):\n"
">        print(\"велике\")\n"
">     elif(mass<70 and mass>=55):\n"
">        print(\"середнє\")\n"
">     else:\n"
">        print(\"мале\")\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
">\n"
"> Далі спрощена програма. Яке визначення функції зробить його функціональним?\n"
">\n"
"> ~~~\n"
">  # Адаптована версія\n"
">  import random\n"
">  for i in range(10):\n"
">\n"
">     # імітація маси курячого яйця\n"
">     # (випадкова) маса становитиме 70 +/- 20 грамів\n"
">     mass=70+20.0*(2.0*random.random()-1.0)\n"
">\n"
">     print(mass,print_egg_label(mass))    \n"
">\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
">\n"
"> 1. Створіть визначення функції для `print_egg_label()`, яка працюватиме з адаптованою програмою вище. Зверніть увагу, що чисельне значення, яке повертає функція, буде важливим. Зразок оформлення результату може мати вигляд `71.23 large`.\n"
"> 2.  Брудне яйце може мати масу понад 90 грамів, а зіпсоване чи розбите яйце, ймовірно, матиме масу менше 50 грамів. Змініть свою функцію `print_egg_label()` для врахування цих умов помилки. Вихідний зразок може бути `25 занадто легке, можливо, зіпсоване`. \n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > def print_egg_label(mass):\n"
"> >     #egg sizing machinery prints a label\n"
"> >     if(mass>=90):\n"
"> >         return(\"попередження: яйце може бути брудним\")\n"
"> >     elif(mass>=85):\n"
"> >         return(\"джамбо\")\n"
"> >     elif(mass>=70):\n"
"> >         return(\"велике\")\n"
"> >     elif(mass<70 and mass>=55):\n"
"> >         return(\"середнє\")\n"
"> >     elif(mass<50):\n"
"> >         return(\"занадто легке, можливо, зіпсоване\")\n"
"> >     else:\n"
"> >         return(\"мале\")\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:405
msgid "> ## Encapsulating Data Analysis"
msgstr "> ## Інкапсуляція аналізу даних"

#: python-novice-gapminder/_episodes/16-writing-functions.md:406
msgid ""
">\n"
"> Assume that the following code has been executed:\n"
">\n"
"> ~~~\n"
"> import pandas as pd\n"
">\n"
"> df = pd.read_csv('data/gapminder_gdp_asia.csv', index_col=0)\n"
"> japan = df.loc['Japan']\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.Complete the statements below to obtain the average GDP for Japan\n"
"> across the years reported for the 1980s.\n"
">\n"
"> ~~~\n"
"> year = 1983\n"
"> gdp_decade = 'gdpPercap_' + str(year // ____)\n"
"> avg = (japan.loc[gdp_decade + ___] + japan.loc[gdp_decade + ___]) / 2\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 2.Abstract the code above into a single function.\n"
">\n"
"> ~~~\n"
"> def avg_gdp_in_decade(country, continent, year):\n"
">     df = pd.read_csv('data/gapminder_gdp_'+___+'.csv',delimiter=',',index_col=0)\n"
">     ____\n"
">     ____\n"
">     ____\n"
">     return avg\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 3.How would you generalize this function\n"
">    if you did not know beforehand which specific years occurred as columns in the data?\n"
">    For instance, what if we also had data from years ending in 1 and 9 for each decade?\n"
">    (Hint: use the columns to filter out the ones that correspond to the decade,\n"
">    instead of enumerating them in the code.)\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1.\n"
"> >\n"
"> > ~~~\n"
"> > year = 1983\n"
"> > gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> > avg = (japan.loc[gdp_decade + '2'] + japan.loc[gdp_decade + '7']) / 2\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > ~~~\n"
"> > def avg_gdp_in_decade(country, continent, year):\n"
"> >     df = pd.read_csv('data/gapminder_gdp_' + continent + '.csv', index_col=0)\n"
"> >     c = df.loc[country]\n"
"> >     gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> >     avg = (c.loc[gdp_decade + '2'] + c.loc[gdp_decade + '7'])/2\n"
"> >     return avg\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 3.\n"
"> > \n"
"> > We need to loop over the reported years\n"
"> >    to obtain the average for the relevant ones in the data.\n"
"> >\n"
"> > ~~~\n"
"> > def avg_gdp_in_decade(country, continent, year):\n"
"> >     df = pd.read_csv('data/gapminder_gdp_' + continent + '.csv', index_col=0)\n"
"> >     c = df.loc[country]\n"
"> >     gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> >     total = 0.0\n"
"> >     num_years = 0\n"
"> >     for yr_header in c.index: # c's index contains reported years\n"
"> >         if yr_header.startswith(gdp_decade):\n"
"> >             total = total + c.loc[yr_header]\n"
"> >             num_years = num_years + 1\n"
"> >     return total/num_years\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > The function can now be called by:\n"
"> > ~~~\n"
"> > avg_gdp_in_decade('Japan','asia',1983)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > \n"
"> > ~~~\n"
"> > 20880.023800000003\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Припустімо, що наступний код було виконано:\n"
">\n"
"> ~~~\n"
"> import pandas as pd\n"
">\n"
"> df = pd.read_csv('data/gapminder_gdp_asia.csv', index_col=0)\n"
"> japan = df.loc['Japan']\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.Заповніть наведені нижче твердження, щоб отримати середній ВВП Японії\n"
"> за роками, зазначеними у 1980-х роках.\n"
">\n"
"> ~~~\n"
"> year = 1983\n"
"> gdp_decade = 'gdpPercap_' + str(year // ____)\n"
"> avg = (japan.loc[gdp_decade + ___] + japan.loc[gdp_decade + ___]) / 2\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 2.Абстрагуйте код вище в одну функцію.\n"
">\n"
"> ~~~\n"
"> def avg_gdp_in_decade(country, continent, year):\n"
">     df = pd.read_csv('data/gapminder_gdp_'+___+'.csv',delimiter=',',index_col=0)\n"
">     ____\n"
">     ____\n"
">     ____\n"
">     return avg\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 3.Як би ви узагальнили цю функцію\n"
">    якщо ви не знали заздалегідь, які конкретні роки зустрічаються як стовпці в даних?\n"
">   Наприклад, що, якби ми також мали дані за роки, що закінчуються на 1 і 9 для кожного десятиліття?\n"
">    (Підказка: використовуйте стовпці, щоб відфільтрувати ті, що відповідають десятиліттям,\n"
">    замість того, щоб перелічувати їх у коді.)\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1.\n"
"> >\n"
"> > ~~~\n"
"> > year = 1983\n"
"> > gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> > avg = (japan.loc[gdp_decade + '2'] + japan.loc[gdp_decade + '7']) / 2\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > ~~~\n"
"> > def avg_gdp_in_decade(country, continent, year):\n"
"> >     df = pd.read_csv('data/gapminder_gdp_' + continent + '.csv', index_col=0)\n"
"> >     c = df.loc[country]\n"
"> >     gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> >     avg = (c.loc[gdp_decade + '2'] + c.loc[gdp_decade + '7'])/2\n"
"> >     return avg\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 3.\n"
"> > \n"
"> > Нам потрібно переглянути звітні роки\n"
"> >  для отримання середнього значення для відповідних у даних.\n"
"> >\n"
"> > ~~~\n"
"> > def avg_gdp_in_decade(country, continent, year):\n"
"> >     df = pd.read_csv('data/gapminder_gdp_' + continent + '.csv', index_col=0)\n"
"> >     c = df.loc[country]\n"
"> >     gdp_decade = 'gdpPercap_' + str(year // 10)\n"
"> >     total = 0.0\n"
"> >     num_years = 0\n"
"> >     for yr_header in c.index: # c's index contains reported years\n"
"> >         if yr_header.startswith(gdp_decade):\n"
"> >             total = total + c.loc[yr_header]\n"
"> >             num_years = num_years + 1\n"
"> >     return total/num_years\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Функцію тепер можна викликати:\n"
"> > ~~~\n"
"> > avg_gdp_in_decade('Japan','asia',1983)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > \n"
"> > ~~~\n"
"> > 20880.023800000003\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/16-writing-functions.md:500
msgid "> ## Simulating a dynamical system"
msgstr "> ## Моделювання динамічної системи"

#: python-novice-gapminder/_episodes/16-writing-functions.md:501
msgid ""
">\n"
"> In mathematics, a [dynamical system](https://en.wikipedia.org/wiki/Dynamical_system) is a system in which a function describes the time dependence of a point in a geometrical space.  A canonical example of a dynamical system is a system called the [logistic map](https://en.wikipedia.org/wiki/Logistic_map).\n"
">\n"
">\n"
"> 1. Define a function called `logistic_map` that takes two inputs: `x`, representing the state of the system at time _t_, and a parameter `r`. This function should return a value representing the state of the system at time _t+1_.\n"
">\n"
"> 2. Using a `for` loop, iterate the `logistic_map` function defined in part 1 starting from an initial condition of 0.5 for `t_final=10`, `100`, and `1000` periods. Store the intermediate results in a list so that after the `for` loop terminates you have accumulated a sequence of values representing the state of the logistic map at time _t=0,1,...,t_final_.\n"
">\n"
"> 3. Encapsulate the logic of your `for` loop into a function called `iterate` that takes the initial condition as its first input, the parameter `t_final` as its second input and the parameter `r` as its third input. The function should return the list of values representing the state of the logistic map at time _t=0,1,...,t_final_.\n"
">\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1.\n"
"> >\n"
"> > ~~~\n"
"> > def logistic_map(x, r):\n"
"> >     return r * x * (1 - x)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > ~~~\n"
"> > initial_condition = 0.5\n"
"> > t_final = 10\n"
"> > r = 1.0\n"
"> > trajectory = [initial_condition]\n"
"> > for t in range(1, t_final):\n"
"> >     trajectory.append( logistic_map(trajectory[t-1], r) )\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 3.\n"
"> > ~~~\n"
"> > def iterate(initial_condition, t_final, r):\n"
"> >     trajectory = [initial_condition]\n"
"> >     for t in range(1, t_final):\n"
"> >         trajectory.append( logistic_map(trajectory[t-1], r) )\n"
"> >     return trajectory\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> У математиці [динамічна система](https://en.wikipedia.org/wiki/Dynamical_system) це система, у якій функція описує залежність точки в геометричному просторі від часу. Канонічним прикладом динамічної системи є система під назвою [логістичне відображення] (https://en.wikipedia.org/wiki/Logistic_map).\n"
">\n"
">\n"
"> 1. Визначте функцію під назвою `logistic_map`, яка приймає два входи: `x`, що представляє стан системи в момент часу _t_, і параметр `r`. Ця функція має повертати значення, що представляє стан системи в момент часу _t+1_.\n"
">\n"
"> 2. Використовуючи цикл `for`, повторіть функцію `logistic_map`, визначену в частині 1, починаючи з початкової умови 0,5 для періодів`t_final=10`, `100`, і `1000`. Зберігайте проміжні результати в списку, щоб після завершення циклу `for` ви накопичили послідовність значень, що представляють стан `logistic_map` в моменти часу _t=0,1,...,t_final_.\n"
">\n"
"> 3. Інкапсулюйте логіку вашого циклу `for` у функцію під назвою `iterate`, яка приймає початкову умову як перший вхід, параметр `t_final` як другий вхід і параметр `r` як третій вхід. Функція має повертати список значень, що представляють стан логістичної карти в момент часу _t=0,1,...,t_final_.\n"
">\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1.\n"
"> >\n"
"> > ~~~\n"
"> > def logistic_map(x, r):\n"
"> >     return r * x * (1 - x)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > ~~~\n"
"> > initial_condition = 0.5\n"
"> > t_final = 10\n"
"> > r = 1.0\n"
"> > trajectory = [initial_condition]\n"
"> > for t in range(1, t_final):\n"
"> >     trajectory.append( logistic_map(trajectory[t-1], r) )\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > 3.\n"
"> > ~~~\n"
"> > def iterate(initial_condition, t_final, r):\n"
"> >     trajectory = [initial_condition]\n"
"> >     for t in range(1, t_final):\n"
"> >         trajectory.append( logistic_map(trajectory[t-1], r) )\n"
"> >     return trajectory\n"
"> > ~~~\n"
"> > {: .language-python}"

# Front Matter
#: python-novice-gapminder/_episodes/17-scope.md:1
msgid ""
"---\n"
"title: \"Variable Scope\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How do function calls actually work?\"\n"
"- \"How can I determine where errors occurred?\"\n"
"objectives:\n"
"- \"Identify local and global variables.\"\n"
"- \"Identify parameters as local variables.\"\n"
"- \"Read a traceback and determine the file, function, and line number on which the error occurred, the type of error, and the error message.\"\n"
"keypoints:\n"
"- \"The scope of a variable is the part of a program that can 'see' that variable.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Область видимості змінної\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як насправді працюють виклики функцій?\"\n"
"- \"Як я можу визначити місце виникнення помилок?\"\n"
"objectives:\n"
"- \"Ідентифікація локальних і глобальних змінних.\"\n"
"- \"Ідентифікація параметрів як локальних змінних.\"\n"
"- \"Аналіз звіту системної  діагностики (Traceback) та визначення файлу, функції та номеру рядка, що містять збій, тип помилки та повідомлення про помилку\"\n"
"keypoints:\n"
"- \"Область змінної - це частина програми, яка може 'бачити' цю зміну.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/17-scope.md:15
msgid ""
"## The scope of a variable is the part of a program that can 'see' that "
"variable."
msgstr "## Область змінної - це частина програми, яка може \"бачити\" цю зміну."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:17
msgid "*   There are only so many sensible names for variables."
msgstr "*   Є дуже багато розумних імен для змінних."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:18
msgid "*   People using functions shouldn't have to worry about"
msgstr "*  Людям, які використовують функції, не варто хвилюватися,"

#: python-novice-gapminder/_episodes/17-scope.md:19
msgid ""
"    what variable names the author of the function used.\n"
"*   People writing functions shouldn't have to worry about\n"
"    what variable names the function's caller uses.\n"
"*   The part of a program in which a variable is visible is called its *scope*."
msgstr ""
"    яке ім'я змінної використав автор функції.\n"
"* Людям, які пишуть функції, не варто хвилюватися,\n"
"які імена змінних використовує виклик функції.\n"
"* Частина програми, в якій змінна є видимою, називається її *областю*."

# code block
#: python-novice-gapminder/_episodes/17-scope.md:24
msgid ""
"~~~\n"
"pressure = 103.9\n"
"\n"
"def adjust(t):\n"
"    temperature = t * 1.43 / pressure\n"
"    return temperature\n"
"~~~"
msgstr ""
"~~~\n"
"pressure = 103.9\n"
"\n"
"def adjust(t):\n"
"    temperature = t * 1.43 / pressure\n"
"    return temperature\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:33
msgid "*   `pressure` is a *global variable*."
msgstr "*   `pressure` є *глобальною змінною*."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:34
msgid "    *   Defined outside any particular function."
msgstr "    *   Визначається поза будь-якою конкретною функцією."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:35
msgid "    *   Visible everywhere."
msgstr "    *   Є видимою у будь-якому місці програми."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:36
msgid "*   `t` and `temperature` are *local variables* in `adjust`."
msgstr "*   `t` та `temperature` є *локальними змінними* в `adjust`."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:37
msgid "    *   Defined in the function."
msgstr "    *   Визначені у функції."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:38
msgid "    *   Not visible in the main program."
msgstr "    *   Не є видимими у головній програмі."

# unordered list
#: python-novice-gapminder/_episodes/17-scope.md:39
msgid "    *   Remember: a function parameter is a variable"
msgstr "    *   Пам'ятайте: параметр функції є змінною,"

#: python-novice-gapminder/_episodes/17-scope.md:40
msgid ""
"        that is automatically assigned a value when the function is called."
msgstr ""
"        якій автоматично присвоюється значення під час виклику функції."

# code block
#: python-novice-gapminder/_episodes/17-scope.md:42
msgid ""
"~~~\n"
"print('adjusted:', adjust(0.9))\n"
"print('temperature after call:', temperature)\n"
"~~~"
msgstr ""
"~~~\n"
"print('adjusted:', adjust(0.9))\n"
"print('температура після виклику функції:', temperature)\n"
"~~~"

#: python-novice-gapminder/_episodes/17-scope.md:46
msgid ""
"{: .language-python}\n"
"~~~\n"
"adjusted: 0.01238691049085659\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"adjusted: 0.01238691049085659\n"
"~~~"

# code block
#: python-novice-gapminder/_episodes/17-scope.md:51
msgid ""
"~~~\n"
"Traceback (most recent call last):\n"
"  File \"/Users/swcarpentry/foo.py\", line 8, in <module>\n"
"    print('temperature after call:', temperature)\n"
"NameError: name 'temperature' is not defined\n"
"~~~"
msgstr ""
"~~~\n"
"Traceback (most recent call last):\n"
"  File \"/Users/swcarpentry/foo.py\", line 8, in <module>\n"
"    print('temperature after call:', temperature)\n"
"NameError: name 'temperature' is not defined\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/17-scope.md:59
msgid "> ## Local and Global Variable Use"
msgstr "> ## Використання локальних і глобальних змінних"

#: python-novice-gapminder/_episodes/17-scope.md:60
msgid ""
">\n"
"> Trace the values of all variables in this program as it is executed.\n"
"> (Use '---' as the value of variables before and after they exist.)\n"
">\n"
"> ~~~\n"
"> limit = 100\n"
">\n"
"> def clip(value):\n"
">     return min(max(0.0, value), limit)\n"
">\n"
"> value = -22.5\n"
"> print(clip(value))\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Відстежте значення всіх змінних у цій програмі під час її виконання.\n"
"> (Використовуйте '---' як значення змінних до і після їх існування.)\n"
">\n"
"> ~~~\n"
"> limit = 100\n"
">\n"
"> def clip(value):\n"
">     return min(max(0.0, value), limit)\n"
">\n"
"> value = -22.5\n"
"> print(clip(value))\n"
"> ~~~\n"
"> {: .language-python}"

#: python-novice-gapminder/_episodes/17-scope.md:77
msgid ""
">\n"
"> Read the traceback below, and identify the following:\n"
">\n"
"> 1. How many levels does the traceback have?\n"
"> 2. What is the file name where the error occurred?\n"
"> 3. What is the function name where the error occurred?\n"
"> 4. On which line number in this function did the error occur?\n"
"> 5. What is the type of error?\n"
"> 6. What is the error message?\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> KeyError                                  Traceback (most recent call last)\n"
"> <ipython-input-2-e4c4cbafeeb5> in <module>()\n"
">       1 import errors_02\n"
"> ----> 2 errors_02.print_friday_message()\n"
">\n"
"> /Users/ghopper/thesis/code/errors_02.py in print_friday_message()\n"
">      13\n"
">      14 def print_friday_message():\n"
"> ---> 15     print_message(\"Friday\")\n"
">\n"
"> /Users/ghopper/thesis/code/errors_02.py in print_message(day)\n"
">       9         \"sunday\": \"Aw, the weekend is almost over.\"\n"
">      10     }\n"
"> ---> 11     print(messages[day])\n"
">      12\n"
">      13\n"
">\n"
"> KeyError: 'Friday'\n"
"> ~~~"
msgstr ""
">\n"
"> Прочитайте системну діагностику нижче та визначте наступне:\n"
">\n"
"> 1. Скільки рівнів має трасування помилок?\n"
"> 2. Як називається файл, у якому сталася помилка?\n"
"> 3. Як називається функція, у якій сталася помилка?\n"
"> 4. Який номер рядка цієї функції, де виникла помилка?\n"
"> 5. Який тип помилки?\n"
"> 6. Яке повідомлення про помилку?\n"
">\n"
"> ~~~\n"
"> ---------------------------------------------------------------------------\n"
"> KeyError                                  Traceback (most recent call last)\n"
"> <ipython-input-2-e4c4cbafeeb5> in <module>()\n"
">       1 import errors_02\n"
"> ----> 2 errors_02.print_friday_message()\n"
">\n"
"> /Users/ghopper/thesis/code/errors_02.py in print_friday_message()\n"
">      13\n"
">      14 def print_friday_message():\n"
"> ---> 15     print_message(\"Friday\")\n"
">\n"
"> /Users/ghopper/thesis/code/errors_02.py in print_message(day)\n"
">       9         \"sunday\": \"Aw, the weekend is almost over.\"\n"
">      10     }\n"
"> ---> 11     print(messages[day])\n"
">      12\n"
">      13\n"
">\n"
"> KeyError: 'Friday'\n"
"> ~~~"

# Front Matter
#: python-novice-gapminder/_episodes/18-style.md:1
msgid ""
"---\n"
"title: \"Programming Style\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I make my programs more readable?\"\n"
"- \"How do most programmers format their code?\"\n"
"- \"How can programs check their own operation?\"\n"
"objectives:\n"
"- \"Provide sound justifications for basic rules of coding style.\"\n"
"- \"Refactor one-page programs to make them more readable and justify the changes.\"\n"
"- \"Use Python community coding standards (PEP-8).\"\n"
"keypoints:\n"
"- \"Follow standard Python style in your code.\"\n"
"- \"Use docstrings to provide builtin help.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Стиль програмування\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"Як я можу зробити мої програми більш читабельними?\"\n"
"- \"Як більшість програмістів форматують свій код?\"\n"
"- \"Як програми можуть перевірити свою роботу?\"\n"
"objectives:\n"
"- \"Визначення основних правил стилю кодування\"\n"
"- \"Рефакторинг односторінкових програм, щоб зробити їх більш читабельними та обґрунтувати зміни\"\n"
"- \"Використовання стандартів кодування спільноти Python (PEP-8).\"\n"
"keypoints:\n"
"- \"Дотримуйтеся стандартного стилю Python у своєму коді.\"\n"
"- \"Використовуйте рядки документів для надання вбудованої довідки\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/18-style.md:18
msgid "## Coding style"
msgstr "## Стиль кодування"

#: python-novice-gapminder/_episodes/18-style.md:20
msgid ""
"Coding style helps us to understand the code better. It helps to maintain and change the code.\n"
"Python relies strongly on coding style, as we may notice by the indentation we apply to lines to define different blocks of code.\n"
"Python proposes a standard style through one of its first Python Enhancement Proposals (PEP), [PEP8](https://www.python.org/dev/peps/pep-0008), and highlight the importance of readability in the [Zen of Python](https://www.python.org/dev/peps/pep-0020)."
msgstr ""
"Стиль кодування допомагає нам краще зрозуміти код. Це допомагає підтримувати та змінювати код.\n"
"Python значним чином покладається на стиль кодування, як ми можемо помітити за відступами, які ми застосовуємо до рядків для визначення різних блоків коду.\n"
"Python пропонує стандартний стиль в одній із своїх перших пропозицій щодо вдосконалення Python (Python Enhancement Proposals - PEP), [PEP8](https://www.python.org/dev/peps/pep-0008), і підкреслює важливість читабельності в [Zen of Python](https://www.python.org/dev/peps/pep-0020)."

#: python-novice-gapminder/_episodes/18-style.md:24
msgid ""
"We may highlight some points:\n"
"*   document your code\n"
"*   use clear, meaningful variable names\n"
"*   use white-space, *not* tabs, to indent lines"
msgstr ""
"Виділимо такі важливі моменти:\n"
"*  документуйте свій код\n"
"* використовуйте чіткі, зрозумілі назви змінних\n"
"* використовуйте пробіли, *не* табуляцію, для відступу рядків"

# header
#: python-novice-gapminder/_episodes/18-style.md:30
msgid "## Follow standard Python style in your code."
msgstr "## Дотримуйтеся стандартного стилю Python у своєму коді."

# unordered list
#: python-novice-gapminder/_episodes/18-style.md:32
msgid "*   [PEP8](https://www.python.org/dev/peps/pep-0008):"
msgstr "*   [PEP8](https://www.python.org/dev/peps/pep-0008):"

#: python-novice-gapminder/_episodes/18-style.md:33
msgid ""
"    a style guide for Python that discusses topics such as how you should name variables,\n"
"    how you should use indentation in your code,\n"
"    how you should structure your `import` statements,\n"
"    etc.\n"
"    Adhering to PEP8 makes it easier for other Python developers to read and understand your code,\n"
"    and to understand what their contributions should look like.\n"
"    The [PEP8 application and Python library](https://pypi.python.org/pypi/pep8)\n"
"    can check your code for compliance with PEP8.\n"
"*   [Google style guide on Python](https://google.github.io/styleguide/pyguide.html) \n"
"    supports the use of PEP8 and extend the coding style to more specific structure of \n"
"    a Python code, which may be interesting also to follow.\n"
"    Google's [formatting application is called \"yapf\"](https://github.com/google/yapf/)."
msgstr ""
"    посібник зі стилю для Python, який обговорює такі теми, як імена змінних,\n"
"   як ви повинні використовувати відступи у своєму коді,\n"
"    як ви повинні структурувати ваші `import` оператори імпорту, \n"
"   тощо.\n"
"    Дотримання PEP8 полегшує іншим розробникам Python читання та розуміння вашого коду,\n"
"    і зрозуміти, як мають виглядати їхні внески.\n"
"    Документація [Застосування PEP8 і бібліотека Python](https://pypi.python.org/pypi/pep8)\n"
"    допоможе перевірити ваш код на відповідність PEP8. \n"
"*  Посібник [Google style guide on Python](https://google.github.io/styleguide/pyguide.html) \n"
"   підтримує використання PEP8 та імплементує стиль кодування до більш специфічної структури\n"
"    коду Python,  теж може бути цікавим для застосування.\n"
"    Рекомендації Google [щодо форматування програмного коду,  називаються \"yapf\"](https://github.com/google/yapf/)."

# header
#: python-novice-gapminder/_episodes/18-style.md:46
msgid "## Use assertions to check for internal errors."
msgstr "##Використовуйте твердження для перевірки внутрішніх помилок."

#: python-novice-gapminder/_episodes/18-style.md:48
msgid ""
"Assertions are a simple, but powerful method for making sure that the "
"context in which your code is executing is as you expect."
msgstr ""
"Твердження (Assert) — це простий, але потужний спосіб переконатися, що "
"контекст, у якому виконується ваш код, відповідає вашим очікуванням."

# code block
#: python-novice-gapminder/_episodes/18-style.md:50
msgid ""
"~~~\n"
"def calc_bulk_density(mass, volume):\n"
"    '''Return dry bulk density = powder mass / powder volume.'''\n"
"    assert volume > 0\n"
"    return mass / volume\n"
"~~~"
msgstr ""
"~~~\n"
"def calc_bulk_density(mass, volume):\n"
"    '''Return dry bulk density = powder mass / powder volume.'''\n"
"    assert volume > 0\n"
"    return mass / volume\n"
"~~~"

#: python-novice-gapminder/_episodes/18-style.md:58
msgid ""
"If the assertion is `False`, the Python interpreter raises an "
"`AssertionError` runtime exception. The source code for the expression that "
"failed will be displayed as part of the error message. To ignore assertions "
"in your code run the interpreter with the '-O' (optimize) switch. Assertions"
" should contain only simple checks and never change the state of the "
"program. For example, an assertion should never contain an assignment."
msgstr ""
"Якщо твердження має значення `False`, інтерпретатор Python викликає "
"виключення `AssertionError` під час виконання програми. Вихідний код виразу,"
" який не вдалося виконати, буде відображено як частину повідомлення про "
"помилку. Щоб ігнорувати твердження у вашому коді, запустіть інтерпретатор із"
" перемикачем «-O» (оптимізація). Твердження повинні містити лише прості "
"перевірки і ніколи не змінювати стан програми. Наприклад, твердження ніколи "
"не повинно містити присвоєння."

# header
#: python-novice-gapminder/_episodes/18-style.md:60
msgid "## Use docstrings to provide builtin help."
msgstr "## Використовуйте рядки документів для надання вбудованої довідки."

# unordered list
#: python-novice-gapminder/_episodes/18-style.md:62
msgid "*   If the first thing in a function is a character string"
msgstr "*   Якщо першим у функції є рядок символів,"

#: python-novice-gapminder/_episodes/18-style.md:63
msgid ""
"    that is not assigned directly to a variable,\n"
"    Python attaches it to the function as the builtin help variable.\n"
"*   Called a *docstring* (short for \"documentation string\")."
msgstr ""
"    який не присвоюється безпосередньо змінній,\n"
"    Python приєднує його до функції як вбудовану змінну довідки.\n"
"*   Ця змінна називається *docstring* (скорочення від «documentation string»)."

# code block
#: python-novice-gapminder/_episodes/18-style.md:67
msgid ""
"~~~\n"
"def average(values):\n"
"    \"Return average of values, or None if no values are supplied.\"\n"
"\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"\n"
"help(average)\n"
"~~~"
msgstr ""
"~~~\n"
"def average(values):\n"
"    \"Повертає середнє значення для набору величин або None, якщо набір величин не наданий.\"\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"\n"
"help(average)\n"
"~~~"

#: python-novice-gapminder/_episodes/18-style.md:77
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on function average in module __main__:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on function average in module __main__:"

#: python-novice-gapminder/_episodes/18-style.md:81
msgid ""
"average(values)\n"
"    Return average of values, or None if no values are supplied.\n"
"~~~"
msgstr ""
"average(values)\n"
"    Повертає середнє зачення для набору величин або None, якщо набір величин не наданий.\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:86
msgid "> ## Multiline Strings"
msgstr "> ## Багаторядкові рядки"

#: python-novice-gapminder/_episodes/18-style.md:87
msgid ""
">\n"
"> Often use *multiline strings* for documentation.\n"
"> These start and end with three quote characters (either single or double)\n"
"> and end with three matching characters.\n"
">\n"
"> ~~~\n"
"> \"\"\"This string spans\n"
"> multiple lines.\n"
">\n"
"> Blank lines are allowed.\"\"\"\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Часто для документації використовуються *багаторядкові рядки* .\n"
"> Вони починаються і закінчуються трьома символами лапок (одинарними або подвійними)\n"
"> і закінчується трьома відповідними символами.\n"
">\n"
"> ~~~\n"
"> \"\"\"Цей рядок охоплює\n"
"> кілька рядків.\n"
">\n"
"> Допускаються порожні рядки.\"\"\"\n"
"> ~~~\n"
"> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:101
msgid "> ## What Will Be Shown?"
msgstr "> ## Що буде показано?"

#: python-novice-gapminder/_episodes/18-style.md:102
msgid ""
">\n"
"> Highlight the lines in the code below that will be available as online help.\n"
"> Are there lines that should be made available, but won't be?\n"
"> Will any lines produce a syntax error or a runtime error?\n"
">\n"
"> ~~~\n"
"> \"Find maximum edit distance between multiple sequences.\"\n"
"> # This finds the maximum distance between all sequences.\n"
">\n"
"> def overall_max(sequences):\n"
">     '''Determine overall maximum edit distance.'''\n"
"> \n"
">     highest = 0\n"
">     for left in sequences:\n"
">         for right in sequences:\n"
">             '''Avoid checking sequence against itself.'''\n"
">             if left != right:\n"
">                 this = edit_distance(left, right)\n"
">                 highest = max(highest, this)\n"
"> \n"
">     # Report.\n"
">     return highest\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Виділіть рядки в коді нижче, які будуть доступні як онлайн-довідка..\n"
"> Чи є лінії, які мають бути доступні, але не будуть?\n"
"> Чи буде якийсь рядок видавати синтаксичну помилку або помилку виконання?\n"
">\n"
"> ~~~\n"
"> \"Знайти максимальну відстань редагування між кількома послідовностями.\"\n"
"> # Знаходить максимальну відстань між усіма послідовностями.\n"
">\n"
"> def overall_max(sequences):\n"
">     '''Визначає загальну максимальну відстань  редагування.'''\n"
"> \n"
">     highest = 0\n"
">     for left in sequences:\n"
">         for right in sequences:\n"
">             '''Уникнути перевірки послідовності на саму себе.'''\n"
">             if left != right:\n"
">                 this = edit_distance(left, right)\n"
">                 highest = max(highest, this)\n"
"> \n"
">     # Звіт.\n"
">     return highest\n"
"> ~~~\n"
"> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:128
msgid "> ## Document This"
msgstr "> ## Задокументуйте це"

#: python-novice-gapminder/_episodes/18-style.md:129
msgid ""
">\n"
"> Turn the comment on the following function into a docstring\n"
"> and check that `help` displays it properly.\n"
">\n"
"> ~~~\n"
"> def middle(a, b, c):\n"
">     # Return the middle value of three.\n"
">     # Assumes the values can actually be compared.\n"
">     values = [a, b, c]\n"
">     values.sort()\n"
">     return values[1]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def middle(a, b, c):\n"
"> >     '''Return the middle value of three.\n"
"> >     Assumes the values can actually be compared.'''\n"
"> >     values = [a, b, c]\n"
"> >     values.sort()\n"
"> >     return values[1]\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Перетворіть коментар до наступної функції на рядок документації\n"
"> і перевірте правильність подання командою `help`.\n"
">\n"
"> ~~~\n"
"> def middle(a, b, c):\n"
">     # Повертає середнє значення трьох величин.\n"
">     # У припущенні, що значення можна порівняти.\n"
">     values = [a, b, c]\n"
">     values.sort()\n"
">     return values[1]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > def middle(a, b, c):\n"
"> >     '''Повертає середнє значення трьох величин.\n"
"> >     У припущенні, що значення можна порівняти.'''\n"
"> >     values = [a, b, c]\n"
"> >     values.sort()\n"
"> >     return values[1]\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:156
msgid "> ## Clean Up This Code"
msgstr "> ## Очистіть цей код"

#: python-novice-gapminder/_episodes/18-style.md:157
msgid ""
">\n"
"> 1. Read this short program and try to predict what it does.\n"
"> 2. Run it: how accurate was your prediction?\n"
"> 3. Refactor the program to make it more readable.\n"
">    Remember to run it after each change to ensure its behavior hasn't changed.\n"
"> 4. Compare your rewrite with your neighbor's.\n"
">    What did you do the same?\n"
">    What did you do differently, and why?\n"
">\n"
"> ~~~\n"
"> n = 10\n"
"> s = 'et cetera'\n"
"> print(s)\n"
"> i = 0\n"
"> while i < n:\n"
">     # print('at', j)\n"
">     new = ''\n"
">     for j in range(len(s)):\n"
">         left = j-1\n"
">         right = (j+1)%len(s)\n"
">         if s[left]==s[right]: new += '-'\n"
">         else: new += '*'\n"
">     s=''.join(new)\n"
">     print(s)\n"
">     i += 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Here's one solution.\n"
"> >\n"
"> > ~~~\n"
"> > def string_machine(input_string, iterations):\n"
"> >     \"\"\"\n"
"> >     Takes input_string and generates a new string with -'s and *'s\n"
"> >     corresponding to characters that have identical adjacent characters\n"
"> >     or not, respectively.  Iterates through this procedure with the resultant\n"
"> >     strings for the supplied number of iterations.\n"
"> >     \"\"\"\n"
"> >     print(input_string)\n"
"> >     input_string_length = len(input_string)\n"
"> >     old = input_string\n"
"> >     for i in range(iterations):\n"
"> >         new = ''\n"
"> >         # iterate through characters in previous string\n"
"> >         for j in range(input_string_length):\n"
"> >             left = j-1\n"
"> >             right = (j+1) % input_string_length  # ensure right index wraps around\n"
"> >             if old[left] == old[right]:\n"
"> >                 new += '-'\n"
"> >             else:\n"
"> >                 new += '*'\n"
"> >         print(new)\n"
"> >         # store new string as old\n"
"> >         old = new     \n"
"> >\n"
"> > string_machine('et cetera', 10)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > \n"
"> > ~~~\n"
"> > et cetera\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > --*-*-*-*\n"
"> > **-------\n"
"> > ***-----*\n"
"> > --**---**\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> 1. Прочитайте цю коротку програму та спробуйте передбачити, що вона робить.\n"
"> 2. Запустіть програму: наскільки точним був ваш прогноз?\n"
"> 3. Проведіть рефакторинг програми, щоб зробити її більш читабельною.\n"
">   Не забувайте запускати програми після кожної зміни, щоб переконатися, що її поведінка не змінилася.\n"
"> 4. Порівняйте свої перетворення  з результатом студента поруч.\n"
">    Що ви зробили так само?\n"
">    Що ви зробили інакше і чому?\n"
">\n"
"> ~~~\n"
"> n = 10\n"
"> s = 'et cetera'\n"
"> print(s)\n"
"> i = 0\n"
"> while i < n:\n"
">     # print('at', j)\n"
">     new = ''\n"
">     for j in range(len(s)):\n"
">         left = j-1\n"
">         right = (j+1)%len(s)\n"
">         if s[left]==s[right]: new += '-'\n"
">         else: new += '*'\n"
">     s=''.join(new)\n"
">     print(s)\n"
">     i += 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Ось одне рішення.\n"
"> >\n"
"> > ~~~\n"
"> > def string_machine(input_string, iterations):\n"
"> >     \"\"\"\n"
"> >     Бере поточну input_string і генерує новий рядок із символів -'s та *'s,\n"
"> >    - відповідає  випадку ідентичних суміжних символів\n"
"> >    в противному випадку генерується символ *. Повторює цю процедуру відповідно\n"
"> >      заданої кількості ітерацій.\n"
"> >     \"\"\"\n"
"> >     print(input_string)\n"
"> >     input_string_length = len(input_string)\n"
"> >     old = input_string\n"
"> >     for i in range(iterations):\n"
"> >         new = ''\n"
"> >         # перебір символів у рядку 'old'\n"
"> >         for j in range(input_string_length):\n"
"> >             left = j-1\n"
"> >             right = (j+1) % input_string_length  # забезпечити обтікання правого індексу\n"
"> >             if old[left] == old[right]:\n"
"> >                 new += '-'\n"
"> >             else:\n"
"> >                 new += '*'\n"
"> >         print(new)\n"
"> >         # зберегти новий рядок як старий\n"
"> >         old = new     \n"
"> >\n"
"> > string_machine('et cetera', 10)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > \n"
"> > ~~~\n"
"> > et cetera\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > --*-*-*-*\n"
"> > **-------\n"
"> > ***-----*\n"
"> > --**---**\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > ~~~\n"
"> > {: .output}"

# Front Matter
#: python-novice-gapminder/_episodes/19-wrap.md:1
msgid ""
"---\n"
"title: \"Wrap-Up\"\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"What have we learned?\"\n"
"- \"What else is out there and where do I find it?\"\n"
"objectives:\n"
"- \"Name and locate scientific Python community sites for software, workshops, and help.\"\n"
"keypoints:\n"
"- \"Python supports a large and diverse community across academia and industry.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Підведення підсумків\"\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"Чому ми навчилися??\"\n"
"- \"Що там ще є і де це знайти?\"\n"
"objectives:\n"
"- \"Назвіть і знайдіть сайти наукової спільноти Python для програмного забезпечення, семінарів і допомоги.\"\n"
"keypoints:\n"
"- \"Python підтримує велику та різноманітну спільноту в академічних і промислових колах.\"\n"
"---"

#: python-novice-gapminder/_episodes/19-wrap.md:14
msgid ""
"Leslie Lamport once said, \"Writing is nature's way of showing you how sloppy your thinking is.\"\n"
"The same is true of programming:\n"
"many things that seem obvious when we're thinking about them\n"
"turn out to be anything but when we have to explain them precisely."
msgstr ""
"Леслі Лемпорт якось сказав: «Письмо — це природний спосіб показати вам, наскільки неохайно ви мислите».\n"
"Те саме стосується програмування:\n"
"багато речей, які здаються очевидними, коли ми думаємо про них\n"
"виявляються чим завгодно, але тільки тоді, коли ми маємо їх точно пояснити."

# header
#: python-novice-gapminder/_episodes/19-wrap.md:19
msgid ""
"## Python supports a large and diverse community across academia and "
"industry."
msgstr ""
"## Python підтримує велику та різноманітну спільноту в академічних і "
"промислових колах."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:21
msgid ""
"*   The [Python 3 documentation](https://docs.python.org/3/) covers the core"
" language"
msgstr ""
"*   The [Python 3 documentation](https://docs.python.org/3/) охоплює ядро "
"мови"

#: python-novice-gapminder/_episodes/19-wrap.md:22
msgid "    and the standard library."
msgstr "    і стандартну бібліотеку."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:24
msgid ""
"*   [PyCon](https://pycon.org/) is the largest annual conference for the "
"Python community."
msgstr ""
"*   [PyCon](https://pycon.org/) є найбільшою щорічною конференцією для "
"спільноти Python."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:26
msgid ""
"*   [SciPy](https://scipy.org) is a rich collection of scientific utilities."
msgstr ""
"*   [SciPy](https://scipy.org) є багатою колекцією наукових корисних "
"матеріалів."

#: python-novice-gapminder/_episodes/19-wrap.md:27
msgid ""
"    It is also the name of [a series of annual "
"conferences](https://conference.scipy.org/)."
msgstr ""
"   Це також назва [серії щорічних "
"конференцій](https://conference.scipy.org/)."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:29
msgid "*   [Jupyter](https://jupyter.org) is the home of Project Jupyter."
msgstr "*   [Jupyter](https://jupyter.org) є домом проекту Jupyter."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:31
msgid ""
"*   [Pandas](https://pandas.pydata.org) is the home of the Pandas data "
"library."
msgstr ""
"*   [Pandas](https://pandas.pydata.org) є домом для бібліотеки даних Pandas."

# unordered list
#: python-novice-gapminder/_episodes/19-wrap.md:33
msgid ""
"*   Stack Overflow's [general Python "
"section](https://stackoverflow.com/questions/tagged/python?tab=Votes)"
msgstr ""
"Переповнення стека: Stack Overflow's [general Python "
"section](https://stackoverflow.com/questions/tagged/python?tab=Votes)"

#: python-novice-gapminder/_episodes/19-wrap.md:34
msgid ""
"    can be helpful,\n"
"    as well as the sections on [NumPy](https://stackoverflow.com/questions/tagged/numpy?tab=Votes),\n"
"    [SciPy](https://stackoverflow.com/questions/tagged/scipy?tab=Votes), and\n"
"    [Pandas](https://stackoverflow.com/questions/tagged/pandas?tab=Votes)."
msgstr ""
"    може бути корисною,\n"
"    а також розділи на [NumPy](https://stackoverflow.com/questions/tagged/numpy?tab=Votes),\n"
"    [SciPy](https://stackoverflow.com/questions/tagged/scipy?tab=Votes), and\n"
"    [Pandas](https://stackoverflow.com/questions/tagged/pandas?tab=Votes)."

# Front Matter
#: python-novice-gapminder/_episodes/20-feedback.md:1
msgid ""
"---\n"
"title: \"Feedback\"\n"
"teaching: 0\n"
"exercises: 15\n"
"questions:\n"
"- \"How did the class go?\"\n"
"objectives:\n"
"- \"Gather feedback on the class\"\n"
"keypoints:\n"
"- \"We are constantly seeking to improve this course.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Зворотній зв'язок\"\n"
"teaching: 0\n"
"exercises: 15\n"
"questions:\n"
"- \"Як пройшло заняття?\"\n"
"objectives:\n"
"- \"Зібрати відгуки про заняття\"\n"
"keypoints:\n"
"- \"Ми постійно прагнемо покращити цей курс.\"\n"
"---"

#: python-novice-gapminder/_episodes/20-feedback.md:13
msgid "Gather feedback from participants."
msgstr "Зберіть відгуки про заняття"

# Front Matter
#: python-novice-gapminder/_extras/about.md:1
msgid ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: About\n"
"permalink: /about/\n"
"---"

#: python-novice-gapminder/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr "{% include carpentries.html %}"

# Front Matter
#: python-novice-gapminder/_extras/design.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Lesson Design\"\n"
"permalink: /design/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Вміст проєкту\"\n"
"permalink: /design/\n"
"---"

# blockquote, which can be cascaded
#: python-novice-gapminder/_extras/design.md:7
msgid "> ## Help Wanted"
msgstr "> ## Потрібна допомога"

# blockquote, which can be cascaded
#: python-novice-gapminder/_extras/design.md:8
msgid "> {:.no_toc}"
msgstr "> {:.no_toc}"

#: python-novice-gapminder/_extras/design.md:9
msgid ""
">\n"
"> **We are filling in the exercises [below](#stage-3-learning-plan)\n"
"> in order to make the lesson plan more concrete.\n"
"> Contributions (both in the form of pull requests with filled-in exercises,\n"
"> and comments on specific exercises, ordering, and timings) are greatly appreciated.**"
msgstr ""
">\n"
"> **Ми додаємо вправи [нижче](#stage-3-learning-plan)\n"
"> для того, щоб план уроку зробити більш конкретним.\n"
"> Будемо вдячні за пропозиції (як у вигляді нових готових вправ,\n"
"> так і вигляді коментарів до вже існуючих).**"

# header
#: python-novice-gapminder/_extras/design.md:16
msgid "## Process Used"
msgstr "## Розділи, що використовуються"

# blockquote, which can be cascaded
#: python-novice-gapminder/_extras/design.md:18
msgid "> Michael Pollan's advice if he taught R or Python programming:"
msgstr ""
"> Поради Michael Pollan, якби він навчав програмування на R або Python:"

#: python-novice-gapminder/_extras/design.md:19
msgid ""
">\n"
"> 1. Write code.\n"
"> 2. Not too much.\n"
"> 3. Mostly plots.\n"
">\n"
"> — [Michael Koontz](https://twitter.com/_mikoontz/status/758021742078025728)"
msgstr ""
">\n"
"> 1. Напишіть код.\n"
"> 2. Не надто багато.\n"
"> 3. Переважно сценарії.\n"
">\n"
"> — [Michael Koontz](https://twitter.com/_mikoontz/status/758021742078025728)"

# SC/DC Template label
#: python-novice-gapminder/_extras/design.md:25
msgid "{: .quotation}"
msgstr "{: .quotation}"

#: python-novice-gapminder/_extras/design.md:27
msgid ""
"This lesson was developed using a slimmed-down variant of the \"Understanding by Design\" process.\n"
"The main sections are:"
msgstr ""
"Цей урок розроблено з використанням скороченого варіанту розділу «Розуміння вмісту».\n"
"Основні пункти:"

# ordered list
#: python-novice-gapminder/_extras/design.md:30
msgid "1.  Assumptions about audience, time, etc."
msgstr "1.  Припущення щодо аудиторії, часу тощо."

#: python-novice-gapminder/_extras/design.md:31
msgid ""
"    (The current draft also includes some conclusions and decisions in this \n"
"    section - that should be refactored.)"
msgstr ""
"    (У цьому пункті поточний проект містить деякі висновки і результати\n"
"     - вони повинні бути перероблені.)"

# ordered list
#: python-novice-gapminder/_extras/design.md:34
msgid "2.  Desired results:"
msgstr "2.  Бажані результати:"

#: python-novice-gapminder/_extras/design.md:35
msgid ""
"    overall goals, summative assessments at half-day granularity, what learners \n"
"    will be able to do, what learners will know."
msgstr ""
"    учні повинні розуміти загальні цілі та вміти робити підсумкові оцінки за"
" півдня деталізація."

# ordered list
#: python-novice-gapminder/_extras/design.md:38
msgid "3.  Learning plan:"
msgstr "3.  План уроку:"

#: python-novice-gapminder/_extras/design.md:39
msgid ""
"    each episode has a heading that summarizes what will be covered,\n"
"    then estimates time that will be spent on teaching and on exercises,\n"
"    while the exercises are given as bullet points."
msgstr ""
"    кожен епізод має заголовок, який описує, що буде розглянуто,\n"
"    потім в дужках вказується час, необхідний на вивчення матеріалу\n"
"    та виконання навчальних вправ."

# header
#: python-novice-gapminder/_extras/design.md:43
msgid "## Stage 1: Assumptions"
msgstr "## Етап 1: Припущення"

# unordered list
#: python-novice-gapminder/_extras/design.md:45
msgid "*   Audience"
msgstr "*   Аудиторія"

# unordered list
#: python-novice-gapminder/_extras/design.md:46
msgid ""
"    *   Graduate students in numerate disciplines from cosmology to "
"archaeology"
msgstr "    *   Студенти багатьох спеціальностей від космології до археології"

# unordered list
#: python-novice-gapminder/_extras/design.md:47
msgid ""
"    *   Who have manipulated data in spreadsheets and with interactive tools"
" like SAS"
msgstr ""
"    *   Хто обробляв дані в електронних таблицях, а також за допомогою "
"інтерактивних інструментів, таких як SAS"

# unordered list
#: python-novice-gapminder/_extras/design.md:48
msgid "    *   But have *not* programmed beyond CPD (copy-paste-despair)"
msgstr ""
"    *   Але не просунулися далі CPD (copy-paste-despair / копіював-вставив-"
"впав в розпач)"

# unordered list
#: python-novice-gapminder/_extras/design.md:49
msgid "*   Constraints"
msgstr "*   Обмеження"

# unordered list
#: python-novice-gapminder/_extras/design.md:50
msgid "    *   One full day 09:00-16:30"
msgstr "    *   Один повний день 09:00-16:30"

# unordered list
#: python-novice-gapminder/_extras/design.md:51
msgid "        *   06:15 class time"
msgstr "        *   06:15 заняття"

# unordered list
#: python-novice-gapminder/_extras/design.md:52
msgid "        *   0:45 lunch"
msgstr "        *   0:45 обід"

# unordered list
#: python-novice-gapminder/_extras/design.md:53
msgid "        *   0:30 total for two coffee breaks"
msgstr "        *   0:30 разом на дві перерви на каву"

# unordered list
#: python-novice-gapminder/_extras/design.md:54
msgid "    *   Learners use native installs on their own machines"
msgstr ""
"    *   Учні використовують інстальоване програмне забезпечення на своїх "
"комп'ютерах"

# unordered list
#: python-novice-gapminder/_extras/design.md:55
msgid "        *   May use VMs or cloud resources at instructor's discretion"
msgstr ""
"        *   Можуть використовувати віртуальні машини або хмарні ресурси на "
"розсуд інструктора"

# unordered list
#: python-novice-gapminder/_extras/design.md:56
msgid "        *   But must keep native local install as an option"
msgstr ""
"        *   Але необхідно опціонально зберегти інстальоване програмне "
"забезпечення"

# unordered list
#: python-novice-gapminder/_extras/design.md:57
msgid "    *   No dependence on other Carpentry modules"
msgstr "    *   Немає залежності від інших модулів Carpentry"

# unordered list
#: python-novice-gapminder/_extras/design.md:58
msgid ""
"        *   In particular, does not require knowledge of shell or version "
"control"
msgstr "        *   Не вимагається знання системи керування версіями"

# unordered list
#: python-novice-gapminder/_extras/design.md:59
msgid "    *   Use the Jupyter Notebook"
msgstr "    *   Використовується Jupyter Notebook"

# unordered list
#: python-novice-gapminder/_extras/design.md:60
msgid "        *   Authentic tool used by many instructors"
msgstr ""
"        *   Оригінальний інструмент, який використовують багато інструкторів"

# unordered list
#: python-novice-gapminder/_extras/design.md:61
msgid "        *   There isn't really an alternative"
msgstr "        *   Насправді альтернативи просто немає"

# unordered list
#: python-novice-gapminder/_extras/design.md:62
msgid ""
"        *   And means that even people who have seen a bit of Python before"
msgstr ""
"        *   І це означає, що навіть люди, які вже трохи вивчали Python "
"раніше, ймовірно,"

#: python-novice-gapminder/_extras/design.md:63
msgid ""
"            will probably learn something\n"
"*   Motivating Example\n"
"    *   Creating 2D plots suitable for inclusion in papers\n"
"    *   Appeals to almost everyone\n"
"    *   Makes lesson usable by both Carpentries\n"
"        *   And means that even people who have seen a bit of Python before \n"
"            will probably learn something\n"
"*   Data\n"
"    *   Use the gapminder data throughout\n"
"    *   But break into multiple files by continent\n"
"        *   To make display of output from examples tidier\n"
"            (e.g., use Australia/New Zealand, which is only two lines)\n"
"        *   And allow examples showing use of multiple data sets\n"
"*   Focus on Pandas instead of NumPy\n"
"    *   Makes lesson usable by both Data Carpentry and Software Carpentry\n"
"    *   Genuine novices are likely to want data analysis\n"
"    *   And people with some prior experience:\n"
"        *   will accept data analysis as an authentic task,\n"
"        *   and are unlikely to have encountered Pandas,\n"
"            so they'll still get something useful out of the lesson\n"
"*   Challenges will mostly *not* be \"write this code from scratch\"\n"
"    *   Want lots of short exercises that can reliably be finished in allotted time\n"
"    *   So use MCQs, fill-in-the-blanks, Parsons Problems, \"tweak this code\", etc."
msgstr ""
"            дізнаються щось нове\n"
"*   Мотивуючий приклад\n"
"    *   Створення двовимірних графіків, придатних для включення в документи\n"
"    *   Приваблює майже всіх\n"
"    *   Робить урок придатним для використання і в Data Carpentry, і в Software Carpentry\n"
"        *   Це означає, що навіть люди, які вже трохи вивчили Python раніше, \n"
"            ймовірно, дізнаються щось нове\n"
"*   Дані\n"
"    *   Завжди використовуйте дані Gapminder\n"
"    *   Розділяйте дані на декілька файлів в залежності від континенту\n"
"        *   Щоб відображати результати із прикладів якісніше\n"
"            (наприклад, використовуйте Австралію/Нову Зеландію, тобто лише два рядки)\n"
"        *   І дозвольте використання декількох наборів даних у прикладах\n"
"*   Сфокусуйтеся на Pandas замість of NumPy\n"
"    *   Зробіть урок придатним для використання і в Data Carpentry, і в Software Carpentry\n"
"    *   Новачки, швидше за все, захочуть аналізувати дані\n"
"    *   А користувачі з певним досвідом:\n"
"        *   сприймуть аналіз даних як щось вже відоме,\n"
"        *   але навряд вони стикалися з Pandas,\n"
"            тому вони все одно отримають від уроку щось корисне\n"
"*  Завдання переважно *не* полягатимуть у «написати цей код з нуля»\n"
"    *   Хочете багато коротких вправ, які можна надійно виконати за відведений час\n"
"    *   Тож використовуйте MCQ, заповніть пропуски, проблеми Парсонса, «налаштуйте цей код» тощо."

# header
#: python-novice-gapminder/_extras/design.md:87
msgid "## Stage 2: Desired Results"
msgstr "## Етап 2: Бажані результати"

# header
#: python-novice-gapminder/_extras/design.md:89
msgid "### Questions"
msgstr "### Питання"

#: python-novice-gapminder/_extras/design.md:91
msgid "How do I..."
msgstr "Як мені..."

# unordered list
#: python-novice-gapminder/_extras/design.md:93
msgid "*   ...read tabular data?"
msgstr "*   ...читати  табличні дані?"

# unordered list
#: python-novice-gapminder/_extras/design.md:94
msgid "*   ...plot a single vector of values?"
msgstr "*   ...побудувати вектор значень?"

# unordered list
#: python-novice-gapminder/_extras/design.md:95
msgid "*   ...create a time series plot?"
msgstr "*   ...створити графік часових рядів?"

# unordered list
#: python-novice-gapminder/_extras/design.md:96
msgid "*   ...create one plot for each of several data sets?"
msgstr "*   ...створити свій графік для кожного набору даних?"

# unordered list
#: python-novice-gapminder/_extras/design.md:97
msgid "*   ...get extra data from a single data set for plotting?"
msgstr "*   ...отримати додаткові дані для побудови графіку з набору даних?"

# unordered list
#: python-novice-gapminder/_extras/design.md:98
msgid "*   ...write programs I can read and re-use in future?"
msgstr ""
"*   ...писати програми, які я можу читати та повторно використовувати в "
"майбутньому?"

# header
#: python-novice-gapminder/_extras/design.md:100
msgid "### Skills"
msgstr "### Навички"

#: python-novice-gapminder/_extras/design.md:102
msgid "I can..."
msgstr "Я зможу..."

# unordered list
#: python-novice-gapminder/_extras/design.md:104
msgid "*   ...write short scripts using loops and conditionals."
msgstr ""
"*   ...писати короткі сценарії, в яких будуть цикли та умовні оператори."

# unordered list
#: python-novice-gapminder/_extras/design.md:105
msgid ""
"*   ...write functions with a fixed number of parameters that return a "
"single result."
msgstr ""
"*   ...написати функції з фіксованою кількістю параметрів, які повертають "
"єдиний результат."

# unordered list
#: python-novice-gapminder/_extras/design.md:106
msgid ""
"*   ...import libraries using aliases and refer to those libraries' "
"contents."
msgstr "*   ...імпортувати бібліотеки та звертатися до вмісту цих бібліотек."

# unordered list
#: python-novice-gapminder/_extras/design.md:107
msgid "*   ...do simple data extraction and formatting using Pandas."
msgstr "*   ...повертати та форматувати дані за допомогою Pandas."

# header
#: python-novice-gapminder/_extras/design.md:109
msgid "### Concepts"
msgstr "### Визначення"

#: python-novice-gapminder/_extras/design.md:111
msgid "I know..."
msgstr "Я дізнаюся..."

# unordered list
#: python-novice-gapminder/_extras/design.md:113
msgid ""
"*   ...that a program is a piece of lab equipment that implements an "
"analysis"
msgstr "*   ...що програма - це частина обладнання, яке виконує аналіз"

# unordered list
#: python-novice-gapminder/_extras/design.md:114
msgid "    *   Needs to be validated/calibrated before/during use"
msgstr ""
"    *   Програму потрібно перевіряти/налагоджувати перед/під час "
"використання"

# unordered list
#: python-novice-gapminder/_extras/design.md:115
msgid "    *   Makes analysis reproducible, reviewable, shareable"
msgstr ""
"    *   Аналіз програми потрібно робити відтворюваним, доступним для "
"перегляду та обміну"

# unordered list
#: python-novice-gapminder/_extras/design.md:116
msgid "*   ...that programs are written for people, not for computers"
msgstr "*   ...що програми пишуться для людей, а не для комп'ютерів"

# unordered list
#: python-novice-gapminder/_extras/design.md:117
msgid "    *   Meaningful variable names"
msgstr "    *   Значущі імена змінної"

# unordered list
#: python-novice-gapminder/_extras/design.md:118
msgid "    *   Modularity for readability as well as re-use"
msgstr ""
"    *   Створення модулів для зручності читання та повторного використання"

# unordered list
#: python-novice-gapminder/_extras/design.md:119
msgid "    *   No duplication"
msgstr "    *    Відсутність дублювання"

# unordered list
#: python-novice-gapminder/_extras/design.md:120
msgid "    *   Document purpose and use"
msgstr "    *   Призначення та використання документа"

# unordered list
#: python-novice-gapminder/_extras/design.md:121
msgid "*   ...that there is no magic: the programs they use are no different "
msgstr ""
"*   ...що немає магії: програми, що використовуються, нічим не відрізняються"

#: python-novice-gapminder/_extras/design.md:122
msgid ""
"    in principle from those they build\n"
"*   ...how to assign values to variables\n"
"*   ...what integers, floats, strings, NumPy arrays, and Pandas dataframes are\n"
"*   ...how to trace the execution of a `for` loop\n"
"*   ...how to trace the execution of `if`/`else` statements\n"
"*   ...how to create and index lists\n"
"*   ...how to create and index NumPy arrays\n"
"*   ...how to create and index Pandas dataframes\n"
"*   ...how to create time series plots\n"
"*   ...the difference between defining and calling a function\n"
"*   ...where to find documentation on standard libraries\n"
"*   ...how to find out what else scientific Python offers"
msgstr ""
"    від тих, які створюються\n"
"*   ...як присвоїти значення змінним\n"
"*   ...що таке цілі числа, числа з плаваючою точкою, рядки, масиви NumPy і структури даних Pandas\n"
"*   ...як відстежити виконання циклу `for`\n"
"*   ...як відстежити виконання операторів `if`/`else`\n"
"*   ...як створити та індексувати списки\n"
"*   ...як створити та індексувати масиви NumPy \n"
"*   ...як створити та індексувати структури даних Pandas\n"
"*   ...як створити графіки часових рядів\n"
"*   ...яка різниця між призначенням і викликом функції\n"
"*   ...де знайти документацію про стандартні бібліотеки\n"
"*   ...як дізнатися, що пропонує Python для наукових досліджень"

# header
#: python-novice-gapminder/_extras/design.md:135
msgid "## Stage 3: Learning Plan"
msgstr "## Етап 3: Навчальний план"

# header
#: python-novice-gapminder/_extras/design.md:137
msgid "### Summative Assessment"
msgstr "### Підсумкове оцінювання"

# unordered list
#: python-novice-gapminder/_extras/design.md:139
msgid "*   Midpoint: create time-series plot for each file in a directory."
msgstr ""
"*   Проміжний результат: створення графіка часових рядів для кожного файлу в"
" каталозі."

# unordered list
#: python-novice-gapminder/_extras/design.md:140
msgid "*   Final: extract data from Pandas dataframe"
msgstr ""
"*   Остаточний результат: повернути значення зі структури даних Pandas"

#: python-novice-gapminder/_extras/design.md:141
msgid "    and create comparative multi-line time series plot."
msgstr "    і створити порівняльний графік багаторядкового часового ряду."

# header
#: python-novice-gapminder/_extras/design.md:143
msgid ""
"### [Running and Quitting Interactively]({{page.root}}/01-run-quit/) (9:00)"
msgstr ""
"### [Інтерактивний запуск і вихід з програми]({{page.root}}/01-run-quit/) "
"(9:00)"

# unordered list
#: python-novice-gapminder/_extras/design.md:145
msgid "*   Teaching: 15 min (because setup issues)"
msgstr "*   Навчання: 15 хв (через проблеми з налаштуванням)"

# unordered list
#: python-novice-gapminder/_extras/design.md:146
msgid ""
"    *   Launch the Jupyter Notebook, create new notebooks, and exit the "
"Notebook."
msgstr ""
"    *   Запустіть Jupyter Notebook, створіть новий документ та вийдіть із "
"Jupyter Notebook."

# unordered list
#: python-novice-gapminder/_extras/design.md:147
msgid "    *   Create Markdown cells in a notebook."
msgstr "    *   Створіть в блокноті комірки типу Markdown."

# unordered list
#: python-novice-gapminder/_extras/design.md:148
msgid "    *   Create and run Python cells in a notebook."
msgstr "    *   Створіть в блокноті комірки Python та виконайте їх."

# unordered list
#: python-novice-gapminder/_extras/design.md:149
msgid ""
"*   Challenges: 0 min (accounted for in teaching time - no separate "
"exercise)"
msgstr ""
"*   Завдання: 0 хв (враховується в навчальний час - без окремої вправи)"

# unordered list
#: python-novice-gapminder/_extras/design.md:150
msgid "    *   Creating lists in Markdown"
msgstr "    *   Створіть список у Markdown"

# unordered list
#: python-novice-gapminder/_extras/design.md:151
msgid ""
"    *   What is displayed when several expressions are put in a single cell?"
msgstr ""
"    *   Що буде відображатися, якщо кілька виразів помістити в одну "
"клітинку?"

# unordered list
#: python-novice-gapminder/_extras/design.md:152
msgid "    *   Change an existing cell from code to Markdown"
msgstr "    *   Змініть існуючу клітинку з коду на Markdown"

# unordered list
#: python-novice-gapminder/_extras/design.md:153
msgid "    *   Rendering LaTeX-style equations"
msgstr "    *  Візуалізація рівнянь у стилі LaTeX"

# header
#: python-novice-gapminder/_extras/design.md:155
msgid "### [Variables and Assignment]({{page.root}}/02-variables/) (9:15)"
msgstr "### [Змінні та призначення]({{page.root}}/02-variables/) (9:15)"

# unordered list
#: python-novice-gapminder/_extras/design.md:157
#: python-novice-gapminder/_extras/design.md:169
#: python-novice-gapminder/_extras/design.md:204
#: python-novice-gapminder/_extras/design.md:216
#: python-novice-gapminder/_extras/design.md:259
#: python-novice-gapminder/_extras/design.md:273
#: python-novice-gapminder/_extras/design.md:297
#: python-novice-gapminder/_extras/design.md:311
#: python-novice-gapminder/_extras/design.md:323
msgid "*   Teaching: 10 min"
msgstr "*   Навчання: 10 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:158
msgid ""
"    *   Write programs that assign scalar values to variables and perform "
"calculations with those values."
msgstr ""
"    *   Напишіть програми, які присвоюють скалярні значення змінним і "
"виконують обчислення з цими значеннями."

# unordered list
#: python-novice-gapminder/_extras/design.md:159
msgid ""
"    *   Correctly trace value changes in programs that use scalar "
"assignment."
msgstr ""
"    *   Правильно відстежуйте у програмах значення змінних, які "
"використовують скалярне присвоєння."

# unordered list
#: python-novice-gapminder/_extras/design.md:160
#: python-novice-gapminder/_extras/design.md:173
#: python-novice-gapminder/_extras/design.md:193
#: python-novice-gapminder/_extras/design.md:208
#: python-novice-gapminder/_extras/design.md:220
#: python-novice-gapminder/_extras/design.md:262
#: python-novice-gapminder/_extras/design.md:290
#: python-novice-gapminder/_extras/design.md:315
msgid "*   Challenges: 10 min"
msgstr "*   Завдання: 10 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:161
msgid ""
"    *   Trace execution of code swapping two values using an intermediate "
"variable."
msgstr ""
"    *   Відстеження виконання коду, що міняє місцями два значення за "
"допомогою проміжної змінної."

# unordered list
#: python-novice-gapminder/_extras/design.md:162
msgid "    *   Predict final values of variables after several assignments."
msgstr ""
"    *   Передбачення кінцевих значень змінних після виконання декількох "
"призначень."

# unordered list
#: python-novice-gapminder/_extras/design.md:163
msgid "    *   What happens if you try to index a number?"
msgstr "    *   Що станеться при спробі присвоїти індекс?"

# unordered list
#: python-novice-gapminder/_extras/design.md:164
msgid "    *   Which is a better variable name, `m`, `min`, or `minutes`?"
msgstr "    *   Яке ім'я для змінної є кращим: `m`, `min` або `minutes`?"

# unordered list
#: python-novice-gapminder/_extras/design.md:165
msgid "    *   What do the following slice expressions produce?"
msgstr "    *   Що повертають наступні вирази?"

# header
#: python-novice-gapminder/_extras/design.md:167
msgid ""
"### [Data Types and Type Conversion]({{page.root}}/03-types-conversion/) "
"(09:35)"
msgstr ""
"### [Типи даних і перетворення типів]({{page.root}}/03-types-conversion/) "
"(09:35)"

# unordered list
#: python-novice-gapminder/_extras/design.md:170
msgid ""
"    *   Explain key differences between integers and floating point numbers."
msgstr ""
"    *   Поясніть ключові відмінності між цілими числами та числами з "
"плаваючою комою."

# unordered list
#: python-novice-gapminder/_extras/design.md:171
msgid "    *   Explain key differences between numbers and character strings."
msgstr ""
"    *   Поясніть ключові відмінності між числами та символьними рядками."

# unordered list
#: python-novice-gapminder/_extras/design.md:172
msgid ""
"    *   Use built-in functions to convert between integers, floating point "
"numbers, and strings."
msgstr ""
"    *   Використовуйте вбудовані функції для перетворення цілих чисел, чисел"
" з плаваючою комою та рядків."

# unordered list
#: python-novice-gapminder/_extras/design.md:174
msgid "    *   What type of value is 3.4?"
msgstr "    *   Який тип має вираз 3.4?"

# unordered list
#: python-novice-gapminder/_extras/design.md:175
msgid "    *   What type of value is 3.25 + 4?"
msgstr "    *  Який тип має вираз 3.25 + 4?"

# unordered list
#: python-novice-gapminder/_extras/design.md:176
msgid "    *   What type of value would you use to represent:"
msgstr "    *   Який тип значення ви б використали для представлення:"

# unordered list
#: python-novice-gapminder/_extras/design.md:177
msgid "        *   Number of days since the start of the year."
msgstr "        *   Кількість днів, які пройшли з початку року."

# unordered list
#: python-novice-gapminder/_extras/design.md:178
msgid "        *   Time elapsed since the start of the year."
msgstr "        *   Час, що минув з початку року."

# unordered list
#: python-novice-gapminder/_extras/design.md:179
msgid "        *   Etc."
msgstr "        *   тощо."

# unordered list
#: python-novice-gapminder/_extras/design.md:180
msgid "    *   How can you use `//` (integer division) and `%` (modulo)?"
msgstr ""
"    *   Як можна використовувати `//` (цілочисельне ділення) і `%` (за "
"модулем)?"

# unordered list
#: python-novice-gapminder/_extras/design.md:181
msgid "    *   What does `int(\"3.4\")` do?"
msgstr "    *   Що поверне функція `int(\"3.4\")`?"

# unordered list
#: python-novice-gapminder/_extras/design.md:182
msgid ""
"    *   Given these float, int, and string values, which expressions will "
"print a particular result?"
msgstr ""
"    *    Які значення набуде вираз, що розглядається, якщо використовувати "
"float, int та string?"

# unordered list
#: python-novice-gapminder/_extras/design.md:183
msgid "    *   What do you expect `1+2j + 3` to produce?"
msgstr "    *   Яке значення виразу `1+2j + 3` слід очікувати?"

# header
#: python-novice-gapminder/_extras/design.md:185
msgid "### [Built-in Functions and Help]({{page.root}}/04-built-in/) (09:55)"
msgstr ""
"### [Вбудовані функції та Довідка]({{page.root}}/04-built-in/) (09:55)"

# unordered list
#: python-novice-gapminder/_extras/design.md:187
#: python-novice-gapminder/_extras/design.md:228
#: python-novice-gapminder/_extras/design.md:247
#: python-novice-gapminder/_extras/design.md:335
msgid "*   Teaching: 15 min"
msgstr "*  Навчання: 15 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:188
msgid "    *   Explain the purpose of functions."
msgstr "    *   Пояснення призначення функцій."

# unordered list
#: python-novice-gapminder/_extras/design.md:189
msgid "    *   Correctly call built-in Python functions."
msgstr "    *   Правильно виклик вбудованих функції Python."

# unordered list
#: python-novice-gapminder/_extras/design.md:190
msgid "    *   Correctly nest calls to built-in functions."
msgstr "    *   Правильне використання вкладених вбудованих функцій."

# unordered list
#: python-novice-gapminder/_extras/design.md:191
msgid "    *   Use help to display documentation for built-in functions."
msgstr ""
"    *   Використання Довідки для відображення документації про вбудовані "
"функції."

# unordered list
#: python-novice-gapminder/_extras/design.md:192
msgid ""
"    *   Correctly describe situations in which SyntaxError and NameError "
"occur."
msgstr ""
"    *   Правильний опис ситуацій, в яких виникають помилки SyntaxError і "
"NameError."

# unordered list
#: python-novice-gapminder/_extras/design.md:194
msgid ""
"    *   Explain the order of operations in the following complex expression."
msgstr "    *   Пояснення порядку дій у наступній ситуації."

# unordered list
#: python-novice-gapminder/_extras/design.md:195
msgid ""
"    *   What will each nested combination of `min` and `max` calls produce?"
msgstr "    *   Що поверне кожна вкладена комбінація функцій `min` та `max`?"

# unordered list
#: python-novice-gapminder/_extras/design.md:196
msgid ""
"    *   Why don't `max` and `min` return `None` when given no arguments?"
msgstr ""
"    *   Чому `max` та `min` не повертають `None`, якщо немає аргументів?"

# unordered list
#: python-novice-gapminder/_extras/design.md:197
msgid "    *   Given what we have seen so far,"
msgstr "    *   Беручи до уваги те, що ми вже виконали раніше,"

#: python-novice-gapminder/_extras/design.md:198
msgid "        what index expression will get the last character in a string?"
msgstr "        який індекс отримає останній символ у рядку?"

# header
#: python-novice-gapminder/_extras/design.md:200
msgid "### [Coffee]({{page.root}}/05-coffee/): 15 min (10:20)"
msgstr "### [Кава]({{page.root}}/05-coffee/): 15 min (10:20)"

# header
#: python-novice-gapminder/_extras/design.md:202
msgid "### [Libraries]({{page.root}}/06-libraries/) (10:35)"
msgstr "### [Бібліотеки]({{page.root}}/06-libraries/) (10:35)"

# unordered list
#: python-novice-gapminder/_extras/design.md:205
msgid ""
"    *   Explain what software libraries are and why programmers create and "
"use them."
msgstr ""
"    *   Поясніть, що таке бібліотека та для чого програмісти їх створюють і "
"використовують."

# unordered list
#: python-novice-gapminder/_extras/design.md:206
msgid ""
"    *   Write programs that import and use libraries from Python's standard "
"library."
msgstr ""
"    *   Пишіть програми, які імпортують і використовують стандартні "
"бібліотеки Python."

# unordered list
#: python-novice-gapminder/_extras/design.md:207
msgid ""
"    *   Find and read documentation for standard libraries interactively (in"
" the interpreter) and online."
msgstr ""
"    *   Знаходьте та читайте документацію про стандартні бібліотеки в "
"інтерактивному режимі (в інтерпретаторі) або онлайн."

# unordered list
#: python-novice-gapminder/_extras/design.md:209
msgid ""
"    *   Which function from the standard math library could you use to "
"calculate a square root?"
msgstr ""
"    *   Яку функцію зі стандартної математичної бібліотеки можна використати"
" для обчислення квадратного кореня?"

# unordered list
#: python-novice-gapminder/_extras/design.md:210
msgid "    *   What library would you use to select a random value from data?"
msgstr ""
"    *   Яка бібліотека підходить для вибору випадкового значення з набору "
"даних?"

# unordered list
#: python-novice-gapminder/_extras/design.md:211
msgid ""
"    *   If `help(math)` produces an error, what have you forgotten to do?"
msgstr "    *   Якщо `help(math)` видає помилку, що ви забули зробити?"

# unordered list
#: python-novice-gapminder/_extras/design.md:212
msgid ""
"    *   Fill in the blanks in code below so that the import statement and "
"program run."
msgstr ""
"    *   Заповніть пропуски в коді нижче, щоб запускалися оператор імпорту та"
" програма в цілому."

# header
#: python-novice-gapminder/_extras/design.md:214
msgid "### [Reading Tabular Data]({{page.root}}/07-reading-tabular/) (10:55)"
msgstr ""
"### [Зчитування табличних даних]({{page.root}}/07-reading-tabular/) (10:55)"

# unordered list
#: python-novice-gapminder/_extras/design.md:217
msgid "    *   Import the Pandas library."
msgstr "    *    Імпортуйте бібліотеку Pandas."

# unordered list
#: python-novice-gapminder/_extras/design.md:218
msgid "    *   Use Pandas to load a simple CSV data set."
msgstr ""
"    *   Використовуйте Pandas, щоб завантажити простий набір даних CSV."

# unordered list
#: python-novice-gapminder/_extras/design.md:219
msgid "    *   Get some basic information about a Pandas DataFrame."
msgstr "    *   Отримайте базову інформацію про Pandas DataFrame."

# unordered list
#: python-novice-gapminder/_extras/design.md:221
msgid ""
"    *   Read the data for the Americas and display its summary statistics."
msgstr ""
"    *   Зчитайте дані про Америки та відобразіть їхню підсумкову статистику."

# unordered list
#: python-novice-gapminder/_extras/design.md:222
msgid "    *   What do `.head` and `.tail` do?"
msgstr "    *   Що роблять `.head` та `.tail`?"

# unordered list
#: python-novice-gapminder/_extras/design.md:223
msgid ""
"    *   What string(s) should you pass to `read_csv` to read files from "
"other directories?"
msgstr ""
"    *   Який(і) рядок(и) слід передати в `read_csv`, щоб зчитувати файли з "
"інших каталогів?"

# unordered list
#: python-novice-gapminder/_extras/design.md:224
msgid "    *   How can you *write* CSV data?"
msgstr "    *   Як можна *записати* дані CSV?"

# header
#: python-novice-gapminder/_extras/design.md:226
msgid "### [DataFrames]({{page.root}}/08-data-frames/) (11:15)"
msgstr "### [DataFrames]({{page.root}}/08-data-frames/) (11:15)"

# unordered list
#: python-novice-gapminder/_extras/design.md:229
msgid "    *   Select individual values from a Pandas dataframe."
msgstr "    *    Виберіть окремі значення з DataFrame Pandas."

# unordered list
#: python-novice-gapminder/_extras/design.md:230
msgid "    *   Select entire rows or entire columns from a dataframe."
msgstr "    *   Виділіть цілі рядки або цілі стовпці з dataFrame."

# unordered list
#: python-novice-gapminder/_extras/design.md:231
msgid ""
"    *   Select a subset of both rows and columns from a dataframe in a "
"single operation."
msgstr ""
"    *   Виберіть підмножину рядків і стовпців із DataFrame за одну операцію."

# unordered list
#: python-novice-gapminder/_extras/design.md:232
msgid "    *   Select a subset of a dataframe by a single Boolean criterion."
msgstr ""
"    *   Виберіть підмножину з DataFrameданих за єдиним булевим критерієм."

# unordered list
#: python-novice-gapminder/_extras/design.md:233
#: python-novice-gapminder/_extras/design.md:277
#: python-novice-gapminder/_extras/design.md:300
#: python-novice-gapminder/_extras/design.md:326
#: python-novice-gapminder/_extras/design.md:339
#: python-novice-gapminder/_extras/design.md:354
msgid "*   Challenges: 15 min"
msgstr "*   Завдання: 15 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:234
msgid ""
"    *   Write an expression to find the Per Capita GDP of Serbia in 2007."
msgstr ""
"    *   Напишіть вираз для визначення ВВП Сербії на душу населення у 2007 "
"році."

# unordered list
#: python-novice-gapminder/_extras/design.md:235
msgid ""
"    *   What rule governs what is (or isn't) included in numerical and named"
" slices in Pandas?"
msgstr ""
"    *  Яке правило регулює те, що включається (або не включається) до "
"числових та іменованих фрагментів у Pandas?"

# unordered list
#: python-novice-gapminder/_extras/design.md:236
msgid "    *   What does each line in the following short program do?"
msgstr "    *   Що робить кожен рядок у наступній короткій програмі?"

# unordered list
#: python-novice-gapminder/_extras/design.md:237
msgid "    *   What do `idxmin` and `idxmax` do?"
msgstr "    *   Що роблять `idxmin` та `idxmax`?"

# unordered list
#: python-novice-gapminder/_extras/design.md:238
msgid ""
"    *   Write expressions to get the GDP per capita for all countries in "
"1982,"
msgstr ""
"    *   Напишіть вирази, щоб отримати ВВП на душу населення для всіх країн у"
" 1982 році,"

#: python-novice-gapminder/_extras/design.md:239
msgid ""
"        for all countries *after* 1985,\n"
"        etc.\n"
"    *   Given the way its borders have changed since 1900,\n"
"        what would you do if asked to create a table of GDP per capita for Poland\n"
"        for the Twentieth Century?"
msgstr ""
"        для всіх країни *після* 1985 року\n"
"        тощо.\n"
"    *   Враховуючи те, як змінилися кордони після 1900 року,\n"
"        що б ви зробили, якби вас попросили створити таблицю ВВП на душу населення для Польщі\n"
"        20-го сторіччя?"

# header
#: python-novice-gapminder/_extras/design.md:245
msgid "### [Plotting]({{page.root}}/09-plotting/) (11:45)"
msgstr "### [Графік]({{page.root}}/09-plotting/) (11:45)"

# unordered list
#: python-novice-gapminder/_extras/design.md:248
msgid "    *   Create a time series plot showing a single data set."
msgstr ""
"    *   Створіть графік часового ряду, який відповідає одному набору даних."

# unordered list
#: python-novice-gapminder/_extras/design.md:249
msgid ""
"    *   Create a scatter plot showing relationship between two data sets."
msgstr ""
"    *   Створіть діаграму розсіювання, яка показує зв’язок між двома "
"наборами даних."

# unordered list
#: python-novice-gapminder/_extras/design.md:250
msgid "*   Exercise: 15 min"
msgstr "*   Вправи: 15 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:251
msgid ""
"    *   Fill in the blanks to plot the minimum GDP per capita over time for "
"European countries."
msgstr ""
"    *   Заповніть порожні поля, щоб побудувати графік мінімального ВВП на "
"душу населення в європейських країнах."

# unordered list
#: python-novice-gapminder/_extras/design.md:252
msgid ""
"    *   Modify the example to create a scatter plot of GDP per capita in "
"Asian countries."
msgstr ""
"    *   Змініть приклад так, щоб створити точкову діаграму ВВП на душу "
"населення в країнах Азії."

# unordered list
#: python-novice-gapminder/_extras/design.md:253
msgid ""
"    *   Explain what each argument to `plot` does in the following example."
msgstr ""
"    *   Поясніть, що робить кожен аргумент `plot` у наступному прикладі."

# header
#: python-novice-gapminder/_extras/design.md:255
msgid "### [Lunch]({{page.root}}/10-lunch/) (12:15): 45 min"
msgstr "### [Обід]({{page.root}}/10-lunch/) (12:15): 45 min"

# header
#: python-novice-gapminder/_extras/design.md:257
msgid "### [Lists]({{page.root}}/11-lists/) (13:00)"
msgstr "### [Списки]({{page.root}}/11-lists/) (13:00)"

# unordered list
#: python-novice-gapminder/_extras/design.md:260
msgid "    *   Explain why programs need collections of values."
msgstr "    *   Поясніть, навіщо програмам потрібні колекції значень."

# unordered list
#: python-novice-gapminder/_extras/design.md:261
msgid ""
"    *   Write programs that create flat lists, index them, slice them, and "
"modify them through assignment and method calls."
msgstr ""
"    *   Напишіть програми, які створюють списки, індексують їх, а також "
"розрізають і змінюють їх через призначення та виклик методів."

# unordered list
#: python-novice-gapminder/_extras/design.md:263
msgid ""
"    *   Fill in the blanks so that the program produces the output shown."
msgstr ""
"    *   Заповніть порожні поля, щоб програма повернула потрібні результати."

# unordered list
#: python-novice-gapminder/_extras/design.md:264
msgid "    *   How large are the following slices?"
msgstr "    *    Наскільки великими є наступні зрізи?"

# unordered list
#: python-novice-gapminder/_extras/design.md:265
msgid "    *   What do negative index expressions print?"
msgstr "    *   Що повертають вирази з від’ємним індексом?"

# unordered list
#: python-novice-gapminder/_extras/design.md:266
msgid "    *   What does a \"stride\" in a slice do?"
msgstr "    *   Що робить «stride» у зрізі?"

# unordered list
#: python-novice-gapminder/_extras/design.md:267
msgid "    *   How do slices treat out-of-range bounds?"
msgstr "    *   Як зрізи задовольняють межі діапазону?"

# unordered list
#: python-novice-gapminder/_extras/design.md:268
msgid "    *   What are the differences between sorting these two ways?"
msgstr "    *   Які відмінності між цими двома способами сортування?"

# unordered list
#: python-novice-gapminder/_extras/design.md:269
msgid "    *   What is the difference between `new = old` and `new = old[:]`?"
msgstr "    *   Яка різниця між `new = old` та `new = old[:]`?"

# header
#: python-novice-gapminder/_extras/design.md:271
msgid "### [Loops]({{page.root}}/12-for-loops/) (13:20)"
msgstr "### [Цикли]({{page.root}}/12-for-loops/) (13:20)"

# unordered list
#: python-novice-gapminder/_extras/design.md:274
msgid "    *   Explain what for loops are normally used for."
msgstr "    *    Поясніть, для чого зазвичай використовуються цикли for."

# unordered list
#: python-novice-gapminder/_extras/design.md:275
msgid ""
"    *   Trace the execution of a simple (unnested) loop and correctly state "
"the values of variables in each iteration."
msgstr ""
"    *   Проаналізуйте виконання простого (невкладеного) циклу та правильно "
"вкажіть значення змінних у кожній ітерації."

# unordered list
#: python-novice-gapminder/_extras/design.md:276
msgid ""
"    *   Write for loops that use the Accumulator pattern to aggregate "
"values."
msgstr ""
"    *   Напишіть цикли for, які використовують шаблон накопичувача для "
"агрегування значень."

# unordered list
#: python-novice-gapminder/_extras/design.md:278
msgid "    *   Is an indentation error a syntax error or a runtime error?"
msgstr "    *  Чи є помилка відступу синтаксичною чи помилкою виконання?"

# unordered list
#: python-novice-gapminder/_extras/design.md:279
msgid "    *   Trace which lines of this program are executed in what order."
msgstr "    *    Простежте, в якому порядку виконуються рядки цієї програми."

# unordered list
#: python-novice-gapminder/_extras/design.md:280
msgid ""
"    *   Fill in the blanks in this program so that it reverses a string."
msgstr ""
"    *   Заповніть пропуски в цій програмі, щоб вона перевернула рядок."

# unordered list
#: python-novice-gapminder/_extras/design.md:281
msgid ""
"    *   Fill in the blanks in this series of examples to get practice "
"accumulating values."
msgstr ""
"    *   Заповніть пропуски в цій серії прикладів, щоб навчитися накопичувати"
" значення."

# unordered list
#: python-novice-gapminder/_extras/design.md:282
msgid ""
"    *   Reorder and indent these lines to calculate the cumulative sum of "
"the list values."
msgstr ""
"    *    Змініть порядок і відступи в цих рядках, щоб обчислити сукупну суму"
" значень списку."

# header
#: python-novice-gapminder/_extras/design.md:284
msgid ""
"### [Looping Over Data Sets]({{page.root}}/13-looping-data-sets/) (13:45)"
msgstr "### [Зациклення]({{page.root}}/13-looping-data-sets/) (13:45)"

# unordered list
#: python-novice-gapminder/_extras/design.md:286
msgid "*   Teaching: 5 min"
msgstr "*   Навчання: 5 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:287
msgid ""
"    *   Be able to read and write globbing expressions that match sets of "
"files."
msgstr ""
"    *   Навчіться читати та писати вирази модулю glob, які відповідають "
"наборам файлів."

# unordered list
#: python-novice-gapminder/_extras/design.md:288
msgid "    *   Use glob to create lists of files."
msgstr "Використовуйте модуль glob для створення списків файлів"

# unordered list
#: python-novice-gapminder/_extras/design.md:289
msgid ""
"    *   Write for loops to perform operations on files given their names in "
"a list."
msgstr ""
"    *   Напишіть цикли for для виконання операцій над файлами, зазначеними в"
" списку."

# unordered list
#: python-novice-gapminder/_extras/design.md:291
msgid "    *   Which filenames are *not* matched by this glob expression?"
msgstr "    *   Які назви файлів *не* відповідають виразу модуля glod?"

# unordered list
#: python-novice-gapminder/_extras/design.md:292
msgid ""
"    *   Modify this program so that it prints the number of records in the "
"shortest file."
msgstr ""
"    *   Змініть цю програму так, щоб вона зберігала кількість записів у "
"найкоротшому файлі."

# unordered list
#: python-novice-gapminder/_extras/design.md:293
msgid ""
"    *   Write a program that reads and plots all of the regional data sets."
msgstr ""
"    *   Напишіть програму, яка зчитує дані та будує по них графіки для всіх "
"регіонів."

# header
#: python-novice-gapminder/_extras/design.md:295
msgid "### [Writing Functions]({{page.root}}/14-writing-functions/) (14:00)"
msgstr "### [Написання функцій]({{page.root}}/14-writing-functions/) (14:00)"

# unordered list
#: python-novice-gapminder/_extras/design.md:298
msgid ""
"    *   Explain and identify the difference between function definition and "
"function call."
msgstr ""
"    *   Знайдіть і поясніть різницю між визначенням функції та викликом "
"функції."

# unordered list
#: python-novice-gapminder/_extras/design.md:299
msgid ""
"    *   Write a function that takes a small, fixed number of arguments and "
"produces a single result."
msgstr ""
"    *   Напишіть функцію, яка використовує невелику фіксовану кількість "
"вхідних аргументів, а видає єдиний результат."

# unordered list
#: python-novice-gapminder/_extras/design.md:301
msgid ""
"    *   This code defines and calls a function - what does it print when "
"run?"
msgstr ""
"    *   Цей код визначає та викликає функцію. Подумайте, що вона друкує під "
"час запуску?"

# unordered list
#: python-novice-gapminder/_extras/design.md:302
msgid ""
"    *   Explain why this short program prints things in the order it does."
msgstr ""
"    *  Поясніть, чому ця коротка програма повертає відповіді саме в такому "
"порядку?"

# unordered list
#: python-novice-gapminder/_extras/design.md:303
msgid ""
"    *   Fill in the blanks to create a function that finds the minimum value"
" in a data file."
msgstr ""
"    *   Заповніть порожні поля, щоб створити функцію, яка знаходить "
"мінімальне значення у файлі даних."

# unordered list
#: python-novice-gapminder/_extras/design.md:304
msgid ""
"    *   Fill in the blanks to create a function that finds the first "
"negative value in a list."
msgstr ""
"    *   Заповніть порожні поля, щоб створити функцію, яка знаходить перше "
"від’ємне значення в списку."

#: python-novice-gapminder/_extras/design.md:305
msgid ""
"        What does your function do if the list is empty?\n"
"    *   Why is it sometimes useful to pass arguments by naming the corresponding parameters?\n"
"    *   Fill in the blanks and turn this short piece of code into a function."
msgstr ""
"        Що робить ваша функція, якщо список порожній?\n"
"    *   Чому іноді корисно передавати аргументи, називаючи відповідні параметри?\n"
"    *   Заповніть пропуски та перетворіть цей короткий фрагмент коду на функцію."

# header
#: python-novice-gapminder/_extras/design.md:309
msgid "### [Variable Scope]({{page.root}}/15-scope/) (14:25)"
msgstr "### [Область застосування змінної]({{page.root}}/15-scope/) (14:25)"

# unordered list
#: python-novice-gapminder/_extras/design.md:312
msgid "    *   Identify local and global variables."
msgstr "    *   Визначення локальних і глобальних змінних."

# unordered list
#: python-novice-gapminder/_extras/design.md:313
msgid "    *   Identify parameters as local variables."
msgstr "    *   Ідентифікуйте параметри як локальні змінні."

# unordered list
#: python-novice-gapminder/_extras/design.md:314
msgid ""
"    *   Read a traceback and determine the file, function, and line number "
"on which the error occurred."
msgstr ""
"    *   Прочитайте відстеження та визначте файл, функцію та номер рядка, у "
"якому сталася помилка."

# unordered list
#: python-novice-gapminder/_extras/design.md:316
msgid "    *   Trace the changes to the values in this program,"
msgstr "    *   Відстежуйте зміни значень у цій програмі,"

#: python-novice-gapminder/_extras/design.md:317
msgid "        being careful to distinguish local from global values."
msgstr "        ретельно відрізняйте локальні змінні від глобальних."

# header
#: python-novice-gapminder/_extras/design.md:319
msgid "### [Coffee]({{page.root}}/16-coffee/) (14:45): 15 min"
msgstr "### [Кава]({{page.root}}/16-coffee/) (14:45): 15 хв."

# header
#: python-novice-gapminder/_extras/design.md:321
msgid "### [Conditionals]({{page.root}}/17-conditionals/) (15:00)"
msgstr "### [Умови]({{page.root}}/17-conditionals/) (15:00)"

# unordered list
#: python-novice-gapminder/_extras/design.md:324
msgid ""
"    *   Correctly write programs that use if and else statements and simple "
"Boolean expressions (without logical operators)."
msgstr ""
"    *   Правильно писати програми, які використовують оператори if і else і "
"прості булеві вирази (без логічних операторів)."

# unordered list
#: python-novice-gapminder/_extras/design.md:325
msgid ""
"    *   Trace the execution of unnested conditionals and conditionals inside"
" loops."
msgstr ""
"    *   Відстежувати виконання невкладених умовних операторів і умовних "
"операторів всередині циклів."

# unordered list
#: python-novice-gapminder/_extras/design.md:327
msgid "    *   Trace the execution of this conditional statement."
msgstr "    *   Простежити за виконанням цього умовного оператора."

# unordered list
#: python-novice-gapminder/_extras/design.md:328
msgid ""
"    *   Fill in the blanks so that this function replaces negative values "
"with zeroes."
msgstr ""
"    *   Заповнити пропуски так, щоб ця функція замінювала від’ємні значення "
"нулями."

# unordered list
#: python-novice-gapminder/_extras/design.md:329
msgid ""
"    *   Modify this program so that it only processes files with fewer than "
"50 records."
msgstr ""
"    *   Змінити цю програму так, щоб вона обробляла лише файли, які містять "
"менше 50 записів."

# unordered list
#: python-novice-gapminder/_extras/design.md:330
msgid ""
"    *   Modify this program so that it always finds the largest and smallest"
" values in a list"
msgstr ""
"    *   Змінити цю програму так, щоб вона завжди знаходила найбільші та "
"найменші значення у списку,"

#: python-novice-gapminder/_extras/design.md:331
msgid "        no matter what the list's values are."
msgstr "        незалежно від того, які значення знаходяться у списку."

# header
#: python-novice-gapminder/_extras/design.md:333
msgid "### [Programming Style]({{page.root}}/18-style/) (15:25)"
msgstr "### [Стиль програмування]({{page.root}}/18-style/) (15:25)"

# unordered list
#: python-novice-gapminder/_extras/design.md:336
msgid "    *   How can I make my programs more readable?"
msgstr "    *   Як я можу зробити свої програми більш читабельними?"

# unordered list
#: python-novice-gapminder/_extras/design.md:337
msgid "    *   How do most programmers format their code?"
msgstr "    *   Як більшість програмістів форматують свій код?"

# unordered list
#: python-novice-gapminder/_extras/design.md:338
msgid "    *   How can programs check their own operation?"
msgstr "    *   Як програми самі можуть перевірити свою роботу?"

# unordered list
#: python-novice-gapminder/_extras/design.md:340
msgid "    *   Which lines in this code will be available as online help?"
msgstr "    *   Які рядки цього коду будуть доступні як онлайн-довідка?"

# unordered list
#: python-novice-gapminder/_extras/design.md:341
msgid "    *   Turn the comments in this program into docstrings."
msgstr "    *   Перетворіть коментарі в цій програмі на рядки документів."

# unordered list
#: python-novice-gapminder/_extras/design.md:342
msgid "    *   Rewrite this short program to be more readable."
msgstr "    *   Перепишіть цю коротку програму так, щоб її було легше читати."

# header
#: python-novice-gapminder/_extras/design.md:344
msgid "### [Wrap-Up]({{page.root}}/19-wrap/) (15:55)"
msgstr "### [Підсумок]({{page.root}}/19-wrap/) (15:55)"

# unordered list
#: python-novice-gapminder/_extras/design.md:346
msgid "*   Teaching: 20 min"
msgstr "*   Навчання: 20 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:347
msgid ""
"    *   Name and locate scientific Python community sites for software, "
"workshops, and help."
msgstr ""
"    *   Назвіть і знайдіть сайти наукової спільноти Python для програмного "
"забезпечення, семінарів і допомоги."

# unordered list
#: python-novice-gapminder/_extras/design.md:348
msgid "*   Challenges: 0 min"
msgstr "*   Задання: 0 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:349
msgid "    *   None."
msgstr "    *   Немає."

# header
#: python-novice-gapminder/_extras/design.md:351
msgid "### [Feedback]({{page.root}}/20-feedback/) (16:15)"
msgstr "### [Зворотній зв'язок]({{page.root}}/20-feedback/) (16:15)"

# unordered list
#: python-novice-gapminder/_extras/design.md:353
msgid "*   Teaching: 0 min"
msgstr "*   Навчання: 0 хв."

# unordered list
#: python-novice-gapminder/_extras/design.md:355
msgid "    *   Collect feedback"
msgstr "    *  Збір та обробка відгуків"

# header
#: python-novice-gapminder/_extras/design.md:357
msgid "### Finish (16:30)"
msgstr "### Завершення (16:30)"

# Front Matter
#: python-novice-gapminder/_extras/discuss.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Discussion\"\n"
"permalink: /discuss/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Обговорення\"\n"
"permalink: /discuss/\n"
"---"

#: python-novice-gapminder/_extras/discuss.md:6
msgid "FIXME: general discussion and further reading for learners."
msgstr "FIXME: загальне обговорення та подальше читання для учасників."

# Front Matter
#: python-novice-gapminder/_extras/exercises.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Further Exercises\"\n"
"permalink: /exercises/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Подальші вправи\"\n"
"permalink: /exercises/\n"
"---"

#: python-novice-gapminder/_extras/exercises.md:6
msgid "FIXME: exercises that don't fit into the regular schedule."
msgstr "FIXME: вправи, які не вписуються в звичайний розклад."

# Front Matter
#: python-novice-gapminder/_extras/figures.md:1
msgid ""
"---\n"
"title: Figures\n"
"---"
msgstr ""
"---\n"
"title: Ілюстрації\n"
"---"

#: python-novice-gapminder/_extras/figures.md:5
#: python-novice-gapminder/aio.md:13
msgid "{% include base_path.html %}"
msgstr "{% include base_path.html %}"

# inline html
#: python-novice-gapminder/_extras/figures.md:7
msgid ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url }}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var images = htmlDocArticle.getElementsByTagName(\"img\");\n"
"\n"
"          if (images.length > 0) {\n"
"            var h1text = htmlDocArticle.getElementsByTagName(\"h1\")[0].innerHTML;\n"
"\n"
"            var htitle = document.createElement('h2');\n"
"            htitle.innerHTML = h1text;\n"
"            article_here.appendChild(htitle);\n"
"\n"
"            var image_num = 0;\n"
"            for (let image of images) {\n"
"              image_num++;\n"
"\n"
"              var title = document.createElement('p');\n"
"              title.innerHTML = \"<strong>Figure \" + image_num + \".</strong> \" + image.alt;\n"
"              article_here.appendChild(title);\n"
"\n"
"              article_here.appendChild(image.cloneNode(false));\n"
"\n"
"              if (image_num < images.length) {\n"
"                var hr = document.createElement('hr');\n"
"                article_here.appendChild(hr);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ relative_root_path }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""
"<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url }}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var images = htmlDocArticle.getElementsByTagName(\"img\");\n"
"\n"
"          if (images.length > 0) {\n"
"            var h1text = htmlDocArticle.getElementsByTagName(\"h1\")[0].innerHTML;\n"
"\n"
"            var htitle = document.createElement('h2');\n"
"            htitle.innerHTML = h1text;\n"
"            article_here.appendChild(htitle);\n"
"\n"
"            var image_num = 0;\n"
"            for (let image of images) {\n"
"              image_num++;\n"
"\n"
"              var title = document.createElement('p');\n"
"              title.innerHTML = \"<strong>Figure \" + image_num + \".</strong> \" + image.alt;\n"
"              article_here.appendChild(title);\n"
"\n"
"              article_here.appendChild(image.cloneNode(false));\n"
"\n"
"              if (image_num < images.length) {\n"
"                var hr = document.createElement('hr');\n"
"                article_here.appendChild(hr);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ relative_root_path }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"

#: python-novice-gapminder/_extras/figures.md:61
msgid ""
"{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\" class=\"figures\"></article>\n"
"{% endfor %}"
msgstr ""
"{% comment %}\n"
"Створіть якір для кожного з епізодів.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\" class=\"figures\"></article>\n"
"{% endfor %}"

# Front Matter
#: python-novice-gapminder/_extras/guide.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Instructors' Guide\"\n"
"permalink: /guide/\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Instructors' Guide\"\n"
"permalink: /guide/\n"
"---"

# header
#: python-novice-gapminder/_extras/guide.md:7
msgid "## General Notes"
msgstr "## Загальні зауваження"

#: python-novice-gapminder/_extras/guide.md:9
msgid ""
"It's all right not to get through the whole lesson.\n"
":   This lesson is designed for people who have never programmed before,\n"
"    but any given class may include people with a wide range of prior experience.\n"
"    We have therefore included enough material to fill a full day if need be,\n"
"    but expect that many offerings will only get as far as the introduction to Pandas."
msgstr ""
"Можна не проходити весь урок.\n"
":   Цей урок призначений для людей, які раніше ніколи не займалися програмуванням, \n"
"    але в будь-якому класі можуть брати участь люди з різним попереднім досвідом.\n"
"    Тому ми включили достатньо матеріалу, щоб при необхідності заповнити цілий день, \n"
"    але очікуємо, що багато пропозицій дійдуть лише до введення у Pandas."

#: python-novice-gapminder/_extras/guide.md:15
msgid ""
"Don't tell people to Google things.\n"
":   One of the goals of this lesson is\n"
"    to help novices build a workable mental model of how programming works.\n"
"    Until they have that model,\n"
"    they will not know what to search for or how to recognize a helpful answer.\n"
"    Telling them to Google can also give the impression that we think their problem is trivial.\n"
"    (That said, if learners have done enough programming before to be past these issues,\n"
"    having them search for solutions online can help them solidify their understanding.)\n"
"    It's also worth quoting\n"
"    [Trevor King](https://github.com/swcarpentry/python-novice-\n"
"    gapminder/issues/22#issuecomment-182573516)'s\n"
"    comment about online search:\n"
"    \"If you find anything,\n"
"    other folks were confused enough to bother with a blog or Stack Overflow post,\n"
"    so it's probably not trivial.\""
msgstr ""
"Не кажіть людям, що потрібно гуглити.\n"
":   Однією з цілей цього уроку \n"
"    є допомогти новачкам побудувати робочу уявну модель того, як працює програмування.\n"
"    Поки вони не мають цієї моделі, \n"
"   вони не знатимуть, що шукати або як розпізнати корисну відповідь.\n"
"    Пропозиція пошукати відпівідь в Google може створити враження, що ми вважаємо їх проблему тривіальною.\n"
"    (Тим не менш, якщо учні вже достатньо програмували, щоб вирішити ці проблеми, \n"
"    пошук рішень в Інтернеті може допомогти їм зміцнити своє розуміння)\n"
"    Також варто процитувати коментар \n"
" [Тревора Кінга](https://github.com/swcarpentry/python-novice-\n"
"    gapminder/issues/22#issuecomment-182573516)\n"
"    про онлайн-пошук:\n"
"    \"Якщо ви знайдете щось, \n"
"    чим інші люди були стурбовані достатньо, щоб возитися з блогом чи публікацією поста про переповнення стеку, \n"
"    то, ймовірно, це не тривіально.\""

# Front Matter
#: python-novice-gapminder/aio.md:1
msgid ""
"---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"

#: python-novice-gapminder/aio.md:7
msgid ""
"{% comment %}\n"
"As a maintainer, you don't need to edit this file.\n"
"If you notice that something doesn't work, please \n"
"open an issue: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"
msgstr ""
"{% comment %}\n"
"Як супроводжувачу, Вам не потрібно редагувати цей файл.\n"
"Якщо Ви помітили, що щось не працює так як треба, будь ласка \n"
"повідомте про проблему тут: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"

#: python-novice-gapminder/aio.md:15
msgid "{% include aio-script.md %}"
msgstr "{% include aio-script.md %}"

# Front Matter
#: python-novice-gapminder/index.md:1
msgid ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"permalink: index.html  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"---"
msgstr ""
"---\n"
"layout: lesson\n"
"root: .  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"permalink: index.html  # Is the only page that doesn't follow the pattern /:path/index.html\n"
"---"

#: python-novice-gapminder/index.md:7
msgid ""
"This lesson is an introduction to programming in Python for people with little or no previous \n"
"programming experience. It uses plotting as its motivating example, and is designed to be used in \n"
"both [Data Carpentry][dc-lessons] and [Software Carpentry][swc-lessons] workshops. \n"
"This lesson references [JupyterLab][jupyterlab], but can be taught using a regular Python interpreter \n"
"as well. Please note that this lesson uses Python 3 rather than Python 2."
msgstr ""
"Цей урок містить введення до програмування на мові Python для користувачів, які не мають зовсім або мають початковий\n"
"досвід програмування. Він використовує побудову графіків як мотиваційний приклад, та розроблений для використання на\n"
"[Data Carpentry][dc-lessons] та [Software Carpentry][swc-lessons] тренігах. \n"
"Цей урок використовує [JupyterLab][jupyterlab], але його також можна викладати у звичайному інтрепретаторі мови Python.\n"
"Зверніть увагу, що він використовує Python 3, а не Python 2."

# blockquote, which can be cascaded
#: python-novice-gapminder/index.md:13
msgid "> ## Under Design"
msgstr "> ## У розробці"

#: python-novice-gapminder/index.md:14
msgid ""
">\n"
"> **This lesson is currently in its early design stage;\n"
"> please check [the design notes]({{ page.root }}/design/)\n"
"> to see what we have so far.\n"
"> Contributions are very welcome:\n"
"> we would be particularly grateful for exercises\n"
"> and for commentary on the ones already there.**"
msgstr ""
">\n"
"> **Цей урок знаходиться на початковій стадії розробки;\n"
"> будь ласка, перевірте [цю сторінку]({{ page.root }}/design/)\n"
"> щоб побачити що вже зроблено.\n"
"> Ми будемо дуже вдячні за допомогу,\n"
"> особливо за нові вправи\n"
"> та за коментарі до їснуючих вправ.**"

# blockquote, which can be cascaded
#: python-novice-gapminder/index.md:23
msgid "> ## Prerequisites"
msgstr "> ## Передумови"

#: python-novice-gapminder/index.md:24
msgid ""
">\n"
"> 1.  Learners need to understand what files and directories are,\n"
">     what a working directory is,\n"
">     and how to start a Python interpreter.\n"
">\n"
"> 2. Learners must install Python before the class starts.\n"
">\n"
"> 3. Learners must get the gapminder data before class starts:\n"
">    please download and unzip the file \n"
">    [python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
">\n"
">    Please see [the setup instructions][lesson-setup]\n"
">    for details."
msgstr ""
">\n"
"> 1.  Слухачі мають розуміти що таке файли та каталоги,\n"
">     що таке робочий каталог,\n"
">     та як запустити інтерпретатор мови Python.\n"
">\n"
"> 2. Слухачі мають встановити Python до початку тренінгу.\n"
">\n"
"> 3. Слухачі мають отримати дані (gapminder) перед початком тренінгу:\n"
">    будь ласка, завантажте та розархівуйте файл \n"
">    [python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
">\n"
">    Будь ласка, дивіться [the setup instructions][lesson-setup]\n"
">    для отримання детальної інформації. "

# SC/DC Template label
#: python-novice-gapminder/index.md:37
msgid "{: .prereq}"
msgstr "{: .prereq}"

# Front Matter
#: python-novice-gapminder/reference.md:1
msgid ""
"---\n"
"layout: reference\n"
"permalink: /reference/\n"
"root: ..\n"
"---"
msgstr ""
"---\n"
"layout: reference\n"
"permalink: /reference/\n"
"root: ..\n"
"---"

# header
#: python-novice-gapminder/reference.md:7
msgid "## Reference"
msgstr "## Довідник"

# header
#: python-novice-gapminder/reference.md:9
msgid "## [Running and Quitting]({{ page.root }}/01-run-quit/)"
msgstr "## [Запуск та завершення роботи]({{ page.root }}/01-run-quit/)"

# unordered list
#: python-novice-gapminder/reference.md:10
msgid "- Python files have the `.py` extension."
msgstr "- Python файли мають розширення `.py`."

# unordered list
#: python-novice-gapminder/reference.md:11
msgid "- Can be written in a text file or a [Jupyter Notebook][jupyter]."
msgstr ""
"- Можуть бути створені у текстовому редакторі або у [Jupyter "
"Notebook][jupyter]."

# unordered list
#: python-novice-gapminder/reference.md:12
msgid "  - Jupyter notebooks have the extension `.ipynb`"
msgstr ""
"  - Файли, створені в середовищі Jupyter notebook, мають розширення `.ipynb`"

# unordered list
#: python-novice-gapminder/reference.md:13
msgid ""
"  - Jupyter notebooks can be opened from "
"[Anaconda](https://docs.continuum.io/anaconda/install) or through the "
"command line by entering `$ jupyter notebook`"
msgstr ""
"  - Файли, створені в середовищі Jupyter notebook,  можуть бути відкриті в "
"[Anaconda](https://docs.continuum.io/anaconda/install) or through the "
"command line by entering `$ jupyter notebook`"

# unordered list
#: python-novice-gapminder/reference.md:14
msgid ""
"    - Markdown and HTML are allowed in markdown cells for documenting code."
msgstr ""
"    - В комірках markdown для документування коду можна використовувати як "
"Markdown так і HTML."

# header
#: python-novice-gapminder/reference.md:16
msgid "## [Variables and Assignment]({{ page.root }}/02-variables/)"
msgstr "## [Змінні та присвоєння]({{ page.root }}/02-variables/)"

# unordered list
#: python-novice-gapminder/reference.md:17
msgid "- Variables are stored using `=`."
msgstr "- Значення змінних зберігаються за допомогою  `=`."

# unordered list
#: python-novice-gapminder/reference.md:18
msgid "  - Strings are defined in quotations `'...'`."
msgstr "  - Рядки визначаються в лапках `'...'`."

# unordered list
#: python-novice-gapminder/reference.md:19
msgid ""
"  - Integers and floating point numbers are defined without quotations."
msgstr "  - Цілі числа та числа з плаваючою комою визначаються без лапок."

# unordered list
#: python-novice-gapminder/reference.md:20
msgid "- Variables can contain letters, digits, and underscores `_`."
msgstr "- Змінні можуть містити літери, цифри та символ підкреслення \"_\"."

# unordered list
#: python-novice-gapminder/reference.md:21
msgid "  - Cannot start with a digit."
msgstr "  - Не можуть починатися з цифри."

# unordered list
#: python-novice-gapminder/reference.md:22
msgid "  - Variables that start with underscores should be avoided."
msgstr "  - Слід уникати змінних, які починаються з підкреслення."

# unordered list
#: python-novice-gapminder/reference.md:23
msgid "- Use `print(...)` to display values as text."
msgstr "- Використовуйте `print(...)`, щоб відобразити значення як текст."

# unordered list
#: python-novice-gapminder/reference.md:24
msgid "- Can use indexing on strings."
msgstr "- Можна використовувати індексацію рядків."

# unordered list
#: python-novice-gapminder/reference.md:25
msgid "  - Indexing starts at 0."
msgstr "  - Індексація починається з 0."

# unordered list
#: python-novice-gapminder/reference.md:26
msgid ""
"  - Position is given in square brackets `[position]` following the variable"
" name."
msgstr ""
"  - Позиція вказується в квадратних дужках `[position]` після імені змінної."

# unordered list
#: python-novice-gapminder/reference.md:27
msgid ""
"  - Take a slice using `[start:stop]`. This makes a copy of part of the "
"original string."
msgstr ""
"  - Зріз створюється за допомогою `[start:stop]`. Це робить копію частини "
"вихідного рядка) "

# unordered list
#: python-novice-gapminder/reference.md:28
msgid "    - `start` is the index of the first element."
msgstr "    - `start` є індексом першого елемента."

# unordered list
#: python-novice-gapminder/reference.md:29
msgid ""
"    - `stop` is the index of the element after the last desired element."
msgstr ""
"    - `stop` є індексом елемента після останнього потрібного елемента."

# unordered list
#: python-novice-gapminder/reference.md:30
msgid "- Use `len(...)` to find the length of a variable or string. "
msgstr ""
"- Використовуйте `len(...)` для визначення довжини змінної або рядка. "

# header
#: python-novice-gapminder/reference.md:32
msgid ""
"## [Data Types and Type Conversion]({{ page.root }}/03-types-conversion/)"
msgstr ""
"## [Типи даних та їх перетворення]({{ page.root }}/03-types-conversion/)"

# unordered list
#: python-novice-gapminder/reference.md:33
msgid "- Each value has a type. This controls what can be done with it."
msgstr "- Кожна величина має тип. Це контролює дії, які можна з нею робити."

# unordered list
#: python-novice-gapminder/reference.md:34
msgid "  - `int` represents an integer"
msgstr "  - `int` є цілим числом"

# unordered list
#: python-novice-gapminder/reference.md:35
msgid "  - `float` represents a floating point number."
msgstr "  - `float` представляє число з плаваючою комою."

# unordered list
#: python-novice-gapminder/reference.md:36
msgid "  - `str` represents a string."
msgstr "  - `str` є рядком."

# unordered list
#: python-novice-gapminder/reference.md:37
msgid ""
"- To determine a variables type, use the built-in function `type(...)`, "
"including the variable name in the parenthesis."
msgstr ""
"Щоб визначити тип змінної, скористайтеся вбудованою функцією `type(...)`, "
"вказавши назву змінної в дужках."

# unordered list
#: python-novice-gapminder/reference.md:38
msgid "- Modifying strings:"
msgstr "- Модифікація рядків:"

# unordered list
#: python-novice-gapminder/reference.md:39
msgid "  - Use `+` to concatenate strings."
msgstr "  - Використовуйте `+` для об'єднання (конкатенації) рядків."

# unordered list
#: python-novice-gapminder/reference.md:40
msgid "  - Use `*` to repeat a string."
msgstr "  - Використовуйте `*`, щоб повторити рядок."

# unordered list
#: python-novice-gapminder/reference.md:41
msgid "  - Numbers and strings cannot be added to on another."
msgstr "  - Числа та рядки не можна додавати один до іншого."

# unordered list
#: python-novice-gapminder/reference.md:42
msgid "    - Convert string to integer: `int(...)`."
msgstr "    - Перетворити рядок на ціле: `int(...)`."

# unordered list
#: python-novice-gapminder/reference.md:43
msgid "    - Convert integer to string: `str(...)`."
msgstr "    - Перетворити ціле на рядок : `str(...)`."

# header
#: python-novice-gapminder/reference.md:45
msgid "## [Built-in Functions and Help]({{ page.root }}/04-built-in/)"
msgstr "## [Вбудовані функції та довідка]({{ page.root }}/04-built-in/)"

# unordered list
#: python-novice-gapminder/reference.md:46
msgid ""
"- To add a comment, place `#` before the thing you do not with to be "
"executed."
msgstr ""
"- Щоб додати коментар, поставте `#` перед тим, що ви не хочете виконувати."

# unordered list
#: python-novice-gapminder/reference.md:47
msgid "- Commonly used built-in functions:"
msgstr "- Вбудовані функції, які часто використовуються: "

# unordered list
#: python-novice-gapminder/reference.md:48
msgid "  - `min()` finds the smallest value."
msgstr "  - `min()` визначає найменшу величину."

# unordered list
#: python-novice-gapminder/reference.md:49
msgid "  - `max()` finds the largest value."
msgstr "  - `max()` визначає найбільшу величину."

# unordered list
#: python-novice-gapminder/reference.md:50
msgid "  - `round()` rounds off a floating point number."
msgstr "  - `round()` округлює число з плаваючою комою."

# unordered list
#: python-novice-gapminder/reference.md:51
msgid ""
"  - `help()` displays documentation for the function in the parenthesis."
msgstr "  - `help()` відображає документацію для функції в дужках."

# unordered list
#: python-novice-gapminder/reference.md:52
msgid ""
"    - Other ways to get help include holding down `shift` and pressing `tab`"
" in Jupyter Notebooks."
msgstr ""
"    - Інші способи отримати допомогу включають одночасне натискання `shift` "
"і `tab` у Jupyter Notebooks."

# header
#: python-novice-gapminder/reference.md:54
msgid "## [Libraries]({{ page.root }}/06-libraries/)"
msgstr "## [Бібліотеки]({{ page.root }}/06-libraries/)"

# unordered list
#: python-novice-gapminder/reference.md:55
msgid "- Importing a library:"
msgstr "- Імпорт бібліотеки:"

# unordered list
#: python-novice-gapminder/reference.md:56
msgid "  - Use `import ...` to load a library."
msgstr "  - Використовуйте `import ...` для підключення бібліотеки."

# unordered list
#: python-novice-gapminder/reference.md:57
msgid "  - Refer to this library by using `module_name.thing_name`."
msgstr ""
"  - Звертайтеся до цієї бібліотеки у форматі `module_name.thing_name`."

# unordered list
#: python-novice-gapminder/reference.md:58
msgid "    - `.` indicates 'part of'."
msgstr "    - `.` вказує на 'частину'."

# unordered list
#: python-novice-gapminder/reference.md:59
msgid "- To import a specific item from a library: `from ... import ...`"
msgstr ""
"- Щоб імпортувати певний елемент із бібліотеки, використовуйте команду `from"
" ... import ...`"

# unordered list
#: python-novice-gapminder/reference.md:60
msgid "- To import a library using an alias: `import ... as ...`"
msgstr ""
"- Щоб імпортувати бібліотеку та створити її псевдонім, використовуйте "
"команду `import ... as ...`"

# unordered list
#: python-novice-gapminder/reference.md:61
msgid "- Importing the math library: `import math`"
msgstr "- Імпорт математичної бібліотеки: `import math`"

# unordered list
#: python-novice-gapminder/reference.md:62
msgid ""
"  - Example of referring to an item with the module's name: "
"`math.cos(math.pi)`."
msgstr ""
"  - Приклад посилання на елемент із назвою модуля: `math.cos(math.pi)`."

# unordered list
#: python-novice-gapminder/reference.md:63
msgid ""
"- Importing the plotting library as an alias: `import matplotlib as mpl`"
msgstr ""
"- Імпорт графічної бібліотеки та позначення її за допомогою псевдоніма: "
"`import matplotlib as mpl`"

# header
#: python-novice-gapminder/reference.md:65
msgid ""
"## [Reading Tabular Data into DataFrames]({{ page.root }}/07-reading-"
"tabular/)"
msgstr ""
"## [Читання табличних даних у фреймах даних]({{ page.root }}/07-reading-"
"tabular/)"

# unordered list
#: python-novice-gapminder/reference.md:66
msgid ""
"- Use the pandas library to do statistics on tabular data. Load with `import"
" pandas as pd`."
msgstr ""
"- Використовуйте бібліотеку pandas для статистичної обробки табличних даних."
" Завантажуйте її за допомогою `import pandas as pd`."

# unordered list
#: python-novice-gapminder/reference.md:67
msgid ""
"  - To read in a csv: `pd.read_csv()`, including the path name in the "
"parenthesis."
msgstr ""
"  - Щоб прочитати дані у файлі csv, використовуйте команду: `pd.read_csv()`,"
" включаючи шлях до файлу в дужках."

# unordered list
#: python-novice-gapminder/reference.md:68
msgid ""
"    - To specify a column's values should be used as row headings: "
"`pd.read_csv('path',index_col='column name')`, where path and column name "
"should be replaced with the relevant values."
msgstr ""
"    - Щоб указати значення стовпця, слід використовувати наступний формат "
"заголовків рядків: `pd.read_csv('path',index_col='column name')`, де `path` "
"і `column name` замінюються відповідними значеннями. "

# unordered list
#: python-novice-gapminder/reference.md:69
msgid ""
"- To get more information about a DataFrame, use `DataFrame.info`, replacing"
" `DataFrame` with the variable name of your DataFrame."
msgstr ""
"- Щоб отримати більше інформації про фрейм даних, використовуйте "
"`DataFrame.info`, замінивши `DataFrame` назвою вашого файлу даних."

# unordered list
#: python-novice-gapminder/reference.md:70
msgid "- Use `DataFrame.columns` to view the column names."
msgstr ""
"- Використовуйте команду `DataFrame.columns` щоб переглянути назви стовпців."

# unordered list
#: python-novice-gapminder/reference.md:71
msgid "- Use `DataFrame.T` to transpose a DataFrame."
msgstr "- Використовуйте `DataFrame.T` щоб транспонувати фрейм даних."

# unordered list
#: python-novice-gapminder/reference.md:72
msgid "- Use `DataFrame.describe` to get summary statistics about your data."
msgstr ""
"- Використовуйте `DataFrame.describe`, щоб отримати підсумкову статистику "
"ваших даних."

# header
#: python-novice-gapminder/reference.md:74
msgid "## [Pandas DataFrames]({{ page.root }}/08-data-frames/)"
msgstr "## [Pandas DataFrames]({{ page.root }}/08-data-frames/)"

# unordered list
#: python-novice-gapminder/reference.md:75
msgid "- Select data using `[i,j]`"
msgstr "- Вибір даних за допомогою `[i,j]`"

# unordered list
#: python-novice-gapminder/reference.md:76
msgid "  - To select by entry position: `DataFrame.iloc[..., ...]`"
msgstr "  - Вибір за місцезнаходженням: `DataFrame.iloc[..., ...]`"

# unordered list
#: python-novice-gapminder/reference.md:77
msgid "    - This is inclusive of everything except the final index."
msgstr "    - Це включає весь діапазон, крім останнього індексу."

# unordered list
#: python-novice-gapminder/reference.md:78
msgid "  - To select by entry label: `DataFrame.loc[..., ...]`"
msgstr ""
"  - Для вибору за міткою запису використовуйте: `DataFrame.loc[..., ...]`"

# unordered list
#: python-novice-gapminder/reference.md:79
msgid "    - Can select multiple rows or columns by listing labels."
msgstr ""
"    - Можна вибрати кілька рядків або стовпців визначенням діапазону міток."

# unordered list
#: python-novice-gapminder/reference.md:80
msgid "    - This is inclusive to both ends."
msgstr "    - Кінцеві індекси включно з обох боків."

# unordered list
#: python-novice-gapminder/reference.md:81
msgid "  - Use `:` to select all rows or columns."
msgstr "  - Використовуйте `:`, щоб обрати всі рядки або стовпці."

# unordered list
#: python-novice-gapminder/reference.md:82
msgid ""
"- Can also select data based on values using `true` and `false`. This is a "
"Boolean mask."
msgstr ""
"- Також можна вибирати дані на основі значень за допомогою `true` і `false`."
" Це Булева маска."

# unordered list
#: python-novice-gapminder/reference.md:83
msgid "  - `mask = subset > 10000`"
msgstr "  - Наприклад, `mask = subset > 10000`"

# unordered list
#: python-novice-gapminder/reference.md:84
msgid "  - We can then use this to select values."
msgstr ""
"  - Ми можемо потім використовувати вище визначену маску для вибору значень."

# unordered list
#: python-novice-gapminder/reference.md:85
msgid ""
"- To use a select-apply-combine operation we use `data.apply(lambda x: "
"x>x.mean())` where `mean()` can be any operation the user would like to be "
"applied to x."
msgstr ""
"- Формат комбінованої операції select-apply є таким: `data.apply(lambda x: "
"x>x.mean())`, де `mean()` може бути будь-якою операцією, яку користувач хоче"
" застосувати до набору даних x. "

# header
#: python-novice-gapminder/reference.md:87
msgid "## [Plotting]({{ page.root }}/09-plotting/)"
msgstr "## [Пoбудова графіків]({{ page.root }}/09-plotting/)"

# unordered list
#: python-novice-gapminder/reference.md:88
msgid "- The most widely used plotting library is `matplotlib`."
msgstr ""
"- `matplotlib` є найбільш широко використовуваною бібліотекою побудови "
"графіків."

# unordered list
#: python-novice-gapminder/reference.md:89
msgid "  - Usually imported using `import matplotlib.pyplot as plt`."
msgstr ""
"  - Зазвичай імпортується за допомогою `import matplotlib.pyplot as plt`."

# unordered list
#: python-novice-gapminder/reference.md:90
msgid "  - To plot we use the command `plt.plot(time, position)`."
msgstr ""
"  - Для побудови графіків використовується команда `plt.plot(time, "
"position)`."

# unordered list
#: python-novice-gapminder/reference.md:91
msgid ""
"  - To create a legend use `plt.legend(['label1','label2', loc='upper "
"left'])`"
msgstr ""
"  - Для створення легенди використовується команда "
"`plt.legend(['label1','label2', loc='upper left'])`"

# unordered list
#: python-novice-gapminder/reference.md:92
msgid ""
"    - Can also define labels within the plot statements by using "
"`plt.plot(time, position, label='label')`. To make the legend show up, use "
"`plt.legend()`"
msgstr ""
"    - Можна також визначати мітки в операторах plot за допомогою команди "
"`plt.plot(time, position, label='label')`. Щоб відобразити легенду, "
"використовуйте `plt.legend()`"

# unordered list
#: python-novice-gapminder/reference.md:93
msgid ""
"  - To label x and y axis `plt.xlabel('label')` and `plt.ylabel('label')` "
"are used."
msgstr ""
"  - Для позначення осей x і y використовуються команди `plt.xlabel('label')`"
" і `plt.ylabel('label')`."

# unordered list
#: python-novice-gapminder/reference.md:94
msgid ""
"- Pandas DataFrames can be used to plot by using `DataFrame.plot()`. Any "
"operations that can be used on a DataFrame can be applied while plotting."
msgstr ""
"- Pandas DataFrames можна використовувати для побудови графіків, "
"застосовуючи команду `DataFrame.plot()`. Будь-які операції, які можна "
"використовувати на DataFrame, можна застосовувати для побудови графіків."

# unordered list
#: python-novice-gapminder/reference.md:95
msgid "  - To plot a bar plot `data.plot(kind='bar')`"
msgstr ""
"  - Для побудови гістограми застосовуйте команду `data.plot(kind='bar')`"

# code block
#: python-novice-gapminder/reference.md:97
msgid ""
"~~~\n"
"import matplotlib.puplot as plot\n"
"plt.plot(time,position,label='label')\n"
"plt.xlabel('x axis label')\n"
"plt.ylabel('y axis label')\n"
"plt.legend()\n"
"~~~"
msgstr ""
"~~~\n"
"import matplotlib.puplot as plot\n"
"plt.plot(time,position,label='label')\n"
"plt.xlabel('x axis label')\n"
"plt.ylabel('y axis label')\n"
"plt.legend()\n"
"~~~"

# header
#: python-novice-gapminder/reference.md:106
msgid "## [Lists]({{ page.root }}/11-lists/)"
msgstr "## [Списки]({{ page.root }}/11-lists/)"

# unordered list
#: python-novice-gapminder/reference.md:107
msgid "- Defined within `[...]` and separated by `,`."
msgstr "- Містяться у `[...]` і розділяються за допомогою `,`."

# unordered list
#: python-novice-gapminder/reference.md:108
msgid "  - An empty list can be created by using `[]`."
msgstr "  - Порожній список можна створити за допомогою `[]`."

# unordered list
#: python-novice-gapminder/reference.md:109
msgid "- Can use `len(...)` to determine how many values are in a list."
msgstr ""
"- Можна використовувати `len(...)`, щоб визначити кількість значень у "
"списку."

# unordered list
#: python-novice-gapminder/reference.md:110
msgid "- Can index just as done in previous lessons."
msgstr "- Можна індексувати так само, як це виконувалось в попередніх уроках."

# unordered list
#: python-novice-gapminder/reference.md:111
msgid "  - Indexing can be used to reassign values `list_name[0] = newvalue`."
msgstr ""
"  - Індексацію можна використовувати для перепризначення значень: "
"`назва_списку[0] = нове значення`"

# unordered list
#: python-novice-gapminder/reference.md:112
msgid ""
"- To add an item to a list use `list_name.append()`, with the item to append"
" in the parenthesis."
msgstr ""
"- Щоб додати елемент до списку, використовуйте `list_name.append()`, "
"указавши у дужках елемент, який потрібно додати."

# unordered list
#: python-novice-gapminder/reference.md:113
msgid "- To combine two lists use `list_name_1.extend(list_name_2)`."
msgstr ""
"- Щоб об’єднати два списки, використовуйте "
"`list_name_1.extend(list_name_2)`."

# unordered list
#: python-novice-gapminder/reference.md:114
msgid "- To remove an item from a list use `del list_name[index]`."
msgstr ""
"- Щоб видалити елемент зі списку, використовуйте `del list_name[index]`."

# header
#: python-novice-gapminder/reference.md:116
msgid "## [For Loops]({{ page.root }}/12-for-loops/)"
msgstr "## [Цикли for]({{ page.root }}/12-for-loops/)"

# unordered list
#: python-novice-gapminder/reference.md:117
msgid ""
"- Start a for loop with `for number in [1,2,3]:`, with the following lines "
"indented."
msgstr ""
"- Почніть цикл for з `for number in [1,2,3]:` з відступом у наступних "
"рядках."

# unordered list
#: python-novice-gapminder/reference.md:118
msgid "  - `[1, 2, 3]` is considered the collection."
msgstr "  - `[1, 2, 3]` розглядається як колекція."

# unordered list
#: python-novice-gapminder/reference.md:119
msgid "  - `number` is the loop variable."
msgstr "  - `number` є змінною цикла."

# unordered list
#: python-novice-gapminder/reference.md:120
msgid "  - The action following the collection is the body."
msgstr "  - Дія, наступна за колекцією, є тілом циклу."

# unordered list
#: python-novice-gapminder/reference.md:121
msgid "- To iterate over a sequence of numbers use `range(start, end)`"
msgstr ""
"- Для повторення послідовності дій зі змінною циклу використовуйте "
"`range(start, end)`"

# code block
#: python-novice-gapminder/reference.md:123
msgid ""
"~~~\n"
"for number in range(0,5):\n"
"  print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"for number in range(0,5):\n"
"  print(number)\n"
"~~~"

# header
#: python-novice-gapminder/reference.md:129
msgid "## [Conditionals]({{ page.root }}/13-conditionals/)"
msgstr "## [Умовні оператори]({{ page.root }}/13-conditionals/)"

# unordered list
#: python-novice-gapminder/reference.md:130
msgid "- Defined similarly to a loop, using `if variable conditional value:`."
msgstr ""
"- Визначаються подібно до циклу з використанням формату `if variable умовне "
"значення:` "

# unordered list
#: python-novice-gapminder/reference.md:131
msgid "  - For example, `if variable > 5:`."
msgstr "  - Наприклад, `if variable > 5:`."

# unordered list
#: python-novice-gapminder/reference.md:132
msgid "- Use `elif:` for additional tests."
msgstr "- Використовуйте `elif:` для додаткових тестів."

# unordered list
#: python-novice-gapminder/reference.md:133
msgid "- Use `else:` for when if statement is not true."
msgstr "- Використовуйте `else:`, якщо твердження if є невірним."

# unordered list
#: python-novice-gapminder/reference.md:134
msgid "- Can Combine more than one conditional by using `and` or `or`."
msgstr "- Можна об’єднати більше ніж одну умову за допомогою `and` або `or`."

# unordered list
#: python-novice-gapminder/reference.md:135
msgid "- Often used in combination with for loops."
msgstr "- Часто використовується в поєднанні з циклами for."

# unordered list
#: python-novice-gapminder/reference.md:136
msgid "- Conditions that can be used:"
msgstr "- Умови, які можна використовувати:"

# unordered list
#: python-novice-gapminder/reference.md:137
msgid "  - `==` equal to."
msgstr "  - `==` дорівнює."

# unordered list
#: python-novice-gapminder/reference.md:138
msgid "  - `>=` greater than or equal to."
msgstr "  - `>=` більше або дорівнює."

# unordered list
#: python-novice-gapminder/reference.md:139
msgid "  - `<=` less than or equal to."
msgstr "  - `<=` менше або дорівнює."

# unordered list
#: python-novice-gapminder/reference.md:140
msgid "  - `>` greater than."
msgstr "  - `>` більше за."

# unordered list
#: python-novice-gapminder/reference.md:141
msgid "  - `<` less than."
msgstr "  - `<` менше за."

# code block
#: python-novice-gapminder/reference.md:143
msgid ""
"~~~\n"
"for m in [3, 6, 7, 2, 8]:\n"
"  if m > 5:\n"
"    print(m, 'is large')\n"
"  elif m == 5:\n"
"    print(m, 'is 5')\n"
"  else:\n"
"    print(m, 'is small')\n"
"~~~"
msgstr ""
"~~~\n"
"for m in [3, 6, 7, 2, 8]:\n"
"  if m > 5:\n"
"    print(m, 'is large')\n"
"  elif m == 5:\n"
"    print(m, 'is 5')\n"
"  else:\n"
"    print(m, 'is small')\n"
"~~~"

# header
#: python-novice-gapminder/reference.md:154
msgid "## [Looping Over Data Sets]({{ page.root }}/14-looping-data-sets/)"
msgstr ""
"## [Перегляд наборів даних в циклі]({{ page.root }}/14-looping-data-sets/)"

# unordered list
#: python-novice-gapminder/reference.md:155
msgid "- Use a for loop: `for filename in [file1, file2]:`"
msgstr "- Використовуйте цикл for: `for filename in [file1, file2]:`"

# unordered list
#: python-novice-gapminder/reference.md:156
msgid "- To find a set of files using a pattern use `glob.glob`"
msgstr "- Щоб знайти набір файлів за шаблоном, використовуйте `glob.glob`"

# unordered list
#: python-novice-gapminder/reference.md:157
msgid "  - Must import first using `import glob`."
msgstr ""
"  - Спочатку потрібно імпортувати відповідну бібліотеку за допомогою `import"
" glob`."

# unordered list
#: python-novice-gapminder/reference.md:158
msgid "  - `*` indicates \"match zero or more characters\""
msgstr "  - `*` вказує, що \"нуль або більше символів збігаються\""

# unordered list
#: python-novice-gapminder/reference.md:159
msgid "  - `?` indicates \"match exactly one character\""
msgstr "  - `?` вказує, що \"тільки один символ збігається\""

# unordered list
#: python-novice-gapminder/reference.md:160
msgid ""
"    - For example: `glob.glob(*.txt)` will find all files that end with .txt"
" in the current directory."
msgstr ""
"    - Наприклад: `glob.glob(*.txt)` знайде всі файли з розширенням .txt у "
"поточному каталозі."

# unordered list
#: python-novice-gapminder/reference.md:161
msgid ""
"- Combine these by writing a loop using: `for filename in glob.glob(*.txt):`"
msgstr ""
"- Поєднайте це, написавши цикл за допомогою: `for filename in "
"glob.glob(*.txt):`"

# code block
#: python-novice-gapminder/reference.md:163
msgid ""
"~~~\n"
"for filename in glob.glob(*.txt):\n"
"  data = pd.read_csv(filename)\n"
"~~~"
msgstr ""
"~~~\n"
"for filename in glob.glob(*.txt):\n"
"  data = pd.read_csv(filename)\n"
"~~~"

# header
#: python-novice-gapminder/reference.md:169
msgid "## [Writing Functions]({{ page.root }}/16-writing-functions/)"
msgstr "## [Написання функцій]({{ page.root }}/16-writing-functions/)"

# unordered list
#: python-novice-gapminder/reference.md:170
msgid ""
"- Define a function using `def function_name(parameters):`. Replace "
"`parameters` with the variables to use when the function is executed."
msgstr ""
"- Визначайте функцію за допомогою `def function_name(parameters):`. Змініть "
"`parameters` на змінні, які використовуватимуться під час виконання функції."

# unordered list
#: python-novice-gapminder/reference.md:171
msgid "- Run by using `function_name(parameters)`."
msgstr "- Запустіть функцію за допомогою `function_name(parameters)`."

# unordered list
#: python-novice-gapminder/reference.md:172
msgid "- To return a result to the caller use `return ...` in the function."
msgstr ""
"- Щоб повернути результат у місце виклику, використовуйте `return ...` в "
"тілі функції."

# code block
#: python-novice-gapminder/reference.md:174
msgid ""
"~~~\n"
"def add_numbers(a, b):\n"
"  result = a + b\n"
"  return result\n"
"\n"
"add_numbers(1, 4)\n"
"~~~"
msgstr ""
"~~~\n"
"def add_numbers(a, b):\n"
"  result = a + b\n"
"  return result\n"
"\n"
"add_numbers(1, 4)\n"
"~~~"

# header
#: python-novice-gapminder/reference.md:183
msgid "## [Variable Scope]({{ page.root }}/17-scope/)"
msgstr "## [Область видимості змінної]({{ page.root }}/17-scope/)"

# unordered list
#: python-novice-gapminder/reference.md:184
msgid ""
"- A local variable is defined in a function and can only be seen and used "
"within that function."
msgstr ""
"- Локальна змінна визначена у функції, і її можна побачити та "
"використовувати лише в цій функції."

# unordered list
#: python-novice-gapminder/reference.md:185
msgid ""
"- A global variable is defined outside of a function and can be seen or used"
" anywhere after definition."
msgstr ""
"- Глобальна змінна визначається поза функцією, і її можна побачити або "
"використати будь-де після її визначення."

# header
#: python-novice-gapminder/reference.md:187
msgid "## [Programming Style]({{ page.root }}/18-style/)"
msgstr "## [Стиль програмування]({{ page.root }}/18-style/)"

# unordered list
#: python-novice-gapminder/reference.md:188
msgid "- Document your code."
msgstr "- Документуйте свій код."

# unordered list
#: python-novice-gapminder/reference.md:189
msgid "- Use clear and meaningful variable names."
msgstr "- Використовуйте чіткі та зрозумілі назви змінних."

# unordered list
#: python-novice-gapminder/reference.md:190
msgid ""
"- Follow [the PEP8 style guide](https://www.python.org/dev/peps/pep-0008) "
"when setting up your code."
msgstr ""
"- Притримуйтесь [the PEP8 style "
"guide](https://www.python.org/dev/peps/pep-0008) під час налаштування коду."

# unordered list
#: python-novice-gapminder/reference.md:191
msgid "- Use assertions to check for internal errors."
msgstr "- Використовуйте твердження для перевірки внутрішніх помилок."

# unordered list
#: python-novice-gapminder/reference.md:192
msgid "- Use docstrings to provide help."
msgstr "- Використовуйте docstrings для створення довідки."

# header
#: python-novice-gapminder/reference.md:194
msgid "## Glossary"
msgstr "## Словник"

#: python-novice-gapminder/reference.md:196
msgid ""
"{:auto_ids}\n"
"Arguments\n"
":     Values passed to functions."
msgstr ""
"{:auto_ids}\n"
"Аргументи\n"
":     Значення, що передаються функціям."

#: python-novice-gapminder/reference.md:200
msgid ""
"Array\n"
":     A container holding elements of the same type."
msgstr ""
"Масив\n"
":     контейнер, що містить елементи одного типу"

#: python-novice-gapminder/reference.md:203
msgid ""
"Boolean\n"
":     An object composed of `true` and `false`."
msgstr ""
"Булевий \n"
":     об’єкт, що складається з `true` і `false`"

#: python-novice-gapminder/reference.md:206
msgid ""
"DataFrame\n"
":     The way Pandas represents a table; a collection of series."
msgstr ""
"Фрейм даних\n"
":     Засіб подання таблиці у Pandas; колекція серій."

#: python-novice-gapminder/reference.md:209
msgid ""
"Element\n"
":     An item in a list or an array. For a string, these are the individual characters."
msgstr ""
"Element\n"
":     Окреме значення у списку або масиві. Для рядка це окремі символи."

#: python-novice-gapminder/reference.md:212
msgid ""
"Function\n"
":     A block of code that can be called and re-used elsewhere."
msgstr ""
"Функція\n"
":     блок коду, який можна викликати та повторно використовувати деінде."

#: python-novice-gapminder/reference.md:215
msgid ""
"Global variable\n"
":     A variable defined outside of a function that can be used anywhere."
msgstr ""
"Глобальна змінна\n"
":     Змінна, визначена поза функцією, яку можна використовувати будь-де."

#: python-novice-gapminder/reference.md:218
msgid ""
"Index\n"
":     The position of a given element."
msgstr ""
"Індекс\n"
":     Позиція даного елемента."

#: python-novice-gapminder/reference.md:221
msgid ""
"Jupyter Notebook\n"
":     Interactive coding environment allowing a combination of code and markdown."
msgstr ""
"Jupyter Notebook\n"
":   Інтерактивне середовище кодування, що дозволяє поєднувати код і розмітку."

#: python-novice-gapminder/reference.md:224
msgid ""
"Library\n"
":     A collection of files containing functions used by other programs."
msgstr ""
"Бібліотека\n"
":     Колекція файлів, що містять функції, які використовуються іншими програмами."

#: python-novice-gapminder/reference.md:227
msgid ""
"Local Variable\n"
":     A variable defined inside of a function that can only be used inside of that function."
msgstr ""
"Локальна змінна\n"
":     Змінна, визначена всередині функції, яку можна використовувати лише всередині цієї функції."

#: python-novice-gapminder/reference.md:230
msgid ""
"Mask\n"
":     A boolean object used for selecting data from another object."
msgstr ""
"Маска\n"
":     Булевий об’єкт, який використовується для вибору даних з іншого об’єкта."

#: python-novice-gapminder/reference.md:233
msgid ""
"Method\n"
":     An action tied to a particular object. Called by using `object.method`."
msgstr ""
"Метод\n"
":     Дія, пов'язана з певним об'єктом. Викликається за допомогою `object.method`."

#: python-novice-gapminder/reference.md:236
msgid ""
"Modules\n"
":     The files within a library containing functions used by other programs."
msgstr ""
"Модулі\n"
":     файли в бібліотеці, що містять функції, які використовуються іншими програмами."

#: python-novice-gapminder/reference.md:239
msgid ""
"Parameters\n"
":     Variables used when executing a function."
msgstr ""
"Параметри\n"
":     Змінні, що використовуються під час виконання функції."

#: python-novice-gapminder/reference.md:242
msgid ""
"Series\n"
":     A Pandas data structure to represent a column."
msgstr ""
"Серія \n"
":    Структура даних Pandas для подання стовпця."

#: python-novice-gapminder/reference.md:245
msgid ""
"Substring\n"
":     A part of a string."
msgstr ""
"Підрядок\n"
":     Частина рядка."

#: python-novice-gapminder/reference.md:248
msgid ""
"Variables\n"
":     Names for values."
msgstr ""
"Змінні\n"
":     Назви значень."

# Front Matter
#: python-novice-gapminder/setup.md:1
msgid ""
"---\n"
"layout: page\n"
"title: \"Setup\"\n"
"permalink: /setup/\n"
"root: ..\n"
"---"
msgstr ""
"---\n"
"layout: page\n"
"title: \"Налаштування\"\n"
"permalink: /setup/\n"
"root: ..\n"
"---"

# header
#: python-novice-gapminder/setup.md:8
msgid "## Installing Python Using Anaconda"
msgstr "## Встановлення Python за допомогою Anaconda"

#: python-novice-gapminder/setup.md:10
msgid ""
"[Python][python] is a popular language for scientific computing, and great for\n"
"general-purpose programming as well. Installing all of its scientific packages\n"
"individually can be a bit difficult, however, so we recommend the all-in-one\n"
"installer [Anaconda][anaconda]."
msgstr ""
"[Python][python] - це популярна мова для наукових обчислень, яка чудово підходить для \n"
"програмування загального призначення. Однак встановлення всіх його наукових пакетів \n"
"окремо може бути трохи складніше, тому ми рекомендуємо інсталятор \"все-в-одному\"\n"
"від [Anaconda][anaconda]."

#: python-novice-gapminder/setup.md:15
msgid ""
"Regardless of how you choose to install it, please make sure you install Python\n"
"version 3.x (e.g., 3.4 is fine). Also, please set up your python environment at \n"
"least a day in advance of the workshop.  If you encounter problems with the \n"
"installation procedure, ask your workshop organizers via e-mail for assistance so\n"
"you are ready to go as soon as the workshop begins."
msgstr ""
"Незалежно від того, як ви вирішите його встановити, переконайтеся, що ви встановили Python\n"
"версія 3.x (наприклад, 3.4 добре підходить). Крім того, налаштуйте середовище python \n"
"принаймні за день до семінару. Якщо у вас виникли проблеми з\n"
"процедури встановлення, зверніться по допомогу до організаторів семінару електронною поштою, \n"
"щоб ви були готові, як тільки почнеться семінар."

# header
#: python-novice-gapminder/setup.md:21
msgid "### Windows - [Video tutorial][video-windows]"
msgstr "### Windows - [Video tutorial][video-windows]"

# ordered list
#: python-novice-gapminder/setup.md:23
msgid ""
"1. Open [https://www.anaconda.com/distribution/][anaconda-windows] with your"
" web browser."
msgstr ""
"1. Відкрийте [https://www.anaconda.com/distribution/][anaconda-windows] у "
"вашому веб браузері"

# ordered list
#: python-novice-gapminder/setup.md:25
msgid "2. Download the Python 3 installer for Windows."
msgstr "2. Завантажте програму встановлення Python 3 для Windows."

# ordered list
#: python-novice-gapminder/setup.md:27
msgid ""
"3. Double-click the executable and install Python 3 using the recommended "
"settings. Make sure that **Register Anaconda as my default Python 3.x** "
"option is checked - it should be in the latest version of Anaconda"
msgstr ""
"3. Двічі клацніть виконуваний файл і встановіть Python 3 із рекомендованими "
"налаштуваннями. Переконайтеся, що опція **\"Register Anaconda as my default "
"Python 3.x\"** (Зареєструвати Anaconda як мій Python 3.x) позначена — вона "
"має бути в останній версії Anaconda"

# header
#: python-novice-gapminder/setup.md:29
msgid "### Mac OS X - [Video tutorial][video-mac]"
msgstr "### Mac OS X - [Video tutorial][video-mac]"

# ordered list
#: python-novice-gapminder/setup.md:31
msgid ""
"1. Visit [https://www.anaconda.com/distribution/][anaconda-mac] with your "
"web browser."
msgstr ""
"1. Відкрийте [https://www.anaconda.com/distribution/][anaconda-mac] у вашому"
" веб браузері."

# ordered list
#: python-novice-gapminder/setup.md:33
msgid ""
"2. Download the Python 3 installer for OS X. These instructions assume that "
"you use the graphical installer `.pkg` file."
msgstr ""
"2. Завантажте інсталятор Python 3 для OS X. У цих інструкціях "
"передбачається, що ви використовуєте графічний файл інсталятора `.pkg`."

# ordered list
#: python-novice-gapminder/setup.md:35
msgid ""
"3. Follow the Python 3 installation instructions. Make sure that the install"
" location is set to \"Install only for me\" so Anaconda will install its "
"files locally, relative to your home directory. Installing the software for "
"all users tends to create problems in the long run and should be avoided."
msgstr ""
"3. Слідуйте інструкціям з інсталяції Python 3. Переконайтеся, що опція "
"\"Install only for me\" (встановити тільки для мене) позначена, щоб Anaconda"
" встановила необхідні файли локально, у Вашому домашньому каталозі. "
"Інсталляція програми для всіх користувачів може призвести до проблем у "
"майбутньому, і тому її треба уникати."

# header
#: python-novice-gapminder/setup.md:38
msgid "### Linux"
msgstr "### Linux"

#: python-novice-gapminder/setup.md:40
msgid ""
"Note that the following installation steps require you to work from the shell. \n"
"If you run into any difficulties, please request help before the workshop begins."
msgstr ""
"Зверніть увагу на те, що ці інструкції треба виконувати у командній строці. \n"
"У разі будь-яких труднощів, будь ласка зверніться за допомогою до початку тренінгу."

# ordered list
#: python-novice-gapminder/setup.md:43
msgid ""
"1.  Open [https://www.anaconda.com/distribution/][anaconda-linux] with your "
"web browser."
msgstr ""
"1.  Відкрийте [https://www.anaconda.com/distribution/][anaconda-linux] у "
"Вашому веб браузері."

# ordered list
#: python-novice-gapminder/setup.md:45
msgid "2.  Download the Python 3 installer for Linux."
msgstr "2.  Завантажте інсталятор Python 3 для Linux."

# ordered list
#: python-novice-gapminder/setup.md:47
msgid "3.  Install Python 3 using all of the defaults for installation."
msgstr "3.  Інсталюйте Python 3 з усіма рекомендованими налагодженнями."

#: python-novice-gapminder/setup.md:49
msgid "    a.  Open a terminal window."
msgstr "    a.  Відкрийте вікно терміналу."

#: python-novice-gapminder/setup.md:51
msgid "    b.  Navigate to the folder where you downloaded the installer"
msgstr ""
"    b.  Перейдіть до каталогу, у якому Ви зберігли завантажений інсталятор"

#: python-novice-gapminder/setup.md:53
msgid "    c.  Type"
msgstr "    c.  Уведіть"

#: python-novice-gapminder/setup.md:55
msgid ""
"    ~~~\n"
"    $ bash Anaconda3-\n"
"    ~~~"
msgstr ""
"    ~~~\n"
"    $ bash Anaconda3-\n"
"    ~~~"

# SC/DC Template label
#: python-novice-gapminder/setup.md:58
msgid "    {: .bash}"
msgstr "    {: .bash}"

#: python-novice-gapminder/setup.md:60
msgid ""
"    and press tab.  The name of the file you just downloaded should appear."
msgstr ""
"    та натисніть клавішу tab. Після цього має з'явитися ім'я завантаженого "
"файлу."

#: python-novice-gapminder/setup.md:62
msgid "    d.  Press enter."
msgstr "    d.  Натисніть клавішу enter."

#: python-novice-gapminder/setup.md:64
msgid ""
"    e.  Follow the text-only prompts.  When the license agreement appears (a colon\n"
"        will be present at the bottom of the screen) press the space bar until you see the \n"
"        bottom of the text. Type `yes` and press enter to approve the license. Press \n"
"        enter again to approve the default location for the files. Type `yes` and \n"
"        press enter to prepend Anaconda to your `PATH` (this makes the Anaconda \n"
"        distribution your user's default Python)."
msgstr ""
"    e.  Слідуйте підказкам, які будуть з'являтися у терміналі. Коли з'явиться текст ліцензійної угоди (двокрапка\n"
"        буде зображена у останньому рядку на екрані) натискайте клавішу space доки не побачите\n"
"        останню частину тексту. Уведіть `yes` та натисніть клавішу enter щоб погодитися з угодою. Натисніть\n"
"        enter ще раз щоб згодитися з місцезнаходженням файлів за замовчуванням. Уведіть `yes` та \n"
"        натисніть клавішу enter щоб добавити Anaconda до початку вашої змінної `PATH` (це зробить Anaconda \n"
"        стандартною інсталяцією Python для Вас як користувача)."

# header
#: python-novice-gapminder/setup.md:71
msgid "## Getting the Data"
msgstr "## Отримання даних"

#: python-novice-gapminder/setup.md:73
msgid ""
"The data we will be using is taken from the [gapminder][gapminder] dataset.\n"
"To obtain it, download and unzip the file \n"
"[python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
"In order to follow the presented material, you should launch the JupyterLab \n"
"server in the root directory (see [Starting JupyterLab]({{ page.root }}/01-run-quit/#starting-jupyterlab))."
msgstr ""
"Дані які ми будемо використовувати належать до набору даних  [gapminder][gapminder].\n"
"Щоб їх отримати, завантажте та разпакуйте файл \n"
"[python-novice-gapminder-data.zip]({{page.root}}/files/python-novice-gapminder-data.zip).\n"
"Для того щоб стежити за викладанням, Ви маєте запустити JupyterLab \n"
"сервер у кореневому каталозі (див. [Starting JupyterLab]({{ page.root }}/01-run-quit/#starting-jupyterlab))."

#: python-novice-gapminder/setup.md:80
msgid ""
"[anaconda]: https://www.anaconda.com/\n"
"[anaconda-mac]: https://www.anaconda.com/download/#macos\n"
"[anaconda-linux]: https://www.anaconda.com/download/#linux\n"
"[anaconda-windows]: https://www.anaconda.com/download/#windows\n"
"[gapminder]: https://en.wikipedia.org/wiki/Gapminder_Foundation\n"
"[jupyter]: http://jupyter.org/\n"
"[python]: https://python.org\n"
"[video-mac]: https://www.youtube.com/watch?v=TcSAln46u9U\n"
"[video-windows]: https://www.youtube.com/watch?v=xxQ0mzZ8UvA"
msgstr ""
"[anaconda]: https://www.anaconda.com/\n"
"[anaconda-mac]: https://www.anaconda.com/download/#macos\n"
"[anaconda-linux]: https://www.anaconda.com/download/#linux\n"
"[anaconda-windows]: https://www.anaconda.com/download/#windows\n"
"[gapminder]: https://en.wikipedia.org/wiki/Gapminder_Foundation\n"
"[jupyter]: http://jupyter.org/\n"
"[python]: https://python.org\n"
"[video-mac]: https://www.youtube.com/watch?v=TcSAln46u9U\n"
"[video-windows]: https://www.youtube.com/watch?v=xxQ0mzZ8UvA"

