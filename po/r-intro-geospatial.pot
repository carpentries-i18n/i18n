# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-07-18 17:19:47+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: r-intro-geospatial/CODE_OF_CONDUCT.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Contributor Code of Conduct\"\n"
"---"
msgstr ""

#: r-intro-geospatial/CODE_OF_CONDUCT.md:5
msgid "As contributors and maintainers of this project,\n"
"we pledge to follow the [Carpentry Code of Conduct][coc]."
msgstr ""

#: r-intro-geospatial/CODE_OF_CONDUCT.md:8
msgid "Instances of abusive, harassing, or otherwise unacceptable behavior\n"
"may be reported by following our [reporting guidelines][coc-reporting]."
msgstr ""

#: r-intro-geospatial/CODE_OF_CONDUCT.md:11
#: r-intro-geospatial/_extras/figures.md:68
#: r-intro-geospatial/_extras/guide.md:111
msgid "{% include links.md %}"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:1
# header
msgid "# Contributing"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:3
msgid "[Software Carpentry][swc-site] and [Data Carpentry][dc-site] are open source projects,\n"
"and we welcome contributions of all kinds:\n"
"new lessons,\n"
"fixes to existing material,\n"
"bug reports,\n"
"and reviews of proposed changes are all welcome."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:10
# header
msgid "## Contributor Agreement"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:12
msgid "By contributing,\n"
"you agree that we may redistribute your work under [our license](LICENSE.md).\n"
"In exchange,\n"
"we will address your issues and/or assess your change proposal as promptly as we can,\n"
"and help you become a member of our community.\n"
"Everyone involved in [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"agrees to abide by our [code of conduct](CODE_OF_CONDUCT.md)."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:20
# header
msgid "## How to Contribute"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:22
msgid "The easiest way to get started is to file an issue\n"
"to tell us about a spelling mistake,\n"
"some awkward wording,\n"
"or a factual error.\n"
"This is a good way to introduce yourself\n"
"and to meet some of our community members."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:29
# ordered list
msgid "1.  If you do not have a [GitHub][github] account,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:30
msgid "    you can [send us comments by email][contact].\n"
"    However,\n"
"    we will be able to respond more quickly if you use one of the other methods described below."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:34
# ordered list
msgid "2.  If you have a [GitHub][github] account,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:35
msgid "    or are willing to [create one][github-join],\n"
"    but do not know how to use Git,\n"
"    you can report problems or suggest improvements by [creating an issue][issues].\n"
"    This allows us to assign the item to someone\n"
"    and to respond to it in a threaded discussion."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:41
# ordered list
msgid "3.  If you are comfortable with Git,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:42
msgid "    and would like to add or change material,\n"
"    you can submit a pull request (PR).\n"
"    Instructions for doing this are [included below](#using-github)."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:46
# header
msgid "## Where to Contribute"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:48
# ordered list
msgid "1.  If you wish to change this lesson,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:49
msgid "    please work in <https://github.com/datacarpentry/r-intro-geospatial/>,\n"
"    which can be viewed at <https://datacarpentry.org/r-intro-geospatial/>."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:52
# ordered list
msgid "2.  If you wish to change the example lesson,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:53
msgid "    please work in <https://github.com/carpentries/lesson-example>,\n"
"    which documents the format of our lessons\n"
"    and can be viewed at <https://carpentries.github.io/lesson-example>."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:57
# ordered list
msgid "3.  If you wish to change the template used for workshop websites,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:58
msgid "    please work in <https://github.com/carpentries/workshop-template>.\n"
"    The home page of that repository explains how to set up workshop websites,\n"
"    while the extra pages in <https://carpentries.github.io/workshop-template>\n"
"    provide more background on our design choices."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:63
# ordered list
msgid "4.  If you wish to change CSS style files, tools,"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:64
msgid "    or HTML boilerplate for lessons or workshops stored in `_includes` or `_layouts`,\n"
"    please work in <https://github.com/carpentries/styles>."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:67
# header
msgid "## What to Contribute"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:69
msgid "There are many ways to contribute,\n"
"from writing new exercises and improving existing ones\n"
"to updating or filling in the documentation\n"
"and and submitting [bug reports][issues]\n"
"about things that don't work, aren't clear, or are missing.\n"
"If you are looking for ideas,\n"
"please see [the list of issues for this repository][issues],\n"
"or the issues for [Data Carpentry][dc-issues]\n"
"and [Software Carpentry][swc-issues] projects."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:79
msgid "Comments on issues and reviews of pull requests are just as welcome:\n"
"we are smarter together than we are on our own.\n"
"Reviews from novices and newcomers are particularly valuable:\n"
"it's easy for people who have been using these lessons for a while\n"
"to forget how impenetrable some of this material can be,\n"
"so fresh eyes are always welcome."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:86
# header
msgid "## What *Not* to Contribute"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:88
msgid "Our lessons already contain more material than we can cover in a typical workshop,\n"
"so we are usually *not* looking for more concepts or tools to add to them.\n"
"As a rule,\n"
"if you want to introduce a new idea,\n"
"you must (a) estimate how long it will take to teach\n"
"and (b) explain what you would take out to make room for it.\n"
"The first encourages contributors to be honest about requirements;\n"
"the second, to think hard about priorities."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:97
msgid "We are also not looking for exercises or other material that only run on one platform.\n"
"Our workshops typically contain a mixture of Windows, Mac OS X, and Linux users;\n"
"in order to be usable,\n"
"our lessons must run equally well on all three."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:102
# header
msgid "## Using GitHub"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:104
msgid "If you choose to contribute via GitHub,\n"
"you may want to look at\n"
"[How to Contribute to an Open Source Project on GitHub][how-contribute].\n"
"In brief:"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:109
# ordered list
msgid "1.  The published copy of the lesson is in the `gh-pages` branch of the repository"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:110
msgid "    (so that GitHub will regenerate it automatically).\n"
"    Please create all branches from that,\n"
"    and merge the [master repository][repo]'s `gh-pages` branch into your `gh-pages` branch\n"
"    before starting work.\n"
"    Please do *not* work directly in your `gh-pages` branch,\n"
"    since that will make it difficult for you to work on other contributions."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:117
# ordered list
msgid "2.  We use [GitHub flow][github-flow] to manage changes:"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:118
msgid "    1.  Create a new branch in your desktop copy of this repository for each significant change.\n"
"    2.  Commit the change in that branch.\n"
"    3.  Push that branch to your fork of this repository on GitHub.\n"
"    4.  Submit a pull request from that branch to the [master repository][repo].\n"
"    5.  If you receive feedback,\n"
"        make changes on your desktop and push to your branch on GitHub:\n"
"        the pull request will update automatically."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:126
# ordered list
msgid "3.  This repository contains two repositories for storing the lesson episodes: "
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:127
msgid "`_episodes` and `_episodes_rmd`. To modify episodes, make changes to the\n"
"files in the `_episodes_rmd` directory **NOT** the `_episodes` directory.\n"
"The Markdown files in `_episodes` render automatically from the RMarkdown\n"
"files in the `_episodes_rmd` directory."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:132
msgid "Each lesson has at least two Maintainers who review issues and pull requests\n"
"or encourage others to do so.\n"
"The Maintainers are community volunteers,\n"
"and have final say over what gets merged into the lesson."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:137
# header
msgid "## Other Resources"
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:139
msgid "General discussion of [Software Carpentry][swc-site] and [Data Carpentry][dc-site]\n"
"happens on the [discussion mailing list][discuss-list],\n"
"which everyone is welcome to join.\n"
"You can also [reach us by email][contact]."
msgstr ""

#: r-intro-geospatial/CONTRIBUTING.md:144
msgid "[contact]: mailto:admin@software-carpentry.org\n"
"[dc-issues]: https://github.com/issues?q=user%3Adatacarpentry\n"
"[dc-lessons]: http://datacarpentry.org/lessons/\n"
"[dc-site]: http://datacarpentry.org/\n"
"[discuss-list]: http://lists.software-carpentry.org/listinfo/discuss\n"
"[github]: http://github.com\n"
"[github-flow]: https://guides.github.com/introduction/flow/\n"
"[github-join]: https://github.com/join\n"
"[how-contribute]: https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github\n"
"[issues]: https://github.com/swcarpentry/r-novice-gapminder/issues\n"
"[repo]: https://github.com/swcarpentry/r-novice-gapminder\n"
"[swc-issues]: https://github.com/issues?q=user%3Aswcarpentry\n"
"[swc-lessons]: http://software-carpentry.org/lessons/\n"
"[swc-site]: http://software-carpentry.org/"
msgstr ""

#: r-intro-geospatial/LICENSE.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Licenses\"\n"
"---"
msgstr ""

#: r-intro-geospatial/LICENSE.md:5
# header
msgid "## Instructional Material"
msgstr ""

#: r-intro-geospatial/LICENSE.md:7
msgid "All Software Carpentry, Data Carpentry, and Library Carpentry instructional material is\n"
"made available under the [Creative Commons Attribution\n"
"license][cc-by-human]. The following is a human-readable summary of\n"
"(and not a substitute for) the [full legal text of the CC BY 4.0\n"
"license][cc-by-legal]."
msgstr ""

#: r-intro-geospatial/LICENSE.md:13
msgid "You are free:"
msgstr ""

#: r-intro-geospatial/LICENSE.md:15
# unordered list
msgid "* to **Share**---copy and redistribute the material in any medium or format"
msgstr ""

#: r-intro-geospatial/LICENSE.md:16
# unordered list
msgid "* to **Adapt**---remix, transform, and build upon the material"
msgstr ""

#: r-intro-geospatial/LICENSE.md:18
msgid "for any purpose, even commercially."
msgstr ""

#: r-intro-geospatial/LICENSE.md:20
msgid "The licensor cannot revoke these freedoms as long as you follow the\n"
"license terms."
msgstr ""

#: r-intro-geospatial/LICENSE.md:23
msgid "Under the following terms:"
msgstr ""

#: r-intro-geospatial/LICENSE.md:25
# unordered list
msgid "* **Attribution**---You must give appropriate credit (mentioning that"
msgstr ""

#: r-intro-geospatial/LICENSE.md:26
msgid "  your work is derived from work that is Copyright © Software\n"
"  Carpentry and, where practical, linking to\n"
"  http://software-carpentry.org/), provide a [link to the\n"
"  license][cc-by-human], and indicate if changes were made. You may do\n"
"  so in any reasonable manner, but not in any way that suggests the\n"
"  licensor endorses you or your use."
msgstr ""

#: r-intro-geospatial/LICENSE.md:33
msgid "**No additional restrictions**---You may not apply legal terms or\n"
"technological measures that legally restrict others from doing\n"
"anything the license permits.  With the understanding that:"
msgstr ""

#: r-intro-geospatial/LICENSE.md:37
msgid "Notices:"
msgstr ""

#: r-intro-geospatial/LICENSE.md:39
# unordered list
msgid "* You do not have to comply with the license for elements of the"
msgstr ""

#: r-intro-geospatial/LICENSE.md:40
msgid "  material in the public domain or where your use is permitted by an\n"
"  applicable exception or limitation.\n"
"* No warranties are given. The license may not give you all of the\n"
"  permissions necessary for your intended use. For example, other\n"
"  rights such as publicity, privacy, or moral rights may limit how you\n"
"  use the material."
msgstr ""

#: r-intro-geospatial/LICENSE.md:47
# header
msgid "## Software"
msgstr ""

#: r-intro-geospatial/LICENSE.md:49
msgid "Except where otherwise noted, the example programs and other software\n"
"provided by Software Carpentry and Data Carpentry are made available under the\n"
"[OSI][osi]-approved\n"
"[MIT license][mit-license]."
msgstr ""

#: r-intro-geospatial/LICENSE.md:54
msgid "Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""

#: r-intro-geospatial/LICENSE.md:62
msgid "The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""

#: r-intro-geospatial/LICENSE.md:65
msgid "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
msgstr ""

#: r-intro-geospatial/LICENSE.md:73
# header
msgid "## Trademark"
msgstr ""

#: r-intro-geospatial/LICENSE.md:75
msgid "\"Software Carpentry\" and \"Data Carpentry\" and their respective logos\n"
"are registered trademarks of [Community Initiatives][CI]."
msgstr ""

#: r-intro-geospatial/LICENSE.md:78
msgid "[cc-by-human]: https://creativecommons.org/licenses/by/4.0/\n"
"[cc-by-legal]: https://creativecommons.org/licenses/by/4.0/legalcode\n"
"[mit-license]: https://opensource.org/licenses/mit-license.html\n"
"[ci]: http://communityin.org/\n"
"[osi]: https://opensource.org"
msgstr ""

#: r-intro-geospatial/README.md:1
msgid "[![DOI](https://zenodo.org/badge/128225991.svg)](https://zenodo.org/badge/latestdoi/128225991)\n"
"[![Build Status](https://travis-ci.org/datacarpentry/r-intro-geospatial.svg?branch=gh-pages)](https://travis-ci.org/datacarpentry/r-intro-geospatial)\n"
"[![Create a Slack Account with us](https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg)](https://swc-slack-invite.herokuapp.com/)\n"
" [![Slack Status](https://img.shields.io/badge/Slack_Channel-dc--geospatial-E01563.svg)](https://swcarpentry.slack.com/messages/C9ME7G5RD)"
msgstr ""

#: r-intro-geospatial/README.md:6
# header
msgid "# Intro to R for Geospatial data"
msgstr ""

#: r-intro-geospatial/README.md:8
msgid "<!-- TODO: Update first pararaph of the introduction if they data changes -->"
msgstr ""

#: r-intro-geospatial/README.md:10
msgid "An introduction to R for non-programmers using the [Gapminder][gapminder] data.\n"
"Please see <https://datacarpentry.org/r-intro-geospatial> for a rendered\n"
" version of this material,\n"
"[the lesson template documentation][lesson-example]\n"
"for instructions on formatting, building, and submitting material,\n"
"or run `make` in this directory for a list of helpful commands."
msgstr ""

#: r-intro-geospatial/README.md:17
msgid "The goal of this lesson is to revise best practices for using R in data\n"
" analysis. This lesson is a modification of the [Software Carpentry: Programming with R](https://swcarpentry.github.io/r-novice-gapminder), and is part of the [Data Carpentry Geospatial Curriculum](https://datacarpentry.org/geospatial-workshop/). It introduces the R skills needed in the [Introduction to Raster and Vector Geospatial Data lesson](https://datacarpentry.org/r-raster-vector-geospatial)."
msgstr ""

#: r-intro-geospatial/README.md:20
msgid "R is commonly used in many scientific disciplines for statistical analysis and\n"
" its array of third-party packages. These materials are designed to provide\n"
" attendees with a concise introduction in the fundamentals of R, and to introdue\n"
" best practices for scientific computing: breaking down analyses into modular\n"
" units, task automation, and encapsulation, before getting started with working\n"
" with geospatial data."
msgstr ""

#: r-intro-geospatial/README.md:27
msgid "Note that this workshop focuses on the fundamentals of the programming\n"
"language R, and not on statistical analysis."
msgstr ""

#: r-intro-geospatial/README.md:30
msgid "The lesson contains material than can be taught in about 4 hours. The\n"
"[instructor notes\n"
"page](https://datacarpentry.org/r-intro-geospatial/guide/index.html) has some\n"
"suggested lesson plans suitable for a one or half day workshop."
msgstr ""

#: r-intro-geospatial/README.md:35
# header
msgid "#### Maintainers:"
msgstr ""

#: r-intro-geospatial/README.md:37
# unordered list
msgid "* Leah Wasser"
msgstr ""

#: r-intro-geospatial/README.md:38
# unordered list
msgid "* Joseph Stachelek"
msgstr ""

#: r-intro-geospatial/README.md:39
# unordered list
msgid "* Tyson Swetnam"
msgstr ""

#: r-intro-geospatial/README.md:40
# unordered list
msgid "* Lauren O'Brien"
msgstr ""

#: r-intro-geospatial/README.md:41
# unordered list
msgid "* Janani Selvaraj"
msgstr ""

#: r-intro-geospatial/README.md:42
# unordered list
msgid "* Lachlan Deer"
msgstr ""

#: r-intro-geospatial/README.md:43
# unordered list
msgid "* Chris Prener"
msgstr ""

#: r-intro-geospatial/README.md:44
# unordered list
msgid "* Juan Fung"
msgstr ""

#: r-intro-geospatial/README.md:46
msgid "[gapminder]: http://www.gapminder.org/\n"
"[lesson-example]: https://carpentries.github.io/lesson-example"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 01-rstudio-intro.md in _episodes_rmd/\n"
"title: \"Introduction to R and RStudio\"\n"
"teaching: 20\n"
"exercises: 5\n"
"questions:\n"
"- \"How to find your way around RStudio?\"\n"
"- \"How to interact with R?\"\n"
"- \"How to install packages?\"\n"
"objectives:\n"
"- \"Describe the purpose and use of each pane in the RStudio IDE\"\n"
"- \"Locate buttons and options in the RStudio IDE\"\n"
"- \"Define a variable\"\n"
"- \"Assign data to a variable\"\n"
"- \"Use mathematical and comparison operators\"\n"
"- \"Call functions\"\n"
"- \"Manage packages\"\n"
"keypoints:\n"
"- \"Use RStudio to write and run R programs.\"\n"
"- \"R has the usual arithmetic operators.\"\n"
"- \"Use `<-` to assign values to variables.\"\n"
"- \"Use `install.packages()` to install packages (libraries).\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:30
# header
msgid "## Motivation"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:32
msgid "Science is a multi-step process: once you've designed an experiment and\n"
"collected data, the real fun begins! This lesson will teach you how to start\n"
"this process using R and RStudio. We will begin with raw data, perform\n"
"exploratory analyses, and learn how to plot results graphically. This example\n"
"starts with a dataset from [gapminder.org](https://www.gapminder.org) containing\n"
"population information for many countries through time. Can you read the data\n"
"into R? Can you plot the population for Senegal? Can you calculate the average\n"
"income for countries on the continent of Asia? By the end of these lessons you\n"
"will be able to do things like plot the populations for all of these countries\n"
"in under a minute!"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:43
# header
msgid "## Before Starting The Workshop"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:45
msgid "Please ensure you have the latest version of R and RStudio installed on your machine. This is important, as some packages used in the workshop may not install correctly (or at all) if R is not up to date."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:47
# unordered list
msgid "- [Download and install the latest version of R here](https://www.r-project.org/)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:48
# unordered list
msgid "- [Download and install RStudio here](https://www.rstudio.com/)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:50
# header
msgid "## Introduction to RStudio"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:52
msgid "Throughout this lesson, we're going to teach you some of the fundamentals of\n"
"the R language as well as some best practices for organizing code for\n"
"scientific projects that will make your life easier."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:56
msgid "We'll be using RStudio: a free, open source R integrated development environment\n"
"(IDE). It provides a built in editor, works on all platforms (including on\n"
"servers) and provides many advantages such as integration with version control\n"
"and project management."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:63
msgid "**Basic layout**"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:65
msgid "When you first open RStudio, you will be greeted by three panels:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:67
# unordered list
msgid "  * The interactive R console (entire left)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:68
# unordered list
msgid "  * Environment/History (tabbed in upper right)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:69
# unordered list
msgid "  * Files/Plots/Packages/Help/Viewer (tabbed in lower right)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:71
msgid "![RStudio layout](../fig/01-rstudio.png)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:73
msgid "Once you open files, such as R scripts, an editor panel will also open\n"
"in the top left."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:76
msgid "![RStudio layout with .R file open](../fig/01-rstudio-script.png)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:79
# header
msgid "## Workflow within RStudio"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:81
msgid "There are two main ways one can work within RStudio."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:83
# ordered list
msgid "1. Test and play within the interactive R console then copy code into"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:84
msgid "a .R file to run later.\n"
"   *  This works well when doing small tests and initially starting off.\n"
"   *  It quickly becomes laborious\n"
"2. Start writing in an .R file and use RStudio's shortcut keys for the Run command\n"
"to push the current line, selected lines or modified lines to the\n"
"interactive R console.\n"
"   * This is a great way to start; all your code is saved for later\n"
"   * You will be able to run the file you create from within RStudio\n"
"   or using R's `source()`  function."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:94
# blockquote, which can be cascaded
msgid "> ## Tip: Running segments of your code"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:95
msgid ">\n"
"> RStudio offers you great flexibility in running code from within the editor\n"
"> window. There are buttons, menu choices, and keyboard shortcuts. To run the\n"
"> current line, you can \n"
">\n"
"> 1. click on the `Run` button above the editor panel, or \n"
"> 2. select \"Run Lines\" from the \"Code\" menu, or \n"
"> 3. hit <kbd>Ctrl</kbd>+<kbd>Enter</kbd> in Windows,\n"
"> <kbd>Ctrl</kbd>+<kbd>Return</kbd> in Linux, \n"
"> or <kbd>&#8984;</kbd>+<kbd>Return</kbd> on OS X.\n"
"> (This shortcut can also be seen by hovering\n"
"> the mouse over the button). To run a block of code, select it and then `Run`.\n"
"> If you have modified a line of code within a block of code you have just run,\n"
"> there is no need to reselect the section and `Run`, you can use the next\n"
"> button\n"
"> along, `Re-run the previous region`. This will run the previous code block\n"
"> including the modifications you have made."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:112
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:177
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:383
#: r-intro-geospatial/_episodes/02-project-intro.md:143
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:73
#: r-intro-geospatial/_episodes/05-data-subsetting.md:52
#: r-intro-geospatial/_episodes/05-data-subsetting.md:206
#: r-intro-geospatial/_episodes/05-data-subsetting.md:283
#: r-intro-geospatial/_episodes/05-data-subsetting.md:499
#: r-intro-geospatial/_episodes/05-data-subsetting.md:546
#: r-intro-geospatial/_episodes/05-data-subsetting.md:561
# SC/DC Template label
msgid "{: .callout}"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:114
# header
msgid "## Introduction to R"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:116
msgid "Much of your time in R will be spent in the R interactive\n"
"console. This is where you will run all of your code, and can be a\n"
"useful environment to try out ideas before adding them to an R script\n"
"file. This console in RStudio is the same as the one you would get if\n"
"you typed in `R` in your command-line environment."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:122
msgid "The first thing you will see in the R interactive session is a bunch\n"
"of information, followed by a \">\" and a blinking cursor. In many ways\n"
"this is similar to the shell environment you learned about during the\n"
"shell lessons: it operates on the same idea of a \"Read, evaluate,\n"
"print loop\": you type in commands, R tries to execute them, and then\n"
"returns a result."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:129
# header
msgid "## Using R as a calculator"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:131
msgid "The simplest thing you could do with R is do arithmetic:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:134
# code block
msgid "~~~\n"
"1 + 100\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:137
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:156
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:195
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:212
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:230
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:243
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:261
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:292
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:305
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:318
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:331
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:344
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:357
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:393
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:402
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:421
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:436
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:447
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:542
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:33
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:52
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:66
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:81
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:96
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:118
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:133
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:147
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:161
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:175
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:189
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:203
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:227
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:243
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:265
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:287
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:306
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:321
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:340
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:376
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:391
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:404
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:419
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:437
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:452
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:467
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:529
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:544
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:560
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:574
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:588
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:610
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:624
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:638
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:652
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:669
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:684
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:720
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:734
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:749
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:768
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:782
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:798
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:812
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:831
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:845
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:908
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:932
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:957
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:979
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:996
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1018
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1032
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1046
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1060
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1076
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1091
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1105
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:82
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:103
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:117
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:131
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:148
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:157
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:172
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:186
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:201
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:217
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:240
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:326
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:347
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:369
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:391
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:407
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:421
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:437
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:460
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:470
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:508
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:524
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:539
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:562
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:585
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:612
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:631
#: r-intro-geospatial/_episodes/05-data-subsetting.md:38
#: r-intro-geospatial/_episodes/05-data-subsetting.md:66
#: r-intro-geospatial/_episodes/05-data-subsetting.md:80
#: r-intro-geospatial/_episodes/05-data-subsetting.md:99
#: r-intro-geospatial/_episodes/05-data-subsetting.md:115
#: r-intro-geospatial/_episodes/05-data-subsetting.md:130
#: r-intro-geospatial/_episodes/05-data-subsetting.md:144
#: r-intro-geospatial/_episodes/05-data-subsetting.md:160
#: r-intro-geospatial/_episodes/05-data-subsetting.md:175
#: r-intro-geospatial/_episodes/05-data-subsetting.md:193
#: r-intro-geospatial/_episodes/05-data-subsetting.md:217
#: r-intro-geospatial/_episodes/05-data-subsetting.md:233
#: r-intro-geospatial/_episodes/05-data-subsetting.md:294
#: r-intro-geospatial/_episodes/05-data-subsetting.md:401
#: r-intro-geospatial/_episodes/05-data-subsetting.md:423
#: r-intro-geospatial/_episodes/05-data-subsetting.md:441
#: r-intro-geospatial/_episodes/05-data-subsetting.md:462
#: r-intro-geospatial/_episodes/05-data-subsetting.md:575
#: r-intro-geospatial/_episodes/05-data-subsetting.md:596
#: r-intro-geospatial/_episodes/05-data-subsetting.md:611
#: r-intro-geospatial/_episodes/05-data-subsetting.md:626
#: r-intro-geospatial/_episodes/05-data-subsetting.md:645
#: r-intro-geospatial/_episodes/06-dplyr.md:33
#: r-intro-geospatial/_episodes/06-dplyr.md:47
#: r-intro-geospatial/_episodes/06-dplyr.md:61
#: r-intro-geospatial/_episodes/06-dplyr.md:97
#: r-intro-geospatial/_episodes/06-dplyr.md:105
#: r-intro-geospatial/_episodes/06-dplyr.md:117
#: r-intro-geospatial/_episodes/06-dplyr.md:131
#: r-intro-geospatial/_episodes/06-dplyr.md:152
#: r-intro-geospatial/_episodes/06-dplyr.md:192
#: r-intro-geospatial/_episodes/06-dplyr.md:212
#: r-intro-geospatial/_episodes/06-dplyr.md:260
#: r-intro-geospatial/_episodes/06-dplyr.md:274
#: r-intro-geospatial/_episodes/06-dplyr.md:391
#: r-intro-geospatial/_episodes/06-dplyr.md:411
#: r-intro-geospatial/_episodes/06-dplyr.md:436
#: r-intro-geospatial/_episodes/06-dplyr.md:460
#: r-intro-geospatial/_episodes/06-dplyr.md:495
#: r-intro-geospatial/_episodes/06-dplyr.md:534
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:63
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:73
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:87
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:136
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:147
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:161
#: r-intro-geospatial/_episodes/08-writing-data.md:45
#: r-intro-geospatial/_episodes/08-writing-data.md:96
#: r-intro-geospatial/_episodes/08-writing-data.md:114
#: r-intro-geospatial/_episodes/08-writing-data.md:128
msgid "{: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:141
# code block
msgid "~~~\n"
"[1] 101\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:144
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:161
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:202
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:219
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:250
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:268
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:299
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:312
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:325
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:338
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:351
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:364
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:409
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:428
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:59
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:73
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:88
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:125
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:140
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:154
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:168
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:182
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:196
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:210
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:234
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:272
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:294
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:313
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:328
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:347
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:383
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:411
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:426
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:444
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:459
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:474
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:536
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:551
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:567
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:581
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:601
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:617
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:631
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:645
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:659
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:677
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:691
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:727
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:741
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:756
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:775
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:789
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:805
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:819
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:838
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:852
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:915
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:949
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:971
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:989
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1006
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1025
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1039
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1053
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1067
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1084
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1098
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1115
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:95
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:110
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:124
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:138
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:164
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:179
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:193
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:208
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:224
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:253
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:339
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:359
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:382
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:414
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:428
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:450
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:483
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:515
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:552
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:577
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:599
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:622
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:644
#: r-intro-geospatial/_episodes/05-data-subsetting.md:46
#: r-intro-geospatial/_episodes/05-data-subsetting.md:74
#: r-intro-geospatial/_episodes/05-data-subsetting.md:88
#: r-intro-geospatial/_episodes/05-data-subsetting.md:107
#: r-intro-geospatial/_episodes/05-data-subsetting.md:123
#: r-intro-geospatial/_episodes/05-data-subsetting.md:137
#: r-intro-geospatial/_episodes/05-data-subsetting.md:151
#: r-intro-geospatial/_episodes/05-data-subsetting.md:168
#: r-intro-geospatial/_episodes/05-data-subsetting.md:183
#: r-intro-geospatial/_episodes/05-data-subsetting.md:200
#: r-intro-geospatial/_episodes/05-data-subsetting.md:225
#: r-intro-geospatial/_episodes/05-data-subsetting.md:241
#: r-intro-geospatial/_episodes/05-data-subsetting.md:302
#: r-intro-geospatial/_episodes/05-data-subsetting.md:409
#: r-intro-geospatial/_episodes/05-data-subsetting.md:431
#: r-intro-geospatial/_episodes/05-data-subsetting.md:449
#: r-intro-geospatial/_episodes/05-data-subsetting.md:470
#: r-intro-geospatial/_episodes/05-data-subsetting.md:588
#: r-intro-geospatial/_episodes/05-data-subsetting.md:603
#: r-intro-geospatial/_episodes/05-data-subsetting.md:618
#: r-intro-geospatial/_episodes/05-data-subsetting.md:636
#: r-intro-geospatial/_episodes/05-data-subsetting.md:653
#: r-intro-geospatial/_episodes/06-dplyr.md:40
#: r-intro-geospatial/_episodes/06-dplyr.md:54
#: r-intro-geospatial/_episodes/06-dplyr.md:68
#: r-intro-geospatial/_episodes/06-dplyr.md:205
#: r-intro-geospatial/_episodes/06-dplyr.md:235
#: r-intro-geospatial/_episodes/06-dplyr.md:267
#: r-intro-geospatial/_episodes/06-dplyr.md:288
#: r-intro-geospatial/_episodes/06-dplyr.md:398
#: r-intro-geospatial/_episodes/06-dplyr.md:418
#: r-intro-geospatial/_episodes/06-dplyr.md:448
#: r-intro-geospatial/_episodes/06-dplyr.md:467
#: r-intro-geospatial/_episodes/06-dplyr.md:481
#: r-intro-geospatial/_episodes/06-dplyr.md:502
#: r-intro-geospatial/_episodes/06-dplyr.md:516
#: r-intro-geospatial/_episodes/06-dplyr.md:541
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:94
# SC/DC Template label
msgid "{: .output}"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:146
msgid "And R will print out the answer, with a preceding \"`[1]`\". Don't worry about\n"
"this for now, we'll explain that later. For now think of it as indicating\n"
"output."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:150
msgid "Like bash, if you type in an incomplete command, R will wait for you to\n"
"complete it:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:153
# code block
msgid "~~~\n"
"> 1 +\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:158
# code block
msgid "~~~\n"
"+\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:163
msgid "Any time you hit return and the R session shows a \"`+`\" instead of a \"`>`\", it\n"
"means it's waiting for you to complete the command. If you want to cancel a\n"
"command you can simply hit \"<kbd>Esc</kbd>\" and RStudio will give you back the \"`>`\" prompt."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:167
# blockquote, which can be cascaded
msgid "> ## Tip: Cancelling commands"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:168
msgid ">\n"
"> If you're using R from the command line instead of from within RStudio,\n"
"> you need to use <kbd>Ctrl</kbd>+<kbd>C</kbd> instead of <kbd>Esc</kbd>\n"
"> to cancel the command. This applies to Mac users as well!\n"
">\n"
"> Cancelling a command isn't only useful for killing incomplete commands:\n"
"> you can also use it to tell R to stop running code (for example if it's\n"
"> taking much longer than you expect), or to get rid of the code you're\n"
"> currently writing."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:179
msgid "When using R as a calculator, the order of operations is the same as you\n"
"would have learned back in school."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:182
msgid "From highest to lowest precedence:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:184
# unordered list
msgid " * Parentheses: `(`, `)`"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:185
# unordered list
msgid " * Exponents: `^` or `**`"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:186
# unordered list
msgid " * Divide: `/`"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:187
# unordered list
msgid " * Multiply: `*`"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:188
# unordered list
msgid " * Add: `+`"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:189
# unordered list
msgid " * Subtract: `-`"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:192
# code block
msgid "~~~\n"
"3 + 5 * 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:199
# code block
msgid "~~~\n"
"[1] 13\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:204
msgid "Use parentheses to group operations in order to force the order of\n"
"evaluation if it differs from the default, or to make clear what you\n"
"intend."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:209
# code block
msgid "~~~\n"
"(3 + 5) * 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:216
# code block
msgid "~~~\n"
"[1] 16\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:221
msgid "This can get unwieldy when not needed, but  clarifies your intentions.\n"
"Remember that others may later read your code."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:225
# code block
msgid "~~~\n"
"(3 + (5 * (2 ^ 2))) # hard to read\n"
"3 + 5 * 2 ^ 2       # clear, if you remember the rules\n"
"3 + 5 * (2 ^ 2)     # if you forget some rules, this might help\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:233
msgid "The text after each line of code is called a\n"
"\"comment\". Anything that follows after the hash (or octothorpe) symbol\n"
"`#` is ignored by R when it executes code."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:237
msgid "Really small or large numbers get a scientific notation:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:240
# code block
msgid "~~~\n"
"2/10000\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:247
# code block
msgid "~~~\n"
"[1] 2e-04\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:252
msgid "Which is shorthand for \"multiplied by `10^XX`\". So `2e-4`\n"
"is shorthand for `2 * 10^(-4)`."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:255
msgid "You can write numbers in scientific notation too:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:258
# code block
msgid "~~~\n"
"5e3  # Note the lack of minus here\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:265
# code block
msgid "~~~\n"
"[1] 5000\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:270
msgid "Don't worry about trying to remember every function in R. You can look them up\n"
"on Google, or if you can remember the start of the function's name, use the tab\n"
"completion in RStudio."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:274
msgid "This is one advantage that RStudio has over R on its own, it has auto-completion\n"
"abilities that allow you to more easily look up functions, their arguments, and\n"
"the values that they take."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:278
msgid "Typing a `?` before the name of a command will open the help page for that\n"
"command. As well as providing a detailed description of the command and how it\n"
"works, scrolling to the bottom of the help page will usually show a collection\n"
"of code examples which illustrate command usage. We'll go through an example\n"
"later."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:284
# header
msgid "## Comparing things"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:286
msgid "We can also do comparison in R:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:289
# code block
msgid "~~~\n"
"1 == 1  # equality (note two equals signs, read as \"is equal to\")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:296
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:309
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:322
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:335
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:348
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:361
# code block
msgid "~~~\n"
"[1] TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:302
# code block
msgid "~~~\n"
"1 != 2  # inequality (read as \"is not equal to\")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:315
# code block
msgid "~~~\n"
"1 < 2  # less than\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:328
# code block
msgid "~~~\n"
"1 <= 1  # less than or equal to\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:341
# code block
msgid "~~~\n"
"1 > 0  # greater than\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:354
# code block
msgid "~~~\n"
"1 >= -9 # greater than or equal to\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:366
# blockquote, which can be cascaded
msgid "> ## Tip: Comparing Numbers"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:367
msgid ">\n"
"> A word of warning about comparing numbers: you should\n"
"> never use `==` to compare two numbers unless they are\n"
"> integers (a data type which can specifically represent\n"
"> only whole numbers).\n"
">\n"
"> Computers may only represent decimal numbers with a\n"
"> certain degree of precision, so two numbers which look\n"
"> the same when printed out by R, may actually have\n"
"> different underlying representations and therefore be\n"
"> different by a small margin of error (called Machine\n"
"> numeric tolerance).\n"
">\n"
"> Instead you should use the `all.equal` function.\n"
">\n"
"> Further reading: [http://floating-point-gui.de/](http://floating-point-gui.de/)"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:385
# header
msgid "## Variables and assignment"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:387
msgid "We can store values in variables using the assignment operator `<-`, like this:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:390
# code block
msgid "~~~\n"
"x <- 1/40\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:395
msgid "Notice that assignment does not print a value. Instead, we stored it for later\n"
"in something called a **variable**. `x` now contains the **value** `0.025`:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:399
# code block
msgid "~~~\n"
"x\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:406
# code block
msgid "~~~\n"
"[1] 0.025\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:411
msgid "More precisely, the stored value is a *decimal approximation* of\n"
"this fraction called a [floating point number](http://en.wikipedia.org/wiki/Floating_point)."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:414
msgid "Look for the `Environment` tab in one of the panes of RStudio, and you will see that `x` and its value\n"
"have appeared. Our variable `x` can be used in place of a number in any calculation that expects a number:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:418
# code block
msgid "~~~\n"
"log(x)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:425
# code block
msgid "~~~\n"
"[1] -3.688879\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:430
msgid "Notice also that variables can be reassigned:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:433
# code block
msgid "~~~\n"
"x <- 100\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:438
msgid "`x` used to contain the value 0.025 and and now it has the value 100."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:440
msgid "Assignment values can contain the variable being assigned to:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:443
# code block
msgid "~~~\n"
"x <- x + 1 #notice how RStudio updates its description of x on the top right tab\n"
"y <- x * 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:449
msgid "The right hand side of the assignment can be any valid R expression.\n"
"The right hand side is *fully evaluated* before the assignment occurs."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:452
#: r-intro-geospatial/_episodes/02-project-intro.md:149
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:482
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:255
#: r-intro-geospatial/_episodes/05-data-subsetting.md:304
#: r-intro-geospatial/_episodes/06-dplyr.md:154
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:98
#: r-intro-geospatial/_episodes/08-writing-data.md:49
# blockquote, which can be cascaded
msgid "> ## Challenge 1"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:453
msgid ">\n"
"> What will be the value of each  variable  after each\n"
"> statement in the following program?\n"
">\n"
"> \n"
"> ~~~\n"
"> mass <- 47.5\n"
"> age <- 122\n"
"> mass <- mass * 2.3\n"
"> age <- age - 20\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > mass <- 47.5\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will give a value of 47.5 for the variable mass\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > age <- 122\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will give a value of 122 for the variable age\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > mass <- mass * 2.3\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will multiply the existing value of 47.5 by 2.3 to give a new value of\n"
"> > 109.25 to the variable mass.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > age <- age - 20\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > This will subtract 20 from the existing value of 122 to give a new value\n"
"> > of 102 to the variable age."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:497
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:522
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:595
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:366
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:519
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:708
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:861
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:895
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1258
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:296
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:314
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:680
#: r-intro-geospatial/_episodes/05-data-subsetting.md:389
#: r-intro-geospatial/_episodes/05-data-subsetting.md:539
#: r-intro-geospatial/_episodes/05-data-subsetting.md:755
#: r-intro-geospatial/_episodes/05-data-subsetting.md:777
#: r-intro-geospatial/_episodes/06-dplyr.md:170
#: r-intro-geospatial/_episodes/06-dplyr.md:379
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:121
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:213
#: r-intro-geospatial/_episodes/08-writing-data.md:71
#: r-intro-geospatial/_episodes/08-writing-data.md:147
# SC/DC Template label
msgid "> {: .solution}"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:498
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:523
#: r-intro-geospatial/_episodes/01-rstudio-intro.md:596
#: r-intro-geospatial/_episodes/02-project-intro.md:73
#: r-intro-geospatial/_episodes/02-project-intro.md:164
#: r-intro-geospatial/_episodes/02-project-intro.md:172
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:520
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:709
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:862
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:896
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1259
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:297
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:315
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:681
#: r-intro-geospatial/_episodes/05-data-subsetting.md:390
#: r-intro-geospatial/_episodes/05-data-subsetting.md:540
#: r-intro-geospatial/_episodes/05-data-subsetting.md:756
#: r-intro-geospatial/_episodes/05-data-subsetting.md:778
#: r-intro-geospatial/_episodes/06-dplyr.md:171
#: r-intro-geospatial/_episodes/06-dplyr.md:380
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:122
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:214
#: r-intro-geospatial/_episodes/08-writing-data.md:72
#: r-intro-geospatial/_episodes/08-writing-data.md:148
# SC/DC Template label
msgid "{: .challenge}"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:501
#: r-intro-geospatial/_episodes/02-project-intro.md:166
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:693
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:299
#: r-intro-geospatial/_episodes/05-data-subsetting.md:501
#: r-intro-geospatial/_episodes/06-dplyr.md:295
#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:169
#: r-intro-geospatial/_episodes/08-writing-data.md:130
# blockquote, which can be cascaded
msgid "> ## Challenge 2"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:502
msgid ">\n"
"> Run the code from the previous challenge, and write a command to\n"
"> compare mass to age. Is mass larger than age?\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > One way of answering this question in R is to use the `>` to set up the following:\n"
"> > \n"
"> > ~~~\n"
"> > mass > age\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] TRUE\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > This should yield a boolean value of TRUE since 109.25 is greater than 102."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:526
msgid "Variable names can contain letters, numbers, underscores and periods. They\n"
"cannot start with a number nor contain spaces at all. Different people use\n"
"different conventions for long variable names, these include"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:530
# unordered list
msgid "  * periods.between.words"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:531
# unordered list
msgid "  * underscores\\_between_words"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:532
# unordered list
msgid "  * camelCaseToSeparateWords"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:534
msgid "What you use is up to you, but **be consistent**."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:536
msgid "It is also possible to use the `=` operator for assignment:"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:539
# code block
msgid "~~~\n"
"x = 1/40\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:544
msgid "But this is much less common among R users.  The most important thing is to\n"
"**be consistent** with the operator you use. There are occasionally places\n"
"where it is less confusing to use `<-` than `=`, and it is the most common\n"
"symbol used in the community. So the recommendation is to use `<-`."
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:549
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:864
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:646
#: r-intro-geospatial/_episodes/05-data-subsetting.md:658
# blockquote, which can be cascaded
msgid "> ## Challenge 3"
msgstr ""

#: r-intro-geospatial/_episodes/01-rstudio-intro.md:550
msgid ">\n"
"> Which of the following are valid R variable names?\n"
"> \n"
"> ~~~\n"
"> min_height\n"
"> max.height\n"
"> _age\n"
"> .mass\n"
"> MaxLength\n"
"> min-length\n"
"> 2widths\n"
"> celsius2kelvin\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > The following can be used as R variables:\n"
"> > \n"
"> > ~~~\n"
"> > min_height\n"
"> > max.height\n"
"> > MaxLength\n"
"> > celsius2kelvin\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > The following creates a hidden variable:\n"
"> > \n"
"> > ~~~\n"
"> > .mass\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > We won't be discussing hidden variables in this lesson. We recommend not using a period at the\n"
"> > beginning of variable names unless you intend your variables to be hidden.\n"
"> >\n"
"> > The following will not be able to be used to create a variable\n"
"> > \n"
"> > ~~~\n"
"> > _age\n"
"> > min-length\n"
"> > 2widths\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 02-project-intro.md in _episodes_rmd/\n"
"title: \"Project Management With RStudio\"\n"
"teaching: 10\n"
"exercises: 5\n"
"questions:\n"
"- \"How can I manage my projects in R?\"\n"
"objectives:\n"
"- Create self-contained projects in RStudio\n"
"keypoints:\n"
"- \"Use RStudio to create and manage projects with consistent layout.\"\n"
"- \"Treat raw data as read-only.\"\n"
"- \"Treat generated output as disposable.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:20
# header
msgid "## Introduction"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:22
msgid "The scientific process is naturally incremental, and many projects start life as\n"
"random notes, some code, then a manuscript, and eventually everything is a bit\n"
"mixed together. Organising a project involving spatial data is no different from\n"
"any other data analysis project, although you may require more disk space than\n"
"usual."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:28
msgid "<div class=\"text-center\">\n"
"<blockquote class=\"twitter-tweet\"><p>Managing your projects in a reproducible fashion doesn't just make your science reproducible, it makes your life easier.</p>— Vince Buffalo (@vsbuffalo) <a href=\"https://twitter.com/vsbuffalo/status/323638476153167872\">April 15, 2013</a></blockquote>\n"
"<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n"
"</div>"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:33
msgid "Most people tend to organize their projects like this:"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:35
msgid "![](../fig/bad_layout.png)"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:37
msgid "There are many reasons why we should *ALWAYS* avoid this:"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:39
# ordered list
msgid "1. It is really hard to tell which version of your data is"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:40
msgid "the original and which is the modified;\n"
"2. It gets really messy because it mixes files with various\n"
"extensions together;\n"
"3. It probably takes you a lot of time to actually find\n"
"things, and relate the correct figures to the exact code\n"
"that has been used to generate it;"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:47
msgid "A good project layout will ultimately make your life easier:"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:49
# unordered list
msgid "* It will help ensure the integrity of your data;"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:50
# unordered list
msgid "* It makes it simpler to share your code with someone else"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:51
msgid "(a lab-mate, collaborator, or supervisor);\n"
"* It allows you to easily upload your code with your manuscript submission;\n"
"* It makes it easier to pick the project back up after a break."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:55
# header
msgid "## A possible solution"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:57
msgid "Fortunately, there are tools and packages which can help you manage your work effectively."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:59
msgid "One of the most powerful and useful aspects of RStudio is its project management\n"
"functionality. We'll be using this today to create a self-contained, reproducible\n"
"project."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:64
# blockquote, which can be cascaded
msgid "> ## Challenge: Creating a self-contained project"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:65
msgid ">\n"
"> We're going to create a new project in RStudio:\n"
">\n"
"> 1. Click the \"File\" menu button, then \"New Project\".\n"
"> 2. Click \"New Directory\".\n"
"> 3. Click \"Empty Project\".\n"
"> 4. Type in \"r-geospatial\" as the name of the directory.\n"
"> 5. Click the \"Create Project\" button."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:75
msgid "A key advantage of an RStudio Project is that whenever we open this project in\n"
"  subsequent RStudio sessions our working directory will *always* be set to the\n"
"  folder `r-geospatial`.\n"
"Let's check our working directory by entering the following into the R console:"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:80
# code block
msgid "```r\n"
"getwd()\n"
"```"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:84
msgid "R should return `your/path/r-geospatial` as the working directory."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:86
# header
msgid "## Best practices for project organization"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:88
msgid "Although there is no \"best\" way to lay out a project, there are some general\n"
"principles to adhere to that will make project management easier:"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:91
# header
msgid "### Treat data as read only"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:93
msgid "This is probably the most important goal of setting up a project. Data is\n"
"typically time consuming and/or expensive to collect. Working with them\n"
"interactively (e.g., in Excel) where they can be modified means you are never\n"
"sure of where the data came from, or how it has been modified since collection.\n"
"It is therefore a good idea to treat your data as \"read-only\"."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:99
# header
msgid "### Data Cleaning"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:101
msgid "In many cases your data will be \"dirty\": it will need significant preprocessing\n"
"to get into a format R (or any other programming language) will find useful. This\n"
"task is sometimes called \"data munging\". I find it useful to store these scripts\n"
"in a separate folder, and create a second \"read-only\" data folder to hold the\n"
"\"cleaned\" data sets."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:107
# header
msgid "### Treat generated output as disposable"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:109
msgid "Anything generated by your scripts should be treated as disposable: it should\n"
"all be able to be regenerated from your scripts."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:112
msgid "There are lots of different ways to manage this output. I find it useful to\n"
"have an output folder with different sub-directories for each separate\n"
"analysis. This makes it easier later, as many of my analyses are exploratory\n"
"and don't end up being used in the final project, and some of the analyses\n"
"get shared between projects."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:118
# header
msgid "### Keep related data together"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:120
msgid "Some GIS file formats are really 3-6 files that need to be kept together and have the same name, \n"
"e.g. shapefiles. It may be tempting to store those components separately, \n"
"but your spatial data will be unusable if you do that."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:124
# header
msgid "### Keep a consistent naming scheme"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:125
msgid "It is generally best to avoid renaming downloaded spatial data, \n"
"so that a clear connection is maintained with the point of truth. \n"
"You may otherwise find yourself wondering whether `file_A` really is just a copy of `Official_file_on_website` or not."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:129
msgid "For datasets you generate, it's worth taking the time to come up with a naming convention that works for your project, \n"
"and sticking to it. File names don't have to be long, they just have to be long enough that you can tell what the file\n"
"is about. Date generated, topic, and whether a product is intermediate or final are good bits of information to keep \n"
"in a file name. For more tips on naming files, check out [the slides from Jenny Bryan's talk \"Naming things\" at the 2015 Reproducible Science Workshop](https://speakerdeck.com/jennybc/how-to-name-files)."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:134
# blockquote, which can be cascaded
msgid "> ## Tip: Good Enough Practices for Scientific Computing"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:135
msgid ">\n"
"> [Good Enough Practices for Scientific Computing](https://github.com/swcarpentry/good-enough-practices-in-scientific-computing/blob/gh-pages/good-enough-practices-for-scientific-computing.pdf) gives the following recommendations for project organization:\n"
">\n"
"> 1. Put each project in its own directory, which is named after the project.\n"
"> 2. Put text documents associated with the project in the `doc` directory.\n"
"> 3. Put raw data and metadata in the `data` directory, and files generated during cleanup and analysis in a `results` directory.\n"
"> 4. Put source for the project's scripts and programs in the `src` directory, and programs brought in from elsewhere or compiled locally in the `bin` directory.\n"
"> 5. Name all files to reflect their content or function."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:145
# header
msgid "### Save the data in the data directory"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:147
msgid "Now we have a good directory structure we will now place/save our data files in the `data/` directory."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:150
# blockquote, which can be cascaded
msgid "> 1\\. Download each of the data files listed below (CTRL + S, right mouse click -> \"Save as\", or File -> \"Save page as\")"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:151
#: r-intro-geospatial/_episodes/02-project-intro.md:155
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:483
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:487
# blockquote, which can be cascaded
msgid "> "
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:152
# blockquote, which can be cascaded
msgid "> - [nordic country data](https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/nordic-data.csv)"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:153
# blockquote, which can be cascaded
msgid "> - [nordic country data (version 2)](https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/nordic-data-2.csv)"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:154
# blockquote, which can be cascaded
msgid "> - [gapminder data](https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv)"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:156
# blockquote, which can be cascaded
msgid "> 2\\. Make sure the files have the following names: "
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:157
# blockquote, which can be cascaded
msgid "> - `nordic-data.csv`"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:158
# blockquote, which can be cascaded
msgid "> - `nordic-data-2.csv`"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:159
# blockquote, which can be cascaded
msgid "> - `gapminder_data.csv`"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:160
msgid ">\n"
"> 3\\. Save the files in the `data/` folder within your project.\n"
">\n"
"> We will load and inspect these data later."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:167
# blockquote, which can be cascaded
msgid "> We also want to move the data that we downloaded from the [data page](http://datacarpentry.org/geospatial-workshop/data/) into a subdirectory"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:168
# blockquote, which can be cascaded
msgid "> inside `r-geospatial`. If you haven't already downloaded the data, you can do so by clicking "
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:169
# blockquote, which can be cascaded
msgid "> [this download link](https://ndownloader.figshare.com/articles/2009586/versions/10). "
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:170
# blockquote, which can be cascaded
msgid "> 1. Move the downloaded zip file to the `data` directory."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:171
# blockquote, which can be cascaded
msgid "> 2. Once the data have been moved, unzip all files."
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:174
msgid "Once you have completed moving the data across to the new folder,\n"
" your data directory should look as follows:"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:177
# code block
msgid " ```\n"
" data/\n"
"    gapminder_data.csv\n"
"    NEON-DS-Airborne-Remote-Sensing/\n"
"    NEON-DS-Landsat-NDVI/\n"
"    NEON-DS-Met-Time-Series/\n"
"    NEON-DS-Site-Layout-Files/\n"
"    NEON-DS-Airborne-Remote-Sensing.zip\n"
"    NEON-DS-Landsat-NDVI.zip\n"
"    NEON-DS-Met-Time-Series.zip\n"
"    NEON-DS-Site-Layout-Files.zip\n"
"    nordic-data.csv\n"
"    nordic-data-2.csv\n"
" ```"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:193
# header
msgid "### Stage your scripts"
msgstr ""

#: r-intro-geospatial/_episodes/02-project-intro.md:194
msgid "Creating separate R scripts or Rmarkdown documents for different stages of a project will maximise efficiency. \n"
"For instance, separating data download commands into their own file means that you won't re-download data unnecessarily."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 03-data-structures-part1.md in _episodes_rmd/\n"
"title: \"Data Structures\"\n"
"teaching: 40\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I read data in R?\"\n"
"- \"What are the basic data types in R?\"\n"
"- \"How do I represent categorical information in R?\"\n"
"objectives:\n"
"- \"To be aware of the different types of data.\"\n"
"- \"To begin exploring data frames, and understand how they are related to vectors, factors and lists.\"\n"
"- \"To be able to ask questions from R about the type, class, and structure of an object.\"\n"
"keypoints:\n"
"- \"Use `read.csv` to read tabular data in R.\"\n"
"- \"The basic data types in R are double, integer, complex, logical, and character.\"\n"
"- \"Use factors to represent categories in R.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:24
msgid "One of R's most powerful features is its ability to deal with tabular data -\n"
"such as you may already have in a spreadsheet or a CSV file. Let's start by\n"
"downloading and reading in a file `nordic-data.csv`. We will\n"
"save this data as an object named `nordic`:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:30
# code block
msgid "~~~\n"
"nordic <- read.csv(\"data/nordic-data.csv\")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:35
msgid "The `read.table` function is used for reading in tabular data stored in a text\n"
"file where the columns of data are separated by punctuation characters such as\n"
"CSV files (csv = comma-separated values). Tabs and commas are the most common\n"
"punctuation characters used to separate or delimit data points in csv files.\n"
"For convenience R provides 2 other versions of `read.table`. These are: `read.csv`\n"
"for files where the data are separated with commas and `read.delim` for files\n"
"where the data are separated with tabs. Of these three functions `read.csv` is\n"
"the most commonly used.  If needed it is possible to override the default\n"
"delimiting punctuation marks for both `read.csv` and `read.delim`."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:45
msgid "We can begin exploring our dataset right away, pulling out columns by specifying\n"
"them using the `$` operator:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:49
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1015
# code block
msgid "~~~\n"
"nordic$country\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:56
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1022
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1036
# code block
msgid "~~~\n"
"[1] \"Denmark\" \"Sweden\"  \"Norway\" \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:63
# code block
msgid "~~~\n"
"nordic$lifeExp\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:70
# code block
msgid "~~~\n"
"[1] 77.2 80.0 79.0\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:75
msgid "We can do other operations on the columns. For example, if we discovered that the life expectancy is two years higher: "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:78
# code block
msgid "~~~\n"
"nordic$lifeExp + 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:85
# code block
msgid "~~~\n"
"[1] 79.2 82.0 81.0\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:90
msgid "But what about:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:93
# code block
msgid "~~~\n"
"nordic$lifeExp + nordic$country\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:100
# code block
msgid "~~~\n"
"Error in nordic$lifeExp + nordic$country: non-numeric argument to binary operator\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:103
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:250
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:398
# SC/DC Template label
msgid "{: .error}"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:105
msgid "Understanding what happened here is key to successfully analyzing data in R."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:107
# header
msgid "## Data Types"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:109
msgid "If you guessed that the last command will return an error because `77.2` plus\n"
"`\"Denmark\"` is nonsense, you're right - and you already have some intuition for an\n"
"important concept in programming called *data classes*. We can ask what class of\n"
"data something is:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:115
# code block
msgid "~~~\n"
"class(nordic$lifeExp)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:122
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:137
# code block
msgid "~~~\n"
"[1] \"numeric\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:127
msgid "There are 6 main types: `numeric`, `integer`, `complex`, `logical`, `character`, and `factor`."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:130
# code block
msgid "~~~\n"
"class(3.14)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:144
# code block
msgid "~~~\n"
"class(1L) # The L suffix forces the number to be an integer, since by default R uses float numbers\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:151
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:656
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:107
# code block
msgid "~~~\n"
"[1] \"integer\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:158
# code block
msgid "~~~\n"
"class(1+1i)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:165
# code block
msgid "~~~\n"
"[1] \"complex\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:172
# code block
msgid "~~~\n"
"class(TRUE)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:179
# code block
msgid "~~~\n"
"[1] \"logical\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:186
# code block
msgid "~~~\n"
"class('banana')\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:193
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:231
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:835
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1050
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:121
# code block
msgid "~~~\n"
"[1] \"character\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:200
# code block
msgid "~~~\n"
"class(factor('banana'))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:207
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:802
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:849
# code block
msgid "~~~\n"
"[1] \"factor\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:212
msgid "No matter how\n"
"complicated our analyses become, all data in R is interpreted a specific \n"
"data class. This strictness has some really important consequences."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:216
msgid "A user has added new details of age expectancy. This information is in the file\n"
"`data/nordic-data-2.csv`."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:219
msgid "Load the new nordic data as `nordic_2`, and check what class of data we find in the\n"
"`lifeExp` column:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:223
# code block
msgid "~~~\n"
"nordic_2 <- read.csv(\"data/nordic-data-2.csv\")\n"
"class(nordic_2$lifeExp)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:236
msgid "Oh no, our life expectancy lifeExp aren't the numeric type anymore! If we try to do the same math\n"
"we did on them before, we run into trouble:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:240
# code block
msgid "~~~\n"
"nordic_2$lifeExp + 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:247
# code block
msgid "~~~\n"
"Error in nordic_2$lifeExp + 2: non-numeric argument to binary operator\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:252
msgid "What happened? When R reads a csv file into one of these tables, it insists that\n"
"everything in a column be the same class; if it can't understand\n"
"*everything* in the column as numeric, then *nothing* in the column gets to be numeric. The table that R loaded our nordic data into is something called a\n"
"dataframe, and it is our first example of something called a *data\n"
"structure* - that is, a structure which R knows how to build out of the basic\n"
"data types."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:259
msgid "We can see that it is a dataframe by calling the `class()` function on it:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:262
# code block
msgid "~~~\n"
"class(nordic)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:269
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1095
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:161
# code block
msgid "~~~\n"
"[1] \"data.frame\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:274
msgid "In order to successfully use our data in R, we need to understand what the basic\n"
"data structures are, and how they behave. "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:277
# header
msgid "## Vectors and Type Coercion"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:279
msgid "To better understand this behavior, let's meet another of the data structures:\n"
"the vector."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:283
# code block
msgid "~~~\n"
"my_vector <- vector(length = 3)\n"
"my_vector\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:291
# code block
msgid "~~~\n"
"[1] FALSE FALSE FALSE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:296
msgid "A vector in R is essentially an ordered list of things, with the special\n"
"condition that everything in the vector must be the same basic data type. If\n"
"you don't choose the data type, it'll default to `logical`; or, you can declare\n"
"an empty vector of whatever type you like."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:302
# code block
msgid "~~~\n"
"another_vector <- vector(mode = 'character', length = 3)\n"
"another_vector\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:310
# code block
msgid "~~~\n"
"[1] \"\" \"\" \"\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:315
msgid "You can check if something is a vector:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:318
# code block
msgid "~~~\n"
"str(another_vector)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:325
# code block
msgid "~~~\n"
" chr [1:3] \"\" \"\" \"\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:330
msgid "The somewhat cryptic output from this command indicates the basic data type\n"
"found in this vector - in this case `chr`, character; an indication of the\n"
"number of things in the vector - actually, the indexes of the vector, in this\n"
"case `[1:3]`; and a few examples of what's actually in the vector - in this case\n"
"empty character strings. If we similarly do"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:337
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:717
# code block
msgid "~~~\n"
"str(nordic$lifeExp)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:344
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:724
# code block
msgid "~~~\n"
" num [1:3] 77.2 80 79\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:349
msgid "we see that `nordic$lifeExp` is a vector, too - the columns of data we load into R\n"
"data frames are all vectors, and that's the root of why R forces everything in\n"
"a column to be the same basic data type."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:353
# blockquote, which can be cascaded
msgid "> ## Discussion 1"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:354
msgid ">\n"
"> Why is R so opinionated about what we put in our columns of data?\n"
"> How does this help us?\n"
">\n"
"> > ## Discussion 1\n"
"> >\n"
"> > By keeping everything in a column the same, we allow ourselves to make simple\n"
"> > assumptions about our data; if you can interpret one entry in the column as a\n"
"> > number, then you can interpret *all* of them as numbers, so we don't have to\n"
"> > check every time. This consistency is what people mean when they talk about\n"
"> > *clean data*; in the long run, strict consistency goes a long way to making\n"
"> > our lives easier in R."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:367
# SC/DC Template label
msgid "{: .discussion}"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:369
msgid "You can also make vectors with explicit contents with the combine function:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:372
# code block
msgid "~~~\n"
"combine_vector <- c(2, 6, 3)\n"
"combine_vector\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:380
# code block
msgid "~~~\n"
"[1] 2 6 3\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:385
msgid "Given what we've learned so far, what do you think the following will produce?"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:388
# code block
msgid "~~~\n"
"quiz_vector <- c(2, 6, '3')\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:393
msgid "This is something called *type coercion*, and it is the source of many surprises\n"
"and the reason why we need to be aware of the basic data types and how R will\n"
"interpret them. When R encounters a mix of types (here numeric and character) to\n"
"be combined into a single vector, it will force them all to be the same\n"
"type. Consider:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:400
# code block
msgid "~~~\n"
"coercion_vector <- c('a', TRUE)\n"
"coercion_vector\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:408
# code block
msgid "~~~\n"
"[1] \"a\"    \"TRUE\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:415
# code block
msgid "~~~\n"
"another_coercion_vector <- c(0, TRUE)\n"
"another_coercion_vector\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:423
# code block
msgid "~~~\n"
"[1] 0 1\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:428
msgid "The coercion rules go: `logical` -> `integer` -> `numeric` -> `complex` ->\n"
"`character`, where -> can be read as *are transformed into*. You can try to\n"
"force coercion against this flow using the `as.` functions:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:433
# code block
msgid "~~~\n"
"character_vector_example <- c('0', '2', '4')\n"
"character_vector_example\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:441
# code block
msgid "~~~\n"
"[1] \"0\" \"2\" \"4\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:448
# code block
msgid "~~~\n"
"character_coerced_to_numeric <- as.numeric(character_vector_example)\n"
"character_coerced_to_numeric\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:456
# code block
msgid "~~~\n"
"[1] 0 2 4\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:463
# code block
msgid "~~~\n"
"numeric_coerced_to_logical <- as.logical(character_coerced_to_numeric)\n"
"numeric_coerced_to_logical\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:471
# code block
msgid "~~~\n"
"[1] FALSE  TRUE  TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:476
msgid "As you can see, some surprising things can happen when R forces one basic data\n"
"type into another! Nitty-gritty of type coercion aside, the point is: if your\n"
"data doesn't look like what you thought it was going to look like, type coercion\n"
"may well be to blame; make sure everything is the same type in your vectors and\n"
"your columns of data frames, or you will get nasty surprises!"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:484
# blockquote, which can be cascaded
msgid "> Given what you now know about type conversion, look at the class of"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:485
# blockquote, which can be cascaded
msgid "> data in `nordic_2$lifeExp` and compare it with `nordic$lifeExp`. Why are"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:486
# blockquote, which can be cascaded
msgid "> these columns different classes? "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:488
# blockquote, which can be cascaded
msgid "> > ## Solution"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:489
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:494
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:495
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:496
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:501
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:502
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:503
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:508
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:509
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:510
# blockquote, which can be cascaded
msgid "> > "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:490
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:492
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:497
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:499
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:504
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:506
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:511
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:513
# blockquote, which can be cascaded
msgid "> > ~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:491
# blockquote, which can be cascaded
msgid "> > str(nordic_2$lifeExp)"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:493
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:507
# blockquote, which can be cascaded
msgid "> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:498
# blockquote, which can be cascaded
msgid "> >  chr [1:3] \"77.2\" \"80\" \"79.0 or 83\""
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:500
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:514
# blockquote, which can be cascaded
msgid "> > {: .output}"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:505
# blockquote, which can be cascaded
msgid "> > str(nordic$lifeExp)"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:512
# blockquote, which can be cascaded
msgid "> >  num [1:3] 77.2 80 79"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:515
# blockquote, which can be cascaded
msgid "> > The data in `nordic_2$lifeExp` is stored as factors rather than "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:516
# blockquote, which can be cascaded
msgid "> > numeric. This is because of the \"or\" character string in the third "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:517
# blockquote, which can be cascaded
msgid "> > data point. \"Factor\" is R's special term for categorical data. "
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:518
# blockquote, which can be cascaded
msgid "> > We will be working more with factor data later in this workshop."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:522
msgid "The combine function, `c()`, will also append things to an existing vector:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:525
# code block
msgid "~~~\n"
"ab_vector <- c('a', 'b')\n"
"ab_vector\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:533
# code block
msgid "~~~\n"
"[1] \"a\" \"b\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:540
# code block
msgid "~~~\n"
"combine_example <- c(ab_vector, 'DC')\n"
"combine_example\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:548
# code block
msgid "~~~\n"
"[1] \"a\"  \"b\"  \"DC\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:553
msgid "You can also make series of numbers:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:556
# code block
msgid "~~~\n"
"my_series <- 1:10\n"
"my_series\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:564
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:578
# code block
msgid "~~~\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:571
# code block
msgid "~~~\n"
"seq(10)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:585
# code block
msgid "~~~\n"
"seq(1,10, by = 0.1)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:592
# code block
msgid "~~~\n"
" [1]  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3  2.4\n"
"[16]  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9\n"
"[31]  4.0  4.1  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.0  5.1  5.2  5.3  5.4\n"
"[46]  5.5  5.6  5.7  5.8  5.9  6.0  6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9\n"
"[61]  7.0  7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9  8.0  8.1  8.2  8.3  8.4\n"
"[76]  8.5  8.6  8.7  8.8  8.9  9.0  9.1  9.2  9.3  9.4  9.5  9.6  9.7  9.8  9.9\n"
"[91] 10.0\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:603
msgid "We can ask a few questions about vectors:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:606
# code block
msgid "~~~\n"
"sequence_example <- seq(10)\n"
"head(sequence_example,n = 2)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:614
# code block
msgid "~~~\n"
"[1] 1 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:621
# code block
msgid "~~~\n"
"tail(sequence_example, n = 4)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:628
# code block
msgid "~~~\n"
"[1]  7  8  9 10\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:635
# code block
msgid "~~~\n"
"length(sequence_example)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:642
# code block
msgid "~~~\n"
"[1] 10\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:649
# code block
msgid "~~~\n"
"class(sequence_example)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:661
msgid "Finally, you can give names to elements in your vector:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:664
# code block
msgid "~~~\n"
"my_example <- 5:8\n"
"names(my_example) <- c(\"a\", \"b\", \"c\", \"d\")\n"
"my_example\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:673
# code block
msgid "~~~\n"
"a b c d \n"
"5 6 7 8 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:681
# code block
msgid "~~~\n"
"names(my_example)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:688
# code block
msgid "~~~\n"
"[1] \"a\" \"b\" \"c\" \"d\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:694
msgid ">\n"
"> Start by making a vector with the numbers 1 through 26.\n"
"> Multiply the vector by 2, and give the resulting vector\n"
"> names A through Z (hint: there is a built in vector called `LETTERS`)\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x <- 1:26\n"
"> > x <- x * 2\n"
"> > names(x) <- LETTERS\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:712
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:487
# header
msgid "## Factors"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:714
msgid "We said that columns in data frames were vectors:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:731
# code block
msgid "~~~\n"
"str(nordic$year)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:738
# code block
msgid "~~~\n"
" int [1:3] 2002 2002 2002\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:743
msgid "These make sense. But what about"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:746
# code block
msgid "~~~\n"
"str(nordic$country)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:753
#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1064
# code block
msgid "~~~\n"
" chr [1:3] \"Denmark\" \"Sweden\" \"Norway\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:758
msgid "Another important data structure is called a factor. Factors look like character\n"
"data, but are used to represent categorical information. For example, let's make\n"
"a vector of strings labeling nordic countries for all the countries in our\n"
"study:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:764
# code block
msgid "~~~\n"
"nordic_countries <- c('Norway', 'Finland', 'Denmark', 'Iceland', 'Sweden')\n"
"nordic_countries\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:772
# code block
msgid "~~~\n"
"[1] \"Norway\"  \"Finland\" \"Denmark\" \"Iceland\" \"Sweden\" \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:779
# code block
msgid "~~~\n"
"str(nordic_countries)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:786
# code block
msgid "~~~\n"
" chr [1:5] \"Norway\" \"Finland\" \"Denmark\" \"Iceland\" \"Sweden\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:791
msgid "We can turn a vector into a factor like so:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:794
# code block
msgid "~~~\n"
"categories <- factor(nordic_countries)\n"
"class(categories)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:809
# code block
msgid "~~~\n"
"str(categories)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:816
# code block
msgid "~~~\n"
" Factor w/ 5 levels \"Denmark\",\"Finland\",..: 4 2 1 3 5\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:821
msgid "Now R has noticed that there are 5 possible categories in our data - but it\n"
"also did something surprising; instead of printing out the strings we gave it,\n"
"we got a bunch of numbers instead. R has replaced our human-readable categories\n"
"with numbered indices under the hood, this is necessary as many statistical\n"
"calculations utilise such numerical representations for categorical data:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:828
# code block
msgid "~~~\n"
"class(nordic_countries)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:842
# code block
msgid "~~~\n"
"class(categories)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:854
# blockquote, which can be cascaded
msgid "> ## Challenge"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:855
msgid ">\n"
"> Can you guess why these numbers are used to represent these countries?\n"
">\n"
">> ## Solution\n"
">> \n"
">> They are sorted in alphabetical order"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:865
msgid ">\n"
"> Is there a factor in our `nordic` data frame? what is its name? Try using\n"
"> `?read.csv` to figure out how to keep text columns as character vectors\n"
"> instead of factors; then write a command or two to show that the factor in\n"
"> `nordic` is actually a character vector when loaded in this way.\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> >\n"
"> > One solution is use the argument `stringAsFactors`:\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic <- read.csv(file = \"data/nordic-data.csv\", stringsAsFactors = FALSE)\n"
"> > str(nordic$country)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > Another solution is use the argument `colClasses`\n"
"> > that allow finer control.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic <- read.csv(file=\"data/nordic-data.csv\", colClasses=c(NA, NA, \"character\"))\n"
"> > str(nordic$country)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> >\n"
"> > Note: new students find the help files difficult to understand; make sure to let them know\n"
"> > that this is typical, and encourage them to take their best guess based on semantic meaning,\n"
"> > even if they aren't sure."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:898
msgid "When doing statistical modelling, it's important to know what the baseline\n"
"levels are. This is assumed to be the first factor, but by default factors are\n"
"labeled in alphabetical order. You can change this by specifying the levels:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:903
# code block
msgid "~~~\n"
"mydata <- c(\"case\", \"control\", \"control\", \"case\")\n"
"factor_ordering_example <- factor(mydata, levels = c(\"control\", \"case\"))\n"
"str(factor_ordering_example)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:912
# code block
msgid "~~~\n"
" Factor w/ 2 levels \"control\",\"case\": 2 1 1 2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:917
msgid "In this case, we've explicitly told R that \"control\" should represented by 1,\n"
"and \"case\" by 2. This designation can be very important for interpreting the\n"
"results of statistical models!"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:921
# header
msgid "## Lists"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:923
msgid "Another data structure you'll want in your bag of tricks is the `list`. A list\n"
"is simpler in some ways than the other types, because you can put anything you\n"
"want in it:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:928
# code block
msgid "~~~\n"
"list_example <- list(1, \"a\", TRUE, c(2, 6, 7))\n"
"list_example\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:936
# code block
msgid "~~~\n"
"[[1]]\n"
"[1] 1\n"
"\n"
"[[2]]\n"
"[1] \"a\"\n"
"\n"
"[[3]]\n"
"[1] TRUE\n"
"\n"
"[[4]]\n"
"[1] 2 6 7\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:953
# code block
msgid "~~~\n"
"another_list <- list(title = \"Numbers\", numbers = 1:10, data = TRUE )\n"
"another_list\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:961
# code block
msgid "~~~\n"
"$title\n"
"[1] \"Numbers\"\n"
"\n"
"$numbers\n"
" [1]  1  2  3  4  5  6  7  8  9 10\n"
"\n"
"$data\n"
"[1] TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:973
msgid "We can now understand something a bit surprising in our data frame; what happens if we compare `str(nordic)` and `str(another_list)`:"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:976
# code block
msgid "~~~\n"
"str(nordic)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:983
# code block
msgid "~~~\n"
"'data.frame':	3 obs. of  3 variables:\n"
" $ country: chr  \"Denmark\" \"Sweden\" \"Norway\"\n"
" $ year   : int  2002 2002 2002\n"
" $ lifeExp: num  77.2 80 79\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:993
# code block
msgid "~~~\n"
"str(another_list)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1000
# code block
msgid "~~~\n"
"List of 3\n"
" $ title  : chr \"Numbers\"\n"
" $ numbers: int [1:10] 1 2 3 4 5 6 7 8 9 10\n"
" $ data   : logi TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1008
msgid "We see that the output for these two objects look very similar. It is because\n"
"data frames are lists 'under the hood'. Data frames are a special case of lists where each element (the columns of the data frame) have the same lengths."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1011
msgid "In our `nordic` example, we have an integer, a double and a logical variable. As\n"
"we have seen already, each column of data frame is a vector."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1029
# code block
msgid "~~~\n"
"nordic[, 1]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1043
# code block
msgid "~~~\n"
"class(nordic[, 1])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1057
# code block
msgid "~~~\n"
"str(nordic[, 1])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1069
msgid "Each row is an *observation* of different variables, itself a data frame, and\n"
"thus can be composed of elements of different types."
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1073
# code block
msgid "~~~\n"
"nordic[1, ]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1080
# code block
msgid "~~~\n"
"  country year lifeExp\n"
"1 Denmark 2002    77.2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1088
# code block
msgid "~~~\n"
"class(nordic[1, ])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1102
# code block
msgid "~~~\n"
"str(nordic[1, ])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1109
# code block
msgid "~~~\n"
"'data.frame':	1 obs. of  3 variables:\n"
" $ country: chr \"Denmark\"\n"
" $ year   : int 2002\n"
" $ lifeExp: num 77.2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1117
#: r-intro-geospatial/_episodes/05-data-subsetting.md:758
# blockquote, which can be cascaded
msgid "> ## Challenge 4"
msgstr ""

#: r-intro-geospatial/_episodes/03-data-structures-part1.md:1118
msgid ">\n"
"> There are several subtly different ways to call variables, observations and\n"
"> elements from data frames:\n"
">\n"
"> - `nordic[1]`\n"
"> - `nordic[[1]]`\n"
"> - `nordic$country`\n"
"> - `nordic[\"country\"]`\n"
"> - `nordic[1, 1]`\n"
"> - `nordic[, 1]`\n"
"> - `nordic[1, ]`\n"
">\n"
"> Try out these examples and explain what is returned by each one.\n"
">\n"
"> *Hint:* Use the function `class()` to examine what is returned in each case.\n"
">\n"
"> > ## Solution to Challenge 4\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic[1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   country\n"
"> > 1 Denmark\n"
"> > 2  Sweden\n"
"> > 3  Norway\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can think of a data frame as a list of vectors. The single brace `[1]`\n"
"> > returns the first slice of the list, as another list. In this case it is the\n"
"> > first column of the data frame.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic[[1]]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"Denmark\" \"Sweden\"  \"Norway\" \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The double brace `[[1]]` returns the contents of the list item. In this case\n"
"> > it is the contents of the first column, a _vector_ of type _factor_.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic$country\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"Denmark\" \"Sweden\"  \"Norway\" \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > This example uses the `$` character to address items by name. _coat_ is the\n"
"> > first column of the data frame, again a _vector_ of type _factor_.\n"
"> X\n"
"> > \n"
"> > ~~~\n"
"> > nordic[\"country\"]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   country\n"
"> > 1 Denmark\n"
"> > 2  Sweden\n"
"> > 3  Norway\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Here we are using a single brace `[\"country\"]` replacing the index number\n"
"> > with the column name. Like example 1, the returned object is a _list_.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic[1, 1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"Denmark\"\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > This example uses a single brace, but this time we provide row and column\n"
"> coordinates. The returned object is the value in row 1, column 1. The object\n"
"> is an _integer_ but because it is part of a _vector_ of type _factor_, R\n"
"> displays the label \"Denmark\" associated with the integer value.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic[, 1]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > [1] \"Denmark\" \"Sweden\"  \"Norway\" \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Like the previous example we use single braces and provide row and column\n"
"> > coordinates. The row coordinate is not specified, R interprets this missing\n"
"> > value as all the elements in this _column_ _vector_.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > nordic[1, ]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   country year lifeExp\n"
"> > 1 Denmark 2002    77.2\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Again we use the single brace with row and column coordinates. The column\n"
"> > coordinate is not specified. The return value is a _list_ containing all the\n"
"> > values in the first row."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 04-data-structures-part2.md in _episodes_rmd/\n"
"title: \"Exploring Data Frames\"\n"
"teaching: 20\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I manipulate a data frame?\"\n"
"objectives:\n"
"- \"Remove rows with `NA` values.\"\n"
"- \"Append two data frames.\"\n"
"- \"Understand what a `factor` is.\"\n"
"- \"Convert a `factor` to a `character` vector and vice versa.\"\n"
"- \"Display basic properties of data frames including size and class of the columns, names, and first few rows.\"\n"
"keypoints:\n"
"- \"Use `cbind()` to add a new column to a data frame.\"\n"
"- \"Use `rbind()` to add a new row to a data frame.\"\n"
"- \"Remove rows from a data frame.\"\n"
"- \"Use `na.omit()` to remove rows from a data frame with `NA` values.\"\n"
"- \"Use `levels()` and `as.character()` to explore and manipulate factors.\"\n"
"- \"Use `str()`, `nrow()`, `ncol()`, `dim()`, `colnames()`, `rownames()`, `head()`, and `typeof()` to understand the structure of a data frame.\"\n"
"- \"Read in a csv file using `read.csv()`.\"\n"
"- \"Understand what `length()` of a data frame represents.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:29
msgid "At this point, you've seen it all: in the last lesson, we toured all the basic\n"
"data types and data structures in R. Everything you do will be a manipulation of\n"
"those tools. But most of the time, the star of the show is the data frame—the table that we created by loading information from a csv file. In this lesson, we'll learn a few more things\n"
"about working with data frames."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:34
# header
msgid "## Realistic example"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:36
msgid "We already learned that the columns of a data frame are vectors, so that our\n"
"data are consistent in type throughout the columns. \n"
"So far, you have seen the basics of manipulating data frames with our nordic data; now let’s use those skills to digest a more extensive dataset. Let’s read in the gapminder dataset that we downloaded previously:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:42
# blockquote, which can be cascaded
msgid "> ## Miscellaneous Tips"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:43
msgid ">\n"
"> * Another type of file you might encounter are tab-separated value files\n"
">   (.tsv). To specify a tab as a separator, use `\"\\\\t\"` or `read.delim()`.\n"
">\n"
"> * Files can also be downloaded directly from the Internet into a local folder\n"
"> of your choice onto your computer using the `download.file` function. The\n"
"> `read.csv` function can then be executed to read the downloaded file from the\n"
"> download location, for example,\n"
">\n"
"> \n"
"> ~~~\n"
"> download.file(\"https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv\",\n"
">               destfile = \"data/gapminder_data.csv\")\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * Alternatively, you can also read in files directly into R from the Internet\n"
">   by replacing the file paths with a web address in `read.csv`. One should\n"
">   note that in doing this no local copy of the csv file is first saved onto\n"
">   your computer. For example,\n"
"> \n"
"> \n"
"> ~~~\n"
"> gapminder <- read.csv(\"https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * You can read directly from excel spreadsheets without\n"
"> converting them to plain text first by using the [readxl](https://cran.r-project.org/package=readxl) package."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:75
msgid "Let's investigate the `gapminder` data frame a bit; the first thing we should\n"
"always do is check out what the data looks like with `str`:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:79
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:559
#: r-intro-geospatial/_episodes/06-dplyr.md:189
# code block
msgid "~~~\n"
"str(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:86
#: r-intro-geospatial/_episodes/06-dplyr.md:196
# code block
msgid "~~~\n"
"'data.frame':	1704 obs. of  6 variables:\n"
" $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:97
msgid "We can also examine individual columns of the data frame with our `class` function:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:100
# code block
msgid "~~~\n"
"class(gapminder$year)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:114
# code block
msgid "~~~\n"
"class(gapminder$country)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:128
# code block
msgid "~~~\n"
"str(gapminder$country)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:135
# code block
msgid "~~~\n"
" chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:140
msgid "We can also interrogate the data frame for information about its dimensions;\n"
"remembering that `str(gapminder)` said there were 1704 observations of 6\n"
"variables in gapminder, what do you think the following will produce, and why?"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:145
# code block
msgid "~~~\n"
"length(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:150
msgid "A fair guess would have been to say that the length of a data frame would be the\n"
"number of rows it has (1704), but this is not the case; it gives us the number of columns."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:154
# code block
msgid "~~~\n"
"class(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:166
msgid "To get the number of rows and columns in our dataset, try:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:169
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:404
# code block
msgid "~~~\n"
"nrow(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:176
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:411
# code block
msgid "~~~\n"
"[1] 1704\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:183
# code block
msgid "~~~\n"
"ncol(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:190
# code block
msgid "~~~\n"
"[1] 6\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:195
msgid "Or, both at once:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:198
# code block
msgid "~~~\n"
"dim(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:205
# code block
msgid "~~~\n"
"[1] 1704    6\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:210
msgid "We'll also likely want to know what the titles of all the columns are, so we can\n"
"ask for them later:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:214
# code block
msgid "~~~\n"
"colnames(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:221
# code block
msgid "~~~\n"
"[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:226
msgid "At this stage, it's important to ask ourselves if the structure R is reporting\n"
"matches our intuition or expectations; do the basic data types reported for each\n"
"column make sense? If not, we need to sort any problems out now before they turn\n"
"into bad surprises down the road, using what we've learned about how R\n"
"interprets data, and the importance of *strict consistency* in how we record our\n"
"data."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:233
msgid "Once we're happy that the data types and structures seem reasonable, it's time\n"
"to start digging into our data proper. Check out the first few lines:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:237
# code block
msgid "~~~\n"
"head(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:244
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:330
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:256
msgid ">\n"
"> It's good practice to also check the last few lines of your data and some in\n"
"> the middle. How would you do this?\n"
">\n"
"> Searching for ones specifically in the middle isn't too hard but we could\n"
"> simply ask for a few lines at random. How would you code this?\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> > To check the last few lines it's relatively simple as R already has a\n"
"> > function for this:\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > tail(gapminder)\n"
"> > tail(gapminder, n = 15)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > What about a few arbitrary rows just for sanity (or insanity depending on\n"
"> > your view)?\n"
"> >\n"
"> > There are several ways to achieve this.\n"
"> >\n"
"> > The solution here presents one form using nested functions. i.e. a function\n"
"> > passed as an argument to another function. This might sound like a new\n"
"> > concept but you are already using it in fact.\n"
"> >\n"
"> > Remember `my_dataframe[rows, cols]` will print to screen your data frame\n"
"> > with the number of rows and columns you asked for (although you might \n"
"> > have asked for a range or named columns for example). How would you get the\n"
"> > last row if you don't know how many rows your data frame has? R has a\n"
"> > function for this. What about getting a (pseudorandom) sample? R also has a\n"
"> > function for this.\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > gapminder[sample(nrow(gapminder), 5), ]\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:300
msgid ">\n"
"> Read the output of `str(gapminder)` again; this time, use what you've learned\n"
"> about factors and vectors, as well as the output of functions like `colnames`\n"
"> and `dim` to explain what everything that `str` prints out for `gapminder`\n"
"> means. If there are any parts you can't interpret, discuss with your\n"
"> neighbors!\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> > The object `gapminder` is a data frame with columns\n"
"> >\n"
"> > - `country` and `continent` are factors.\n"
"> > - `year` is an integer vector.\n"
"> > - `pop`, `lifeExp`, and `gdpPercap` are numeric vectors."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:317
# header
msgid "## Adding columns and rows in data frames"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:319
msgid "We would like to create a new column to hold information on whether the life expectancy is below the world average life expectancy (70.5) or above:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:322
# code block
msgid "~~~\n"
"below_average <- gapminder$lifeExp < 70.5\n"
"head(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:341
msgid "We can then add this as a column via:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:344
# code block
msgid "~~~\n"
"cbind(gapminder, below_average)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:350
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:373
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:635
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453          TRUE\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530          TRUE\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007          TRUE\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971          TRUE\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811          TRUE\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134          TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:361
msgid "We probably don't want to print the entire dataframe each time, so\n"
"let's put our `cbind` command within a call to `head` to return\n"
"only the first six lines of the output."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:366
# code block
msgid "~~~\n"
"head(cbind(gapminder, below_average))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:384
msgid "Note that if we tried to add a vector of `below_average` with a different number of entries than the number of rows in the dataframe, it would fail:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:387
# code block
msgid "~~~\n"
"below_average <- c(TRUE, TRUE, TRUE, TRUE, TRUE)\n"
"head(cbind(gapminder, below_average))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:395
# code block
msgid "~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 1704, 5\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:400
msgid "Why didn't this work? R wants to see one element in our new column\n"
"for every row in the table:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:418
# code block
msgid "~~~\n"
"length(below_average)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:425
# code block
msgid "~~~\n"
"[1] 5\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:430
msgid "So for it to work we need either to have `nrow(gapminder)` = `length(below_average)` or `nrow(gapminder)` to be a multiple of `length(below_average)`: "
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:433
# code block
msgid "~~~\n"
"below_average <- c(TRUE, TRUE, FALSE)\n"
"head(cbind(gapminder, below_average))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:441
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453          TRUE\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530          TRUE\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007         FALSE\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971          TRUE\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811          TRUE\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134         FALSE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:451
msgid "The sequence `TRUE,TRUE,FALSE` is repeated over all the gapminder rows."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:453
msgid "Let's overwite the content of gapminder with our new data frame."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:456
# code block
msgid "~~~\n"
"below_average <-  as.logical(gapminder$lifeExp<70.5)\n"
"gapminder <- cbind(gapminder, below_average)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:462
msgid "Now how about adding rows? The rows of a data frame are lists:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:465
# code block
msgid "~~~\n"
"new_row <- list('Norway', 2016, 5000000, 'Nordic', 80.3, 49400.0, FALSE)\n"
"gapminder_norway <- rbind(gapminder, new_row)\n"
"tail(gapminder_norway)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:474
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp  gdpPercap below_average\n"
"1700 Zimbabwe 1987  9216418    Africa  62.351   706.1573          TRUE\n"
"1701 Zimbabwe 1992 10704340    Africa  60.377   693.4208          TRUE\n"
"1702 Zimbabwe 1997 11404948    Africa  46.809   792.4500          TRUE\n"
"1703 Zimbabwe 2002 11926563    Africa  39.989   672.0386          TRUE\n"
"1704 Zimbabwe 2007 12311143    Africa  43.487   469.7093          TRUE\n"
"1705   Norway 2016  5000000    Nordic  80.300 49400.0000         FALSE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:485
msgid "To understand why R is giving us a warning when we try to add this row, let's learn a little more about factors."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:489
msgid "Here is another thing to look out for: in a `factor`, each different value\n"
"represents what is called a `level`. In our case, the `factor` \"continent\" has 5\n"
"levels: \"Africa\", \"Americas\", \"Asia\", \"Europe\" and \"Oceania\". R will only accept\n"
"values that match one of the levels. If you add a new value, it will become\n"
"`NA`."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:495
msgid "The warning is telling us that we unsuccessfully added \"Nordic\" to our\n"
"*continent* factor, but 2016 (a numeric), 5000000 (a numeric), 80.3 (a numeric),\n"
"49400.0 (a numeric) and `FALSE` (a logical) were successfully added to\n"
"*country*, *year*, *pop*, *lifeExp*, *gdpPercap* and *below_average*\n"
"respectively, since those variables are not factors. 'Norway' was also\n"
"successfully added since it corresponds to an existing level. To successfully\n"
"add a gapminder row with a \"Nordic\" *continent*, add \"Nordic\" as a *level* of\n"
"the factor:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:505
# code block
msgid "~~~\n"
"levels(gapminder$continent)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:512
# code block
msgid "~~~\n"
"NULL\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:519
# code block
msgid "~~~\n"
"levels(gapminder$continent) <- c(levels(gapminder$continent), \"Nordic\")\n"
"gapminder_norway  <- rbind(gapminder,\n"
"                           list('Norway', 2016, 5000000, 'Nordic', 80.3,49400.0, FALSE))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:528
# code block
msgid "~~~\n"
"Warning in `[<-.factor`(`*tmp*`, ri, value = structure(c(\"Asia\", \"Asia\", :\n"
"invalid factor level, NA generated\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:532
# SC/DC Template label
msgid "{: .warning}"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:536
# code block
msgid "~~~\n"
"tail(gapminder_norway)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:543
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp  gdpPercap below_average\n"
"1700 Zimbabwe 1987  9216418      <NA>  62.351   706.1573          TRUE\n"
"1701 Zimbabwe 1992 10704340      <NA>  60.377   693.4208          TRUE\n"
"1702 Zimbabwe 1997 11404948      <NA>  46.809   792.4500          TRUE\n"
"1703 Zimbabwe 2002 11926563      <NA>  39.989   672.0386          TRUE\n"
"1704 Zimbabwe 2007 12311143      <NA>  43.487   469.7093          TRUE\n"
"1705   Norway 2016  5000000    Nordic  80.300 49400.0000         FALSE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:554
msgid "Alternatively, we can change a factor into a character vector; we lose the handy\n"
"categories of the factor, but we can subsequently add any word we want to the\n"
"column without babysitting the factor levels:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:566
# code block
msgid "~~~\n"
"'data.frame':	1704 obs. of  7 variables:\n"
" $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
"  ..- attr(*, \"levels\")= chr \"Nordic\"\n"
" $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap    : num  779 821 853 836 740 ...\n"
" $ below_average: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:581
# code block
msgid "~~~\n"
"gapminder$continent <- as.character(gapminder$continent)\n"
"str(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:589
# code block
msgid "~~~\n"
"'data.frame':	1704 obs. of  7 variables:\n"
" $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap    : num  779 821 853 836 740 ...\n"
" $ below_average: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:601
# header
msgid "## Appending to a data frame"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:603
msgid "The key to remember when adding data to a data frame is that *columns are\n"
"vectors and rows are lists.* We can also glue two data frames together with\n"
"`rbind`:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:608
# code block
msgid "~~~\n"
"gapminder <- rbind(gapminder, gapminder)\n"
"tail(gapminder, n=3)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:616
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"3406 Zimbabwe 1997 11404948    Africa  46.809  792.4500          TRUE\n"
"3407 Zimbabwe 2002 11926563    Africa  39.989  672.0386          TRUE\n"
"3408 Zimbabwe 2007 12311143    Africa  43.487  469.7093          TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:623
msgid "But now the row names are unnecessarily complicated (not consecutive numbers).\n"
"We can remove the rownames, and R will automatically re-name them sequentially:"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:627
# code block
msgid "~~~\n"
"rownames(gapminder) <- NULL\n"
"head(gapminder)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:647
msgid ">\n"
"> You can create a new data frame right from within R with the following syntax:\n"
"> \n"
"> ~~~\n"
"> df <- data.frame(id = c(\"a\", \"b\", \"c\"),\n"
">                  x = 1:3,\n"
">                  y = c(TRUE, TRUE, FALSE),\n"
">                  stringsAsFactors = FALSE)\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> Make a data frame that holds the following information for yourself:\n"
">\n"
"> - first name\n"
"> - last name\n"
"> - lucky number\n"
">\n"
"> Then use `rbind` to add an entry for the people sitting beside you. Finally,\n"
"> use `cbind` to add a column with each person's answer to the question, \"Is it\n"
"> time for coffee break?\"\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > df <- data.frame(first = c(\"Grace\"),\n"
"> >                  last = c(\"Hopper\"),\n"
"> >                  lucky_number = c(0),\n"
"> >                  stringsAsFactors = FALSE)\n"
"> > df <- rbind(df, list(\"Marie\", \"Curie\", 238) )\n"
"> > df <- cbind(df, coffeetime = c(TRUE, TRUE))\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 05-data-subsetting.md in _episodes_rmd/\n"
"title: Subsetting Data\n"
"teaching: 25\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I work with subsets of data in R?\"\n"
"objectives:\n"
"- \"To be able to subset vectors and data frames\"\n"
"- \"To be able to extract individual and multiple elements: by index, by name, using comparison operations\"\n"
"- \"To be able to skip and remove elements from various data structures.\"\n"
"keypoints:\n"
"- \"Indexing in R starts at 1, not 0.\"\n"
"- \"Access individual values by location using `[]`.\"\n"
"- \"Access slices of data using `[low:high]`.\"\n"
"- \"Access arbitrary sets of data using `[c(...)]`.\"\n"
"- \"Use logical operations and logical vectors to access subsets of data.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:24
msgid "R has many powerful subset operators. Mastering them will allow you to\n"
"easily perform complex operations on any kind of dataset."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:27
msgid "There are six different ways we can subset any kind of object, and three\n"
"different subsetting operators for the different data structures."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:30
msgid "Let's start with the workhorse of R: a simple numeric vector."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:33
# code block
msgid "~~~\n"
"x <- c(5.4, 6.2, 7.1, 4.8, 7.5)\n"
"names(x) <- c('a', 'b', 'c', 'd', 'e')\n"
"x\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:42
# code block
msgid "~~~\n"
"  a   b   c   d   e \n"
"5.4 6.2 7.1 4.8 7.5 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:48
# blockquote, which can be cascaded
msgid "> ## Atomic vectors"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:49
msgid ">\n"
"> In R, simple vectors containing character strings, numbers, or logical values\n"
"> are called *atomic* vectors because they can't be further simplified."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:54
msgid "So now that we've created a dummy vector to play with, how do we get at its\n"
"contents?"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:57
# header
msgid "## Accessing elements using their indices"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:59
msgid "To extract elements of a vector we can give their corresponding index, starting\n"
"from one:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:63
# code block
msgid "~~~\n"
"x[1]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:70
#: r-intro-geospatial/_episodes/05-data-subsetting.md:466
# code block
msgid "~~~\n"
"  a \n"
"5.4 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:77
# code block
msgid "~~~\n"
"x[4]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:84
# code block
msgid "~~~\n"
"  d \n"
"4.8 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:90
msgid "It may look different, but the square brackets operator is a function. For vectors\n"
"(and matrices), it means \"get me the nth element\"."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:93
msgid "We can ask for multiple elements at once:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:96
# code block
msgid "~~~\n"
"x[c(1, 3)]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:103
#: r-intro-geospatial/_episodes/05-data-subsetting.md:405
# code block
msgid "~~~\n"
"  a   c \n"
"5.4 7.1 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:109
msgid "Or slices of the vector:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:112
# code block
msgid "~~~\n"
"x[1:4]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:119
# code block
msgid "~~~\n"
"  a   b   c   d \n"
"5.4 6.2 7.1 4.8 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:125
msgid "the `:` operator creates a sequence of numbers from the left element to the right."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:127
# code block
msgid "~~~\n"
"1:4\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:134
#: r-intro-geospatial/_episodes/05-data-subsetting.md:148
# code block
msgid "~~~\n"
"[1] 1 2 3 4\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:141
# code block
msgid "~~~\n"
"c(1, 2, 3, 4)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:154
msgid "We can ask for the same element multiple times:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:157
# code block
msgid "~~~\n"
"x[c(1, 1, 3)]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:164
# code block
msgid "~~~\n"
"  a   a   c \n"
"5.4 5.4 7.1 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:170
msgid "If we ask for an index beyond the length of the vector, R will return a missing value:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:172
# code block
msgid "~~~\n"
"x[6]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:179
# code block
msgid "~~~\n"
"<NA> \n"
"  NA \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:185
msgid "This is a vector of length one containing an `NA`, whose name is also `NA`."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:187
msgid "If we ask for the 0th element, we get an empty vector:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:190
# code block
msgid "~~~\n"
"x[0]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:197
# code block
msgid "~~~\n"
"named numeric(0)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:202
# blockquote, which can be cascaded
msgid "> ## Vector numbering in R starts at 1"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:203
msgid ">\n"
"> In many programming languages (C and Python, for example), the first\n"
"> element of a vector has an index of 0. In R, the first element is 1."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:208
# header
msgid "## Skipping and removing elements"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:210
msgid "If we use a negative number as the index of a vector, R will return\n"
"every element *except* for the one specified:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:214
# code block
msgid "~~~\n"
"x[-2]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:221
# code block
msgid "~~~\n"
"  a   c   d   e \n"
"5.4 7.1 4.8 7.5 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:227
msgid "We can skip multiple elements:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:230
# code block
msgid "~~~\n"
"x[c(-1, -5)]  # or x[-c(1,5)]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:237
# code block
msgid "~~~\n"
"  b   c   d \n"
"6.2 7.1 4.8 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:243
# blockquote, which can be cascaded
msgid "> ## Tip: Order of operations"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:244
msgid ">\n"
"> A common trip up for novices occurs when trying to skip\n"
"> slices of a vector. It's natural to to try to negate a\n"
"> sequence like so:\n"
">\n"
"> \n"
"> ~~~\n"
"> x[-1:3]\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> This gives a somewhat cryptic error:\n"
">\n"
"> \n"
"> ~~~\n"
"> Error in x[-1:3]: only 0's may be mixed with negative subscripts\n"
"> ~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:261
# SC/DC Template label
msgid "> {: .error}"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:262
msgid ">\n"
"> But remember the order of operations. `:` is really a function.\n"
"> It takes its first argument as -1, and its second as 3,\n"
"> so generates the sequence of numbers: `c(-1, 0, 1, 2, 3)`.\n"
">\n"
"> The correct solution is to wrap that function call in brackets, so\n"
"> that the `-` operator applies to the result:\n"
">\n"
"> \n"
"> ~~~\n"
"> x[-(1:3)]\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">   d   e \n"
"> 4.8 7.5 \n"
"> ~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:282
#: r-intro-geospatial/_episodes/05-data-subsetting.md:322
#: r-intro-geospatial/_episodes/05-data-subsetting.md:331
#: r-intro-geospatial/_episodes/05-data-subsetting.md:519
# SC/DC Template label
msgid "> {: .output}"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:286
msgid "To remove elements from a vector, we need to assign the result back\n"
"into the variable:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:290
# code block
msgid "~~~\n"
"x <- x[-4]\n"
"x\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:298
# code block
msgid "~~~\n"
"  a   b   c   e \n"
"5.4 6.2 7.1 7.5 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:305
#: r-intro-geospatial/_episodes/05-data-subsetting.md:502
msgid ">\n"
"> Given the following code:\n"
">\n"
"> \n"
"> ~~~\n"
"> x <- c(5.4, 6.2, 7.1, 4.8, 7.5)\n"
"> names(x) <- c('a', 'b', 'c', 'd', 'e')\n"
"> print(x)\n"
"> ~~~\n"
"> {: .language-r}\n"
"> \n"
"> \n"
"> \n"
"> ~~~\n"
">   a   b   c   d   e \n"
"> 5.4 6.2 7.1 4.8 7.5 \n"
"> ~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:323
msgid ">\n"
"> Come up with at least 3 different commands that will produce the following output:\n"
">\n"
"> \n"
"> ~~~\n"
">   b   c   d \n"
"> 6.2 7.1 4.8 \n"
"> ~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:332
msgid ">\n"
"> After you find 3 different commands, compare notes with your neighbour. Did you have different strategies?\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x[2:4]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[-c(1,5)]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[c(\"b\", \"c\", \"d\")]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > ~~~\n"
"> > x[c(2,3,4)]\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   b   c   d \n"
"> > 6.2 7.1 4.8 \n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:392
# header
msgid "## Subsetting by name"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:394
msgid "We can extract elements by using their name, instead of extracting by index:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:397
# code block
msgid "~~~\n"
"x <- c(a = 5.4, b = 6.2, c = 7.1, d = 4.8, e = 7.5) # we can name a vector 'on the fly'\n"
"x[c(\"a\", \"c\")]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:411
msgid "This is usually a much more reliable way to subset objects: the\n"
"position of various elements can often change when chaining together\n"
"subsetting operations, but the names will always remain the same!"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:415
# header
msgid "## Subsetting through other logical operations"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:417
msgid "We can also use any logical vector to subset:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:420
# code block
msgid "~~~\n"
"x[c(FALSE, FALSE, TRUE, FALSE, TRUE)]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:427
#: r-intro-geospatial/_episodes/05-data-subsetting.md:445
# code block
msgid "~~~\n"
"  c   e \n"
"7.1 7.5 \n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:433
msgid "Since comparison operators (e.g. `>`, `<`, `==`) evaluate to logical vectors, we can also\n"
"use them to succinctly subset vectors: the following statement gives\n"
"the same result as the previous one."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:438
# code block
msgid "~~~\n"
"x[x > 7]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:451
msgid "Breaking it down, this statement first evaluates `x>7`, generating\n"
"a logical vector `c(FALSE, FALSE, TRUE, FALSE, TRUE)`, and then\n"
"selects the elements of `x` corresponding to the `TRUE` values."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:455
msgid "We can use `==` to mimic the previous method of indexing by name\n"
"(remember you have to use `==` rather than `=` for comparisons):"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:459
# code block
msgid "~~~\n"
"x[names(x) == \"a\"]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:472
# blockquote, which can be cascaded
msgid "> ## Tip: Combining logical conditions"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:473
msgid ">\n"
"> We often want to combine multiple logical\n"
"> criteria. For example, we might want to find all the countries that are\n"
"> located in Asia **or** Europe **and** have life expectancies within a certain\n"
"> range. Several operations for combining logical vectors exist in R:\n"
">\n"
">  * `&`, the \"logical AND\" operator: returns `TRUE` if both the left and right\n"
">    are `TRUE`.\n"
">  * `|`, the \"logical OR\" operator: returns `TRUE`, if either the left or right\n"
">    (or both) are `TRUE`.\n"
">\n"
"> You may sometimes see `&&` and `||` instead of `&` and `|`. These two-character operators\n"
"> only look at the first element of each vector and ignore the\n"
"> remaining elements. In general you should not use the two-character\n"
"> operators in data analysis; save them\n"
"> for programming, i.e. deciding whether to execute a statement.\n"
">\n"
">  * `!`, the \"logical NOT\" operator: converts `TRUE` to `FALSE` and `FALSE` to\n"
">    `TRUE`. It can negate a single logical condition (eg `!TRUE` becomes\n"
">    `FALSE`), or a whole vector of conditions(eg `!c(TRUE, FALSE)` becomes\n"
">    `c(FALSE, TRUE)`).\n"
">\n"
"> Additionally, you can compare the elements within a single vector using the\n"
"> `all` function (which returns `TRUE` if every element of the vector is `TRUE`)\n"
"> and the `any` function (which returns `TRUE` if one or more elements of the\n"
"> vector are `TRUE`)."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:520
msgid ">\n"
"> Write a subsetting command to return the values in x that are greater than 4 and less than 7.\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > x_subset <- x[x<7 & x>4]\n"
"> > print(x_subset)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> >   a   b   d \n"
"> > 5.4 6.2 4.8 \n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:542
# blockquote, which can be cascaded
msgid "> ## Tip: Getting help for operators"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:543
msgid ">\n"
"> Remember you can search for help on operators by wrapping them in quotes:\n"
"> `help(\"%in%\")` or `?\"%in%\"`."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:549
# blockquote, which can be cascaded
msgid "> ## Handling special values"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:550
# blockquote, which can be cascaded
msgid "> At some point you will encounter functions in R that cannot handle missing, infinite,"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:551
# blockquote, which can be cascaded
msgid "> or undefined data."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:552
msgid ">\n"
"> There are a number of special functions you can use to filter out this data:\n"
">\n"
"> * `is.na` will return all positions in a vector, matrix, or data frame\n"
">   containing `NA` (or `NaN`)\n"
"> * likewise, `is.nan`, and `is.infinite` will do the same for `NaN` and `Inf`.\n"
"> * `is.finite` will return all positions in a vector, matrix, or data.frame\n"
">   that do not contain `NA`, `NaN` or `Inf`.\n"
"> * `na.omit` will filter out all missing values from a vector"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:563
# header
msgid "## Data frames"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:565
msgid "Remember the data frames are lists underneath the hood, so similar rules\n"
"apply. However they are also two dimensional objects:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:568
msgid "`[` with one argument will act the same way as for lists, where each list\n"
"element corresponds to a column. The resulting object will be a data frame:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:572
# code block
msgid "~~~\n"
"head(gapminder[3])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:579
# code block
msgid "~~~\n"
"       pop\n"
"1  8425333\n"
"2  9240934\n"
"3 10267083\n"
"4 11537966\n"
"5 13079460\n"
"6 14880372\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:590
msgid "Similarly, `[[` will act to extract *a single column*:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:593
# code block
msgid "~~~\n"
"head(gapminder[[\"lifeExp\"]])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:600
# code block
msgid "~~~\n"
"[1] 28.801 30.332 31.997 34.020 36.088 38.438\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:605
msgid "And `$` provides a convenient shorthand to extract columns by name:"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:608
# code block
msgid "~~~\n"
"head(gapminder$year)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:615
# code block
msgid "~~~\n"
"[1] 1952 1957 1962 1967 1972 1977\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:620
msgid "To select specific rows and/or columns, you can provide two arguments to `[` "
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:623
# code block
msgid "~~~\n"
"gapminder[1:3, ]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:630
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:638
msgid "If we subset a single row, the result will be a data frame (because\n"
"the elements are mixed types):"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:642
# code block
msgid "~~~\n"
"gapminder[3, ]\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:649
# code block
msgid "~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:655
msgid "But for a single column the result will be a vector (this can be changed with\n"
"the third argument, `drop = F0ALSE`)."
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:659
msgid ">\n"
"> Fix each of the following common data frame subsetting errors:\n"
">\n"
"> 1. Extract observations collected for the year 1957\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$year = 1957, ]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 2. Extract all columns except 1 through to 4\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[, -1:4]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 3. Extract the rows where the life expectancy is longer the 80 years\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$lifeExp > 80]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 4. Extract the first row, and the fourth and fifth columns\n"
">   (`lifeExp` and `gdpPercap`).\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[1, 4, 5]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> 5. Advanced: extract rows that contain information for the years 2002\n"
">    and 2007\n"
">\n"
">    \n"
">    ~~~\n"
">    gapminder[gapminder$year == 2002 | 2007,]\n"
">    ~~~\n"
">    {: .language-r}\n"
">\n"
"> > ## Solution to challenge 3\n"
"> >\n"
"> > Fix each of the following common data frame subsetting errors:\n"
"> >\n"
"> > 1. Extract observations collected for the year 1957\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[gapminder$year = 1957, ]\n"
"> >    gapminder[gapminder$year == 1957, ]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 2. Extract all columns except 1 through to 4\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[, -1:4]\n"
"> >    gapminder[,-c(1:4)]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 3. Extract the rows where the life expectancy is longer the 80 years\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[gapminder$lifeExp > 80]\n"
"> >    gapminder[gapminder$lifeExp > 80,]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 4. Extract the first row, and the fourth and fifth columns\n"
"> >   (`lifeExp` and `gdpPercap`).\n"
"> >\n"
"> >    \n"
"> >    ~~~\n"
"> >    # gapminder[1, 4, 5]\n"
"> >    gapminder[1, c(4, 5)]\n"
"> >    ~~~\n"
"> >    {: .language-r}\n"
"> >\n"
"> > 5. Advanced: extract rows that contain information for the years 2002\n"
"> >    and 2007\n"
"> >\n"
"> >     \n"
"> >     ~~~\n"
"> >     # gapminder[gapminder$year == 2002 | 2007,]\n"
"> >     gapminder[gapminder$year == 2002 | gapminder$year == 2007,]\n"
"> >     gapminder[gapminder$year %in% c(2002, 2007),]\n"
"> >     ~~~\n"
"> >     {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/05-data-subsetting.md:759
msgid ">\n"
"> 1. Why does `gapminder[1:20]` return an error? How does it differ from\n"
">    `gapminder[1:20, ]`?\n"
">\n"
"> 2. Create a new `data.frame` called `gapminder_small` that only contains rows\n"
"> 1 through 9 and 19 through 23. You can do this in one or two steps.\n"
">\n"
"> > ## Solution to challenge 4\n"
"> >\n"
"> > 1.  `gapminder` is a data.frame so needs to be subsetted on two dimensions. `gapminder[1:20, ]` subsets the data to give the first 20 rows and all columns.\n"
"> >\n"
"> > 2.\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > gapminder_small <- gapminder[c(1:9, 19:23),]\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 06-dplyr.md in _episodes_rmd/\n"
"title: Data frame Manipulation with dplyr\n"
"teaching: 30\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I manipulate dataframes without repeating myself?\"\n"
"objectives:\n"
"- \" To be able to use the six main dataframe manipulation 'verbs' with pipes in  `dplyr`.\"\n"
"- \" To understand how `group_by()` and `summarize()` can be combined to summarize datasets.\"\n"
"- \" Be able to analyze a subset of data using logical filtering.\"\n"
"keypoints:\n"
"- \"Use the `dplyr` package to manipulate dataframes.\"\n"
"- \"Use `select()` to choose variables from a dataframe.\"\n"
"- \"Use `filter()` to choose data based on values.\"\n"
"- \"Use `group_by()` and `summarize()` to work with subsets of data.\"\n"
"- \"Use `mutate()` to create new variables.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:24
msgid "Manipulation of dataframes means many things to many researchers, we often\n"
"select certain observations (rows) or variables (columns), we often group the\n"
"data by a certain variable(s), or we even calculate summary statistics. We can\n"
"do these operations using the normal base R operations:"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:30
# code block
msgid "~~~\n"
"mean(gapminder[gapminder$continent == \"Africa\", \"gdpPercap\"])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:37
# code block
msgid "~~~\n"
"[1] 2193.755\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:44
# code block
msgid "~~~\n"
"mean(gapminder[gapminder$continent == \"Americas\", \"gdpPercap\"])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:51
# code block
msgid "~~~\n"
"[1] 7136.11\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:58
# code block
msgid "~~~\n"
"mean(gapminder[gapminder$continent == \"Asia\", \"gdpPercap\"])\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:65
# code block
msgid "~~~\n"
"[1] 7902.15\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:70
msgid "But this isn't very efficient, and can become tedious quickly because there is a\n"
"fair bit of repetition. Repeating yourself will cost you time, both now and\n"
"later, and potentially introduce some nasty bugs."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:74
# header
msgid "## The `dplyr` package"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:76
msgid "Luckily, the [`dplyr`](https://dplyr.tidyverse.org) package provides a number of\n"
"very useful functions for manipulating dataframes in a way that will reduce the\n"
"above repetition, reduce the probability of making errors, and probably even\n"
"save you some typing. As an added bonus, you might even find the `dplyr` grammar\n"
"easier to read."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:82
msgid "Here we're going to cover 6 of the most commonly used functions as well as using\n"
"pipes (`%>%`) to combine them."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:85
# ordered list
msgid "1. `select()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:86
# ordered list
msgid "2. `filter()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:87
# ordered list
msgid "3. `group_by()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:88
# ordered list
msgid "4. `summarize()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:89
# ordered list
msgid "5. `mutate()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:91
msgid "If you have have not installed this package earlier, please do so:"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:94
# code block
msgid "~~~\n"
"install.packages('dplyr')\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:99
msgid "Now let's load the package:"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:102
# code block
msgid "~~~\n"
"library(\"dplyr\")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:107
# header
msgid "## Using `select()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:109
msgid "If, for example, we wanted to move forward with only a few of the variables in\n"
"our dataframe we could use the `select()` function. This will keep only the\n"
"variables you select."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:114
# code block
msgid "~~~\n"
"year_country_gdp <- select(gapminder, year, country, gdpPercap)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:119
msgid "![](../fig/13-dplyr-fig1.png)"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:121
msgid "If we open up `year_country_gdp` we'll see that it only contains the year,\n"
"country and gdpPercap. Above we used 'normal' grammar, but the strengths of\n"
"`dplyr` lie in combining several functions using pipes. Since the pipes grammar\n"
"is unlike anything we've seen in R before, let's repeat what we've done above\n"
"using pipes."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:128
# code block
msgid "~~~\n"
"year_country_gdp <- gapminder %>% select(year,country,gdpPercap)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:133
msgid "To help you understand why we wrote that in that way, let's walk through it step\n"
"by step. First we summon the `gapminder` data frame and pass it on, using the\n"
"pipe symbol `%>%`, to the next step, which is the `select()` function. In this\n"
"case we don't specify which data object we use in the `select()` function since\n"
"in gets that from the previous pipe. **Fun Fact**: You may have encountered\n"
"pipes before in the shell. In R, a pipe symbol is `%>%` while in the shell it is\n"
"`|` but the concept is the same!"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:141
# header
msgid "## Using `filter()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:143
msgid "If we now wanted to move forward with the above, but only with European\n"
"countries, we can combine `select` and `filter`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:147
# code block
msgid "~~~\n"
"year_country_gdp_euro <- gapminder %>%\n"
"  filter(continent == \"Europe\") %>%\n"
"  select(year, country, gdpPercap)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:155
msgid ">\n"
"> Write a single command (which can span multiple lines and includes pipes) that\n"
"> will produce a dataframe that has the African values for `lifeExp`, `country`\n"
"> and `year`, but not for other Continents.  How many rows does your dataframe\n"
"> have and why?\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >year_country_lifeExp_Africa <- gapminder %>%\n"
"> >                            filter(continent==\"Africa\") %>%\n"
"> >                            select(year,country,lifeExp)\n"
"> >~~~\n"
"> >{: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:173
msgid "As with last time, first we pass the gapminder dataframe to the `filter()`\n"
"function, then we pass the filtered version of the gapminder data frame to the\n"
"`select()` function. **Note:** The order of operations is very important in this\n"
"case. If we used 'select' first, filter would not be able to find the variable\n"
"continent since we would have removed it in the previous step."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:179
# header
msgid "## Using `group_by()` and `summarize()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:181
msgid "Now, we were supposed to be reducing the error prone repetitiveness of what can\n"
"be done with base R, but up to now we haven't done that since we would have to\n"
"repeat the above for each continent. Instead of `filter()`, which will only pass\n"
"observations that meet your criteria (in the above: `continent==\"Europe\"`), we\n"
"can use `group_by()`, which will essentially use every unique criteria that you\n"
"could have used in filter."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:209
# code block
msgid "~~~\n"
"gapminder %>% group_by(continent) %>% str()\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:216
# code block
msgid "~~~\n"
"tibble [1,704 × 6] (S3: grouped_df/tbl_df/tbl/data.frame)\n"
" $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num [1:1704] 8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n"
" - attr(*, \"groups\")= tibble [5 × 2] (S3: tbl_df/tbl/data.frame)\n"
"  ..$ continent: chr [1:5] \"Africa\" \"Americas\" \"Asia\" \"Europe\" ...\n"
"  ..$ .rows    : list<int> [1:5] \n"
"  .. ..$ : int [1:624] 25 26 27 28 29 30 31 32 33 34 ...\n"
"  .. ..$ : int [1:300] 49 50 51 52 53 54 55 56 57 58 ...\n"
"  .. ..$ : int [1:396] 1 2 3 4 5 6 7 8 9 10 ...\n"
"  .. ..$ : int [1:360] 13 14 15 16 17 18 19 20 21 22 ...\n"
"  .. ..$ : int [1:24] 61 62 63 64 65 66 67 68 69 70 ...\n"
"  .. ..@ ptype: int(0) \n"
"  ..- attr(*, \".drop\")= logi TRUE\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:237
msgid "You will notice that the structure of the dataframe where we used `group_by()`\n"
"(`grouped_df`) is not the same as the original `gapminder` (`data.frame`). A\n"
"`grouped_df` can be thought of as a `list` where each item in the `list`is a\n"
"`data.frame` which contains only the rows that correspond to the a particular\n"
"value `continent` (at least in the example above)."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:243
msgid "![](../fig/13-dplyr-fig2.png)"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:245
# header
msgid "## Using `summarize()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:247
msgid "The above was a bit on the uneventful side but `group_by()` is much more\n"
"exciting in conjunction with `summarize()`. This will allow us to create new\n"
"variable(s) by using functions that repeat for each of the continent-specific\n"
"data frames. That is to say, using the `group_by()` function, we split our\n"
"original dataframe into multiple pieces, then we can run functions\n"
"(e.g. `mean()` or `sd()`) within `summarize()`."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:255
# code block
msgid "~~~\n"
"gdp_bycontinents <- gapminder %>%\n"
"  group_by(continent) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:264
#: r-intro-geospatial/_episodes/06-dplyr.md:464
#: r-intro-geospatial/_episodes/06-dplyr.md:499
# code block
msgid "~~~\n"
"`summarise()` ungrouping output (override with `.groups` argument)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:271
# code block
msgid "~~~\n"
"gdp_bycontinents\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:278
# code block
msgid "~~~\n"
"# A tibble: 5 x 2\n"
"  continent mean_gdpPercap\n"
"  <chr>              <dbl>\n"
"1 Africa             2194.\n"
"2 Americas           7136.\n"
"3 Asia               7902.\n"
"4 Europe            14469.\n"
"5 Oceania           18622.\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:290
msgid "![](../fig/13-dplyr-fig3.png)"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:292
msgid "That allowed us to calculate the mean gdpPercap for each continent, but it gets\n"
"even better."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:296
msgid ">\n"
">\n"
"> Calculate the average life expectancy per country. Which has the longest average life\n"
"> expectancy and which has the shortest average life expectancy?\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > lifeExp_bycountry <- gapminder %>%\n"
"> >    group_by(country) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >`summarise()` ungrouping output (override with `.groups` argument)\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > lifeExp_bycountry %>%\n"
"> >    filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 2 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <chr>               <dbl>\n"
"> >1 Iceland              76.5\n"
"> >2 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> > Another way to do this is to use the `dplyr` function `arrange()`, which\n"
"> > arranges the rows in a data frame according to the order of one or more\n"
"> > variables from the data frame.  It has similar syntax to other functions \n"
"> > from the `dplyr` package. You can use `desc()` inside `arrange()` to sort in\n"
"> > descending order.\n"
"> > \n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(mean_lifeExp) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <chr>               <dbl>\n"
"> >1 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(desc(mean_lifeExp)) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country mean_lifeExp\n"
"> >  <chr>          <dbl>\n"
"> >1 Iceland         76.5\n"
"> >~~~\n"
"> >{: .output}"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:382
msgid "The function `group_by()` allows us to group by multiple variables. Let's group by `year` and `continent`."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:386
# code block
msgid "~~~\n"
"gdp_bycontinents_byyear <- gapminder %>%\n"
"  group_by(continent, year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:395
#: r-intro-geospatial/_episodes/06-dplyr.md:415
#: r-intro-geospatial/_episodes/06-dplyr.md:538
# code block
msgid "~~~\n"
"`summarise()` regrouping output by 'continent' (override with `.groups` argument)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:400
msgid "That is already quite powerful, but it gets even better! You're not limited to defining 1 new variable in `summarize()`."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:403
# code block
msgid "~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"  group_by(continent,year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap),\n"
"            sd_gdpPercap = sd(gdpPercap),\n"
"            mean_pop = mean(pop),\n"
"            sd_pop = sd(pop))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:420
# header
msgid "## `count()` and `n()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:422
msgid "A very common operation is to count the number of observations for each group.\n"
"The `dplyr` package comes with two related functions that help with this."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:425
msgid "For instance, if we wanted to check the number of countries included in the\n"
"dataset for the year 2002, we can use the `count()` function. It takes the name\n"
"of one or more columns that contain the groups we are interested in, and we can\n"
"optionally sort the results in descending order by adding `sort=TRUE`:"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:431
# code block
msgid "~~~\n"
"gapminder %>%\n"
"    filter(year == 2002) %>%\n"
"    count(continent, sort = TRUE)\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:440
# code block
msgid "~~~\n"
"  continent  n\n"
"1    Africa 52\n"
"2      Asia 33\n"
"3    Europe 30\n"
"4  Americas 25\n"
"5   Oceania  2\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:450
msgid "If we need to use the number of observations in calculations, the `n()` function\n"
"is useful. For instance, if we wanted to get the standard error of the life\n"
"expectancy per continent:"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:455
# code block
msgid "~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:471
# code block
msgid "~~~\n"
"# A tibble: 5 x 2\n"
"  continent se_le\n"
"  <chr>     <dbl>\n"
"1 Africa    0.366\n"
"2 Americas  0.540\n"
"3 Asia      0.596\n"
"4 Europe    0.286\n"
"5 Oceania   0.775\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:483
msgid "You can also chain together several summary operations; in this case calculating the `minimum`, `maximum`, `mean` and `se` of each continent's per-country life-expectancy:"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:486
# code block
msgid "~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(\n"
"      mean_le = mean(lifeExp),\n"
"      min_le = min(lifeExp),\n"
"      max_le = max(lifeExp),\n"
"      se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:506
# code block
msgid "~~~\n"
"# A tibble: 5 x 5\n"
"  continent mean_le min_le max_le se_le\n"
"  <chr>       <dbl>  <dbl>  <dbl> <dbl>\n"
"1 Africa       48.9   23.6   76.4 0.366\n"
"2 Americas     64.7   37.6   80.7 0.540\n"
"3 Asia         60.1   28.8   82.6 0.596\n"
"4 Europe       71.9   43.6   81.8 0.286\n"
"5 Oceania      74.3   69.1   81.2 0.775\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:518
# header
msgid "## Using `mutate()`"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:520
msgid "We can also create new variables prior to (or even after) summarizing information using `mutate()`."
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:523
# code block
msgid "~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"  mutate(gdp_billion = gdpPercap*pop/10^9) %>%\n"
"  group_by(continent, year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap),\n"
"            sd_gdpPercap = sd(gdpPercap),\n"
"            mean_pop = mean(pop),\n"
"            sd_pop = sd(pop),\n"
"            mean_gdp_billion = mean(gdp_billion),\n"
"            sd_gdp_billion = sd(gdp_billion))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:543
# header
msgid "## Other great resources"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:545
# unordered list
msgid "* [R for Data Science](http://r4ds.had.co.nz/)"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:546
# unordered list
msgid "* [Data Wrangling Cheat sheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:547
# unordered list
msgid "* [Introduction to dplyr](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:548
# unordered list
msgid "* [Data wrangling with R and RStudio](https://www.rstudio.com/resources/webinars/data-wrangling-with-r-and-rstudio/)"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 07-plot-ggplot2.md in _episodes_rmd/\n"
"title: Introduction to Visualization\n"
"teaching: 20\n"
"exercises: 15\n"
"questions:\n"
"- \"What are the basics of creating graphics in R?\"\n"
"objectives:\n"
"- \"To be able to use ggplot2 to generate histograms and bar plots.\"\n"
"- \"To apply geometry and aesthetic layers to a ggplot plot.\"\n"
"- \"To manipulate the aesthetics of a plot using different colors and position parameters.\"\n"
"keypoints:\n"
"- \"Use `ggplot2` to create plots.\"\n"
"- \"Think about graphics in layers: aesthetics, geometry, etc.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:21
msgid "Plotting our data is one of the best ways to quickly explore it and the various\n"
"relationships between variables. There are three main plotting systems in R, the\n"
"[base plotting system](http://www.statmethods.net/graphs/), the\n"
"[lattice](http://www.statmethods.net/advgraphs/trellis.html) package, and the\n"
"[ggplot2](http://www.statmethods.net/advgraphs/ggplot2.html) package. Today and\n"
"tomorrow we'll be learning about the ggplot2 package, because it is the most\n"
"effective for creating publication quality graphics. In this episode, we will\n"
"introduce the key features of a ggplot and make a few example plots. We will\n"
"expand on these concepts and see how they apply to geospatial data types when we\n"
"start working with geospatial data in the [R for Raster and Vector\n"
"Data](https://datacarpentry.org/r-raster-vector-geospatial/) lesson."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:33
msgid "ggplot2 is built on the grammar of graphics, the idea that any plot can be\n"
"expressed from the same set of components: a **data** set, a **coordinate\n"
"system**, and a set of **geoms**--the visual representation of data points. The\n"
"key to understanding ggplot2 is thinking about a figure in layers. This idea may\n"
"be familiar to you if you have used image editing programs like Photoshop,\n"
"Illustrator, or Inkscape. In this episode we will focus on two geoms\n"
"- histograms and bar plot. In the [R for Raster and Vector Data](https://datacarpentry.org/r-raster-vector-geospatial/) lesson we will work with a number of other geometries\n"
"and learn how to customize our plots."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:42
msgid "Let's start off with an example plotting the\n"
"distribution of life expectancy in our dataset. The first thing we do is call the `ggplot` function. This function lets R\n"
"know that we're creating a new plot, and any of the arguments we give the\n"
"`ggplot()` function are the global options for the plot: they apply to all\n"
"layers on the plot."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:48
msgid "We will pass in two arguments to `ggplot`. First, we tell\n"
"`ggplot` what data we\n"
"want to show on our figure, in this example we use the gapminder data we read in\n"
"earlier. For the second argument we pass in the `aes()` function, which\n"
"tells `ggplot` how variables in the data map to aesthetic properties of\n"
"the figure. Here we will tell `ggplot` we\n"
"want to plot the \"lifeExp\" column of the gapminder data frame on the x-axis. We don't need to specify a y-axis\n"
"for histograms."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:58
# code block
msgid "~~~\n"
"library(\"ggplot2\")\n"
"ggplot(data = gapminder, aes(x = lifeExp)) +   \n"
"  geom_histogram()\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:65
msgid "<img src=\"../fig/rmd-07-lifeExp-vs-gdpPercap-scatter-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:67
msgid "By itself, the call to `ggplot` isn't enough to draw a figure:"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:70
# code block
msgid "~~~\n"
"ggplot(data = gapminder, aes(x = lifeExp))\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:75
msgid "<img src=\"../fig/rmd-07-blank-plot-1.png\" title=\"plot of chunk blank-plot\" alt=\"plot of chunk blank-plot\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:77
msgid "We need to tell `ggplot` how we want to visually represent the data, which we\n"
"do by adding a geom layer. In our example, we used `geom_histogram()`, which\n"
"tells `ggplot` we want to visually represent the\n"
"distribution of one variable (in our case \"lifeExp\"):"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:83
# code block
msgid "~~~\n"
"ggplot(data = gapminder, aes(x = lifeExp)) +   \n"
"  geom_histogram()\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:91
# code block
msgid "~~~\n"
"`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:96
msgid "<img src=\"../fig/rmd-07-lifeExp-vs-gdpPercap-scatter2-1.png\" title=\"plot of chunk lifeExp-vs-gdpPercap-scatter2\" alt=\"plot of chunk lifeExp-vs-gdpPercap-scatter2\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:99
msgid ">\n"
"> Modify the example so that the figure shows the \n"
"> distribution of gdp per capita, rather than life \n"
"> expectancy:\n"
">\n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap)) +   \n"
"> >   geom_histogram()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > \n"
"> > <img src=\"../fig/rmd-07-ch1-sol-1.png\" title=\"plot of chunk ch1-sol\" alt=\"plot of chunk ch1-sol\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:124
msgid "The histogram is a useful tool for visualizing the \n"
"distribution of a single categorical variable. What if\n"
"we want to compare the gdp per capita of the countries in \n"
"our dataset? We can use a bar (or column) plot. \n"
"To simplify our plot, let's look at data only from the most \n"
"recent year and only\n"
"from countries in the Americas."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:133
# code block
msgid "~~~\n"
"gapminder_small <- filter(gapminder, year == 2007, continent == \"Americas\")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:138
msgid "This time, we will use the `geom_col()` function as our geometry. \n"
"We will plot countries on the x-axis (listed in alphabetic order\n"
"by default) and gdp per capita on the y-axis."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:143
# code block
msgid "~~~\n"
"ggplot(data = gapminder_small, aes(x = country, y = gdpPercap)) + \n"
"  geom_col()\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:149
msgid "<img src=\"../fig/rmd-07-hist-subset-gapminder-1.png\" title=\"plot of chunk hist-subset-gapminder\" alt=\"plot of chunk hist-subset-gapminder\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:151
msgid "With this many bars plotted, it's impossible to read all of the \n"
"x-axis labels. A quick fix to this is the add the `coord_flip()` \n"
"function to the end of our plot code."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:156
# code block
msgid "~~~\n"
"ggplot(data = gapminder_small, aes(x = country, y = gdpPercap)) + \n"
"  geom_col() +\n"
"  coord_flip()\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:163
msgid "<img src=\"../fig/rmd-07-hist-subset-gapminder-flipped-1.png\" title=\"plot of chunk hist-subset-gapminder-flipped\" alt=\"plot of chunk hist-subset-gapminder-flipped\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:165
msgid "There are more sophisticated ways of modifying axis\n"
"labels. We will be learning some of those methods\n"
"later in this workshop."
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:170
msgid ">\n"
"> In the previous examples and challenge we've used the `aes` function to tell\n"
"> the `geom_histogram()` and `geom_col()` functions which columns \n"
"> of the \n"
"> data set to plot.\n"
"> Another aesthetic property we can modify is the\n"
"> color. Create a new bar (column) plot showing the gdp per capita\n"
"> of all countries in the Americas for the years 1952 and 2007, \n"
"> color coded by year.\n"
">\n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > First we create a new object with \n"
"> > our filtered data: \n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > gapminder_small_2 <- gapminder %>%\n"
"> >                         filter(continent == \"Americas\",\n"
"> >                                year %in% c(1952, 2007))\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > Then we plot that data using the `geom_col()`\n"
"> > geom function. We color bars using the `fill`\n"
"> > parameter within the `aes()` function. \n"
"> > Since there are multiple bars for each \n"
"> > country, we use the `position` parameter\n"
"> > to \"dodge\" them so they appear side-by-side. \n"
"> > The default behavior for `postion` in `geom_col()`\n"
"> > is \"stack\".\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > ggplot(gapminder_small_2, \n"
"> >        aes(x = country, y = gdpPercap, \n"
"> >        fill = as.factor(year))) +\n"
"> >    geom_col(position = \"dodge\") + \n"
"> >    coord_flip()\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > <img src=\"../fig/rmd-07-gpd-per-cap-1.png\" title=\"plot of chunk gpd-per-cap\" alt=\"plot of chunk gpd-per-cap\" width=\"612\" style=\"display: block; margin: auto;\" />"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:216
msgid "The examples given here are just the start of \n"
"creating complex and beautiful graphics with R. \n"
"In [a later lesson](https://datacarpentry.org/r-raster-vector-geospatial/) we will go into much \n"
"more depth, including: \n"
"- plotting geospatial specific data types\n"
"- adjusting the color scheme of our plots\n"
"- setting and formatting plot titles, subtitles, and axis labels\n"
"- creating multi-panel plots\n"
"- creating point (scatter) and line plots\n"
"- layering datasets to create multi-layered plots\n"
"- creating and customizing a plot legend\n"
"- and much more!"
msgstr ""

#: r-intro-geospatial/_episodes/07-plot-ggplot2.md:229
msgid "The examples we've worked through in this episode should give you the building\n"
"blocks for working with the more complex graphic types and customizations we\n"
"will be working with in that lesson."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:1
# Front Matter
msgid "---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 08-writing-data.md in _episodes_rmd/\n"
"title: Writing Data\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I save plots and data created in R?\"\n"
"objectives:\n"
"- \"To be able to write out plots and data from R.\"\n"
"keypoints:\n"
"- \"Save plots using `ggsave()` or `pdf()` combined with `dev.off()`.\"\n"
"- \"Use `write.csv` to save tabular data.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:20
# header
msgid "## Saving plots"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:22
msgid "You can save a plot from within RStudio using the 'Export' button\n"
"in the 'Plot' window. This will give you the option of saving as a\n"
".pdf or as .png, .jpg or other image formats."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:26
msgid "Sometimes you will want to save plots without creating them in the\n"
"'Plot' window first. Perhaps you want to make a pdf document with\n"
"multiple pages: each one a different plot, for example. Or perhaps\n"
"you're looping through multiple subsets of a file, plotting data from\n"
"each subset, and you want to save each plot. \n"
"In this case you can use a more flexible approach. The\n"
"`pdf()` function creates a new pdf device. You can control the size and resolution\n"
"using the arguments to this function."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:36
# code block
msgid "~~~\n"
"pdf(\"Distribution-of-gdpPercap.pdf\", width=12, height=4)\n"
"ggplot(data = gapminder, aes(x = gdpPercap)) +   \n"
"  geom_histogram()\n"
"\n"
"# You then have to make sure to turn off the pdf device!\n"
"\n"
"dev.off()\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:47
msgid "Open up this document and have a look."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:50
msgid ">\n"
"> Rewrite your 'pdf' command to print a second\n"
"> page in the pdf, showing the side-by-side bar\n"
"> plot of gdp per capita in countries in the Americas\n"
"> in the years 1952 and 2007 that you created in the \n"
"> previous episode. \n"
"> \n"
"> > ## Solution to challenge 1\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > pdf(\"Distribution-of-gdpPercap.pdf\", width = 12, height = 4)\n"
"> > ggplot(data = gapminder, aes(x = gdpPercap)) + \n"
"> > geom_histogram()\n"
"> > \n"
"> > ggplot(data = gapminder_small_2, aes(x = country, y = gdpPercap, fill = as.factor(year))) +\n"
"> > geom_col(position = \"dodge\") + coord_flip()\n"
"> > \n"
"> > dev.off()\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:75
msgid "The commands `jpeg`, `png` etc. are used similarly to produce\n"
"documents in different formats."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:78
# header
msgid "## Writing data"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:80
msgid "At some point, you'll also want to write out data from R."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:82
msgid "We can use the `write.csv` function for this, which is\n"
"very similar to `read.csv` from before."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:85
msgid "Let's create a data-cleaning script, for this analysis, we\n"
"only want to focus on the gapminder data for Australia:"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:89
# code block
msgid "~~~\n"
"aust_subset <- filter(gapminder, country == \"Australia\")\n"
"\n"
"write.csv(aust_subset,\n"
"  file=\"cleaned-data/gapminder-aus.csv\"\n"
")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:98
msgid "Let's open the file to make sure it contains the data we expect. Navigate to your\n"
"`cleaned-data` directory and double-click the file name. It will open using your\n"
"computer's default for opening files with a `.csv` extension. To open in a specific\n"
"application, right click and select the application. Using a spreadsheet program\n"
"(like Excel) to open this file shows us that we do have properly formatted data\n"
"including only the data points from Australia. However, there are row numbers \n"
"associated with the data that are not useful to us (they refer to the row numbers\n"
"from the gapminder data frame)."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:107
msgid "Let's look at the help file to work out how to change this\n"
"behaviour."
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:111
# code block
msgid "~~~\n"
"?write.csv\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:116
msgid "By default R will write out the row and\n"
"column names when writing data to a file.\n"
"To over write this behavior, we can do the following:"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:121
# code block
msgid "~~~\n"
"write.csv(\n"
"  aust_subset,\n"
"  file=\"cleaned-data/gapminder-aus.csv\",\n"
"  row.names=FALSE\n"
")\n"
"~~~"
msgstr ""

#: r-intro-geospatial/_episodes/08-writing-data.md:131
msgid ">\n"
"> Subset the gapminder\n"
"> data to include only data points collected since 1990. Write out the new subset to a file\n"
"> in the `cleaned-data/` directory.\n"
"> \n"
"> > ## Solution to challenge 2\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > gapminder_after_1990 <- filter(gapminder, year > 1990)\n"
"> > \n"
"> > write.csv(gapminder_after_1990,\n"
"> >   file = \"cleaned-data/gapminder-after-1990.csv\",\n"
"> >   row.names = FALSE)\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""

#: r-intro-geospatial/_extras/about.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: About\n"
"---"
msgstr ""

#: r-intro-geospatial/_extras/about.md:6
msgid "{% include carpentries.html %}"
msgstr ""

#: r-intro-geospatial/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Discussion\n"
"---"
msgstr ""

#: r-intro-geospatial/_extras/discuss.md:6
msgid "Please see [our other R lesson][r-gap] for a different and more detailed presentation of these concepts."
msgstr ""

#: r-intro-geospatial/_extras/discuss.md:8
msgid "[r-gap]: https://swcarpentry.github.io/r-novice-gapminder/"
msgstr ""

#: r-intro-geospatial/_extras/figures.md:1
# Front Matter
msgid "---\n"
"title: Figures\n"
"---"
msgstr ""

#: r-intro-geospatial/_extras/figures.md:5
#: r-intro-geospatial/_extras/guide.md:5
#: r-intro-geospatial/aio.md:13
#: r-intro-geospatial/index.md:5
#: r-intro-geospatial/reference.md:4
msgid "{% include base_path.html %}"
msgstr ""

#: r-intro-geospatial/_extras/figures.md:7
# inline html
msgid "<script>\n"
"  window.onload = function() {\n"
"    var lesson_episodes = [\n"
"    {% for episode in site.episodes %}\n"
"    \"{{ episode.url }}\"{% unless forloop.last %},{% endunless %}\n"
"    {% endfor %}\n"
"    ];\n"
"\n"
"    var xmlHttp = [];  /* Required since we are going to query every episode. */\n"
"    for (i=0; i < lesson_episodes.length; i++) {\n"
"\n"
"      xmlHttp[i] = new XMLHttpRequest();\n"
"      xmlHttp[i].episode = lesson_episodes[i];  /* To enable use this later. */\n"
"      xmlHttp[i].onreadystatechange = function() {\n"
"\n"
"        if (this.readyState == 4 && this.status == 200) {\n"
"          var parser = new DOMParser();\n"
"          var htmlDoc = parser.parseFromString(this.responseText,\"text/html\");\n"
"          var htmlDocArticle = htmlDoc.getElementsByTagName(\"article\")[0];\n"
"\n"
"          var article_here = document.getElementById(this.episode);\n"
"          var images = htmlDocArticle.getElementsByTagName(\"img\");\n"
"\n"
"          if (images.length > 0) {\n"
"            var h1text = htmlDocArticle.getElementsByTagName(\"h1\")[0].innerHTML;\n"
"\n"
"            var htitle = document.createElement('h2');\n"
"            htitle.innerHTML = h1text;\n"
"            article_here.appendChild(htitle);\n"
"\n"
"            var image_num = 0;\n"
"            for (let image of images) {\n"
"              image_num++;\n"
"\n"
"              var title = document.createElement('p');\n"
"              title.innerHTML = \"<strong>Figure \" + image_num + \".</strong> \" + image.alt;\n"
"              article_here.appendChild(title);\n"
"\n"
"              article_here.appendChild(image.cloneNode(false));\n"
"\n"
"              if (image_num < images.length) {\n"
"                var hr = document.createElement('hr');\n"
"                article_here.appendChild(hr);\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"      episode_url = \"{{ relative_root_path }}\" + lesson_episodes[i];\n"
"      xmlHttp[i].open(\"GET\", episode_url);\n"
"      xmlHttp[i].send(null);\n"
"    }\n"
"  }\n"
"</script>"
msgstr ""

#: r-intro-geospatial/_extras/figures.md:61
msgid "{% comment %}\n"
"Create anchor for each one of the episodes.\n"
"{% endcomment %}\n"
"{% for episode in site.episodes %}\n"
"<article id=\"{{ episode.url }}\" class=\"figures\"></article>\n"
"{% endfor %}"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: \"Instructor Notes\"\n"
"---"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:7
msgid "relative path root: {{ relative_root_path }}"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:9
# header
msgid "## Instructor notes"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:11
# header
msgid "## Lesson motivation and learning objectives"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:13
msgid "This lesson is designed to introduce learners to the core concepts of R \n"
"that they will need in order to complete the other lessons\n"
"in this workshop. It is intended for learners who have no prior experience with\n"
"R. If your workshop learners have all completed another Software or Data \n"
"Carpentry R workshop, or have taken courses in R, you can skip this lesson\n"
"and move straight into the \n"
"[Introduction to Geospatial Raster and Vector Data with R](https://datacarpentry.org/r-raster-vector-geospatial/) lesson."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:21
msgid "This lesson is a trimmed-down version of the \n"
"[R for Reproducible Scientific Analysis](http://swcarpentry.github.io/r-novice-gapminder) SWC lesson. It does not cover visualization in detail, \n"
"as the later lesson in this workshop covers visualization in the context of\n"
"geospatial data. "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:26
# header
msgid "## Lesson design"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:28
# header
msgid "#### [Introduction to R and RStudio]({{ relative_root_path }}/{% link _episodes/01-rstudio-intro.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:30
# unordered list
msgid "* If your workshop includes the [Introduction to Geospatial Concepts](https://datacarpentry.org/organization-geospatial/) lesson, learners will have "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:31
msgid "just been introduced to RStudio in the context of the overall Geospatial \n"
"software landscape. \n"
"* Have your learners open RStudio and follow along as you explain each pane. Make sure that your RStudio environment is the default so learners can follow along.\n"
"* Be sure to explain how to execute code from the script window, whether you're\n"
"using the Run button or the keyboard shortcut. \n"
"* Learners will be using several libraries in the next lesson, so be sure to \n"
"introduce what a library is and how it is installed. "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:39
# header
msgid "#### [Project Management With RStudio]({{ relative_root_path }}/{% link _episodes/02-project-intro.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:41
# unordered list
msgid "* Make sure learners download the data files in Challenge 1 and move those files"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:42
msgid "to their `data/` directory. "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:44
# header
msgid "#### [Data Structures]({{ relative_root_path }}/{% link _episodes/03-data-structures-part1.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:46
# unordered list
msgid "* Learners will work with factors in the following lesson. Be sure to "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:47
msgid "cover this concept.\n"
"* If needed for time reasons, you can skip the section on lists. The learners\n"
"don't use lists in the rest of the workshop."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:51
# header
msgid "#### [Exploring Data Frames]({{ relative_root_path }}/{% link _episodes/04-data-structures-part2.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:53
# unordered list
msgid "* Pay attention to and explain the errors and warnings generated from the examples in this episode."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:55
# header
msgid "#### [Subsetting Data]({{ relative_root_path }}/{% link _episodes/05-data-subsetting.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:57
# unordered list
msgid "* The episode after this one covers the `dplyr` package, which has an "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:58
msgid "alternate subsetting mechanism. Learners do still need to learn the \n"
"base R subsetting covered here, as `dplyr` won't work in all situations. However,\n"
"the examples in the rest of the workshop focus on `dplyr` syntax."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:62
# header
msgid "#### [Dataframe Manipulation with dplyr]({{ relative_root_path }}/{% link _episodes/06-dplyr.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:64
# unordered list
msgid "* Introduce the `dplyr` package as a simpler, more intuitive way of doing"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:65
msgid "subsetting. \n"
"* Unlike other SWC and DC R lessons, this lesson does **not** include data \n"
"reshaping with `tidyr` as it isn't used in the rest of the workshop."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:69
# header
msgid "#### [Introduction to Visualization]({{ relative_root_path }}/{% link _episodes/07-plot-ggplot2.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:71
# unordered list
msgid "* This episode introduces `geom_col` and `geom_histogram`. These geoms are used"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:72
msgid "in the rest of the workshop, along with geoms specifically for geospatial data.\n"
"* Emphasize that we will go much deeper into visualization and creating\n"
"publication-quality graphics later in the workshop."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:76
# header
msgid "#### [Writing Data]({{ relative_root_path }}/{% link _episodes/08-writing-data.md %})"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:78
# unordered list
msgid "* Learners will need to have created the directory structure described in "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:79
msgid "[Project Management With RStudio]({{ relative_root_path }}{% link _episodes/02-project-intro.md %}) in order for the code\n"
"in this episode to work. "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:82
# header
msgid "#### Concluding remarks"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:84
# unordered list
msgid "* Now that learners know the fundamentals of R, the rest of the workshop"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:85
msgid "will apply these concepts to working with geospatial data in R. \n"
"* Packages and functions specific for working with geospatial data will be\n"
"the focus of the rest of the workshop. \n"
"* They will have lots of changes to practice applying and expanding these\n"
"skills in the next lesson. "
msgstr ""

#: r-intro-geospatial/_extras/guide.md:91
# header
msgid "## Technical tips and tricks"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:93
# unordered list
msgid "* Leave about 30 minutes at the start of each workshop and another 15 mins"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:94
msgid "at the start of each session for technical difficulties like WiFi and\n"
"installing things (even if you asked students to install in advance, longer if\n"
"not)."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:98
# unordered list
msgid "* Be sure to actually go through examples of an R help page: help files"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:99
msgid "can be intimidating at first, but knowing how to read them is tremendously\n"
"useful."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:102
# unordered list
msgid "* Don't worry about being correct or knowing the material back-to-front. Use"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:103
msgid "mistakes as teaching moments: the most vital skill you can impart is how to\n"
"debug and recover from unexpected errors."
msgstr ""

#: r-intro-geospatial/_extras/guide.md:106
# header
msgid "## Common problems"
msgstr ""

#: r-intro-geospatial/_extras/guide.md:108
msgid "TBA - Instructors please add situations you encounter here."
msgstr ""

#: r-intro-geospatial/aio.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"permalink: /aio/\n"
"permalink: /aio/index.html\n"
"---"
msgstr ""

#: r-intro-geospatial/aio.md:7
msgid "{% comment %}\n"
"As a maintainer, you don't need to edit this file.\n"
"If you notice that something doesn't work, please\n"
"open an issue: https://github.com/carpentries/styles/issues/new\n"
"{% endcomment %}"
msgstr ""

#: r-intro-geospatial/aio.md:15
msgid "{% include aio-script.md %}"
msgstr ""

#: r-intro-geospatial/index.md:1
# Front Matter
msgid "---\n"
"layout: lesson\n"
"---"
msgstr ""

#: r-intro-geospatial/index.md:7
msgid "The goal of this lesson is to provide an introduction to R for learners\n"
"working with geospatial data. It is intended as a pre-requisite for \n"
"the [R for Raster and Vector Data](https://datacarpentry.org/r-raster-vector-geospatial/) lesson\n"
"for learners who have no prior experience using R. This lesson can\n"
"be taught in approximately 4 hours and covers the following topics:"
msgstr ""

#: r-intro-geospatial/index.md:13
# unordered list
msgid "- Working with R in the RStudio GUI"
msgstr ""

#: r-intro-geospatial/index.md:14
# unordered list
msgid "- Project management and file organization"
msgstr ""

#: r-intro-geospatial/index.md:15
# unordered list
msgid "- Importing data into R"
msgstr ""

#: r-intro-geospatial/index.md:16
# unordered list
msgid "- Introduction to R's core data types and data structures"
msgstr ""

#: r-intro-geospatial/index.md:17
# unordered list
msgid "- Manipulation of data frames (tabular data) in R"
msgstr ""

#: r-intro-geospatial/index.md:18
# unordered list
msgid "- Introduction to visualization"
msgstr ""

#: r-intro-geospatial/index.md:19
# unordered list
msgid "- Writing data to a file"
msgstr ""

#: r-intro-geospatial/index.md:21
msgid "The the [R for Raster and Vector Data](https://datacarpentry.org/r-raster-vector-geospatial/) lesson\n"
"provides a more in-depth introduction to visualization (focusing on geospatial data),\n"
"and working with data structures unique to geospatial data."
msgstr ""

#: r-intro-geospatial/index.md:25
# blockquote, which can be cascaded
msgid "> ## Getting Started"
msgstr ""

#: r-intro-geospatial/index.md:26
msgid ">\n"
"> Data Carpentry's teaching is hands-on, so participants are encouraged to use\n"
"> their own computers to insure the proper setup of tools for an efficient \n"
"> workflow. <br>**This lesson assume no prior knowledge of R.**\n"
">\n"
"> To get started, follow the directions in the \"[Setup]({{ relative_root_path }}/{% link setup.md %})\" tab to \n"
"> download data to your computer and follow any installation instructions."
msgstr ""

#: r-intro-geospatial/index.md:33
# SC/DC Template label
msgid "{: .prereq}"
msgstr ""

#: r-intro-geospatial/reference.md:1
# Front Matter
msgid "---\n"
"layout: reference\n"
"---"
msgstr ""

#: r-intro-geospatial/reference.md:6
# header
msgid "## Reference"
msgstr ""

#: r-intro-geospatial/reference.md:8
# header
msgid "## [Introduction to R and RStudio]({{ relative_root_path }}/{% link _episodes/01-rstudio-intro.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:10
# unordered list
msgid " - Use the escape key to cancel incomplete commands or running code"
msgstr ""

#: r-intro-geospatial/reference.md:11
msgid "   (Ctrl+C) if you're using R from the shell.\n"
" - Basic arithmetic operations follow standard order of precedence:\n"
"   - Brackets: `(`, `)`\n"
"   - Exponents: `^` or `**`\n"
"   - Divide: `/`\n"
"   - Multiply: `*`\n"
"   - Add: `+`\n"
"   - Subtract: `-`\n"
" - Scientific notation is available, e.g: `2e-3`\n"
" - Anything to the right of a `#` is a comment, R will ignore this!\n"
" - Functions are denoted by `function_name()`. Expressions inside the\n"
"   brackets are evaluated before being passed to the function, and\n"
"   functions can be nested.\n"
" - Comparison operators: `<`, `<=`, `>`, `>=`, `==`, `!=`\n"
" - Use `all.equal` to compare numbers!\n"
" - `<-` is the assignment operator. Anything to the right is evaluate, then\n"
"   stored in a variable named to the left.\n"
" - `ls` lists all variables and functions you've created\n"
" - `rm` can be used to remove them\n"
" - When assigning values to function arguments, you _must_ use `=`."
msgstr ""

#: r-intro-geospatial/reference.md:32
# header
msgid "## [Project management with RStudio]({{ relative_root_path }}/{% link _episodes/02-project-intro.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:34
# unordered list
msgid " - To create a new project, go to File -> New Project"
msgstr ""

#: r-intro-geospatial/reference.md:35
# unordered list
msgid " - Some best practices:"
msgstr ""

#: r-intro-geospatial/reference.md:36
# unordered list
msgid "   * Treat data as read-only"
msgstr ""

#: r-intro-geospatial/reference.md:37
# unordered list
msgid "   * Keep cleaned data separate from raw dirty data"
msgstr ""

#: r-intro-geospatial/reference.md:38
# unordered list
msgid "   * Treat generated output as disposable"
msgstr ""

#: r-intro-geospatial/reference.md:39
# unordered list
msgid "   * Keep related data together"
msgstr ""

#: r-intro-geospatial/reference.md:40
# unordered list
msgid "   * Use a consistent naming scheme"
msgstr ""

#: r-intro-geospatial/reference.md:42
# header
msgid "## [Data Structures]({{ relative_root_path }}/{% link _episodes/03-data-structures-part1.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:44
# unordered list
msgid "- Use `read.csv()` to import data in memory"
msgstr ""

#: r-intro-geospatial/reference.md:45
# unordered list
msgid "- ` class()` gives you the data class of your object"
msgstr ""

#: r-intro-geospatial/reference.md:46
# unordered list
msgid "- R automatic converts data types"
msgstr ""

#: r-intro-geospatial/reference.md:47
# unordered list
msgid "- The functions: `length()`, `nrow()`, `head()`, `tail()`, and `str()` can be"
msgstr ""

#: r-intro-geospatial/reference.md:48
msgid "  useful to explore data.\n"
"- Factors are a special class to deal with categorical data.\n"
"- Lists provide a flexible data type.\n"
"- Data frames are a special case of lists."
msgstr ""

#: r-intro-geospatial/reference.md:53
# header
msgid "## [Exploring Data Frames]({{ relative_root_path }}/{% link _episodes/04-data-structures-part2.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:55
# unordered list
msgid "* R makes it easy to import datasets storred remotely"
msgstr ""

#: r-intro-geospatial/reference.md:56
# unordered list
msgid "* **[Data Frames]({{ relative_root_path }}/05-data-structures-part2/)**"
msgstr ""

#: r-intro-geospatial/reference.md:57
# unordered list
msgid " - `?data.frame` is a key data structure. It is a `list` of `vectors`."
msgstr ""

#: r-intro-geospatial/reference.md:58
# unordered list
msgid " - `cbind()` will add a column (vector) to a data.frame."
msgstr ""

#: r-intro-geospatial/reference.md:59
# unordered list
msgid " - `rbind()` will add a row (list) to a data.frame."
msgstr ""

#: r-intro-geospatial/reference.md:61
msgid " **Useful functions for querying data structures:**\n"
" - `?str` structure, prints out a summary of the whole data structure\n"
" - `?class` what is the data structure?\n"
" - `?head` print the first `n` elements (rows for two-dimensional objects)\n"
" - `?tail` print the last `n` elements (rows for two-dimensional objects)\n"
" - `?rownames`, `?colnames`, `?dimnames` retrieve or modify the row names\n"
"   and column names of an object.\n"
" - `?length` get the number of elements in an atomic vector\n"
" - `?nrow`, `?ncol`, `?dim` get the dimensions of a n-dimensional object\n"
"   (Won't work on atomic vectors or lists).\n"
"* If your data frame contains factors, you need to take extra steps to add rows\n"
"  that contain new level values."
msgstr ""

#: r-intro-geospatial/reference.md:74
# unordered list
msgid "- `read.csv` to read in data in a regular structure"
msgstr ""

#: r-intro-geospatial/reference.md:75
# unordered list
msgid "   - `sep` argument to specify the separator"
msgstr ""

#: r-intro-geospatial/reference.md:76
# unordered list
msgid "     - \",\" for comma separated"
msgstr ""

#: r-intro-geospatial/reference.md:77
# unordered list
msgid "     - \"\\t\" for tab separated"
msgstr ""

#: r-intro-geospatial/reference.md:78
# unordered list
msgid "   - Other arguments:"
msgstr ""

#: r-intro-geospatial/reference.md:79
# unordered list
msgid "     - `header=TRUE` if there is a header row"
msgstr ""

#: r-intro-geospatial/reference.md:82
# header
msgid "## [Subsetting data]({{ relative_root_path }}/{% link _episodes/05-data-subsetting.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:84
# unordered list
msgid " - Elements can be accessed by:"
msgstr ""

#: r-intro-geospatial/reference.md:85
# unordered list
msgid "   - Index"
msgstr ""

#: r-intro-geospatial/reference.md:86
# unordered list
msgid "   - Name"
msgstr ""

#: r-intro-geospatial/reference.md:87
# unordered list
msgid "   - Logical vectors"
msgstr ""

#: r-intro-geospatial/reference.md:89
# unordered list
msgid "- `[` single square brackets:"
msgstr ""

#: r-intro-geospatial/reference.md:90
# unordered list
msgid "   - *extract* single elements or *subset* vectors"
msgstr ""

#: r-intro-geospatial/reference.md:91
# unordered list
msgid "    - e.g.`x[1]` extracts the first item from vector x."
msgstr ""

#: r-intro-geospatial/reference.md:92
# unordered list
msgid "   - *extract* single elements of a list. The returned value will be another `list()`."
msgstr ""

#: r-intro-geospatial/reference.md:93
# unordered list
msgid "   - *extract* columns from a data.frame"
msgstr ""

#: r-intro-geospatial/reference.md:94
# unordered list
msgid " - `[` with two arguments to:"
msgstr ""

#: r-intro-geospatial/reference.md:95
# unordered list
msgid "   - *extract* rows and/or columns of"
msgstr ""

#: r-intro-geospatial/reference.md:96
# unordered list
msgid "     - matrices"
msgstr ""

#: r-intro-geospatial/reference.md:97
# unordered list
msgid "     - data.frames"
msgstr ""

#: r-intro-geospatial/reference.md:98
# unordered list
msgid "     - e.g. `x[1,2]` will extract the value in row 1, column 2."
msgstr ""

#: r-intro-geospatial/reference.md:99
# unordered list
msgid "     - e.g. `x[2,:]` will extract the entire second column of values."
msgstr ""

#: r-intro-geospatial/reference.md:101
# unordered list
msgid " - `[[` double square brackets to extract items from lists."
msgstr ""

#: r-intro-geospatial/reference.md:102
# unordered list
msgid " - `$` to access columns or list elements by name"
msgstr ""

#: r-intro-geospatial/reference.md:103
# unordered list
msgid " - negative indices skip elements"
msgstr ""

#: r-intro-geospatial/reference.md:106
# header
msgid "## [Data frame manipulation with dplyr]({{ relative_root_path }}/{% link _episodes/06-dplyr.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:109
# unordered list
msgid " - `?select` to extract variables by name."
msgstr ""

#: r-intro-geospatial/reference.md:110
# unordered list
msgid " - `?filter` return rows with matching conditions."
msgstr ""

#: r-intro-geospatial/reference.md:111
# unordered list
msgid " - `?group_by` group data by one of more variables."
msgstr ""

#: r-intro-geospatial/reference.md:112
# unordered list
msgid " - `?summarize` summarize multiple values to a single value."
msgstr ""

#: r-intro-geospatial/reference.md:113
# unordered list
msgid " - `?mutate` add new variables to a data.frame."
msgstr ""

#: r-intro-geospatial/reference.md:114
# unordered list
msgid " - `?count` and `?n` to tally values in the data frame."
msgstr ""

#: r-intro-geospatial/reference.md:115
# unordered list
msgid " - Combine operations using the `?\"%>%\"` pipe operator."
msgstr ""

#: r-intro-geospatial/reference.md:118
# header
msgid "## [Control flow]({{ relative_root_path }}/{% link _episodes/07-plot-ggplot2.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:121
# unordered list
msgid " - figures can be created with the grammar of graphics:"
msgstr ""

#: r-intro-geospatial/reference.md:122
# unordered list
msgid "   - `library(ggplot2)`"
msgstr ""

#: r-intro-geospatial/reference.md:123
# unordered list
msgid "   - `ggplot` to create the base figure"
msgstr ""

#: r-intro-geospatial/reference.md:124
# unordered list
msgid "   - `aes`thetics specify the data axes, shape, color, and data size"
msgstr ""

#: r-intro-geospatial/reference.md:125
# unordered list
msgid "   - `geom`etry functions specify the type of plot, e.g. `point`, `line`, `density`, `box`"
msgstr ""

#: r-intro-geospatial/reference.md:126
# unordered list
msgid "   - `geom`etry functions also add statistical transforms, e.g. `geom_smooth`"
msgstr ""

#: r-intro-geospatial/reference.md:127
# unordered list
msgid "   - `scale` functions change the mapping from data to aesthetics"
msgstr ""

#: r-intro-geospatial/reference.md:128
# unordered list
msgid "   - `facet` functions stratify the figure into panels"
msgstr ""

#: r-intro-geospatial/reference.md:129
# unordered list
msgid "   - `aes`thetics apply to individual layers, or can be set for the whole plot"
msgstr ""

#: r-intro-geospatial/reference.md:130
msgid "     inside `ggplot`.\n"
"   - `theme` functions change the overall look of the plot\n"
"   - order of layers matters!\n"
"   - `ggsave` to save a figure."
msgstr ""

#: r-intro-geospatial/reference.md:136
# header
msgid "## [Writing data]({{ relative_root_path }}/{% link _episodes/08-writing-data.md %})"
msgstr ""

#: r-intro-geospatial/reference.md:138
# unordered list
msgid " - `write.table` to write out objects in regular format"
msgstr ""

#: r-intro-geospatial/reference.md:141
# header
msgid "## Glossary"
msgstr ""

#: r-intro-geospatial/reference.md:143
msgid "{:auto_ids}\n"
"argument\n"
":   A value given to a function or program when it runs.\n"
"    The term is often used interchangeably (and inconsistently) with [parameter](#parameter)."
msgstr ""

#: r-intro-geospatial/reference.md:148
msgid "assign\n"
":   To give a value a name by associating a variable with it."
msgstr ""

#: r-intro-geospatial/reference.md:151
msgid "body\n"
":   (of a function): the statements that are executed when a function runs."
msgstr ""

#: r-intro-geospatial/reference.md:154
msgid "comment\n"
":   A remark in a program that is intended to help human readers understand what is going on,\n"
"    but is ignored by the computer.\n"
"    Comments in Python, R, and the Unix shell start with a `#` character and run to the end of the line;\n"
"    comments in SQL start with `--`,\n"
"    and other languages have other conventions."
msgstr ""

#: r-intro-geospatial/reference.md:161
msgid "comma-separated values\n"
":   (CSV) A common textual representation for tables\n"
"    in which the values in each row are separated by commas."
msgstr ""

#: r-intro-geospatial/reference.md:165
msgid "delimiter\n"
":   A character or characters used to separate individual values,\n"
"    such as the commas between columns in a [CSV](#comma-separated-values) file."
msgstr ""

#: r-intro-geospatial/reference.md:169
msgid "documentation\n"
":   Human-language text written to explain what software does,\n"
"    how it works, or how to use it."
msgstr ""

#: r-intro-geospatial/reference.md:173
msgid "floating-point number\n"
":   A number containing a fractional part and an exponent.\n"
"    See also: [integer](#integer)."
msgstr ""

#: r-intro-geospatial/reference.md:177
msgid "for loop\n"
":   A loop that is executed once for each value in some kind of set, list, or range.\n"
"    See also: [while loop](#while-loop)."
msgstr ""

#: r-intro-geospatial/reference.md:181
msgid "index\n"
":   A subscript that specifies the location of a single value in a collection,\n"
"    such as a single pixel in an image."
msgstr ""

#: r-intro-geospatial/reference.md:185
msgid "integer\n"
":   A whole number, such as -12343. See also: [floating-point number](#floating-point-number)."
msgstr ""

#: r-intro-geospatial/reference.md:188
msgid "library\n"
":   In R, the directory(ies) where [packages](#package) are stored."
msgstr ""

#: r-intro-geospatial/reference.md:191
msgid "package\n"
":   A collection of R functions, data and compiled code in a well-defined format. Packages are stored in a [library](#library) and loaded using the library() function."
msgstr ""

#: r-intro-geospatial/reference.md:194
msgid "parameter\n"
":   A variable named in the function's declaration that is used to hold a value passed into the call.\n"
"    The term is often used interchangeably (and inconsistently) with [argument](#argument)."
msgstr ""

#: r-intro-geospatial/reference.md:198
msgid "return statement\n"
":   A statement that causes a function to stop executing and return a value to its caller immediately."
msgstr ""

#: r-intro-geospatial/reference.md:201
msgid "sequence\n"
":   A collection of information that is presented in a specific order."
msgstr ""

#: r-intro-geospatial/reference.md:204
msgid "shape\n"
":   An array's dimensions, represented as a vector.\n"
"    For example, a 5×3 array's shape is `(5,3)`."
msgstr ""

#: r-intro-geospatial/reference.md:208
msgid "string\n"
":   Short for \"character string\",\n"
"    a [sequence](#sequence) of zero or more characters."
msgstr ""

#: r-intro-geospatial/reference.md:212
msgid "syntax error\n"
":   A programming error that occurs when statements are in an order or contain characters\n"
"    not expected by the programming language."
msgstr ""

#: r-intro-geospatial/reference.md:216
msgid "type\n"
":   The classification of something in a program (for example, the contents of a variable)\n"
"    as a kind of number (e.g. [floating-point](#float), [integer](#integer)), [string](#string),\n"
"    or something else. In R the command typeof() is used to query a variables type."
msgstr ""

#: r-intro-geospatial/reference.md:221
msgid "while loop\n"
":   A loop that keeps executing as long as some condition is true.\n"
"    See also: [for loop](#for-loop)."
msgstr ""

#: r-intro-geospatial/setup.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Setup\n"
"---"
msgstr ""

#: r-intro-geospatial/setup.md:6
msgid "This lesson is designed to be taught in conjunction with other lessons in the [Data Carpentry Geospatial workshop](http://www.datacarpentry.org/geospatial-workshop/). For information about required software, and to access the datasets used in this lesson, see the [setup instructions](http://www.datacarpentry.org/geospatial-workshop/) on the workshop homepage."
msgstr ""

