# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Maryna Raievska, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 17:09:14+0000\n"
"PO-Revision-Date: 2023-02-12 17:54+0000\n"
"Last-Translator: Maryna Raievska, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: gap-lesson/_episodes/04-testing.md:1
msgid ""
"---\n"
"title: \"Using regression tests\"\n"
"teaching: 40\n"
"exercises: 10\n"
"questions:\n"
"- \"Test-driven development\"\n"
"objectives:\n"
"- \"Be able to create and run test files\"\n"
"- \"Understand how test discrepancies and runtime regressions\n"
" can be identified and interpreted\"\n"
"- \"Understand how to adjust tests to check randomised algorithms\"\n"
"- \"Learn the 'Make it right, then make it fast' concept\"\n"
"keypoints:\n"
"- \"It is easy to create a test file by copying and pasting a GAP session.\"\n"
"- \"Writing a good and comprehensive test suite requires some effort.\"\n"
"- \"Make it right, then make it fast!\"\n"
"---"
msgstr ""
"title: \"Використання регресійних тестів\"\n"
"teaching: 40\n"
"exercises: 10\n"
"questions:\n"
"- \"Тестова розробка\"\n"
"objectives:\n"
"- \"Вміти створювати та запускати тестові файли\"\n"
"- \"Зрозуміти, як розбіжності тестів і регресії під час виконання можна ідентифікувати та інтерпретувати\"\n"
"- \"Зрозуміти, як налаштувати тести для перевірки рандомізованих алгоритмів\"\n"
"- \"Вивчити концепцію 'Зробіть спочатку правильно, а потім швидко'\"\n"
"keypoints:\n"
"- \"Легко створити тестовий файл, скопіювавши та вставивши сеанс GAP.\"\n"
"- \"Написання хорошого та комплексного набору тестів вимагає певних зусиль.\"\n"
"- \"Зробіть спочатку правильно, а потім швидко!\"\n"
"---"

#: gap-lesson/_episodes/04-testing.md:19
msgid ""
"The code of `AvgOrdOfGroup` is very simple, and nothing could possibly go wrong\n"
"with it. By iterating over the group instead of creating a list of its elements,\n"
"it avoids running out of memory\n"
"(calling `AsList(SymmetricGroup(11))` already results in exceeding the permitted\n"
"memory). That said, the computation still takes time, with several minutes\n"
"needed to calculate the average order of an\n"
"element of `SymmetricGroup(11)`. But at least we are confident that it is\n"
"correct."
msgstr ""
"Код `AvgOrdOfGroup` дуже простий, і з ним нічого не може піти \n"
"не так. Перебираючи групу замість створення списку її елементів,\n"
"це дозволяє уникнути нестачі пам'яті\n"
"(виклик `AsList(SymmetricGroup(11))` вже призводить до перевищення дозволеної\n"
"пам'яті). Тим не менш, обчислення все одно займає час, кілька хвилин\n"
"необхідні для розрахунку середнього порядку\n"
"елемента `SymmetricGroup(11)`. Але принаймні ми впевнені, що це\n"
"правильно."

#: gap-lesson/_episodes/04-testing.md:28
msgid ""
"Now we would like to write a better version of this function using some\n"
"theoretical facts we know from Group Theory. We may put\n"
"`avgord.g` under version control to revert changes if need be;\n"
"we may create a new function to keep the old one around and compare the\n"
"results of both; but this could be made even more efficient if we\n"
"use **regression testing**: this is the term for testing based on\n"
"rerunning previously completed tests to check that new changes do not\n"
"impact their correctness or worsen their performance."
msgstr ""
"Тепер ми хотіли б написати кращу версію цієї функції, використовуючи деякі теоретичні факти, \n"
"відомі нам із теорії груп. Ми можемо поставити\n"
"`avgord.g` під контроль версій, щоб скасувати зміни, якщо потрібно;\n"
"ми можемо створити нову функцію, щоб зберегти стару версію й порівняти\n"
"результати обох; але це можна зробити ще ефективнішим, якщо ми\n"
"використаємо **regression testing**: це термін для тестування на основі\n"
"повторних запусків раніше завершених тестів, щоб переконатися, що нові зміни не\n"
"вплинуть на їх коректність або не погіршать їх роботу."

#: gap-lesson/_episodes/04-testing.md:37
msgid ""
"To start with, we need to create a **test file**. The test file looks\n"
"exactly like a GAP session, so it is easy to create it by copying and\n"
"pasting a GAP session with all GAP prompts, inputs and outputs into a\n"
"text file (a test file could be also created from a log file with a\n"
"GAP session recorded with the help of `LogTo`). During the test, GAP will\n"
"run all inputs from the test file, compare the outputs with those in the test\n"
"file and report any differences."
msgstr ""
"Для початку нам потрібно створити **тестовий файл**. Тестовий файл виглядає\n"
"точно так само, як сеанс GAP, тому його легко створити, скопіювавши та\n"
"вставивши сеанс GAP з усіма підказками, входами та виходами GAP у\n"
"текстовий файл (тестовий файл також можна створити з файлу журналу із сеансом\n"
"GAP, записаним за допомогою `LogTo`). Під час тестування GAP\n"
"виконуватиме всі вхідні дані з тестового файлу, порівнюватиме результати з тими, що містяться в тестовому\n"
"файлі, і повідомлятиме про будь-які відмінності."

#: gap-lesson/_episodes/04-testing.md:45
msgid ""
"GAP test files are just text files, but the common practice is to name\n"
"them with the extension `.tst`. Now create the file `avgord.tst` in the current directory (to\n"
"avoid typing the full path) with the following content:"
msgstr ""
"Тестові файли GAP — це просто текстові файли, але загальноприйнятою практикою є назвати\n"
"їх із розширенням `.tst`. Тепер створіть файл `avgord.tst` у поточному каталозі (щоб\n"
"вводити повний шлях) з наступним вмістом:"

# code block
#: gap-lesson/_episodes/04-testing.md:49
msgid ""
"~~~\n"
"# tests for average order of a group element\n"
"\n"
"# permutation group\n"
"gap> S:=SymmetricGroup(9);\n"
"Sym( [ 1 .. 9 ] )\n"
"gap> AvgOrdOfGroup(S);\n"
"3291487/362880\n"
"~~~"
msgstr ""
"~~~\n"
"# тести на середній порядок елемента групи\n"
"\n"
"# група перестановок\n"
"gap> S:=SymmetricGroup(9);\n"
"Sym( [ 1 .. 9 ] )\n"
"gap> AvgOrdOfGroup(S);\n"
"3291487/362880\n"
"~~~"

#: gap-lesson/_episodes/04-testing.md:60
msgid ""
"As you see, the test file may include comments, with certain rules specifying\n"
"where they may be placed, because one should be able to distinguish comments\n"
"in the test file from GAP output started with `#`. For that purpose,\n"
"lines at the beginning of the test file that start with `#`, and one empty line\n"
"together with one or more lines starting with `#`, are considered as comments.\n"
"All other lines are interpreted as GAP output from the preceding GAP input."
msgstr ""
"Як ви бачите, тестовий файл може включати коментарі з певними правилами,\n"
"що визначають, де їх можна розміщувати, тому що потрібно мати можливість відрізнити\n"
"коментарі в тестовому файлі від вихідних даних GAP, які починаються з `#`. З цією метою,\n"
"рядки на початку тестового файлу, які починаються з `#`, і один порожній рядок\n"
"разом з одним або декількома рядками, що починаються з `#`, вважаються коментарями.\n"
"Усі інші рядки інтерпретуються як вихід GAP із попереднього введення GAP."

#: gap-lesson/_episodes/04-testing.md:67
msgid ""
"To run the test, one should use the function `Test`, as documented\n"
"[here](http://www.gap-system.org/Manuals/doc/ref/chap7.html#X87712F9D8732193C).\n"
"For example (assuming that the function `AvgOrdOfGroup` is already loaded):"
msgstr ""
"Щоб запустити тест, слід використовувати функцію `Test`, як описано в документації\n"
"[here](http://www.gap-system.org/Manuals/doc/ref/chap7.html#X87712F9D8732193C).\n"
"Наприклад (за умови, що функція `AvgOrdOfGroup` вже завантажена):"

# code block
#: gap-lesson/_episodes/04-testing.md:71
#: gap-lesson/_episodes/04-testing.md:133
msgid ""
"~~~\n"
"Test(\"avgord.tst\");\n"
"~~~"
msgstr ""
"~~~\n"
"Test(\"avgord.tst\");\n"
"~~~"

#: gap-lesson/_episodes/04-testing.md:81
msgid ""
"In this case, `Test` reported no discrepancies and returned `true`, so we\n"
"conclude that the test has passed."
msgstr ""
"У цьому випадку `Test` не повідомив про відсутність розбіжностей і повернув `true`, тому\n"
"ми робимо висновок, що перевірку пройдено."

#: gap-lesson/_episodes/04-testing.md:84
msgid ""
"We will not cover the topic of writing a good and comprehensive test suite here,\n"
"nor will we cover the various options of the `Test` function, allowing us, for\n"
"example, to ignore differences in the output formatting, or to display the progress\n"
"of the test, as these are described in its documentation."
msgstr ""
"Ми не розглядатимемо тут тему написання гарного та комплексного набору тестів,\n"
"а також не будемо розглядати різні параметри функції `Test`, що дозволяє нам,\n"
"наприклад, ігнорувати відмінності у форматуванні виводу або відображати хід виконання\n"
"тесту, як це описано в його документації."

#: gap-lesson/_episodes/04-testing.md:89
msgid ""
"Instead, we will now add more groups to `avgord.tst`, to demonstrate that the\n"
"code also works with other kinds of groups, and to show various ways of\n"
"combining commands in the test file:"
msgstr ""
"Замість цього ми додамо більше груп до `avgord.tst`, щоб продемонструвати, \n"
"що код також працює з іншими типами груп, і показати різні способи\n"
"поєднання команд у тестовому файлі:"

# code block
#: gap-lesson/_episodes/04-testing.md:93
msgid ""
"~~~\n"
"# tests for average order of a group element\n"
"\n"
"# permutation group\n"
"gap> S:=SymmetricGroup(9);\n"
"Sym( [ 1 .. 9 ] )\n"
"gap> AvgOrdOfGroup(S);\n"
"3291487/362880\n"
"\n"
"# pc group\n"
"gap> D:=DihedralGroup(512);\n"
"<pc group of size 512 with 9 generators>\n"
"gap> AvgOrdOfGroup(D);\n"
"44203/512\n"
"gap> G:=TrivialGroup();; # suppress output\n"
"gap> AvgOrdOfGroup(G);\n"
"1\n"
"\n"
"# fp group\n"
"gap> F:=FreeGroup(\"a\",\"b\");\n"
"<free group on the generators [ a, b ]>\n"
"gap> G:=F/ParseRelators(GeneratorsOfGroup(F),\"a^8=b^2=1, b^-1ab=a^-1\");\n"
"<fp group on the generators [ a, b ]>\n"
"gap> IsFinite(G);\n"
"true\n"
"gap> AvgOrdOfGroup(G);\n"
"59/16\n"
"\n"
"# finite matrix group over integers\n"
"gap> AvgOrdOfGroup( Group( [[0,-1],[1,0]] ) );\n"
"11/4\n"
"\n"
"# matrix group over a finite field\n"
"gap> AvgOrdOfGroup(SL(2,5));\n"
"221/40\n"
"~~~"
msgstr ""
"~~~\n"
"# тести на середній порядок елемента групи\n"
"\n"
"# група перестановок\n"
"gap> S:=SymmetricGroup(9);\n"
"Sym( [ 1 .. 9 ] )\n"
"gap> AvgOrdOfGroup(S);\n"
"3291487/362880\n"
"\n"
"# pc група\n"
"gap> D:=DihedralGroup(512);\n"
"<pc group of size 512 with 9 generators>\n"
"gap> AvgOrdOfGroup(D);\n"
"44203/512\n"
"gap> G:=TrivialGroup();; # suppress output\n"
"gap> AvgOrdOfGroup(G);\n"
"1\n"
"\n"
"# fp група\n"
"gap> F:=FreeGroup(\"a\",\"b\");\n"
"<free group on the generators [ a, b ]>\n"
"gap> G:=F/ParseRelators(GeneratorsOfGroup(F),\"a^8=b^2=1, b^-1ab=a^-1\");\n"
"<fp group on the generators [ a, b ]>\n"
"gap> IsFinite(G);\n"
"true\n"
"gap> AvgOrdOfGroup(G);\n"
"59/16\n"
"\n"
"# скінченна група матриць над цілими числами\n"
"gap> AvgOrdOfGroup( Group( [[0,-1],[1,0]] ) );\n"
"11/4\n"
"\n"
"# група матриць над скінченним полем\n"
"gap> AvgOrdOfGroup(SL(2,5));\n"
"221/40\n"
"~~~"

#: gap-lesson/_episodes/04-testing.md:131
msgid ""
"Let us test the extended version of the test again and check that it works:"
msgstr ""
"Давайте ще раз протестуємо розширену версію тесту та перевіримо, чи вона "
"працює:"

#: gap-lesson/_episodes/04-testing.md:143
msgid ""
"Now we will work on a better implementation. Of course, the order of an element\n"
"is an invariant of a conjugacy class of elements of a group, so we need only to\n"
"know the orders of conjugacy classes of elements and their representatives. The\n"
"following code, which we add into `avgord.g`, reads into GAP and redefines\n"
"`AvgOrdOfGroup` without any syntax errors:"
msgstr ""
"Зараз ми будемо працювати над кращою реалізацією. Звичайно, порядок елемента\n"
"є інваріантом класу спряженості елементів групи, тому нам потрібно лише знати порядки класів спряженості елементів та їх представників. \n"
"Наступний код, який ми додаємо до `avgord.g`, зчитує GAP і перевизначає\n"
"`AvgOrdOfGroup` без синтаксичних помилок:"

# code block
#: gap-lesson/_episodes/04-testing.md:149
msgid ""
"~~~\n"
"AvgOrdOfGroup := function(G)\n"
"local cc, sum, c;\n"
"cc:=ConjugacyClasses(G);\n"
"sum:=0;\n"
"for c in cc do\n"
"  sum := sum + Order( Representative(c) ) * Size(cc);\n"
"od;\n"
"return sum/Size(G);\n"
"end;\n"
"~~~"
msgstr ""
"~~~\n"
"AvgOrdOfGroup := function(G)\n"
"local cc, sum, c;\n"
"cc:=ConjugacyClasses(G);\n"
"sum:=0;\n"
"for c in cc do\n"
"  sum := sum + Order( Representative(c) ) * Size(cc);\n"
"od;\n"
"return sum/Size(G);\n"
"end;\n"
"~~~"

#: gap-lesson/_episodes/04-testing.md:162
msgid "but when we run the test, here comes a surprise!"
msgstr "але коли ми запускаємо тест, ось сюрприз!"

# code block
#: gap-lesson/_episodes/04-testing.md:164
#: gap-lesson/_episodes/04-testing.md:226
msgid ""
"~~~\n"
"Read(\"avgord.g\");\n"
"Test(\"avgord.tst\");\n"
"~~~"
msgstr ""
"~~~\n"
"Read(\"avgord.g\");\n"
"Test(\"avgord.tst\");\n"
"~~~"

# code block
#: gap-lesson/_episodes/04-testing.md:170
msgid ""
"~~~\n"
"########> Diff in avgord.tst, line 6:\n"
"# Input is:\n"
"AvgOrdOfGroup(S);\n"
"# Expected output:\n"
"3291487/362880\n"
"# But found:\n"
"11/672\n"
"########\n"
"########> Diff in avgord.tst, line 12:\n"
"# Input is:\n"
"AvgOrdOfGroup(D);\n"
"# Expected output:\n"
"44203/512\n"
"# But found:\n"
"2862481/512\n"
"########\n"
"########> Diff in avgord.tst, line 23:\n"
"# Input is:\n"
"AvgOrdOfGroup(G);\n"
"# Expected output:\n"
"59/16\n"
"# But found:\n"
"189/16\n"
"########\n"
"########> Diff in avgord.tst, line 29:\n"
"# Input is:\n"
"AvgOrdOfGroup(SL(2,5));\n"
"# Expected output:\n"
"221/40\n"
"# But found:\n"
"69/20\n"
"########\n"
"false\n"
"~~~"
msgstr ""
"~~~\n"
"########> Diff in avgord.tst, line 6:\n"
"# Ввід:\n"
"AvgOrdOfGroup(S);\n"
"# Очікуваний вивід:\n"
"3291487/362880\n"
"# Але знайдено:\n"
"11/672\n"
"########\n"
"########> Diff in avgord.tst, line 12:\n"
"# Ввід:\n"
"AvgOrdOfGroup(D);\n"
"# Очікуваний вивід:\n"
"44203/512\n"
"# Але знайдено:\n"
"2862481/512\n"
"########\n"
"########> Diff in avgord.tst, line 23:\n"
"# Ввід:\n"
"AvgOrdOfGroup(G);\n"
"# Очікуваний вивід:\n"
"59/16\n"
"# Але знайдено:\n"
"189/16\n"
"########\n"
"########> Diff in avgord.tst, line 29:\n"
"# Ввід:\n"
"AvgOrdOfGroup(SL(2,5));\n"
"# Очікуваний вивід:\n"
"221/40\n"
"# Але знайдено:\n"
"69/20\n"
"########\n"
"false\n"
"~~~"

#: gap-lesson/_episodes/04-testing.md:207
msgid ""
"Indeed, we made a typo (deliberately) and replaced `Size(c)` by `Size(cc)`.\n"
"The correct version of course should look as follows:"
msgstr ""
"Дійсно, ми допустили помилку (навмисно) і замінили `Size(c)` на `Size(cc)`.\n"
"Правильний варіант курсу має виглядати так:"

# code block
#: gap-lesson/_episodes/04-testing.md:210
msgid ""
"~~~\n"
"AvgOrdOfGroup := function(G)\n"
"local cc, sum, c;\n"
"cc:=ConjugacyClasses(G);\n"
"sum:=0;\n"
"for c in cc do\n"
"  sum := sum + Order( Representative(c) ) * Size(c);\n"
"od;\n"
"return sum/Size(G);\n"
"end;\n"
"~~~"
msgstr ""
"~~~\n"
"AvgOrdOfGroup := function(G)\n"
"local cc, sum, c;\n"
"cc:=ConjugacyClasses(G);\n"
"sum:=0;\n"
"for c in cc do\n"
"  sum := sum + Order( Representative(c) ) * Size(c);\n"
"od;\n"
"return sum/Size(G);\n"
"end;\n"
"~~~"

#: gap-lesson/_episodes/04-testing.md:223
msgid ""
"Now we will fix this in `avgord.g`, and read and test it again to check that\n"
"the tests run correctly."
msgstr ""
"Тепер ми виправимо це в `avgord.g`, прочитаємо та протестуємо його знову, щоб перевірити,\n"
" чи тести виконуються правильно."

#: gap-lesson/_episodes/04-testing.md:237
msgid ""
"Thus, the approach 'Make it right, then make it fast' helped detect a bug\n"
"immediately after it has been introduced."
msgstr ""
"Таким чином, підхід «Зробіть спочатку правильно, а потім швидко» допоміг виявити помилку\n"
"відразу після її появи."
