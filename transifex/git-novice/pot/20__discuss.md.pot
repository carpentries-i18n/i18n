# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 20:18:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: git-novice/_extras/discuss.md:1
# Front Matter
msgid "---\n"
"layout: page\n"
"title: Discussion\n"
"---"
msgstr ""

#: git-novice/_extras/discuss.md:6
# header
msgid "## Frequently Asked Questions"
msgstr ""

#: git-novice/_extras/discuss.md:8
msgid "People often have questions about Git beyond the scope of the core material.\n"
"Students who have completed the rest of the lessons might find value in looking through the following topics."
msgstr ""

#: git-novice/_extras/discuss.md:11
msgid "Note that since this material isn't essential for basic Git usage, it won't be covered by the instructor."
msgstr ""

#: git-novice/_extras/discuss.md:13
# header
msgid "## More Advanced Git Configuration"
msgstr ""

#: git-novice/_extras/discuss.md:15
msgid "In [Setting Up Git]({{ page.root }}/02-setup/),\n"
"we used `git config --global` to set some default options for Git.\n"
"It turns out that these configuration options get stored in your home directory\n"
"in a plain text file called `.gitconfig`."
msgstr ""

#: git-novice/_extras/discuss.md:20
# code block
msgid "~~~\n"
"$ cat ~/.gitconfig\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:25
# code block
msgid "~~~\n"
"[user]\n"
"	name = Vlad Dracula\n"
"	email = vlad@tran.sylvan.ia\n"
"[color]\n"
"	ui = true\n"
"[core]\n"
"	editor = nano\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:36
msgid "This file can be opened in your preferred text editor.\n"
"(Note that it is recommended to continue using the `git config` command,\n"
"as this helps avoid introducing syntax errors.)"
msgstr ""

#: git-novice/_extras/discuss.md:40
msgid "Eventually, you will want to start customizing Git's behaviour.\n"
"This can be done by adding more entries to your `.gitconfig`.\n"
"The available options are described in the manual:"
msgstr ""

#: git-novice/_extras/discuss.md:44
# code block
msgid "~~~\n"
"$ git config --help\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:49
msgid "In particular, you might find it useful to add aliases.\n"
"These are like shortcuts for longer Git commands.\n"
"For example, if you get sick of typing `git checkout` all the time,\n"
"you could run the command:"
msgstr ""

#: git-novice/_extras/discuss.md:54
# code block
msgid "~~~\n"
"$ git config --global alias.co checkout\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:59
msgid "Now if we return to the example from [Exploring History]({{ page.root }}/05-history/) where we ran:"
msgstr ""

#: git-novice/_extras/discuss.md:66
msgid "we could now instead type:"
msgstr ""

#: git-novice/_extras/discuss.md:68
# code block
msgid "~~~\n"
"$ git co f22b25e mars.txt\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:73
# header
msgid "## Styling Git's Log"
msgstr ""

#: git-novice/_extras/discuss.md:75
msgid "A good target for customization is output from the log.\n"
"The default log is quite verbose but gives no graphical hints\n"
"such as information about which commits were done locally\n"
"and which were pulled from remotes."
msgstr ""

#: git-novice/_extras/discuss.md:80
msgid "You can use `git log --help` and `git config --help` to look for different ways to change\n"
"the log output.\n"
"Try the following commands and see what effect they have:"
msgstr ""

#: git-novice/_extras/discuss.md:84
# code block
msgid "~~~\n"
"$ git config --global alias.lg \"log --graph\"\n"
"$ git config --global log.abbrevCommit true\n"
"$ git config --global format.pretty oneline\n"
"$ git lg\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:92
msgid "If you don't like the effects,\n"
"you can undo them with:"
msgstr ""

#: git-novice/_extras/discuss.md:95
# code block
msgid "~~~\n"
"$ git config --global --unset alias.lg\n"
"$ git config --global --unset log.abbrevCommit\n"
"$ git config --global --unset format.pretty\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:102
# blockquote, which can be cascaded
msgid "> ## Undoing Git Configuration Changes"
msgstr ""

#: git-novice/_extras/discuss.md:103
msgid ">\n"
"> You can use the `--unset` flag to delete unwanted options from `.gitconfig`.\n"
"> Another way to roll back changes is to store your `.gitconfig` using Git.\n"
">\n"
"> For hints on what you might want to configure,\n"
"> go to GitHub and search for \"gitconfig\".\n"
"> You will find hundreds of repositories in which people have stored\n"
"> their own Git configuration files.\n"
"> Sort them by the number of stars and have a look at the top few.\n"
"> If you find some you like,\n"
"> please check that they're covered by an open source license before you clone them."
msgstr ""

#: git-novice/_extras/discuss.md:116
# header
msgid "## Non-text Files"
msgstr ""

#: git-novice/_extras/discuss.md:118
msgid "Recall when we discussed [Conflicts]({{ page.root }}/09-conflict/)\n"
"there was a challenge that asked,\n"
"\"What does Git do\n"
"when there is a conflict in an image or some other non-textual file\n"
"that is stored in version control?\""
msgstr ""

#: git-novice/_extras/discuss.md:124
msgid "We will now revisit this in more detail."
msgstr ""

#: git-novice/_extras/discuss.md:126
msgid "Many people want to version control non-text files, such as images, PDFs and Microsoft Office or LibreOffice documents.\n"
"It is true that Git can handle these filetypes (which fall under the banner of \"binary\" file types).\n"
"However, just because it *can* be done doesn't mean it *should* be done."
msgstr ""

#: git-novice/_extras/discuss.md:130
msgid "Much of Git's magic comes from being able to do line-by-line comparisons (\"diffs\") between files.\n"
"This is generally easy for programming source code and marked up text.\n"
"For non-text files, a diff can usually only detect that the files have changed\n"
"but can't say how or where."
msgstr ""

#: git-novice/_extras/discuss.md:135
msgid "This has various impacts on Git's performance and will make it difficult to\n"
"compare different versions of your project."
msgstr ""

#: git-novice/_extras/discuss.md:138
msgid "For a basic example to show the difference it makes,\n"
"we're going to go see what would have happened if Dracula had tried\n"
"using outputs from a word processor instead of plain text."
msgstr ""

#: git-novice/_extras/discuss.md:142
msgid "Create a new directory and go into it:"
msgstr ""

#: git-novice/_extras/discuss.md:144
# code block
msgid "~~~\n"
"$ mkdir planets-nontext\n"
"$ cd planets-nontext\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:150
msgid "Use a program such as Microsoft Word or LibreOffice Writer to create a new document.\n"
"Enter the same text that we began with before:"
msgstr ""

#: git-novice/_extras/discuss.md:158
msgid "Save the document into the `planets-nontext` directory with the name of `mars.doc`.\n"
"Back in the terminal, run the usual commands for setting up a new Git repository:"
msgstr ""

#: git-novice/_extras/discuss.md:161
# code block
msgid "~~~\n"
"$ git init\n"
"$ git add mars.doc\n"
"$ git commit -m \"Starting to think about Mars\"\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:168
msgid "Then make the same changes to `mars.doc` that we (or Vlad) previously made to `mars.txt`."
msgstr ""

#: git-novice/_extras/discuss.md:176
msgid "Save and close the word processor.\n"
"Now see what Git thinks of your changes:"
msgstr ""

#: git-novice/_extras/discuss.md:184
# code block
msgid "~~~\n"
"diff --git a/mars.doc b/mars.doc\n"
"index 53a66fd..6e988e9 100644\n"
"Binary files a/mars.doc and b/mars.doc differ\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:191
msgid "Compare this to the earlier `git diff` obtained when using text files:"
msgstr ""

#: git-novice/_extras/discuss.md:204
msgid "Notice how plain text files give a much more informative diff.\n"
"You can see exactly which lines changed and what the changes were."
msgstr ""

#: git-novice/_extras/discuss.md:207
msgid "An uninformative `git diff` is not the only consequence of using Git on binary files.\n"
"However, most of the other problems boil down to whether or not a good diff is possible."
msgstr ""

#: git-novice/_extras/discuss.md:210
msgid "This isn't to say you should *never* use Git on binary files.\n"
"A rule of thumb is that it's OK if the binary file won't change very often,\n"
"and if it does change, you don't care about merging in small differences between versions."
msgstr ""

#: git-novice/_extras/discuss.md:214
msgid "We've already seen how a word processed report will fail this test.\n"
"An example that passes the test is a logo for your organization or project.\n"
"Even though a logo will be stored in a binary format such as `jpg` or `png`,\n"
"you can expect it will remain fairly static through the lifetime of your repository.\n"
"On the rare occasion that branding does change,\n"
"you will probably just want to replace the logo completely rather than merge little differences in."
msgstr ""

#: git-novice/_extras/discuss.md:221
# header
msgid "## Removing a File"
msgstr ""

#: git-novice/_extras/discuss.md:223
msgid "Adding and modifying files are not the only actions one might take\n"
"when working on a project.  It might be required to remove a file\n"
"from the repository."
msgstr ""

#: git-novice/_extras/discuss.md:227
msgid "Create a new file for the planet Nibiru:"
msgstr ""

#: git-novice/_extras/discuss.md:229
# code block
msgid "~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:234
msgid "Now add to the repository like you have learned earlier:"
msgstr ""

#: git-novice/_extras/discuss.md:236
# code block
msgid "~~~\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding info on nibiru'\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:249
msgid "Nibiru is not a real planet.  That was a silly idea.  Let us remove\n"
"it from the disk and let Git know about it:"
msgstr ""

#: git-novice/_extras/discuss.md:252
#: git-novice/_extras/discuss.md:317
# code block
msgid "~~~\n"
"$ git rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:258
#: git-novice/_extras/discuss.md:323
# code block
msgid "~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"   (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"   deleted:    nibiru.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:268
msgid "The change has been staged.  Now commit the removal, and remove the\n"
"file from the repository itself.  Note that the file will be removed\n"
"in the new commit.  The previous commit will still\n"
"have the file, if you were to retrieve that specific commit."
msgstr ""

#: git-novice/_extras/discuss.md:273
# code block
msgid "~~~\n"
"$ git commit -m 'Removing info on Nibiru.  It is not a real planet!'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:278
# header
msgid "## Removing a File with Unix"
msgstr ""

#: git-novice/_extras/discuss.md:280
msgid "Sometimes we might forget to remove the file through Git. If you removed the\n"
"file with Unix `rm` instead of using `git rm`, no worries,\n"
"Git is smart enough to notice the missing file. Let us recreate the file and\n"
"commit it again."
msgstr ""

#: git-novice/_extras/discuss.md:285
# code block
msgid "~~~\n"
"$ echo \"This is another name for fake planet X\" > nibiru.txt\n"
"$ git add nibiru.txt\n"
"$ git commit -m 'adding nibiru again'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:292
msgid "Now we remove the file with Unix `rm`:"
msgstr ""

#: git-novice/_extras/discuss.md:294
# code block
msgid "~~~\n"
"$ rm nibiru.txt\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:300
# code block
msgid "~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"   (use \"git add/rm <file>...\" to update what will be committed)\n"
"   (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    deleted:    nibiru.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:312
msgid "See how Git has noticed that the file `nibiru.txt` has been removed\n"
"from the disk.  The next step is to \"stage\" the removal of the file\n"
"from the repository.  This is done with the command `git rm` just as\n"
"before."
msgstr ""

#: git-novice/_extras/discuss.md:333
msgid "The change that was made in Unix has now been staged and needs to be\n"
"committed."
msgstr ""

#: git-novice/_extras/discuss.md:336
# code block
msgid "~~~\n"
"$ git commit -m 'Removing info on Nibiru, again!'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:341
# header
msgid "## Renaming a File"
msgstr ""

#: git-novice/_extras/discuss.md:343
msgid "Another common change when working on a project is to rename a file."
msgstr ""

#: git-novice/_extras/discuss.md:345
msgid "Create a file for the planet Krypton:"
msgstr ""

#: git-novice/_extras/discuss.md:347
# code block
msgid "~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:352
msgid "Add it to the repository:"
msgstr ""

#: git-novice/_extras/discuss.md:354
# code block
msgid "~~~\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:360
msgid "We all know that Superman moved to Earth.  Not that he had much\n"
"choice.  Now his home planet is Earth."
msgstr ""

#: git-novice/_extras/discuss.md:363
msgid "Rename the file `krypton.txt` to `earth.txt` with Git:"
msgstr ""

#: git-novice/_extras/discuss.md:365
# code block
msgid "~~~\n"
"$ git mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:371
# code block
msgid "~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"	renamed:    krypton.txt -> earth.txt\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:379
msgid "The final step is commit our change to the repository:"
msgstr ""

#: git-novice/_extras/discuss.md:381
# code block
msgid "~~~\n"
"$ git commit -m 'Superman's home is now Earth'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:386
# header
msgid "## Renaming a File with Unix"
msgstr ""

#: git-novice/_extras/discuss.md:388
msgid "If you forgot to use Git and you used Unix `mv` instead\n"
"of `git mv`, you will have a touch more work to do but Git will\n"
"be able to deal with it. Let's try again renaming the file,\n"
"this time with Unix `mv`. First, we need to recreate the\n"
"`krypton.txt` file:"
msgstr ""

#: git-novice/_extras/discuss.md:394
# code block
msgid "~~~\n"
"$ echo \"Superman's home planet\" > krypton.txt\n"
"$ git add krypton.txt\n"
"$ git commit -m 'Adding planet Krypton again.'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:401
msgid "Let us rename the file and see what Git can figured out by itself:"
msgstr ""

#: git-novice/_extras/discuss.md:403
# code block
msgid "~~~\n"
"$ mv krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:409
# code block
msgid "~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add/rm <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"        deleted:    krypton.txt\n"
"\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"    earth.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:426
msgid "Git has noticed that the file `krypton.txt` has disappeared from the\n"
"file system and a new file `earth.txt` has showed up."
msgstr ""

#: git-novice/_extras/discuss.md:429
msgid "Add those changes to the staging area:"
msgstr ""

#: git-novice/_extras/discuss.md:431
# code block
msgid "~~~\n"
"$ git add krypton.txt earth.txt\n"
"$ git status\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:437
# code block
msgid "~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    renamed:    krypton.txt -> earth.txt\n"
"\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:447
msgid "Notice how Git has now figured out that the `krypton.txt` has not\n"
"disappeared - it has simply been renamed."
msgstr ""

#: git-novice/_extras/discuss.md:450
msgid "The final step, as before, is to commit our change to the repository:"
msgstr ""

#: git-novice/_extras/discuss.md:452
# code block
msgid "~~~\n"
"$ git commit -m 'Superman's home is Earth, told you before.'\n"
"~~~"
msgstr ""

#: git-novice/_extras/discuss.md:457
# header
msgid "## Further .gitignore concepts"
msgstr ""

#: git-novice/_extras/discuss.md:459
msgid "For additional documentation on .gitignore, please reference\n"
"[the official git documentation](https://git-scm.com/docs/gitignore)."
msgstr ""

#: git-novice/_extras/discuss.md:462
msgid "In the ignore exercise, learners were presented with two variations of ignoring\n"
"nested files. Depending on the organization of your repository, one may suit\n"
"your needs over another. Keep in mind that the way that Git travels along\n"
"directory paths can be confusing. "
msgstr ""

#: git-novice/_extras/discuss.md:467
msgid "Sometimes the `**` pattern comes in handy, too, which matches multiple\n"
"directory levels. E.g. `**/results/plots/*` would make git ignore the\n"
"`results/plots` directory in any root directory.  "
msgstr ""

#: git-novice/_extras/discuss.md:471
# blockquote, which can be cascaded
msgid "> ## Ignoring Nested Files: Challenge Problem"
msgstr ""

#: git-novice/_extras/discuss.md:472
msgid ">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> results/run001.log\n"
"> results/run002.log\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> And a .gitignore that looks like:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> ~~~"
msgstr ""

#: git-novice/_extras/discuss.md:489
msgid ">\n"
"> How would you track all of the contents of `results/data/`, including `*.dat`\n"
"> files, but ignore the rest of `results/`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > To do this, your .gitignore would look like this:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat                 # ignore the .dat files\n"
"> > results/*             # ignore the files in the results directory\n"
"> > !results/data/        # do not ignore the files in results/data\n"
"> > !results/data/*       # do not ignore the .dat files in reults/data\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""

