# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Sofiia Matios, 2023
# Olexandr Konovalov, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 20:18:53+0000\n"
"PO-Revision-Date: 2023-02-12 20:20+0000\n"
"Last-Translator: Olexandr Konovalov, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: git-novice/_episodes/06-ignore.md:1
msgid ""
"---\n"
"title: Ignoring Things\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I tell Git to ignore files I don't want to track?\"\n"
"objectives:\n"
"- \"Configure Git to ignore specific files.\"\n"
"- \"Explain why ignoring files can be useful.\"\n"
"keypoints:\n"
"- \"The `.gitignore` file tells Git what files to ignore.\"\n"
"---"
msgstr ""
"---\n"
"title: Ігнорування файлів\n"
"teaching: 5\n"
"exercises: 0\n"
"questions:\n"
"- \"Як зробити щоб Git ігнорував файли, які я не хочу відстежувати?\"\n"
"objectives:\n"
"- \"Налаштувати Git для ігнорування певних файлів.\"\n"
"- \"Зрозуміти чому ігнорування файлів може бути корисним.\"\n"
"keypoints:\n"
"- \"Файл `.gitignore` інформує Git про те, які файли треба ігнорувати.\"\n"
"---"

#: git-novice/_episodes/06-ignore.md:14
msgid ""
"What if we have files that we do not want Git to track for us,\n"
"like backup files created by our editor\n"
"or intermediate files created during data analysis?\n"
"Let's create a few dummy files:"
msgstr ""
"Що робити, якщо у нас є файли, які ми не хочемо відстежувати у Git,\n"
"наприклад, резервні файли, створені нашим редактором\n"
"або проміжні файли, створені під час аналізу даних?\n"
"Давайте створимо кілька фіктивних файлів:"

# code block
#: git-novice/_episodes/06-ignore.md:19
msgid ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir results\n"
"$ touch a.dat b.dat c.dat results/a.out results/b.out\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:25
msgid "and see what Git says:"
msgstr "і подивимося що скаже Git:"

# code block
#: git-novice/_episodes/06-ignore.md:32
msgid ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\ta.dat\n"
"\tb.dat\n"
"\tc.dat\n"
"\tresults/\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:46
msgid ""
"Putting these files under version control would be a waste of disk space.\n"
"What's worse,\n"
"having them all listed could distract us from changes that actually matter,\n"
"so let's tell Git to ignore them."
msgstr ""
"Відстеження цих файлів за допомогою контролю версій буде марною тратою дискового простору.\n"
"Що гірше,\n"
"висвітлення змін в них, під час перегляду історії або статусу проєкту може відвернути нас від змін, які насправді мають значення,\n"
"тож давайте скажемо Git, що їх треба ігнорувати."

#: git-novice/_episodes/06-ignore.md:51
msgid ""
"We do this by creating a file in the root directory of our project called "
"`.gitignore`:"
msgstr ""
"Ми можемо зробити це, створюючи у кореневій директорії нашого проєкту файл "
"під назвою `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:53
msgid ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano .gitignore\n"
"$ cat .gitignore\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:59
msgid ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"
msgstr ""
"~~~\n"
"*.dat\n"
"results/\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:65
msgid ""
"These patterns tell Git to ignore any file whose name ends in `.dat`\n"
"and everything in the `results` directory.\n"
"(If any of these files were already being tracked,\n"
"Git would continue to track them.)"
msgstr ""
"Цей синтакс наказує Git ігнорувати будь-який файл, ім'я якого закінчується на `.dat`\n"
"та все, що знаходиться у директорії `results`.\n"
"(Якщо будь-які з цих файлів вже відстежуються,\n"
"Git продовжить їх відстежувати.)"

#: git-novice/_episodes/06-ignore.md:70
msgid ""
"Once we have created this file,\n"
"the output of `git status` is much cleaner:"
msgstr ""
"Як тільки ми створили цей файл,\n"
"результат `git status` стає набагато зрозумілішим:"

# code block
#: git-novice/_episodes/06-ignore.md:78
msgid ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Untracked files:\n"
"  (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\t.gitignore\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:89
msgid ""
"The only thing Git notices now is the newly-created `.gitignore` file.\n"
"You might think we wouldn't want to track it,\n"
"but everyone we're sharing our repository with will probably want to ignore\n"
"the same things that we're ignoring.\n"
"Let's add and commit `.gitignore`:"
msgstr ""
"Єдина річ, яку Git помічає зараз - це новостворений файл `.gitignore`.\n"
"Ви можете подумати, що ми не хотіли б відстежувати його,\n"
"але всі, з ким ми ділимося нашим репозиторієм, ймовірно, захочуть ігнорувати\n"
"те ж саме, що ми ігноруємо.\n"
"Давайте додамо до репозиторію та зробимо коміт файлу `.gitignore`:"

# code block
#: git-novice/_episodes/06-ignore.md:95
msgid ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add .gitignore\n"
"$ git commit -m \"Ignore data files and the results folder.\"\n"
"$ git status\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:108
msgid ""
"As a bonus, using `.gitignore` helps us avoid accidentally adding files to "
"the repository that we don't want to track:"
msgstr ""
"Як бонус, використання `.gitignore` допомагає нам уникнути випадкового "
"додавання до репозиторію файлів, які ми не хочемо відстежувати:"

# code block
#: git-novice/_episodes/06-ignore.md:110
msgid ""
"~~~\n"
"$ git add a.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add a.dat\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:115
msgid ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"
msgstr ""
"~~~\n"
"The following paths are ignored by one of your .gitignore files:\n"
"a.dat\n"
"Use -f if you really want to add them.\n"
"~~~"

#: git-novice/_episodes/06-ignore.md:122
msgid ""
"If we really want to override our ignore settings,\n"
"we can use `git add -f` to force Git to add something. For example,\n"
"`git add -f a.dat`.\n"
"We can also always see the status of ignored files if we want:"
msgstr ""
"Якщо ми дійсно хочемо змінити наші налаштування ігнорування,\n"
"ми можемо використати `git add -f`, щоб змусити Git додати щось. Наприклад,\n"
"`git add -f a.dat`.\n"
"Ми також завжди можемо бачити статус ігнорованих файлів, якщо хочемо:"

# code block
#: git-novice/_episodes/06-ignore.md:127
msgid ""
"~~~\n"
"$ git status --ignored\n"
"~~~"
msgstr ""
"~~~\n"
"$ git status --ignored\n"
"~~~"

# code block
#: git-novice/_episodes/06-ignore.md:132
msgid ""
"~~~\n"
"On branch main\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working tree clean\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Ignored files:\n"
" (use \"git add -f <file>...\" to include in what will be committed)\n"
"\n"
"        a.dat\n"
"        b.dat\n"
"        c.dat\n"
"        results/\n"
"\n"
"nothing to commit, working tree clean\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:146
msgid "> ## Ignoring Nested Files"
msgstr "> ## Ігнорування файлів у піддиректоріях"

#: git-novice/_episodes/06-ignore.md:147
msgid ""
">\n"
"> Given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore only `results/plots` and not `results/data`?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If you only want to ignore the contents of\n"
"> > `results/plots`, you can change your `.gitignore` to ignore\n"
"> > only the `/plots/` subfolder by adding the following line to\n"
"> > your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > results/plots/\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > This line will ensure only the contents of `results/plots` is ignored, and\n"
"> > not the contents of `results/data`.\n"
"> >\n"
"> > As with most programming issues, there\n"
"> > are a few alternative ways that one may ensure this ignore rule is followed.\n"
"> > The \"Ignoring Nested Files: Variation\" exercise has a slightly\n"
"> > different directory structure\n"
"> > that presents an alternative solution.\n"
"> > Further, the discussion page has more detail on ignore rules."
msgstr ""
">\n"
"> Враховуючи структуру директорій, яка виглядає як:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> як зробити так, щоб Git ігнорував тільки `results/plots`, а не `results/data`?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Якщо ви тільки хочете ігнорувати вміст\n"
"> > `results/plots`, ви можете зробити це\n"
"> > шляхом додавання наступного рядка до\n"
"> > вашого .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > results/plots/\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Цей рядок забезпечить ігнорування лише вмісту `results/plots`, але \n"
"> > не вмісту `results/data`.\n"
"> >\n"
"> > Як і в більшості питань програмування,\n"
"> > є ще кілька альтернативних способів, які можуть забезпечити виконання цього правила ігнорування.\n"
"> > Вправа «Варіант ігнорування вкладених файлів» має трохи\n"
"> > іншу структуру директорій,\n"
"> > та пояснює альтернативне рішення.\n"
"> > Крім того, сторінка обговорення має більш детальну інформацію про правила ігнорування."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:182
msgid "> ## Including Specific Files"
msgstr "> ## Додавання конкретних файлів"

#: git-novice/_episodes/06-ignore.md:183
msgid ""
">\n"
"> How would you ignore all `.dat` files in your root directory except for\n"
"> `final.dat`?\n"
"> Hint: Find out what `!` (the exclamation point operator) does\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > You would add the following two lines to your .gitignore:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat           # ignore all data files\n"
"> > !final.dat      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The exclamation point operator will include a previously excluded entry.\n"
"> >\n"
"> > Note also that because you've previously committed `.dat` files in this\n"
"> > lesson they will not be ignored with this new rule. Only future additions\n"
"> > of `.dat` files added to the root directory will be ignored."
msgstr ""
">\n"
"> Як ігнорувати всі файли `.dat` у кореневій директорії, за вийнятком\n"
"> `final.dat`?\n"
"> Підказка: Дізнайтеся, що робить «!» (оператор знаку оклику)\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Треба додати наступні два рядки до вашого файлу `.gitignore`:\n"
"> >\n"
"> > ~~~\n"
"> > *.dat           # ignore all data files\n"
"> > !final.dat      # except final.data\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Оператор знаку оклику призведе до включення раніше виключеного запису.\n"
"> >\n"
"> > Зверніть увагу також на те, що, оскільки ви раніше вже зберегли файли `.dat` у комітах зроблених в цьому\n"
"> > уроці, вони не будуть проігноровані з цим новим правилом. Тільки майбутні додавання \n"
"> > `.dat` файлів до кореневої директорії будуть проігноровані."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:206
msgid "> ## Ignoring Nested Files: Variation"
msgstr "> ## Варіант ігнорування вкладених файлів"

#: git-novice/_episodes/06-ignore.md:207
msgid ""
">\n"
"> Given a directory structure that looks similar to the earlier Nested Files\n"
"> exercise, but with a slightly different directory structure:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/images\n"
"> results/plots\n"
"> results/analysis\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> How would you ignore all of the contents in the results folder, but not `results/data`?\n"
">\n"
"> Hint: think a bit about how you created an exception with the `!` operator\n"
"> before.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If you want to ignore the contents of\n"
"> > `results/` but not those of `results/data/`, you can change your `.gitignore` to ignore\n"
"> > the contents of results folder, but create an exception for the contents of the\n"
"> > `results/data` subfolder. Your .gitignore would look like this:\n"
"> >\n"
"> > ~~~\n"
"> > results/*               # ignore everything in results folder\n"
"> > !results/data/          # do not ignore results/data/ contents\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Нехай ми маємо структуру каталогів, яка схожа на попередню вправу \"Ігнорування файлів у піддиректоріях\",\n"
"> проте, з трішки іншою структурою директорій:\n"
">\n"
"> ~~~\n"
"> results/data\n"
"> results/images\n"
"> results/plots\n"
"> results/analysis\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Як би ви проігнорували весь вміст у папці `results`, окрім `results/data`?\n"
">\n"
"> Підказка: подумайте трохи про те, як ви попередньо створили виняток\n"
"> за допомогою оператору `!`.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Якщо ви хочете ігнорувати вміст\n"
"> > `results/` але не `results/data/`, ви можете змінити ваш`.gitignore`, щоб ігнорувати\n"
"> > вміст папки `results`, але створити виняток для вмісту\n"
"> > підпапки `results/data`. Ваш `.gitignore` буде виглядати так:\n"
"> >\n"
"> > ~~~\n"
"> > results/*               # ignore everything in results folder\n"
"> > !results/data/          # do not ignore results/data/ contents\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:239
msgid "> ## Ignoring all data Files in a Directory"
msgstr "> ## Ігнорування всіх Файлів даних у Директорії"

#: git-novice/_episodes/06-ignore.md:240
msgid ""
">\n"
"> Assuming you have an empty .gitignore file, and given a directory structure that looks like:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.dat\n"
"> results/data/position/gps/b.dat\n"
"> results/data/position/gps/c.dat\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What's the shortest `.gitignore` rule you could write to ignore all `.dat`\n"
"> files in `result/data/position/gps`? Do not ignore the `info.txt`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Appending `results/data/position/gps/*.dat` will match every file in `results/data/position/gps`\n"
"> > that ends with `.dat`.\n"
"> > The file `results/data/position/gps/info.txt` will not be ignored."
msgstr ""
">\n"
"> Припустимо, що у вас порожній .gitignore файл, і дано структуру каталогів, яка виглядає як:\n"
">\n"
"> ~~~\n"
"> results/data/position/gps/a.dat\n"
"> results/data/position/gps/b.dat\n"
"> results/data/position/gps/c.dat\n"
"> results/data/position/gps/info.txt\n"
"> results/plots\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Яке найкоротше правило `.gitignore` ви можете написати, щоб ігнорувати файли `.dat`\n"
"> в `result/data/position/gps`? Не ігноруйте `info.txt`.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Додавання `results/data/position/gps/*.dat` буде відповідати кожному з файлів у `results/data/position/gps`,\n"
"> > які закінчуються на `.dat`.\n"
"> > Файл `results/data/position/gps/info.txt` не буде проігноровано."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:263
msgid "> ## Ignoring all data Files in the repository"
msgstr "> ## Ігнорування всіх файлів з даними у репозиторії"

#: git-novice/_episodes/06-ignore.md:264
msgid ""
">\n"
"> Let us assume you have many `.dat` files in different subdirectories of your repository.\n"
"> For example, you might have:\n"
"> \n"
"> ~~~\n"
"> results/a.dat\n"
"> data/experiment_1/b.dat\n"
"> data/experiment_2/c.dat\n"
"> data/experiment_2/variation_1/d.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> How do you ignore all the `.dat` files, without explicitly listing the names of the corresponding folders?\n"
"> \n"
"> > ## Solution\n"
"> >\n"
"> > In the `.gitignore` file, write:\n"
"> > \n"
"> > ~~~\n"
"> > **/*.dat               \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > This will ignore all the `.dat` files, regardless of their position in the directory tree. \n"
"> > You can still include some specific exception with the exclamation point operator."
msgstr ""
">\n"
"> Припустимо, що у вас є багато файлів «.dat» в різних піддиректоріях вашого репозиторію.\n"
"> Наприклад, у вас є:\n"
"> \n"
"> ~~~\n"
"> results/a.dat\n"
"> data/experiment_1/b.dat\n"
"> data/experiment_2/c.dat\n"
"> data/experiment_2/variation_1/d.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> \n"
"> Як ігнорувати всі файли «.dat», не вказуючи явно імена усіх відповідних папок?\n"
"> \n"
"> > ## Відповідь\n"
"> >\n"
"> > У файлі `.gitignore` напишіть:\n"
"> > \n"
"> > ~~~\n"
"> > **/*.dat               \n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Це ігноруватиме всі файли `.dat`, незалежно від їх позиції у дереві директорій. \n"
"> > Ви все ще можете робити певні винятки з цього правила за допомогою знаку оклику."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:292
msgid "> ## The Order of Rules"
msgstr "> ## Порядок застосування правил"

#: git-novice/_episodes/06-ignore.md:293
msgid ""
">\n"
"> Given a `.gitignore` file with the following contents:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> !*.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What will be the result?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The `!` modifier will negate an entry from a previously defined ignore pattern.\n"
"> > Because the `!*.dat` entry negates all of the previous `.dat` files in the `.gitignore`,\n"
"> > none of them will be ignored, and all `.dat` files will be tracked."
msgstr ""
">\n"
"> Нехай дано файл `.gitignore` з наступним вмістом:\n"
">\n"
"> ~~~\n"
"> *.dat\n"
"> !*.dat\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Яким буде результат?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Модифікатор `!` скасує запис з раніше визначеного шаблону ігнорування.\n"
"> > Оскільки запис `! *.dat` скасовує всі попередні файли `.dat` в `.gitignore`,\n"
"> > жоден з них не буде проігноровано, і всі файли `.dat` будуть відслідковуватися."

# blockquote, which can be cascaded
#: git-novice/_episodes/06-ignore.md:312
msgid "> ## Log Files"
msgstr "> ## Log-файли "

#: git-novice/_episodes/06-ignore.md:313
msgid ""
">\n"
"> You wrote a script that creates many intermediate log-files of the form `log_01`, `log_02`, `log_03`, etc.\n"
"> You want to keep them but you do not want to track them through `git`.\n"
">\n"
"> 1. Write **one** `.gitignore` entry that excludes files of the form `log_01`, `log_02`, etc.\n"
">\n"
"> 2. Test your \"ignore pattern\" by creating some dummy files of the form `log_01`, etc.\n"
">\n"
"> 3. You find that the file `log_01` is very important after all, add it to the tracked files without changing the `.gitignore` again.\n"
">\n"
"> 4. Discuss with your neighbor what other types of files could reside in your directory that you do not want to track and thus would exclude via `.gitignore`.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. append either `log_*`  or  `log*`  as a new entry in your .gitignore\n"
"> > 3. track `log_01` using   `git add -f log_01`"
msgstr ""
">\n"
"> Ви написали скрипт, який створює багато проміжних log-файлів з назвами `log_01`, `log_02`, `log_03`, т.д.\n"
"> Ви хочете зберегти їх, але ви не хочете відстежувати їх через `git`.\n"
">\n"
"> 1. Напишіть **один** `.gitignore` запис, що виключає файли форми `log_01`, `log_02`, т.д.\n"
">\n"
"> 2. Перевірте свій \"шаблон ігнорування\", створивши деякі фіктивні файли з назвою `log_01`, т.д.\n"
">\n"
"> 3. Уявіть, що файл `log_01` дуже важливий, та додайте його до вдслідковуваних файлів, не змінюючи `.gitignore`.\n"
">\n"
"> 4. Обговоріть з сусідом, які інші типи файлів можуть перебувати у вашому проєкті, які ви не бажаєте відслідковувати і тому бажаєте проігнорувати їх з `.gitignore`.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > 1. додайте або `log_*`  або  `log*`  як новий запис у вашому `.gitignore`\n"
"> > 3. відстежте `log_01`, використовуючи `git add -f log_01`"
