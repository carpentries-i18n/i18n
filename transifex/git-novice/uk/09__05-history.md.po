# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Sofiia Matios, 2023
# Olexandr Konovalov, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 20:18:53+0000\n"
"PO-Revision-Date: 2023-02-12 20:20+0000\n"
"Last-Translator: Olexandr Konovalov, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: git-novice/_episodes/05-history.md:1
msgid ""
"---\n"
"title: Exploring History\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"How can I identify old versions of files?\"\n"
"- \"How do I review my changes?\"\n"
"- \"How can I recover old versions of files?\"\n"
"objectives:\n"
"- \"Explain what the HEAD of a repository is and how to use it.\"\n"
"- \"Identify and use Git commit numbers.\"\n"
"- \"Compare various versions of tracked files.\"\n"
"- \"Restore old versions of files.\"\n"
"keypoints:\n"
"- \"`git diff` displays differences between commits.\"\n"
"- \"`git checkout` recovers old versions of files.\"\n"
"---"
msgstr ""
"---\n"
"title: Перегляд історії\n"
"teaching: 25\n"
"exercises: 0\n"
"questions:\n"
"- \"Як визначити старі версії файлів?\"\n"
"- \"Як переглянути свої зміни?\"\n"
"- \"Як відновити старі версії файлів?\"\n"
"objectives:\n"
"- \"Пояснення що таке HEAD репозиторію та як його використовувати.\"\n"
"- \"Визначення та використання відносних номерів комітів Git.\"\n"
"- \"Порівняння різних версій відслідковуваних файлів.\"\n"
"- \"Відновлення старих версій файлів.\"\n"
"keypoints:\n"
"- \"`git diff` відображає відмінності між файлами.\"\n"
"- \"`git checkout` відновлює старі версії файлів.\"\n"
"---"

#: git-novice/_episodes/05-history.md:19
msgid ""
"As we saw in the previous episode, we can refer to commits by their\n"
"identifiers.  You can refer to the _most recent commit_ of the working\n"
"directory by using the identifier `HEAD`."
msgstr ""
"Як ми побачили у попередньому епізоді, ми можемо посилатися на коміти за їх\n"
"ідентифікаторами. Ви можете звернутися до _останнього коміту_ робочої\n"
"директорії, використовуючи ідентифікатор `HEAD`."

#: git-novice/_episodes/05-history.md:23
msgid ""
"We've been adding one line at a time to `mars.txt`, so it's easy to track our\n"
"progress by looking, so let's do that using our `HEAD`s.  Before we start,\n"
"let's make a change to `mars.txt`, adding yet another line."
msgstr ""
"Кожного разу ми додавали тільки один рядок до `mars.txt`, тож нам буде легко відслідкувати досягнутий\n"
"прогрес. Отже, давайте зробимо це, використовуючи `HEAD`.  Перш ніж ми почнемо,\n"
"давайте внесемо зміни до `mars.txt`, додавши ще один рядок."

# code block
#: git-novice/_episodes/05-history.md:33
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"An ill-considered change\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"An ill-considered change\n"
"~~~"

#: git-novice/_episodes/05-history.md:41
msgid "Now, let's see what we get."
msgstr "Тепер давайте подивимося на наш результат."

# code block
#: git-novice/_episodes/05-history.md:43
msgid ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:48
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
" But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change.\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index b36abfd..0848c8d 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,3 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
" But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change.\n"
"~~~"

#: git-novice/_episodes/05-history.md:61
msgid ""
"which is the same as what you would get if you leave out `HEAD` (try it).  The\n"
"real goodness in all this is when you can refer to previous commits.  We do\n"
"that by adding `~1` \n"
"(where \"~\" is \"tilde\", pronounced [**til**-d*uh*]) \n"
"to refer to the commit one before `HEAD`."
msgstr ""
"Він такий ж самий, який би ви отримали без використання `HEAD` (спробуйте).  Справжня\n"
"перевага від цього відчувається коли ви можете посилатися на попередні коміти.  Ми можемо\n"
"робити це, додаючи `~1` \n"
"(де \"~\" - це тільда), \n"
"щоб звернутися до коміту зробленому безпосередньо перед `HEAD`."

# code block
#: git-novice/_episodes/05-history.md:67
msgid ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD~1 mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:72
msgid ""
"If we want to see the differences between older commits we can use `git diff`\n"
"again, but with the notation `HEAD~1`, `HEAD~2`, and so on, to refer to them:"
msgstr ""
"Якщо ми хочемо побачити різницю між старішими комітами, ми можемо знову використати `git diff`,\n"
"проте, з нотацією `HEAD~1`, `HEAD~2`, і так далі, щоб звернутися до них:"

# code block
#: git-novice/_episodes/05-history.md:76
msgid ""
"~~~\n"
"$ git diff HEAD~3 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff HEAD~3 mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:81
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"

#: git-novice/_episodes/05-history.md:94
msgid ""
"We could also use `git show` which shows us what changes we made at an older commit as \n"
"well as the commit message, rather than the _differences_ between a commit and our \n"
"working directory that we see by using `git diff`."
msgstr ""
"Ми також можемо використати команду `git show`, яка показує які зміни ми внесли у будь-якому попередньо зробленому коміті, а також і повідомлення коміту, на відміну від команди `git diff` \n"
"яка покаже _різницю_ між комітом та нашою \n"
"робочою директорією."

# code block
#: git-novice/_episodes/05-history.md:98
msgid ""
"~~~\n"
"$ git show HEAD~3 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git show HEAD~3 mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:103
msgid ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"\n"
"diff --git a/mars.txt b/mars.txt\n"
"new file mode 100644\n"
"index 0000000..df0654a\n"
"--- /dev/null\n"
"+++ b/mars.txt\n"
"@@ -0,0 +1 @@\n"
"+Cold and dry, but everything is my favorite color\n"
"~~~"

#: git-novice/_episodes/05-history.md:120
msgid ""
"In this way,\n"
"we can build up a chain of commits.\n"
"The most recent end of the chain is referred to as `HEAD`;\n"
"we can refer to previous commits using the `~` notation,\n"
"so `HEAD~1`\n"
"means \"the previous commit\",\n"
"while `HEAD~123` goes back 123 commits from where we are now."
msgstr ""
"Таким чином,\n"
"ми можемо створити послідовність комітів.\n"
"Найпізніший кінець послідовності позначається як `HEAD`;\n"
"ми можемо посилатися на попередні коміти, використовуючи позначення `~`,\n"
"тож `HEAD~1`\n"
"означає \"попередній коміт\",\n"
"а `HEAD~123` повертається на 123 коміти назад від точки, де ми зараз знаходимось."

#: git-novice/_episodes/05-history.md:128
msgid ""
"We can also refer to commits using\n"
"those long strings of digits and letters\n"
"that `git log` displays.\n"
"These are unique IDs for the changes,\n"
"and \"unique\" really does mean unique:\n"
"every change to any set of files on any computer\n"
"has a unique 40-character identifier.\n"
"Our first commit was given the ID\n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"so let's try this:"
msgstr ""
"Ми також можемо вказувати на коміти, використовуючи\n"
"ті довгі рядки цифр і букв,\n"
"які показує `git log`.\n"
"Це унікальні ідентифікатори змін,\n"
"де \"унікальні\" дійсно означає унікальні:\n"
"кожна зміна будь-якого набору файлів на будь-якому комп`ютері\n"
"має унікальний 40-символьний ідентифікатор.\n"
"Наш перший коміт отримав ідентифікатор \n"
"`f22b25e3233b4645dabd0d81e651fe074bd8e73b`,\n"
"тож давайте спробуємо наступне:"

# code block
#: git-novice/_episodes/05-history.md:139
msgid ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:144
#: git-novice/_episodes/05-history.md:166
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..93a3e13 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,4 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"+An ill-considered change\n"
"~~~"

#: git-novice/_episodes/05-history.md:157
msgid ""
"That's the right answer,\n"
"but typing out random 40-character strings is annoying,\n"
"so Git lets us use just the first few characters (typically seven for normal size projects):"
msgstr ""
"Це правильна відповідь,\n"
"проте, введення випадкових 40-символьних рядків незручно,\n"
"тож Git дозволяє нам використовувати тільки перші кілька символів (як правило, сім для проєктів нормального розміру):"

# code block
#: git-novice/_episodes/05-history.md:161
msgid ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff f22b25e mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:179
msgid ""
"All right! So\n"
"we can save changes to files and see what we've changed. Now, how\n"
"can we restore older versions of things?\n"
"Let's suppose we change our mind about the last update to\n"
"`mars.txt` (the \"ill-considered change\")."
msgstr ""
"Дуже добре! Тож\n"
"ми можемо зберегти зміни в файли і подивитися, що ми змінили. Тепер, як\n"
"ми можемо відновити старіші версії речей?\n"
"Припустимо, що ми передумали щодо останнього оновлення файлу\n"
"`mars.txt` (рядок \"ill-considered change\")."

#: git-novice/_episodes/05-history.md:185
msgid ""
"`git status` now tells us that the file has been changed,\n"
"but those changes haven't been staged:"
msgstr ""
"`git status` тепер каже нам, що файл був змінений,\n"
"але ці зміни не були додані до зони стейджингу:"

# code block
#: git-novice/_episodes/05-history.md:193
msgid ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_episodes/05-history.md:205
msgid ""
"We can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"Ми можемо повернути усе як було\n"
"за допомогою `git checkout`:"

# code block
#: git-novice/_episodes/05-history.md:208
msgid ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"$ cat mars.txt\n"
"~~~"

#: git-novice/_episodes/05-history.md:221
msgid ""
"As you might guess from its name,\n"
"`git checkout` checks out (i.e., restores) an old version of a file.\n"
"In this case,\n"
"we're telling Git that we want to recover the version of the file recorded in `HEAD`,\n"
"which is the last saved commit.\n"
"If we want to go back even further,\n"
"we can use a commit identifier instead:"
msgstr ""
"Як ви можете здогадатися з назви цієї команди,\n"
"`git checkout` знаходить (тобто відновлює) стару версію файлу.\n"
"В цьому випадку,\n"
"ми кажемо Git що ми бажаємо відновити версію файлу, записану в `HEAD`\n"
"(тобто у останньому зробленому коміті).\n"
"Якщо ми хочемо повернутися ще раніше,\n"
"замість цього ми можемо використовувати ідентифікатор коміту:"

# code block
#: git-novice/_episodes/05-history.md:229 git-novice/_extras/discuss.md:61
msgid ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout f22b25e mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/05-history.md:249
msgid ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes to be committed:\n"
"  (use \"git reset HEAD <file>...\" to unstage)\n"
"\n"
"    modified:   mars.txt\n"
"\n"
"~~~"

#: git-novice/_episodes/05-history.md:259
msgid ""
"Notice that the changes are currently in the staging area.\n"
"Again, we can put things back the way they were\n"
"by using `git checkout`:"
msgstr ""
"Звернуть увагу, що в даний момент зміни знаходяться в зоні стейджінгу.\n"
"Знову ж таки, ми можемо повернути речі назад, так як вони були,\n"
"використовуючи `git checkout`:"

# code block
#: git-novice/_episodes/05-history.md:263
msgid ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git checkout HEAD mars.txt\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:268
msgid "> ## Don't Lose Your HEAD"
msgstr "> ## Не Загубіть Ваш HEAD"

#: git-novice/_episodes/05-history.md:269
msgid ""
">\n"
"> Above we used\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> to revert `mars.txt` to its state after the commit `f22b25e`. But be careful! \n"
"> The command `checkout` has other important functionalities and Git will misunderstand\n"
"> your intentions if you are not accurate with the typing. For example, \n"
"> if you forget `mars.txt` in the previous command.\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> Note: checking out 'f22b25e'.\n"
">\n"
"> You are in 'detached HEAD' state. You can look around, make experimental\n"
"> changes and commit them, and you can discard any commits you make in this\n"
"> state without impacting any branches by performing another checkout.\n"
">\n"
"> If you want to create a new branch to retain commits you create, you may\n"
"> do so (now or later) by using -b with the checkout command again. Example:\n"
">\n"
">  git checkout -b <new-branch-name>\n"
">\n"
"> HEAD is now at f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Вище ми використовували\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> щоб повернути `mars.txt`до свого стану після комміту `f22b25e`. Проте, будьте обережні! \n"
"> Команда `checkout` має інші важливі вараінти використання, та Git не зрозуміє\n"
"> ваших намірів, якщо ви будете неточно вводити команди. Наприклад, \n"
"> якщо ви забудете `mars.txt` у попередній команді.\n"
">\n"
"> ~~~\n"
"> $ git checkout f22b25e\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> Note: checking out 'f22b25e'.\n"
">\n"
"> You are in 'detached HEAD' state. You can look around, make experimental\n"
"> changes and commit them, and you can discard any commits you make in this\n"
"> state without impacting any branches by performing another checkout.\n"
">\n"
"> If you want to create a new branch to retain commits you create, you may\n"
"> do so (now or later) by using -b with the checkout command again. Example:\n"
">\n"
"> git checkout -b 1\n"
">\n"
"> HEAD is now at f22b25e Start notes on Mars as a base\n"
"> ~~~"

# SC/DC Template label
#: git-novice/_episodes/05-history.md:300
msgid "> {: .error}"
msgstr "> {: .error}"

#: git-novice/_episodes/05-history.md:301
msgid ""
">\n"
"> The \"detached HEAD\" is like \"look, but don't touch\" here,\n"
"> so you shouldn't make any changes in this state.\n"
"> After investigating your repo's past state, reattach your `HEAD` with `git checkout main`."
msgstr ""
">\n"
"> Таким чином, стан\"detached HEAD\" - це наче \"дивися, але не чіпай\",\n"
"> так що ви не маєте робити ніяких змін в цьому стані.\n"
"> Після дослідження попереднього стану вашого репозиторію, \"прикріпіть\" `HEAD` за допомогою команди `git checkout main`."

#: git-novice/_episodes/05-history.md:307
msgid ""
"It's important to remember that\n"
"we must use the commit number that identifies the state of the repository\n"
"*before* the change we're trying to undo.\n"
"A common mistake is to use the number of\n"
"the commit in which we made the change we're trying to discard.\n"
"In the example below, we want to retrieve the state from before the most\n"
"recent commit (`HEAD~1`), which is commit `f22b25e`:"
msgstr ""
"Важливо пам`ятати , що\n"
"ми повинні використовувати номер коміту, який ідентифікує стан репозиторію\n"
"*перед* зміною, яку ми намагаємося скасувати.\n"
"Поширена помилка - використовувати номер коміту,\n"
"в якому ми зробили зміни, які намагаємося скасувати.\n"
"У наведеному нижче прикладі ми хочемо отримати стан перед самим\n"
"нещодавнім комітом (`HEAD~1`), тобто коміт `f22b25e`:"

#: git-novice/_episodes/05-history.md:315
msgid "![Git Checkout](../fig/git-checkout.svg)"
msgstr "![Git Checkout](../fig/git-checkout.svg)"

#: git-novice/_episodes/05-history.md:317
msgid ""
"So, to put it all together,\n"
"here's how Git works in cartoon form:"
msgstr ""
"Отже, якщо скласти це все разом,\n"
"то Git працює як зображено у цьому коміксі:"

#: git-novice/_episodes/05-history.md:320
msgid ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266](../fig/git_staging.svg)"
msgstr ""
"![https://figshare.com/articles/How_Git_works_a_cartoon/1328266](../fig/git_staging.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:322
msgid "> ## Simplifying the Common Case"
msgstr "> ## Спрощення типової ситуації"

#: git-novice/_episodes/05-history.md:323
msgid ""
">\n"
"> If you read the output of `git status` carefully,\n"
"> you'll see that it includes this hint:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"> ~~~"
msgstr ""
">\n"
"> Якщо уважно прочитати результат команди `git status`,\n"
"> ви побачите, що він включає в себе цю підказку:\n"
">\n"
"> ~~~\n"
"> (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"> ~~~"

#: git-novice/_episodes/05-history.md:331
msgid ""
">\n"
"> As it says,\n"
"> `git checkout` without a version identifier restores files to the state saved in `HEAD`.\n"
"> The double dash `--` is needed to separate the names of the files being recovered\n"
"> from the command itself:\n"
"> without it,\n"
"> Git would try to use the name of the file as the commit identifier."
msgstr ""
">\n"
"> Як сказано раніше,\n"
"> `git checkout` без ідентифікатора версії відновлює файли до стану, збереженого в `HEAD`.\n"
"> Подвійне тире `--` необхідне щоб відділити імена файлів, які відновлюються,\n"
"> від самої команди:\n"
"> без подвійного тире\n"
"> Git буде намагатися використати назву файлу як ідентифікатор коміту."

#: git-novice/_episodes/05-history.md:340
msgid ""
"The fact that files can be reverted one by one\n"
"tends to change the way people organize their work.\n"
"If everything is in one large document,\n"
"it's hard (but not impossible) to undo changes to the introduction\n"
"without also undoing changes made later to the conclusion.\n"
"If the introduction and conclusion are stored in separate files,\n"
"on the other hand,\n"
"moving backward and forward in time becomes much easier."
msgstr ""
"Той факт, що файли можна відновлювати окремо,\n"
"сприяє змінам в організації роботи.\n"
"Якщо все знаходиться в одному величезному документі,\n"
"буде важко (але не неможливо) скасувати зміни у вступі\n"
"без скасування також змін, внесених пізніше до висновку.\n"
"З іншого боку,\n"
"якщо вступ і висновок зберігаються в окремих файлах,\n"
"рухатися вперед і назад в часі стає набагато легше."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:349
msgid "> ## Recovering Older Versions of a File"
msgstr "> ## Відновлення старих версій файлу"

#: git-novice/_episodes/05-history.md:350
msgid ""
">\n"
"> Jennifer has made changes to the Python script that she has been working on for weeks, and the\n"
"> modifications she made this morning \"broke\" the script and it no longer runs. She has spent\n"
"> ~ 1hr trying to fix it, with no luck...\n"
">\n"
"> Luckily, she has been keeping track of her project's versions using Git! Which commands below will\n"
"> let her recover the last committed version of her Python script called\n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Both 2 and 4\n"
">\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answer is (5)-Both 2 and 4. \n"
"> > \n"
"> > The `checkout` command restores files from the repository, overwriting the files in your working \n"
"> > directory. Answers 2 and 4 both restore the *latest* version *in the repository* of the file \n"
"> > `data_cruncher.py`. Answer 2 uses `HEAD` to indicate the *latest*, whereas answer 4 uses the \n"
"> > unique ID of the last commit, which is what `HEAD` means. \n"
"> > \n"
"> > Answer 3 gets the version of `data_cruncher.py` from the commit *before* `HEAD`, which is NOT \n"
"> > what we wanted.\n"
"> > \n"
"> > Answer 1 can be dangerous! Without a filename, `git checkout` will restore **all files** \n"
"> > in the current directory (and all directories below it) to their state at the commit specified. \n"
"> > This command will restore `data_cruncher.py` to the latest commit version, but it will also \n"
"> > restore *any other files that are changed* to that version, erasing any changes you may \n"
"> > have made to those files!\n"
"> > As discussed above, you are left in a *detached* `HEAD` state, and you don't want to be there."
msgstr ""
">\n"
"> Дженніфер зробила цього ранку деякі зміни у скрипті Python, над яким вона до цього працювала тижнями, та\n"
">  \"зламала\" його - він більше на запускається. Вона витратила\n"
"> майже одну годину, намагаючись виправити його, але безуспішно...\n"
">\n"
"> На щастя, вона використовує Git для відстеження змін у свому проєкті! Які з наведених нижче команд допоможуть\n"
"> їй відновити останню збережену у Git версію її скрипту, який називається\n"
"> `data_cruncher.py`?\n"
">\n"
"> 1. `$ git checkout HEAD`\n"
">\n"
"> 2. `$ git checkout HEAD data_cruncher.py`\n"
">\n"
"> 3. `$ git checkout HEAD~1 data_cruncher.py`\n"
">\n"
"> 4. `$ git checkout <unique ID of last commit> data_cruncher.py`\n"
">\n"
"> 5. Обидві відповіді 2 та 4\n"
">\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Відповідь (5) - Обидві відповіді 2 та 4. \n"
"> > \n"
"> > Команда `checkout` відновлює файли з репозиторію, перезаписуючи файли у вашій робочій \n"
"> > директорії. Відповіді 2 та 4 обидві відновлюють *останню* версію * в репозиторії * файлу\n"
"> > `data_cruncher.py`. Відповідь 2 використовує `HEAD` щоб вказати *останній* коміт, тоді як відповідь 4 використовує \n"
"> > унікальний ID останнього коміту, що саме і означає `HEAD`. \n"
"> > \n"
"> > Відповідь 3 замінить `data_cruncher.py` його версією з коміту *перед* `HEAD`, що НЕ є\n"
"> > тим, що ми хотіли.\n"
"> > \n"
"> > Відповідь 1 може бути небезпечною! Без назви файлу, `git checkout` відновить **всі файли** \n"
"> > у поточній директорії (і її піддиректоріях) до їх стану згідно із вказаним комітом. \n"
"> > Ця команда відновить `data_cruncher.py` до його останньої збереженої версії, але вона також \n"
"> > відновить *всі інші файли, які було змінено* на цю ж версію, стираючи будь-які зміни, які ви могли\n"
"> > внести до цих файлів!"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:391
msgid "> ## Reverting a Commit"
msgstr "> ## Скасування коміту"

#: git-novice/_episodes/05-history.md:392
msgid ""
">\n"
"> Jennifer is collaborating with colleagues on her Python script.  She\n"
"> realizes her last commit to the project's repository contained an error, and \n"
"> wants to undo it.  Jennifer wants to undo correctly so everyone in the project's\n"
"> repository gets the correct change. The command `git revert [erroneous commit ID]` will create a \n"
"> new commit that reverses the erroneous commit.  \n"
">    \n"
"> The command `git revert` is\n"
"> different from `git checkout [commit ID]` because `git checkout` returns the\n"
"> files not yet committed within the local repository to a previous state, whereas `git revert`\n"
"> reverses changes committed to the local and project repositories.   \n"
">   \n"
"> Below are the right steps and explanations for Jennifer to use `git revert`,\n"
"> what is the missing command?  \n"
"> 1. `________ # Look at the git history of the project to find the commit ID`\n"
">\n"
"> 2. Copy the ID (the first few characters of the ID, e.g. 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Type in the new commit message.\n"
">\n"
"> 5. Save and close\n"
"> \n"
"> \n"
"> > ## Solution\n"
"> > \n"
"> > The command `git log` lists project history with commit IDs.  \n"
"> > \n"
"> > The command `git show HEAD` shows changes made at the latest commit, and lists\n"
"> > the commit ID; however, Jennifer should double-check it is the correct commit, and no one\n"
"> > else has committed changes to the repository."
msgstr ""
">\n"
"> Дженніфер співпрацює з колегами над її скриптом Python. Вона\n"
"> зрозуміла, що її останній коміт до репозиторію проєкту містив помилку, і \n"
"> хоче його скасувати. Дженніфер хоче скасувати його правильним чином, щоб всі користувачі репозиторію цього проєкту\n"
"> отримали правильні зміни. Команда `git revert [erroneous commit ID]` створить \n"
"> новий коміт, який скасує помилковий коміт\n"
">    \n"
"> Команда `git revert`\n"
"> відрізняється від `git checkout [commit ID]`, оскільки `git checkout` повертає\n"
"> файли, зміни у яких ще не ввійшли до нового коміту у локальному репозиторїї, до їх попереднього стану, тоді як `git revert`\n"
"> скасовує зміни, які вже внесені до локальних та віддалених репозиторіїв.\n"
">   \n"
"> Нижче наведені правильні кроки і пояснення для Дженніфер щодо користування `git revert`.\n"
"> Яка команда відсутня?  \n"
"> 1. `________ # Подивіться на історію змін, щоб знайти ідентифікатор коміту`\n"
">\n"
"> 2. Скопіюйте цей ID (перші кілька символів ID, наприклад 0b1d055).\n"
">\n"
"> 3. `git revert [commit ID]`\n"
">\n"
"> 4. Введіть нове повідомлення коміту.\n"
">\n"
"> 5. Збережіть його та закрийте редактор.\n"
"> \n"
"> \n"
"> > ## Відповідь\n"
"> > \n"
"> > Команда `git log` відображає історію проєкту з ідентифікаторами комітів.  \n"
"> > \n"
"> > Команда `git show HEAD` покаже зміни, зроблені у останньому коміті, і відобразить\n"
"> > його ID; однак Дженніфер повинна перевірити, що це правильний коміт, і більше ніхто\n"
"> > не вніс змін до репозиторію."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:427
msgid "> ## Understanding Workflow and History"
msgstr "> ## Розуміння послідовності дій та історії"

#: git-novice/_episodes/05-history.md:428
msgid ""
">\n"
"> What is the output of the last command in\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #this will print the contents of venus.txt to the screen\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. ~~~\n"
">    Venus is too hot to be suitable as a base\n"
">    ~~~"
msgstr ""
">\n"
"> Який результат останньої команди в цій послідовності\n"
">\n"
"> ~~~\n"
"> $ cd planets\n"
"> $ echo \"Venus is beautiful and full of love\" > venus.txt\n"
"> $ git add venus.txt\n"
"> $ echo \"Venus is too hot to be suitable as a base\" >> venus.txt\n"
"> $ git commit -m \"Comment on Venus as an unsuitable base\"\n"
"> $ git checkout HEAD venus.txt\n"
"> $ cat venus.txt #this will print the contents of venus.txt to the screen\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. ~~~\n"
">    Venus is too hot to be suitable as a base\n"
">    ~~~"

# SC/DC Template label
#: git-novice/_episodes/05-history.md:445
#: git-novice/_episodes/05-history.md:449
#: git-novice/_episodes/05-history.md:454
#: git-novice/_episodes/05-history.md:458
msgid ">    {: .output}"
msgstr ">    {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:446
msgid "> 2. ~~~"
msgstr "> 2. ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:447
#: git-novice/_episodes/05-history.md:451
msgid ">    Venus is beautiful and full of love"
msgstr ">    Venus is beautiful and full of love"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:448
#: git-novice/_episodes/05-history.md:453
#: git-novice/_episodes/05-history.md:457
msgid ">    ~~~"
msgstr ">    ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:450
msgid "> 3. ~~~"
msgstr "> 3. ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:452
msgid ">    Venus is too hot to be suitable as a base"
msgstr ">    Venus is too hot to be suitable as a base"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:455
msgid "> 4. ~~~"
msgstr "> 4. ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:456
msgid ""
">    Error because you have changed venus.txt without committing the changes"
msgstr ""
">    Помилка, тому що ви змінили venus.txt, але після цього не зберегли ці "
"зміни у коміті"

#: git-novice/_episodes/05-history.md:459
msgid ""
">\n"
"> > ## Solution\n"
"> >\n"
"> > The answer is 2. \n"
"> > \n"
"> > The command `git add venus.txt` places the current version of `venus.txt` into the staging area. \n"
"> > The changes to the file from the second `echo` command are only applied to the working copy, \n"
"> > not the version in the staging area.\n"
"> > \n"
"> > So, when `git commit -m \"Comment on Venus as an unsuitable base\"` is executed, \n"
"> > the version of `venus.txt` committed to the repository is the one from the staging area and\n"
"> > has only one line.\n"
"> >  \n"
"> >  At this time, the working copy still has the second line (and \n"
"> >  `git status` will show that the file is modified). However, `git checkout HEAD venus.txt` \n"
"> >  replaces the working copy with the most recently committed version of `venus.txt`.\n"
"> >  \n"
"> >  So, `cat venus.txt` will output \n"
"> >  ~~~\n"
"> >  Venus is beautiful and full of love.\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Правильною є відповідь 2. \n"
"> > \n"
"> > Команда `git add venus.txt` розміщує поточну версію 'venus.txt' в зоні стейджингу. \n"
"> > Зміни до файлу з другої команди `echo` будуть зроблені лише у робочій копії цього файлу, \n"
"> > але не у його версії в зоні стейджингу.\n"
"> > \n"
"> > Тож, коли виконується команда `git commit -m \"Comment on Venus as an unsuitable base\"`, \n"
"> > версія `venus.txt`, яка буде збережена у коміті, буде з зони стейджингу та\n"
"> > буде мати тільки один рядок.\n"
"> >  \n"
"> >  На цей час робоча копія файлу ще має другий рядок (і тому \n"
"> >  `git status` покаже, що файл змінено). Однак `git checkout HEAD venus.txt` \n"
"> >  замінить робочу копію останньою збереженою версією `venus.txt`.\n"
"> >  \n"
"> >  Тож, `cat venus.txt` покаже \n"
"> >  ~~~\n"
"> >  Venus is beautiful and full of love.\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:484
msgid "> ## Checking Understanding of `git diff`"
msgstr "> ## Перевірка розуміння `git diff`"

#: git-novice/_episodes/05-history.md:485
msgid ""
">\n"
"> Consider this command: `git diff HEAD~9 mars.txt`. What do you predict this command\n"
"> will do if you execute it? What happens when you do execute it? Why?\n"
">\n"
"> Try another command, `git diff [ID] mars.txt`, where [ID] is replaced with\n"
"> the unique identifier for your most recent commit. What do you think will happen,\n"
"> and what does happen?"
msgstr ""
">\n"
"> Подивіться на цю команду: `git diff HEAD~9 mars.txt`. Як ви думаєте,\n"
"> що робить ця команда? Що відбувається, коли ви запускаєте її? Чому?\n"
">\n"
"> Спробуйте іншу команду, `git diff [ID] mars.txt`, де [ID] замінюється на\n"
"> унікальний ідентифікатор вашого останнього коміту. Як ви думаєте, що вона зробить?\n"
"> Запустіть її та перевіірте, чи це так."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:494
msgid "> ## Getting Rid of Staged Changes"
msgstr "> ## Скасування змін у зоні стейджингу"

#: git-novice/_episodes/05-history.md:495
msgid ""
">\n"
"> `git checkout` can be used to restore a previous commit when unstaged changes have\n"
"> been made, but will it also work for changes that have been staged but not committed?\n"
"> Make a change to `mars.txt`, add that change, and use `git checkout` to see if\n"
"> you can remove your change."
msgstr ""
">\n"
"> Команда `git checkout` може бути використана для відновлення попереднього коміту, коли зміни\n"
"> були зроблені, але ще не додані до зони стейджингу).\n"
"> Чи спрацює вона і для змін, які були додані до зони стейджингу, але не ще збережені у коміті?\n"
"> Зробіть зміни у `mars.txt`, додайте їх до зони стейджингу з `git add`, та використайте `git checkout` щоб побачити чи\n"
"> можете ви скасувати свої зміни."

# blockquote, which can be cascaded
#: git-novice/_episodes/05-history.md:502
msgid "> ## Explore and Summarize Histories"
msgstr "> ## Перегляд історії"

#: git-novice/_episodes/05-history.md:503
msgid ""
">\n"
"> Exploring history is an important part of Git, and often it is a challenge to find\n"
"> the right commit ID, especially if the commit is from several months ago.\n"
">\n"
"> Imagine the `planets` project has more than 50 files.\n"
"> You would like to find a commit that modifies some specific text in `mars.txt`.\n"
"> When you type `git log`, a very long list appeared.\n"
"> How can you narrow down the search?\n"
">\n"
"> Recall that the `git diff` command allows us to explore one specific file,\n"
"> e.g., `git diff mars.txt`. We can apply a similar idea here.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Unfortunately some of these commit messages are very ambiguous, e.g., `update files`.\n"
"> How can you search through these files?\n"
">\n"
"> Both `git diff` and `git log` are very useful and they summarize a different part of the history \n"
"> for you.\n"
"> Is it possible to combine both? Let's try the following:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> You should get a long list of output, and you should be able to see both commit messages and \n"
"> the difference between each commit.\n"
">\n"
"> Question: What does the following command do?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~9 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Перегляд історії є важливою частиною роботи з Git, але часто нелегко знайти\n"
"> правильний ID коміту, особливо якщо коміт був зроблений декілька місяців тому.\n"
">\n"
"> Уявіть, що проект `planets` має більш ніж 50 файлів.\n"
"> Ви хотіли б знайти коміт, який змінює певний текст у `mars.txt`.\n"
"> Коли ви вводите `git log`, з'являється дуже довгий список.\n"
"> Як можна звузити пошук?\n"
">\n"
"> Нагадаємо, що команда `git diff` може використовуватись для одного конкретного файлу,\n"
"> наприклад, `git diff mars.txt`. Подібну ідею ми можемо застосувати тут.\n"
">\n"
"> ~~~\n"
"> $ git log mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> На жаль, деякі з цих повідомлень комітів дуже неоднозначні, наприклад, `update files`.\n"
"> Як же перевірити усі ці версії файлу?\n"
">\n"
"> Обидві `git diff` та `git log` дуже корисні для отримання звітів про різні деталі історії проекту.\n"
"> Чи можна об'єднати їх результат у одну команду? Спробуємо наступне:\n"
">\n"
"> ~~~\n"
"> $ git log --patch mars.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Ви повинні отримати довгий список, у якому ви побачите s повідомлення коміту, і зроблені зміни.\n"
">\n"
"> Питання: Що робить наступна команда?\n"
">\n"
"> ~~~\n"
"> $ git log --patch HEAD~9 *.txt\n"
"> ~~~\n"
"> {: .language-bash}"
