# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Sofiia Matios, 2023
# Olexandr Konovalov, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 20:18:53+0000\n"
"PO-Revision-Date: 2023-02-12 20:20+0000\n"
"Last-Translator: Olexandr Konovalov, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: git-novice/_episodes/04-changes.md:1
msgid ""
"---\n"
"title: Tracking Changes\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"How do I record changes in Git?\"\n"
"- \"How do I check the status of my version control repository?\"\n"
"- \"How do I record notes about what changes I made and why?\"\n"
"objectives:\n"
"- \"Go through the modify-add-commit cycle for one or more files.\"\n"
"- \"Explain where information is stored at each stage of that cycle.\"\n"
"- \"Distinguish between descriptive and non-descriptive commit messages.\"\n"
"keypoints:\n"
"- \"`git status` shows the status of a repository.\"\n"
"- \"Files can be stored in a project's working directory (which users see), the staging area (where the next commit is being built up) and the local repository (where commits are permanently recorded).\"\n"
"- \"`git add` puts files in the staging area.\"\n"
"- \"`git commit` saves the staged content as a new commit in the local repository.\"\n"
"- \"Write a commit message that accurately describes your changes.\"\n"
"---"
msgstr ""
"---\n"
"title: Відстеження змін\n"
"teaching: 20\n"
"exercises: 0\n"
"questions:\n"
"- \"Як записати зміни в Git?\"\n"
"- \"Як перевірити стан контролю версій свого репозиторію?\"\n"
"- \"Як записати нотатки про те, які зміни було внесено і чому?\"\n"
"objectives:\n"
"- \"Пройти цикл зміни-додавання-коміту для одного або декількох файлів.\"\n"
"- \"Пояснити де зберігається інформація на кожному етапі цього циклу.\"\n"
"- \"Пояснити різницю між інформативними та неінформативними повідомленнями комітів.\"\n"
"keypoints:\n"
"- \"`git status` показує стан репозиторію.\"\n"
"- \"Файли можуть зберігатися в робочій директорії проєкту (яку бачать користувачі), зоні стейджингу (де будується наступний коміт) і локальному репозиторії (де коміти постійно зберігаються).\"\n"
"- \"`git add` додає файли до зони стейджингу.\"\n"
"- \"`git commit` зберігає все, що міститься у зоні стейджингу, як новий коміт у локальному репозиторії.\"\n"
"- \"Складайте повідомлення коміту так, щоб воно акуратно описувало ваші зміни.\"\n"
"---"

#: git-novice/_episodes/04-changes.md:21
msgid ""
"First let's make sure we're still in the right directory.\n"
"You should be in the `planets` directory."
msgstr ""
"Спочатку переконайтеся, що ми все ще в правильній директорії.\n"
"Ви повинні знаходитися у директорії `planets`."

# code block
#: git-novice/_episodes/04-changes.md:24
msgid ""
"~~~\n"
"$ cd ~/Desktop/planets\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd ~/Desktop/planets\n"
"~~~"

#: git-novice/_episodes/04-changes.md:29
msgid ""
"Let's create a file called `mars.txt` that contains some notes\n"
"about the Red Planet's suitability as a base.\n"
"We'll use `nano` to edit the file;\n"
"you can use whatever editor you like.\n"
"In particular, this does not have to be the `core.editor` you set globally earlier. But remember, the bash command to create or edit a new file will depend on the editor you choose (it might not be `nano`). For a refresher on text editors, check out [\"Which Editor?\"](https://swcarpentry.github.io/shell-novice/03-create/) in [The Unix Shell](https://swcarpentry.github.io/shell-novice/) lesson."
msgstr ""
"Давайте створимо файл під назвою `mars.txt`, який буде містити деякі нотатки\n"
"про придатність Червоної Планети як бази.\n"
"Ми будемо використовувати редактор `nano` для редагування файлу;\n"
"ви можете використовувати будь-який редактор, який вам подобається.\n"
"Зокрема, це не обовʼязково повинен бути `core.editor`, який ви вказали глобально. Але пам'ятайте, що команда bash для створення або редагування нового файлу буде залежати від редактора, який ви оберете (це може бути не  `nano`). Для довідки щодо текстових редакторів, дивіться [\"Which Editor?\"](https://swcarpentry.github.io/shell-novice/03-create/) в уроці [The Unix Shell](https://swcarpentry.github.io/shell-novice/)."

# code block
#: git-novice/_episodes/04-changes.md:35
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:40
msgid "Type the text below into the `mars.txt` file:"
msgstr "Надрукуйте нижче наведений текст у файлі `mars.txt`:"

# code block
#: git-novice/_episodes/04-changes.md:42 git-novice/_episodes/04-changes.md:68
#: git-novice/_episodes/05-history.md:239 git-novice/_extras/discuss.md:153
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"~~~"

#: git-novice/_episodes/04-changes.md:47
msgid ""
"Let's first verify that the file was properly created by running the list "
"command (`ls`):"
msgstr ""
"Давайте спочатку перевіримо, що файл був правильно створений, запустивши "
"команду `ls`:"

# code block
#: git-novice/_episodes/04-changes.md:55
msgid ""
"~~~\n"
"mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:61
msgid "`mars.txt` contains a single line, which we can see by running:"
msgstr ""
"`mars.txt` містить тільки один рядок, який ми можемо побачити, запустивши:"

# code block
#: git-novice/_episodes/04-changes.md:63
#: git-novice/_episodes/05-history.md:234
#: git-novice/_episodes/09-conflict.md:26
#: git-novice/_episodes/09-conflict.md:172
#: git-novice/_episodes/09-conflict.md:202
#: git-novice/_episodes/09-conflict.md:294
msgid ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cat mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:73
msgid ""
"If we check the status of our project again,\n"
"Git tells us that it's noticed the new file:"
msgstr ""
"Якщо ми знову перевіримо статус нашого проєкту,\n"
"Git повідомляє нам, що він помітив новий файл:"

# code block
#: git-novice/_episodes/04-changes.md:81
msgid ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Untracked files:\n"
"   (use \"git add <file>...\" to include in what will be committed)\n"
"\n"
"\tmars.txt\n"
"\n"
"nothing added to commit but untracked files present (use \"git add\" to track)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:95
msgid ""
"The \"untracked files\" message means that there's a file in the directory\n"
"that Git isn't keeping track of.\n"
"We can tell Git to track a file using `git add`:"
msgstr ""
"Повідомлення \"untracked files\" означає, що в директорії існує файл, який\n"
"Git не відстежує.\n"
"Ми можемо повідомити Git, що цей файл треба відстежувати за допомогою команди `git add`:"

# code block
#: git-novice/_episodes/04-changes.md:99
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:104
msgid "and then check that the right thing happened:"
msgstr "та згодом переконатися, що все виглядає правильно:"

# code block
#: git-novice/_episodes/04-changes.md:111
msgid ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"\n"
"No commits yet\n"
"\n"
"Changes to be committed:\n"
"  (use \"git rm --cached <file>...\" to unstage)\n"
"\n"
"\tnew file:   mars.txt\n"
"\n"
"~~~"

#: git-novice/_episodes/04-changes.md:124
msgid ""
"Git now knows that it's supposed to keep track of `mars.txt`,\n"
"but it hasn't recorded these changes as a commit yet.\n"
"To get it to do that,\n"
"we need to run one more command:"
msgstr ""
"Git тепер знає, що він повинен стежити за файлом \"mars.txt', але він ще не зафіксував зміни у цьому файлі.\n"
"Щоб зробити це,\n"
"нам потрібно запустити ще одну команду:"

# code block
#: git-novice/_episodes/04-changes.md:129
msgid ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Start notes on Mars as a base\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:134
msgid ""
"~~~\n"
"[main (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"[main (root-commit) f22b25e] Start notes on Mars as a base\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 mars.txt\n"
"~~~"

#: git-novice/_episodes/04-changes.md:141
msgid ""
"When we run `git commit`,\n"
"Git takes everything we have told it to save by using `git add`\n"
"and stores a copy permanently inside the special `.git` directory.\n"
"This permanent copy is called a [commit]({{ page.root }}{% link reference.md %}#commit)\n"
"(or [revision]({{ page.root }}{% link reference.md %}#revision)) and its short identifier is `f22b25e`. Your commit may have another identifier."
msgstr ""
"Коли ми запускаємо `git commit`,\n"
"Git бере все, що ми раніше запросили його зберегти, використовуючи `git add`,\n"
"та зберігає постійну копію цих змін у спеціальній директорії `.git`.\n"
"Ця постійна копія називається [коміт]({{ page.root }}{% link reference.md %}#commit) (commit)\n"
"(або [revision]({{ page.root }}{% link reference.md %}#revision)). У цьому прикладі коміт має скорочений ідентифікатор `f22b25e`. Ваш коміт може мати інший ідентифікатор."

#: git-novice/_episodes/04-changes.md:147
msgid ""
"We use the `-m` flag (for \"message\")\n"
"to record a short, descriptive, and specific comment that will help us remember later on what we did and why.\n"
"If we just run `git commit` without the `-m` option,\n"
"Git will launch `nano` (or whatever other editor we configured as `core.editor`)\n"
"so that we can write a longer message."
msgstr ""
"Ми використовуємо команду `-m` (від \"message\")\n"
"щоб надати короткий, інформативний та конкретний коментар, який допоможе нам згадати пізніше про те, що ми зробили і чому.\n"
"Якщо ми просто запустимо `git commit` без опції `-m`,\n"
"Git запустить `nano` (або будь-який інший редактор, який ми вказали як `core.editor`),\n"
"щоб ми могли написати довше повідомлення."

#: git-novice/_episodes/04-changes.md:153
msgid ""
"[Good commit messages][commit-messages] start with a brief (<50 characters) statement about the\n"
"changes made in the commit. Generally, the message should complete the sentence \"If applied, this commit will\" <commit message here>.\n"
"If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be."
msgstr ""
"[Гарні повідомлення комітів][commit-messages] починаються з короткого (< 50 символів) твердження про зміни, внесені в коміт. Загалом, повідомлення має завершити речення \"If applied, this commit will\" <commit message here>.\n"
"Якщо ви хочете вдатися більше в деталі, додайте порожній рядок між першим рядком та вашими додатковими нотатками. Використовуйте додаткові нотатки, щоб пояснити, чому ви внесли зміни та/або яким буде їх вплив."

#: git-novice/_episodes/04-changes.md:157
msgid "If we run `git status` now:"
msgstr "Якщо ми тепер запустимо `git status`:"

# code block
#: git-novice/_episodes/04-changes.md:164
#: git-novice/_episodes/04-changes.md:454
#: git-novice/_episodes/06-ignore.md:102 git-novice/_extras/discuss.md:243
msgid ""
"~~~\n"
"On branch main\n"
"nothing to commit, working tree clean\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"nothing to commit, working tree clean\n"
"~~~"

#: git-novice/_episodes/04-changes.md:170
msgid ""
"it tells us everything is up to date.\n"
"If we want to know what we've done recently,\n"
"we can ask Git to show us the project's history using `git log`:"
msgstr ""
"Git говорить нам, що поточний стан файлів відповідає їх стану, який збережений у репозиторїї.\n"
"Якщо ми хочемо знати, що саме ми зробили нещодавно - \n"
"ми можемо попросити Git показати нам історію проєкту, використовуючи `git log`:"

# code block
#: git-novice/_episodes/04-changes.md:174
#: git-novice/_episodes/04-changes.md:462
msgid ""
"~~~\n"
"$ git log\n"
"~~~"
msgstr ""
"~~~\n"
"$ git log\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:179
msgid ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""
"~~~\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"

#: git-novice/_episodes/04-changes.md:188
msgid ""
"`git log` lists all commits  made to a repository in reverse chronological order.\n"
"The listing for each commit includes\n"
"the commit's full identifier\n"
"(which starts with the same characters as\n"
"the short identifier printed by the `git commit` command earlier),\n"
"the commit's author,\n"
"when it was created,\n"
"and the log message Git was given when the commit was created."
msgstr ""
"`git log` виводить перелік усіх комітів, які були внесені до репозиторію, у зворотному хронологічному порядку.\n"
"Для кожного коміту буде надруковано повний ідентифікатор коміту\n"
"(який починається з тих же символів, що і\n"
"скорочений ідентифікатор, попередньо надрукований командою `git commit`),\n"
"автор коміту,\n"
"дата його створення,\n"
"і повідомлення Git, яке було додано під час запису коміту."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:197
msgid "> ## Where Are My Changes?"
msgstr "> ## Де зберігаються мої зміни?"

#: git-novice/_episodes/04-changes.md:198
msgid ""
">\n"
"> If we run `ls` at this point, we will still see just one file called `mars.txt`.\n"
"> That's because Git saves information about files' history\n"
"> in the special `.git` directory mentioned earlier\n"
"> so that our filesystem doesn't become cluttered\n"
"> (and so that we can't accidentally edit or delete an old version)."
msgstr ""
">\n"
"> Якщо ми в цей момент запустимо `ls`, ми все одно побачимо лише один файл, який називається `mars.txt`.\n"
"> Це відбувається тому, що Git зберігає інформацію про історію файлів\n"
"> у спеціальній директорії `.git`, згаданій раніше,\n"
"> щоб наша файлова система не засмічувалася\n"
"> (і щоб ми випадково не могли змінити або видалити стару версію)."

#: git-novice/_episodes/04-changes.md:206
msgid ""
"Now suppose Dracula adds more information to the file.\n"
"(Again, we'll edit with `nano` and then `cat` the file to show its contents;\n"
"you may use a different editor, and don't need to `cat`.)"
msgstr ""
"Тепер уявімо, що Dracula додає нову інформацію до файлу.\n"
"(Знову ж таки, ми будемо редагувати його за допомогою `nano`, і потім перевіряти його зміст за допомогою `cat`;\n"
"ви можете користуватися іншим редактором, та можете не використовувати `cat`.)"

# code block
#: git-novice/_episodes/04-changes.md:210
#: git-novice/_episodes/04-changes.md:365
#: git-novice/_episodes/05-history.md:27
#: git-novice/_episodes/09-conflict.md:40
#: git-novice/_episodes/09-conflict.md:90
msgid ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano mars.txt\n"
"$ cat mars.txt\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:216 git-novice/_extras/discuss.md:170
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"~~~"

#: git-novice/_episodes/04-changes.md:222
msgid ""
"When we run `git status` now,\n"
"it tells us that a file it already knows about has been modified:"
msgstr ""
"Тепер, коли ми запускаємо `git status`,\n"
"Git повідомляє нам, що файл, про який він вже знає, був змінений:"

# code block
#: git-novice/_episodes/04-changes.md:230
#: git-novice/_episodes/04-changes.md:292
msgid ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working directory)\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"no changes added to commit (use \"git add\" and/or \"git commit -a\")\n"
"~~~"

#: git-novice/_episodes/04-changes.md:242
msgid ""
"The last line is the key phrase:\n"
"\"no changes added to commit\".\n"
"We have changed this file,\n"
"but we haven't told Git we will want to save those changes\n"
"(which we do with `git add`)\n"
"nor have we saved them (which we do with `git commit`).\n"
"So let's do that now. It is good practice to always review\n"
"our changes before saving them. We do this using `git diff`.\n"
"This shows us the differences between the current state\n"
"of the file and the most recently saved version:"
msgstr ""
"Ключова фраза - це останній рядок:\n"
"\"no changes added to commit\".\n"
"Ми змінили цей файл,\n"
"але ми не сказали Git, що ми маємо намір зберегти ці зміни у майбутньому\n"
"(за допомогою `git add`)\n"
"або, що ми хочемо зберегти їх зараз (за допомогою `git commit`).\n"
"Давайте зробимо це зараз. Хорошою практикою є перегляд\n"
"наших змін кожного разу перед їх збереженням. Ми робимо це за допомогою `git diff`.\n"
"Це показує нам відмінності між поточним станом\n"
"файлу і останньою збереженою версією:"

# code block
#: git-novice/_episodes/04-changes.md:253
#: git-novice/_episodes/04-changes.md:378 git-novice/_extras/discuss.md:179
msgid ""
"~~~\n"
"$ git diff\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:258 git-novice/_extras/discuss.md:193
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index df0654a..315bf3a 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1 +1,2 @@\n"
" Cold and dry, but everything is my favorite color\n"
"+The two moons may be a problem for Wolfman\n"
"~~~"

#: git-novice/_episodes/04-changes.md:269
msgid ""
"The output is cryptic because\n"
"it is actually a series of commands for tools like editors and `patch`\n"
"telling them how to reconstruct one file given the other.\n"
"If we break it down into pieces:"
msgstr ""
"Результат цієї команди важко зрозуміти, тому що \n"
"це насправді серія команд для таких інструментів, як редактори або `patch`,\n"
"яка вказує як змінити один файл за допомогою іншого.\n"
"Якщо розділити цей результат на фрагменти:"

# ordered list
#: git-novice/_episodes/04-changes.md:274
msgid ""
"1.  The first line tells us that Git is producing output similar to the Unix"
" `diff` command"
msgstr ""
"1.  Перший рядок вказує нам на те, що результат цієї команди у Git подібен "
"до Unix команди `diff`,"

#: git-novice/_episodes/04-changes.md:275
msgid ""
"    comparing the old and new versions of the file.\n"
"2.  The second line tells exactly which versions of the file\n"
"    Git is comparing;\n"
"    `df0654a` and `315bf3a` are unique computer-generated labels for those versions.\n"
"3.  The third and fourth lines once again show the name of the file being changed.\n"
"4.  The remaining lines are the most interesting, they show us the actual differences\n"
"    and the lines on which they occur.\n"
"    In particular,\n"
"    the `+` marker in the first column shows where we added a line."
msgstr ""
"    яка порівнює стару та нову версії файлу.\n"
"2.  Другий рядок повідомляє які саме версії файлу\n"
"    Git порівнює;\n"
"    `df0654a` та `315bf3a` є унікальними ідентифікаторами цих версій.\n"
"3.  Третій та четвертий рядки ще раз показують назву файлу, що змінюється.\n"
"4.  Решта рядків найцікавіші, вони показують нам фактичні відмінності\n"
"    і рядки, у яких вони відбуваються.\n"
"    Зокрема,\n"
"    значок `+` в першому стовпці вказує де ми додали рядок."

#: git-novice/_episodes/04-changes.md:285
msgid "After reviewing our change, it's time to commit it:"
msgstr "Після того, як ми переглянули наші зміни, прийшов час зберегти їх:"

# code block
#: git-novice/_episodes/04-changes.md:287
msgid ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"

#: git-novice/_episodes/04-changes.md:304
msgid ""
"Whoops:\n"
"Git won't commit because we didn't use `git add` first.\n"
"Let's fix that:"
msgstr ""
"Але це не спрацює:\n"
"Git не буде додавати зміни, тому що ми не використали спочатку `git add`.\n"
"Давайте виправимо це:"

# code block
#: git-novice/_episodes/04-changes.md:308
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add concerns about effects of Mars' moons on Wolfman\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:314
msgid ""
"~~~\n"
"[main 34961b1] Add concerns about effects of Mars' moons on Wolfman\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 34961b1] Add concerns about effects of Mars' moons on Wolfman\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:320
msgid ""
"Git insists that we add files to the set we want to commit\n"
"before actually committing anything. This allows us to commit our\n"
"changes in stages and capture changes in logical portions rather than\n"
"only large batches.\n"
"For example,\n"
"suppose we're adding a few citations to relevant research to our thesis.\n"
"We might want to commit those additions,\n"
"and the corresponding bibliography entries,\n"
"but *not* commit some of our work drafting the conclusion\n"
"(which we haven't finished yet)."
msgstr ""
"Git наполягає, щоб ми додали файли до набору змін, які ми хочемо записати,\n"
"перед тим як ми зробимо коміт. Це дозволяє зберігати зміни поступово та \n"
"обʼєднувати їх у логічні блоки, аніж у \n"
"великі набори змін.\n"
"Наприклад,\n"
"припустимо, ми робимо коміт кількох цитат відповідних досліджень у нашій дисертації.\n"
"Можливо, ми бажаємо зберегти ці зміни,\n"
"та відповідні записи у бібліографії,\n"
"але *не* зберігати деякі інші зміни в нашій роботі\n"
"(наприклад, висновок, який ми ще не закінчили)."

#: git-novice/_episodes/04-changes.md:331
msgid ""
"To allow for this,\n"
"Git has a special *staging area*\n"
"where it keeps track of things that have been added to\n"
"the current [changeset]({{ page.root }}{% link reference.md %}#changeset)\n"
"but not yet committed."
msgstr ""
"Щоб це було можливо зробити,\n"
"Git має спеціальну *зону стейджингу* *staging area*\n"
"де він відстежує речі, які були додані\n"
"до поточного [набору змін]({{ page.root }}{% link reference.md %}#changeset)\n"
"проте, ще не були збережені."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:337
msgid "> ## Staging Area"
msgstr "> ## Зона стейджингу"

#: git-novice/_episodes/04-changes.md:338
msgid ""
">\n"
"> If you think of Git as taking snapshots of changes over the life of a project,\n"
"> `git add` specifies *what* will go in a snapshot\n"
"> (putting things in the staging area),\n"
"> and `git commit` then *actually takes* the snapshot, and\n"
"> makes a permanent record of it (as a commit).\n"
"> If you don't have anything staged when you type `git commit`,\n"
"> Git will prompt you to use `git commit -a` or `git commit --all`,\n"
"> which is kind of like gathering *everyone* to take a group photo!\n"
"> However, it's almost always better to\n"
"> explicitly add things to the staging area, because you might\n"
"> commit changes you forgot you made. (Going back to the group photo simile,\n"
"> you might get an extra with incomplete makeup walking on\n"
"> the stage for the picture because you used `-a`!)\n"
"> Try to stage things manually,\n"
"> or you might find yourself searching for \"git undo commit\" more\n"
"> than you would like!"
msgstr ""
">\n"
"> Якщо ви будете уявляти, ніби Git робить знімки змін протягом життя проєкту, то\n"
"> `git add` вказує *що* буде на знімку\n"
"> (додаючи речі в зоні стейждингу),\n"
"> а `git commit` після того *насправді робить* знімок, та\n"
"> назавжди зберігає його (як коміт).\n"
"> Якщо у зоні стейджингу нічого немає, то коли ви введете `git commit`,\n"
"> Git запропонує вам використати `git commit -a` або `git commit --all`,\n"
"> який ніби збирає разом *всіх*, щоб зробити групове фото!\n"
"> Однак майже завжди краще\n"
"> явним чином додати речі до зони стейджингу, тому без цього ви можете\n"
"> випадково зберегти інші зміни, про які ви забули. (Повертаючись до порівняння з груповим фото,\n"
"> якщо ви використали команду \"-а\",\n"
"> до вашої фотографії може потрапити зайва людина!)\n"
"> Тому додавайте речі в зону стейджингу власноруч -\n"
"> у іншому випадку вам може знадобитися шукати допомоги з \"git undo commit\" частіше, ніж\n"
"> вам хотілося б!"

#: git-novice/_episodes/04-changes.md:357
msgid "![The Git Staging Area](../fig/git-staging-area.svg)"
msgstr "![Зона стейджингу Git](../fig/git-staging-area.svg)"

#: git-novice/_episodes/04-changes.md:359
msgid ""
"Let's watch as our changes to a file move from our editor\n"
"to the staging area\n"
"and into long-term storage.\n"
"First,\n"
"we'll add another line to the file:"
msgstr ""
"Давайте подивимося, як наші зміни у файлі проходять шлях від текстового редактора\n"
"до зони стейджингу\n"
"і далі у довгострокове зберігання.\n"
"Спочатку,\n"
"ми додамо новий рядок у наш файл:"

# code block
#: git-novice/_episodes/04-changes.md:371
#: git-novice/_episodes/05-history.md:214
#: git-novice/_episodes/09-conflict.md:31
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:383
#: git-novice/_episodes/04-changes.md:419
msgid ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"
msgstr ""
"~~~\n"
"diff --git a/mars.txt b/mars.txt\n"
"index 315bf3a..b36abfd 100644\n"
"--- a/mars.txt\n"
"+++ b/mars.txt\n"
"@@ -1,2 +1,3 @@\n"
" Cold and dry, but everything is my favorite color\n"
" The two moons may be a problem for Wolfman\n"
"+But the Mummy will appreciate the lack of humidity\n"
"~~~"

#: git-novice/_episodes/04-changes.md:395
msgid ""
"So far, so good:\n"
"we've added one line to the end of the file\n"
"(shown with a `+` in the first column).\n"
"Now let's put that change in the staging area\n"
"and see what `git diff` reports:"
msgstr ""
"Поки що все добре:\n"
"ми додали один рядок в кінці файлу\n"
"(що зазначає `+` у першій колонці).\n"
"Тепер давайте помістимо цю зміну у зону стейджингу\n"
"та подивимося що після цього звітує `git diff`:"

# code block
#: git-novice/_episodes/04-changes.md:401
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git diff\n"
"~~~"

#: git-novice/_episodes/04-changes.md:407
msgid ""
"There is no output:\n"
"as far as Git can tell,\n"
"there's no difference between what it's been asked to save permanently\n"
"and what's currently in the directory.\n"
"However,\n"
"if we do this:"
msgstr ""
"Результату немає:\n"
"це виглядає ніби для Git\n"
"немає різниці між тим, що вже було збережено назавжди\n"
"і тим, що зараз міститься у робочій директорії.\n"
"Проте,\n"
"якщо ми зробимо наступне:"

# code block
#: git-novice/_episodes/04-changes.md:414
msgid ""
"~~~\n"
"$ git diff --staged\n"
"~~~"
msgstr ""
"~~~\n"
"$ git diff --staged\n"
"~~~"

#: git-novice/_episodes/04-changes.md:431
msgid ""
"it shows us the difference between\n"
"the last committed change\n"
"and what's in the staging area.\n"
"Let's save our changes:"
msgstr ""
"то ми побачимо різницю між\n"
"останніми збереженими змінами\n"
"і тими, які знаходяться в зоні стейджингу.\n"
"Давайте збережемо наші зміни:"

# code block
#: git-novice/_episodes/04-changes.md:436
msgid ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Discuss concerns about Mars' climate for Mummy\"\n"
"~~~"

# code block
#: git-novice/_episodes/04-changes.md:441
msgid ""
"~~~\n"
"[main 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 005937f] Discuss concerns about Mars' climate for Mummy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/04-changes.md:447
msgid "check our status:"
msgstr "перевіримо наш статус:"

#: git-novice/_episodes/04-changes.md:460
msgid "and look at the history of what we've done so far:"
msgstr "і подивимося на історію попередніх змін:"

# code block
#: git-novice/_episodes/04-changes.md:467
msgid ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on Wolfman\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"
msgstr ""
"~~~\n"
"commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:14:07 2013 -0400\n"
"\n"
"    Discuss concerns about Mars' climate for Mummy\n"
"\n"
"commit 34961b159c27df3b475cfe4415d94a6d1fcd064d\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 10:07:21 2013 -0400\n"
"\n"
"    Add concerns about effects of Mars' moons on Wolfman\n"
"\n"
"commit f22b25e3233b4645dabd0d81e651fe074bd8e73b\n"
"Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"Date:   Thu Aug 22 09:51:46 2013 -0400\n"
"\n"
"    Start notes on Mars as a base\n"
"~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:488
msgid "> ## Word-based diffing"
msgstr "> ##  Порівняння з підсвіткою змінених слів у рядках"

#: git-novice/_episodes/04-changes.md:489
msgid ""
">\n"
"> Sometimes, e.g. in the case of the text documents a line-wise\n"
"> diff is too coarse. That is where the `--color-words` option of\n"
"> `git diff` comes in very useful as it highlights the changed\n"
"> words using colors."
msgstr ""
">\n"
"> Інколи, наприклад, у випадку текстових документів, результат\n"
"> `diff` дуже важко зрозуміти. Саме тут `--color-words` опція для\n"
"> `git diff` є надзвичайно зручною, бо вона виділяє кольором змінені слова."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:496
msgid "> ## Paging the Log"
msgstr "## Перегляд історії змін за сторінками "

#: git-novice/_episodes/04-changes.md:497
msgid ""
">\n"
"> When the output of `git log` is too long to fit in your screen,\n"
"> `git` uses a program to split it into pages of the size of your screen.\n"
"> When this \"pager\" is called, you will notice that the last line in your\n"
"> screen is a `:`, instead of your usual prompt.\n"
">\n"
"> *   To get out of the pager, press <kbd>Q</kbd>.\n"
"> *   To move to the next page, press <kbd>Spacebar</kbd>.\n"
"> *   To search for `some_word` in all pages,\n"
">     press <kbd>/</kbd>\n"
">     and type `some_word`.\n"
">     Navigate through matches pressing <kbd>N</kbd>."
msgstr ""
"Коли розмір результату `git log` перевищує розмір вашого екрану,\n"
" `git` використовує спеціальну програму \"пейджер\", щоб поділити результат між сторінками.\n"
"Після виклику \"пейджера\", ви помітите, що останній рядок вашого результату закінчується на `:`, замість звичайного закінчення.\n"
"\n"
"Натисніть <kbd>Q</kbd>, щоб вийти з пейджеру.\n"
"Натисніть <kbd>пробіл</kbd>, щоб перейти на наступну сторінку.\n"
"Натисніть <kbd>/</kbd> та напишіть бажане слово задля пошуку його на усіх сторінках.\n"
"Натисніть <kbd>N</kbd>, для навігації між результатами пошуку."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:511
msgid "> ## Limit Log Size"
msgstr "## Обмеження розміру відображеної історії змін"

#: git-novice/_episodes/04-changes.md:512
msgid ""
">\n"
"> To avoid having `git log` cover your entire terminal screen, you can limit the\n"
"> number of commits that Git lists by using `-N`, where `N` is the number of\n"
"> commits that you want to view. For example, if you only want information from\n"
"> the last commit you can use:\n"
">\n"
"> ~~~\n"
"> $ git log -1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date:   Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
">    Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"
msgstr ""
">\n"
">Щоб запобігти випадку, коли `git log` повністю займає ваш термінал,\n"
"> ви можете обмежувати кількість комітів які відображує Git, використовуючи опцію `-N`, де `N` - кількість\n"
"> комітів які би ви бажали бачити на екрані. Наприклад, якщо ви бажаєте побачити лише останній коміт,\n"
"> використовуйте команду\n"
" ~~~\n"
"$ git log -1\n"
"{: .language-bash}\n"
" ~~~\n"
" commit 005937fbe2a98fb83f0ade869025dc2636b4dad5 (HEAD -> main)\n"
"> Author: Vlad Dracula <vlad@tran.sylvan.ia>\n"
"> Date: Thu Aug 22 10:14:07 2013 -0400\n"
">\n"
"> Discuss concerns about Mars' climate for Mummy\n"
"> ~~~"

# SC/DC Template label
#: git-novice/_episodes/04-changes.md:530
#: git-novice/_episodes/04-changes.md:544
#: git-novice/_episodes/04-changes.md:561
#: git-novice/_episodes/05-history.md:330 git-novice/_extras/discuss.md:488
msgid "> {: .output}"
msgstr "> {: .output}"

#: git-novice/_episodes/04-changes.md:531
msgid ""
">\n"
"> You can also reduce the quantity of information using the\n"
"> `--oneline` option:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Ви також можете зменшити кількість інформації, використовуючи\n"
"> опцію `--oneline`:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> f22b25e Start notes on Mars as a base\n"
"> ~~~"

#: git-novice/_episodes/04-changes.md:545
msgid ""
">\n"
"> You can also combine the `--oneline` option with others. One useful\n"
"> combination adds `--graph` to display the commit history as a text-based\n"
"> graph and to indicate which commits are associated with the\n"
"> current `HEAD`, the current branch `main`, or\n"
"> [other Git references][git-references]:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"
msgstr ""
">\n"
"> Ви також можете комбінувати опцію `--oneline` з іншими опціями. Одна корисна\n"
"> комбінація додає `--graph` для графічного відображення історії комітів за допомогою\n"
"> псевдографіки, вказуючи при цьому які коміти пов`язані з\n"
"> поточним `HEAD`, поточним бранчем `main`, або\n"
"> [іншими обʼєктами у Git репозиторії][git-references]:\n"
">\n"
"> ~~~\n"
"> $ git log --oneline --graph\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> * 005937f (HEAD -> main) Discuss concerns about Mars' climate for Mummy\n"
"> * 34961b1 Add concerns about effects of Mars' moons on Wolfman\n"
"> * f22b25e Start notes on Mars as a base\n"
"> ~~~"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:564
msgid "> ## Directories"
msgstr "> ## Директорії"

#: git-novice/_episodes/04-changes.md:565
msgid ""
">\n"
"> Two important facts you should know about directories in Git.\n"
">\n"
"> 1. Git does not track directories on their own, only files within them.\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ mkdir spaceships\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Note, our newly created empty directory `spaceships` does not appear in\n"
">    the list of untracked files even if we explicitly add it (_via_ `git add`) to our\n"
">    repository. This is the reason why you will sometimes see `.gitkeep` files\n"
">    in otherwise empty directories. Unlike `.gitignore`, these files are not special\n"
">    and their sole purpose is to populate a directory so that Git adds it to\n"
">    the repository. In fact, you can name such files anything you like.\n"
">\n"
"> 2. If you create a directory in your Git repository and populate it with files,\n"
">    you can add all files in the directory at once by:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Try it for yourself:\n"
">\n"
">    ~~~\n"
">    $ touch spaceships/apollo-11 spaceships/sputnik-1\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Before moving on, we will commit these changes.\n"
">\n"
">    ~~~\n"
">    $ git commit -m \"Add some initial thoughts on spaceships\"\n"
">    ~~~\n"
">    {: .language-bash}"
msgstr ""
">\n"
"> Дві важливі речі, які ви повинні знати про директорії в Git.\n"
">\n"
"> 1. Git не відстежує директорії самостійно, тільки файли всередині них.\n"
">    Спробуйте власноруч:\n"
">\n"
">    ~~~\n"
">    $ mkdir spaceships\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Зауважте, наша новостворена порожня директорія `spaceships` не з`являється в\n"
">   списку невідстежуваних файлів, навіть якщо ми конкретно додамо їх (_через_ `git add`) до нашого\n"
">    репозиторію. Ось чому ви іноді бачите файли `.gitkeep` \n"
">    в інших порожніх директоріях. На відміну від `.gitignore`, ці файли не є особливими\n"
">   і їх єдиною метою є заповнити директорію, щоб Git додав її до\n"
">    репозиторію. Насправді, ви можете назвати такі файли до вашої довподоби.\n"
">\n"
"> 2. Якщо ви створюєте директорію у вашому репозиторії Git і заповнюєте її файлами,\n"
">    ви можете додати всі файли в директорії одразу:\n"
">\n"
">    ~~~\n"
">    git add <directory-with-files>\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Спробуйте власноруч:\n"
">\n"
">    ~~~\n"
">    $ touch spaceships/apollo-11 spaceships/sputnik-1\n"
">    $ git status\n"
">    $ git add spaceships\n"
">    $ git status\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
">    Перш ніж рухатися далі, ми збережемо ці зміни.\n"
">\n"
">    ~~~\n"
">    $ git commit -m \"Add some initial thoughts on spaceships\"\n"
">    ~~~\n"
">    {: .language-bash}"

#: git-novice/_episodes/04-changes.md:612
msgid ""
"To recap, when we want to add changes to our repository,\n"
"we first need to add the changed files to the staging area\n"
"(`git add`) and then commit the staged changes to the\n"
"repository (`git commit`):"
msgstr ""
"Для повторення: коли ми хочемо додати зміни до нашого репозиторію,\n"
"спочатку нам потрібно додати змінені файли в зону стейджингу\n"
"(`git add`) а потім зберегти заплановані зміни до\n"
"репозиторію (`git commit`):"

#: git-novice/_episodes/04-changes.md:617
msgid "![The Git Commit Workflow](../fig/git-committing.svg)"
msgstr "![Процес запису комітів у Git](../fig/git-committing.svg)"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:619
msgid "> ## Choosing a Commit Message"
msgstr "> ## Вибір повідомлення коміту"

#: git-novice/_episodes/04-changes.md:620
msgid ""
">\n"
"> Which of the following commit messages would be most appropriate for the\n"
"> last commit made to `mars.txt`?\n"
">\n"
"> 1. \"Changes\"\n"
"> 2. \"Added line 'But the Mummy will appreciate the lack of humidity' to mars.txt\"\n"
"> 3. \"Discuss effects of Mars' climate on the Mummy\"\n"
">\n"
"> > ## Solution\n"
"> > Answer 1 is not descriptive enough, and the purpose of the commit is unclear;\n"
"> > and answer 2 is redundant to using \"git diff\" to see what changed in this commit;\n"
"> > but answer 3 is good: short, descriptive, and imperative."
msgstr ""
">\n"
"> Які з наступних повідомлень коміту будуть найбільш оптимальними для\n"
"> останнього коміту в `mars.txt`?\n"
">\n"
"> 1. \"Зміни\"\n"
"> 2. \"Додано рядок 'But the Mummy will appreciate the lack of humidity' до mars.txt\"\n"
"> 3. \"Обговорення впливу клімату на Марсі на Mummy\"\n"
">\n"
"> > ## Відповідь\n"
"> > Відповідь 1 є недостатньо детальною, а мета коміту неясна;\n"
"> > відповідь 2 дублює результат команди \"git diff\" яка відобразить зміни зроблені у цьому коміті;\n"
"> > 3 відповідь - оптимальна: коротка, інформативна, та імперативна."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:635
msgid "> ## Committing Changes to Git"
msgstr "> ## Збереження змін у Git"

#: git-novice/_episodes/04-changes.md:636
msgid ""
">\n"
"> Which command(s) below would save the changes of `myfile.txt`\n"
"> to my local Git repository?\n"
">\n"
"> 1. ~~~\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 2. ~~~\n"
">    $ git init myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 3. ~~~\n"
">    $ git add myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 4. ~~~\n"
">    $ git commit -m myfile.txt \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Would only create a commit if files have already been staged.\n"
"> > 2. Would try to create a new repository.\n"
"> > 3. Is correct: first add the file to the staging area, then commit.\n"
"> > 4. Would try to commit a file \"my recent changes\" with the message myfile.txt."
msgstr ""
">\n"
"> Яка(які) з наведених нижче команд збережуть зміни у файлі `myfile.txt`\n"
"> до мого локального Git репозиторію?\n"
">\n"
"> 1. ~~~\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 2. ~~~\n"
">    $ git init myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 3. ~~~\n"
">    $ git add myfile.txt\n"
">    $ git commit -m \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
"> 4. ~~~\n"
">    $ git commit -m myfile.txt \"my recent changes\"\n"
">    ~~~\n"
">    {: .language-bash}\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > 1. Створить коміт, лише якщо файли вже були у зоні стейджінгу.\n"
"> > 2. Намагатиметься створити новий репозиторій.\n"
"> > 3. Правильна відповідь: спочатку додайте файл до зони стейджингу, потм зробіть коміт.\n"
"> > 4. Спробує записати коміт файлу з назвою \"my recent changes\" з повідомленням myfile.txt."

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:668
msgid "> ## Committing Multiple Files"
msgstr "> ## Коміт декількох файлів"

#: git-novice/_episodes/04-changes.md:669
msgid ""
">\n"
"> The staging area can hold changes from any number of files\n"
"> that you want to commit as a single snapshot.\n"
">\n"
"> 1. Add some text to `mars.txt` noting your decision\n"
"> to consider Venus as a base\n"
"> 2. Create a new file `venus.txt` with your initial thoughts\n"
"> about Venus as a base for you and your friends\n"
"> 3. Add changes from both files to the staging area,\n"
"> and commit those changes.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The output below from `cat mars.txt` reflects only content added during \n"
"> > this exercise. Your output may vary.\n"
"> > \n"
"> > First we make our changes to the `mars.txt` and `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Now you can add both files to the staging area. We can do that in one line:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Or with multiple commands:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Now the files are ready to commit. You can check that using `git status`. If you are ready to commit use:\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [main cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> Зона стейджингу може зберігати зміни у будь-якій кількості файлів,\n"
"> які ви хочете записати у один коміт.\n"
">\n"
"> 1. Додайте текст до `mars.txt` про те, що ви вирішили \n"
"> розглянути побудову бази на Венері\n"
"> 2. Створіть новий файл `venus.txt` з вашими думками\n"
"> стосовно Венери як бази для вас та ваших друзів\n"
"> 3. Додайте зміни у обох файлах до зони стейджінгу,\n"
"> та зробіть коміт цих змін.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Результат нижче з файлу `cat mars.txt` відображає тільки контент доданий під час \n"
"> > цієї вправи. Ваш результат може виглядати іншим чином.\n"
"> > \n"
"> > Спочатку ми робимо зміни у файлі `mars.txt` та `venus.txt` files:\n"
"> > ~~~\n"
"> > $ nano mars.txt\n"
"> > $ cat mars.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Maybe I should start with a base on Venus.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > ~~~\n"
"> > $ nano venus.txt\n"
"> > $ cat venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > Venus is a nice planet and I definitely should consider it as a base.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> > Тепер ви можете додати обидва файли до зони стейджингу. Ми можемо зробити це однією командою:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.txt venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Або за допомогою декількох команд:\n"
"> > ~~~\n"
"> > $ git add mars.txt\n"
"> > $ git add venus.txt\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > Тепер файли готові для коміту. Ви можете перевірити це за допомогою `git status`. Якщо ви готові зробити коміт, використовуйте\n"
"> > ~~~\n"
"> > $ git commit -m \"Write plans to start a base on Venus\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> > ~~~\n"
"> > [main cc127c2]\n"
"> >  Write plans to start a base on Venus\n"
"> >  2 files changed, 2 insertions(+)\n"
"> >  create mode 100644 venus.txt\n"
"> > ~~~\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: git-novice/_episodes/04-changes.md:731
msgid "> ## `bio` Repository"
msgstr "> ## Репозиторій `bio`"

#: git-novice/_episodes/04-changes.md:732
msgid ""
">\n"
"> * Create a new Git repository on your computer called `bio`.\n"
"> * Write a three-line biography for yourself in a file called `me.txt`,\n"
"> commit your changes\n"
"> * Modify one line, add a fourth line\n"
"> * Display the differences\n"
"> between its updated state and its original state.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > If needed, move out of the `planets` folder:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create a new folder called `bio` and 'move' into it:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Initialise git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Create your biography file `me.txt` using `nano` or another text editor.\n"
"> > Once in place, add and commit it to the repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Add biography file\" \n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Modify the file as described (modify one line, add a fourth line).\n"
"> > To display the differences\n"
"> > between its updated state and its original state, use `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> * Створіть новий репозиторій Git на вашому комп`ютері під назвою `bio`.\n"
"> * Напишіть три рядки своєї біографії у файлі під назвою `me.txt`,\n"
"> та зробіть коміт цих змін\n"
"> * Змініть один з рядків, додайте четвертий рядок\n"
"> * Покажіть відмінності\n"
"> між оновленим файлом та його попередньою версією.\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Якщо необхідно, вийдіть з папки `planets`:\n"
"> >\n"
"> > ~~~\n"
"> > $ cd ..\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Створіть нову папку  `bio` та перейдіть до неї:\n"
"> >\n"
"> > ~~~\n"
"> > $ mkdir bio\n"
"> > $ cd bio\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Iніціалізуйте репозиторій Git:\n"
"> >\n"
"> > ~~~\n"
"> > $ git init\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Створіть файл `me.txt` з вашою біографією, використовуючи `nano` або інший текстовий редактор.\n"
"> > Коли будете готові, додайте його до зони стейджингу та запишіть коміт до репозиторію:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add me.txt\n"
"> > $ git commit -m \"Add biography file\" \n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Змініть файл як описано (змініть один рядок, додайте четвертий рядок).\n"
"> > Для того щоб показати зміни\n"
"> > між оновленим файлом та його попередньою версією, використайте `git diff`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git diff me.txt\n"
"> > ~~~\n"
"> > {: .language-bash}"

#: git-novice/_episodes/04-changes.md:784
msgid ""
"[commit-messages]: https://chris.beams.io/posts/git-commit/\n"
"[git-references]: https://git-scm.com/book/en/v2/Git-Internals-Git-References"
msgstr ""
"[commit-messages]: https://chris.beams.io/posts/git-commit/\n"
"[git-references]: https://git-scm.com/book/en/v2/Git-Internals-Git-References"

#: git-novice/_episodes/04-changes.md:787
msgid "{% include links.md %}"
msgstr "{% include links.md %}"
