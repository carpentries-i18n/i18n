# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Sofiia Matios, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 20:18:53+0000\n"
"PO-Revision-Date: 2023-02-12 20:20+0000\n"
"Last-Translator: Sofiia Matios, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: git-novice/_episodes/09-conflict.md:1
msgid ""
"---\n"
"title: Conflicts\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"What do I do when my changes conflict with someone else's?\"\n"
"objectives:\n"
"- \"Explain what conflicts are and when they can occur.\"\n"
"- \"Resolve conflicts resulting from a merge.\"\n"
"keypoints:\n"
"- \"Conflicts occur when two or more people change the same lines of the same file.\"\n"
"- \"The version control system does not allow people to overwrite each other's changes blindly, but highlights conflicts so that they can be resolved.\"\n"
"---"
msgstr ""
"---\n"
"title: Конфлікти\n"
"teaching: 15\n"
"exercises: 0\n"
"questions:\n"
"- \"Що робити, коли мої зміни конфліктують з чужими?\"\n"
"objectives:\n"
"- \"Пояснити, що таке конфлікти і коли вони можуть виникнути.\"\n"
"- \"Вирішення конфліктів, що виникають внаслідок об`єднання.\"\n"
"keypoints:\n"
"- \"Конфлікти виникають, коли двоє або більше людей змінюють однакові рядки одного файлу.\"\n"
"- \"Система контролю версій не дозволяє людям перезаписувати зміни один одного наосліп, але виділяє конфлікти, щоб їх можна було вирішити.\"\n"
"---"

#: git-novice/_episodes/09-conflict.md:15
msgid ""
"As soon as people can work in parallel, they'll likely step on each other's\n"
"toes.  This will even happen with a single person: if we are working on\n"
"a piece of software on both our laptop and a server in the lab, we could make\n"
"different changes to each copy.  Version control helps us manage these\n"
"[conflicts]({{ page.root}}{% link reference.md %}#conflict) by giving us tools to\n"
"[resolve]({{ page.root }}{% link reference.md %}#resolve) overlapping changes."
msgstr ""
"Як тільки люди можуть працювати паралельно, вони, швидше за все, \"наступлять один\n"
"на одного\".  Це станеться навіть з однією людиною: якщо ми працюємо\n"
"над частиною програмного забезпечення як на нашому ноутбуці, так і на сервері в лабораторії, ми можемо внести\n"
"різні зміни в кожну копію.  Контроль версій допомагає нам керувати ними\n"
"[конфлікти]({{ page.root}}{% link reference.md %}#conflict) надаючи нам інструменти для\n"
"[вирішення]({{ page.root }}{% link reference.md %}#resolve) змін, що перекриваються."

#: git-novice/_episodes/09-conflict.md:22
msgid ""
"To see how we can resolve conflicts, we must first create one.  The file\n"
"`mars.txt` currently looks like this in both partners' copies of our `planets`\n"
"repository:"
msgstr ""
"Щоб побачити, як ми можемо вирішити конфлікти, ми повинні спочатку створити їх. Файл\n"
"`mars.txt` в даний час виглядає так в обох копіях партнерів нашого `planets`\n"
"репозиторію:"

#: git-novice/_episodes/09-conflict.md:38
msgid "Let's add a line to the collaborator's copy only:"
msgstr "Додамо лише рядок до копії колаборанта:"

# code block
#: git-novice/_episodes/09-conflict.md:46
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to Wolfman's copy\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"This line added to Wolfman's copy\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:54
msgid "and then push the change to GitHub:"
msgstr "а потім відправимо наші зміни на GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:56
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in our home copy\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:62
msgid ""
"~~~\n"
"[main 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 5ae9631] Add a line in our home copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:73
msgid ""
"~~~\n"
"Enumerating objects: 5, done.\n"
"Counting objects: 100% (5/5), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.\n"
"Total 3 (delta 2), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   29aba7c..dabb4c8  main -> main\n"
"~~~"
msgstr ""
"~~~\n"
"Enumerating objects: 5, done.\n"
"Counting objects: 100% (5/5), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (3/3), done.\n"
"Writing objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.\n"
"Total 3 (delta 2), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   29aba7c..dabb4c8  main -> main\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:86
msgid ""
"Now let's have the owner\n"
"make a different change to their copy\n"
"*without* updating from GitHub:"
msgstr ""
"Тепер давайте власник зробить \n"
"іншу зміну своєї копії *без* \n"
"оновлення з GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:96
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We added a different line in the other copy\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:104
msgid "We can commit the change locally:"
msgstr "Ми можемо комітнути наші зміни локально:"

# code block
#: git-novice/_episodes/09-conflict.md:106
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git commit -m \"Add a line in my copy\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:112
msgid ""
"~~~\n"
"[main 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"
msgstr ""
"~~~\n"
"[main 07ebc69] Add a line in my copy\n"
" 1 file changed, 1 insertion(+)\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:118
msgid "but Git won't let us push it to GitHub:"
msgstr "але Git не дозволить нам відправити зміни на GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:125
msgid ""
"~~~\n"
"To https://github.com/vlad/planets.git\n"
" ! [rejected]        main -> main (fetch first)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the remote contains work that you do\n"
"hint: not have locally. This is usually caused by another repository pushing\n"
"hint: to the same ref. You may want to first integrate the remote changes\n"
"hint: (e.g., 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"
msgstr ""
"~~~\n"
"To https://github.com/vlad/planets.git\n"
" ! [rejected]        main -> main (fetch first)\n"
"error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"hint: Updates were rejected because the remote contains work that you do\n"
"hint: not have locally. This is usually caused by another repository pushing\n"
"hint: to the same ref. You may want to first integrate the remote changes\n"
"hint: (e.g., 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:137
msgid "![The Conflicting Changes](../fig/conflict.svg)"
msgstr "![Суперечливі зміни](../fig/conflict.svg)"

#: git-novice/_episodes/09-conflict.md:139
msgid ""
"Git rejects the push because it detects that the remote repository has new updates that have not been\n"
"incorporated into the local branch.\n"
"What we have to do is pull the changes from GitHub,\n"
"[merge]({{ page.root }}{% link reference.md %}#merge) them into the copy we're currently working in, and then push that.\n"
"Let's start by pulling:"
msgstr ""
"Git відкидає це відправлення, оскільки виявляє, що віддалений репозиторій має нові оновлення, які не були\n"
"включені до локальної гілки.\n"
"Що ми повинні зробити, це витягнути зміни з GitHub,\n"
"[об`єднати]({{ page.root }}{% link reference.md %}#merge) їх у копію, в якій ми зараз працюємо, а потім відправити їх.\n"
"Давайте почнемо з отримання змін:"

# code block
#: git-novice/_episodes/09-conflict.md:150
msgid ""
"~~~\n"
"remote: Enumerating objects: 5, done.\n"
"remote: Counting objects: 100% (5/5), done.\n"
"remote: Compressing objects: 100% (1/1), done.\n"
"remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    29aba7c..dabb4c8  main     -> origin/main\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Enumerating objects: 5, done.\n"
"remote: Counting objects: 100% (5/5), done.\n"
"remote: Compressing objects: 100% (1/1), done.\n"
"remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0\n"
"Unpacking objects: 100% (3/3), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    29aba7c..dabb4c8  main     -> origin/main\n"
"Auto-merging mars.txt\n"
"CONFLICT (content): Merge conflict in mars.txt\n"
"Automatic merge failed; fix conflicts and then commit the result.\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:165
msgid ""
"The `git pull` command updates the local repository to include those\n"
"changes already included in the remote repository.\n"
"After the changes from remote branch have been fetched, Git detects that changes made to the local copy \n"
"overlap with those made to the remote repository, and therefore refuses to merge the two versions to\n"
"stop us from trampling on our previous work. The conflict is marked in\n"
"in the affected file:"
msgstr ""
"Команда `git pull` оновлює локальний репозиторій, щоб включити ті зміни,\n"
"які вже включені у віддаленому репозиторії.\n"
"Після того, як зміни з віддаленої гілки були отримані, Git виявляє, що зміни, внесені до локальної копії, \n"
"перекриваються з тими, що вносяться до віддаленого сховища, і тому відмовляється об'єднати дві версії, \n"
"щоб зупинити нас від видалення нашої попередньої роботи. Конфлікт позначений у \n"
"файлі, що постраждав:"

# code block
#: git-novice/_episodes/09-conflict.md:177
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to Wolfman's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"<<<<<<< HEAD\n"
"We added a different line in the other copy\n"
"=======\n"
"This line added to Wolfman's copy\n"
">>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:189
msgid ""
"Our change is preceded by `<<<<<<< HEAD`.\n"
"Git has then inserted `=======` as a separator between the conflicting changes\n"
"and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n"
"(The string of letters and digits after that marker\n"
"identifies the commit we've just downloaded.)"
msgstr ""
"Нашим змінам передує `<<<<<<< HEAD`.\n"
"Потім Git вставив `=======` як роздільник між конфліктуючими змінами і\n"
"позначив кінець вмісту, завантаженого з GitHub за допомогою `>>>>>>>`.\n"
"(Рядок букв і цифр після цього маркера\n"
"ідентифікує щойно завантажений коміт.)"

#: git-novice/_episodes/09-conflict.md:195
msgid ""
"It is now up to us to edit this file to remove these markers\n"
"and reconcile the changes.\n"
"We can do anything we want: keep the change made in the local repository, keep\n"
"the change made in the remote repository, write something new to replace both,\n"
"or get rid of the change entirely.\n"
"Let's replace both so that the file looks like this:"
msgstr ""
"Тепер ми маємо відредагувати цей файл, щоб видалити ці маркери\n"
"та узгодити зміни.\n"
"Ми можемо зробити все, що хочемо: зберегти зміни, зроблені в локальному сховищі, зберегти\n"
"зміни, зроблені у віддаленому сховищі, написати щось нове, щоб замінити обидва,\n"
"або позбутися від змін повністю.\n"
"Давайте замінимо обидва так, щоб файл виглядав наступним чином:"

# code block
#: git-novice/_episodes/09-conflict.md:207
#: git-novice/_episodes/09-conflict.md:299
msgid ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"
msgstr ""
"~~~\n"
"Cold and dry, but everything is my favorite color\n"
"The two moons may be a problem for Wolfman\n"
"But the Mummy will appreciate the lack of humidity\n"
"We removed the conflict on this line\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:215
msgid ""
"To finish merging,\n"
"we add `mars.txt` to the changes being made by the merge\n"
"and then commit:"
msgstr ""
"Щоб закінчити злиття,\n"
"ми додаємо `mars.txt` до змін, що вносяться об`єднанням, а потім\n"
"комітимо:"

# code block
#: git-novice/_episodes/09-conflict.md:219
msgid ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"
msgstr ""
"~~~\n"
"$ git add mars.txt\n"
"$ git status\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:225
msgid ""
"~~~\n"
"On branch main\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"
msgstr ""
"~~~\n"
"On branch main\n"
"All conflicts fixed but you are still merging.\n"
"  (use \"git commit\" to conclude merge)\n"
"\n"
"Changes to be committed:\n"
"\n"
"\tmodified:   mars.txt\n"
"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:237
msgid ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ git commit -m \"Merge changes from GitHub\"\n"
"~~~"

# code block
#: git-novice/_episodes/09-conflict.md:242
msgid ""
"~~~\n"
"[main 2abf2b1] Merge changes from GitHub\n"
"~~~"
msgstr ""
"~~~\n"
"[main 2abf2b1] Merge changes from GitHub\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:247
msgid "Now we can push our changes to GitHub:"
msgstr "Тепер ми можемо відправити наші зміни на GitHub:"

# code block
#: git-novice/_episodes/09-conflict.md:254
msgid ""
"~~~\n"
"Enumerating objects: 10, done.\n"
"Counting objects: 100% (10/10), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.\n"
"Total 6 (delta 4), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (4/4), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   dabb4c8..2abf2b1  main -> main\n"
"~~~"
msgstr ""
"~~~\n"
"Enumerating objects: 10, done.\n"
"Counting objects: 100% (10/10), done.\n"
"Delta compression using up to 8 threads\n"
"Compressing objects: 100% (6/6), done.\n"
"Writing objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.\n"
"Total 6 (delta 4), reused 0 (delta 0)\n"
"remote: Resolving deltas: 100% (4/4), completed with 2 local objects.\n"
"To https://github.com/vlad/planets.git\n"
"   dabb4c8..2abf2b1  main -> main\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:267
msgid ""
"Git keeps track of what we've merged with what,\n"
"so we don't have to fix things by hand again\n"
"when the collaborator who made the first change pulls again:"
msgstr ""
"Git відстежує те, що ми об'єднали з чим, \n"
"тому нам не потрібно знову виправляти речі вручну\n"
"коли колаборант, який зробив першу зміну, знову отримує ці зміни:"

# code block
#: git-novice/_episodes/09-conflict.md:276
msgid ""
"~~~\n"
"remote: Enumerating objects: 10, done.\n"
"remote: Counting objects: 100% (10/10), done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    dabb4c8..2abf2b1  main     -> origin/main\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"
msgstr ""
"~~~\n"
"remote: Enumerating objects: 10, done.\n"
"remote: Counting objects: 100% (10/10), done.\n"
"remote: Compressing objects: 100% (2/2), done.\n"
"remote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0\n"
"Unpacking objects: 100% (6/6), done.\n"
"From https://github.com/vlad/planets\n"
" * branch            main     -> FETCH_HEAD\n"
"    dabb4c8..2abf2b1  main     -> origin/main\n"
"Updating dabb4c8..2abf2b1\n"
"Fast-forward\n"
" mars.txt | 2 +-\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
"~~~"

#: git-novice/_episodes/09-conflict.md:292
msgid "We get the merged file:"
msgstr "Ми отримуємо об'єднаний файл:"

#: git-novice/_episodes/09-conflict.md:307
msgid ""
"We don't need to merge again because Git knows someone has already done "
"that."
msgstr ""
"Нам не потрібно знову об`єднуватися, тому що Git знає, що хтось це вже "
"зробив."

#: git-novice/_episodes/09-conflict.md:309
msgid ""
"Git's ability to resolve conflicts is very useful, but conflict resolution\n"
"costs time and effort, and can introduce errors if conflicts are not resolved\n"
"correctly. If you find yourself resolving a lot of conflicts in a project,\n"
"consider these technical approaches to reducing them:"
msgstr ""
"Здатність Git вирішувати конфлікти дуже корисна, але вирішення конфліктів \n"
"вимагає часу і зусиль, і може виводити помилки, якщо конфлікти не вирішуються\n"
"правильно. Якщо ви виявите, що вирішуєте багато конфліктів у проєкті,\n"
"розгляньте ці технічні підходи до їх зменшення::"

# unordered list
#: git-novice/_episodes/09-conflict.md:314
msgid ""
"- Pull from upstream more frequently, especially before starting new work"
msgstr "- Отримувати зміни частіше, особливо перед початком нової роботи"

# unordered list
#: git-novice/_episodes/09-conflict.md:315
msgid "- Use topic branches to segregate work, merging to main when complete"
msgstr ""
"- Використовуйте тематичні гілки для розділення роботи, об'єднання до main, "
"коли завершили"

# unordered list
#: git-novice/_episodes/09-conflict.md:316
msgid "- Make smaller more atomic commits"
msgstr "- Зробити менше величезних комітів"

# unordered list
#: git-novice/_episodes/09-conflict.md:317
msgid ""
"- Where logically appropriate, break large files into smaller ones so that "
"it is"
msgstr "- Там, де логічно доречно, розбити великі файли на менші, щоб було"

#: git-novice/_episodes/09-conflict.md:318
msgid "  less likely that two authors will alter the same file simultaneously"
msgstr "  менше шансів, що два автори змінять один і той самий файл одночасно"

#: git-novice/_episodes/09-conflict.md:320
msgid "Conflicts can also be minimized with project management strategies:"
msgstr ""
"Конфлікти також можна мінімізувати за допомогою стратегій управління "
"проєктами:"

# unordered list
#: git-novice/_episodes/09-conflict.md:322
msgid "- Clarify who is responsible for what areas with your collaborators"
msgstr "- Уточнюйте, хто відповідає за які сфери з вашими колаборантами"

# unordered list
#: git-novice/_episodes/09-conflict.md:323
msgid ""
"- Discuss what order tasks should be carried out in with your collaborators "
"so"
msgstr ""
"- Обговорити, які завдання повинні виконуватися з вашими колаборантами, щоб"

#: git-novice/_episodes/09-conflict.md:324
msgid ""
"  that tasks expected to change the same lines won't be worked on simultaneously\n"
"- If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a\n"
"  project convention that is governing and use code style tools (e.g.\n"
"  `htmltidy`, `perltidy`, `rubocop`, etc.) to enforce, if necessary"
msgstr ""
"  завдання, які очікують зміни одних і тих же ліній, не працювали одночасно\n"
"- Якщо конфлікти є стилістичними (наприклад, таби vs. пробіли), втсановіть\n"
"  угоду проєкту, яка регулює та використовує інструменти стилю коду (наприклад, \n"
"  `htmltidy`, `perltidy`, `rubocop`, тд.) для виконання, якщо це необхідно"

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:329
msgid "> ## Solving Conflicts that You Create"
msgstr "> ## Вирішення Конфліктів, які Ви Створюєте"

#: git-novice/_episodes/09-conflict.md:330
msgid ""
">\n"
"> Clone the repository created by your instructor.\n"
"> Add a new file to it,\n"
"> and modify an existing file (your instructor will tell you which one).\n"
"> When asked by your instructor,\n"
"> pull her changes from the repository to create a conflict,\n"
"> then resolve it."
msgstr ""
">\n"
"> Клонуйте репозиторій, створений вашим інструктором.\n"
"> Додайте до нього новий файл,\n"
"> і змініть існуючий файл (ваш інструктор скаже, який з них).\n"
"> За вказівкою вашого інструктора,\n"
"> отримайте його зміни з репозиторію, щоб створити конфлікт,\n"
"> а потім вирішіть його."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:339
msgid "> ## Conflicts on Non-textual files"
msgstr "> ## Конфлікти на Нетекстових файлах"

#: git-novice/_episodes/09-conflict.md:340
msgid ""
">\n"
"> What does Git do\n"
"> when there is a conflict in an image or some other non-textual file\n"
"> that is stored in version control?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Let's try it. Suppose Dracula takes a picture of Martian surface and\n"
"> > calls it `mars.jpg`.\n"
"> >\n"
"> > If you do not have an image file of Mars available, you can create\n"
"> > a dummy binary file like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ head -c 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` shows us that this created a 1-kilobyte file. It is full of\n"
"> > random bytes read from the special file, `/dev/urandom`.\n"
"> >\n"
"> > Now, suppose Dracula adds `mars.jpg` to his repository:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Suppose that Wolfman has added a similar picture in the meantime.\n"
"> > His is a picture of the Martian sky, but it is *also* called `mars.jpg`.\n"
"> > When Dracula tries to push, he gets a familiar message:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        main -> main (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"> > hint: Updates were rejected because the remote contains work that you do\n"
"> > hint: not have locally. This is usually caused by another repository pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We've learned that we must pull first and resolve any conflicts:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > When there is a conflict on an image or other binary file, git prints\n"
"> > a message like this:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  main     -> origin/main\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > The conflict message here is mostly the same as it was for `mars.txt`, but\n"
"> > there is one key additional line:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git cannot automatically insert conflict markers into an image as it does\n"
"> > for text files. So, instead of editing the image file, we must check out\n"
"> > the version we want to keep. Then we can add and commit this version.\n"
"> >\n"
"> > On the key line above, Git has conveniently given us commit identifiers\n"
"> > for the two versions of `mars.jpg`. Our version is `HEAD`, and Wolfman's\n"
"> > version is `439dc8c0...`. If we want to use our version, we can use\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > If instead we want to use Wolfman's version, we can use `git checkout` with\n"
"> > Wolfman's commit identifier, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > We can also keep *both* images. The catch is that we cannot keep them\n"
"> > under the same name. But, we can check out each version in succession\n"
"> > and *rename* it, then add the renamed versions. First, check out each\n"
"> > image and rename it:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Then, remove the old `mars.jpg` and add the two new files:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Now both images of Mars are checked into the repository, and `mars.jpg`\n"
"> > no longer exists."
msgstr ""
">\n"
"> Що робить Git\n"
"> коли виникає конфлікт у зображені або іншому нетекстовому файлі,\n"
"> що зберігається в контролі версій?\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > Давайте спробуємо. Припустимо, Dracula робить фотографію Марсіанської поверхні та\n"
"> > називає її `mars.jpg`.\n"
"> >\n"
"> > Якщо у вас немає файлу зображення Марса, ви мжете створити\n"
"> > фіктивний бінарний файл ось так:\n"
"> >\n"
"> > ~~~\n"
"> > $ head -c 1024 /dev/urandom > mars.jpg\n"
"> > $ ls -lh mars.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > -rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > `ls` показує нам, що було створено 1-кілобайт файл. Він повний\n"
"> > випадкових байтів, прочитаних з спеціального файлу, `/dev/urandom`.\n"
"> >\n"
"> > Тепер, припустимо, Dracula додає `mars.jpg` до його репозиторію:\n"
"> >\n"
"> > ~~~\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Add picture of Martian surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 8e4115c] Add picture of Martian surface\n"
"> >  1 file changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars.jpg\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Припустимо, що Wolfman тим часом додав схожу фотографію.\n"
"> > Його зображення - марсіанське небо, але воно *також* названо `mars.jpg`.\n"
"> > Коли Dracula намагається відправити зміни, він отримує знайоме повідомлення:\n"
"> >\n"
"> > ~~~\n"
"> > $ git push origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > To https://github.com/vlad/planets.git\n"
"> >  ! [rejected]        main -> main (fetch first)\n"
"> > error: failed to push some refs to 'https://github.com/vlad/planets.git'\n"
"> > hint: Updates were rejected because the remote contains work that you do\n"
"> > hint: not have locally. This is usually caused by another repository pushing\n"
"> > hint: to the same ref. You may want to first integrate the remote changes\n"
"> > hint: (e.g., 'git pull ...') before pushing again.\n"
"> > hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ми дізналися, що повинні спочатку отримувати зміни і вирішувати будь-які конфлікти:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Коли виникає конфлікт на зображенні або іншому двійковому файлі, git друкує\n"
"> > таке повідомлення:\n"
"> >\n"
"> > ~~~\n"
"> > $ git pull origin main\n"
"> > remote: Counting objects: 3, done.\n"
"> > remote: Compressing objects: 100% (3/3), done.\n"
"> > remote: Total 3 (delta 0), reused 0 (delta 0)\n"
"> > Unpacking objects: 100% (3/3), done.\n"
"> > From https://github.com/vlad/planets.git\n"
"> >  * branch            main     -> FETCH_HEAD\n"
"> >    6a67967..439dc8c  main     -> origin/main\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > Auto-merging mars.jpg\n"
"> > CONFLICT (add/add): Merge conflict in mars.jpg\n"
"> > Automatic merge failed; fix conflicts and then commit the result.\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Повідомлення про конфлікт тут в основному таке ж, як і для `mars.txt`, але \n"
"> > є один ключовий рядок:\n"
"> >\n"
"> > ~~~\n"
"> > warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Git не може автоматично вставляти конфліктні маркери в зображення, як це робить\n"
"> > для текстових файлів. Отже, замість редагування файлу зображення, ми повинні перевірити\n"
"> > tверсію, яку ми хочемо зберегти. Потім ми можемо додати і комітнути цю версію.\n"
"> >\n"
"> > На ключовій лінії вище, Git зручно дав нам ідентифікатори коміту\n"
"> > для двох версій `mars.jpg`. Наша версія `HEAD`, а версія Wolfman \n"
"> > `439dc8c0...`. Якщо ми хочемо використовувати нашу версію, ми можемо використати\n"
"> > `git checkout`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of surface instead of sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 21032c3] Use image of surface instead of sky\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Якщо замість цього ми хочемо використовувати версію Wolfman, ми можемо використовувати `git checkout`\n"
"> > з ідентифікатором коміту Wolfman, `439dc8c0`:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ git add mars.jpg\n"
"> > $ git commit -m \"Use image of sky instead of surface\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main da21b34] Use image of sky instead of surface\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Ми також можемо зберігати *обидва* зображення. Загвоздка в тому, що ми не можемо їх залишити\n"
"> > під однією й тією ж назвою. Але, ми можемо перевірити кожну версію послідовно\n"
"> > і *перейменувати* файл, потім додати перейменовані версії. Спочатку перевірте кожне \n"
"> > зображення і перейменуйте його:\n"
"> >\n"
"> > ~~~\n"
"> > $ git checkout HEAD mars.jpg\n"
"> > $ git mv mars.jpg mars-surface.jpg\n"
"> > $ git checkout 439dc8c0 mars.jpg\n"
"> > $ mv mars.jpg mars-sky.jpg\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Потім видаліть старий `mars.jpg` і додайте два нових файли:\n"
"> >\n"
"> > ~~~\n"
"> > $ git rm mars.jpg\n"
"> > $ git add mars-surface.jpg\n"
"> > $ git add mars-sky.jpg\n"
"> > $ git commit -m \"Use two images: surface and sky\"\n"
"> > ~~~\n"
"> > {: .language-bash}\n"
"> >\n"
"> > ~~~\n"
"> > [main 94ae08c] Use two images: surface and sky\n"
"> >  2 files changed, 0 insertions(+), 0 deletions(-)\n"
"> >  create mode 100644 mars-sky.jpg\n"
"> >  rename mars.jpg => mars-surface.jpg (100%)\n"
"> > ~~~\n"
"> > {: .output}\n"
"> >\n"
"> > Тепер обидва зображення Марса перевіряються в репозиторії, і `mars.jpg`\n"
"> > більше не існує."

# blockquote, which can be cascaded
#: git-novice/_episodes/09-conflict.md:509
msgid "> ## A Typical Work Session"
msgstr "> ## Типова Робоча Сесія"

#: git-novice/_episodes/09-conflict.md:510
msgid ""
">\n"
"> You sit down at your computer to work on a shared project that is tracked in a\n"
"> remote Git repository. During your work session, you take the following\n"
"> actions, but not in this order:\n"
">\n"
"> - *Make changes* by appending the number `100` to a text file `numbers.txt`\n"
"> - *Update remote* repository to match the local repository\n"
"> - *Celebrate* your success with some fancy beverage(s)\n"
"> - *Update local* repository to match the remote repository\n"
"> - *Stage changes* to be committed\n"
"> - *Commit changes* to the local repository\n"
">\n"
"> In what order should you perform these actions to minimize the chances of\n"
"> conflicts? Put the commands above in order in the *action* column of the table\n"
"> below. When you have the order right, see if you can write the corresponding\n"
"> commands in the *command* column. A few steps are populated to get you\n"
"> started.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . |\n"
"> > |-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin main`                     |\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    |\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        |\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt\"`     |\n"
"> > |5    | Update remote     | `git push origin main`                     |\n"
"> > |6    | Celebrate!        | `AFK`                                        |"
msgstr ""
">\n"
"> Ви сідаєте за комп'ютер, щоб працювати над спільним проєктом, який відстежується у\n"
"> віддаленому репозиторії Git. Під час робочого сеансу ви приймаєте наступні\n"
"> дії, але не в цьому порядку:\n"
">\n"
"> - *Внесіть зміни *, додавши число '100' до текстового файлуe `numbers.txt`\n"
"> - *Оновіть віддалений* репозиторій, щоб відповідати локальному репозиторію\n"
"> - *Святкуйте* свій успіх з якимось напоєм(-ями)\n"
"> - *Оновіть локальний* репозиторій, щоб відповідати віддаленому репозиторію\n"
"> - *Перенесіть зміни в зону стейджингу*, щоб зробити коміт\n"
"> - *Комітніть зміни* до локального репозиторію\n"
">\n"
"> В якому порядку слід виконувати ці дії, щоб мінімізувати шанси \n"
"> конфліктів? Наведіть команди вище в порядок, у стовпці *action* в таблиці\n"
"> нижче. Коли ви розставите все у відповідному порядку, подивіться, чи можете ви написати відповідні команди в стовпці\n"
"> *command*. Кілька кроків вже заповнені, щоб допомогти вам \n"
"> розпочати.\n"
">\n"
"> |order|action . . . . . . . . . . |command . . . . . . . . . . |\n"
"> |-----|---------------------------|----------------------------|\n"
"> |1    |                           |                            |\n"
"> |2    |                           | `echo 100 >> numbers.txt`  |\n"
"> |3    |                           |                            |\n"
"> |4    |                           |                            |\n"
"> |5    |                           |                            |\n"
"> |6    | Celebrate!                | `AFK`                      |\n"
">\n"
"> > ## Відповідь\n"
"> >\n"
"> > |order|action . . . . . . |command . . . . . . . . . . . . . . . . . . . |\n"
"> > |-----|-------------------|----------------------------------------------|\n"
"> > |1    | Update local      | `git pull origin main`                     |\n"
"> > |2    | Make changes      | `echo 100 >> numbers.txt`                    |\n"
"> > |3    | Stage changes     | `git add numbers.txt`                        |\n"
"> > |4    | Commit changes    | `git commit -m \"Add 100 to numbers.txt\"`     |\n"
"> > |5    | Update remote     | `git push origin main`                     |\n"
"> > |6    | Celebrate!        | `AFK`                                        |"
