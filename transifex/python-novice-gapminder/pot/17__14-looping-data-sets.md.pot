# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:1
# Front Matter
msgid "---\n"
"title: \"Looping Over Data Sets\"\n"
"teaching: 5\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I process many data sets with a single command?\"\n"
"objectives:\n"
"- \"Be able to read and write globbing expressions that match sets of files.\"\n"
"- \"Use glob to create lists of files.\"\n"
"- \"Write for loops to perform operations on files given their names in a list.\"\n"
"keypoints:\n"
"- \"Use a `for` loop to process files given a list of their names.\"\n"
"- \"Use `glob.glob` to find sets of files whose names match a pattern.\"\n"
"- \"Use `glob` and `for` to process batches of files.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:17
# header
msgid "## Use a `for` loop to process files given a list of their names."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:19
# unordered list
msgid "*   A filename is a character string."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:20
# unordered list
msgid "*   And lists can contain character strings."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:22
# code block
msgid "~~~\n"
"import pandas as pd\n"
"for filename in ['data/gapminder_gdp_africa.csv', 'data/gapminder_gdp_asia.csv']:\n"
"    data = pd.read_csv(filename, index_col='country')\n"
"    print(filename, data.min())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:28
msgid "{: .language-python}\n"
"~~~\n"
"data/gapminder_gdp_africa.csv gdpPercap_1952    298.846212\n"
"gdpPercap_1957    335.997115\n"
"gdpPercap_1962    355.203227\n"
"gdpPercap_1967    412.977514\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    312.188423\n"
"gdpPercap_2002    241.165877\n"
"gdpPercap_2007    277.551859\n"
"dtype: float64\n"
"data/gapminder_gdp_asia.csv gdpPercap_1952    331\n"
"gdpPercap_1957    350\n"
"gdpPercap_1962    388\n"
"gdpPercap_1967    349\n"
"⋮ ⋮ ⋮\n"
"gdpPercap_1997    415\n"
"gdpPercap_2002    611\n"
"gdpPercap_2007    944\n"
"dtype: float64\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:51
# header
msgid "## Use [`glob.glob`](https://docs.python.org/3/library/glob.html#glob.glob) to find sets of files whose names match a pattern."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:53
# unordered list
msgid "*   In Unix, the term \"globbing\" means \"matching a set of files with a pattern\"."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:54
# unordered list
msgid "*   The most common patterns are:"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:55
# unordered list
msgid "    *   `*` meaning \"match zero or more characters\""
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:56
# unordered list
msgid "    *   `?` meaning \"match exactly one character\""
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:57
# unordered list
msgid "*   Python contains the [`glob`](https://docs.python.org/3/library/glob.html) library to provide pattern matching functionality"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:58
# unordered list
msgid "*   The [`glob`](https://docs.python.org/3/library/glob.html) library contains a function also called `glob` to match file patterns"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:59
# unordered list
msgid "*   E.g., `glob.glob('*.txt')` matches all files in the current directory "
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:60
msgid "    whose names end with `.txt`.\n"
"*   Result is a (possibly empty) list of character strings."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:63
# code block
msgid "~~~\n"
"import glob\n"
"print('all csv files in data directory:', glob.glob('data/*.csv'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:67
msgid "{: .language-python}\n"
"~~~\n"
"all csv files in data directory: ['data/gapminder_all.csv', 'data/gapminder_gdp_africa.csv', \\\n"
"'data/gapminder_gdp_americas.csv', 'data/gapminder_gdp_asia.csv', 'data/gapminder_gdp_europe.csv', \\\n"
"'data/gapminder_gdp_oceania.csv']\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:75
# code block
msgid "~~~\n"
"print('all PDB files:', glob.glob('*.pdb'))\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:78
msgid "{: .language-python}\n"
"~~~\n"
"all PDB files: []\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:84
# header
msgid "## Use `glob` and `for` to process batches of files."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:86
# unordered list
msgid "*   Helps a lot if the files are named and stored systematically and consistently"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:87
msgid "    so that simple patterns will find the right data."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:89
# code block
msgid "~~~\n"
"for filename in glob.glob('data/gapminder_*.csv'):\n"
"    data = pd.read_csv(filename)\n"
"    print(filename, data['gdpPercap_1952'].min())\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:94
msgid "{: .language-python}\n"
"~~~\n"
"data/gapminder_all.csv 298.8462121\n"
"data/gapminder_gdp_africa.csv 298.8462121\n"
"data/gapminder_gdp_americas.csv 1397.717137\n"
"data/gapminder_gdp_asia.csv 331.0\n"
"data/gapminder_gdp_europe.csv 973.5331948\n"
"data/gapminder_gdp_oceania.csv 10039.59564\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:105
# unordered list
msgid "*   This includes all data, as well as per-region data."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:106
# unordered list
msgid "*   Use a more specific pattern in the exercises to exclude the whole data set."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:107
# unordered list
msgid "*   But note that the minimum of the entire data set is also the minimum of one of the data sets,"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:108
msgid "    which is a nice check on correctness."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:110
# blockquote, which can be cascaded
msgid "> ## Determining Matches"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:111
msgid ">\n"
"> Which of these files is *not* matched by the expression `glob.glob('data/*as*.csv')`?\n"
">\n"
"> 1. `data/gapminder_gdp_africa.csv`\n"
"> 2. `data/gapminder_gdp_americas.csv`\n"
"> 3. `data/gapminder_gdp_asia.csv`\n"
"> 4. 1 and 2 are not matched.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1 is not matched by the glob."
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:125
# blockquote, which can be cascaded
msgid "> ## Minimum File Size"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:126
msgid ">\n"
"> Modify this program so that it prints the number of records in\n"
"> the file that has the fewest records.\n"
">\n"
"> ~~~\n"
"> import glob\n"
"> import pandas as pd\n"
"> fewest = ____\n"
"> for filename in glob.glob('data/*.csv'):\n"
">     dataframe = pd.____(filename)\n"
">     fewest = min(____, dataframe.shape[0])\n"
"> print('smallest file has', fewest, 'records')\n"
"> ~~~\n"
"> {: .language-python}\n"
"> Note that the [shape method](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.shape.html)\n"
"> returns a tuple with the number of rows and columns of the data frame.\n"
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > fewest = float('Inf')\n"
"> > for filename in glob.glob('data/*.csv'):\n"
"> >     dataframe = pd.read_csv(filename)\n"
"> >     fewest = min(fewest, dataframe.shape[0])\n"
"> > print('smallest file has', fewest, 'records')\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:157
# blockquote, which can be cascaded
msgid "> ## Comparing Data"
msgstr ""

#: python-novice-gapminder/_episodes/14-looping-data-sets.md:158
msgid ">\n"
"> Write a program that reads in the regional data sets\n"
"> and plots the average GDP per capita for each region over time\n"
"> in a single chart.\n"
"> > ## Solution\n"
"> > This solution builds a useful legend by using the string [`split`](https://docs.python.org/3/library/stdtypes.html#str.split) method to\n"
"> > extract the `region` from the path 'data/gapminder_gdp_a_specific_region.csv'. The [`pathlib module`]\n"
"> > also provides useful abstractions for file and path manipulation like returning the name of a file \n"
"> > without the file extension.\n"
"> > ~~~\n"
"> > import glob\n"
"> > import pandas as pd\n"
"> > import matplotlib.pyplot as plt\n"
"> > fig, ax = plt.subplots(1,1)\n"
"> > for filename in glob.glob('data/gapminder_gdp*.csv'):\n"
"> >     dataframe = pd.read_csv(filename)\n"
"> >     # extract <region> from the filename, expected to be in the format 'data/gapminder_gdp_<region>.csv'.\n"
"> >     # we will split the string using the split method and `_` as our separator,\n"
"> >     # retrieve the last string in the list that split returns (`<region>.csv`), \n"
"> >     # and then remove the `.csv` extension from that string.\n"
"> >     region = filename.split('_')[-1][:-4] \n"
"> >     dataframe.mean().plot(ax=ax, label=region)\n"
"> > plt.legend()\n"
"> > plt.show()\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""

