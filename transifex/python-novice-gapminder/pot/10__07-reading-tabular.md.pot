# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: python-novice-gapminder/_episodes/07-reading-tabular.md:1
# Front Matter
msgid "---\n"
"title: \"Reading Tabular Data into DataFrames\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I read tabular data?\"\n"
"objectives:\n"
"- \"Import the Pandas library.\"\n"
"- \"Use Pandas to load a simple CSV data set.\"\n"
"- \"Get some basic information about a Pandas DataFrame.\"\n"
"keypoints:\n"
"- \"Use the Pandas library to get basic statistics out of tabular data.\"\n"
"- \"Use `index_col` to specify that a column's values should be used as row headings.\"\n"
"- \"Use `DataFrame.info` to find out more about a dataframe.\"\n"
"- \"The `DataFrame.columns` variable stores information about the dataframe's columns.\"\n"
"- \"Use `DataFrame.T` to transpose a dataframe.\"\n"
"- \"Use `DataFrame.describe` to get summary statistics about data.\"\n"
"---"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:19
# header
msgid "## Use the Pandas library to do statistics on tabular data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:21
# unordered list
msgid "*   Pandas is a widely-used Python library for statistics, particularly on tabular data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:22
# unordered list
msgid "*   Borrows many features from R's dataframes."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:23
# unordered list
msgid "    *   A 2-dimensional table whose columns have names"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:24
msgid "        and potentially have different data types.\n"
"*   Load it with `import pandas as pd`. The alias pd is commonly used for Pandas.\n"
"*   Read a Comma Separate Values (CSV) data file with `pd.read_csv`.\n"
"    *   Argument is the name of the file to be read.\n"
"    *   Assign result to a variable to store the data that was read."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:30
# code block
msgid "~~~\n"
"import pandas as pd\n"
"\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv')\n"
"print(data)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:36
msgid "{: .language-python}\n"
"~~~\n"
"       country  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"0    Australia     10039.59564     10949.64959     12217.22686\n"
"1  New Zealand     10556.57566     12247.39532     13175.67800"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:42
msgid "   gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"0     14526.12465     16788.62948     18334.19751     19477.00928\n"
"1     14463.91893     16046.03728     16233.71770     17632.41040"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:46
msgid "   gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"0     21888.88903     23424.76683     26997.93657     30687.75473\n"
"1     19007.19129     18363.32494     21050.41377     23189.80135"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:50
msgid "   gdpPercap_2007\n"
"0     34435.36744\n"
"1     25185.00911\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:56
# unordered list
msgid "*   The columns in a dataframe are the observed variables, and the rows are the observations."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:57
# unordered list
msgid "*   Pandas uses backslash `\\` to show wrapped lines when output is too wide to fit the screen."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:59
# blockquote, which can be cascaded
msgid "> ## File Not Found"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:60
msgid ">\n"
"> Our lessons store their data files in a `data` sub-directory,\n"
"> which is why the path to the file is `data/gapminder_gdp_oceania.csv`.\n"
"> If you forget to include `data/`,\n"
"> or if you include it but your copy of the file is somewhere else,\n"
"> you will get a [runtime error]({{ page.root }}/04-built-in/#runtime-error)\n"
"> that ends with a line like this:\n"
">\n"
"> ~~~\n"
"> OSError: File b'gapminder_gdp_oceania.csv' does not exist\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:74
# header
msgid "## Use `index_col` to specify that a column's values should be used as row headings."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:76
# unordered list
msgid "*   Row headings are numbers (0 and 1 in this case)."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:77
# unordered list
msgid "*   Really want to index by country."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:78
# unordered list
msgid "*   Pass the name of the column to `read_csv` as its `index_col` parameter to do this."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:80
# code block
msgid "~~~\n"
"data = pd.read_csv('data/gapminder_gdp_oceania.csv', index_col='country')\n"
"print(data)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:84
msgid "{: .language-python}\n"
"~~~\n"
"             gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"country\n"
"Australia       10039.59564     10949.64959     12217.22686     14526.12465\n"
"New Zealand     10556.57566     12247.39532     13175.67800     14463.91893"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:91
msgid "             gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"country\n"
"Australia       16788.62948     18334.19751     19477.00928     21888.88903\n"
"New Zealand     16046.03728     16233.71770     17632.41040     19007.19129"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:96
msgid "             gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"country\n"
"Australia       23424.76683     26997.93657     30687.75473     34435.36744\n"
"New Zealand     18363.32494     21050.41377     23189.80135     25185.00911\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:103
# header
msgid "## Use `DataFrame.info` to find out more about a dataframe."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:105
# code block
msgid "~~~\n"
"data.info()\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:108
msgid "{: .language-python}\n"
"~~~\n"
"<class 'pandas.core.frame.DataFrame'>\n"
"Index: 2 entries, Australia to New Zealand\n"
"Data columns (total 12 columns):\n"
"gdpPercap_1952    2 non-null float64\n"
"gdpPercap_1957    2 non-null float64\n"
"gdpPercap_1962    2 non-null float64\n"
"gdpPercap_1967    2 non-null float64\n"
"gdpPercap_1972    2 non-null float64\n"
"gdpPercap_1977    2 non-null float64\n"
"gdpPercap_1982    2 non-null float64\n"
"gdpPercap_1987    2 non-null float64\n"
"gdpPercap_1992    2 non-null float64\n"
"gdpPercap_1997    2 non-null float64\n"
"gdpPercap_2002    2 non-null float64\n"
"gdpPercap_2007    2 non-null float64\n"
"dtypes: float64(12)\n"
"memory usage: 208.0+ bytes\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:130
# unordered list
msgid "*   This is a `DataFrame`"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:131
# unordered list
msgid "*   Two rows named `'Australia'` and `'New Zealand'`"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:132
# unordered list
msgid "*   Twelve columns, each of which has two actual 64-bit floating point values."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:133
# unordered list
msgid "    *   We will talk later about null values, which are used to represent missing observations."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:134
# unordered list
msgid "*   Uses 208 bytes of memory."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:136
# header
msgid "## The `DataFrame.columns` variable stores information about the dataframe's columns."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:138
# unordered list
msgid "*   Note that this is data, *not* a method."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:139
# unordered list
msgid "    *   Like `math.pi`."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:140
# unordered list
msgid "    *   So do not use `()` to try to call it."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:141
# unordered list
msgid "*   Called a *member variable*, or just *member*."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:143
# code block
msgid "~~~\n"
"print(data.columns)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:146
msgid "{: .language-python}\n"
"~~~\n"
"Index(['gdpPercap_1952', 'gdpPercap_1957', 'gdpPercap_1962', 'gdpPercap_1967',\n"
"       'gdpPercap_1972', 'gdpPercap_1977', 'gdpPercap_1982', 'gdpPercap_1987',\n"
"       'gdpPercap_1992', 'gdpPercap_1997', 'gdpPercap_2002', 'gdpPercap_2007'],\n"
"      dtype='object')\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:155
# header
msgid "## Use `DataFrame.T` to transpose a dataframe."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:157
# unordered list
msgid "*   Sometimes want to treat columns as rows and vice versa."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:158
# unordered list
msgid "*   Transpose (written `.T`) doesn't copy the data, just changes the program's view of it."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:159
# unordered list
msgid "*   Like `columns`, it is a member variable."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:161
# code block
msgid "~~~\n"
"print(data.T)\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:164
msgid "{: .language-python}\n"
"~~~\n"
"country           Australia  New Zealand\n"
"gdpPercap_1952  10039.59564  10556.57566\n"
"gdpPercap_1957  10949.64959  12247.39532\n"
"gdpPercap_1962  12217.22686  13175.67800\n"
"gdpPercap_1967  14526.12465  14463.91893\n"
"gdpPercap_1972  16788.62948  16046.03728\n"
"gdpPercap_1977  18334.19751  16233.71770\n"
"gdpPercap_1982  19477.00928  17632.41040\n"
"gdpPercap_1987  21888.88903  19007.19129\n"
"gdpPercap_1992  23424.76683  18363.32494\n"
"gdpPercap_1997  26997.93657  21050.41377\n"
"gdpPercap_2002  30687.75473  23189.80135\n"
"gdpPercap_2007  34435.36744  25185.00911\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:182
# header
msgid "## Use `DataFrame.describe` to get summary statistics about data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:184
msgid "DataFrame.describe() gets the summary statistics of only the columns that have numerical data. \n"
"All other columns are ignored, unless you use the argument `include='all'`.\n"
"~~~\n"
"print(data.describe())\n"
"~~~\n"
"{: .language-python}\n"
"~~~\n"
"       gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  gdpPercap_1967  \\\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     10298.085650    11598.522455    12696.452430    14495.021790\n"
"std        365.560078      917.644806      677.727301       43.986086\n"
"min      10039.595640    10949.649590    12217.226860    14463.918930\n"
"25%      10168.840645    11274.086022    12456.839645    14479.470360\n"
"50%      10298.085650    11598.522455    12696.452430    14495.021790\n"
"75%      10427.330655    11922.958888    12936.065215    14510.573220\n"
"max      10556.575660    12247.395320    13175.678000    14526.124650"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:201
msgid "       gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  gdpPercap_1987  \\\n"
"count         2.00000        2.000000        2.000000        2.000000\n"
"mean      16417.33338    17283.957605    18554.709840    20448.040160\n"
"std         525.09198     1485.263517     1304.328377     2037.668013\n"
"min       16046.03728    16233.717700    17632.410400    19007.191290\n"
"25%       16231.68533    16758.837652    18093.560120    19727.615725\n"
"50%       16417.33338    17283.957605    18554.709840    20448.040160\n"
"75%       16602.98143    17809.077557    19015.859560    21168.464595\n"
"max       16788.62948    18334.197510    19477.009280    21888.889030"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:211
msgid "       gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  gdpPercap_2007\n"
"count        2.000000        2.000000        2.000000        2.000000\n"
"mean     20894.045885    24024.175170    26938.778040    29810.188275\n"
"std       3578.979883     4205.533703     5301.853680     6540.991104\n"
"min      18363.324940    21050.413770    23189.801350    25185.009110\n"
"25%      19628.685413    22537.294470    25064.289695    27497.598692\n"
"50%      20894.045885    24024.175170    26938.778040    29810.188275\n"
"75%      22159.406358    25511.055870    28813.266385    32122.777857\n"
"max      23424.766830    26997.936570    30687.754730    34435.367440\n"
"~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:223
# unordered list
msgid "*   Not particularly useful with just two records,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:224
msgid "    but very helpful when there are thousands."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:226
# blockquote, which can be cascaded
msgid "> ## Reading Other Data"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:227
msgid ">\n"
"> Read the data in `gapminder_gdp_americas.csv`\n"
"> (which should be in the same directory as `gapminder_gdp_oceania.csv`)\n"
"> into a variable called `americas`\n"
"> and display its summary statistics.\n"
">\n"
"> > ## Solution\n"
"> > To read in a CSV, we use `pd.read_csv` and pass the filename 'data/gapminder_gdp_americas.csv' to it. We also once again pass the\n"
"> > column name 'country' to the parameter `index_col` in order to index by country:\n"
"> > ~~~\n"
"> > americas = pd.read_csv('data/gapminder_gdp_americas.csv', index_col='country')\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:245
# blockquote, which can be cascaded
msgid "> ## Inspecting Data."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:246
msgid ">\n"
"> After reading the data for the Americas,\n"
"> use `help(americas.head)` and `help(americas.tail)`\n"
"> to find out what `DataFrame.head` and `DataFrame.tail` do.\n"
">\n"
"> 1.  What method call will display the first three rows of this data?\n"
"> 2.  What method call will display the last three columns of this data?\n"
">     (Hint: you may need to change your view of the data.)\n"
">\n"
"> > ## Solution\n"
"> > 1. We can check out the first five rows of `americas` by executing `americas.head()` (allowing us to view the head\n"
"> > of the DataFrame). We can specify the number of rows we wish to see by specifying the parameter `n` in our call\n"
"> > to `americas.head()`. To view the first three rows, execute:\n"
"> >\n"
"> > ~~~\n"
"> > americas.head(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > \n"
"> > The output is then\n"
"> > ~~~\n"
"> >          continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \\\n"
"> >country                                                               \n"
"> >Argentina  Americas     5911.315053     6856.856212     7133.166023   \n"
"> >Bolivia    Americas     2677.326347     2127.686326     2180.972546   \n"
"> >Brazil     Americas     2108.944355     2487.365989     3336.585802   \n"
"> >\n"
"> >           gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \\\n"
"> >country                                                                     \n"
"> >Argentina     8052.953021     9443.038526    10079.026740     8997.897412   \n"
"> >Bolivia       2586.886053     2980.331339     3548.097832     3156.510452   \n"
"> >Brazil        3429.864357     4985.711467     6660.118654     7030.835878   \n"
"> >\n"
"> >           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \\\n"
"> >country                                                                     \n"
"> >Argentina     9139.671389     9308.418710    10967.281950     8797.640716   \n"
"> >Bolivia       2753.691490     2961.699694     3326.143191     3413.262690   \n"
"> >Brazil        7807.095818     6950.283021     7957.980824     8131.212843   \n"
"> >\n"
"> >           gdpPercap_2007  \n"
"> >country                    \n"
"> >Argentina    12779.379640  \n"
"> >Bolivia       3822.137084  \n"
"> >Brazil        9065.800825 \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > 2. To check out the last three rows of `americas`, we would use the command, `americas.tail(n=3)`,\n"
"> > analogous to `head()` used above. However, here we want to look at the last three columns so we need\n"
"> > to change our view and then use `tail()`. To do so, we create a new DataFrame in which rows and \n"
"> > columns are switched\n"
"> > \n"
"> > ~~~\n"
"> > americas_flipped = americas.T\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> >\n"
"> > We can then view the last three columns of `americas` by viewing the last three rows of `americas_flipped`:\n"
"> > ~~~\n"
"> > americas_flipped.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}\n"
"> > The output is then\n"
"> > ~~~\n"
"> > country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \\\n"
"> > gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36   \n"
"> > gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26   \n"
"> > gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58   \n"
"> > \n"
"> > country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \\\n"
"> > gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...      \n"
"> > gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...      \n"
"> > gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...      \n"
"> > \n"
"> > country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \\\n"
"> > gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4   \n"
"> > gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6   \n"
"> > gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7   \n"
"> > \n"
"> > country        Trinidad and Tobago United States  Uruguay Venezuela  \n"
"> > gdpPercap_1997             8792.57       35767.4  9230.24   10165.5  \n"
"> > gdpPercap_2002             11460.6       39097.1     7727   8605.05  \n"
"> > gdpPercap_2007             18008.5       42951.7  10611.5   11415.8  \n"
"> > ~~~ \n"
"> >{: .output}\n"
"> > Note: we could have done the above in a single line of code by 'chaining' the commands:\n"
"> > ~~~\n"
"> > americas.T.tail(n=3)\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:338
# blockquote, which can be cascaded
msgid "> ## Reading Files in Other Directories"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:339
msgid ">\n"
"> The data for your current project is stored in a file called `microbes.csv`,\n"
"> which is located in a folder called `field_data`.\n"
"> You are doing analysis in a notebook called `analysis.ipynb`\n"
"> in a sibling folder called `thesis`:\n"
">\n"
"> ~~~\n"
"> your_home_directory\n"
"> +-- field_data/\n"
"> |   +-- microbes.csv\n"
"> +-- thesis/\n"
">     +-- analysis.ipynb\n"
"> ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:353
msgid ">\n"
"> What value(s) should you pass to `read_csv` to read `microbes.csv` in `analysis.ipynb`?\n"
"> \n"
"> > ## Solution\n"
"> > We need to specify the path to the file of interest in the call to `pd.read_csv`. We first need to 'jump' out of\n"
"> > the folder `thesis` using '../' and then into the folder `field_data` using 'field_data/'. Then we can specify the filename `microbes.csv.\n"
"> > The result is as follows:\n"
"> > ~~~\n"
"> > data_microbes = pd.read_csv('../field_data/microbes.csv')\n"
"> > ~~~\n"
"> >{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:367
# blockquote, which can be cascaded
msgid "> ## Writing Data"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:369
# blockquote, which can be cascaded
msgid "> As well as the `read_csv` function for reading data from a file,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:370
# blockquote, which can be cascaded
msgid "> Pandas provides a `to_csv` function to write dataframes to files."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:371
# blockquote, which can be cascaded
msgid "> Applying what you've learned about reading from files,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:372
# blockquote, which can be cascaded
msgid "> write one of your dataframes to a file called `processed.csv`."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:373
# blockquote, which can be cascaded
msgid "> You can use `help` to get information on how to use `to_csv`."
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:374
#: python-novice-gapminder/_episodes/08-data-frames.md:371
#: python-novice-gapminder/_episodes/13-conditionals.md:298
# blockquote, which can be cascaded
msgid "> > ## Solution"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:375
# blockquote, which can be cascaded
msgid "> > In order to write the DataFrame `americas` to a file called `processed.csv`, execute the following command:"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:376
#: python-novice-gapminder/_episodes/07-reading-tabular.md:378
#: python-novice-gapminder/_episodes/07-reading-tabular.md:381
#: python-novice-gapminder/_episodes/07-reading-tabular.md:383
#: python-novice-gapminder/_episodes/08-data-frames.md:373
#: python-novice-gapminder/_episodes/08-data-frames.md:378
#: python-novice-gapminder/_episodes/08-data-frames.md:381
#: python-novice-gapminder/_episodes/08-data-frames.md:387
#: python-novice-gapminder/_episodes/13-conditionals.md:300
#: python-novice-gapminder/_episodes/13-conditionals.md:309
# blockquote, which can be cascaded
msgid "> > ~~~"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:377
# blockquote, which can be cascaded
msgid "> > americas.to_csv('processed.csv')"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:379
#: python-novice-gapminder/_episodes/07-reading-tabular.md:384
# blockquote, which can be cascaded
msgid "> >{: .language-python}"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:380
# blockquote, which can be cascaded
msgid "> > For help on `to_csv`, you could execute, for example,"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:382
# blockquote, which can be cascaded
msgid "> > help(americas.to_csv)"
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:385
# blockquote, which can be cascaded
msgid "> > Note that `help(to_csv)` throws an error! This is a subtlety and is due to the fact that `to_csv` is NOT a function in "
msgstr ""

#: python-novice-gapminder/_episodes/07-reading-tabular.md:386
# blockquote, which can be cascaded
msgid "> > and of itself and the actual call is `americas.to_csv`. "
msgstr ""

