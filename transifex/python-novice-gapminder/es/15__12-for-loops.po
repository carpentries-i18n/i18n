# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Ingrid Bianka <ingrid.bianka@gmail.com>, 2020
# Miguel González Duque <miguelgondu@gmail.com>, 2020
# David PS <dps.helio@gmail.com>, 2020
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: David PS <dps.helio@gmail.com>, 2020\n"
"Language-Team: Spanish (https://www.transifex.com/carpentries-i18n/teams/98915/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# Front Matter
#: python-novice-gapminder/_episodes/12-for-loops.md:1
msgid ""
"---\n"
"title: \"For Loops\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I make a program do many things?\"\n"
"objectives:\n"
"- \"Explain what for loops are normally used for.\"\n"
"- \"Trace the execution of a simple (unnested) loop and correctly state the values of variables in each iteration.\"\n"
"- \"Write for loops that use the Accumulator pattern to aggregate values.\"\n"
"keypoints:\n"
"- \"A *for loop* executes commands once for each value in a collection.\"\n"
"- \"A `for` loop is made up of a collection, a loop variable, and a body.\"\n"
"- \"The first line of the `for` loop must end with a colon, and the body must be indented.\"\n"
"- \"Indentation is always meaningful in Python.\"\n"
"- \"Loop variables can be called anything (but it is strongly advised to have a meaningful name to the looping variable).\"\n"
"- \"The body of a loop can contain many statements.\"\n"
"- \"Use `range` to iterate over a sequence of numbers.\"\n"
"- \"The Accumulator pattern turns many values into one.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Bucles For\"\n"
"teaching: 10\n"
"exercises: 15\n"
"questions:\n"
"- \"¿Cómo puedo hacer que un programa haga muchas cosas?\"\n"
"objectives:\n"
"- \"Explicar para qué se usan normalmente los bucles for.\"\n"
"- \"Rastrear la ejecución de un bucle simple (no anidado) e indicar correctamente los valores de las variables en cada iteración.\"\n"
"- \"Escribir bucles for que usan el patrón del Acumulador para agregar valores.\"\n"
"keypoints:\n"
"- \"Un *bucle for* ejecuta comandos una vez para cada valor en una colección.\"\n"
"- \"Un bucle `for` se compone de una colección, una variable de bucle y un cuerpo.\"\n"
"- \"La primera línea del bucle `for` debe terminar con dos puntos, y el cuerpo debe ser indentado.\"\n"
"- \"La indentación siempre es significativa en Python.\"\n"
"- \"Las variables de bucle se pueden llamar de cualquier forma (pero se recomienda encarecidamente tener un nombre significativo para la variable de bucle).\"\n"
"- \"El cuerpo de un bucle puede contener muchas instrucciones.\"\n"
"- \"Usa `range` para iterar sobre una secuencia de números.\"\n"
"- \"El patrón Acumulador convierte muchos valores en uno.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:21
msgid "## A *for loop* executes commands once for each value in a collection."
msgstr ""
"##  Un *bucle for* ejecuta comandos una vez para cada valor en una "
"colección."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:23
msgid "*   Doing calculations on the values in a list one by one"
msgstr "* Hacer cálculos sobre los valores en una lista uno por uno"

#: python-novice-gapminder/_episodes/12-for-loops.md:24
msgid ""
"    is as painful as working with `pressure_001`, `pressure_002`, etc.\n"
"*   A *for loop* tells Python to execute some statements once for each value in a list,\n"
"    a character string,\n"
"    or some other collection.\n"
"*   \"for each thing in this group, do these operations\""
msgstr ""
"es tan incómodo como trabajar con `pressure_001`, `pressure_002`, etc.\n"
"* Un *bucle for* le dice a Python que ejecute algunas instrucciones una vez por cada valor de una lista,\n"
"una secuencia de caracteres,\n"
" o alguna otra colección.\n"
"* \"para cada cosa en este grupo, realiza estas operaciones\""

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:30
#: python-novice-gapminder/_episodes/12-for-loops.md:56
msgid ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"    print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"    print(number)\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:36
msgid "*   This `for` loop is equivalent to:"
msgstr "* Este bucle `for` es equivalente a:"

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:38
msgid ""
"~~~\n"
"print(2)\n"
"print(3)\n"
"print(5)\n"
"~~~"
msgstr ""
"~~~\n"
"print(2)\n"
"print(3)\n"
"print(5)\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:45
msgid "*   And the `for` loop's output is:"
msgstr "* Y la salida del bucle `for` es:"

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:47
msgid ""
"~~~\n"
"2\n"
"3\n"
"5\n"
"~~~"
msgstr ""
"~~~\n"
"2\n"
"3\n"
"5\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:54
msgid ""
"## A `for` loop is made up of a collection, a loop variable, and a body."
msgstr ""
"## Un bucle `for` se compone de una colección, una variable de control y un "
"cuerpo."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:62
msgid "*   The collection, `[2, 3, 5]`, is what the loop is being run on."
msgstr ""
"* La colección, `[2, 3, 5]`, es sobre lo que se está ejecutando el bucle."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:63
msgid ""
"*   The body, `print(number)`, specifies what to do for each value in the "
"collection."
msgstr ""
"* El cuerpo, `print (number)`, especifica qué hacer para cada valor en la "
"colección."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:64
msgid ""
"*   The loop variable, `number`, is what changes for each *iteration* of the"
" loop."
msgstr ""
"* La variable de control, `number`, es lo que cambia para cada *iteración* "
"del bucle."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:65
msgid "    *   The \"current thing\"."
msgstr "* El \"valor actual de la variable\"."

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:67
msgid ""
"## The first line of the `for` loop must end with a colon, and the body must"
" be indented."
msgstr ""
"## La primera línea del bucle `for` debe terminar con dos puntos, y el "
"cuerpo debe estar indentado."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:69
msgid ""
"*   The colon at the end of the first line signals the start of a *block* of"
" statements."
msgstr ""
"* Los dos puntos al final de la primera línea indican el inicio de un "
"*bloque* de instrucciones."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:70
msgid ""
"*   Python uses indentation rather than `{}` or `begin`/`end` to show "
"*nesting*."
msgstr ""
"* Python usa indentación en lugar de `{}` o `begin` /` end` para mostrar "
"*anidamiento *."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:71
msgid ""
"    *   Any consistent indentation is legal, but almost everyone uses four "
"spaces."
msgstr ""
" * Cualquier indentación consistente es legal, pero casi todos usan cuatro "
"espacios."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:73
msgid ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"for number in [2, 3, 5]:\n"
"print(number)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:77
msgid ""
"{: .language-python}\n"
"~~~\n"
"IndentationError: expected an indented block\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"IndentationError: expected an indented block\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:83
msgid "*   Indentation is always meaningful in Python."
msgstr "* La indentación es siempre significativa en Python."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:85
msgid ""
"~~~\n"
"firstName = \"Jon\"\n"
"  lastName = \"Smith\"\n"
"~~~"
msgstr ""
"~~~\n"
"firstName = \"Jon\"\n"
"  lastName = \"Smith\"\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:89
msgid ""
"{: .language-python}\n"
"~~~\n"
"  File \"<ipython-input-7-f65f2962bf9c>\", line 2\n"
"    lastName = \"Smith\"\n"
"    ^\n"
"IndentationError: unexpected indent\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"File \"<ipython-input-7-f65f2962bf9c>\", line 2\n"
"lastName = \"Smith\"\n"
"^\n"
"IndentationError: unexpected indent\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:98
msgid "*   This error can be fixed by removing the extra spaces"
msgstr "* Este error se puede solucionar eliminando los espacios adicionales "

#: python-novice-gapminder/_episodes/12-for-loops.md:99
msgid "    at the beginning of the second line."
msgstr "al comienzo de la segunda línea."

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:101
msgid "## Loop variables can be called anything."
msgstr "## Las variables de control pueden tener cualquier nombre."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:103
msgid "*   As with all variables, loop variables are:"
msgstr "* Como todas las variables, las variables de control son:"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:104
msgid "    *   Created on demand."
msgstr " * Creadas a petición."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:105
msgid "    *   Meaningless: their names can be anything at all."
msgstr " * Sin significado: pueden usar cualquier nombre."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:107
msgid ""
"~~~\n"
"for kitten in [2, 3, 5]:\n"
"    print(kitten)\n"
"~~~"
msgstr ""
"~~~\n"
"for kitten in [2, 3, 5]:\n"
"    print(kitten)\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:113
msgid "## The body of a loop can contain many statements."
msgstr "## El cuerpo de un bucle puede contener muchas instrucciones."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:115
msgid "*   But no loop should be more than a few lines long."
msgstr ""
"* Pero ningún bucle debería tener más de unas pocas líneas de longitud."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:116
msgid "*   Hard for human beings to keep larger chunks of code in mind."
msgstr ""
"* Es difícil para los seres humanos tener en mente grandes fragmentos de "
"código."

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:118
msgid ""
"~~~\n"
"primes = [2, 3, 5]\n"
"for p in primes:\n"
"    squared = p ** 2\n"
"    cubed = p ** 3\n"
"    print(p, squared, cubed)\n"
"~~~"
msgstr ""
"~~~\n"
"primes = [2, 3, 5]\n"
"for p in primes:\n"
"    squared = p ** 2\n"
"    cubed = p ** 3\n"
"    print(p, squared, cubed)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:125
msgid ""
"{: .language-python}\n"
"~~~\n"
"2 4 8\n"
"3 9 27\n"
"5 25 125\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"2 4 8\n"
"3 9 27\n"
"5 25 125\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:133
msgid "## Use `range` to iterate over a sequence of numbers."
msgstr "## Usa `range` para iterar sobre una secuencia de números."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:135
msgid ""
"*   The built-in function "
"[`range`](https://docs.python.org/3/library/stdtypes.html#range) produces a "
"sequence of numbers."
msgstr ""
"* La función incorporada "
"[`range`](https://docs.python.org/3/library/stdtypes.html#range) produce una"
" secuencia de números."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:136
msgid "    *   *Not* a list: the numbers are produced on demand"
msgstr " * *No es* una lista: los números se producen a pedido."

#: python-novice-gapminder/_episodes/12-for-loops.md:137
msgid ""
"        to make looping over large ranges more efficient.\n"
"*   `range(N)` is the numbers 0..N-1\n"
"    *   Exactly the legal indices of a list or character string of length N"
msgstr ""
" para hacer que el bucle en grandes rangos sea más eficiente\n"
"* `range(N)` son los números 0..N-1\n"
"* Exactamente los índices legales de una lista o secuencia de caracteres de longitud N"

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:141
msgid ""
"~~~\n"
"print('a range is not a list: range(0, 3)')\n"
"for number in range(0, 3):\n"
"    print(number)\n"
"~~~"
msgstr ""
"~~~\n"
"print('un range no es una lista: range(0, 3)')\n"
"for number in range(0, 3):\n"
"    print(number)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:146
msgid ""
"{: .language-python}\n"
"~~~\n"
"a range is not a list: range(0, 3)\n"
"0\n"
"1\n"
"2\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"un range no es una lista: range(0, 3)\n"
"0\n"
"1\n"
"2\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/12-for-loops.md:155
msgid "## The Accumulator pattern turns many values into one."
msgstr "## El patrón Acumulador convierte muchos valores en uno."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:157
msgid "*   A common pattern in programs is to:"
msgstr "*  Un patrón común en los programas es:"

#: python-novice-gapminder/_episodes/12-for-loops.md:158
msgid ""
"    1.  Initialize an *accumulator* variable to zero, the empty string, or the empty list.\n"
"    2.  Update the variable with values from a collection."
msgstr ""
" 1. Inicializar una variable *acumulador* a cero, la secuencia de caracteres vacía o la lista vacía.\n"
"2. Actualizar la variable con valores de una colección. "

# code block
#: python-novice-gapminder/_episodes/12-for-loops.md:161
msgid ""
"~~~\n"
"# Sum the first 10 integers.\n"
"total = 0\n"
"for number in range(10):\n"
"   total = total + (number + 1)\n"
"print(total)\n"
"~~~"
msgstr ""
"~~~\n"
"# Suma los primeros 10 números enteros.\n"
"total = 0\n"
"for number in range(10):\n"
"    total = total + (number + 1)\n"
"print(total)\n"
"~~~"

#: python-novice-gapminder/_episodes/12-for-loops.md:168
msgid ""
"{: .language-python}\n"
"~~~\n"
"55\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"55\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:174
msgid "*   Read `total = total + (number + 1)` as:"
msgstr "* Lee `total = total + (number + 1)` como:"

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:175
msgid "    *   Add 1 to the current value of the loop variable `number`."
msgstr " * Suma 1 al valor actual de la variable de control `number`."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:176
msgid ""
"    *   Add that to the current value of the accumulator variable `total`."
msgstr "* Añade esto al valor actual de la variable acumuladora `total`."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:177
msgid "    *   Assign that to `total`, replacing the current value."
msgstr "* Asigna esto a `total`, reemplazando el valor actual."

# unordered list
#: python-novice-gapminder/_episodes/12-for-loops.md:178
msgid ""
"*   We have to add `number + 1` because `range` produces 0..9, not 1..10."
msgstr ""
"* Tenemos que añadir `number + 1` porque `range` produce 0..9, no 1..10."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:180
msgid "> ## Classifying Errors"
msgstr "> ## Clasificación de errores "

#: python-novice-gapminder/_episodes/12-for-loops.md:181
msgid ""
">\n"
"> Is an indentation error a syntax error or a runtime error?\n"
"> > ## Solution\n"
"> > An IndentationError is a syntax error. Programs with syntax errors cannot be started.\n"
"> > A program with a runtime error will start but an error will be thrown under certain conditions."
msgstr ""
">\n"
"> ¿Es un error de indentación un error de sintaxis o un error de tiempo de ejecución?\n"
"> > ## Solución\n"
"> > Un IndentationError es un error de sintaxis. Los programas con errores de sintaxis no se pueden iniciar\n"
"> > Un programa con un error de ejecución se iniciará pero se lanzará un error bajo ciertas condiciones."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:189
#: python-novice-gapminder/_episodes/13-conditionals.md:253
msgid "> ## Tracing Execution"
msgstr "> ## Rastreo de Ejecución"

#: python-novice-gapminder/_episodes/12-for-loops.md:190
msgid ""
">\n"
"> Create a table showing the numbers of the lines that are executed when this program runs,\n"
"> and the values of the variables after each line is executed.\n"
">\n"
"> ~~~\n"
"> total = 0\n"
"> for char in \"tin\":\n"
">     total = total + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > | Line no | Variables            |\n"
"> > |---------|----------------------|\n"
"> > | 1       | total = 0            |\n"
"> > | 2       | total = 0 char = 't' |\n"
"> > | 3       | total = 1 char = 't' |\n"
"> > | 2       | total = 1 char = 'i' |\n"
"> > | 3       | total = 2 char = 'i' |\n"
"> > | 2       | total = 2 char = 'n' |\n"
"> > | 3       | total = 3 char = 'n' |"
msgstr ""
">\n"
"> Crea una tabla que muestre los números de las líneas que se ejecutan cuando se corre este programa,  \n"
"> y los valores de las variables después de ejecutar cada línea.\n"
">\n"
"> ~~~\n"
"> total = 0\n"
"> for char in \"tin\":\n"
"> total = total + 1\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> >\n"
"> > | no. de linea | Variables |\n"
"> > |---------|----------------------|\n"
"> > | 1 | total = 0 |\n"
"> > | 2 | total = 0 char = 't' |\n"
"> > | 3 | total = 1 char = 't' |\n"
"> > | 2 | total = 1 char = 'i' |\n"
"> > | 3 | total = 2 char = 'i' |\n"
"> > | 2 | total = 2 char = 'n' |\n"
"> > | 3 | total = 3 char = 'n' |"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:214
msgid "> ## Reversing a String"
msgstr "> ## Invertir a una secuencia de caracteres"

#: python-novice-gapminder/_episodes/12-for-loops.md:215
msgid ""
">\n"
"> Fill in the blanks in the program below so that it prints \"nit\"\n"
"> (the reverse of the original character string \"tin\").\n"
">\n"
"> ~~~\n"
"> original = \"tin\"\n"
"> result = ____\n"
"> for char in original:\n"
">     result = ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > original = \"tin\"\n"
"> > result = \"\"\n"
"> > for char in original:\n"
"> >     result = char + result\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Completa los espacios en blanco en el programa a continuación para que imprima \"nit\"\n"
"> (el reverso de la secuencia de caracteres original \"tin\").\n"
">\n"
"> ~~~\n"
"> original = \"tin\"\n"
"> result = ____\n"
"> for char in original:\n"
"> result = ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > ~~~\n"
"> > original = \"tin\"\n"
"> > result = \"\"\n"
"> > for char in original:\n"
"> > result = char + result\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:239
msgid "> ## Practice Accumulating"
msgstr "> ## Practica con el Acumulador"

#: python-novice-gapminder/_episodes/12-for-loops.md:240
msgid ""
">\n"
"> Fill in the blanks in each of the programs below\n"
"> to produce the indicated result.\n"
">\n"
"> ~~~\n"
"> # Total length of the strings in the list: [\"red\", \"green\", \"blue\"] => 12\n"
"> total = 0\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     ____ = ____ + len(word)\n"
"> print(total)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > total = 0\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     total = total + len(word)\n"
"> > print(total)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Complete los espacios en blanco en cada uno de los programas de abajo\n"
"> para producir el resultado indicado.\n"
">\n"
"> ~~~\n"
"> # Longitud total de las cadenas de texto en la lista: [\"red\", \"green\", \"blue\"] => 12\n"
"> total = 0\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     ____ = ____ + len(word)\n"
"> print(total)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > ~~~\n"
"> > total = 0\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     total = total + len(word)\n"
"> > print(total)\n"
"> > ~~~\n"
"> > {: .language-python}"

#: python-novice-gapminder/_episodes/12-for-loops.md:261
msgid ""
">\n"
"> ~~~\n"
"> # List of word lengths: [\"red\", \"green\", \"blue\"] => [3, 5, 4]\n"
"> lengths = ____\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     lengths.____(____)\n"
"> print(lengths)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > lengths = []\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     lengths.append(len(word))\n"
"> > print(lengths)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> ~~~\n"
"> # Lista de longitudes de las palabras: [\"red\", \"green\", \"blue\"] => [3, 5, 4]\n"
"> lengths = ____\n"
"> for word in [\"red\", \"green\", \"blue\"]:\n"
">     lengths.____(____)\n"
"> print(lengths)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > ~~~\n"
"> > lengths = []\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     lengths.append(len(word))\n"
"> > print(lengths)\n"
"> > ~~~\n"
"> > {: .language-python}"

#: python-novice-gapminder/_episodes/12-for-loops.md:279
msgid ""
">\n"
"> ~~~\n"
"> # Concatenate all words: [\"red\", \"green\", \"blue\"] => \"redgreenblue\"\n"
"> words = [\"red\", \"green\", \"blue\"]\n"
"> result = ____\n"
"> for ____ in ____:\n"
">     ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > words = [\"red\", \"green\", \"blue\"]\n"
"> > result = \"\"\n"
"> > for word in words:\n"
"> >     result = result + word\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> ~~~\n"
"> # Concatena todas las palabras: [\"red\", \"green\", \"blue\"] => \"redgreenblue\"\n"
"> words = [\"red\", \"green\", \"blue\"]\n"
"> result = ____\n"
"> for ____ in ____:\n"
">     ____\n"
"> print(result)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > ~~~\n"
"> > words = [\"red\", \"green\", \"blue\"]\n"
"> > result = \"\"\n"
"> > for word in words:\n"
"> >     result = result + word\n"
"> > print(result)\n"
"> > ~~~\n"
"> > {: .language-python} "

#: python-novice-gapminder/_episodes/12-for-loops.md:299
msgid ""
">\n"
"> ~~~\n"
"> # Create acronym: [\"red\", \"green\", \"blue\"] => \"RGB\"\n"
"> # write the whole thing\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > acronym = \"\"\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     acronym = acronym + word[0].upper()\n"
"> > print(acronym)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> ~~~\n"
"> # Crea un acrónimo: [\"red\", \"green\", \"blue\"] => \"RGB\"\n"
"> # escribe toda la solución.\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > ~~~\n"
"> > acronym = \"\"\n"
"> > for word in [\"red\", \"green\", \"blue\"]:\n"
"> >     acronym = acronym + word[0].upper()\n"
"> > print(acronym)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:316
msgid "> ## Cumulative Sum"
msgstr "> ## Suma acumulativa"

#: python-novice-gapminder/_episodes/12-for-loops.md:317
msgid ""
">\n"
"> Reorder and properly indent the lines of code below\n"
"> so that they print a list with the cumulative sum of data.\n"
"> The result should be `[1, 3, 5, 10]`.\n"
">\n"
"> ~~~\n"
"> cumulative.append(sum)\n"
"> for number in data:\n"
"> cumulative = []\n"
"> sum += number\n"
"> sum = 0\n"
"> print(cumulative)\n"
"> data = [1,2,2,5]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > sum = 0\n"
"> > data = [1,2,2,5]\n"
"> > cumulative = []\n"
"> > for number in data:\n"
"> >     sum += number\n"
"> >     cumulative.append(sum)\n"
"> > print(cumulative)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Reordena e indenta correctamente las líneas de código a continuación\n"
"> para que se imprima una lista con la suma acumulativa de datos.\n"
"> El resultado debería ser `[1, 3, 5, 10]`.\n"
">\n"
"> ~~~\n"
"> cumulative.append(sum)\n"
"> for number in data:\n"
"> cumulative = []\n"
"> sum += number\n"
"> sum = 0\n"
"> print(cumulative)\n"
"> data = [1,2,2,5]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > ~~~\n"
"> > sum = 0\n"
"> > data = [1,2,2,5]\n"
"> > cumulative = []\n"
"> > for number in data:\n"
"> >     sum += number\n"
"> >     cumulative.append(sum)\n"
"> > print(cumulative)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:346
msgid "> ## Identifying Variable Name Errors"
msgstr "> ## Identificación de errores en el nombre de la variable"

#: python-novice-gapminder/_episodes/12-for-loops.md:347
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code and read the error message.\n"
">    What type of `NameError` do you think this is?\n"
">    Is it a string with no quotes, a misspelled variable, or a\n"
">    variable that should have been defined but was not?\n"
"> 3. Fix the error.\n"
"> 4. Repeat steps 2 and 3, until you have fixed all the errors.\n"
">\n"
"> ~~~\n"
"> for number in range(10):\n"
">     # use a if the number is a multiple of 3, otherwise use b\n"
">     if (Number % 3) == 0:\n"
">         message = message + a\n"
">     else:\n"
">         message = message + \"b\"\n"
"> print(message)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > The variable `message` needs to be initialized and Python variable names are case sensitive: `number` and `Number`\n"
"> > refer to different variables.\n"
"> > ~~~\n"
"> > message = \"\"\n"
"> > for number in range(10):\n"
"> >     # use a if the number is a multiple of 3, otherwise use b\n"
"> >     if (number % 3) == 0:\n"
"> >         message = message + \"a\"\n"
"> >     else:\n"
"> >         message = message + \"b\"\n"
"> > print(message)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> 1. Lee el siguiente código e intenta identificar cuáles son los errores\n"
"> *sin* ejecutarlos.\n"
"> 2. Ejecuta el código y lee el mensaje de error.\n"
"> ¿Qué tipo de `NameError` crees que es?\n"
"> ¿Es una secuencia de caracteres sin comillas, una variable mal escrita o una\n"
"> variable que debería haber sido definida pero no lo fue?\n"
"> 3. Corrige el error.\n"
"> 4. Repite los pasos 2 y 3, hasta que haya solucionado todos los errores.\n"
">\n"
"> ~~~\n"
"> for number in range(10):\n"
">     # usa a si el número es un múltiplo de 3, usa b en los otros casos\n"
">     if (Number % 3) == 0:\n"
">         message = message + a\n"
">     else:\n"
">         message = message + \"b\"\n"
"> print(message)\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > la variable `message` necesita ser inicializada y los nombres de las variables en Python son sensibles a las mayúsculas y minúsculas: `number` y `Number`\n"
"> > se refieren a diferentes variables.\n"
"> > ~~~\n"
"> > message = \"\"\n"
"> > for number in range(10):\n"
"> >     # usa a si el número es un múltiplo de 3, usa b en los otros casos\n"
"> >     if (number % 3) == 0:\n"
"> >         message = message + \"a\"\n"
"> >     else:\n"
"> >         message = message + \"b\"\n"
"> > print(message)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/12-for-loops.md:384
msgid "> ## Identifying Item Errors"
msgstr "> ## Identificación de errores en los elementos"

#: python-novice-gapminder/_episodes/12-for-loops.md:385
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are\n"
">    *without* running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
"> 3. Fix the error.\n"
">\n"
"> ~~~\n"
"> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> print('My favorite season is ', seasons[4])\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> > This list has 4 elements and the index to access the last element in the list is `3`.\n"
"> > ~~~\n"
"> > seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> > print('My favorite season is ', seasons[3])\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> 1. Lee el código que aparece a continuación e intenta identificar cuáles son los errores\n"
">    *sin* ejecutarlo.\n"
"> 2. Ejecuta el código y lee el mensaje de error. ¿Qué tipo de error es?\n"
"> 3. Arregla el error.\n"
">\n"
"> ~~~\n"
"> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> print('Mi temporada favorita es  ', seasons[4])\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solución\n"
"> > Esta lista tiene 4 elementos y el índice para acceder al último elemento de la lista es `3`.\n"
"> > ~~~\n"
"> > seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n"
"> > print('Mi temporada favorita es ', seasons[3])\n"
"> > ~~~\n"
"> > {: .language-python}"
