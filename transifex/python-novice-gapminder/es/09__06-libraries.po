# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Miguel González Duque <miguelgondu@gmail.com>, 2020
# Irma Martínez-Flores <irma@ccg.unam.mx>, 2020
# David PS <dps.helio@gmail.com>, 2020
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: David PS <dps.helio@gmail.com>, 2020\n"
"Language-Team: Spanish (https://www.transifex.com/carpentries-i18n/teams/98915/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# Front Matter
#: python-novice-gapminder/_episodes/06-libraries.md:1
msgid ""
"---\n"
"title: \"Libraries\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use software that other people have written?\"\n"
"- \"How can I find out what that software does?\"\n"
"objectives:\n"
"- \"Explain what software libraries are and why programmers create and use them.\"\n"
"- \"Write programs that import and use libraries from Python's standard library.\"\n"
"- \"Find and read documentation for standard libraries interactively (in the interpreter) and online.\"\n"
"keypoints:\n"
"- \"Most of the power of a programming language is in its libraries.\"\n"
"- \"A program must import a library module in order to use it.\"\n"
"- \"Use `help` to learn about the contents of a library module.\"\n"
"- \"Import specific items from a library to shorten programs.\"\n"
"- \"Create an alias for a library when importing it to shorten programs.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Bibliotecas\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"¿Cómo puedo usar el software que otras personas han escrito?\"\n"
"- \"¿Cómo puedo saber qué hace dicho software?\"\n"
"objectives:\n"
"- \"Explicar qué son las bibliotecas de software, y por qué los programadores las crean y usan.\"\n"
"- \"Escribir programas que importen y usen bibliotecas de la biblioteca estándar de Python.\"\n"
"- \"Encontrar y leer la documentación de las bibliotecas estándar de forma interactiva (en el intérprete) y en  línea.\"\n"
"keypoints:\n"
"- \"Gran parte del poder que puede tener un lenguaje de programación está en sus bibliotecas.\"\n"
"- \"Un programa debe importar los módulos de una biblioteca para poder usarlos.\"\n"
"- \"Usa `help` para aprender sobre los contenidos de un módulo de la biblioteca.\"\n"
"- \"Importa elementos específicos de una biblioteca para acortar programas.\"\n"
"- \"Crea un alias para una biblioteca al importarla para acortar programas.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:19
msgid "## Most of the power of a programming language is in its libraries."
msgstr ""
"## Gran parte del poder de un lenguaje de programación está en sus "
"bibliotecas."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:21
msgid ""
"*   A *library* is a collection of files (called *modules*) that contains"
msgstr ""
"* Una *biblioteca* es una colección de archivos (llamados *módulos*) que "
"contienen"

#: python-novice-gapminder/_episodes/06-libraries.md:22
msgid ""
"    functions for use by other programs.\n"
"    *   May also contain data values (e.g., numerical constants) and other things.\n"
"    *   Library's contents are supposed to be related, but there's no way to enforce that.\n"
"*   The Python [standard library][stdlib] is an extensive suite of modules that comes\n"
"    with Python itself.\n"
"*   Many additional libraries are available from [PyPI][pypi] (the Python Package Index).\n"
"*   We will see later how to write new libraries."
msgstr ""
"funciones para ser usadas por otros programas.\n"
"* Pueden también contener datos (e.g. constantes numéricas) y otras cosas.\n"
"* Los contenidos de una biblioteca deberían estar relacionados, pero no hay una forma establecida para imponer esto.\n"
"* La [biblioteca estándar][stdlib] de Python es una colección extensa de módulos que vienen\n"
"con Python mismo.\n"
"* Muchas bibliotecas adicionales están disponibles en [PyPI][pypi] (el índice de paquetes de Python).\n"
"* Más tarde veremos cómo escribir nuevas bibliotecas."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:30
msgid "> ## Libraries and modules"
msgstr "> ## Bibliotecas y módulos"

#: python-novice-gapminder/_episodes/06-libraries.md:31
msgid ""
">\n"
"> A library is a collection of modules, but the terms are often used\n"
"> interchangeably, especially since many libraries only consist of a single\n"
"> module, so don't worry if you mix them."
msgstr ""
">\n"
"> Una biblioteca es una colección de módulos, pero los términos a menudo se usan\n"
"> indistintamente, especialmente porque muchas bibliotecas consisten de un solo\n"
"> módulo, entonces no te preocupes si las mezclas. "

# header
#: python-novice-gapminder/_episodes/06-libraries.md:38
msgid "## A program must import a library module before using it."
msgstr "## Un programa debe importar un módulo de biblioteca antes de usarlo."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:40
msgid "*   Use `import` to load a library module into a program's memory."
msgstr ""
"* Usa `import` para cargar un módulo de una biblioteca en la memoria del "
"programa."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:41
msgid "*   Then refer to things from the module as `module_name.thing_name`."
msgstr ""
"* Después refiérete a las cosas del módulo como "
"`nombre_del_modulo.nombre_de_la_cosa`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:42
msgid "    *   Python uses `.` to mean \"part of\"."
msgstr "*  Python usa `.`  para referirse a \"parte de\"."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:43
msgid "*   Using `math`, one of the modules in the standard library:"
msgstr "* Usando `math`, uno de los módulos de la biblioteca estándar:"

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:45
msgid ""
"~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math\n"
"\n"
"print('pi es', math.pi)\n"
"print('cos(pi) es', math.cos(math.pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:51
msgid ""
"{: .language-python}\n"
"~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"pi es 3.141592653589793\n"
"cos(pi) es -1.0\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:58
msgid "*   Have to refer to each item with the module's name."
msgstr "* Debemos referirnos a cada elemento con el nombre del módulo."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:59
msgid "    *   `math.cos(pi)` won't work: the reference to `pi`"
msgstr "    *   `math.cos(pi)` no funcionará: la referencia a `pi`"

#: python-novice-gapminder/_episodes/06-libraries.md:60
msgid "        doesn't somehow \"inherit\" the function's reference to `math`."
msgstr ""
"no \"hereda\" de alguna forma la referencia que está haciendo la función a "
"`math`"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:62
msgid "## Use `help` to learn about the contents of a library module."
msgstr ""
"## Usa `help` para aprender sobre los contenidos del módulo de una "
"biblioteca."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:64
msgid "*   Works just like help for a function."
msgstr "* Funciona tal y como la ayuda para una función."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:66
msgid ""
"~~~\n"
"help(math)\n"
"~~~"
msgstr ""
"~~~\n"
"help(math)\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:69
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"

#: python-novice-gapminder/_episodes/06-libraries.md:73
msgid ""
"NAME\n"
"    math"
msgstr ""
"NAME\n"
"    math"

#: python-novice-gapminder/_episodes/06-libraries.md:76
msgid ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"
msgstr ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"

#: python-novice-gapminder/_episodes/06-libraries.md:79
msgid ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."
msgstr ""
"La documentación que sigue fue automáticamente generada desde los archivos fuente\n"
"de Python (los cuales están escritos en inglés). Puede estar incompleta, ser incorrecta o incluir características que son\n"
"consideradas detalles de la implementación y que pueden variar entre implementaciones\n"
"de Python. Cuando tengas dudas, consulta la referencia al módulo en la\n"
"dirección que encuentras arriba."

#: python-novice-gapminder/_episodes/06-libraries.md:85
msgid ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."
msgstr ""
"DESCRIPTION\n"
"    Este módulo siempre está disponible. Proporciona acceso a las\n"
"    funciones matemáticas definidas por el estándar C."

#: python-novice-gapminder/_episodes/06-libraries.md:89
msgid ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"
msgstr ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Devuelve el arco coseno (medido en radianes) de x\n"
"⋮ ⋮ ⋮\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:96
msgid "## Import specific items from a library module to shorten programs."
msgstr ""
"## Importa elementos específicos del módulo de una biblioteca para acortar "
"programas"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:98
msgid ""
"*   Use `from ... import ...` to load only specific items from a library "
"module."
msgstr ""
"* Usa `from ... import ...` para cargar solamente elementos específicos del "
"módulo de una biblioteca."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:99
msgid "*   Then refer to them directly without library name as prefix."
msgstr ""
"* Después refiérete a ellos directamente sin escribir el nombre de la "
"biblioteca como prefijo."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:101
msgid ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"
msgstr ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) es', cos(pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:122
msgid ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) es -1.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:112
msgid ""
"## Create an alias for a library module when importing it to shorten "
"programs."
msgstr ""
"## Crea un alias para el módulo de una biblioteca al importarlo para acortar"
" programas."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:114
msgid ""
"*   Use `import ... as ...` to give a library a short *alias* while "
"importing it."
msgstr ""
"* Usa `import ... as ...` para asignarle a una biblioteca un *alias* más "
"corto al importarla."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:115
msgid "*   Then refer to items in the library using that shortened name."
msgstr ""
"* Después refiérete a los elementos de la biblioteca usando el nombre corto."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:117
msgid ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) es', m.cos(m.pi))\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:128
msgid ""
"*   Commonly used for libraries that are frequently used or have long names."
msgstr ""
"*   Esto se suele hacer con las librerías que se usan frecuentemente o que "
"tienen nombres largos."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:129
msgid "    *   E.g., `matplotlib` plotting library is often aliased as `mpl`."
msgstr ""
"* Por ejemplo, para la biblioteca de graficación `matplotlib` se suele usar "
"el alias `mpl`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:130
msgid "*   But can make programs harder to understand,"
msgstr ""
"* Pero esto puede hacer que los programas sean más difíciles de entender,"

#: python-novice-gapminder/_episodes/06-libraries.md:131
msgid "    since readers must learn your program's aliases."
msgstr "porque los lectores deberán aprender los alias de tu programa."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:133
msgid "> ## Exploring the Math Module"
msgstr "> ## Explorando el módulo Math"

#: python-novice-gapminder/_episodes/06-libraries.md:134
msgid ""
">\n"
"> 1. What function from the `math` module can you use to calculate a square root\n"
">    *without* using `sqrt`?\n"
"> 2. Since the library contains this function, why does `sqrt` exist?\n"
">\n"
"> > ## Solution\n"
"> > 1. Using `help(math)` we see that we've got `pow(x,y)` in addition to `sqrt(x)`,\n"
"> >    so we could use `pow(x, 0.5)` to find a square root.\n"
"> > 2. The `sqrt(x)` function is arguably more readable than `pow(x, 0.5)` when\n"
"> >    implementing equations. Readability is a cornerstone of good programming, so it\n"
"> >    makes sense to provide a special function for this specific common case.\n"
"> >\n"
"> >    Also, the design of Python's `math` library has its origin in the C standard,\n"
"> >    which includes both `sqrt(x)` and `pow(x,y)`, so a little bit of the history\n"
"> >    of programming is showing in Python's function names."
msgstr ""
">\n"
"> 1. ¿Qué función del módulo `math` se puede usar para calcular la raíz cuadrada\n"
"> *sin usar* `sqrt`?\n"
"> 2. Si la biblioteca contiene esta otra función, ¿por qué existe `sqrt`?\n"
">\n"
"> > ## Solución\n"
"> > 1. Usando `help(math)` podemos ver que tenemos `pow(x,y)` además de `sqrt(x)`,\n"
"> > entonces podemos usar `pow(x, 0.5)` para hallar una raíz cuadrada.\n"
"> > 2. Podríamos argumentar que la función `sqrt(x)` es más legible que `pow(x, 0.5)` cuando\n"
"> > implementamos ecuaciones. La legibilidad es la piedra angular de la buena programación, entonces\n"
"> > tiene sentido proveer una función especial para este caso específico y común.\n"
"> > \n"
"> > También, el diseño de la biblioteca `math` de Python tiene sus raíces en el estándar de C,\n"
"> > el cual incluye ambos `sqrt(x)` y `pow(x,y)`, entonces un poco de la historia de \n"
"> > la programación está mostrándose en los nombres de las funciones de Python. "

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:152
msgid "> ## Locating the Right Module"
msgstr "> ## Localizando el módulo correcto"

#: python-novice-gapminder/_episodes/06-libraries.md:153
msgid ""
">\n"
"> You want to select a random character from a string:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Which [standard library][stdlib] module could help you?\n"
"> 2. Which function would you select from that module? Are there alternatives?\n"
"> 3. Try to write a program that uses the function.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The [random module][randommod] seems like it could help you.\n"
"> >\n"
"> > The string has 11 characters, each having a positional index from 0 to 10.\n"
"> > You could use `random.randrange` function (or the alias `random.randint`\n"
"> > if you find that easier to remember) to get a random integer between 0 and\n"
"> > 10, and then pick out the character at that position:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > or more compactly:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Perhaps you found the `random.sample` function? It allows for slightly\n"
"> > less typing:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Note that this function returns a list of values. We will learn about\n"
"> > lists in [episode 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > There's also other functions you could use, but with more convoluted\n"
"> > code as a result."
msgstr ""
">\n"
"> Tú quieres seleccionar un caracter de una secuencia de caracteres al azar:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. ¿Cuál módulo de la [biblioteca estándar][stdlib] podría ayudarte?\n"
"> 2. ¿Qué función seleccionarías de ese módulo?, ¿tienes otras alternativas?\n"
"> 3. Intenta escribir un programa que use esa función.\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > El [módulo aleatorio][randommod] parece que podría ayudarte.\n"
"> >\n"
"> > La cadena tiene 11 caracteres, cada uno con un índice posicional de 0 a 10.\n"
"> > Podrías usar la función `random.randrange` (o el alias `random.randint`\n"
"> > si te parece más fácil de recordar) para obtener un número entero al azar entre 0 y \n"
"> > 10, y después seleccionar el caracter en esa posición:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > o, más compacto:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > ¿Tal vez encontraste la función `random.sample`? Ésta te permite escribir\n"
"> > un poco menos:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Nota que esta función regresa una lista de valores. Aprenderemos sobre\n"
"> > listas en el [episodio 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > Hay también otras funciones que podrías usar, pero resultarías con un\n"
"> > código más complejo."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:210
msgid "> ## Jigsaw Puzzle (Parson's Problem) Programming Example"
msgstr "> ## Ejemplo de programación con el rompecabezas (problema de Parson)"

#: python-novice-gapminder/_episodes/06-libraries.md:211
msgid ""
">\n"
"> Rearrange the following statements so that a random\n"
"> DNA base is printed and its index in the string.  Not all statements may be needed.  Feel free to use/add\n"
"> intermediate variables.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Reorganiza las siguientes declaraciones para imprimir una\n"
"> base de ADN al azar junto con su índice en la cadena. Puede que no todas las declaraciones sean necesarias. Puedes usar/añadir variables intermedias. \n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"base aleatoria\", bases[___], \"índice de la base\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"base aleatoria\", bases[idx], \"índice de la base\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:240
msgid "> ## When Is Help Available?"
msgstr "> ## ¿Cuándo está disponible la ayuda?"

#: python-novice-gapminder/_episodes/06-libraries.md:241
msgid ""
">\n"
"> When a colleague of yours types `help(math)`,\n"
"> Python reports an error:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"
msgstr ""
">\n"
"> Cuando un colega tuyo escribe `help(math)`,\n"
"> Python reporta un error:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:249
msgid ""
">\n"
"> What has your colleague forgotten to do?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Importing the math module (`import math`)"
msgstr ""
">\n"
"> ¿Qué se le olvidó hacer a tu colega?\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > importar el módulo `math` (`import math`)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:258
msgid "> ## Importing With Aliases"
msgstr "> ## Importando con los alias."

#: python-novice-gapminder/_episodes/06-libraries.md:259
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Rewrite the program so that it uses `import` *without* `as`.\n"
"> 3. Which form do you find easier to read?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > can be written as\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Since you just wrote the code and are familiar with it, you might actually\n"
"> > find the first version easier to read. But when trying to read a huge piece\n"
"> > of code written by someone else, or when getting back to your own huge piece\n"
"> > of code after several months, non-abbreviated names are often easier, except\n"
"> > where there are clear abbreviation conventions."
msgstr ""
">\n"
"> 1. Rellena los espacios en blanco para que el programa que está abajo imprima `90.0`\n"
"> 2. Reescribe el programar para que use `import` *sin* el `as`.\n"
"> 3. ¿Cuál de las dos formas te parece más fácil de leer?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > el cual puede ser escrito como\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Como acabas de escribir el código y estás familiarizado con él, podría \n"
"> > parecerte más legible la primera versión. Pero cuando estés intentando leer un código enorme\n"
"> > escrito por alguien más, o cuando estés regresando a un código enorme tuyo\n"
"> > después de meses de no verlo, los nombres no-abreviados suelen ser más legibles, excepto\n"
"> > cuando las convenciones de abreviación son claras."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:297
msgid "> ## There Are Many Ways To Import Libraries!"
msgstr "> ## Hay muchas formas de importar bibliotecas!"

#: python-novice-gapminder/_episodes/06-libraries.md:298
msgid ""
">\n"
"> Match the following print statements with the appropriate library calls.\n"
">\n"
"> Print commands:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Library calls:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Library calls 1 and 4. In order to directly refer to `sin` and `pi` without\n"
"> >    the library name as prefix, you need to use the `from ... import ...`\n"
"> >    statement. Whereas library call 1 specifically imports the two functions\n"
"> >    `sin` and `pi`, library call 4 imports all functions in the `math` module.\n"
"> > 2. Library call 3. Here `sin` and `pi` are referred to with a shortened library\n"
"> >    name `m` instead of `math`. Library call 3 does exactly that using the\n"
"> >    `import ... as ...` syntax - it creates an alias for `math` in the form of\n"
"> >    the shortened name `m`.\n"
"> > 3. Library call 2. Here `sin` and `pi` are referred to with the regular library\n"
"> >    name `math`, so the regular `import ...` call suffices."
msgstr ""
">\n"
"> Haz coincidir las siguientes declaraciones de impresión con las llamadas adecuadas a la biblioteca.\n"
">\n"
"> Comandos de print:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Llamadas a la biblioteca:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. Las llamadas 1 y 4 a la biblioteca. Para podernos referir directamente a `sin` y `pi` sin usar el\n"
"> > nombre de la biblioteca como prefijo, tienes que usar la declaración\n"
"> >  `from ... import ...`. Mientras la llamada 1 a la biblioteca importa específicamente las dos funciones\n"
"> > `sin` y `pi`, la llamada 4 a la biblioteca importa todas las funciones del módulo `math`.\n"
"> > 2. La llamada 3 a la biblioteca. Aquí se hace referencia a `sin` y `pi` usando\n"
"> >      el nombre corto `m` en vez de `math`. La llamada 3 a la biblioteca hace\n"
"> >      exactamente eso usando la sintaxis `import ... as ...` - crea un alias para `math` en forma de\n"
"> >      el nombre abreviado `m`.\n"
"> > 3. La llamada 2 a la biblioteca. Aquí nos referimos a `sin` y `pi` con el nombre\n"
"> >     regular de la biblioteca `math`, entonces la llamada regular `import ...` basta."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:329
msgid "> ## Importing Specific Items"
msgstr "> ## Importando elementos específicos"

#: python-novice-gapminder/_episodes/06-libraries.md:330
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Do you find this version easier to read than preceding ones?\n"
"> 3. Why *wouldn't* programmers always use this form of `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Most likely you find this version easier to read since it's less dense.\n"
"> > The main reason not to use this form of import is to avoid name clashes.\n"
"> > For instance, you wouldn't import `degrees` this way if you also wanted to\n"
"> > use the name `degrees` for a variable or function of your own. Or if you\n"
"> > were to also import a function named `degrees` from another library."
msgstr ""
">\n"
"> 1. Rellena los espacios en blanco para que el programa de abajo imprima `90.0`\n"
"> 2. ¿Te parece que esta versión es más fácil de leer que las anteriores?\n"
"> 3. Why *wouldn't* programmers always use this form of `import`?\n"
"> 3. ¿Por qué los programadores *no suelen* usar siempre esta forma del `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Seguramente te parece más legible esta versión puesto que es menos densa.\n"
"> > La razón principal para no usar esta forma de importar es para evitar conflictos de nombres. \n"
"> > Por ejemplo, no importarías `degrees` de tal forma si también quisieras usar\n"
"> > el nombre `degrees` para una variable o función propia. O si también\n"
"> > fueras a importar una función llamada `degrees` de otra biblioteca."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:359
#: python-novice-gapminder/_episodes/17-scope.md:76
msgid "> ## Reading Error Messages"
msgstr "> ## Leyendo mensajes de error"

#: python-novice-gapminder/_episodes/06-libraries.md:360
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are without running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. The logarithm of `x` is only defined for `x > 0`, so 0 is outside the\n"
"> >    domain of the function.\n"
"> > 2. You get an error of type \"ValueError\", indicating that the function\n"
"> >    received an inappropriate argument value. The additional message\n"
"> >    \"math domain error\" makes it clearer what the problem is."
msgstr ""
">\n"
"> 1. Lee el código acá abajo e intenta identificar cuáles son los errores que tiene sin correrlo.\n"
"> 2. Corre el código y lee el mensaje de error. ¿Qué tipo de error es?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solución\n"
"> >\n"
"> > 1. El logaritmo de `x` solo está definido para `x > 0`, entonces 0 está fuera del\n"
"> >    dominio de la función.\n"
"> > 2. Obtienes un error de tipo \"ValueError\", indicando que la función\n"
"> >     recibió un valor inadecuado en el argumento. El mensaje adicional\n"
"> >     \"math domain error\" (error matemático en el dominio) hace más claro qué tipo de problema es."

#: python-novice-gapminder/_episodes/06-libraries.md:380
msgid ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
msgstr ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
