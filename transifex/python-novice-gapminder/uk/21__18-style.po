# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Olexandr Konovalov, 2022
# Марина Новожилова, 2022
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: Марина Новожилова, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: python-novice-gapminder/_episodes/18-style.md:1
msgid ""
"---\n"
"title: \"Programming Style\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I make my programs more readable?\"\n"
"- \"How do most programmers format their code?\"\n"
"- \"How can programs check their own operation?\"\n"
"objectives:\n"
"- \"Provide sound justifications for basic rules of coding style.\"\n"
"- \"Refactor one-page programs to make them more readable and justify the changes.\"\n"
"- \"Use Python community coding standards (PEP-8).\"\n"
"keypoints:\n"
"- \"Follow standard Python style in your code.\"\n"
"- \"Use docstrings to provide builtin help.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Стиль програмування\"\n"
"teaching: 15\n"
"exercises: 15\n"
"questions:\n"
"- \"Як я можу зробити мої програми більш читабельними?\"\n"
"- \"Як більшість програмістів форматують свій код?\"\n"
"- \"Як програми можуть перевірити свою роботу?\"\n"
"objectives:\n"
"- \"Визначення основних правил стилю кодування\"\n"
"- \"Рефакторинг односторінкових програм, щоб зробити їх більш читабельними та обґрунтувати зміни\"\n"
"- \"Використовання стандартів кодування спільноти Python (PEP-8).\"\n"
"keypoints:\n"
"- \"Дотримуйтеся стандартного стилю Python у своєму коді.\"\n"
"- \"Використовуйте рядки документів для надання вбудованої довідки\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/18-style.md:18
msgid "## Coding style"
msgstr "## Стиль кодування"

#: python-novice-gapminder/_episodes/18-style.md:20
msgid ""
"Coding style helps us to understand the code better. It helps to maintain and change the code.\n"
"Python relies strongly on coding style, as we may notice by the indentation we apply to lines to define different blocks of code.\n"
"Python proposes a standard style through one of its first Python Enhancement Proposals (PEP), [PEP8](https://www.python.org/dev/peps/pep-0008), and highlight the importance of readability in the [Zen of Python](https://www.python.org/dev/peps/pep-0020)."
msgstr ""
"Стиль кодування допомагає нам краще зрозуміти код. Це допомагає підтримувати та змінювати код.\n"
"Python значним чином покладається на стиль кодування, як ми можемо помітити за відступами, які ми застосовуємо до рядків для визначення різних блоків коду.\n"
"Python пропонує стандартний стиль в одній із своїх перших пропозицій щодо вдосконалення Python (Python Enhancement Proposals - PEP), [PEP8](https://www.python.org/dev/peps/pep-0008), і підкреслює важливість читабельності в [Zen of Python](https://www.python.org/dev/peps/pep-0020)."

#: python-novice-gapminder/_episodes/18-style.md:24
msgid ""
"We may highlight some points:\n"
"*   document your code\n"
"*   use clear, meaningful variable names\n"
"*   use white-space, *not* tabs, to indent lines"
msgstr ""
"Виділимо такі важливі моменти:\n"
"*  документуйте свій код\n"
"* використовуйте чіткі, зрозумілі назви змінних\n"
"* використовуйте пробіли, *не* табуляцію, для відступу рядків"

# header
#: python-novice-gapminder/_episodes/18-style.md:30
msgid "## Follow standard Python style in your code."
msgstr "## Дотримуйтеся стандартного стилю Python у своєму коді."

# unordered list
#: python-novice-gapminder/_episodes/18-style.md:32
msgid "*   [PEP8](https://www.python.org/dev/peps/pep-0008):"
msgstr "*   [PEP8](https://www.python.org/dev/peps/pep-0008):"

#: python-novice-gapminder/_episodes/18-style.md:33
msgid ""
"    a style guide for Python that discusses topics such as how you should name variables,\n"
"    how you should use indentation in your code,\n"
"    how you should structure your `import` statements,\n"
"    etc.\n"
"    Adhering to PEP8 makes it easier for other Python developers to read and understand your code,\n"
"    and to understand what their contributions should look like.\n"
"    The [PEP8 application and Python library](https://pypi.python.org/pypi/pep8)\n"
"    can check your code for compliance with PEP8.\n"
"*   [Google style guide on Python](https://google.github.io/styleguide/pyguide.html) \n"
"    supports the use of PEP8 and extend the coding style to more specific structure of \n"
"    a Python code, which may be interesting also to follow.\n"
"    Google's [formatting application is called \"yapf\"](https://github.com/google/yapf/)."
msgstr ""
"    посібник зі стилю для Python, який обговорює такі теми, як імена змінних,\n"
"   як ви повинні використовувати відступи у своєму коді,\n"
"    як ви повинні структурувати ваші `import` оператори імпорту, \n"
"   тощо.\n"
"    Дотримання PEP8 полегшує іншим розробникам Python читання та розуміння вашого коду,\n"
"    і зрозуміти, як мають виглядати їхні внески.\n"
"    Документація [Застосування PEP8 і бібліотека Python](https://pypi.python.org/pypi/pep8)\n"
"    допоможе перевірити ваш код на відповідність PEP8. \n"
"*  Посібник [Google style guide on Python](https://google.github.io/styleguide/pyguide.html) \n"
"   підтримує використання PEP8 та імплементує стиль кодування до більш специфічної структури\n"
"    коду Python,  теж може бути цікавим для застосування.\n"
"    Рекомендації Google [щодо форматування програмного коду,  називаються \"yapf\"](https://github.com/google/yapf/)."

# header
#: python-novice-gapminder/_episodes/18-style.md:46
msgid "## Use assertions to check for internal errors."
msgstr "##Використовуйте твердження для перевірки внутрішніх помилок."

#: python-novice-gapminder/_episodes/18-style.md:48
msgid ""
"Assertions are a simple, but powerful method for making sure that the "
"context in which your code is executing is as you expect."
msgstr ""
"Твердження (Assert) — це простий, але потужний спосіб переконатися, що "
"контекст, у якому виконується ваш код, відповідає вашим очікуванням."

# code block
#: python-novice-gapminder/_episodes/18-style.md:50
msgid ""
"~~~\n"
"def calc_bulk_density(mass, volume):\n"
"    '''Return dry bulk density = powder mass / powder volume.'''\n"
"    assert volume > 0\n"
"    return mass / volume\n"
"~~~"
msgstr ""
"~~~\n"
"def calc_bulk_density(mass, volume):\n"
"    '''Return dry bulk density = powder mass / powder volume.'''\n"
"    assert volume > 0\n"
"    return mass / volume\n"
"~~~"

#: python-novice-gapminder/_episodes/18-style.md:58
msgid ""
"If the assertion is `False`, the Python interpreter raises an "
"`AssertionError` runtime exception. The source code for the expression that "
"failed will be displayed as part of the error message. To ignore assertions "
"in your code run the interpreter with the '-O' (optimize) switch. Assertions"
" should contain only simple checks and never change the state of the "
"program. For example, an assertion should never contain an assignment."
msgstr ""
"Якщо твердження має значення `False`, інтерпретатор Python викликає "
"виключення `AssertionError` під час виконання програми. Вихідний код виразу,"
" який не вдалося виконати, буде відображено як частину повідомлення про "
"помилку. Щоб ігнорувати твердження у вашому коді, запустіть інтерпретатор із"
" перемикачем «-O» (оптимізація). Твердження повинні містити лише прості "
"перевірки і ніколи не змінювати стан програми. Наприклад, твердження ніколи "
"не повинно містити присвоєння."

# header
#: python-novice-gapminder/_episodes/18-style.md:60
msgid "## Use docstrings to provide builtin help."
msgstr "## Використовуйте рядки документів для надання вбудованої довідки."

# unordered list
#: python-novice-gapminder/_episodes/18-style.md:62
msgid "*   If the first thing in a function is a character string"
msgstr "*   Якщо першим у функції є рядок символів,"

#: python-novice-gapminder/_episodes/18-style.md:63
msgid ""
"    that is not assigned directly to a variable,\n"
"    Python attaches it to the function as the builtin help variable.\n"
"*   Called a *docstring* (short for \"documentation string\")."
msgstr ""
"    який не присвоюється безпосередньо змінній,\n"
"    Python приєднує його до функції як вбудовану змінну довідки.\n"
"*   Ця змінна називається *docstring* (скорочення від «documentation string»)."

# code block
#: python-novice-gapminder/_episodes/18-style.md:67
msgid ""
"~~~\n"
"def average(values):\n"
"    \"Return average of values, or None if no values are supplied.\"\n"
"\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"\n"
"help(average)\n"
"~~~"
msgstr ""
"~~~\n"
"def average(values):\n"
"    \"Повертає середнє значення для набору величин або None, якщо набір величин не наданий.\"\n"
"    if len(values) == 0:\n"
"        return None\n"
"    return sum(values) / len(values)\n"
"\n"
"help(average)\n"
"~~~"

#: python-novice-gapminder/_episodes/18-style.md:77
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on function average in module __main__:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on function average in module __main__:"

#: python-novice-gapminder/_episodes/18-style.md:81
msgid ""
"average(values)\n"
"    Return average of values, or None if no values are supplied.\n"
"~~~"
msgstr ""
"average(values)\n"
"    Повертає середнє зачення для набору величин або None, якщо набір величин не наданий.\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:86
msgid "> ## Multiline Strings"
msgstr "> ## Багаторядкові рядки"

#: python-novice-gapminder/_episodes/18-style.md:87
msgid ""
">\n"
"> Often use *multiline strings* for documentation.\n"
"> These start and end with three quote characters (either single or double)\n"
"> and end with three matching characters.\n"
">\n"
"> ~~~\n"
"> \"\"\"This string spans\n"
"> multiple lines.\n"
">\n"
"> Blank lines are allowed.\"\"\"\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Часто для документації використовуються *багаторядкові рядки* .\n"
"> Вони починаються і закінчуються трьома символами лапок (одинарними або подвійними)\n"
"> і закінчується трьома відповідними символами.\n"
">\n"
"> ~~~\n"
"> \"\"\"Цей рядок охоплює\n"
"> кілька рядків.\n"
">\n"
"> Допускаються порожні рядки.\"\"\"\n"
"> ~~~\n"
"> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:101
msgid "> ## What Will Be Shown?"
msgstr "> ## Що буде показано?"

#: python-novice-gapminder/_episodes/18-style.md:102
msgid ""
">\n"
"> Highlight the lines in the code below that will be available as online help.\n"
"> Are there lines that should be made available, but won't be?\n"
"> Will any lines produce a syntax error or a runtime error?\n"
">\n"
"> ~~~\n"
"> \"Find maximum edit distance between multiple sequences.\"\n"
"> # This finds the maximum distance between all sequences.\n"
">\n"
"> def overall_max(sequences):\n"
">     '''Determine overall maximum edit distance.'''\n"
"> \n"
">     highest = 0\n"
">     for left in sequences:\n"
">         for right in sequences:\n"
">             '''Avoid checking sequence against itself.'''\n"
">             if left != right:\n"
">                 this = edit_distance(left, right)\n"
">                 highest = max(highest, this)\n"
"> \n"
">     # Report.\n"
">     return highest\n"
"> ~~~\n"
"> {: .language-python}"
msgstr ""
">\n"
"> Виділіть рядки в коді нижче, які будуть доступні як онлайн-довідка..\n"
"> Чи є лінії, які мають бути доступні, але не будуть?\n"
"> Чи буде якийсь рядок видавати синтаксичну помилку або помилку виконання?\n"
">\n"
"> ~~~\n"
"> \"Знайти максимальну відстань редагування між кількома послідовностями.\"\n"
"> # Знаходить максимальну відстань між усіма послідовностями.\n"
">\n"
"> def overall_max(sequences):\n"
">     '''Визначає загальну максимальну відстань  редагування.'''\n"
"> \n"
">     highest = 0\n"
">     for left in sequences:\n"
">         for right in sequences:\n"
">             '''Уникнути перевірки послідовності на саму себе.'''\n"
">             if left != right:\n"
">                 this = edit_distance(left, right)\n"
">                 highest = max(highest, this)\n"
"> \n"
">     # Звіт.\n"
">     return highest\n"
"> ~~~\n"
"> {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:128
msgid "> ## Document This"
msgstr "> ## Задокументуйте це"

#: python-novice-gapminder/_episodes/18-style.md:129
msgid ""
">\n"
"> Turn the comment on the following function into a docstring\n"
"> and check that `help` displays it properly.\n"
">\n"
"> ~~~\n"
"> def middle(a, b, c):\n"
">     # Return the middle value of three.\n"
">     # Assumes the values can actually be compared.\n"
">     values = [a, b, c]\n"
">     values.sort()\n"
">     return values[1]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > def middle(a, b, c):\n"
"> >     '''Return the middle value of three.\n"
"> >     Assumes the values can actually be compared.'''\n"
"> >     values = [a, b, c]\n"
"> >     values.sort()\n"
"> >     return values[1]\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Перетворіть коментар до наступної функції на рядок документації\n"
"> і перевірте правильність подання командою `help`.\n"
">\n"
"> ~~~\n"
"> def middle(a, b, c):\n"
">     # Повертає середнє значення трьох величин.\n"
">     # У припущенні, що значення можна порівняти.\n"
">     values = [a, b, c]\n"
">     values.sort()\n"
">     return values[1]\n"
"> ~~~\n"
"> {: .language-python}\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > def middle(a, b, c):\n"
"> >     '''Повертає середнє значення трьох величин.\n"
"> >     У припущенні, що значення можна порівняти.'''\n"
"> >     values = [a, b, c]\n"
"> >     values.sort()\n"
"> >     return values[1]\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/18-style.md:156
msgid "> ## Clean Up This Code"
msgstr "> ## Очистіть цей код"

#: python-novice-gapminder/_episodes/18-style.md:157
msgid ""
">\n"
"> 1. Read this short program and try to predict what it does.\n"
"> 2. Run it: how accurate was your prediction?\n"
"> 3. Refactor the program to make it more readable.\n"
">    Remember to run it after each change to ensure its behavior hasn't changed.\n"
"> 4. Compare your rewrite with your neighbor's.\n"
">    What did you do the same?\n"
">    What did you do differently, and why?\n"
">\n"
"> ~~~\n"
"> n = 10\n"
"> s = 'et cetera'\n"
"> print(s)\n"
"> i = 0\n"
"> while i < n:\n"
">     # print('at', j)\n"
">     new = ''\n"
">     for j in range(len(s)):\n"
">         left = j-1\n"
">         right = (j+1)%len(s)\n"
">         if s[left]==s[right]: new += '-'\n"
">         else: new += '*'\n"
">     s=''.join(new)\n"
">     print(s)\n"
">     i += 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Here's one solution.\n"
"> >\n"
"> > ~~~\n"
"> > def string_machine(input_string, iterations):\n"
"> >     \"\"\"\n"
"> >     Takes input_string and generates a new string with -'s and *'s\n"
"> >     corresponding to characters that have identical adjacent characters\n"
"> >     or not, respectively.  Iterates through this procedure with the resultant\n"
"> >     strings for the supplied number of iterations.\n"
"> >     \"\"\"\n"
"> >     print(input_string)\n"
"> >     input_string_length = len(input_string)\n"
"> >     old = input_string\n"
"> >     for i in range(iterations):\n"
"> >         new = ''\n"
"> >         # iterate through characters in previous string\n"
"> >         for j in range(input_string_length):\n"
"> >             left = j-1\n"
"> >             right = (j+1) % input_string_length  # ensure right index wraps around\n"
"> >             if old[left] == old[right]:\n"
"> >                 new += '-'\n"
"> >             else:\n"
"> >                 new += '*'\n"
"> >         print(new)\n"
"> >         # store new string as old\n"
"> >         old = new     \n"
"> >\n"
"> > string_machine('et cetera', 10)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > \n"
"> > ~~~\n"
"> > et cetera\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > --*-*-*-*\n"
"> > **-------\n"
"> > ***-----*\n"
"> > --**---**\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > ~~~\n"
"> > {: .output}"
msgstr ""
">\n"
"> 1. Прочитайте цю коротку програму та спробуйте передбачити, що вона робить.\n"
"> 2. Запустіть програму: наскільки точним був ваш прогноз?\n"
"> 3. Проведіть рефакторинг програми, щоб зробити її більш читабельною.\n"
">   Не забувайте запускати програми після кожної зміни, щоб переконатися, що її поведінка не змінилася.\n"
"> 4. Порівняйте свої перетворення  з результатом студента поруч.\n"
">    Що ви зробили так само?\n"
">    Що ви зробили інакше і чому?\n"
">\n"
"> ~~~\n"
"> n = 10\n"
"> s = 'et cetera'\n"
"> print(s)\n"
"> i = 0\n"
"> while i < n:\n"
">     # print('at', j)\n"
">     new = ''\n"
">     for j in range(len(s)):\n"
">         left = j-1\n"
">         right = (j+1)%len(s)\n"
">         if s[left]==s[right]: new += '-'\n"
">         else: new += '*'\n"
">     s=''.join(new)\n"
">     print(s)\n"
">     i += 1\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Ось одне рішення.\n"
"> >\n"
"> > ~~~\n"
"> > def string_machine(input_string, iterations):\n"
"> >     \"\"\"\n"
"> >     Бере поточну input_string і генерує новий рядок із символів -'s та *'s,\n"
"> >    - відповідає  випадку ідентичних суміжних символів\n"
"> >    в противному випадку генерується символ *. Повторює цю процедуру відповідно\n"
"> >      заданої кількості ітерацій.\n"
"> >     \"\"\"\n"
"> >     print(input_string)\n"
"> >     input_string_length = len(input_string)\n"
"> >     old = input_string\n"
"> >     for i in range(iterations):\n"
"> >         new = ''\n"
"> >         # перебір символів у рядку 'old'\n"
"> >         for j in range(input_string_length):\n"
"> >             left = j-1\n"
"> >             right = (j+1) % input_string_length  # забезпечити обтікання правого індексу\n"
"> >             if old[left] == old[right]:\n"
"> >                 new += '-'\n"
"> >             else:\n"
"> >                 new += '*'\n"
"> >         print(new)\n"
"> >         # зберегти новий рядок як старий\n"
"> >         old = new     \n"
"> >\n"
"> > string_machine('et cetera', 10)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > \n"
"> > ~~~\n"
"> > et cetera\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > --*-*-*-*\n"
"> > **-------\n"
"> > ***-----*\n"
"> > --**---**\n"
"> > *****-***\n"
"> > ----*-*--\n"
"> > ---*---*-\n"
"> > ~~~\n"
"> > {: .output}"
