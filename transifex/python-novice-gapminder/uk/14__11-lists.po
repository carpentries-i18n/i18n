# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Maryna Novozhylova, 2022
# Olexandr Konovalov, 2023
# Mariya Spatar, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: Mariya Spatar, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: python-novice-gapminder/_episodes/11-lists.md:1
msgid ""
"---\n"
"title: \"Lists\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I store multiple values?\"\n"
"objectives:\n"
"- \"Explain why programs need collections of values.\"\n"
"- \"Write programs that create flat lists, index them, slice them, and modify them through assignment and method calls.\"\n"
"keypoints:\n"
"- \"A list stores many values in a single structure.\"\n"
"- \"Use an item's index to fetch it from a list.\"\n"
"- \"Lists' values can be replaced by assigning to them.\"\n"
"- \"Appending items to a list lengthens it.\"\n"
"- \"Use `del` to remove items from a list entirely.\"\n"
"- \"The empty list contains no values.\"\n"
"- \"Lists may contain values of different types.\"\n"
"- \"Character strings can be indexed like lists.\"\n"
"- \"Character strings are immutable.\"\n"
"- \"Indexing beyond the end of the collection is an error.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Списки\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу зберігати набори значень?\"\n"
"objectives:\n"
"- \"Пояснити, навіщо програмам потрібні колекції значень\"\n"
"- \"Писати програми, які створюють плоскі списки, індексують їх, розрізають і змінюють через призначення та виклики методів.\"\n"
"keypoints:\n"
"- \"Список зберігає багато значень в одній структурі.\"\n"
"- \"Використовуйте індекс елемента, щоб отримати його зі списку.\"\n"
"- \"Значення списків можна замінити шляхом присвоєння.\"\n"
"- \"Додавання елементів до списку подовжує його\"\n"
"- \"Використовуйте `del`, щоб повністю видалити елементи зі списку.\"\n"
"- \"Порожній список не містить значень.\"\n"
"- \"Списки можуть містити значення різних типів.\"\n"
"- \"Рядки символів можна індексувати як списки.\"\n"
"- \"Рядки символів є незмінними.\"\n"
"- \"Індексація за межами колекції є помилкою..\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/11-lists.md:22
msgid "## A list stores many values in a single structure."
msgstr "## Список є структурою даних, яка містить в собі багато значень."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:24
msgid ""
"*   Doing calculations with a hundred variables called `pressure_001`, "
"`pressure_002`, etc.,"
msgstr ""
"*   Виконання обчислень із сотнею змінних під назвою `pressure_001`, "
"`pressure_002` тощо,"

#: python-novice-gapminder/_episodes/11-lists.md:25
msgid ""
"    would be at least as slow as doing them by hand.\n"
"*   Use a *list* to store many values together.\n"
"    *   Contained within square brackets `[...]`.\n"
"    *   Values separated by commas `,`.\n"
"*   Use `len` to find out how many values are in a list."
msgstr ""
"    було б принаймні так само повільно, як робити їх вручну.\n"
"*   Використовуйте *список* для зберігання багатьох значень разом.\n"
"    *   Список позначається квадратними дужками `[...]`.\n"
"    *   Значення розділяються комами `,`.\n"
"*   Використовуйте `len`, щоб дізнатися, скільки значень у списку."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:31
msgid ""
"~~~\n"
"pressures = [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"print('pressures:', pressures)\n"
"print('length:', len(pressures))\n"
"~~~"
msgstr ""
"~~~\n"
"pressures = [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"print('pressures:', pressures)\n"
"print('length:', len(pressures))\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:36
msgid ""
"{: .language-python}\n"
"~~~\n"
"pressures: [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"length: 5\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"pressures: [0.273, 0.275, 0.277, 0.275, 0.276]\n"
"length: 5\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:43
msgid "## Use an item's index to fetch it from a list."
msgstr "## Щоб отримати елемент списку, використовуйте його індекс."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:45
msgid "*   Just like strings."
msgstr "*   Це робиться так само, як і при роботі з рядками."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:47
msgid ""
"~~~\n"
"print('zeroth item of pressures:', pressures[0])\n"
"print('fourth item of pressures:', pressures[4])\n"
"~~~"
msgstr ""
"~~~\n"
"print('zeroth item of pressures:', pressures[0])\n"
"print('fourth item of pressures:', pressures[4])\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:51
msgid ""
"{: .language-python}\n"
"~~~\n"
"zeroth item of pressures: 0.273\n"
"fourth item of pressures: 0.276\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"zeroth item of pressures: 0.273\n"
"fourth item of pressures: 0.276\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:58
msgid "## Lists' values can be replaced by assigning to them."
msgstr "## Значення елементів списків можна замінити шляхом присвоєння."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:60
msgid ""
"*   Use an index expression on the left of assignment to replace a value."
msgstr ""
"*   Використовуйте індексний вираз ліворуч від знаку присвоєння, щоб "
"замінити значення."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:62
msgid ""
"~~~\n"
"pressures[0] = 0.265\n"
"print('pressures is now:', pressures)\n"
"~~~"
msgstr ""
"~~~\n"
"pressures[0] = 0.265\n"
"print('нові значення pressures:', pressures)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:66
msgid ""
"{: .language-python}\n"
"~~~\n"
"pressures is now: [0.265, 0.275, 0.277, 0.275, 0.276]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Нові значення pressures: [0.265, 0.275, 0.277, 0.275, 0.276]\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:72
msgid "## Appending items to a list lengthens it."
msgstr "## Додавання елементів до списку подовжує його."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:74
msgid "*   Use `list_name.append` to add items to the end of a list."
msgstr ""
"*  Щоб додати елементи в кінець списку, використовуйте `list_name.append`."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:76
msgid ""
"~~~\n"
"primes = [2, 3, 5]\n"
"print('primes is initially:', primes)\n"
"primes.append(7)\n"
"primes.append(9)\n"
"print('primes has become:', primes)\n"
"~~~"
msgstr ""
"~~~\n"
"primes = [2, 3, 5]\n"
"print('початкові значення списку primes:', primes)\n"
"primes.append(7)\n"
"primes.append(9)\n"
"print('список primes змінився:', primes)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:83
msgid ""
"{: .language-python}\n"
"~~~\n"
"primes is initially: [2, 3, 5]\n"
"primes has become: [2, 3, 5, 7, 9]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"початкові значення primes: [2, 3, 5]\n"
"список primes змінився: [2, 3, 5, 7, 9]\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:90
msgid "*   `append` is a *method* of lists."
msgstr "*   `append` є *методом*, який належить до списків."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:91
msgid "    *   Like a function, but tied to a particular object."
msgstr ""
"    *   Методи подібні функціям, але вони прив’язані до певних об’єктів."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:92
msgid "*   Use `object_name.method_name` to call methods."
msgstr ""
"*   Для виклику методів використовується синтаксис  "
"`object_name.method_name` ."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:93
msgid ""
"    *   Deliberately resembles the way we refer to things in a library."
msgstr ""
"    *   Такий запис навмисно нагадує те, як ми посилаємось на щось визначене"
" у будь-якій бібліотеці."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:94
msgid "*   We will meet other methods of lists as we go along."
msgstr ""
"*   По ходу роботи ми познайомимося з іншими методами, визначеними для "
"списків."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:95
msgid "    *   Use `help(list)` for a preview."
msgstr ""
"    *  Якщо бажаєте подивитись на них зараз, використовуйте `help(list)`."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:96
msgid ""
"*   `extend` is similar to `append`, but it allows you to combine two lists."
"  For example:"
msgstr ""
"*  `extend` - це метод, схожий на `append`, але він дозволяє об’єднувати два"
" списки. Наприклад:"

# code block
#: python-novice-gapminder/_episodes/11-lists.md:98
msgid ""
"~~~\n"
"teen_primes = [11, 13, 17, 19]\n"
"middle_aged_primes = [37, 41, 43, 47]\n"
"print('primes is currently:', primes)\n"
"primes.extend(teen_primes)\n"
"print('primes has now become:', primes)\n"
"primes.append(middle_aged_primes)\n"
"print('primes has finally become:', primes)\n"
"~~~"
msgstr ""
"~~~\n"
"teen_primes = [11, 13, 17, 19]\n"
"middle_aged_primes = [37, 41, 43, 47]\n"
"print('поточний список primes:', primes)\n"
"primes.extend(teen_primes)\n"
"print('розширений список primes:', primes)\n"
"primes.append(middle_aged_primes)\n"
"print('фінальний список primes:', primes)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:107
msgid ""
"{: .language-python}\n"
"~~~\n"
"primes is currently: [2, 3, 5, 7, 9]\n"
"primes has now become: [2, 3, 5, 7, 9, 11, 13, 17, 19]\n"
"primes has finally become: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"поточний список primes: [2, 3, 5, 7, 9]\n"
"розширений список primes: [2, 3, 5, 7, 9, 11, 13, 17, 19]\n"
"фінальний список primes: [2, 3, 5, 7, 9, 11, 13, 17, 19, [37, 41, 43, 47]]\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:115
msgid ""
"Note that while `extend` maintains the \"flat\" structure of the list, appending a list to a list makes the result\n"
"two-dimensional - the last element in `primes` is a list, not an integer."
msgstr ""
"Зауважимо, що хоча `extend` підтримує \"плоску\" структуру списку, додавання списку до списку дає результат\n"
"двовимірний - останній елемент у `primes` є списком, а не цілим числом."

# header
#: python-novice-gapminder/_episodes/11-lists.md:118
msgid "## Use `del` to remove items from a list entirely."
msgstr "## Щоб повністю видалити елементи зі списку, використовуйте `del`."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:120
msgid ""
"*   `del list_name[index]` removes an item from a list and shortens the "
"list."
msgstr ""
"*   `del list_name[index]` видаляє елемент зі списку та скорочує список."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:121
msgid "*   Not a function or a method, but a statement in the language."
msgstr "*   `del` - це оператор мови програмування, а не функція і не метод."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:123
msgid ""
"~~~\n"
"primes = [2, 3, 5, 7, 9]\n"
"print('primes before removing last item:', primes)\n"
"del primes[4]\n"
"print('primes after removing last item:', primes)\n"
"~~~"
msgstr ""
"~~~\n"
"primes = [2, 3, 5, 7, 9]\n"
"print('список primes перед видаленням останнього елемента:', primes)\n"
"del primes[4]\n"
"print('список primes після видалення останнього елемента:', primes)\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:129
msgid ""
"{: .language-python}\n"
"~~~\n"
"primes before removing last item: [2, 3, 5, 7, 9]\n"
"primes after removing last item: [2, 3, 5, 7]\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"список primes перед видаленням останнього елемента: [2, 3, 5, 7, 9]\n"
"список primes після видалення останнього елемента: [2, 3, 5, 7]\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:136
msgid "## The empty list contains no values."
msgstr "## Порожній список не містить жодних значень."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:138
msgid ""
"*   Use `[]` on its own to represent a list that doesn't contain any values."
msgstr ""
"*   Щоб створити список, який не містить жодних значень, використовуйте "
"`[]`."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:139
msgid "    *   \"The zero of lists.\""
msgstr "    *  Порожній список - це \"нуль списків.\""

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:140
msgid "*   Helpful as a starting point for collecting values"
msgstr "*   Він є корисним як початкова точка для збору значень"

#: python-novice-gapminder/_episodes/11-lists.md:141
msgid ""
"        (which we will see in the [next episode]({% link _episodes/12-for-"
"loops.md %})."
msgstr ""
"        (ми це побачимо в [наступному епізоді]({% link _episodes/12-for-"
"loops.md %})."

# header
#: python-novice-gapminder/_episodes/11-lists.md:143
msgid "## Lists may contain values of different types."
msgstr "## Списки можуть містити значення різних типів."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:145
msgid "*   A single list may contain numbers, strings, and anything else."
msgstr "*   Один список може містити числа, рядки та будь-що інше."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:147
msgid ""
"~~~\n"
"goals = [1, 'Create lists.', 2, 'Extract items from lists.', 3, 'Modify lists.']\n"
"~~~"
msgstr ""
"~~~\n"
"goals = [1, 'Створити списки.', 2, 'Вилучити елементи із списків.', 3, 'Змінити списки.']\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:152
msgid "## Character strings can be indexed like lists."
msgstr "## Рядки символів можна індексувати як списки."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:154
msgid ""
"*   Get single characters from a character string using indexes in square "
"brackets."
msgstr ""
"*   Отримати окремі символи з рядка символів можна за допомогою індексів у "
"квадратних дужках."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:156
msgid ""
"~~~\n"
"element = 'carbon'\n"
"print('zeroth character:', element[0])\n"
"print('third character:', element[3])\n"
"~~~"
msgstr ""
"~~~\n"
"element = 'carbon'\n"
"print('нульовий символ:', element[0])\n"
"print('третій символ:', element[3])\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:161
msgid ""
"{: .language-python}\n"
"~~~\n"
"zeroth character: c\n"
"third character: b\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"нульовий символ: c\n"
"третій символ: b\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/11-lists.md:168
msgid "## Character strings are immutable."
msgstr "## Рядки символів незмінні."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:170
msgid ""
"*   Cannot change the characters in a string after it has been created."
msgstr "*   Неможливо змінити символи в рядку після його створення."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:171
msgid "    *   *Immutable*: can't be changed after creation."
msgstr "    *   *Незмінний* - тобто який не можна змінити після створення."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:172
msgid ""
"    *   In contrast, lists are *mutable*: they can be modified in place."
msgstr ""
"    *   На відміну від рядків, списки є *змінними*: їх можна змінювати на "
"місці."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:173
msgid "*   Python considers the string to be a single value with parts,"
msgstr "*   Python розглядає рядок як одне значення з частинами,"

#: python-novice-gapminder/_episodes/11-lists.md:174
msgid "    not a collection of values."
msgstr "  а не як сукупність значень."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:176
msgid ""
"~~~\n"
"element[0] = 'C'\n"
"~~~"
msgstr ""
"~~~\n"
"element[0] = 'C'\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:179
msgid ""
"{: .language-python}\n"
"~~~\n"
"TypeError: 'str' object does not support item assignment\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"TypeError: об'єкт 'str' не підтримує призначення елементів\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:185
msgid "*   Lists and character strings are both *collections*."
msgstr "*   Списки та рядки символів є *колекціями*."

# header
#: python-novice-gapminder/_episodes/11-lists.md:187
msgid "## Indexing beyond the end of the collection is an error."
msgstr "## Індексація після кінця колекції є помилкою."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:189
msgid ""
"*   Python reports an `IndexError` if we attempt to access a value that "
"doesn't exist."
msgstr ""
"*   Python повідомляє про помилку `IndexError`, якщо ми намагаємося отримати"
" доступ до значення, якого не існує."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:190
msgid ""
"    *   This is a kind of [runtime error]({{ page.root }}/04-built-"
"in/#runtime-error)."
msgstr ""
"    *   Це свого роду [помилка виконання]({{ page.root }}/04-built-"
"in/#runtime-error)."

# unordered list
#: python-novice-gapminder/_episodes/11-lists.md:191
msgid "    *   Cannot be detected as the code is parsed"
msgstr "* Цю помилку неможливо виявити під час аналізу коду,"

#: python-novice-gapminder/_episodes/11-lists.md:192
msgid "        because the index might be calculated based on data."
msgstr "        оскільки індекс може бути розрахований на основі даних."

# code block
#: python-novice-gapminder/_episodes/11-lists.md:194
msgid ""
"~~~\n"
"print('99th element of element is:', element[99])\n"
"~~~"
msgstr ""
"~~~\n"
"print('99м елементом списку element є:', element[99])\n"
"~~~"

#: python-novice-gapminder/_episodes/11-lists.md:197
msgid ""
"{: .language-python}\n"
"~~~\n"
"IndexError: string index out of range\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"IndexError: string index out of range\n"
"~~~"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:203
msgid "> ## Fill in the Blanks"
msgstr "> ## Заповнити пропущені місця"

#: python-novice-gapminder/_episodes/11-lists.md:204
msgid ""
">\n"
"> Fill in the blanks so that the program below produces the output shown.\n"
">\n"
"> ~~~\n"
"> values = ____\n"
"> values.____(1)\n"
"> values.____(3)\n"
"> values.____(5)\n"
"> print('first time:', values)\n"
"> values = values[____]\n"
"> print('second time:', values)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> first time: [1, 3, 5]\n"
"> second time: [3, 5]\n"
"> ~~~"
msgstr ""
">\n"
"> Заповніть порожні поля, щоб програма, наведена нижче, видала показаний результат.\n"
">\n"
"> ~~~\n"
"> values = ____\n"
"> values.____(1)\n"
"> values.____(3)\n"
"> values.____(5)\n"
"> print('перший раз:', values)\n"
"> values = values[____]\n"
"> print('другий раз:', values)> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> перший раз: [1, 3, 5]\n"
"> другий раз: [3, 5]\n"
"> ~~~"

#: python-novice-gapminder/_episodes/11-lists.md:223
msgid ""
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > values = []\n"
"> > values.append(1)\n"
"> > values.append(3)\n"
"> > values.append(5)\n"
"> > print('first time:', values)\n"
"> > values = values[1:]\n"
"> > print('second time:', values)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > values = []\n"
"> > values.append(1)\n"
"> > values.append(3)\n"
"> > values.append(5)\n"
"> > print('перший раз:', values)\n"
"> > values = values[1:]\n"
"> > print('другий раз:', values)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:238
msgid "> ## How Large is a Slice?"
msgstr "> ## Наскільки є великим зріз?"

#: python-novice-gapminder/_episodes/11-lists.md:239
msgid ""
">\n"
"> If 'low' and 'high' are both non-negative integers,\n"
"> how long is the list `values[low:high]`?\n"
">\n"
"> > ## Solution\n"
"> > The list `values[low:high]` has `high - low` elements.  For example,\n"
"> > `values[1:4]` has the 3 elements `values[1]`, `values[2]`, and `values[3]`.\n"
"> > Note that the expression will only work if `high` is less than the total\n"
"> > length of the list `values`."
msgstr ""
">\n"
"> Якщо «low» і «high» є невід’ємними цілими числами,\n"
"> яка довжина списку `values[low:high]`?>\n"
"> > ## Рішення\n"
"> > Список `values[low:high]` має `high - low` elements.  Наприклад,\n"
"> > `values[1:4]` має 3 елементи `values[1]`, `values[2]`, and `values[3]`.\n"
"> >Зауважимо, що зріз працюватиме, лише якщо `high` менше загальної\n"
"> > довжини списку `значень`."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:251
msgid "> ## From Strings to Lists and Back"
msgstr "> ## Від рядків до списків і назад."

#: python-novice-gapminder/_episodes/11-lists.md:252
msgid ""
">\n"
"> Given this:\n"
">\n"
"> ~~~\n"
"> print('string to list:', list('tin'))\n"
"> print('list to string:', ''.join(['g', 'o', 'l', 'd']))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> ~~~\n"
"> ['t', 'i', 'n']\n"
"> 'gold'\n"
"> ~~~"
msgstr ""
">\n"
"> Дано:\n"
">\n"
"> ~~~\n"
"> print('рядок у список:', list('tin'))\n"
"> print('список у рядок:', ''.join(['g', 'o', 'l', 'd']))\n"
"> ~~~\n"
"> {: .language-python}\n"
"> ~~~\n"
"> ['t', 'i', 'n']\n"
"> 'gold'\n"
"> ~~~"

#: python-novice-gapminder/_episodes/11-lists.md:265
msgid ""
">\n"
"> 1.  What does `list('some string')` do?\n"
"> 2.  What does `'-'.join(['x', 'y', 'z'])` generate?\n"
">\n"
"> > ## Solution\n"
"> > 1. [`list('some string')`](https://docs.python.org/3/library/stdtypes.html#list) converts a string into a list containing all of its characters.\n"
"> > 2. [`join`](https://docs.python.org/3/library/stdtypes.html#str.join) returns a string that is the _concatenation_\n"
"> >    of each string element in the list and adds the separator between each element in the list. This results in\n"
"> >    `x-y-z`. The separator between the elements is the string that provides this method."
msgstr ""
">\n"
"> 1.  Що робить `list('якийсь рядок')`?\n"
"> 2.  Що генерує `'-'.join(['x', 'y', 'z'])`?>\n"
"> > ## Рішення\n"
"> > 1. [`list('якийсь рядок')`](https://docs.python.org/3/library/stdtypes.html#list) перетворює рядок на список, що містить усі його символи.\n"
"> > 2. [`join`](https://docs.python.org/3/library/stdtypes.html#str.join) повертає рядок, який є _конкатенацією_\n"
"> >    кожного елемента рядка у списку та додає роздільник між кожним елементом у списку. Це призводить до\n"
"> >    `x-y-z`. Роздільником між елементами є рядок, який забезпечує цей метод."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:277
msgid "> ## Working With the End"
msgstr "> ## Початок з кінця"

#: python-novice-gapminder/_episodes/11-lists.md:278
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'helium'\n"
"> print(element[-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  How does Python interpret a negative index?\n"
"> 2.  If a list or string has N elements,\n"
">     what is the most negative index that can safely be used with it,\n"
">     and what location does that index represent?\n"
"> 3.  If `values` is a list, what does `del values[-1]` do?\n"
"> 4.  How can you display all elements but the last one without changing `values`?\n"
">     (Hint: you will need to combine slicing and negative indexing.)\n"
">\n"
"> > ## Solution\n"
"> > The program prints `m`.\n"
"> > 1. Python interprets a negative index as starting from the end (as opposed to\n"
"> >    starting from the beginning).  The last element is `-1`.\n"
"> > 2. The last index that can safely be used with a list of N elements is element\n"
"> >    `-N`, which represents the first element.\n"
"> > 3. `del values[-1]` removes the last element from the list.\n"
"> > 4. `values[:-1]`"
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> element = 'helium'\n"
"> print(element[-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  Як Python інтерпретує від'ємний  індекс?\n"
"> 2.  Якщо список або рядок містить N елементів,\n"
">    який найбільший за модулем від'ємний індекс можна безпечно використовувати,\n"
">     і яку локацію визначає цей індекс?\n"
"> 3.  Якщо `values` є списком, що робить `del values[-1]`\n"
"> 4.  Як ви можете відобразити всі елементи, крім останнього, не змінюючи `values`?\n"
">     (Підказка: вам потрібно буде поєднати зрізи та від'ємну індексацію.)\n"
">\n"
"> > ## Рішення\n"
"> > Програма надрукує `m`.\n"
"> > 1. Python інтерпретує від'ємний індекс як початок з кінця (на відміну від\n"
"> >    початку).  Останній елемент – `-1`.\n"
"> > 2. Останнім індексом, який можна безпечно використовувати зі списком із N елементів, є елемент\n"
"> >    `-N`, який представляє перший елемент.\n"
"> > 3. `del values[-1]` видаляє останній елемент зі списку.\n"
"> > 4. `values[:-1]`"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:306
msgid "> ## Stepping Through a List"
msgstr "> ## Перехід по списку"

#: python-novice-gapminder/_episodes/11-lists.md:307
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'fluorine'\n"
"> print(element[::2])\n"
"> print(element[::-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  If we write a slice as `low:high:stride`, what does `stride` do?\n"
"> 2.  What expression would select all of the even-numbered items from a collection?\n"
">\n"
"> > ## Solution\n"
"> > The program prints\n"
"> > ~~~\n"
"> > furn\n"
"> > eniroulf\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > 1. `stride` is the step size of the slice\n"
"> > 2. The slice `1::2` selects all even-numbered items from a collection: it starts\n"
"> >    with element `1` (which is the second element, since indexing starts at `0`),\n"
"> >    goes on until the end (since no `end` is given), and uses a step size of `2`\n"
"> >    (i.e., selects every second element)."
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> element = 'fluorine'\n"
"> print(element[::2])\n"
"> print(element[::-1])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1.  Якщо ми пишемо фрагмент як `low:high:stride`, що робить `stride`?\n"
"> 2. Яка команда дозволить вибрати всі елементи з парними номерами з колекції?\n"
">\n"
"> > ## Рішення\n"
"> > Програма надрукує\n"
"> > ~~~\n"
"> > furn\n"
"> > eniroulf\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > 1. `stride` є розміром кроку зріза\n"
"> > 2. Зріз `1::2` вибирає всі елементи з парними номерами з колекції: він починається\n"
"> >    з елементу `1` (який є другим елементом, оскільки індексація починається з `0`),\n"
"> >    продовжується до кінця (оскільки `end` не задано) і використовує розмір кроку `2`\n"
"> >    (таким чином обираючи кожний другий елемент)."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:335
msgid "> ## Slice Bounds"
msgstr "> ## Границі зрізу"

#: python-novice-gapminder/_episodes/11-lists.md:336
msgid ""
">\n"
"> What does the following program print?\n"
">\n"
"> ~~~\n"
"> element = 'lithium'\n"
"> print(element[0:20])\n"
"> print(element[-1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> > ~~~\n"
"> > lithium\n"
"> > \n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Що друкує наступна програма?\n"
">\n"
"> ~~~\n"
"> element = 'lithium'\n"
"> print(element[0:20])\n"
"> print(element[-1:3])\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> > ~~~\n"
"> > lithium\n"
"> > \n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:355
msgid "> ## Sort and Sorted"
msgstr "> ## Сортування на місці чи у новий список"

#: python-novice-gapminder/_episodes/11-lists.md:356
msgid ""
">\n"
"> What do these two programs print?\n"
"> In simple terms, explain the difference between `sorted(letters)` and `letters.sort()`.\n"
">\n"
"> ~~~\n"
"> # Program A\n"
"> letters = list('gold')\n"
"> result = sorted(letters)\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> # Program B\n"
"> letters = list('gold')\n"
"> result = letters.sort()\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> > Program A prints\n"
"> > ~~~\n"
"> > letters is ['g', 'o', 'l', 'd'] and result is ['d', 'g', 'l', 'o']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Program B prints\n"
"> > ~~~\n"
"> > letters is ['d', 'g', 'l', 'o'] and result is None\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `sorted(letters)` returns a sorted copy of the list `letters` (the original\n"
"> > list `letters` remains unchanged), while `letters.sort()` sorts the list\n"
"> > `letters` in-place and does not return anything."
msgstr ""
">\n"
"> Що друкують ці дві програми?\n"
"> Простими словами поясніть різницю між `sorted(letters)` and `letters.sort()`.\n"
">\n"
"> ~~~\n"
"> # Програма A\n"
"> letters = list('gold')\n"
"> result = sorted(letters)\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> # Програма B\n"
"> letters = list('gold')\n"
"> result = letters.sort()\n"
"> print('letters is', letters, 'and result is', result)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> > Програма A друкує\n"
"> > ~~~\n"
"> > літери  ['g', 'o', 'l', 'd'] і результат є таким: ['d', 'g', 'l', 'o']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > Програма В друкує\n"
"> > ~~~\n"
"> > літери ['d', 'g', 'l', 'o'] і результат є None\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `sorted(letters)` повертає відсортовану копію списку `letters` (оригінал\n"
"> > списку `letters` залишається без змін), тоді як `letters.sort()` сортує список\n"
"> > `letters` на місці та нічого не повертає."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/11-lists.md:393
msgid "> ## Copying (or Not)"
msgstr "> ## Копіювання (чи ні)"

#: python-novice-gapminder/_episodes/11-lists.md:394
msgid ""
">\n"
"> What do these two programs print?\n"
"> In simple terms, explain the difference between `new = old` and `new = old[:]`.\n"
">\n"
"> ~~~\n"
"> # Program A\n"
"> old = list('gold')\n"
"> new = old      # simple assignment\n"
"> new[0] = 'D'\n"
"> print('new is', new, 'and old is', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~\n"
"> # Program B\n"
"> old = list('gold')\n"
"> new = old[:]   # assigning a slice\n"
"> new[0] = 'D'\n"
"> print('new is', new, 'and old is', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> > Program A prints\n"
"> > ~~~\n"
"> > new is ['D', 'o', 'l', 'd'] and old is ['D', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > Program B prints\n"
"> > ~~~\n"
"> > new is ['D', 'o', 'l', 'd'] and old is ['g', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `new = old` makes `new` a reference to the list `old`; `new` and `old` point\n"
"> > towards the same object.\n"
"> > \n"
"> > `new = old[:]` however creates a new list object `new` containing all elements\n"
"> > from the list `old`; `new` and `old` are different objects."
msgstr ""
">\n"
"> Що друкують ці дві програми?\n"
"> Простими словами поясніть різницю між `new = old` and `new = old[:]`.\n"
">\n"
"> ~~~\n"
"> # Програма A\n"
"> old = list('gold')\n"
"> new = old      # просте присвоювання\n"
"> new[0] = 'D'\n"
"> print('новим є', new, 'і старим є', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> ~~~Програма B\n"
"> old = list('gold')\n"
"> new = old[:]   # присвоювання зріза\n"
"> new[0] = 'D'\n"
"> print('новим є', new, 'і старим є', old)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> > Програма А друкує\n"
"> > ~~~\n"
"> > новим є ['D', 'o', 'l', 'd'] і старим є ['D', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > Програма В друкує\n"
"> > ~~~\n"
"> > новим є ['D', 'o', 'l', 'd'] і старим є ['g', 'o', 'l', 'd']\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> > `new = old` робить `new` посиланням на список `old`; `new` and `old` вказують\n"
"> >  на той самий об'єкт.\n"
"> > \n"
"> > `new = old[:]` однак створює новий об’єкт списку `new`, який містить усі елементи\n"
"> > зі списку `old`; `new` та `old` є різними об'єктами."
