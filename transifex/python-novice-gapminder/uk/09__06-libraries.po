# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Olexandr Konovalov, 2022
# Марина Новожилова, 2022
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-05-24 19:34:12+0100\n"
"PO-Revision-Date: 2020-05-24 19:14+0000\n"
"Last-Translator: Марина Новожилова, 2022\n"
"Language-Team: Ukrainian (https://www.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: python-novice-gapminder/_episodes/06-libraries.md:1
msgid ""
"---\n"
"title: \"Libraries\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I use software that other people have written?\"\n"
"- \"How can I find out what that software does?\"\n"
"objectives:\n"
"- \"Explain what software libraries are and why programmers create and use them.\"\n"
"- \"Write programs that import and use libraries from Python's standard library.\"\n"
"- \"Find and read documentation for standard libraries interactively (in the interpreter) and online.\"\n"
"keypoints:\n"
"- \"Most of the power of a programming language is in its libraries.\"\n"
"- \"A program must import a library module in order to use it.\"\n"
"- \"Use `help` to learn about the contents of a library module.\"\n"
"- \"Import specific items from a library to shorten programs.\"\n"
"- \"Create an alias for a library when importing it to shorten programs.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Бібліотеки\"\n"
"teaching: 10\n"
"exercises: 10\n"
"questions:\n"
"- \"Як я можу використовувати програмне забезпечення, яке написали інші люди?\"\n"
"- \"Як я можу дізнатися, що робить це програмне забезпечення?\"\n"
"цілі:\n"
"- \"Пояснити, що таке програмні бібліотеки і для чого їх створюють і використовують програмісти.\"\n"
"- \"Написати програми, які імпортують і використовують бібліотеки зі стандартної бібліотеки Python.\"\n"
"- \"Знайти та прочитати документацію для стандартних бібліотек в інтерактивному режимі (в інтерпретаторі) та онлайн\"\n"
"keypoints:\n"
"- \"Більша частина потужності мови програмування полягає в її бібліотеках.\"\n"
"- \"Програма має імпортувати бібліотечний модуль, щоб використовувати його.\"\n"
"- \"Використовуйте `help` , щоб дізнатися про вміст бібліотечного модуля.\"\n"
"- \"Імпортуйте певні елементи із бібліотеки для скорочення програм.\"\n"
"- \"Створіть псевдонім для бібліотеки під час її імпорту для скорочення програм.\"\n"
"---"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:19
msgid "## Most of the power of a programming language is in its libraries."
msgstr ""
"## Більша частина потужності мови програмування полягає в її бібліотеках."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:21
msgid ""
"*   A *library* is a collection of files (called *modules*) that contains"
msgstr ""
"*   *Бібліотека* — це набір файлів (так званих *модулів*), які містять"

#: python-novice-gapminder/_episodes/06-libraries.md:22
msgid ""
"    functions for use by other programs.\n"
"    *   May also contain data values (e.g., numerical constants) and other things.\n"
"    *   Library's contents are supposed to be related, but there's no way to enforce that.\n"
"*   The Python [standard library][stdlib] is an extensive suite of modules that comes\n"
"    with Python itself.\n"
"*   Many additional libraries are available from [PyPI][pypi] (the Python Package Index).\n"
"*   We will see later how to write new libraries."
msgstr ""
"бібліотека    функції для використання іншими програмами.\n"
"    *   Може також містити значення даних (наприклад, числові константи) та інші дані.\n"
"    *   Передбачається, що зміст бібліотеки певним чином пов'язаний, але немає засобів це проконтролювати.\n"
"*    [Standard library][stdlib]  Python — це великий набір модулів, що постачається\n"
"з самим Python.\n"
"*   Багато додаткових бібліотек доступні в [PyPI][pypi] (the Python Package Index).\n"
"*   Пізніше ми побачимо, як писати нові бібліотеки."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:30
msgid "> ## Libraries and modules"
msgstr "> ## Бібліотеки та модулі"

#: python-novice-gapminder/_episodes/06-libraries.md:31
msgid ""
">\n"
"> A library is a collection of modules, but the terms are often used\n"
"> interchangeably, especially since many libraries only consist of a single\n"
"> module, so don't worry if you mix them."
msgstr ""
">\n"
"> Бібліотека — це набір модулів, але ці терміни часто вважаються \n"
"> взаємозамінними, особливо тому, що багато бібліотек складаються лише з одного\n"
"> модуля, тому не хвилюйтеся, якщо ви їх змішуєте."

# header
#: python-novice-gapminder/_episodes/06-libraries.md:38
msgid "## A program must import a library module before using it."
msgstr ""
"## Програма повинна імпортувати бібліотечний модуль перед його "
"використанням."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:40
msgid "*   Use `import` to load a library module into a program's memory."
msgstr ""
"*   Використовуйте `import`, щоб завантажити модуль бібліотеки в пам'ять "
"програми."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:41
msgid "*   Then refer to things from the module as `module_name.thing_name`."
msgstr ""
"*   Потім посилайтеся на функції модуля як `module_name.function_name`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:42
msgid "    *   Python uses `.` to mean \"part of\"."
msgstr ""
"    *   У Python синтакс `a.b` означає що `a` містить `b`, або іншими "
"словами,  `b`  є частиною `a`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:43
msgid "*   Using `math`, one of the modules in the standard library:"
msgstr ""
"*   Використовуючи `math`, один із модулів у стандартній бібліотеці, маємо: "

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:45
msgid ""
"~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math\n"
"\n"
"print('pi is', math.pi)\n"
"print('cos(pi) is', math.cos(math.pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:51
msgid ""
"{: .language-python}\n"
"~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"pi is 3.141592653589793\n"
"cos(pi) is -1.0\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:58
msgid "*   Have to refer to each item with the module's name."
msgstr "*   Потрібно посилатися на кожен елемент разом із назвою модуля."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:59
msgid "    *   `math.cos(pi)` won't work: the reference to `pi`"
msgstr "    *   `math.cos(pi)` не буде працювати: посилання на `pi`"

#: python-novice-gapminder/_episodes/06-libraries.md:60
msgid "        doesn't somehow \"inherit\" the function's reference to `math`."
msgstr "        жодним чином не \"успадковує\" посилання функції на `math`."

# header
#: python-novice-gapminder/_episodes/06-libraries.md:62
msgid "## Use `help` to learn about the contents of a library module."
msgstr ""
"## Використовуйте `help`, щоб дізнатися про вміст бібліотечного модуля. "

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:64
msgid "*   Works just like help for a function."
msgstr "*   Працює так само, як довідка для функції."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:66
msgid ""
"~~~\n"
"help(math)\n"
"~~~"
msgstr ""
"~~~\n"
"help(math)\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:69
msgid ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"Help on module math:"

#: python-novice-gapminder/_episodes/06-libraries.md:73
msgid ""
"NAME\n"
"    math"
msgstr ""
"NAME\n"
"    math"

#: python-novice-gapminder/_episodes/06-libraries.md:76
msgid ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"
msgstr ""
"MODULE REFERENCE\n"
"    http://docs.python.org/3/library/math"

#: python-novice-gapminder/_episodes/06-libraries.md:79
msgid ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."
msgstr ""
"    The following documentation is automatically generated from the Python\n"
"    source files.  It may be incomplete, incorrect or include features that\n"
"    are considered implementation detail and may vary between Python\n"
"    implementations.  When in doubt, consult the module reference at the\n"
"    location listed above."

#: python-novice-gapminder/_episodes/06-libraries.md:85
msgid ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."
msgstr ""
"DESCRIPTION\n"
"    This module is always available.  It provides access to the\n"
"    mathematical functions defined by the C standard."

#: python-novice-gapminder/_episodes/06-libraries.md:89
msgid ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"
msgstr ""
"FUNCTIONS\n"
"    acos(x, /)\n"
"        Return the arc cosine (measured in radians) of x.\n"
"⋮ ⋮ ⋮\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:96
msgid "## Import specific items from a library module to shorten programs."
msgstr ""
"## Імпортуйте певні елементи з бібліотечного модуля, щоб скоротити програми."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:98
msgid ""
"*   Use `from ... import ...` to load only specific items from a library "
"module."
msgstr ""
"*   Використовуйте `from ... import ...`, щоб завантажити лише певні "
"елементи з бібліотечного модуля."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:99
msgid "*   Then refer to them directly without library name as prefix."
msgstr ""
"*   Потім звертайтеся до них безпосередньо без назви бібліотеки як префікса."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:101
msgid ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"
msgstr ""
"~~~\n"
"from math import cos, pi\n"
"\n"
"print('cos(pi) is', cos(pi))\n"
"~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:106
#: python-novice-gapminder/_episodes/06-libraries.md:122
msgid ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) is -1.0\n"
"~~~"
msgstr ""
"{: .language-python}\n"
"~~~\n"
"cos(pi) is -1.0\n"
"~~~"

# header
#: python-novice-gapminder/_episodes/06-libraries.md:112
msgid ""
"## Create an alias for a library module when importing it to shorten "
"programs."
msgstr ""
"## Створіть псевдонім для бібліотечного модуля під час його імпорту для "
"скорочення програм."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:114
msgid ""
"*   Use `import ... as ...` to give a library a short *alias* while "
"importing it."
msgstr ""
"*   Використовуйте `import ... as ...`, щоб надати бібліотеці короткий "
"*псевдонім* під час її імпорту."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:115
msgid "*   Then refer to items in the library using that shortened name."
msgstr ""
"*   Потім звертайтеся до елементів у бібліотеці, використовуючи цю скорочену"
" назву."

# code block
#: python-novice-gapminder/_episodes/06-libraries.md:117
msgid ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"
msgstr ""
"~~~\n"
"import math as m\n"
"\n"
"print('cos(pi) is', m.cos(m.pi))\n"
"~~~"

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:128
msgid ""
"*   Commonly used for libraries that are frequently used or have long names."
msgstr ""
"*   Зазвичай цей прийом використовується для бібліотек, які часто "
"використовуються або мають довгі імена."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:129
msgid "    *   E.g., `matplotlib` plotting library is often aliased as `mpl`."
msgstr ""
"    *   Наприклад, бібліотека для побудови графіків `matplotlib` часто має "
"псевдонім `mpl`."

# unordered list
#: python-novice-gapminder/_episodes/06-libraries.md:130
msgid "*   But can make programs harder to understand,"
msgstr "*   Але це може ускладнювати розуміння програм,"

#: python-novice-gapminder/_episodes/06-libraries.md:131
msgid "    since readers must learn your program's aliases."
msgstr ""
"    оскільки у цьому разі читачі повинні знати псевдоніми вашої програми."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:133
msgid "> ## Exploring the Math Module"
msgstr "> ## Знайомство з модулем math"

#: python-novice-gapminder/_episodes/06-libraries.md:134
msgid ""
">\n"
"> 1. What function from the `math` module can you use to calculate a square root\n"
">    *without* using `sqrt`?\n"
"> 2. Since the library contains this function, why does `sqrt` exist?\n"
">\n"
"> > ## Solution\n"
"> > 1. Using `help(math)` we see that we've got `pow(x,y)` in addition to `sqrt(x)`,\n"
"> >    so we could use `pow(x, 0.5)` to find a square root.\n"
"> > 2. The `sqrt(x)` function is arguably more readable than `pow(x, 0.5)` when\n"
"> >    implementing equations. Readability is a cornerstone of good programming, so it\n"
"> >    makes sense to provide a special function for this specific common case.\n"
"> >\n"
"> >    Also, the design of Python's `math` library has its origin in the C standard,\n"
"> >    which includes both `sqrt(x)` and `pow(x,y)`, so a little bit of the history\n"
"> >    of programming is showing in Python's function names."
msgstr ""
">\n"
"> 1. За допомогою якої функції з модуля `math` можна обчислити квадратний корінь\n"
">    *без* використання `sqrt`?\n"
"> 2. Оскільки бібліотека містить цю функцію, чому існує `sqrt`?\n"
">\n"
"> > ## Рішення\n"
"> > 1. Використовуючи `help(math)` ми бачимо, що у нас є `pow(x,y)` на додаток до `sqrt(x)`,\n"
"> >    отже ми можемо застосувати `pow(x, 0.5)` для визначення квадратного кореня.\n"
"> > 2. Функція `sqrt(x)`, можливо, легша для читання, ніж `pow(x, 0.5)`, коли\n"
"> >    реалізуються рівняння. Читабельність є наріжним каменем хорошого стилю програмування, отже\n"
"> >    має сенс надати спеціальну функцію для цього конкретного звичайного випадку.\n"
"> >\n"
"> >    Крім того, дизайн бібліотеки `math` Python бере свій початок у стандарті C,\n"
"> >    який включає як `sqrt(x)`, так і `pow(x,y)`, тож трохи історії\n"
"> >    програмування відображається в назвах функцій Python."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:152
msgid "> ## Locating the Right Module"
msgstr "> ## Пошук правильного модуля"

#: python-novice-gapminder/_episodes/06-libraries.md:153
msgid ""
">\n"
"> You want to select a random character from a string:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Which [standard library][stdlib] module could help you?\n"
"> 2. Which function would you select from that module? Are there alternatives?\n"
"> 3. Try to write a program that uses the function.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > The [random module][randommod] seems like it could help you.\n"
"> >\n"
"> > The string has 11 characters, each having a positional index from 0 to 10.\n"
"> > You could use `random.randrange` function (or the alias `random.randint`\n"
"> > if you find that easier to remember) to get a random integer between 0 and\n"
"> > 10, and then pick out the character at that position:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > or more compactly:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Perhaps you found the `random.sample` function? It allows for slightly\n"
"> > less typing:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Note that this function returns a list of values. We will learn about\n"
"> > lists in [episode 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > There's also other functions you could use, but with more convoluted\n"
"> > code as a result."
msgstr ""
">\n"
"> Ви хочете вибрати випадковий символ із рядка:\n"
">\n"
"> ~~~\n"
"> bases = 'ACTTGCTTGAC'\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> 1. Який модуль зі [standard library][stdlib]  може допомогти?\n"
"> 2. Яку функцію ви б вибрали з цього модуля? Чи є альтернативи?\n"
"> 3. Спробуйте написати програму, яка використовує функцію.\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Здається, модуль [random][randommod] може допомогти.\n"
"> >\n"
"> > Рядок містить 11 символів, кожен з яких має позиційний індекс від 0 до 10.\n"
"> > Ви можете використати функцію `random.randrange`  (або псевдонім `random.randint`\n"
"> > якщо вам легше запам’ятати), щоб отримати випадкове ціле число від 0 до\n"
"> > 10, а потім вибрати символ у цій позиції:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > random_index = randrange(len(bases))\n"
"> > print(bases[random_index])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > або більш компактно:\n"
"> >\n"
"> > ~~~\n"
"> > from random import randrange\n"
"> >\n"
"> > print(bases[randrange(len(bases))])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Можливо, ви знайшли функцію `random.sample`? Це дозволяє набирати\n"
"> > трохи менше коду:\n"
"> >\n"
"> > ~~~\n"
"> > from random import sample\n"
"> >\n"
"> > print(sample(bases, 1)[0])\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Зауважте, що ця функція повертає список значень. Ми дізнаємось про\n"
"> > списки в [episode 11]({% link _episodes/11-lists.md %}).\n"
"> >\n"
"> > Існують також інші функції, які ви можете використовувати, але з більш складним\n"
"> > результуючим кодом."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:210
msgid "> ## Jigsaw Puzzle (Parson's Problem) Programming Example"
msgstr "> ## Головоломка (задача Парсона). Приклад програмування"

#: python-novice-gapminder/_episodes/06-libraries.md:211
msgid ""
">\n"
"> Rearrange the following statements so that a random\n"
"> DNA base is printed and its index in the string.  Not all statements may be needed.  Feel free to use/add\n"
"> intermediate variables.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"
msgstr ""
">\n"
"> Упорядкуйте наступні оператори таким чином, щоб друкувалась\n"
"> випадкова ДНК база  та її індекс в рядку.  Не всі оператори можуть бути потрібні.  За необхідності додавайте\n"
"> проміжні змінні.\n"
">\n"
"> ~~~\n"
"> bases=\"ACTTGCTTGAC\"\n"
"> import math\n"
"> import random\n"
"> ___ = random.randrange(n_bases)\n"
"> ___ = len(bases)\n"
"> print(\"random base \", bases[___], \"base index\", ___)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > import math \n"
"> > import random\n"
"> > bases = \"ACTTGCTTGAC\" \n"
"> > n_bases = len(bases)\n"
"> > idx = random.randrange(n_bases)\n"
"> > print(\"random base\", bases[idx], \"base index\", idx)\n"
"> > ~~~\n"
"> > {: .language-python}"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:240
msgid "> ## When Is Help Available?"
msgstr "> ## Коли доступна допомога?"

#: python-novice-gapminder/_episodes/06-libraries.md:241
msgid ""
">\n"
"> When a colleague of yours types `help(math)`,\n"
"> Python reports an error:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"
msgstr ""
">\n"
"> Коли ваш колега набирає `help(math)`,\n"
"> Python повідомляє про помилку:\n"
">\n"
"> ~~~\n"
"> NameError: name 'math' is not defined\n"
"> ~~~"

#: python-novice-gapminder/_episodes/06-libraries.md:249
msgid ""
">\n"
"> What has your colleague forgotten to do?\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > Importing the math module (`import math`)"
msgstr ""
">\n"
"> Що забув зробити ваш колега?\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > Імпортувати модуль math (`import math`)"

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:258
msgid "> ## Importing With Aliases"
msgstr "> ## Імпорт із псевдонімами"

#: python-novice-gapminder/_episodes/06-libraries.md:259
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Rewrite the program so that it uses `import` *without* `as`.\n"
"> 3. Which form do you find easier to read?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > can be written as\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Since you just wrote the code and are familiar with it, you might actually\n"
"> > find the first version easier to read. But when trying to read a huge piece\n"
"> > of code written by someone else, or when getting back to your own huge piece\n"
"> > of code after several months, non-abbreviated names are often easier, except\n"
"> > where there are clear abbreviation conventions."
msgstr ""
">\n"
"> 1. Заповніть порожні поля так, щоб програма, наведена нижче, надрукувала `90.0`.\n"
"> 2. Перепишіть програму так, щоб вона використовувала `import` *без* `as`.\n"
"> 3. Яку форму вам легше читати?\n"
">\n"
"> ~~~\n"
"> import math as m\n"
"> angle = ____.degrees(____.pi / 2)\n"
"> print(____)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > import math as m\n"
"> > angle = m.degrees(m.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > можна записати як\n"
"> >\n"
"> > ~~~\n"
"> > import math\n"
"> > angle = math.degrees(math.pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Оскільки ви щойно написали код і знайомі з ним, ви можете насправді\n"
"> > вважати, що першу версію легше читати. Але при спробі прочитати величезну купу\n"
"> > коду, написаного кимось іншим, або коли повертаєтесь до свого власного величезного фрагменту\n"
"> > коду через кілька місяців, нескорочені імена часто легші, за винятком\n"
"> > випадку, де є чіткі умовні позначення скорочень."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:297
msgid "> ## There Are Many Ways To Import Libraries!"
msgstr "> ## Існує багато способів імпорту бібліотек!"

#: python-novice-gapminder/_episodes/06-libraries.md:298
msgid ""
">\n"
"> Match the following print statements with the appropriate library calls.\n"
">\n"
"> Print commands:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Library calls:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. Library calls 1 and 4. In order to directly refer to `sin` and `pi` without\n"
"> >    the library name as prefix, you need to use the `from ... import ...`\n"
"> >    statement. Whereas library call 1 specifically imports the two functions\n"
"> >    `sin` and `pi`, library call 4 imports all functions in the `math` module.\n"
"> > 2. Library call 3. Here `sin` and `pi` are referred to with a shortened library\n"
"> >    name `m` instead of `math`. Library call 3 does exactly that using the\n"
"> >    `import ... as ...` syntax - it creates an alias for `math` in the form of\n"
"> >    the shortened name `m`.\n"
"> > 3. Library call 2. Here `sin` and `pi` are referred to with the regular library\n"
"> >    name `math`, so the regular `import ...` call suffices."
msgstr ""
">\n"
"> Зіставте наступні оператори друку з відповідними викликами бібліотеки.\n"
">\n"
"> Оператори друку:\n"
">\n"
"> 1. `print(\"sin(pi/2) =\", sin(pi/2))`\n"
"> 2. `print(\"sin(pi/2) =\", m.sin(m.pi/2))`\n"
"> 3. `print(\"sin(pi/2) =\", math.sin(math.pi/2))`\n"
">\n"
"> Виклики бібліотеки:\n"
">\n"
"> 1. `from math import sin, pi`\n"
"> 2. `import math`\n"
"> 3. `import math as m`\n"
"> 4. `from math import *`\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1. Виклики бібліотеки 1 та 4. Для прямого посилання на `sin` та `pi` без\n"
"> >    назви бібліотеки як префікса, вам потрібно використовувати `from ... import ...`\n"
"> >    оператор. Виклик бібліотеки 1 спеціально імпортує дві функції\n"
"> >    `sin` та `pi`, тоді як виклик бібліотеки 4 імпортує всі functions з модуля `math`.\n"
"> > 2. Виклик бібліотеки 3. Тут `sin` та `pi` посилаються на   скорочену назву бібліотеки\n"
"> >    `m` замість `math`. Виклик бібліотеки 3 робить саме це за допомогою\n"
"> >  синтаксису  `import ... as ...` , що створює псевдонім для `math` в формі\n"
"> >    скороченої назви  `m`.\n"
"> > 3. Виклик бібліотеки 2. Тут `sin` та `pi`  посилаються на звичайну бібліотеку\n"
"> >   `math`, тому буде достатньо звичайного виклику `import ...` ."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:329
msgid "> ## Importing Specific Items"
msgstr "> ## Імпорт певних елементів"

#: python-novice-gapminder/_episodes/06-libraries.md:330
msgid ""
">\n"
"> 1. Fill in the blanks so that the program below prints `90.0`.\n"
"> 2. Do you find this version easier to read than preceding ones?\n"
"> 3. Why *wouldn't* programmers always use this form of `import`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Most likely you find this version easier to read since it's less dense.\n"
"> > The main reason not to use this form of import is to avoid name clashes.\n"
"> > For instance, you wouldn't import `degrees` this way if you also wanted to\n"
"> > use the name `degrees` for a variable or function of your own. Or if you\n"
"> > were to also import a function named `degrees` from another library."
msgstr ""
">\n"
"> 1. Заповніть порожні поля так, щоб програма, наведена нижче, вивела `90.0`.\n"
"> 2. Чи вважаєте ви цю версію легшою для читання, ніж попередні?\n"
"> 3. Чому *не* програмісти завжди використовують цю форму `імпорту`?\n"
">\n"
"> ~~~\n"
"> ____ math import ____, ____\n"
"> angle = degrees(pi / 2)\n"
"> print(angle)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > ~~~\n"
"> > from math import degrees, pi\n"
"> > angle = degrees(pi / 2)\n"
"> > print(angle)\n"
"> > ~~~\n"
"> > {: .language-python}\n"
"> >\n"
"> > Швидше за все, вам легше читати цю версію, оскільки вона менш щільна.\n"
"> > Основною причиною не використовувати цю форму імпорту є уникнення зіткнень імен.\n"
"> > Наприклад, ви б не імпортували `degrees` таким чином, якби також хотіли\n"
"> > використовувати назву `degrees` для власної змінної або функції. Або якщо вам\n"
"> > необхідно також імпортувати функцію з назвою `degrees` з іншої бібліотеки."

# blockquote, which can be cascaded
#: python-novice-gapminder/_episodes/06-libraries.md:359
#: python-novice-gapminder/_episodes/17-scope.md:76
msgid "> ## Reading Error Messages"
msgstr "> ## Читання повідомлень про помилки"

#: python-novice-gapminder/_episodes/06-libraries.md:360
msgid ""
">\n"
"> 1. Read the code below and try to identify what the errors are without running it.\n"
"> 2. Run the code, and read the error message. What type of error is it?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > 1. The logarithm of `x` is only defined for `x > 0`, so 0 is outside the\n"
"> >    domain of the function.\n"
"> > 2. You get an error of type \"ValueError\", indicating that the function\n"
"> >    received an inappropriate argument value. The additional message\n"
"> >    \"math domain error\" makes it clearer what the problem is."
msgstr ""
">\n"
"> 1. Прочитайте наведений нижче код і спробуйте визначити помилки перед його виконанням.\n"
"> 2. Запустіть код і прочитайте повідомлення про помилку. Який тип цієї помилки?\n"
">\n"
"> ~~~\n"
"> from math import log\n"
"> log(0)\n"
"> ~~~\n"
"> {: .language-python}\n"
">\n"
"> > ## Рішення\n"
"> >\n"
"> > 1. Логарифм `x` визначено лише для `x > 0`, тому 0 знаходиться за межами\n"
"> >    області визначення функції.\n"
"> > 2. Ви отримуєте повідомлення про помилку типу \"ValueError\", яке вказує на те, що функція\n"
"> >    отримала невідповідне значення аргументу. Додаткове повідомлення\n"
"> >    \"math domain error\" пояснює, в чому полягає проблема."

#: python-novice-gapminder/_episodes/06-libraries.md:380
msgid ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
msgstr ""
"[pypi]: https://pypi.python.org/pypi/\n"
"[stdlib]: https://docs.python.org/3/library/\n"
"[randommod]: https://docs.python.org/3/library/random.html"
