# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# vorontsoovaa, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-07-18 17:19:47+0100\n"
"PO-Revision-Date: 2020-07-18 16:29+0000\n"
"Last-Translator: vorontsoovaa, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 04-data-structures-part2.md in _episodes_rmd/\n"
"title: \"Exploring Data Frames\"\n"
"teaching: 20\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I manipulate a data frame?\"\n"
"objectives:\n"
"- \"Remove rows with `NA` values.\"\n"
"- \"Append two data frames.\"\n"
"- \"Understand what a `factor` is.\"\n"
"- \"Convert a `factor` to a `character` vector and vice versa.\"\n"
"- \"Display basic properties of data frames including size and class of the columns, names, and first few rows.\"\n"
"keypoints:\n"
"- \"Use `cbind()` to add a new column to a data frame.\"\n"
"- \"Use `rbind()` to add a new row to a data frame.\"\n"
"- \"Remove rows from a data frame.\"\n"
"- \"Use `na.omit()` to remove rows from a data frame with `NA` values.\"\n"
"- \"Use `levels()` and `as.character()` to explore and manipulate factors.\"\n"
"- \"Use `str()`, `nrow()`, `ncol()`, `dim()`, `colnames()`, `rownames()`, `head()`, and `typeof()` to understand the structure of a data frame.\"\n"
"- \"Read in a csv file using `read.csv()`.\"\n"
"- \"Understand what `length()` of a data frame represents.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:29
msgid ""
"At this point, you've seen it all: in the last lesson, we toured all the basic\n"
"data types and data structures in R. Everything you do will be a manipulation of\n"
"those tools. But most of the time, the star of the show is the data frame—the table that we created by loading information from a csv file. In this lesson, we'll learn a few more things\n"
"about working with data frames."
msgstr ""
"На цьому етапі, ви бачили все: на минулому уроці, ми ознайомились з усіма основними\n"
"типами даних і структурами даних в R. Все, що ви робите, буде маніпуляцією з\n"
"цими інструментами. Але найчастіше, зіркою шоу є фрейм даних — таблиця, яку ми створили шляхом завантаження інформації з файлу csv. У цьому уроці, ми дізнаємося ще кілька речей\n"
"про роботу з фреймами даних."

# header
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:34
msgid "## Realistic example"
msgstr "## Реалістичний приклад"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:36
msgid ""
"We already learned that the columns of a data frame are vectors, so that our\n"
"data are consistent in type throughout the columns. \n"
"So far, you have seen the basics of manipulating data frames with our nordic data; now let’s use those skills to digest a more extensive dataset. Let’s read in the gapminder dataset that we downloaded previously:"
msgstr ""
"Ми вже дізнались, що стовпці кадру даних є векторами, тому наші\n"
"дані мають узгоджений тип у всіх стовпцях. \n"
"Поки що, ви бачили основи маніпулювання кадрами даних за допомогою наших скандинавських даних; тепер давайте використаємо ці навички, щоб переварити більший набір даних. Давайте прочитаємо набір даних gapminder, який ми завантажили раніше :"

# blockquote, which can be cascaded
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:42
msgid "> ## Miscellaneous Tips"
msgstr "> ## Різні поради"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:43
msgid ""
">\n"
"> * Another type of file you might encounter are tab-separated value files\n"
">   (.tsv). To specify a tab as a separator, use `\"\\\\t\"` or `read.delim()`.\n"
">\n"
"> * Files can also be downloaded directly from the Internet into a local folder\n"
"> of your choice onto your computer using the `download.file` function. The\n"
"> `read.csv` function can then be executed to read the downloaded file from the\n"
"> download location, for example,\n"
">\n"
"> \n"
"> ~~~\n"
"> download.file(\"https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv\",\n"
">               destfile = \"data/gapminder_data.csv\")\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * Alternatively, you can also read in files directly into R from the Internet\n"
">   by replacing the file paths with a web address in `read.csv`. One should\n"
">   note that in doing this no local copy of the csv file is first saved onto\n"
">   your computer. For example,\n"
"> \n"
"> \n"
"> ~~~\n"
"> gapminder <- read.csv(\"https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * You can read directly from excel spreadsheets without\n"
"> converting them to plain text first by using the [readxl](https://cran.r-project.org/package=readxl) package."
msgstr ""
">\n"
"> * Ще один тип файлів, з яким ви можете зіткнутись, це файли із розділеними табуляціями\n"
">   (.tsv). Щоб указати табуляцію, використовуйте `\"\\\\t\"` або `read.delim()`.\n"
">\n"
"> * Файли також можна завантажувати безпосередньо з Інтернету в локальну папку\n"
"> за вашим вибором на ваш комп'ютер, використовуючи функцію `download.file`. Потім цю функцію\n"
"> `read.csv` можна виконати для читання завантаженого файлу з\n"
"> місця завантаження, наприклад,\n"
">\n"
"> \n"
"> ~~~\n"
"> download.file(\"https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv\",\n"
">               destfile = \"data/gapminder_data.csv\")\n"
"> gapminder <- read.csv(\"data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * Крім того, ви також можете читати файли безпосередньо в R з інтернету,\n"
">   замінивши шляхи файлів веб-адресою в `read.csv`. Слід\n"
">   зауважити, що при цьому локальна копія файлу csv спочатку не зберігається на\n"
">   вашому комп'ютері. Наприклад,\n"
"> \n"
"> \n"
"> ~~~\n"
"> gapminder <- read.csv(\"https://raw.githubusercontent.com/datacarpentry/r-intro-geospatial/master/_episodes_rmd/data/gapminder_data.csv\")\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> * Ви можете читати безпосередньо з таблиць excel\n"
"> не перетворюючи їх у звичайний текст за допомогою пакета [readxl](https://cran.r-project.org/package=readxl)."

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:75
msgid ""
"Let's investigate the `gapminder` data frame a bit; the first thing we should\n"
"always do is check out what the data looks like with `str`:"
msgstr ""
"Давайте трохи дослідимо дата фрейм `gapminder`; перше, що ми повинні\n"
"завжди робити, це перевіряти, як викглядають дані за допомогою `str`:"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:79
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:559
#: r-intro-geospatial/_episodes/06-dplyr.md:189
msgid ""
"~~~\n"
"str(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"str(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:86
#: r-intro-geospatial/_episodes/06-dplyr.md:196
msgid ""
"~~~\n"
"'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t1704 obs. of  6 variables:\n"
" $ country  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num  779 821 853 836 740 ...\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:97
msgid ""
"We can also examine individual columns of the data frame with our `class` "
"function:"
msgstr ""
"Ми також можемо перевірити окремі стовпці кадру даних за допомогою функції "
"`class`:"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:100
msgid ""
"~~~\n"
"class(gapminder$year)\n"
"~~~"
msgstr ""
"~~~\n"
"class(gapminder$year)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:114
msgid ""
"~~~\n"
"class(gapminder$country)\n"
"~~~"
msgstr ""
"~~~\n"
"class(gapminder$country)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:128
msgid ""
"~~~\n"
"str(gapminder$country)\n"
"~~~"
msgstr ""
"~~~\n"
"str(gapminder$country)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:135
msgid ""
"~~~\n"
" chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
"~~~"
msgstr ""
"~~~\n"
" chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:140
msgid ""
"We can also interrogate the data frame for information about its dimensions;\n"
"remembering that `str(gapminder)` said there were 1704 observations of 6\n"
"variables in gapminder, what do you think the following will produce, and why?"
msgstr ""
"Ми також можемо запитати кадр даних для отримання інформації про його розміри;\n"
"пам'ятаючи те, що `str(gapminder)` сказав, що в gapminder було 1704 спостережень за 6\n"
"змінними, як ви думаєте, що дасть наступне і чому?"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:145
msgid ""
"~~~\n"
"length(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"length(gapminder)\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:150
msgid ""
"A fair guess would have been to say that the length of a data frame would be the\n"
"number of rows it has (1704), but this is not the case; it gives us the number of columns."
msgstr ""
"Справедливим припущенням було б сказати, що довжина кадру даних дорівнює\n"
"кількості рядків, які він має (1704), але це не так; це дає нам кількість стовпців."

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:154
msgid ""
"~~~\n"
"class(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"class(gapminder)\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:166
msgid "To get the number of rows and columns in our dataset, try:"
msgstr ""
"Щоб отримати кількість рядків і стовпців у нашому наборі даних, спробуйте:"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:169
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:404
msgid ""
"~~~\n"
"nrow(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"nrow(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:176
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:411
msgid ""
"~~~\n"
"[1] 1704\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1704\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:183
msgid ""
"~~~\n"
"ncol(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"ncol(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:190
msgid ""
"~~~\n"
"[1] 6\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 6\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:195
msgid "Or, both at once:"
msgstr "Або обидва одразу:"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:198
msgid ""
"~~~\n"
"dim(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"dim(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:205
msgid ""
"~~~\n"
"[1] 1704    6\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 1704    6\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:210
msgid ""
"We'll also likely want to know what the titles of all the columns are, so we can\n"
"ask for them later:"
msgstr ""
"Ймовірно, ми також захочемо знати заголовки всіх стовпців, щоб\n"
"запитати їх пізніше:"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:214
msgid ""
"~~~\n"
"colnames(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"colnames(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:221
msgid ""
"~~~\n"
"[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\n"
"~~~"
msgstr ""
"~~~\n"
"[1] \"country\"   \"year\"      \"pop\"       \"continent\" \"lifeExp\"   \"gdpPercap\"\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:226
msgid ""
"At this stage, it's important to ask ourselves if the structure R is reporting\n"
"matches our intuition or expectations; do the basic data types reported for each\n"
"column make sense? If not, we need to sort any problems out now before they turn\n"
"into bad surprises down the road, using what we've learned about how R\n"
"interprets data, and the importance of *strict consistency* in how we record our\n"
"data."
msgstr ""
"На цьому етапі, важливо запитати себе,яи структура про яку повідомляє R\n"
"відповідає нашій інтуїції чи очікуванням; чи мають сенс основні типи даних, які повідомляють для кожного\n"
"стовпця? Якщо ні, нам потрібно розібратися з будь-якими проблемами зараз, поки вони не обернуться\n"
"непприємними сюрпризами, виуористовуючи те, що ми дізналися, про те, як R\n"
"інтерпретує дані, і важливість *суворої узгодженості* в тому, як ми записуємо наші\n"
"дані."

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:233
msgid ""
"Once we're happy that the data types and structures seem reasonable, it's time\n"
"to start digging into our data proper. Check out the first few lines:"
msgstr ""
"Коли ми переконаємося, що типи та структури виглядають прийнятно, настав час\n"
"почати копатися в наших даних. Перегляньте кілька перших рядків:"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:237
msgid ""
"~~~\n"
"head(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"head(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:244
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:330
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:256
msgid ""
">\n"
"> It's good practice to also check the last few lines of your data and some in\n"
"> the middle. How would you do this?\n"
">\n"
"> Searching for ones specifically in the middle isn't too hard but we could\n"
"> simply ask for a few lines at random. How would you code this?\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> > To check the last few lines it's relatively simple as R already has a\n"
"> > function for this:\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > tail(gapminder)\n"
"> > tail(gapminder, n = 15)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > What about a few arbitrary rows just for sanity (or insanity depending on\n"
"> > your view)?\n"
"> >\n"
"> > There are several ways to achieve this.\n"
"> >\n"
"> > The solution here presents one form using nested functions. i.e. a function\n"
"> > passed as an argument to another function. This might sound like a new\n"
"> > concept but you are already using it in fact.\n"
"> >\n"
"> > Remember `my_dataframe[rows, cols]` will print to screen your data frame\n"
"> > with the number of rows and columns you asked for (although you might \n"
"> > have asked for a range or named columns for example). How would you get the\n"
"> > last row if you don't know how many rows your data frame has? R has a\n"
"> > function for this. What about getting a (pseudorandom) sample? R also has a\n"
"> > function for this.\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > gapminder[sample(nrow(gapminder), 5), ]\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
">\n"
"> Рекомендується також перевіряти кілька останніх рядків даних і деякі\n"
"> посередині. Як би ви це зробили?\n"
">\n"
"> Пошук тих, що знаходятьчя саме посередині, не надто складний, але ми можемо\n"
"> просто запитати кілька рядків навмання. Як би ви написали цей код?\n"
">\n"
"> > ## Розв'язання до завдання 1\n"
"> >\n"
"> > Перевірити останні кілька рядків відносно просто, оскільки R вже має\n"
"> > функцію для цього:\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > tail(gapminder)\n"
"> > tail(gapminder, n = 15)\n"
"> > ~~~\n"
"> > {: .language-r}\n"
"> > \n"
"> > А як щодо кількох довільних рядків лише для розсудливості (або божевілля залежно від вашої \n"
"> > точки зору)?\n"
"> >\n"
"> > Є кілька способів досягти цього.\n"
"> >\n"
"> > Рішення тут представляє одну форму з використанням фкладених функцій, тобто функція\n"
"> > передається як аргумент іншій функції. Це може звучати, як нова\n"
"> > концепція, але по факту, ви вже її використовуєте.\n"
"> >\n"
"> > Пам'ятайте `my_dataframe[rows, cols]` надрукує ваш дата фрейм\n"
"> > з тією кількістю рядків і стовпців, яку ви попросите (хоча ви могли \n"
"> > просити, наприклад, діапазон або іменовані стовпці). Як отримати\n"
"> > останній рядок, якщо ви не знаєте, скільки рядків має ваш дата фрейм? R має\n"
"> > функцію для цього. Як щодо отримання (псевдовипадкової) вибірки? R такоє має\n"
"> > функцію для цього.\n"
"> > \n"
"> > \n"
"> > ~~~\n"
"> > gapminder[sample(nrow(gapminder), 5), ]\n"
"> > ~~~\n"
"> > {: .language-r}"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:300
msgid ""
">\n"
"> Read the output of `str(gapminder)` again; this time, use what you've learned\n"
"> about factors and vectors, as well as the output of functions like `colnames`\n"
"> and `dim` to explain what everything that `str` prints out for `gapminder`\n"
"> means. If there are any parts you can't interpret, discuss with your\n"
"> neighbors!\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> > The object `gapminder` is a data frame with columns\n"
"> >\n"
"> > - `country` and `continent` are factors.\n"
"> > - `year` is an integer vector.\n"
"> > - `pop`, `lifeExp`, and `gdpPercap` are numeric vectors."
msgstr ""
">\n"
"> Прочитайте вихід `str(gapminder)` знову; цього разу, використовуйте, те що ви дізнались\n"
"> про множини та вектори, а також про вихід функцій, таких як `colnames`\n"
"> і `dim`, щоб пояснити, що означає все, що друкує `str` з `gapminder`.\n"
"> Якщо є якісь частини, які ви не можете інтерпретувати, обговоріть зі своїми\n"
"> одногрупниками!\n"
">\n"
"> > ## Розв'язання до завдання 2\n"
"> >\n"
"> > Об'єкт `gapminder` - це фрейм даних зі стовпцями\n"
"> >\n"
"> > - `country` і `continent` є факторами.\n"
"> > - `year` - це цілий вектор.\n"
"> > - `pop`, `lifeExp`, і `gdpPercap` - це числові вектори."

# header
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:317
msgid "## Adding columns and rows in data frames"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:319
msgid ""
"We would like to create a new column to hold information on whether the life"
" expectancy is below the world average life expectancy (70.5) or above:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:322
msgid ""
"~~~\n"
"below_average <- gapminder$lifeExp < 70.5\n"
"head(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"below_average <- gapminder$lifeExp < 70.5\n"
"head(gapminder)\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:341
msgid "We can then add this as a column via:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:344
msgid ""
"~~~\n"
"cbind(gapminder, below_average)\n"
"~~~"
msgstr ""
"~~~\n"
"cbind(gapminder, below_average)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:350
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:373
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:635
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453          TRUE\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530          TRUE\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007          TRUE\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971          TRUE\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811          TRUE\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134          TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453          TRUE\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530          TRUE\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007          TRUE\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971          TRUE\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811          TRUE\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134          TRUE\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:361
msgid ""
"We probably don't want to print the entire dataframe each time, so\n"
"let's put our `cbind` command within a call to `head` to return\n"
"only the first six lines of the output."
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:366
msgid ""
"~~~\n"
"head(cbind(gapminder, below_average))\n"
"~~~"
msgstr ""
"~~~\n"
"head(cbind(gapminder, below_average))\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:384
msgid ""
"Note that if we tried to add a vector of `below_average` with a different "
"number of entries than the number of rows in the dataframe, it would fail:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:387
msgid ""
"~~~\n"
"below_average <- c(TRUE, TRUE, TRUE, TRUE, TRUE)\n"
"head(cbind(gapminder, below_average))\n"
"~~~"
msgstr ""
"~~~\n"
"below_average <- c(TRUE, TRUE, TRUE, TRUE, TRUE)\n"
"head(cbind(gapminder, below_average))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:395
msgid ""
"~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 1704, 5\n"
"~~~"
msgstr ""
"~~~\n"
"Error in data.frame(..., check.names = FALSE): arguments imply differing number of rows: 1704, 5\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:400
msgid ""
"Why didn't this work? R wants to see one element in our new column\n"
"for every row in the table:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:418
msgid ""
"~~~\n"
"length(below_average)\n"
"~~~"
msgstr ""
"~~~\n"
"length(below_average)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:425
msgid ""
"~~~\n"
"[1] 5\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 5\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:430
msgid ""
"So for it to work we need either to have `nrow(gapminder)` = "
"`length(below_average)` or `nrow(gapminder)` to be a multiple of "
"`length(below_average)`: "
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:433
msgid ""
"~~~\n"
"below_average <- c(TRUE, TRUE, FALSE)\n"
"head(cbind(gapminder, below_average))\n"
"~~~"
msgstr ""
"~~~\n"
"below_average <- c(TRUE, TRUE, FALSE)\n"
"head(cbind(gapminder, below_average))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:441
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453          TRUE\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530          TRUE\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007         FALSE\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971          TRUE\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811          TRUE\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134         FALSE\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"1 Afghanistan 1952  8425333      Asia  28.801  779.4453          TRUE\n"
"2 Afghanistan 1957  9240934      Asia  30.332  820.8530          TRUE\n"
"3 Afghanistan 1962 10267083      Asia  31.997  853.1007         FALSE\n"
"4 Afghanistan 1967 11537966      Asia  34.020  836.1971          TRUE\n"
"5 Afghanistan 1972 13079460      Asia  36.088  739.9811          TRUE\n"
"6 Afghanistan 1977 14880372      Asia  38.438  786.1134         FALSE\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:451
msgid ""
"The sequence `TRUE,TRUE,FALSE` is repeated over all the gapminder rows."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:453
msgid "Let's overwite the content of gapminder with our new data frame."
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:456
msgid ""
"~~~\n"
"below_average <-  as.logical(gapminder$lifeExp<70.5)\n"
"gapminder <- cbind(gapminder, below_average)\n"
"~~~"
msgstr ""
"~~~\n"
"below_average <-  as.logical(gapminder$lifeExp<70.5)\n"
"gapminder <- cbind(gapminder, below_average)\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:462
msgid "Now how about adding rows? The rows of a data frame are lists:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:465
msgid ""
"~~~\n"
"new_row <- list('Norway', 2016, 5000000, 'Nordic', 80.3, 49400.0, FALSE)\n"
"gapminder_norway <- rbind(gapminder, new_row)\n"
"tail(gapminder_norway)\n"
"~~~"
msgstr ""
"~~~\n"
"new_row <- list('Norway', 2016, 5000000, 'Nordic', 80.3, 49400.0, FALSE)\n"
"gapminder_norway <- rbind(gapminder, new_row)\n"
"tail(gapminder_norway)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:474
msgid ""
"~~~\n"
"      country year      pop continent lifeExp  gdpPercap below_average\n"
"1700 Zimbabwe 1987  9216418    Africa  62.351   706.1573          TRUE\n"
"1701 Zimbabwe 1992 10704340    Africa  60.377   693.4208          TRUE\n"
"1702 Zimbabwe 1997 11404948    Africa  46.809   792.4500          TRUE\n"
"1703 Zimbabwe 2002 11926563    Africa  39.989   672.0386          TRUE\n"
"1704 Zimbabwe 2007 12311143    Africa  43.487   469.7093          TRUE\n"
"1705   Norway 2016  5000000    Nordic  80.300 49400.0000         FALSE\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp  gdpPercap below_average\n"
"1700 Zimbabwe 1987  9216418    Africa  62.351   706.1573          TRUE\n"
"1701 Zimbabwe 1992 10704340    Africa  60.377   693.4208          TRUE\n"
"1702 Zimbabwe 1997 11404948    Africa  46.809   792.4500          TRUE\n"
"1703 Zimbabwe 2002 11926563    Africa  39.989   672.0386          TRUE\n"
"1704 Zimbabwe 2007 12311143    Africa  43.487   469.7093          TRUE\n"
"1705   Norway 2016  5000000    Nordic  80.300 49400.0000         FALSE\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:485
msgid ""
"To understand why R is giving us a warning when we try to add this row, "
"let's learn a little more about factors."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:489
msgid ""
"Here is another thing to look out for: in a `factor`, each different value\n"
"represents what is called a `level`. In our case, the `factor` \"continent\" has 5\n"
"levels: \"Africa\", \"Americas\", \"Asia\", \"Europe\" and \"Oceania\". R will only accept\n"
"values that match one of the levels. If you add a new value, it will become\n"
"`NA`."
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:495
msgid ""
"The warning is telling us that we unsuccessfully added \"Nordic\" to our\n"
"*continent* factor, but 2016 (a numeric), 5000000 (a numeric), 80.3 (a numeric),\n"
"49400.0 (a numeric) and `FALSE` (a logical) were successfully added to\n"
"*country*, *year*, *pop*, *lifeExp*, *gdpPercap* and *below_average*\n"
"respectively, since those variables are not factors. 'Norway' was also\n"
"successfully added since it corresponds to an existing level. To successfully\n"
"add a gapminder row with a \"Nordic\" *continent*, add \"Nordic\" as a *level* of\n"
"the factor:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:505
msgid ""
"~~~\n"
"levels(gapminder$continent)\n"
"~~~"
msgstr ""
"~~~\n"
"levels(gapminder$continent)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:512
msgid ""
"~~~\n"
"NULL\n"
"~~~"
msgstr ""
"~~~\n"
"NULL\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:519
msgid ""
"~~~\n"
"levels(gapminder$continent) <- c(levels(gapminder$continent), \"Nordic\")\n"
"gapminder_norway  <- rbind(gapminder,\n"
"                           list('Norway', 2016, 5000000, 'Nordic', 80.3,49400.0, FALSE))\n"
"~~~"
msgstr ""
"~~~\n"
"levels(gapminder$continent) <- c(levels(gapminder$continent), \"Nordic\")\n"
"gapminder_norway  <- rbind(gapminder,\n"
"                           list('Norway', 2016, 5000000, 'Nordic', 80.3,49400.0, FALSE))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:528
msgid ""
"~~~\n"
"Warning in `[<-.factor`(`*tmp*`, ri, value = structure(c(\"Asia\", \"Asia\", :\n"
"invalid factor level, NA generated\n"
"~~~"
msgstr ""
"~~~\n"
"Warning in `[<-.factor`(`*tmp*`, ri, value = structure(c(\"Asia\", \"Asia\", :\n"
"invalid factor level, NA generated\n"
"~~~"

# SC/DC Template label
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:532
msgid "{: .warning}"
msgstr "{: .warning}"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:536
msgid ""
"~~~\n"
"tail(gapminder_norway)\n"
"~~~"
msgstr ""
"~~~\n"
"tail(gapminder_norway)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:543
msgid ""
"~~~\n"
"      country year      pop continent lifeExp  gdpPercap below_average\n"
"1700 Zimbabwe 1987  9216418      <NA>  62.351   706.1573          TRUE\n"
"1701 Zimbabwe 1992 10704340      <NA>  60.377   693.4208          TRUE\n"
"1702 Zimbabwe 1997 11404948      <NA>  46.809   792.4500          TRUE\n"
"1703 Zimbabwe 2002 11926563      <NA>  39.989   672.0386          TRUE\n"
"1704 Zimbabwe 2007 12311143      <NA>  43.487   469.7093          TRUE\n"
"1705   Norway 2016  5000000    Nordic  80.300 49400.0000         FALSE\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp  gdpPercap below_average\n"
"1700 Zimbabwe 1987  9216418      <NA>  62.351   706.1573          TRUE\n"
"1701 Zimbabwe 1992 10704340      <NA>  60.377   693.4208          TRUE\n"
"1702 Zimbabwe 1997 11404948      <NA>  46.809   792.4500          TRUE\n"
"1703 Zimbabwe 2002 11926563      <NA>  39.989   672.0386          TRUE\n"
"1704 Zimbabwe 2007 12311143      <NA>  43.487   469.7093          TRUE\n"
"1705   Norway 2016  5000000    Nordic  80.300 49400.0000         FALSE\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:554
msgid ""
"Alternatively, we can change a factor into a character vector; we lose the handy\n"
"categories of the factor, but we can subsequently add any word we want to the\n"
"column without babysitting the factor levels:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:566
msgid ""
"~~~\n"
"'data.frame':\t1704 obs. of  7 variables:\n"
" $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
"  ..- attr(*, \"levels\")= chr \"Nordic\"\n"
" $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap    : num  779 821 853 836 740 ...\n"
" $ below_average: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t1704 obs. of  7 variables:\n"
" $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
"  ..- attr(*, \"levels\")= chr \"Nordic\"\n"
" $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap    : num  779 821 853 836 740 ...\n"
" $ below_average: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:581
msgid ""
"~~~\n"
"gapminder$continent <- as.character(gapminder$continent)\n"
"str(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder$continent <- as.character(gapminder$continent)\n"
"str(gapminder)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:589
msgid ""
"~~~\n"
"'data.frame':\t1704 obs. of  7 variables:\n"
" $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap    : num  779 821 853 836 740 ...\n"
" $ below_average: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
"~~~"
msgstr ""
"~~~\n"
"'data.frame':\t1704 obs. of  7 variables:\n"
" $ country      : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year         : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop          : num  8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent    : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp      : num  28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap    : num  779 821 853 836 740 ...\n"
" $ below_average: logi  TRUE TRUE TRUE TRUE TRUE TRUE ...\n"
"~~~"

# header
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:601
msgid "## Appending to a data frame"
msgstr ""

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:603
msgid ""
"The key to remember when adding data to a data frame is that *columns are\n"
"vectors and rows are lists.* We can also glue two data frames together with\n"
"`rbind`:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:608
msgid ""
"~~~\n"
"gapminder <- rbind(gapminder, gapminder)\n"
"tail(gapminder, n=3)\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder <- rbind(gapminder, gapminder)\n"
"tail(gapminder, n=3)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:616
msgid ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"3406 Zimbabwe 1997 11404948    Africa  46.809  792.4500          TRUE\n"
"3407 Zimbabwe 2002 11926563    Africa  39.989  672.0386          TRUE\n"
"3408 Zimbabwe 2007 12311143    Africa  43.487  469.7093          TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"      country year      pop continent lifeExp gdpPercap below_average\n"
"3406 Zimbabwe 1997 11404948    Africa  46.809  792.4500          TRUE\n"
"3407 Zimbabwe 2002 11926563    Africa  39.989  672.0386          TRUE\n"
"3408 Zimbabwe 2007 12311143    Africa  43.487  469.7093          TRUE\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:623
msgid ""
"But now the row names are unnecessarily complicated (not consecutive numbers).\n"
"We can remove the rownames, and R will automatically re-name them sequentially:"
msgstr ""

# code block
#: r-intro-geospatial/_episodes/04-data-structures-part2.md:627
msgid ""
"~~~\n"
"rownames(gapminder) <- NULL\n"
"head(gapminder)\n"
"~~~"
msgstr ""
"~~~\n"
"rownames(gapminder) <- NULL\n"
"head(gapminder)\n"
"~~~"

#: r-intro-geospatial/_episodes/04-data-structures-part2.md:647
msgid ""
">\n"
"> You can create a new data frame right from within R with the following syntax:\n"
"> \n"
"> ~~~\n"
"> df <- data.frame(id = c(\"a\", \"b\", \"c\"),\n"
">                  x = 1:3,\n"
">                  y = c(TRUE, TRUE, FALSE),\n"
">                  stringsAsFactors = FALSE)\n"
"> ~~~\n"
"> {: .language-r}\n"
">\n"
"> Make a data frame that holds the following information for yourself:\n"
">\n"
"> - first name\n"
"> - last name\n"
"> - lucky number\n"
">\n"
"> Then use `rbind` to add an entry for the people sitting beside you. Finally,\n"
"> use `cbind` to add a column with each person's answer to the question, \"Is it\n"
"> time for coffee break?\"\n"
">\n"
"> > ## Solution to Challenge 3\n"
"> >\n"
"> > \n"
"> > ~~~\n"
"> > df <- data.frame(first = c(\"Grace\"),\n"
"> >                  last = c(\"Hopper\"),\n"
"> >                  lucky_number = c(0),\n"
"> >                  stringsAsFactors = FALSE)\n"
"> > df <- rbind(df, list(\"Marie\", \"Curie\", 238) )\n"
"> > df <- cbind(df, coffeetime = c(TRUE, TRUE))\n"
"> > ~~~\n"
"> > {: .language-r}"
msgstr ""
