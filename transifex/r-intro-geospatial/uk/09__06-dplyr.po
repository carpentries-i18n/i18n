# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# vorontsoovaa, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2020-07-18 17:19:47+0100\n"
"PO-Revision-Date: 2020-07-18 16:29+0000\n"
"Last-Translator: vorontsoovaa, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: r-intro-geospatial/_episodes/06-dplyr.md:1
msgid ""
"---\n"
"# Please do not edit this file directly; it is auto generated.\n"
"# Instead, please edit 06-dplyr.md in _episodes_rmd/\n"
"title: Data frame Manipulation with dplyr\n"
"teaching: 30\n"
"exercises: 10\n"
"questions:\n"
"- \"How can I manipulate dataframes without repeating myself?\"\n"
"objectives:\n"
"- \" To be able to use the six main dataframe manipulation 'verbs' with pipes in  `dplyr`.\"\n"
"- \" To understand how `group_by()` and `summarize()` can be combined to summarize datasets.\"\n"
"- \" Be able to analyze a subset of data using logical filtering.\"\n"
"keypoints:\n"
"- \"Use the `dplyr` package to manipulate dataframes.\"\n"
"- \"Use `select()` to choose variables from a dataframe.\"\n"
"- \"Use `filter()` to choose data based on values.\"\n"
"- \"Use `group_by()` and `summarize()` to work with subsets of data.\"\n"
"- \"Use `mutate()` to create new variables.\"\n"
"source: Rmd\n"
"---"
msgstr ""

#: r-intro-geospatial/_episodes/06-dplyr.md:24
msgid ""
"Manipulation of dataframes means many things to many researchers, we often\n"
"select certain observations (rows) or variables (columns), we often group the\n"
"data by a certain variable(s), or we even calculate summary statistics. We can\n"
"do these operations using the normal base R operations:"
msgstr ""
"Маніпулювання йафлами даних означає багато речей для багатьох дослідників, ми часто\n"
"вибираємо певні спостереження (рядки) або змінні (стовпці), ми часто групуємо \n"
"дані за певними змінними, або навіть обчислюємо сумарну статистику. Ми можемо\n"
"виконати ці операції використовуючи звичайні базові R операції:  "

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:30
msgid ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Africa\", \"gdpPercap\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Africa\", \"gdpPercap\"])\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:37
msgid ""
"~~~\n"
"[1] 2193.755\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 2193.755\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:44
msgid ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Americas\", \"gdpPercap\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Americas\", \"gdpPercap\"])\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:51
msgid ""
"~~~\n"
"[1] 7136.11\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 7136.11\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:58
msgid ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Asia\", \"gdpPercap\"])\n"
"~~~"
msgstr ""
"~~~\n"
"mean(gapminder[gapminder$continent == \"Asia\", \"gdpPercap\"])\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:65
msgid ""
"~~~\n"
"[1] 7902.15\n"
"~~~"
msgstr ""
"~~~\n"
"[1] 7902.15\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:70
msgid ""
"But this isn't very efficient, and can become tedious quickly because there is a\n"
"fair bit of repetition. Repeating yourself will cost you time, both now and\n"
"later, and potentially introduce some nasty bugs."
msgstr ""
"Але це не дуже ефективно, і це може стати швидко виснажливо, тому що є \n"
"справедливе повторення. Повторюючи своїх дій коштуватиме вам часу, як зараз так і \n"
"пізніше, і потенційно призведе до деяких неприємних помилок."

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:74
msgid "## The `dplyr` package"
msgstr "## Пакет `dplyr` "

#: r-intro-geospatial/_episodes/06-dplyr.md:76
msgid ""
"Luckily, the [`dplyr`](https://dplyr.tidyverse.org) package provides a number of\n"
"very useful functions for manipulating dataframes in a way that will reduce the\n"
"above repetition, reduce the probability of making errors, and probably even\n"
"save you some typing. As an added bonus, you might even find the `dplyr` grammar\n"
"easier to read."
msgstr ""
"На щастя, пакет [`dplyr`](https://dplyr.tidyverse.org) надає ряд \n"
"дуже корисних  функцій для маніпулювання файлами даних, таким чином зменшить\n"
"повторення, зменшить ймовірність помилок, і можливо навіть \n"
"збереже вам деякий набір. Як додатковий бонус, ви можете побачити, що граматику `dplyr` \n"
"легше читати."

#: r-intro-geospatial/_episodes/06-dplyr.md:82
msgid ""
"Here we're going to cover 6 of the most commonly used functions as well as using\n"
"pipes (`%>%`) to combine them."
msgstr ""
"Тут ми розглянемо 6 найбільш часто використовуваних функцій, а також використання\n"
"конвеєрів (`%>%`) для їхнього комбінування."

# ordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:85
msgid "1. `select()`"
msgstr "1. `select()`"

# ordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:86
msgid "2. `filter()`"
msgstr "2. `filter()`"

# ordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:87
msgid "3. `group_by()`"
msgstr "3. `group_by()`"

# ordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:88
msgid "4. `summarize()`"
msgstr "4. `summarize()`"

# ordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:89
msgid "5. `mutate()`"
msgstr "5. `mutate()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:91
msgid "If you have have not installed this package earlier, please do so:"
msgstr "Якщо ви не встановили цей пакет раніше, зробіть наступне: "

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:94
msgid ""
"~~~\n"
"install.packages('dplyr')\n"
"~~~"
msgstr ""
"~~~\n"
"install.packages('dplyr')\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:99
msgid "Now let's load the package:"
msgstr "Зараз давайте завантажимо цей пакет: "

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:102
msgid ""
"~~~\n"
"library(\"dplyr\")\n"
"~~~"
msgstr ""
"~~~\n"
"library(\"dplyr\")\n"
"~~~"

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:107
msgid "## Using `select()`"
msgstr "## Використання `select()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:109
msgid ""
"If, for example, we wanted to move forward with only a few of the variables in\n"
"our dataframe we could use the `select()` function. This will keep only the\n"
"variables you select."
msgstr ""
"Якщо, наприклад, ми хочемо рухатись далі лише з декількома змінними \n"
"нашого файлу даних, ми можемо використовувати функцію `select()`. Це збереже тільки\n"
"вибрані змінні."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:114
msgid ""
"~~~\n"
"year_country_gdp <- select(gapminder, year, country, gdpPercap)\n"
"~~~"
msgstr ""
"~~~\n"
"year_country_gdp <- select(gapminder, year, country, gdpPercap)\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:119
msgid "![](../fig/13-dplyr-fig1.png)"
msgstr "![](../fig/13-dplyr-fig1.png)"

#: r-intro-geospatial/_episodes/06-dplyr.md:121
msgid ""
"If we open up `year_country_gdp` we'll see that it only contains the year,\n"
"country and gdpPercap. Above we used 'normal' grammar, but the strengths of\n"
"`dplyr` lie in combining several functions using pipes. Since the pipes grammar\n"
"is unlike anything we've seen in R before, let's repeat what we've done above\n"
"using pipes."
msgstr ""
"Якщо ми відкриємо `year_country_gdp` ми побачимо, що він містить тільки рік,\n"
"країну і рівень ВВП. Вище ми використовували 'нормальну' граматику, але сильні сторони\n"
"`dplyr` полягають у поєднанні декількох функцій за допомогою конвеєрів. Оскільки граматика конвеєрів\n"
"не схожа на все, що ми бачили раніше в R, давайте повторимо, те що ми зробили раніше\n"
"використовуючи конвеєри."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:128
msgid ""
"~~~\n"
"year_country_gdp <- gapminder %>% select(year,country,gdpPercap)\n"
"~~~"
msgstr ""
"~~~\n"
"year_country_gdp <- gapminder %>% select(year,country,gdpPercap)\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:133
msgid ""
"To help you understand why we wrote that in that way, let's walk through it step\n"
"by step. First we summon the `gapminder` data frame and pass it on, using the\n"
"pipe symbol `%>%`, to the next step, which is the `select()` function. In this\n"
"case we don't specify which data object we use in the `select()` function since\n"
"in gets that from the previous pipe. **Fun Fact**: You may have encountered\n"
"pipes before in the shell. In R, a pipe symbol is `%>%` while in the shell it is\n"
"`|` but the concept is the same!"
msgstr ""
"Щоб допомогти вам зрозуміти, чому ми написали це таким чином, давайте пройдемося по ньому крок\n"
"за кроком. Спочатку ми викликаємо «gapminder» файл даних і передаємо його, використовуючи\n"
"символ конвеєри `%>%`, до наступного кроку, який є функцією `select()`. У цьому\n"
"випадку ми не вказуємо, який об'єкт даних ми використовуємо в функції `select()` оскільки\n"
"він отримує дані з попереднього конвеєру. **Веселий факт**: Ви можливо стикалися з \n"
"конвеєрами перед цим у терміналі. В R, символ конвеєра це`%>%` в той час як в терміналі це\n"
"`|`, але концепція така ж!"

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:141
msgid "## Using `filter()`"
msgstr "## Використання `filter()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:143
msgid ""
"If we now wanted to move forward with the above, but only with European\n"
"countries, we can combine `select` and `filter`"
msgstr ""
"Якби ми зараз хотіли рухатися вперед з вищенаведеними, але тільки з країнами Європи\n"
"ми можемо поєднати `select` і `filter`"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:147
msgid ""
"~~~\n"
"year_country_gdp_euro <- gapminder %>%\n"
"  filter(continent == \"Europe\") %>%\n"
"  select(year, country, gdpPercap)\n"
"~~~"
msgstr ""
"~~~\n"
"year_country_gdp_euro <- gapminder %>%\n"
"  filter(continent == \"Europe\") %>%\n"
"  select(year, country, gdpPercap)\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:155
msgid ""
">\n"
"> Write a single command (which can span multiple lines and includes pipes) that\n"
"> will produce a dataframe that has the African values for `lifeExp`, `country`\n"
"> and `year`, but not for other Continents.  How many rows does your dataframe\n"
"> have and why?\n"
">\n"
"> > ## Solution to Challenge 1\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >year_country_lifeExp_Africa <- gapminder %>%\n"
"> >                            filter(continent==\"Africa\") %>%\n"
"> >                            select(year,country,lifeExp)\n"
"> >~~~\n"
"> >{: .language-r}"
msgstr ""
">\n"
"> Напишіть одну команду (яка може охоплювати кілька рядків і включає конвеєри), що\n"
"> буде виробляти таблицю даних, яка має африканські цінності для `lifeExp`, `country`\n"
"> і`year`, але не для інших континентів.  Скільки рядків у вашому файлі даних\n"
"> і чому?\n"
">\n"
"> > ## Розв'янна до завдання 1 > >\n"
"> >\n"
"> >~~~\n"
"> >year_country_lifeExp_Africa <- gapminder %>%\n"
"> >                            filter(continent==\"Africa\") %>%\n"
"> >                            select(year,country,lifeExp)\n"
"> >~~~\n"
"> >{: .language-r}"

#: r-intro-geospatial/_episodes/06-dplyr.md:173
msgid ""
"As with last time, first we pass the gapminder dataframe to the `filter()`\n"
"function, then we pass the filtered version of the gapminder data frame to the\n"
"`select()` function. **Note:** The order of operations is very important in this\n"
"case. If we used 'select' first, filter would not be able to find the variable\n"
"continent since we would have removed it in the previous step."
msgstr ""
"Як і минулого разу, спочатку ми передаємо дані gapminder до функції `filter()`, \n"
"потім ми передаємо відфільтровану версію даних gapminder в \n"
"функцію `select()`. **Примітка:** Порядок операцій дуже важливий в цьому\n"
"випадку. Якщо ми спочатку використаємо 'select', фільтер не зможе знайти змінну\n"
"материка, оскільки ми прибрали його на попередньому кроці. "

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:179
msgid "## Using `group_by()` and `summarize()`"
msgstr "## Використання `group_by()` і `summarize()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:181
msgid ""
"Now, we were supposed to be reducing the error prone repetitiveness of what can\n"
"be done with base R, but up to now we haven't done that since we would have to\n"
"repeat the above for each continent. Instead of `filter()`, which will only pass\n"
"observations that meet your criteria (in the above: `continent==\"Europe\"`), we\n"
"can use `group_by()`, which will essentially use every unique criteria that you\n"
"could have used in filter."
msgstr ""
"Тепер, ми повинні були зменшити похибку повторюваності того, що зможе \n"
"бути зроблено з базою R, але до цих пір ми не зробили цього, так як ми повинні були б\n"
"повторювати вищевказане для кожного континенту. Замість `filter()`, який тільки пройде\n"
"спостереження, які відповідають вашим критеріям (in the above: `continent==\"Europe\"`), ми\n"
"можемо використовувати `group_by()`, який буде по суті використовувати всі унікальні критерії, які ви \n"
"могли використати у фільтрі."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:209
msgid ""
"~~~\n"
"gapminder %>% group_by(continent) %>% str()\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>% group_by(continent) %>% str()\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:216
msgid ""
"~~~\n"
"tibble [1,704 × 6] (S3: grouped_df/tbl_df/tbl/data.frame)\n"
" $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num [1:1704] 8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n"
" - attr(*, \"groups\")= tibble [5 × 2] (S3: tbl_df/tbl/data.frame)\n"
"  ..$ continent: chr [1:5] \"Africa\" \"Americas\" \"Asia\" \"Europe\" ...\n"
"  ..$ .rows    : list<int> [1:5] \n"
"  .. ..$ : int [1:624] 25 26 27 28 29 30 31 32 33 34 ...\n"
"  .. ..$ : int [1:300] 49 50 51 52 53 54 55 56 57 58 ...\n"
"  .. ..$ : int [1:396] 1 2 3 4 5 6 7 8 9 10 ...\n"
"  .. ..$ : int [1:360] 13 14 15 16 17 18 19 20 21 22 ...\n"
"  .. ..$ : int [1:24] 61 62 63 64 65 66 67 68 69 70 ...\n"
"  .. ..@ ptype: int(0) \n"
"  ..- attr(*, \".drop\")= logi TRUE\n"
"~~~"
msgstr ""
"~~~\n"
"tibble [1,704 × 6] (S3: grouped_df/tbl_df/tbl/data.frame)\n"
" $ country  : chr [1:1704] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n"
" $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n"
" $ pop      : num [1:1704] 8425333 9240934 10267083 11537966 13079460 ...\n"
" $ continent: chr [1:1704] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n"
" $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n"
" $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n"
" - attr(*, \"groups\")= tibble [5 × 2] (S3: tbl_df/tbl/data.frame)\n"
"  ..$ continent: chr [1:5] \"Africa\" \"Americas\" \"Asia\" \"Europe\" ...\n"
"  ..$ .rows    : list<int> [1:5] \n"
"  .. ..$ : int [1:624] 25 26 27 28 29 30 31 32 33 34 ...\n"
"  .. ..$ : int [1:300] 49 50 51 52 53 54 55 56 57 58 ...\n"
"  .. ..$ : int [1:396] 1 2 3 4 5 6 7 8 9 10 ...\n"
"  .. ..$ : int [1:360] 13 14 15 16 17 18 19 20 21 22 ...\n"
"  .. ..$ : int [1:24] 61 62 63 64 65 66 67 68 69 70 ...\n"
"  .. ..@ ptype: int(0) \n"
"  ..- attr(*, \".drop\")= logi TRUE\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:237
msgid ""
"You will notice that the structure of the dataframe where we used `group_by()`\n"
"(`grouped_df`) is not the same as the original `gapminder` (`data.frame`). A\n"
"`grouped_df` can be thought of as a `list` where each item in the `list`is a\n"
"`data.frame` which contains only the rows that correspond to the a particular\n"
"value `continent` (at least in the example above)."
msgstr ""
"Ви помітите, що структура dataframe, де ми використовували `group_by()`\n"
"(`grouped_df`) не збігається з оригінальним `gapminder` (`data.frame`). \n"
"`grouped_df` можна розглядати як `list`, де кожен елемент у `list` є\n"
"`data.frame` який містить лише рядки, що відповідають певному\n"
"значенню 'континент' (принаймні, у наведеному вище прикладі)."

#: r-intro-geospatial/_episodes/06-dplyr.md:243
msgid "![](../fig/13-dplyr-fig2.png)"
msgstr "![](../fig/13-dplyr-fig2.png)"

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:245
msgid "## Using `summarize()`"
msgstr "## Використання `summarize()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:247
msgid ""
"The above was a bit on the uneventful side but `group_by()` is much more\n"
"exciting in conjunction with `summarize()`. This will allow us to create new\n"
"variable(s) by using functions that repeat for each of the continent-specific\n"
"data frames. That is to say, using the `group_by()` function, we split our\n"
"original dataframe into multiple pieces, then we can run functions\n"
"(e.g. `mean()` or `sd()`) within `summarize()`."
msgstr ""
"Вище було трохи на нерівномірній стороні, але `group_by()` набагато більше\n"
"захоплююче у поєднанні з `summarize()`. Це дозволить нам створювати нові\n"
"змінні за допомогою функцій, які повторюються для кожного конкретного континенту\n"
"файлу даних. Тобто, використовуючи функцію `group_by()`, ми розбиваємо нашу\n"
"оригінальну таблицю даних на кілька частин, потім ми можемо запустити функції\n"
"(e.g. `mean()` або`sd()`) всередині `summarize()`."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:255
msgid ""
"~~~\n"
"gdp_bycontinents <- gapminder %>%\n"
"  group_by(continent) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_bycontinents <- gapminder %>%\n"
"  group_by(continent) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:264
#: r-intro-geospatial/_episodes/06-dplyr.md:464
#: r-intro-geospatial/_episodes/06-dplyr.md:499
msgid ""
"~~~\n"
"`summarise()` ungrouping output (override with `.groups` argument)\n"
"~~~"
msgstr ""
"~~~\n"
"`summarise()` ungrouping output (override with `.groups` argument)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:271
msgid ""
"~~~\n"
"gdp_bycontinents\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_bycontinents\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:278
msgid ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent mean_gdpPercap\n"
"  <chr>              <dbl>\n"
"1 Africa             2194.\n"
"2 Americas           7136.\n"
"3 Asia               7902.\n"
"4 Europe            14469.\n"
"5 Oceania           18622.\n"
"~~~"
msgstr ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent mean_gdpPercap\n"
"  <chr>              <dbl>\n"
"1 Africa             2194.\n"
"2 Americas           7136.\n"
"3 Asia               7902.\n"
"4 Europe            14469.\n"
"5 Oceania           18622.\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:290
msgid "![](../fig/13-dplyr-fig3.png)"
msgstr "![](../fig/13-dplyr-fig3.png)"

#: r-intro-geospatial/_episodes/06-dplyr.md:292
msgid ""
"That allowed us to calculate the mean gdpPercap for each continent, but it gets\n"
"even better."
msgstr ""
"Це дозволило нам розрахувати середній показник ВВП для кожного континенту, але він стає \n"
"ще краще."

#: r-intro-geospatial/_episodes/06-dplyr.md:296
msgid ""
">\n"
">\n"
"> Calculate the average life expectancy per country. Which has the longest average life\n"
"> expectancy and which has the shortest average life expectancy?\n"
">\n"
"> > ## Solution to Challenge 2\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > lifeExp_bycountry <- gapminder %>%\n"
"> >    group_by(country) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >`summarise()` ungrouping output (override with `.groups` argument)\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > lifeExp_bycountry %>%\n"
"> >    filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 2 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <chr>               <dbl>\n"
"> >1 Iceland              76.5\n"
"> >2 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> > Another way to do this is to use the `dplyr` function `arrange()`, which\n"
"> > arranges the rows in a data frame according to the order of one or more\n"
"> > variables from the data frame.  It has similar syntax to other functions \n"
"> > from the `dplyr` package. You can use `desc()` inside `arrange()` to sort in\n"
"> > descending order.\n"
"> > \n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(mean_lifeExp) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <chr>               <dbl>\n"
"> >1 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(desc(mean_lifeExp)) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country mean_lifeExp\n"
"> >  <chr>          <dbl>\n"
"> >1 Iceland         76.5\n"
"> >~~~\n"
"> >{: .output}"
msgstr ""
">\n"
">\n"
"> Розрахуйте середню тривалість життя на країну.  Яка має найдовшу середню триваліть життя \n"
"> і яка має найкоротшу середню триваліть життя?\n"
">\n"
"> > ## Розв'язання до завдання 2 \n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > lifeExp_bycountry <- gapminder %>%\n"
"> >    group_by(country) %>%\n"
"> >    summarize(mean_lifeExp=mean(lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >`summarise()` ungrouping output (override with `.groups` argument)\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> > lifeExp_bycountry %>%\n"
"> >    filter(mean_lifeExp == min(mean_lifeExp) | mean_lifeExp == max(mean_lifeExp))\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 2 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <chr>               <dbl>\n"
"> >1 Iceland              76.5\n"
"> >2 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> > Інший спосіб зробити це - використовувати функцію `dplyr` - `arrange()`, яка\n"
"> > розташовує рядки в файлі даних відповідно до порядку одного або декількох\n"
"> > змінних з файлу даних. Вона має подібний синтаксис до інших функцій\n"
"> > з пакету `dplyr`. Ви можете використовувати `desc()` всередині`arrange()` для сортування\n"
"> > в порядку спададння.\n"
"> > \n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(mean_lifeExp) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country      mean_lifeExp\n"
"> >  <chr>               <dbl>\n"
"> >1 Sierra Leone         36.8\n"
"> >~~~\n"
"> >{: .output}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> >lifeExp_bycountry %>%\n"
"> >    arrange(desc(mean_lifeExp)) %>%\n"
"> >    head(1)\n"
"> >~~~\n"
"> >{: .language-r}\n"
"> >\n"
"> >\n"
"> >\n"
"> >~~~\n"
"> ># A tibble: 1 x 2\n"
"> >  country mean_lifeExp\n"
"> >  <chr>          <dbl>\n"
"> >1 Iceland         76.5\n"
"> >~~~\n"
"> >{: .output}"

#: r-intro-geospatial/_episodes/06-dplyr.md:382
msgid ""
"The function `group_by()` allows us to group by multiple variables. Let's "
"group by `year` and `continent`."
msgstr ""
"Функція «group _ by ()» дозволяє групувати по множині змінних. Давайте "
"згрупуємо по змінних «рік» і «континент»."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:386
msgid ""
"~~~\n"
"gdp_bycontinents_byyear <- gapminder %>%\n"
"  group_by(continent, year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_bycontinents_byyear <- gapminder %>%\n"
"  group_by(continent, year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:395
#: r-intro-geospatial/_episodes/06-dplyr.md:415
#: r-intro-geospatial/_episodes/06-dplyr.md:538
msgid ""
"~~~\n"
"`summarise()` regrouping output by 'continent' (override with `.groups` argument)\n"
"~~~"
msgstr ""
"~~~\n"
"`summarise()` regrouping output by 'continent' (override with `.groups` argument)\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:400
msgid ""
"That is already quite powerful, but it gets even better! You're not limited "
"to defining 1 new variable in `summarize()`."
msgstr ""
"Це вже досить потужно, але стає ще краще! Ви не обмежуєтеся визначенням 1 "
"нової змінної в `summarize()`."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:403
msgid ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"  group_by(continent,year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap),\n"
"            sd_gdpPercap = sd(gdpPercap),\n"
"            mean_pop = mean(pop),\n"
"            sd_pop = sd(pop))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"  group_by(continent,year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap),\n"
"            sd_gdpPercap = sd(gdpPercap),\n"
"            mean_pop = mean(pop),\n"
"            sd_pop = sd(pop))\n"
"~~~"

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:420
msgid "## `count()` and `n()`"
msgstr "## `count()` і `n()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:422
msgid ""
"A very common operation is to count the number of observations for each group.\n"
"The `dplyr` package comes with two related functions that help with this."
msgstr ""
"Дуже поширеною операцією є підрахунок кількості спостережень для кожної групи.\n"
"Пакет «dplyr» поставляється з двома пов'язаними функціями, які допомагають з цим."

#: r-intro-geospatial/_episodes/06-dplyr.md:425
msgid ""
"For instance, if we wanted to check the number of countries included in the\n"
"dataset for the year 2002, we can use the `count()` function. It takes the name\n"
"of one or more columns that contain the groups we are interested in, and we can\n"
"optionally sort the results in descending order by adding `sort=TRUE`:"
msgstr ""
"Наприклад, якщо ми хочемо перевірити кількість країн, включених\n"
"до набору даних за 2002 рік, ми можемо використовувати функцію `count()`. Він приймає назву\n"
"одного або декількох стовпців, які містять групи, які нас цікавлять, і ми можемо\n"
"відсортувати результат в порядку спадання `sort=TRUE`:"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:431
msgid ""
"~~~\n"
"gapminder %>%\n"
"    filter(year == 2002) %>%\n"
"    count(continent, sort = TRUE)\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    filter(year == 2002) %>%\n"
"    count(continent, sort = TRUE)\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:440
msgid ""
"~~~\n"
"  continent  n\n"
"1    Africa 52\n"
"2      Asia 33\n"
"3    Europe 30\n"
"4  Americas 25\n"
"5   Oceania  2\n"
"~~~"
msgstr ""
"~~~\n"
"  continent  n\n"
"1    Africa 52\n"
"2      Asia 33\n"
"3    Europe 30\n"
"4  Americas 25\n"
"5   Oceania  2\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:450
msgid ""
"If we need to use the number of observations in calculations, the `n()` function\n"
"is useful. For instance, if we wanted to get the standard error of the life\n"
"expectancy per continent:"
msgstr ""
"Якщо нам потрібно використовувати кількість спостережень у розрахунках, функція `n()` \n"
"дуже корисна. Наприклад, якщо ми хочемо отримати стандартну помилку \n"
"тривалості життя на континенті:"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:455
msgid ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:471
msgid ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent se_le\n"
"  <chr>     <dbl>\n"
"1 Africa    0.366\n"
"2 Americas  0.540\n"
"3 Asia      0.596\n"
"4 Europe    0.286\n"
"5 Oceania   0.775\n"
"~~~"
msgstr ""
"~~~\n"
"# A tibble: 5 x 2\n"
"  continent se_le\n"
"  <chr>     <dbl>\n"
"1 Africa    0.366\n"
"2 Americas  0.540\n"
"3 Asia      0.596\n"
"4 Europe    0.286\n"
"5 Oceania   0.775\n"
"~~~"

#: r-intro-geospatial/_episodes/06-dplyr.md:483
msgid ""
"You can also chain together several summary operations; in this case "
"calculating the `minimum`, `maximum`, `mean` and `se` of each continent's "
"per-country life-expectancy:"
msgstr ""
"Ви також можете об'єднати кілька зведених операцій; в цьому випадку "
"обчислюючи `minimum`, `maximum`, `mean` і `se` тривалості життя кожного "
"континенту в кожній країні:"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:486
msgid ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(\n"
"      mean_le = mean(lifeExp),\n"
"      min_le = min(lifeExp),\n"
"      max_le = max(lifeExp),\n"
"      se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"
msgstr ""
"~~~\n"
"gapminder %>%\n"
"    group_by(continent) %>%\n"
"    summarize(\n"
"      mean_le = mean(lifeExp),\n"
"      min_le = min(lifeExp),\n"
"      max_le = max(lifeExp),\n"
"      se_le = sd(lifeExp)/sqrt(n()))\n"
"~~~"

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:506
msgid ""
"~~~\n"
"# A tibble: 5 x 5\n"
"  continent mean_le min_le max_le se_le\n"
"  <chr>       <dbl>  <dbl>  <dbl> <dbl>\n"
"1 Africa       48.9   23.6   76.4 0.366\n"
"2 Americas     64.7   37.6   80.7 0.540\n"
"3 Asia         60.1   28.8   82.6 0.596\n"
"4 Europe       71.9   43.6   81.8 0.286\n"
"5 Oceania      74.3   69.1   81.2 0.775\n"
"~~~"
msgstr ""
"~~~\n"
"# A tibble: 5 x 5\n"
"  continent mean_le min_le max_le se_le\n"
"  <chr>       <dbl>  <dbl>  <dbl> <dbl>\n"
"1 Africa       48.9   23.6   76.4 0.366\n"
"2 Americas     64.7   37.6   80.7 0.540\n"
"3 Asia         60.1   28.8   82.6 0.596\n"
"4 Europe       71.9   43.6   81.8 0.286\n"
"5 Oceania      74.3   69.1   81.2 0.775\n"
"~~~"

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:518
msgid "## Using `mutate()`"
msgstr "## Використання `mutate()`"

#: r-intro-geospatial/_episodes/06-dplyr.md:520
msgid ""
"We can also create new variables prior to (or even after) summarizing "
"information using `mutate()`."
msgstr ""
"Ми також можемо створювати нові змінні до (або навіть після) узагальнення "
"інформації, використовуючи `mutate()`."

# code block
#: r-intro-geospatial/_episodes/06-dplyr.md:523
msgid ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"  mutate(gdp_billion = gdpPercap*pop/10^9) %>%\n"
"  group_by(continent, year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap),\n"
"            sd_gdpPercap = sd(gdpPercap),\n"
"            mean_pop = mean(pop),\n"
"            sd_pop = sd(pop),\n"
"            mean_gdp_billion = mean(gdp_billion),\n"
"            sd_gdp_billion = sd(gdp_billion))\n"
"~~~"
msgstr ""
"~~~\n"
"gdp_pop_bycontinents_byyear <- gapminder %>%\n"
"  mutate(gdp_billion = gdpPercap*pop/10^9) %>%\n"
"  group_by(continent, year) %>%\n"
"  summarize(mean_gdpPercap = mean(gdpPercap),\n"
"            sd_gdpPercap = sd(gdpPercap),\n"
"            mean_pop = mean(pop),\n"
"            sd_pop = sd(pop),\n"
"            mean_gdp_billion = mean(gdp_billion),\n"
"            sd_gdp_billion = sd(gdp_billion))\n"
"~~~"

# header
#: r-intro-geospatial/_episodes/06-dplyr.md:543
msgid "## Other great resources"
msgstr "## Інші хороші ресурси"

# unordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:545
msgid "* [R for Data Science](http://r4ds.had.co.nz/)"
msgstr "* [R for Data Science](http://r4ds.had.co.nz/)"

# unordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:546
msgid ""
"* [Data Wrangling Cheat sheet](https://www.rstudio.com/wp-"
"content/uploads/2015/02/data-wrangling-cheatsheet.pdf)"
msgstr ""
"* [Data Wrangling Cheat sheet](https://www.rstudio.com/wp-"
"content/uploads/2015/02/data-wrangling-cheatsheet.pdf)"

# unordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:547
msgid ""
"* [Introduction to "
"dplyr](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)"
msgstr ""
"* [Introduction to "
"dplyr](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)"

# unordered list
#: r-intro-geospatial/_episodes/06-dplyr.md:548
msgid ""
"* [Data wrangling with R and "
"RStudio](https://www.rstudio.com/resources/webinars/data-wrangling-with-r-"
"and-rstudio/)"
msgstr ""
"* [Data wrangling with R and "
"RStudio](https://www.rstudio.com/resources/webinars/data-wrangling-with-r-"
"and-rstudio/)"
