# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 19:32:08+0000\n"
"PO-Revision-Date: 2023-02-12 19:38+0000\n"
"Last-Translator: Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: shell-novice/_episodes/06-script.md:1
msgid ""
"---\n"
"title: \"Shell Scripts\"\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"How can I save and re-use commands?\"\n"
"objectives:\n"
"- \"Write a shell script that runs a command or series of commands for a fixed set of files.\"\n"
"- \"Run a shell script from the command line.\"\n"
"- \"Write a shell script that operates on a set of files defined by the user on the command line.\"\n"
"- \"Create pipelines that include shell scripts you, and others, have written.\"\n"
"keypoints:\n"
"- \"Save commands in files (usually called shell scripts) for re-use.\"\n"
"- \"`bash [filename]` runs the commands saved in a file.\"\n"
"- \"`$@` refers to all of a shell script's command-line arguments.\"\n"
"- \"`$1`, `$2`, etc., refer to the first command-line argument, the second command-line argument, etc.\"\n"
"- \"Place variables in quotes if the values might have spaces in them.\"\n"
"- \"Letting users decide what files to process is more flexible and more consistent with built-in Unix commands.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Скрипти терміналу\"\n"
"teaching: 30\n"
"exercises: 15\n"
"questions:\n"
"- \"Як я можу зберігати і повторно використовувати команди?\"\n"
"objectives:\n"
"- \"Написати сценарій терміналу, який виконує команду або серію команд для фіксованого набору файлів.\"\n"
"- \"Запустити сценарій терміналу з командного рядка.\"\n"
"- \"Написати сценарій терміналу, який оперує набором файлів, заданих користувачем у командному рядку.\"\n"
"- \"Створити конвеєри, які включають написані вами та іншими користувачами скрипти терміналу.\"\n"
"keypoints:\n"
"- \"Зберігайте команди у файлах (зазвичай їх називають скриптами терміналу) для повторного використання.\"\n"
"- \"`bash [ім'я файлу]` виконує команди, збережені у відповідному файлі.\"\n"
"- \"`$@` посилається на всі аргументи командного рядка скрипта терміналу.\"\n"
"- \"`$1`, `$2`, і т.д., посилаються на перший аргумент командного рядка, другий аргумент командного рядка і т.д.\"\n"
"- \"Беріть змінні в лапки, якщо значення можуть містити пробіли.\"\n"
"- \"Дозвіл користувачам вирішувати, які файли обробляти, є більш гнучким і більш узгодженим з вбудованими командами Unix.\"\n"
"---"

#: shell-novice/_episodes/06-script.md:21
msgid ""
"We are finally ready to see what makes the shell such a powerful programming environment.\n"
"We are going to take the commands we repeat frequently and save them in files\n"
"so that we can re-run all those operations again later by typing a single command.\n"
"For historical reasons,\n"
"a bunch of commands saved in a file is usually called a **shell script**,\n"
"but make no mistake:\n"
"these are actually small programs."
msgstr ""
"Нарешті ми готові побачити, що робить термінал таким потужним середовищем програмування.\n"
"Ми збираємося взяти команди, які ми часто повторюємо, і зберегти їх у файлах,\n"
"щоб згодом ми могли повторно виконати всі ці операції, набравши одну команду.\n"
"З історичних причин\n"
"набір команд, збережених у файлі, зазвичай називають **скриптом терміналу**,\n"
"але не помиліться:\n"
"насправді це невеликі програми."

#: shell-novice/_episodes/06-script.md:29
msgid ""
"Not only will writing shell scripts make your work faster ---\n"
"you won't have to retype the same commands over and over again ---\n"
"it will also make it more accurate (fewer chances for typos) and more reproducible.\n"
"If you come back to your work later (or if someone else finds your work and wants to build on it)\n"
"you will be able to reproduce the same results simply by running your script,\n"
"rather than having to remember or retype a long list of commands."
msgstr ""
"Написання командних скриптів не тільки прискорить вашу роботу ---\n"
"вам не доведеться передруковувати ті самі команди знову і знову ---\n"
"це також зробить її більш точною (менше шансів на друкарські помилки) і більш відтворюваною.\n"
"Якщо ви повернетеся до своєї роботи пізніше (або якщо хтось інший знайде вашу роботу і захоче її використати)\n"
"ви зможете відтворити ті самі результати, просто запустивши ваш скрипт,\n"
"замість того, щоб запам'ятовувати або передруковувати довгий список команд."

#: shell-novice/_episodes/06-script.md:36
msgid ""
"Let's start by going back to `proteins/` and creating a new file, `middle.sh` which will\n"
"become our shell script:"
msgstr ""
"Давайте почнемо з того, що повернемося до каталогу `proteins/` і створимо новий файл `middle.sh`, який\n"
"стане нашим скриптом терміналу:"

# code block
#: shell-novice/_episodes/06-script.md:39
msgid ""
"~~~\n"
"$ cd proteins\n"
"$ nano middle.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd proteins\n"
"$ nano middle.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:45
msgid ""
"The command `nano middle.sh` opens the file `middle.sh` within the text editor 'nano'\n"
"(which runs within the shell).\n"
"If the file does not exist, it will be created.\n"
"We can use the text editor to directly edit the file -- we'll simply insert the following line:"
msgstr ""
"Команда `nano middle.sh` відкриває файл `middle.sh` у текстовому редакторі nano\n"
"(який запускається у терміналі).\n"
"Якщо файл не існує, його буде створено.\n"
"Ми можемо скористатися текстовим редактором для безпосереднього редагування файлу - просто вставте наступний рядок:"

# code block
#: shell-novice/_episodes/06-script.md:50
msgid ""
"~~~\n"
"head -n 15 octane.pdb | tail -n 5\n"
"~~~"
msgstr ""
"~~~\n"
"head -n 15 octane.pdb | tail -n 5\n"
"~~~"

# SC/DC Template label
#: shell-novice/_episodes/06-script.md:53
#: shell-novice/_episodes/06-script.md:114
#: shell-novice/_episodes/06-script.md:175
#: shell-novice/_episodes/06-script.md:224
#: shell-novice/_episodes/06-script.md:269
#: shell-novice/_episodes/06-script.md:359
msgid "{: .source}"
msgstr "{: .source}"

#: shell-novice/_episodes/06-script.md:55
msgid ""
"This is a variation on the pipe we constructed earlier:\n"
"it selects lines 11-15 of the file `octane.pdb`.\n"
"Remember, we are *not* running it as a command just yet:\n"
"we are putting the commands in a file."
msgstr ""
"Це варіація на тему каналу, яку ми побудували раніше:\n"
"вона вибирає рядки 11-15 файлу `octane.pdb`.\n"
"Пам'ятайте, що ми поки що *не* запускаємо її як команду:\n"
"ми записуємо команди у файл."

#: shell-novice/_episodes/06-script.md:60
msgid ""
"Then we save the file (`Ctrl-O` in nano),\n"
" and exit the text editor (`Ctrl-X` in nano).\n"
"Check that the directory `proteins` now contains a file called `middle.sh`."
msgstr ""
"Потім ми зберігаємо файл (`Ctrl-O` в nano),\n"
"і виходимо з текстового редактора (`Ctrl-X` у nano).\n"
"Переконайтеся, що в каталозі `proteins` тепер міститься файл з назвою `middle.sh`."

#: shell-novice/_episodes/06-script.md:64
msgid ""
"Once we have saved the file,\n"
"we can ask the shell to execute the commands it contains.\n"
"Our shell is called `bash`, so we run the following command:"
msgstr ""
"Після того, як ми зберегли файл,\n"
"ми можемо попросити термінал виконати команди, які у ньому містяться.\n"
"Наша термінал називається `bash`, тому ми виконаємо наступну команду:"

# code block
#: shell-novice/_episodes/06-script.md:68
msgid ""
"~~~\n"
"$ bash middle.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:73
#: shell-novice/_episodes/06-script.md:125
msgid ""
"~~~\n"
"ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00\n"
"ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00\n"
"ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00\n"
"ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00\n"
"ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00\n"
"~~~"
msgstr ""
"~~~\n"
"ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00\n"
"ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00\n"
"ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00\n"
"ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00\n"
"ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00\n"
"~~~"

#: shell-novice/_episodes/06-script.md:82
msgid ""
"Sure enough,\n"
"our script's output is exactly what we would get if we ran that pipeline directly."
msgstr ""
"Звісно,\n"
"вихідні дані нашого скрипта є саме тими, які ми отримали б, якби запустили цей конвеєр напряму."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:85
msgid "> ## Text vs. Whatever"
msgstr "> ## Текст проти Будь-чого іншого"

#: shell-novice/_episodes/06-script.md:86
msgid ""
">\n"
"> We usually call programs like Microsoft Word or LibreOffice Writer \"text\n"
"> editors\", but we need to be a bit more careful when it comes to\n"
"> programming. By default, Microsoft Word uses `.docx` files to store not\n"
"> only text, but also formatting information about fonts, headings, and so\n"
"> on. This extra information isn't stored as characters and doesn't mean\n"
"> anything to tools like `head`: they expect input files to contain\n"
"> nothing but the letters, digits, and punctuation on a standard computer\n"
"> keyboard. When editing programs, therefore, you must either use a plain\n"
"> text editor, or be careful to save files as plain text."
msgstr ""
">\n"
"> Зазвичай ми називаємо такі програми, як Microsoft Word або LibreOffice Writer, \"текстовими\n"
"> редакторами\", але потрібно бути трохи обережнішими, коли йдеться про\n"
"> програмування. За замовчуванням, Microsoft Word використовує файли `.docx` для зберігання не лише\n"
"> тексту, але й інформації про форматування.\n"
"> лише тексту, але й інформації про форматування: шрифти, заголовки\n"
"> тощо. Ця додаткова інформація не зберігається у вигляді символів і не означає\n"
"> нічого для інструментів типу `head`: вони очікують, що вхідні файли не міститимуть\n"
"> нічого, окрім літер, цифр і розділових знаків зі стандартної комп'ютерної\n"
"> клавіатури. Отже, при редагуванні програм вам слід або користуватися звичайним\n"
"> текстовий редактор, або обережно зберігати файли як звичайний текст."

#: shell-novice/_episodes/06-script.md:98
msgid ""
"What if we want to select lines from an arbitrary file?\n"
"We could edit `middle.sh` each time to change the filename,\n"
"but that would probably take longer than typing the command out again\n"
"in the shell and executing it with a new file name.\n"
"Instead, let's edit `middle.sh` and make it more versatile:"
msgstr ""
"А якщо ми хочемо вибрати рядки з довільного файлу?\n"
"Ми могли б редагувати `middle.sh` кожного разу, щоб змінити назву файлу,\n"
"але це, ймовірно, займе більше часу, ніж набрати команду знову\n"
"у командному рядку і виконати її з новим ім'ям файлу.\n"
"Замість цього давайте відредагуємо `middle.sh` і зробимо його більш універсальним:"

# code block
#: shell-novice/_episodes/06-script.md:104
#: shell-novice/_episodes/06-script.md:167
#: shell-novice/_episodes/06-script.md:214
msgid ""
"~~~\n"
"$ nano middle.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano middle.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:109
msgid ""
"Now, within \"nano\", replace the text `octane.pdb` with the special "
"variable called `$1`:"
msgstr ""
"Тепер всередині \"nano\" замініть текст `octane.pdb` на спеціальну змінну з "
"назвою `$1`:"

# code block
#: shell-novice/_episodes/06-script.md:111
msgid ""
"~~~\n"
"head -n 15 \"$1\" | tail -n 5\n"
"~~~"
msgstr ""
"~~~\n"
"head -n 15 \"$1\" | tail -n 5\n"
"~~~"

#: shell-novice/_episodes/06-script.md:116
msgid ""
"Inside a shell script,\n"
"`$1` means 'the first filename (or other argument) on the command line'.\n"
"We can now run our script like this:"
msgstr ""
"Усередині скрипта терміналу\n"
"`$1` означає 'перше ім'я файлу (або інший аргумент) у командному рядку'.\n"
"Тепер ми можемо запустити наш скрипт таким чином:"

# code block
#: shell-novice/_episodes/06-script.md:120
msgid ""
"~~~\n"
"$ bash middle.sh octane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh octane.pdb\n"
"~~~"

#: shell-novice/_episodes/06-script.md:134
msgid "or on a different file like this:"
msgstr "або передавши ім'я іншого файлу наступним чином:"

# code block
#: shell-novice/_episodes/06-script.md:136
msgid ""
"~~~\n"
"$ bash middle.sh pentane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh pentane.pdb\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:141
#: shell-novice/_episodes/06-script.md:184
msgid ""
"~~~\n"
"ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00\n"
"ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00\n"
"ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00\n"
"ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00\n"
"ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00\n"
"~~~"
msgstr ""
"~~~\n"
"ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00\n"
"ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00\n"
"ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00\n"
"ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00\n"
"ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:150
msgid "> ## Double-Quotes Around Arguments"
msgstr "> ## Подвійні лапки навколо аргументів"

#: shell-novice/_episodes/06-script.md:151
msgid ""
">\n"
"> For the same reason that we put the loop variable inside double-quotes,\n"
"> in case the filename happens to contain any spaces,\n"
"> we surround `$1` with double-quotes."
msgstr ""
">\n"
"> З тієї ж причини, з якої ми взяли змінну циклу у подвійні лапки,\n"
"> на випадок, якщо ім'я файлу містить пробіли,\n"
"> ми беремо `$1` у подвійні лапки."

#: shell-novice/_episodes/06-script.md:157
msgid ""
"Currently, we need to edit `middle.sh` each time we want to adjust the range of\n"
"lines that is returned.\n"
"Let's fix that by configuring our script to instead use three command-line arguments.\n"
"After the first command-line argument (`$1`), each additional argument that we\n"
"provide will be accessible via the special variables `$1`, `$2`, `$3`,\n"
"which refer to the first, second, third command-line arguments, respectively."
msgstr ""
"Наразі нам потрібно редагувати `middle.sh` кожного разу, коли ми хочемо змінити діапазон\n"
"рядків, які повертаються.\n"
"Давайте виправимо це, налаштувавши наш скрипт на використання трьох аргументів командного рядка.\n"
"Після першого аргументу командного рядка (`$1`), кожен наступний аргумент, який ми\n"
"надаємо, буде доступний через спеціальні змінні `$1`, `$2`, `$3`,\n"
"які посилаються на перший, другий і третій аргументи командного рядка відповідно."

#: shell-novice/_episodes/06-script.md:164
msgid ""
"Knowing this, we can use additional arguments to define the range of lines to\n"
"be passed to `head` and `tail` respectively:"
msgstr ""
"Знаючи це, ми можемо використовувати додаткові аргументи для визначення діапазону рядків, які\n"
"передавати до `head` та `tail` відповідно:"

# code block
#: shell-novice/_episodes/06-script.md:172
msgid ""
"~~~\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"
msgstr ""
"~~~\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"

#: shell-novice/_episodes/06-script.md:177
msgid "We can now run:"
msgstr "Тепер ми можемо запустити:"

# code block
#: shell-novice/_episodes/06-script.md:179
msgid ""
"~~~\n"
"$ bash middle.sh pentane.pdb 15 5\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh pentane.pdb 15 5\n"
"~~~"

#: shell-novice/_episodes/06-script.md:193
msgid ""
"By changing the arguments to our command we can change our script's\n"
"behaviour:"
msgstr ""
"Змінюючи аргументи нашої команди, ми можемо змінювати\n"
"поведінку нашого скрипта:"

# code block
#: shell-novice/_episodes/06-script.md:196
msgid ""
"~~~\n"
"$ bash middle.sh pentane.pdb 20 5\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash middle.sh pentane.pdb 20 5\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:201
msgid ""
"~~~\n"
"ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00\n"
"ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00\n"
"ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00\n"
"ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00\n"
"TER      18              1\n"
"~~~"
msgstr ""
"~~~\n"
"ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00\n"
"ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00\n"
"ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00\n"
"ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00\n"
"TER      18              1\n"
"~~~"

#: shell-novice/_episodes/06-script.md:210
msgid ""
"This works,\n"
"but it may take the next person who reads `middle.sh` a moment to figure out what it does.\n"
"We can improve our script by adding some **comments** at the top:"
msgstr ""
"Це працює,\n"
"але наступній людині, яка прочитає `middle.sh`, може знадобитися деякий час, щоб зрозуміти, що він робить.\n"
"Ми можемо покращити наш скрипт, додавши деякі **коментарі** зверху:"

# code block
#: shell-novice/_episodes/06-script.md:219
msgid ""
"~~~\n"
"# Select lines from the middle of a file.\n"
"# Usage: bash middle.sh filename end_line num_lines\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"
msgstr ""
"~~~\n"
"# Виділення рядків з середини файлу.\n"
"# Використання: bash middle.sh filename end_line num_lines\n"
"head -n \"$2\" \"$1\" | tail -n \"$3\"\n"
"~~~"

#: shell-novice/_episodes/06-script.md:226
msgid ""
"A comment starts with a `#` character and runs to the end of the line.\n"
"The computer ignores comments,\n"
"but they're invaluable for helping people (including your future self) understand and use scripts.\n"
"The only caveat is that each time you modify the script,\n"
"you should check that the comment is still accurate:\n"
"an explanation that sends the reader in the wrong direction is worse than none at all."
msgstr ""
"Коментар починається з символу `#` і продовжується до кінця рядка.\n"
"Комп'ютер ігнорує коментарі,\n"
"але вони безцінні, оскільки допомагають людям (у тому числі і вам самим у майбутньому) розуміти і використовувати скрипти.\n"
"Єдине застереження полягає у тому, що кожного разу, коли ви змінюєте скрипт,\n"
"ви повинні перевіряти, що коментар все ще правильний:\n"
"Пояснення, яке спрямовує читача в неправильному напрямку, гірше, ніж його відсутність."

#: shell-novice/_episodes/06-script.md:233
msgid ""
"What if we want to process many files in a single pipeline?\n"
"For example, if we want to sort our `.pdb` files by length, we would type:"
msgstr ""
"Що робити, якщо ми хочемо обробити багато файлів в одному конвеєрі?\n"
"Наприклад, якщо ми хочемо відсортувати наші `.pdb`-файли за довжиною, ми введемо:"

#: shell-novice/_episodes/06-script.md:241
msgid ""
"because `wc -l` lists the number of lines in the files\n"
"(recall that `wc` stands for 'word count', adding the `-l` option means 'count lines' instead)\n"
"and `sort -n` sorts things numerically.\n"
"We could put this in a file,\n"
"but then it would only ever sort a list of `.pdb` files in the current directory.\n"
"If we want to be able to get a sorted list of other kinds of files,\n"
"we need a way to get all those names into the script.\n"
"We can't use `$1`, `$2`, and so on\n"
"because we don't know how many files there are.\n"
"Instead, we use the special variable `$@`,\n"
"which means,\n"
"'All of the command-line arguments to the shell script'.\n"
"We also should put `$@` inside double-quotes\n"
"to handle the case of arguments containing spaces\n"
"(`\"$@\"` is special syntax and is equivalent to `\"$1\"` `\"$2\"` ...)."
msgstr ""
"оскільки `wc -l` виводить кількість рядків у файлах\n"
"(нагадаю, що `wc` означає 'підрахунок слів', додавання опції `-l` означає 'підрахунок рядків')\n"
"і `sort -n` сортує речі числовим способом.\n"
"Ми можемо записати це у файл,\n"
"але тоді він сортуватиме лише список файлів `.pdb` у поточному каталозі.\n"
"Якщо ми хочемо отримати відсортований список інших типів файлів,\n"
"нам потрібен спосіб вставити всі ці імена у скрипт.\n"
"Ми не можемо використовувати `$1`, `$2` і так далі\n"
"тому що ми не знаємо, скільки файлів існує.\n"
"Замість цього ми використовуємо спеціальну змінну `$@`,\n"
"що означає,\n"
"\"Всі аргументи командного рядка для скрипта терміналу\".\n"
"Ми також повинні взяти `$@` у подвійні лапки\n"
"щоб врахувати випадок, коли аргументи містять пробіли\n"
"(`\"$@\"` є спеціальним синтаксисом і він еквівалентний `\"$1\"` `\"$2\"` ...)."

#: shell-novice/_episodes/06-script.md:257
msgid "Here's an example:"
msgstr "Ось приклад:"

# code block
#: shell-novice/_episodes/06-script.md:259
msgid ""
"~~~\n"
"$ nano sorted.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano sorted.sh\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:264
msgid ""
"~~~\n"
"# Sort files by their length.\n"
"# Usage: bash sorted.sh one_or_more_filenames\n"
"wc -l \"$@\" | sort -n\n"
"~~~"
msgstr ""
"~~~\n"
"# Сортує файли за їх розміром.\n"
"# Використання: bash sorted.sh one_or_more_filenames\n"
"wc -l \"$@\" | sort -n\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:271
msgid ""
"~~~\n"
"$ bash sorted.sh *.pdb ../creatures/*.dat\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash sorted.sh *.pdb ../creatures/*.dat\n"
"~~~"

# code block
#: shell-novice/_episodes/06-script.md:276
msgid ""
"~~~\n"
"9 methane.pdb\n"
"12 ethane.pdb\n"
"15 propane.pdb\n"
"20 cubane.pdb\n"
"21 pentane.pdb\n"
"30 octane.pdb\n"
"163 ../creatures/basilisk.dat\n"
"163 ../creatures/minotaur.dat\n"
"163 ../creatures/unicorn.dat\n"
"596 total\n"
"~~~"
msgstr ""
"~~~\n"
"9 methane.pdb\n"
"12 ethane.pdb\n"
"15 propane.pdb\n"
"20 cubane.pdb\n"
"21 pentane.pdb\n"
"30 octane.pdb\n"
"163 ../creatures/basilisk.dat\n"
"163 ../creatures/minotaur.dat\n"
"163 ../creatures/unicorn.dat\n"
"596 total\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:290
msgid "> ## List Unique Species"
msgstr "> ## Перелік унікальних видів"

#: shell-novice/_episodes/06-script.md:291
msgid ""
">\n"
"> Leah has several hundred data files, each of which is formatted like this:\n"
">\n"
"> ~~~\n"
"> 2013-11-05,deer,5\n"
"> 2013-11-05,rabbit,22\n"
"> 2013-11-05,raccoon,7\n"
"> 2013-11-06,rabbit,19\n"
"> 2013-11-06,deer,2\n"
"> 2013-11-06,fox,1\n"
"> 2013-11-07,rabbit,18\n"
"> 2013-11-07,bear,1\n"
"> ~~~"
msgstr ""
">\n"
"> Лія має кілька сотень файлів даних, кожен з яких відформатований наступним чином:\n"
">\n"
"> ~~~\n"
"> 2013-11-05,deer,5\n"
"> 2013-11-05,rabbit,22\n"
"> 2013-11-05,raccoon,7\n"
"> 2013-11-06,rabbit,19\n"
"> 2013-11-06,deer,2\n"
"> 2013-11-06,fox,1\n"
"> 2013-11-07,rabbit,18\n"
"> 2013-11-07,bear,1\n"
"> ~~~"

#: shell-novice/_episodes/06-script.md:305
msgid ""
">\n"
"> An example of this type of file is given in\n"
"> `shell-lesson-data/exercise-data/animal-counts/animals.csv`.\n"
">\n"
"> We can use the command `cut -d , -f 2 animals.csv | sort | uniq` to produce\n"
"> the unique species in `animals.csv`.\n"
"> In order to avoid having to type out this series of commands every time,\n"
"> a scientist may choose to write a shell script instead.\n"
">\n"
"> Write a shell script called `species.sh` that takes any number of\n"
"> filenames as command-line arguments, and uses a variation of the above command\n"
"> to print a list of the unique species appearing in each of those files separately.\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Script to find unique species in csv files where species is the second data field\n"
"> > # This script accepts any number of file names as command line arguments\n"
"> >\n"
"> > # Loop over all files\n"
"> > for file in $@\n"
"> > do\n"
"> >     echo \"Unique species in $file:\"\n"
"> >     # Extract species names\n"
"> >     cut -d , -f 2 $file | sort | uniq\n"
"> > done\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Приклад файлу такого типу наведено у\n"
"> `shell-lesson-data/exercise-data/animal-counts/animals.сcsv`.\n"
">\n"
"> Ми можемо скористатися командою `cut -d , -f 2 animals.csv | sort | uniq`, щоб отримати\n"
"> унікальні види у файлі `animals.csv`.\n"
"> Щоб уникнути необхідності кожного разу вводити цю серію команд,\n"
"> науковець може замість цього написати скрипт командного інтерпретатора.\n"
">\n"
"> Напишіть сценарій командного рядка з назвою `species.sh`, який приймає довільну кількість\n"
"> імен файлів як аргументи командного рядка і використовує варіацію наведеної вище команди\n"
"> для виведення списку унікальних видів, що з'являються у кожному з цих файлів окремо.\n"
">\n"
"> > > ## Розв'язання\n"
"> >\n"
"> > ```\n"
"> > # Скрипт для пошуку унікальних видів у csv-файлах, де вид є другим полем даних\n"
"> > # Цей скрипт приймає будь-яку кількість імен файлів як аргументи командного рядка\n"
"> >\n"
"> > # Перебір всіх файлів\n"
"> > for file in $@\n"
"> > do\n"
"> > echo \"Unique species in $file:\"\n"
"> > # Отримати назви видів\n"
"> > cut -d , -f 2 $file | sort | uniq\n"
"> > done\n"
"> > ```\n"
"> > {: .language-bash}"

#: shell-novice/_episodes/06-script.md:337
msgid ""
"Suppose we have just run a series of commands that did something useful --- for example,\n"
"that created a graph we'd like to use in a paper.\n"
"We'd like to be able to re-create the graph later if we need to,\n"
"so we want to save the commands in a file.\n"
"Instead of typing them in again\n"
"(and potentially getting them wrong)\n"
"we can do this:"
msgstr ""
"Припустимо, ми щойно виконали низку команд, які зробили щось корисне --- наприклад,\n"
"створили графік, який ми хотіли б використати у роботі.\n"
"Ми хотіли б мати можливість відновити графік пізніше, якщо це буде потрібно,\n"
"тому ми хочемо зберегти команди у файлі.\n"
"Замість того, щоб вводити їх знову\n"
"(і, можливо, зробити помилки)\n"
"ми можемо зробити так:"

# code block
#: shell-novice/_episodes/06-script.md:345
msgid ""
"~~~\n"
"$ history | tail -n 5 > redo-figure-3.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ history | tail -n 5 > redo-figure-3.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:350
msgid "The file `redo-figure-3.sh` now contains:"
msgstr "Файл `redo-figure-3.sh` тепер містить наступне:"

# code block
#: shell-novice/_episodes/06-script.md:352
msgid ""
"~~~\n"
"297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt\n"
"298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt\n"
"299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt\n"
"300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png\n"
"301 history | tail -n 5 > redo-figure-3.sh\n"
"~~~"
msgstr ""
"~~~\n"
"297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt\n"
"298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt\n"
"299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt\n"
"300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png\n"
"301 history | tail -n 5 > redo-figure-3.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:361
msgid ""
"After a moment's work in an editor to remove the serial numbers on the commands,\n"
"and to remove the final line where we called the `history` command,\n"
"we have a completely accurate record of how we created that figure."
msgstr ""
"Після невеликої роботи в редакторі з прибирання послідовних номерів на командах\n"
"і видалення останнього рядка, де ми викликали команду `history`,\n"
"ми отримаємо абсолютно точний запис того, як ми створили цю фігуру."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:365
msgid "> ## Why Record Commands in the History Before Running Them?"
msgstr "> ## Навіщо записувати команди в історію перед виконанням?"

#: shell-novice/_episodes/06-script.md:366
msgid ""
">\n"
"> If you run the command:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5 > recent.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the last command in the file is the `history` command itself, i.e.,\n"
"> the shell has added `history` to the command log before actually\n"
"> running it. In fact, the shell *always* adds commands to the log\n"
"> before running them. Why do you think it does this?\n"
">\n"
"> > ## Solution\n"
"> > If a command causes something to crash or hang, it might be useful\n"
"> > to know what that command was, in order to investigate the problem.\n"
"> > Were the command only be recorded after running it, we would not\n"
"> > have a record of the last command run in the event of a crash."
msgstr ""
">\n"
"> Якщо виконати команду:\n"
">\n"
"> ~~~\n"
"> $ history | tail -n 5 > recent.sh\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> останньою командою у файлі є сама команда `history`, тобто,\n"
"> термінал додав `history` до журналу команд перед тим, як фактично\n"
"> її виконав. Насправді, термінал *завжди* додає команди до журналу\n"
"> перед їх виконанням. Як ви гадаєте, чому він це робить?\n"
">\n"
"> > ## Розв'язання\n"
"> > Якщо якась команда спричинила збій або зависання, може бути корисно\n"
"> > знати, що це була за команда, щоб дослідити проблему.\n"
"> > Якби команда записувалася лише після запуску, ми б\n"
"> > не мали запису останньої запущеної команди у випадку аварійного завершення роботи."

#: shell-novice/_episodes/06-script.md:387
msgid ""
"In practice, most people develop shell scripts by running commands at the shell prompt a few times\n"
"to make sure they're doing the right thing,\n"
"then saving them in a file for re-use.\n"
"This style of work allows people to recycle\n"
"what they discover about their data and their workflow with one call to `history`\n"
"and a bit of editing to clean up the output\n"
"and save it as a shell script."
msgstr ""
"На практиці більшість людей розробляють скрипти терміналу, запускаючи команди в командному рядку кілька разів,\n"
"щоб переконатися, що вони роблять все правильно,\n"
"а потім зберігають їх у файлі для повторного використання.\n"
"Такий стиль роботи дозволяє людям переробляти\n"
"те, що вони дізнаються про свої дані і робочий процес, одним викликом команди `history`\n"
"і невеликим редагуванням, щоб очистити результат\n"
"і зберегти його як скрипт терміналу."

# header
#: shell-novice/_episodes/06-script.md:395
msgid "## Nelle's Pipeline: Creating a Script"
msgstr "## Конвеєр Неллі: Створення скрипту"

#: shell-novice/_episodes/06-script.md:398
msgid ""
"Nelle's supervisor insisted that all her analytics must be reproducible.\n"
"The easiest way to capture all the steps is in a script."
msgstr ""
"Керівник Неллі наполягав на тому, що вся її аналітика має бути відтворюваною.\n"
"Найпростіший спосіб зафіксувати всі кроки - написати сценарій."

#: shell-novice/_episodes/06-script.md:401
msgid ""
"First we return to Nelle's project directory:\n"
"```\n"
"$ cd ../../north-pacific-gyre/\n"
"```\n"
"{: .language-bash}"
msgstr ""
"Спочатку повернемося до каталогу проектів Неллі:\n"
"```\n"
"$ cd ../../north-pacific-gyre/\n"
"```\n"
"{: .language-bash}"

#: shell-novice/_episodes/06-script.md:407
msgid "She creates a file using `nano` ..."
msgstr "Вона створює файл з використанням `nano` ..."

# code block
#: shell-novice/_episodes/06-script.md:409
msgid ""
"~~~\n"
"$ nano do-stats.sh\n"
"~~~"
msgstr ""
"~~~\n"
"$ nano do-stats.sh\n"
"~~~"

#: shell-novice/_episodes/06-script.md:414
msgid "...which contains the following:"
msgstr "...який містить наступне:"

# code block
#: shell-novice/_episodes/06-script.md:416
msgid ""
"~~~\n"
"# Calculate stats for data files.\n"
"for datafile in \"$@\"\n"
"do\n"
"    echo $datafile\n"
"    bash goostats.sh $datafile stats-$datafile\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"# Розрахунок статистики для файлів даних.\n"
"for datafile in \"$@\"\n"
"do\n"
"    echo $datafile\n"
"    bash goostats.sh $datafile stats-$datafile\n"
"done\n"
"~~~"

#: shell-novice/_episodes/06-script.md:426
msgid ""
"She saves this in a file called `do-stats.sh`\n"
"so that she can now re-do the first stage of her analysis by typing:"
msgstr ""
"Вона зберігає його у файлі з назвою `do-stats.sh`.\n"
"щоб тепер вона могла повторити перший етап аналізу шляхом введення:"

# code block
#: shell-novice/_episodes/06-script.md:429
msgid ""
"~~~\n"
"$ bash do-stats.sh NENE*A.txt NENE*B.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash do-stats.sh NENE*A.txt NENE*B.txt\n"
"~~~"

#: shell-novice/_episodes/06-script.md:434
msgid "She can also do this:"
msgstr "Вона також може зробити наступне:"

# code block
#: shell-novice/_episodes/06-script.md:436
msgid ""
"~~~\n"
"$ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l\n"
"~~~"
msgstr ""
"~~~\n"
"$ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l\n"
"~~~"

#: shell-novice/_episodes/06-script.md:441
msgid ""
"so that the output is just the number of files processed\n"
"rather than the names of the files that were processed."
msgstr ""
"щоб вивести лише кількість оброблених файлів\n"
"а не імена файлів, які було оброблено."

#: shell-novice/_episodes/06-script.md:444
msgid ""
"One thing to note about Nelle's script is that\n"
"it lets the person running it decide what files to process.\n"
"She could have written it as:"
msgstr ""
"У скрипті Неллі є одна особливість, яку слід відзначити,\n"
"він дозволяє користувачеві, який його запускає, вирішувати, які файли обробляти.\n"
"Вона могла б написати його так:"

# code block
#: shell-novice/_episodes/06-script.md:448
msgid ""
"~~~\n"
"# Calculate stats for Site A and Site B data files.\n"
"for datafile in NENE*A.txt NENE*B.txt\n"
"do\n"
"    echo $datafile\n"
"    bash goostats.sh $datafile stats-$datafile\n"
"done\n"
"~~~"
msgstr ""
"~~~\n"
"# Обчисліть статистику для файлів даних A та B.\n"
"for datafile in NENE*A.txt NENE*B.txt\n"
"do\n"
"    echo $datafile\n"
"    bash goostats.sh $datafile stats-$datafile\n"
"done\n"
"~~~"

#: shell-novice/_episodes/06-script.md:458
msgid ""
"The advantage is that this always selects the right files:\n"
"she doesn't have to remember to exclude the 'Z' files.\n"
"The disadvantage is that it *always* selects just those files --- she can't run it on all files\n"
"(including the 'Z' files),\n"
"or on the 'G' or 'H' files her colleagues in Antarctica are producing,\n"
"without editing the script.\n"
"If she wanted to be more adventurous,\n"
"she could modify her script to check for command-line arguments,\n"
"and use `NENE*A.txt NENE*B.txt` if none were provided.\n"
"Of course, this introduces another tradeoff between flexibility and complexity."
msgstr ""
"Перевага полягає в тому, що вона завжди вибирає правильні файли:\n"
"їй не потрібно пам'ятати, що потрібно виключити файли з літерою 'Z'.\n"
"Недоліком є те, що вона *завжди* вибирає лише ці файли --- вона не може запустити її на всіх файлах\n"
"(включно з файлами 'Z'),\n"
"або на файлах 'G' чи 'H', які створюють її колеги в Антарктиді,\n"
"без редагування сценарію.\n"
"Якби вона хотіла бути більш сміливою,\n"
"вона могла б модифікувати свій скрипт для перевірки аргументів командного рядка,\n"
"і використовувати `NENE*A.txt NENE*B.txt`, якщо нічого не було передано.\n"
"Звичайно, це ще один компроміс між гнучкістю і складністю."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:469
msgid "> ## Variables in Shell Scripts"
msgstr "> ## Змінні в скриптах терміналу"

#: shell-novice/_episodes/06-script.md:470
msgid ""
">\n"
"> In the `proteins` directory, imagine you have a shell script called `script.sh` containing the\n"
"> following commands:\n"
">\n"
"> ~~~\n"
"> head -n $2 $1\n"
"> tail -n $3 $1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> While you are in the `proteins` directory, you type the following command:\n"
">\n"
"> ~~~\n"
"> $ bash script.sh '*.pdb' 1 1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Which of the following outputs would you expect to see?\n"
">\n"
"> 1. All of the lines between the first and the last lines of each file ending in `.pdb`\n"
">    in the `proteins` directory\n"
"> 2. The first and the last line of each file ending in `.pdb` in the `proteins` directory\n"
"> 3. The first and the last line of each file in the `proteins` directory\n"
"> 4. An error because of the quotes around `*.pdb`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 2.\n"
"> >\n"
"> > The special variables $1, $2 and $3 represent the command line arguments given to the\n"
"> > script, such that the commands run are:\n"
"> >\n"
"> > ```\n"
"> > $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > The shell does not expand `'*.pdb'` because it is enclosed by quote marks.\n"
"> > As such, the first argument to the script is `'*.pdb'` which gets expanded within the\n"
"> > script by `head` and `tail`."
msgstr ""
">\n"
"> Уявіть, що у каталозі `proteins` у вас є скрипт терміналу з назвою `script.sh`, який містить\n"
"> наступні команди:>\n"
"> ~~~\n"
"> head -n $2 $1\n"
"> tail -n $3 $1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Перебуваючи у каталозі `proteins`, ви вводите наступну команду:\n"
">\n"
"> ~~~\n"
"> $ bash script.sh '*.pdb' 1 1\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Які з наведених нижче результатів ви очікуєте побачити?\n"
">\n"
"> 1. Усі рядки між першим та останнім рядками кожного файлу, що закінчуються на `.pdb`\n"
"> у каталозі `proteins`.\n"
"> 2. Перший та останній рядок кожного файлу, що закінчується на `.pdb` у каталозі `proteins`.\n"
"> 3. Перший та останній рядок кожного файлу в каталозі `proteins`.\n"
"> 4. Помилка через лапки навколо `*.pdb`.\n"
">\n"
"> > ## Розв'язання\n"
"> > Правильна відповідь 2.\n"
"> >\n"
"> > Спеціальні змінні $1, $2 і $3 представляють аргументи командного рядка, що передаються\n"
"> > скрипту, таким чином команди, що виконуються, виглядають так:\n"
"> >\n"
"> > ```\n"
"> > $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Термынал не розгортає `'*.pdb'`, оскільки його взято у лапки.\n"
"> > Таким чином, першим аргументом скрипту є `'*.pdb'`, який буде розгорнуто у\n"
"> > скрипті за допомогою `head` і `tail`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:512
msgid "> ## Find the Longest File With a Given Extension"
msgstr "> ## Пошук найдовшого файлу із заданим розширенням"

#: shell-novice/_episodes/06-script.md:513
msgid ""
">\n"
"> Write a shell script called `longest.sh` that takes the name of a\n"
"> directory and a filename extension as its arguments, and prints\n"
"> out the name of the file with the most lines in that directory\n"
"> with that extension. For example:\n"
">\n"
"> ~~~\n"
"> $ bash longest.sh shell-lesson-data/exercise-data/proteins pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> would print the name of the `.pdb` file in `shell-lesson-data/exercise-data/proteins` that has\n"
"> the most lines.\n"
">\n"
"> Feel free to test your script on another directory e.g.\n"
"> ~~~\n"
"> $ bash longest.sh shell-lesson-data/exercise-data/writing txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > # Shell script which takes two arguments:\n"
"> > #    1. a directory name\n"
"> > #    2. a file extension\n"
"> > # and prints the name of the file in that directory\n"
"> > # with the most lines which matches the file extension.\n"
"> >\n"
"> > wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > The first part of the pipeline, `wc -l $1/*.$2 | sort -n`, counts\n"
"> > the lines in each file and sorts them numerically (largest last). When\n"
"> > there's more than one file, `wc` also outputs a final summary line,\n"
"> > giving the total number of lines across _all_ files.  We use `tail\n"
"> > -n 2 | head -n 1` to throw away this last line.\n"
"> >\n"
"> > With `wc -l $1/*.$2 | sort -n | tail -n 1` we'll see the final summary\n"
"> > line: we can build our pipeline up in pieces to be sure we understand\n"
"> > the output."
msgstr ""
">\n"
"> Напишіть сценарій терміналу з назвою `longest.sh`, який отримує в якості аргументів ім'я\n"
"> каталогу і розширення імені файлу як аргументи, і виводить\n"
"> назву файлу з найбільшою кількістю рядків у цьому каталозі\n"
"> з цим розширенням. Наприклад:\n"
">\n"
"> ~~~\n"
"> $ bash longest.sh shell-lesson-data/exercise-data/proteins pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> виведе назву файлу `.pdb` у каталозі `shell-lesson-data/exercise-data/proteins`, який має\n"
"> найбільшу кількість рядків.\n"
">\n"
"> Не соромтеся тестувати свій скрипт в іншому каталозі, наприклад\n"
"> ~~~\n"
"> $ bash longest.sh shell-lesson-data/exercise-data/writing txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Розв'язання\n"
"> >\n"
"> > ```\n"
"> > # Скрипт терміналу, який приймає два аргументи:\n"
"> > #    1. ім'я каталогу\n"
"> > #    2. розширення файлу\n"
"> > # і виводить ім'я файлу в цьому каталозі\n"
"> > # з найбільшою кількістю рядків, що відповідаює розширенню файлу.\n"
"> >\n"
"> > wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> >\n"
"> > Перша частина конвеєра, `wc -l $1/*.$2 | sort -n`, підраховує\n"
"> рядки у кожному файлі і сортує їх за числом (найбільший в останню чергу). Якщо\n"
"> > файлів більше одного, `wc` також виводить останній підсумковий рядок,\n"
"> який показує загальну кількість рядків у _усіх_ файлах. Ми використовуємо `tail`\n"
"> > -n 2 | head -n 1`, щоб відкинути цей останній рядок.\n"
"> >\n"
"> > За допомогою `wc -l $1/*.$2 | sort -n | tail -n 1` ми побачимо остаточний підсумковий\n"
"> > рядок: ми можемо побудувати наш конвеєр по частинах, щоб бути впевненими, що розуміємо,\n"
"> що ми отримаємо на виході."

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:558
msgid "> ## Script Reading Comprehension"
msgstr "> ## Розуміння читання скрипту"

#: shell-novice/_episodes/06-script.md:559
msgid ""
">\n"
"> For this question, consider the `shell-lesson-data/exercise-data/proteins` directory once again.\n"
"> This contains a number of `.pdb` files in addition to any other files you\n"
"> may have created.\n"
"> Explain what each of the following three scripts would do when run as\n"
"> `bash script1.sh *.pdb`, `bash script2.sh *.pdb`, and `bash script3.sh *.pdb` respectively.\n"
">\n"
"> ~~~\n"
"> # Script 1\n"
"> echo *.*\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 2\n"
"> for filename in $1 $2 $3\n"
"> do\n"
">     cat $filename\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Script 3\n"
"> echo $@.pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solutions\n"
"> > In each case, the shell expands the wildcard in `*.pdb` before passing the resulting\n"
"> > list of file names as arguments to the script.\n"
"> >\n"
"> > Script 1 would print out a list of all files containing a dot in their name.\n"
"> > The arguments passed to the script are not actually used anywhere in the script.\n"
"> >\n"
"> > Script 2 would print the contents of the first 3 files with a `.pdb` file extension.\n"
"> > `$1`, `$2`, and `$3` refer to the first, second, and third argument respectively.\n"
"> >\n"
"> > Script 3 would print all the arguments to the script (i.e. all the `.pdb` files),\n"
"> > followed by `.pdb`.\n"
"> > `$@` refers to *all* the arguments given to a shell script.\n"
"> > ```\n"
"> > cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb\n"
"> > ```\n"
"> > {: .output}"
msgstr ""
">\n"
"> Для відповіді на це запитання ще раз розглянемо каталог `shell-lesson-data/exercise-data/proteins`.\n"
"> У ньому міститься низка файлів `.pdb` на додачу до інших файлів, які\n"
"> ви могли створити.\n"
"> Поясніть, що зробить кожен з наступних трьох скриптів, якщо його буде запущено як:\n"
"> `bash script1.sh *.pdb`, `bash script2.sh *.pdb` та`bash script3.sh *.pdb` відповідно.\n"
">\n"
"> ~~~\n"
"> # Скрипт 1\n"
"> echo *.*\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Скрипт 2\n"
"> for filename in $1 $2 $3\n"
"> do\n"
">     cat $filename\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> # Скрипт 3\n"
"> echo $@.pdb\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Розв'язання\n"
"> > У кожному випадку термінал розгортає символ підстановки у `*.pdb` перед тим, як передати отриманий\n"
"> > список назв файлів як аргументи скрипту.\n"
"> >\n"
"> > Скрипт 1 виведе список усіх файлів, що містять крапку у назві.\n"
"> Аргументи, що передаються скрипту, насправді ніде не використовуються у скрипті.\n"
"> >\n"
"> > Скрипт 2 виведе вміст перших 3 файлів з розширенням `.pdb`.\n"
"> > `$1`, `$2` і `$3` відносяться до першого, другого і третього аргументу відповідно.\n"
"> >\n"
"> > Скрипт 3 виведе всі аргументи скрипту (тобто всі файли `.pdb`),\n"
"> > за якими слідує `.pdb`.\n"
"> > `$@` відноситься до *усіх* аргументів, переданих командному рядку.\n"
"> > ```\n"
"> > cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb\n"
"> > ```\n"
"> > {: .output}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/06-script.md:607
msgid "> ## Debugging Scripts"
msgstr "> ## Зневадження скриптів"

#: shell-novice/_episodes/06-script.md:608
msgid ""
">\n"
"> Suppose you have saved the following script in a file called `do-errors.sh`\n"
"> in Nelle's `north-pacific-gyre/scripts` directory:\n"
">\n"
"> ~~~\n"
"> # Calculate stats for data files.\n"
"> for datafile in \"$@\"\n"
"> do\n"
">     echo $datfile\n"
">     bash goostats.sh $datafile stats-$datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> When you run it from the `north-pacific-gyre` directory:\n"
">\n"
"> ~~~\n"
"> $ bash do-errors.sh NENE*A.txt NENE*B.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> the output is blank.\n"
"> To figure out why, re-run the script using the `-x` option:\n"
">\n"
"> ~~~\n"
"> $ bash -x do-errors.sh NENE*A.txt NENE*B.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> What is the output showing you?\n"
"> Which line is responsible for the error?\n"
">\n"
"> > ## Solution\n"
"> > The `-x` option causes `bash` to run in debug mode.\n"
"> > This prints out each command as it is run, which will help you to locate errors.\n"
"> > In this example, we can see that `echo` isn't printing anything. We have made a typo\n"
"> > in the loop variable name, and the variable `datfile` doesn't exist, hence returning\n"
"> > an empty string."
msgstr ""
">\n"
"> Припустимо, ви зберегли наступний скрипт у файлі з назвою `do-errors.sh`\n"
"> у каталозі Неллі `north-pacific-gyre/scripts`:>\n"
"> ~~~\n"
"> # Розрахунок статистики для файлів даних.\n"
"> for datafile in \"$@\"\n"
"> do\n"
">     echo $datfile\n"
">     bash goostats.sh $datafile stats-$datafile\n"
"> done\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Якщо ви запускаєте його з каталогу `north-pacific-gyre`:\n"
">\n"
"> ~~~\n"
"> $ bash do-errors.sh NENE*A.txt NENE*B.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> програма нічого не виводить.\n"
"> Щоб з'ясувати причину, перезапустіть скрипт з опцією `-x`:\n"
">\n"
"> ~~~\n"
"> $ bash -x do-errors.sh NENE*A.txt NENE*B.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Що показує вивід?\n"
"> Який рядок відповідає за помилку?\n"
">\n"
"> > ## Розв'язання\n"
"> > Параметр `-x` призводить до запуску `bash` у режимі відлагодження (зневадження).\n"
"> > У цьому випадку кожна команда буде виводитися на екран під час виконання, що допоможе вам знайти помилки.\n"
"> > У цьому прикладі ми бачимо, що команда `echo` нічого не виводить. Ми допустили друкарську помилку:\n"
"> > у назві змінної циклу, а змінної `datfile` не існує, тому повертається\n"
"> > порожній рядок."
