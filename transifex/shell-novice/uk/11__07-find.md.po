# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 19:32:08+0000\n"
"PO-Revision-Date: 2023-02-12 19:38+0000\n"
"Last-Translator: Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: shell-novice/_episodes/07-find.md:1
msgid ""
"---\n"
"title: \"Finding Things\"\n"
"teaching: 25\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I find files?\"\n"
"- \"How can I find things in files?\"\n"
"objectives:\n"
"- \"Use `grep` to select lines from text files that match simple patterns.\"\n"
"- \"Use `find` to find files and directories whose names match simple patterns.\"\n"
"- \"Use the output of one command as the command-line argument(s) to another command.\"\n"
"- \"Explain what is meant by 'text' and 'binary' files, and why many common tools don't handle the latter well.\"\n"
"keypoints:\n"
"- \"`find` finds files with specific properties that match patterns.\"\n"
"- \"`grep` selects lines in files that match patterns.\"\n"
"- \"`--help` is an option supported by many bash commands, and programs that can be run from within Bash, to display more information on how to use these commands or programs.\"\n"
"- \"`man [command]` displays the manual page for a given command.\"\n"
"- \"`$([command])` inserts a command's output in place.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Пошук речей\"\n"
"teaching: 25\n"
"exercises: 20\n"
"questions:\n"
"- \"Як я можу знайти файли?\"\n"
"- \"Як знайти щось у файлах?\"\n"
"objectives:\n"
"- \"Використати `grep` для виділення рядків з текстових файлів, які відповідають простим шаблонам.\"\n"
"- \"Використати `find` для пошуку файлів і каталогів, назви яких відповідають простим шаблонам.\"\n"
"- \"Використати вихідні дані однієї команди як аргумент(и) командного рядка для іншої команди.\"\n"
"- \"Пояснити, що мається на увазі під 'текстовими' та 'бінарними' файлами, і чому багато поширених інструментів погано працюють з останніми.\"\n"
"keypoints:\n"
"- \"`find` шукає файли з певними властивостями, які відповідають шаблонам.\"\n"
"- \"`grep` вибирає рядки з файлів, які відповідають шаблонам.\"\n"
"- \"`--help` - це опція, яка підтримується багатьма командами bash і програмами, які можна запустити з bash, для відображення додаткової інформації про те, як користуватися цими командами або програмами.\"\n"
"- \"`man [команда]` показує сторінку посібника для даної команди.\"\n"
"- \"`$([команда])` вставляє вивід команди на місце.\"\n"
"---"

#: shell-novice/_episodes/07-find.md:21
msgid ""
"In the same way that many of us now use 'Google' as a\n"
"verb meaning 'to find', Unix programmers often use the\n"
"word 'grep'.\n"
"'grep' is a contraction of 'global/regular expression/print',\n"
"a common sequence of operations in early Unix text editors.\n"
"It is also the name of a very useful command-line program."
msgstr ""
"Так само, як багато хто з нас зараз використовує 'Google' як\n"
"дієслово, що означає 'шукати', Unix-програмісти часто використовують\n"
"слово 'grep'.\n"
"'grep' - це скорочення від 'global/regular expression/print' (з англ. 'глобальний/регулярний вираз/друк'),\n"
"поширеної послідовності операцій у ранніх текстових редакторах Unix.\n"
"Це також назва дуже корисної програми командного рядка."

#: shell-novice/_episodes/07-find.md:28
msgid ""
"`grep` finds and prints lines in files that match a pattern.\n"
"For our examples,\n"
"we will use a file that contains three haiku taken from a\n"
"[1998 competition](https://web.archive.org/web/19991201042211/http://salon.com/21st/chal/1998/01/26chal.html)\n"
"in *Salon* magazine (Credit to authors Bill Torcaso, Howard Korder, and \n"
"Margaret Segall, respectively. See \n"
"Haiku Error Messsages archived\n"
"[Page 1](https://web.archive.org/web/20000310061355/http://www.salon.com/21st/chal/1998/02/10chal2.html)\n"
"and\n"
"[Page 2](https://web.archive.org/web/20000229135138/http://www.salon.com/21st/chal/1998/02/10chal3.html)\n"
".). For this set of examples,\n"
"we're going to be working in the writing subdirectory:"
msgstr ""
"`grep` шукає і виводить рядки у файлах, які відповідають шаблону.\n"
"У нашому прикладі\n"
"ми використаємо файл, який містить три хайку, взяті з\n"
"[конкурсу 1998 року](https://web.archive.org/web/19991201042211/http://salon.com/21st/chal/1998/01/26chal.html)\n"
"в журналі *Salon* (авторство належить Біллу Торкасо (Bill Torcaso), Говарду Кордеру (Howard Korder) та \n"
"Маргарет Сігал (Margaret Segall), відповідно. Див. \n"
"Haiku Error Messages в архіві\n"
"[Сторінка 1] (https://web.archive.org/web/20000310061355/http://www.salon.com/21st/chal/1998/02/10chal2.html)\n"
"та\n"
"[Сторінка 2](https://web.archive.org/web/20000229135138/http://www.salon.com/21st/chal/1998/02/10chal3.html)\n"
".). Для цього набору прикладів\n"
"ми будемо працювати у підкаталозі writing:"

# code block
#: shell-novice/_episodes/07-find.md:41
msgid ""
"~~~\n"
"$ cd\n"
"$ cd Desktop/shell-lesson-data/exercise-data/writing\n"
"$ cat haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd\n"
"$ cd Desktop/shell-lesson-data/exercise-data/writing\n"
"$ cat haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:48
msgid ""
"~~~\n"
"The Tao that is seen\n"
"Is not the true Tao, until\n"
"You bring fresh toner.\n"
"\n"
"With searching comes loss\n"
"and the presence of absence:\n"
"\"My Thesis\" not found.\n"
"\n"
"Yesterday it worked\n"
"Today it is not working\n"
"Software is like that.\n"
"~~~"
msgstr ""
"~~~\n"
"The Tao that is seen\n"
"Is not the true Tao, until\n"
"You bring fresh toner.\n"
"\n"
"With searching comes loss\n"
"and the presence of absence:\n"
"\"My Thesis\" not found.\n"
"\n"
"Yesterday it worked\n"
"Today it is not working\n"
"Software is like that.\n"
"~~~"

#: shell-novice/_episodes/07-find.md:63
msgid "Let's find lines that contain the word 'not':"
msgstr "Знайдемо рядки, які містять слово 'not':"

# code block
#: shell-novice/_episodes/07-find.md:65
msgid ""
"~~~\n"
"$ grep not haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep not haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:70
msgid ""
"~~~\n"
"Is not the true Tao, until\n"
"\"My Thesis\" not found\n"
"Today it is not working\n"
"~~~"
msgstr ""
"~~~\n"
"Is not the true Tao, until\n"
"\"My Thesis\" not found\n"
"Today it is not working\n"
"~~~"

#: shell-novice/_episodes/07-find.md:77
msgid ""
"Here, `not` is the pattern we're searching for.\n"
"The grep command searches through the file, looking for matches to the pattern specified.\n"
"To use it type `grep`, then the pattern we're searching for and finally\n"
"the name of the file (or files) we're searching in."
msgstr ""
"Тут `not` - це шаблон, який ми шукаємо.\n"
"Команда grep шукає у файлі збіги із заданим шаблоном.\n"
"Щоб скористатися нею, введіть `grep`, потім шаблон, який ми шукаємо, і нарешті\n"
"ім'я файлу (або файлів), у якому (у яких) ми шукаємо."

#: shell-novice/_episodes/07-find.md:82
msgid ""
"The output is the three lines in the file that contain the letters 'not'."
msgstr "У вихідний файл виводяться три рядки, які містять літери 'not'."

#: shell-novice/_episodes/07-find.md:84
msgid ""
"By default, grep searches for a pattern in a case-sensitive way.\n"
"In addition, the search pattern we have selected does not have to form a complete word,\n"
"as we will see in the next example."
msgstr ""
"За замовчуванням grep шукає шаблон з урахуванням регістру.\n"
"Крім того, вибраний нами шаблон пошуку не обов'язково має бути повним словом,\n"
"як ми побачимо у наступному прикладі."

#: shell-novice/_episodes/07-find.md:88
msgid "Let's search for the pattern: 'The'."
msgstr "Давайте відшукаємо шаблон: 'The'."

# code block
#: shell-novice/_episodes/07-find.md:90
msgid ""
"~~~\n"
"$ grep The haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep The haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:95
msgid ""
"~~~\n"
"The Tao that is seen\n"
"\"My Thesis\" not found.\n"
"~~~"
msgstr ""
"~~~\n"
"The Tao that is seen\n"
"\"My Thesis\" not found.\n"
"~~~"

#: shell-novice/_episodes/07-find.md:101
msgid ""
"This time, two lines that include the letters 'The' are outputted,\n"
"one of which contained our search pattern within a larger word, 'Thesis'."
msgstr ""
"Цього разу буде виведено два рядки, що містять літери 'The',\n"
"один з яких містить наш шаблон пошуку у більшому слові 'Thesis'."

#: shell-novice/_episodes/07-find.md:104
msgid ""
"To restrict matches to lines containing the word 'The' on its own,\n"
"we can give `grep` the `-w` option.\n"
"This will limit matches to word boundaries."
msgstr ""
"Щоб обмежити збіги до рядків, що містять слово 'The' як таке,\n"
"ми можемо надати `grep` опцію `-w`.\n"
"Це обмежить збіги межами слів."

#: shell-novice/_episodes/07-find.md:108
msgid ""
"Later in this lesson, we will also see how we can change the search behavior of grep\n"
"with respect to its case sensitivity."
msgstr ""
"Пізніше у цьому уроці ми також побачимо, як можна змінити поведінку пошуку grep\n"
"з урахуванням чутливості до регістру."

# code block
#: shell-novice/_episodes/07-find.md:111
msgid ""
"~~~\n"
"$ grep -w The haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -w The haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:116
msgid ""
"~~~\n"
"The Tao that is seen\n"
"~~~"
msgstr ""
"~~~\n"
"The Tao that is seen\n"
"~~~"

#: shell-novice/_episodes/07-find.md:121
msgid ""
"Note that a 'word boundary' includes the start and end of a line, so not\n"
"just letters surrounded by spaces.\n"
"Sometimes we don't\n"
"want to search for a single word, but a phrase. This is also easy to do with\n"
"`grep` by putting the phrase in quotes."
msgstr ""
"Зверніть увагу, що 'межа слова' включає початок і кінець рядка, тобто не\n"
"лише літери, оточені пробілами.\n"
"Іноді ми хочемо\n"
"шукати не окреме слово, а фразу. Це також легко зробити за допомогою\n"
"`grep`, взявши фразу в лапки."

# code block
#: shell-novice/_episodes/07-find.md:127
msgid ""
"~~~\n"
"$ grep -w \"is not\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -w \"is not\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:132
msgid ""
"~~~\n"
"Today it is not working\n"
"~~~"
msgstr ""
"~~~\n"
"Today it is not working\n"
"~~~"

#: shell-novice/_episodes/07-find.md:137
msgid ""
"We've now seen that you don't have to have quotes around single words,\n"
"but it is useful to use quotes when searching for multiple words.\n"
"It also helps to make it easier to distinguish between the search term or phrase\n"
"and the file being searched.\n"
"We will use quotes in the remaining examples."
msgstr ""
"Ми вже бачили, що не обов'язково брати в лапки окремі слова,\n"
"але корисно використовувати лапки під час пошуку кількох слів.\n"
"Це також допомагає легше відрізнити пошуковий термін або фразу\n"
"від файлу, в якому відбувається пошук.\n"
"Ми будемо використовувати лапки в решті прикладів."

#: shell-novice/_episodes/07-find.md:143
msgid "Another useful option is `-n`, which numbers the lines that match:"
msgstr "Ще одна корисна опція - `-n`, яка нумерує рядки, що збігаються:"

# code block
#: shell-novice/_episodes/07-find.md:145
msgid ""
"~~~\n"
"$ grep -n \"it\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n \"it\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:150
msgid ""
"~~~\n"
"5:With searching comes loss\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"~~~"
msgstr ""
"~~~\n"
"5:With searching comes loss\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"~~~"

#: shell-novice/_episodes/07-find.md:157
msgid "Here, we can see that lines 5, 9, and 10 contain the letters 'it'."
msgstr "Ми бачимо, що рядки 5, 9 і 10 містять літери 'it'."

#: shell-novice/_episodes/07-find.md:159
msgid ""
"We can combine options (i.e. flags) as we do with other Unix commands.\n"
"For example, let's find the lines that contain the word 'the'.\n"
"We can combine the option `-w` to find the lines that contain the word 'the'\n"
"and `-n` to number the lines that match:"
msgstr ""
"Ми можемо комбінувати опції (тобто прапорці) так само, як і в інших командах Unix.\n"
"Наприклад, давайте знайдемо рядки, які містять слово 'the'.\n"
"Ми можемо комбінувати опцію `-w`, щоб знайти рядки, які містять слово 'the'\n"
"і `-n`, щоб пронумерувати рядки, що збігаються:"

# code block
#: shell-novice/_episodes/07-find.md:164
msgid ""
"~~~\n"
"$ grep -n -w \"the\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n -w \"the\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:169
msgid ""
"~~~\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"
msgstr ""
"~~~\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"

#: shell-novice/_episodes/07-find.md:175
msgid ""
"Now we want to use the option `-i` to make our search case-insensitive:"
msgstr ""
"Тепер ми хочемо використати опцію `-i`, щоб зробити наш пошук нечутливим до "
"регістру:"

# code block
#: shell-novice/_episodes/07-find.md:177
msgid ""
"~~~\n"
"$ grep -n -w -i \"the\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n -w -i \"the\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:182
msgid ""
"~~~\n"
"1:The Tao that is seen\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"
msgstr ""
"~~~\n"
"1:The Tao that is seen\n"
"2:Is not the true Tao, until\n"
"6:and the presence of absence:\n"
"~~~"

#: shell-novice/_episodes/07-find.md:189
msgid ""
"Now, we want to use the option `-v` to invert our search, i.e., we want to output\n"
"the lines that do not contain the word 'the'."
msgstr ""
"Тепер ми хочемо використати опцію `-v` для інвертування пошуку, тобто вивести\n"
"рядки, які не містять слова 'the'."

# code block
#: shell-novice/_episodes/07-find.md:192
msgid ""
"~~~\n"
"$ grep -n -w -v \"the\" haiku.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep -n -w -v \"the\" haiku.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:197
msgid ""
"~~~\n"
"1:The Tao that is seen\n"
"3:You bring fresh toner.\n"
"4:\n"
"5:With searching comes loss\n"
"7:\"My Thesis\" not found.\n"
"8:\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"11:Software is like that.\n"
"~~~"
msgstr ""
"~~~\n"
"1:The Tao that is seen\n"
"3:You bring fresh toner.\n"
"4:\n"
"5:With searching comes loss\n"
"7:\"My Thesis\" not found.\n"
"8:\n"
"9:Yesterday it worked\n"
"10:Today it is not working\n"
"11:Software is like that.\n"
"~~~"

#: shell-novice/_episodes/07-find.md:211
msgid ""
"If we use the `-r` (recursive) option,\n"
"`grep` can search for a pattern recursively through a set of files in subdirectories."
msgstr ""
"Якщо ми використовуємо опцію `-r` (recursive, з англ. - рекурсивний),\n"
"`grep` може шукати шаблон рекурсивно через набір файлів у підкаталогах."

#: shell-novice/_episodes/07-find.md:214
msgid ""
"Let's search recursively for `Yesterday` in the `shell-lesson-data/exercise-"
"data/writing` directory:"
msgstr ""
"Давайте виконаємо рекурсивний пошук `Yesterday` у каталозі `shell-lesson-"
"data/exercise-data/writing`:"

# code block
#: shell-novice/_episodes/07-find.md:216
msgid ""
"```\n"
"$ grep -r Yesterday .\n"
"```"
msgstr ""
"```\n"
"$ grep -r Yesterday .\n"
"```"

# code block
#: shell-novice/_episodes/07-find.md:221
msgid ""
"```\n"
"./LittleWomen.txt:\"Yesterday, when Aunt was asleep and I was trying to be as still as a\n"
"./LittleWomen.txt:Yesterday at dinner, when an Austrian officer stared at us and then\n"
"./LittleWomen.txt:Yesterday was a quiet day spent in teaching, sewing, and writing in my\n"
"./haiku.txt:Yesterday it worked\n"
"```"
msgstr ""
"```\n"
"./LittleWomen.txt:\"Yesterday, when Aunt was asleep and I was trying to be as still as a\n"
"./LittleWomen.txt:Yesterday at dinner, when an Austrian officer stared at us and then\n"
"./LittleWomen.txt:Yesterday was a quiet day spent in teaching, sewing, and writing in my\n"
"./haiku.txt:Yesterday it worked\n"
"```"

#: shell-novice/_episodes/07-find.md:229
msgid ""
"`grep` has lots of other options. To find out what they are, we can type:"
msgstr ""
"У `grep` є багато інших варіантів. Щоб дізнатися, які саме, ми можемо "
"набрати їх:"

# code block
#: shell-novice/_episodes/07-find.md:231
msgid ""
"~~~\n"
"$ grep --help\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep --help\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:236
msgid ""
"~~~\n"
"Usage: grep [OPTION]... PATTERN [FILE]...\n"
"Search for PATTERN in each FILE or standard input.\n"
"PATTERN is, by default, a basic regular expression (BRE).\n"
"Example: grep -i 'hello world' menu.h main.c\n"
"\n"
"Regexp selection and interpretation:\n"
"  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)\n"
"  -F, --fixed-strings       PATTERN is a set of newline-separated fixed strings\n"
"  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)\n"
"  -P, --perl-regexp         PATTERN is a Perl regular expression\n"
"  -e, --regexp=PATTERN      use PATTERN for matching\n"
"  -f, --file=FILE           obtain PATTERN from FILE\n"
"  -i, --ignore-case         ignore case distinctions\n"
"  -w, --word-regexp         force PATTERN to match only whole words\n"
"  -x, --line-regexp         force PATTERN to match only whole lines\n"
"  -z, --null-data           a data line ends in 0 byte, not newline\n"
"\n"
"Miscellaneous:\n"
"...        ...        ...\n"
"~~~"
msgstr ""
"Використання: grep [ПАРАМЕТР]... ШАБЛОНИ [ФАЙЛ]...\n"
"Шукати ШАБЛОНИ у кожному ФАЙЛі.\n"
"Приклад: grep -i 'hello world' menu.h main.c\n"
"Запис ШАБЛОНИ може містити декілька шаблонів, які відокремлено символами нового рядка.\n"
"\n"
"Вибір за взірцем та інтерпретація:\n"
"-E, --extended-regexp ШАБЛОНИ є розширеним формальним виразом\n"
"-F, --fixed-strings ШАБЛОНИ є набором рядків\n"
"-G, --basic-regexp ШАБЛОНИ є звичайними формальними виразами\n"
"-P, --perl-regexp ШАБЛОНИ є формальними виразами Perl\n"
"-e, --regexp=ШАБЛОНИ використовувати ШАБЛОНИ для встановлення відповіднос ті\n"
"-f, --file=ФАЙЛ взяти ШАБЛОНИ із ФАЙЛа\n"
"-i, --ignore-case ігнорувати регістр літер у шаблонах і даних\n"
"--no-ignore-case не ігнорувати регістр літер (типова поведінка)\n"
"-w, --word-regexp шукати лише цілі слова\n"
"-x, --line-regexp шукати лише цілі рядки\n"
"-z, --null-data рядки даних закінчуються байтом \"0\", а не символом\n"
"кінця рядка (\\n)"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:259
msgid "> ## Using `grep`"
msgstr "> ## Використання `grep`"

#: shell-novice/_episodes/07-find.md:260
msgid ""
">\n"
"> Which command would result in the following output:\n"
">\n"
"> ~~~\n"
"> and the presence of absence:\n"
"> ~~~"
msgstr ""
">\n"
"> Яка команда призведе до наступного виводу:\n"
">\n"
"> ~~~\n"
"> and the presence of absence:\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:267
msgid ""
">\n"
"> 1. `grep \"of\" haiku.txt`\n"
"> 2. `grep -E \"of\" haiku.txt`\n"
"> 3. `grep -w \"of\" haiku.txt`\n"
"> 4. `grep -i \"of\" haiku.txt`\n"
">\n"
"> > ## Solution\n"
"> > The correct answer is 3, because the `-w` option looks only for whole-word matches.\n"
"> > The other options will also match 'of' when part of another word."
msgstr ""
">\n"
"> 1. `grep \"of\" haiku.txt`\n"
"> 2. `grep -E \"of\" haiku.txt`\n"
"> 3. `grep -w \"of\" haiku.txt`\n"
"> 4. `grep -i \"of\" haiku.txt`\n"
">\n"
"> > ## Розв'язання\n"
"> > Правильна відповідь 3, тому що опція `-w` шукає збіги лише між цілими словами.\n"
"> Інші варіанти також шукатимуть збіги зі словом 'of', якщо воно є частиною іншого слова."

#: shell-novice/_episodes/07-find.md:280
msgid ""
">\n"
"> `grep`'s real power doesn't come from its options, though; it comes from\n"
"> the fact that patterns can include wildcards. (The technical name for\n"
"> these is **regular expressions**, which\n"
"> is what the 're' in 'grep' stands for.) Regular expressions are both complex\n"
"> and powerful; if you want to do complex searches, please look at the lesson\n"
"> on [our website](http://v4.software-carpentry.org/regexp/index.html). As a taster, we can\n"
"> find lines that have an 'o' in the second position like this:\n"
">\n"
"> ~~~\n"
"> $ grep -E \"^.o\" haiku.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> You bring fresh toner.\n"
"> Today it is not working\n"
"> Software is like that.\n"
"> ~~~"
msgstr ""
">\n"
"> Проте справжня сила `grep` полягає не у його опціях, а у тому,\n"
"> що шаблони можуть містити підстановочні символи. (Технічна назва для\n"
"> цього - **регулярні вирази**, для чого\n"
"> скорочення 're' у 'grep'). Регулярні вирази є складними\n"
"> і потужніми; якщо ви хочете робити складні пошуки, будь ласка, перегляньте урок\n"
"> на [нашому сайті] (http://v4.software-carpentry.org/regexp/index.html). Для початку ми можемо\n"
"> знайти рядки, які містять \"o\" у другій позиції, наприклад, так:\n"
">\n"
"> ~~~\n"
"> $ grep -E \"^.o\" haiku.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> ~~~\n"
"> You bring fresh toner.\n"
"> Today it is not working\n"
"> Software is like that.\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:300
msgid ""
">\n"
"> We use the `-E` option and put the pattern in quotes to prevent the shell\n"
"> from trying to interpret it. (If the pattern contained a `*`, for\n"
"> example, the shell would try to expand it before running `grep`.) The\n"
"> `^` in the pattern anchors the match to the start of the line. The `.`\n"
"> matches a single character (just like `?` in the shell), while the `o`\n"
"> matches an actual 'o'."
msgstr ""
">\n"
"> Ми використовуємо опцію `-E` і беремо шаблон у лапки, щоб запобігти спробам терміналу\n"
"> інтерпретувати його. (Якщо шаблон містить `*`,\n"
"> наприклад, оболонка спробує розгорнути його перед запуском `grep`). Символ\n"
"> `^` у шаблоні прив'язує збіг до початку рядка. Символ `.`\n"
"> відповідає одному символу (подібно до `?` у командному рядку), тоді як `o`\n"
"> відповідає власне 'o'."

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:309
msgid "> ## Tracking a Species"
msgstr "> ## Відстеження видів"

#: shell-novice/_episodes/07-find.md:310
msgid ""
">\n"
"> Leah has several hundred\n"
"> data files saved in one directory, each of which is formatted like this:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer,5\n"
"> 2012-11-05,rabbit,22\n"
"> 2012-11-05,raccoon,7\n"
"> 2012-11-06,rabbit,19\n"
"> 2012-11-06,deer,2\n"
"> 2012-11-06,fox,4\n"
"> 2012-11-07,rabbit,16\n"
"> 2012-11-07,bear,1\n"
"> ~~~"
msgstr ""
">\n"
"> Лея має кілька сотень\n"
"> файлів даних, збережених в одному каталозі, кожен з яких відформатовано таким чином:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,deer,5\n"
"> 2012-11-05,rabbit,22\n"
"> 2012-11-05,raccoon,7\n"
"> 2012-11-06,rabbit,19\n"
"> 2012-11-06,deer,2\n"
"> 2012-11-06,fox,4\n"
"> 2012-11-07,rabbit,16\n"
"> 2012-11-07,bear,1\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:325
msgid ""
">\n"
"> She wants to write a shell script that takes a species as the first command-line argument\n"
"> and a directory as the second argument. The script should return one file called `<species>.txt`\n"
"> containing a list of dates and the number of that species seen on each date.\n"
"> For example using the data shown above, `rabbit.txt` would contain:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,22\n"
"> 2012-11-06,19\n"
"> 2012-11-07,16\n"
"> ~~~"
msgstr ""
">\n"
"> Вона хоче написати командний скрипт, який приймає вид як перший аргумент командного рядка\n"
"> і каталог як другий аргумент. Скрипт повинен повернути один файл з назвою `<вид>.txt',\n"
"> який містить список дат і кількість особин цього виду, які були помічені у кожну дату.\n"
"> Наприклад, використовуючи дані, показані вище, `rabbit.txt` буде містити:\n"
">\n"
"> ~~~\n"
"> 2012-11-05,22\n"
"> 2012-11-06,19\n"
"> 2012-11-07,16\n"
"> ~~~"

#: shell-novice/_episodes/07-find.md:337
msgid ""
">\n"
"> Below, each line contains an individual command, or pipe.  Arrange their\n"
"> sequence in one command in order to achieve Leah's goal:\n"
">\n"
"> ~~~\n"
"> cut -d : -f 2\n"
"> >\n"
"> |\n"
"> grep -w $1 -r $2\n"
"> |\n"
"> $1.txt\n"
"> cut -d , -f 1,3\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Hint: use `man grep` to look for how to grep text recursively in a directory\n"
"> and `man cut` to select more than one field in a line.\n"
">\n"
"> An example of such a file is provided in\n"
"> `shell-lesson-data/exercise-data/animal-counts/animals.csv`\n"
">\n"
"> > ## Solution\n"
"> >\n"
"> > ```\n"
"> > grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3 > $1.txt\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Actually, you can swap the order of the two cut commands and it still works. At the\n"
"> > command line, try changing the order of the cut commands, and have a look at the output\n"
"> > from each step to see why this is the case.\n"
"> >\n"
"> > You would call the script above like this:\n"
"> >\n"
"> > ```\n"
"> > $ bash count-species.sh bear .\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Нижче кожен рядок містить окрему команду або канал. Впорядкуйте їх\n"
"> послідовність в одну команду, щоб досягти мети Леї:\n"
">\n"
"> ~~~\n"
"> cut -d : -f 2\n"
"> >\n"
"> |\n"
"> grep -w $1 -r $2\n"
"> |\n"
"> $1.txt\n"
"> cut -d , -f 1,3\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Підказка: використовуйте `man grep` для пошуку того, як виконувати рекурсивний пошук тексту у каталозі\n"
"> і `man cut` для виділення декількох полів у рядку.\n"
">\n"
"> Приклад такого файлу наведено в\n"
"> `shell-lesson-data/exercise-data/animal-counts/animals.csv`\n"
">\n"
"> > ## Розв'язання\n"
"> >\n"
"> > ```\n"
"> > grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3 > $1.txt\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Насправді, ви можете поміняти місцями порядок двох команд вирізання, і це все одно буде працювати. У командному рядку\n"
"> > спробуйте змінити порядок команд вирізання і подивіться на вивід\n"
"> > на кожному кроці, щоб зрозуміти, чому це відбувається.\n"
"> >\n"
"> > Ви можете визвати наведений вище скрипт так:\n"
"> >\n"
"> > ```\n"
"> > $ bash count-species.sh bear .\n"
"> > ```\n"
"> > {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:378
msgid "> ## Little Women"
msgstr "> ## Маленькі жінки"

#: shell-novice/_episodes/07-find.md:379
msgid ""
">\n"
"> You and your friend, having just finished reading *Little Women* by\n"
"> Louisa May Alcott, are in an argument.  Of the four sisters in the\n"
"> book, Jo, Meg, Beth, and Amy, your friend thinks that Jo was the\n"
"> most mentioned.  You, however, are certain it was Amy.  Luckily, you\n"
"> have a file `LittleWomen.txt` containing the full text of the novel\n"
"> (`shell-lesson-data/exercise-data/writing/LittleWomen.txt`).\n"
"> Using a `for` loop, how would you tabulate the number of times each\n"
"> of the four sisters is mentioned?\n"
">\n"
"> Hint: one solution might employ\n"
"> the commands `grep` and `wc` and a `|`, while another might utilize\n"
"> `grep` options.\n"
"> There is often more than one way to solve a programming task, so a\n"
"> particular solution is usually chosen based on a combination of\n"
"> yielding the correct result, elegance, readability, and speed.\n"
">\n"
"> > ## Solutions\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> >     echo $sis:\n"
"> >     grep -ow $sis LittleWomen.txt | wc -l\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Alternative, slightly inferior solution:\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> >     echo $sis:\n"
"> >     grep -ocw $sis LittleWomen.txt\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > This solution is inferior because `grep -c` only reports the number of lines matched.\n"
"> > The total number of matches reported by this method will be lower if there is more\n"
"> > than one match per line.\n"
"> >\n"
"> > Perceptive observers may have noticed that character names sometimes appear in all-uppercase\n"
"> > in chapter titles (e.g. 'MEG GOES TO VANITY FAIR').\n"
"> > If you wanted to count these as well, you could add the `-i` option for case-insensitivity\n"
"> > (though in this case, it doesn't affect the answer to which sister is mentioned\n"
"> > most frequently)."
msgstr ""
">\n"
"> Ви з другом щойно закінчили читати \"Маленьких жінок\"\n"
"> Луїзи Мей Елкотт і сперечаєтеся. З чотирьох сестер у книзі,\n"
"> Джо, Мег, Бет та Емі, ваш друг вважає, що про Джо\n"
"> найчастіше згадується. Ви, однак, впевнені, що це була Емі. На щастя, у вас\n"
"> є файл `LittleWomen.txt`, який містить повний текст роману\n"
"> (`shell-lesson-data/exercise-data/writing/LittleWomen.txt`).\n"
"> Використовуючи цикл `for`, як ви виведете в таблицю кількість разів, коли кожна\n"
"> з чотирьох сестер згадується?\n"
">\n"
"> Підказка: одне рішення може використовувати\n"
"> команди `grep`, `wc` та `|`, а інше може використовувати\n"
"> опції `grep`.\n"
"> Часто існує більше ніж один спосіб розв'язання задачі програмування, тому\n"
"> конкретний спосіб зазвичай обирається на основі комбінації\n"
"> отримання правильного результату, елегантності, читабельності та швидкості.\n"
">\n"
"> > ## Розв'язання\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> >     echo $sis:\n"
"> >     grep -ow $sis LittleWomen.txt | wc -l\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Альтернативне, трохи гірше рішення:\n"
"> > ```\n"
"> > for sis in Jo Meg Beth Amy\n"
"> > do\n"
"> >     echo $sis:\n"
"> >     grep -ocw $sis LittleWomen.txt\n"
"> > done\n"
"> > ```\n"
"> > {: .source}\n"
"> >\n"
"> > Це рішення є гіршим, оскільки `grep -c` повідомляє лише про кількість знайдених рядків.\n"
"> > Загальна кількість збігів, отриманих за допомогою цього методу, буде меншою, якщо на один рядок припадає більше,\n"
"> > ніж один збіг.\n"
"> >\n"
"> > Уважні спостерігачі могли помітити, що імена персонажів іноді з'являються з великої літери\n"
"> > у назвах розділів (наприклад, \"MEG GOES TO VANITY FAIR\").\n"
"> > Якщо ви хочете врахувати і ці випадки, ви можете додати опцію `-i` для нечутливості до регістру.\n"
"> > (хоча в цьому випадку це не впливає на відповідь, яка сестра згадується\n"
"> > найчастіше)."

#: shell-novice/_episodes/07-find.md:428
msgid ""
"While `grep` finds lines in files,\n"
"the `find` command finds files themselves.\n"
"Again,\n"
"it has a lot of options;\n"
"to show how the simplest ones work, we'll use the `shell-lesson-data/exercise-data`\n"
"directory tree shown below."
msgstr ""
"У той час як `grep` знаходить рядки у файлах,\n"
"команда `find` знаходить самі файли.\n"
"Знову ж таки,\n"
"у неї є багато опцій;\n"
"щоб показати, як працюють найпростіші з них, ми скористаємося деревом каталогів `shell-lesson-data/exercise-data`,\n"
"що наведено нижче."

# code block
#: shell-novice/_episodes/07-find.md:435
msgid ""
"~~~\n"
".\n"
"├── animal-counts/\n"
"│   └── animals.csv\n"
"├── creatures/\n"
"│   ├── basilisk.dat\n"
"│   ├── minotaur.dat\n"
"│   └── unicorn.dat\n"
"├── numbers.txt\n"
"├── proteins/\n"
"│   ├── cubane.pdb\n"
"│   ├── ethane.pdb\n"
"│   ├── methane.pdb\n"
"│   ├── octane.pdb\n"
"│   ├── pentane.pdb\n"
"│   └── propane.pdb\n"
"└── writing/\n"
"    ├── haiku.txt\n"
"    └── LittleWomen.txt\n"
"~~~"
msgstr ""
"~~~\n"
".\n"
"├── animal-counts/\n"
"│   └── animals.csv\n"
"├── creatures/\n"
"│   ├── basilisk.dat\n"
"│   ├── minotaur.dat\n"
"│   └── unicorn.dat\n"
"├── numbers.txt\n"
"├── proteins/\n"
"│   ├── cubane.pdb\n"
"│   ├── ethane.pdb\n"
"│   ├── methane.pdb\n"
"│   ├── octane.pdb\n"
"│   ├── pentane.pdb\n"
"│   └── propane.pdb\n"
"└── writing/\n"
"    ├── haiku.txt\n"
"    └── LittleWomen.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:457
msgid ""
"The `exercise-data` directory contains one file, `numbers.txt` and four directories:\n"
"`animal-counts`, `creatures`, `proteins` and `writing` containing various files."
msgstr ""
"Каталог `exercise-data` містить один файл `numbers.txt` та чотири каталоги:\n"
"`animal-counts`, `creatures`, `proteins` і `writing`, які містять різні файли."

#: shell-novice/_episodes/07-find.md:461
msgid ""
"For our first command,\n"
"let's run `find .` (remember to run this command from the `shell-lesson-data/exercise-data` folder)."
msgstr ""
"Для нашої першої команди\n"
"давайте виконаємо `find .` (не забудьте запустити цю команду з каталогу `shell-lesson-data/exercise-data`)."

# code block
#: shell-novice/_episodes/07-find.md:464
msgid ""
"~~~\n"
"$ find .\n"
"~~~"
msgstr ""
"~~~\n"
"$ find .\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:469
msgid ""
"~~~\n"
".\n"
"./writing\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./creatures\n"
"./creatures/basilisk.dat\n"
"./creatures/unicorn.dat\n"
"./creatures/minotaur.dat\n"
"./animal-counts\n"
"./animal-counts/animals.csv\n"
"./numbers.txt\n"
"./proteins\n"
"./proteins/ethane.pdb\n"
"./proteins/propane.pdb\n"
"./proteins/octane.pdb\n"
"./proteins/pentane.pdb\n"
"./proteins/methane.pdb\n"
"./proteins/cubane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
".\n"
"./writing\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./creatures\n"
"./creatures/basilisk.dat\n"
"./creatures/unicorn.dat\n"
"./creatures/minotaur.dat\n"
"./animal-counts\n"
"./animal-counts/animals.csv\n"
"./numbers.txt\n"
"./proteins\n"
"./proteins/ethane.pdb\n"
"./proteins/propane.pdb\n"
"./proteins/octane.pdb\n"
"./proteins/pentane.pdb\n"
"./proteins/methane.pdb\n"
"./proteins/cubane.pdb\n"
"~~~"

#: shell-novice/_episodes/07-find.md:492
msgid ""
"As always, the `.` on its own means the current working directory,\n"
"which is where we want our search to start.\n"
"`find`'s output is the names of every file **and** directory\n"
"under the current working directory.\n"
"This can seem useless at first but `find` has many options\n"
"to filter the output and in this lesson we will discover some\n"
"of them."
msgstr ""
"Як завжди, символ `.` сам по собі означає поточний робочий каталог,\n"
"з якого ми хочемо почати пошук.\n"
"Результатом роботи `find` буде перелік імен усіх файлів **та** каталогів\n"
"у поточному робочому каталозі.\n"
"Спочатку це може здатися марним, але `find` має багато можливостей\n"
"для фільтрації результатів, і у цьому уроці ми розглянемо деякі\n"
"з них."

#: shell-novice/_episodes/07-find.md:500
msgid ""
"The first option in our list is\n"
"`-type d` that means 'things that are directories'.\n"
"Sure enough, `find`'s output is the names of the five directories (including `.`):"
msgstr ""
"Перший варіант у нашому списку\n"
"`-type d`, що означає 'елементи, які є каталогами'.\n"
"Звісно, команда `find` виведе назви п'яти каталогів (включно з `.`):"

# code block
#: shell-novice/_episodes/07-find.md:504
msgid ""
"~~~\n"
"$ find . -type d\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -type d\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:509
msgid ""
"~~~\n"
".\n"
"./writing\n"
"./creatures\n"
"./animal-counts\n"
"./proteins\n"
"~~~"
msgstr ""
"~~~\n"
".\n"
"./writing\n"
"./creatures\n"
"./animal-counts\n"
"./proteins\n"
"~~~"

#: shell-novice/_episodes/07-find.md:518
msgid ""
"Notice that the objects `find` finds are not listed in any particular order.\n"
"If we change `-type d` to `-type f`,\n"
"we get a listing of all the files instead:"
msgstr ""
"Зверніть увагу, що об'єкти, які знаходить `find`, не перераховано у певному порядку.\n"
"Якщо ми змінимо `-type d` на `-type f`,\n"
"ми отримаємо список усіх файлів:"

# code block
#: shell-novice/_episodes/07-find.md:522
msgid ""
"~~~\n"
"$ find . -type f\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -type f\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:527
msgid ""
"~~~\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./creatures/basilisk.dat\n"
"./creatures/unicorn.dat\n"
"./creatures/minotaur.dat\n"
"./animal-counts/animals.csv\n"
"./numbers.txt\n"
"./proteins/ethane.pdb\n"
"./proteins/propane.pdb\n"
"./proteins/octane.pdb\n"
"./proteins/pentane.pdb\n"
"./proteins/methane.pdb\n"
"./proteins/cubane.pdb\n"
"~~~"
msgstr ""
"~~~\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./creatures/basilisk.dat\n"
"./creatures/unicorn.dat\n"
"./creatures/minotaur.dat\n"
"./animal-counts/animals.csv\n"
"./numbers.txt\n"
"./proteins/ethane.pdb\n"
"./proteins/propane.pdb\n"
"./proteins/octane.pdb\n"
"./proteins/pentane.pdb\n"
"./proteins/methane.pdb\n"
"./proteins/cubane.pdb\n"
"~~~"

#: shell-novice/_episodes/07-find.md:544
msgid "Now let's try matching by name:"
msgstr "Тепер спробуємо зіставити за іменами:"

# code block
#: shell-novice/_episodes/07-find.md:546
msgid ""
"~~~\n"
"$ find . -name *.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -name *.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:551
msgid ""
"~~~\n"
"./numbers.txt\n"
"~~~"
msgstr ""
"~~~\n"
"./numbers.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:556
msgid ""
"We expected it to find all the text files,\n"
"but it only prints out `./numbers.txt`.\n"
"The problem is that the shell expands wildcard characters like `*` *before* commands run.\n"
"Since `*.txt` in the current directory expands to `./numbers.txt`,\n"
"the command we actually ran was:"
msgstr ""
"Ми очікували, що будуть знайдені усі текстові файли,\n"
"але було виведено лише `./numbers.txt`.\n"
"Проблема полягає у тому, що перед виконанням команд оболонка розширює символи підстановки, такі як `*`.\n"
"Оскільки `*.txt` у поточному каталозі розширюється до `./numbers.txt`,\n"
"команда, яку ми виконали, була такою:"

# code block
#: shell-novice/_episodes/07-find.md:562
msgid ""
"~~~\n"
"$ find . -name numbers.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -name numbers.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:567
msgid "`find` did what we asked; we just asked for the wrong thing."
msgstr ""
"Команда `find` зробила те, що ми просили; ми просто просили не те, що треба."

#: shell-novice/_episodes/07-find.md:569
msgid ""
"To get what we want,\n"
"let's do what we did with `grep`:\n"
"put `*.txt` in quotes to prevent the shell from expanding the `*` wildcard.\n"
"This way,\n"
"`find` actually gets the pattern `*.txt`, not the expanded filename `numbers.txt`:"
msgstr ""
"Щоб отримати те, що ми хочемо,\n"
"давайте зробимо те, що ми зробили з `grep`:\n"
"візьмемо `*.txt` у лапки, щоб оболонка не змогла розкрити шаблон `*`.\n"
"Таким чином,\n"
"`find` отримає шаблон `*.txt`, а не розширене ім'я файлу `numbers.txt`:"

# code block
#: shell-novice/_episodes/07-find.md:575
msgid ""
"~~~\n"
"$ find . -name \"*.txt\"\n"
"~~~"
msgstr ""
"~~~\n"
"$ find . -name \"*.txt\"\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:580
msgid ""
"~~~\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./numbers.txt\n"
"~~~"
msgstr ""
"~~~\n"
"./writing/LittleWomen.txt\n"
"./writing/haiku.txt\n"
"./numbers.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:587
msgid "> ## Listing vs. Finding"
msgstr "> ## Порівняння результатів `ls` та `find`"

#: shell-novice/_episodes/07-find.md:588
msgid ""
">\n"
"> `ls` and `find` can be made to do similar things given the right options,\n"
"> but under normal circumstances,\n"
"> `ls` lists everything it can,\n"
"> while `find` searches for things with certain properties and shows them."
msgstr ""
">\n"
"> `ls` і `find` можна змусити робити подібні речі за допомогою правильних параметрів,\n"
"> але за звичайних обставин,\n"
"> `ls` перелічує все, що може,\n"
"> тоді як `find` шукає речі з певними властивостями і показує їх."

#: shell-novice/_episodes/07-find.md:595
msgid ""
"As we said earlier,\n"
"the command line's power lies in combining tools.\n"
"We've seen how to do that with pipes;\n"
"let's look at another technique.\n"
"As we just saw,\n"
"`find . -name \"*.txt\"` gives us a list of all text files in or below the current directory.\n"
"How can we combine that with `wc -l` to count the lines in all those files?"
msgstr ""
"Як ми вже говорили раніше,\n"
"сила командного рядка полягає у комбінуванні інструментів.\n"
"Ми бачили, як це можна зробити з каналами;\n"
"давайте подивимося на іншу техніку.\n"
"Як ми щойно бачили,\n"
"`find . -name \"*.txt\"` дає нам список усіх текстових файлів у поточному каталозі або нижче.\n"
"Як ми можемо поєднати це з `wc -l`, щоб порахувати рядки у всіх цих файлах?"

#: shell-novice/_episodes/07-find.md:603
msgid "The simplest way is to put the `find` command inside `$()`:"
msgstr "Найпростіший спосіб - помістити команду `find` всередину `$()`:"

# code block
#: shell-novice/_episodes/07-find.md:605
msgid ""
"~~~\n"
"$ wc -l $(find . -name \"*.txt\")\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l $(find . -name \"*.txt\")\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:610
msgid ""
"~~~\n"
"  21022 ./writing/LittleWomen.txt\n"
"     11 ./writing/haiku.txt\n"
"      5 ./numbers.txt\n"
"  21038 total\n"
"~~~"
msgstr ""
"~~~\n"
"  21022 ./writing/LittleWomen.txt\n"
"     11 ./writing/haiku.txt\n"
"      5 ./numbers.txt\n"
"  21038 total\n"
"~~~"

#: shell-novice/_episodes/07-find.md:618
msgid ""
"When the shell executes this command,\n"
"the first thing it does is run whatever is inside the `$()`.\n"
"It then replaces the `$()` expression with that command's output.\n"
"Since the output of `find` is the three filenames `./writing/LittleWomen.txt`,\n"
"`./writing/haiku.txt`, and `./numbers.txt`, the shell constructs the command:"
msgstr ""
"Коли термінал виконуватиме цю команду,\n"
"перше, що він зробить, це виконає все, що міститься у виразі `$()`.\n"
"Потім він замінить вираз `$()` на результати виконання цієї команди.\n"
"Оскільки результатом команди `find` є три файли `./writing/LittleWomen.txt`,\n"
"`./writing/haiku.txt` і `./numbers.txt`, термінал сконструює команду:"

# code block
#: shell-novice/_episodes/07-find.md:624
msgid ""
"~~~\n"
"$ wc -l ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ wc -l ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt\n"
"~~~"

#: shell-novice/_episodes/07-find.md:629
msgid ""
"which is what we wanted.\n"
"This expansion is exactly what the shell does when it expands wildcards like `*` and `?`,\n"
"but lets us use any command we want as our own 'wildcard'."
msgstr ""
"що ми і хотіли.\n"
"Таке розширення виконує саме те, що робить термінал, коли розширює такі символи, як `*` та `?`,\n"
"але дозволяє нам використовувати будь-яку команду як власну \"шаблонну\"."

#: shell-novice/_episodes/07-find.md:633
msgid ""
"It's very common to use `find` and `grep` together.\n"
"The first finds files that match a pattern;\n"
"the second looks for lines inside those files that match another pattern.\n"
"Here, for example, we can find txt files that contain the word \"searching\"\n"
"by looking for the string 'searching' in all the `.txt` files in the current directory:"
msgstr ""
"Дуже часто `find` і `grep` використовують разом.\n"
"Перша знаходить файли, які відповідають певному шаблону;\n"
"другий шукає рядки всередині цих файлів, які відповідають іншому шаблону.\n"
"Наприклад, ми можемо знайти txt-файли, які містять слово \"searching\"\n"
"шляхом пошуку рядка 'searching' у всіх файлах `.txt` у поточному каталозі:"

# code block
#: shell-novice/_episodes/07-find.md:639
msgid ""
"~~~\n"
"$ grep \"searching\" $(find . -name \"*.txt\")\n"
"~~~"
msgstr ""
"~~~\n"
"$ grep \"searching\" $(find . -name \"*.txt\")\n"
"~~~"

# code block
#: shell-novice/_episodes/07-find.md:644
msgid ""
"~~~\n"
"./writing/LittleWomen.txt:sitting on the top step, affected to be searching for her book, but was\n"
"./writing/haiku.txt:With searching comes loss\n"
"~~~"
msgstr ""
"~~~\n"
"./writing/LittleWomen.txt:sitting on the top step, affected to be searching for her book, but was\n"
"./writing/haiku.txt:With searching comes loss\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:650
msgid "> ## Matching and Subtracting"
msgstr "> ## Порівняння та віднімання"

#: shell-novice/_episodes/07-find.md:651
msgid ""
">\n"
"> The `-v` option to `grep` inverts pattern matching, so that only lines\n"
"> which do *not* match the pattern are printed. Given that, which of\n"
"> the following commands will find all .dat files in `creatures`\n"
"> except `unicorn.dat`?\n"
"> Once you have thought about your answer, you can test the commands in the\n"
"> `shell-lesson-data/exercise-data` directory.\n"
">\n"
"> 1.  `find creatures -name \"*.dat\" | grep -v unicorn`\n"
"> 2.  `find creatures -name *.dat | grep -v unicorn`\n"
"> 3.  `grep -v \"unicorn\" $(find creatures -name \"*.dat\")`\n"
"> 4.  None of the above.\n"
">\n"
"> > ## Solution\n"
"> > Option 1. is correct. Putting the match expression in quotes prevents the shell\n"
"> > expanding it, so it gets passed to the `find` command.\n"
"> >\n"
"> > Option 2 is also works in this instance because the shell tries to expand `*.dat`\n"
"> > but there are no `*.dat` files in the current directory,\n"
"> > so the wildcard expression gets passed to `find`.\n"
"> > We first encountered this in\n"
"> > [episode 3]({{ page.root }}{% link _episodes/03-create.md %}/#wildcards).\n"
"> >\n"
"> > Option 3 is incorrect because it searches the contents of the files for lines which\n"
"> > do not match 'unicorn', rather than searching the file names."
msgstr ""
">\n"
"> Параметр `-v` до `grep` інвертує відповідність шаблону, щоб виводилися лише рядки,\n"
"> які *не* збігаються з шаблоном. Враховуючи це, яка з\n"
"> наступних команд знайде усі файли .dat у `creatures`\n"
"> окрім `unicorn.dat`?\n"
"> Після того, як ви обміркуєте свою відповідь, ви можете протестувати команди у\n"
"> каталогу `shell-lesson-data/exercise-data`.\n"
">\n"
"> 1. `find creatures -name \"*.dat\" | grep -v unicorn`.\n"
"> 2. `find creatures -name *.dat | grep -v unicorn`\n"
"> 3. `grep -v \"unicorn\" $(find creatures -name \"*.dat\")`\n"
"> 4. Нічого з перерахованого вище.\n"
">\n"
"> > ## Розв'язання\n"
"> > Варіант 1 правильний. Взяття виразу збігу у лапки запобігає тому, щоб термінал\n"
"> > розгортав його перед передачею команді `find`.\n"
"> >\n"
"> > Варіант 2 також працює у цьому випадку, оскільки термінал намагається розгорнути `*.dat`.\n"
"> > але у поточному каталозі немає файлів `*.dat`,\n"
"> > тому вираз підстановки буде передано до `find`.\n"
"> > Вперше ми зіткнулися з цим у\n"
"> > [епізоді 3] ({{ page.root }}{% link _episodes/03-create.md %}/#підстановочні-символи).\n"
"> >\n"
"> > Варіант 3 є неправильним, оскільки він шукає у вмісті файлів рядки, які\n"
"> > не збігаються зі словом 'unicorn', а не імена файлів."

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:679
msgid "> ## Binary Files"
msgstr "> ## Двійкові файли"

#: shell-novice/_episodes/07-find.md:680
msgid ""
">\n"
"> We have focused exclusively on finding patterns in text files. What if\n"
"> your data is stored as images, in databases, or in some other format?\n"
">\n"
"> A handful of tools extend `grep` to handle a few non text formats. But a\n"
"> more generalizable approach is to convert the data to text, or\n"
"> extract the text-like elements from the data. On the one hand, it makes simple\n"
"> things easy to do. On the other hand, complex things are usually impossible. For\n"
"> example, it's easy enough to write a program that will extract X and Y\n"
"> dimensions from image files for `grep` to play with, but how would you\n"
"> write something to find values in a spreadsheet whose cells contained\n"
"> formulas?\n"
">\n"
"> A last option is to recognize that the shell and text processing have\n"
"> their limits, and to use another programming language.\n"
"> When the time comes to do this, don't be too hard on the shell: many\n"
"> modern programming languages have borrowed a lot of\n"
"> ideas from it, and imitation is also the sincerest form of praise."
msgstr ""
">\n"
"> Ми зосередилися виключно на пошуку шаблонів у текстових файлах. Що робити, якщо\n"
"> ваші дані зберігаються у вигляді зображень, баз даних або в іншому форматі?\n"
">\n"
"> Кілька утиліт розширюють `grep` для роботи з деякими нетекстовими форматами. Але\n"
"> більш узагальненим підходом є перетворення даних у текст, або\n"
"> вилучення текстових елементів з даних. З одного боку, це робить прості\n"
"> речі легкими для виконання. З іншого боку, складні речі, як правило, неможливі. Наприклад,\n"
"> досить легко написати програму, яка буде витягувати\n"
"> розміри X та Y з файлів зображень, щоб `grep` міг погратися з ними, але як би ви\n"
"> написати щось для пошуку значень у електронній таблиці, клітинки якої містять\n"
"> формули?\n"
">\n"
"> Останній варіант - визнати, що термінал і обробка тексту мають\n"
"> свої межі, і використовувати іншу мову програмування.\n"
"> Коли прийде час це зробити, не будьте надто суворими до терміналу: багато\n"
"> сучасних мов програмування запозичили багато\n"
"> ідей з нього, а наслідування також є найщирішою формою похвали."

#: shell-novice/_episodes/07-find.md:700
msgid ""
"The Unix shell is older than most of the people who use it. It has\n"
"survived so long because it is one of the most productive programming\n"
"environments ever created --- maybe even *the* most productive. Its syntax\n"
"may be cryptic, but people who have mastered it can experiment with\n"
"different commands interactively, then use what they have learned to\n"
"automate their work. Graphical user interfaces may be easier to use at\n"
"first, but once learned, the productivity in the shell is unbeatable.\n"
"And as Alfred North Whitehead wrote in 1911, 'Civilization advances by\n"
"extending the number of important operations which we can perform\n"
"without thinking about them.'"
msgstr ""
"Термінал Unix старіший за більшість людей, які нею користуються. Він\n"
"проіснував так довго, тому що це одне з найпродуктивніших середовищ для програмування,\n"
"коли-небудь створених - можливо, навіть *найпродуктивнішим*. Його синтаксис\n"
"може бути незрозумілим, але люди, які його опанували, можуть експериментувати з\n"
"різними командами в інтерактивному режимі, а потім використовувати те, чого вони навчилися, для\n"
"автоматизації своєї роботи. Графічні інтерфейси користувача можуть бути простішими у використанні\n"
"спочатку, але після того, як після опанування терміналу, продуктивність роботи в ньому буде неперевершеною.\n"
"І як писав Альфред Норт Уайтхед у 1911 році: \"Цивілізація розвивається шляхом\n"
"збільшення кількості важливих операцій, які ми можемо виконувати,\n"
"не замислюючись про них\"."

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:711
msgid "> ## `find` Pipeline Reading Comprehension"
msgstr "> ## Розуміння читання конвеєру `find`"

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:712
msgid "> "
msgstr "> "

# blockquote, which can be cascaded
#: shell-novice/_episodes/07-find.md:713
msgid "> Write a short explanatory comment for the following shell script:"
msgstr ""
"> Напишіть короткий пояснювальний коментар до наступного скрипту термінала:"

#: shell-novice/_episodes/07-find.md:714
msgid ""
">\n"
"> ~~~\n"
"> wc -l $(find . -name \"*.dat\") | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > 1. Find all files with a `.dat` extension recursively from the current directory\n"
"> > 2. Count the number of lines each of these files contains\n"
"> > 3. Sort the output from step 2. numerically"
msgstr ""
">\n"
"> ~~~\n"
"> wc -l $(find . -name \"*.dat\") | sort -n\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> > ## Розв'язання\n"
"> > 1. Рекурсивно знайти всі файли з розширенням `.dat` у поточному каталозі\n"
"> > 2. Підрахувати кількість рядків у кожному з цих файлів\n"
"> > 3. Відсортувати вивід з пункту 2. за числовим значенням"
