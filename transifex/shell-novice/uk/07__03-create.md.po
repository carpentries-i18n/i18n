# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023
# 
msgid ""
msgstr ""
"Project-Id-Version: i18n\n"
"Report-Msgid-Bugs-To: https://github.com/haiwen/seafile-docs/issues\n"
"POT-Creation-Date: 2023-02-12 19:32:08+0000\n"
"PO-Revision-Date: 2023-02-12 19:38+0000\n"
"Last-Translator: Oleksandr Miroshkin <miroshkinan@gmail.com>, 2023\n"
"Language-Team: Ukrainian (https://app.transifex.com/carpentries-i18n/teams/98915/uk/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: uk\n"
"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"

# Front Matter
#: shell-novice/_episodes/03-create.md:1
msgid ""
"---\n"
"title: \"Working With Files and Directories\"\n"
"teaching: 30\n"
"exercises: 20\n"
"questions:\n"
"- \"How can I create, copy, and delete files and directories?\"\n"
"- \"How can I edit files?\"\n"
"objectives:\n"
"- \"Create a directory hierarchy that matches a given diagram.\"\n"
"- \"Create files in that hierarchy using an editor or by copying and renaming existing files.\"\n"
"- \"Delete, copy and move specified files and/or directories.\"\n"
"keypoints:\n"
"- \"`cp [old] [new]` copies a file.\"\n"
"- \"`mkdir [path]` creates a new directory.\"\n"
"- \"`mv [old] [new]` moves (renames) a file or directory.\"\n"
"- \"`rm [path]` removes (deletes) a file.\"\n"
"- \"`*` matches zero or more characters in a filename, so `*.txt` matches all files ending in `.txt`.\"\n"
"- \"`?` matches any single character in a filename, so `?.txt` matches `a.txt` but not `any.txt`.\"\n"
"- \"Use of the Control key may be described in many ways, including `Ctrl-X`, `Control-X`, and `^X`.\"\n"
"- \"The shell does not have a trash bin: once something is deleted, it's really gone.\"\n"
"- \"Most files' names are `something.extension`. The extension isn't required, and doesn't guarantee anything, but is normally used to indicate the type of data in the file.\"\n"
"- \"Depending on the type of work you do, you may need a more powerful text editor than Nano.\"\n"
"---"
msgstr ""
"---\n"
"title: \"Робота з файлами та каталогами\"\n"
"teaching: 30\n"
"exercises: 20\n"
"questions:\n"
"- \"Як я можу створювати, копіювати та видаляти файли і каталоги?\"\n"
"- \"Як я можу редагувати файли?\"\n"
"objectives:\n"
"- \"Створити ієрархію каталогів, яка відповідає заданій схемі.\"\n"
"- \"Створити файли в цій ієрархії за допомогою редактора або шляхом копіювання та перейменування файлів, що вже існують.\"\n"
"- \"Видалити, скопіювати та перемістити вказані файли та/або каталоги.\"\n"
"keypoints:\n"
"- \"`cp [old] [new]` копіює файл.\"\n"
"- \"`mkdir [path]` створює новий каталог.\"\n"
"- \"`mv [old] [new]` переміщує (перейменовує) файл або каталог.\"\n"
"- \"`rm [path]` вилучає (видаляє) файл.\"\n"
"- \"`*` відповідає нулю або більше символів в імені файлу, тому `*.txt` відповідає всім файлам, імена яких закінчуються на `.txt`.\"\n"
"- \"`?` відповідає будь-якому одному символу у назві файлу, тому `?.txt` відповідає `a.txt`, але не `any.txt`.\"\n"
"- \"Використання клавіші Control можна описати різними способами, зокрема `Ctrl-X`, `Control-X` та `^X`..\"\n"
"- \"В терміналі немає корзини: як тільки щось видаляється, воно дійсно зникає.\"\n"
"- \"Більшість файлів мають назву \"щось.розширення\". Розширення не є обов'язковим і нічого не гарантує, але зазвичай використовується для позначення типу даних у файлі.\"\n"
"- \"Залежно від типу роботи, яку ви виконуєте, вам може знадобитися потужніший текстовий редактор, ніж Nano.\"\n"
"---"

# header
#: shell-novice/_episodes/03-create.md:24
msgid "## Creating directories"
msgstr "## Створення каталогів"

#: shell-novice/_episodes/03-create.md:25
msgid ""
"We now know how to explore files and directories,\n"
"but how do we create them in the first place?"
msgstr ""
"Тепер ми знаємо, як досліджувати файли та каталоги,\n"
"але як їх створювати?"

#: shell-novice/_episodes/03-create.md:28
msgid ""
"In this episode we will learn about creating and moving files and directories,\n"
"using the `exercise-data/writing` directory as an example."
msgstr ""
"На цьому уроці ми дізнаємося про створення та переміщення файлів і каталогів\n"
"на прикладі каталогу `exercise-data/writing`."

# header
#: shell-novice/_episodes/03-create.md:31
msgid "### Step one: see where we are and what we already have"
msgstr "### Крок перший: подивіться, де ми знаходимося і що вже маємо"

#: shell-novice/_episodes/03-create.md:32
msgid ""
"We should still be in the `shell-lesson-data` directory on the Desktop,\n"
"which we can check using:"
msgstr ""
"Ми все ще маємо бути у каталозі `shell-lesson-data` на Робочому столі (англ. Desktop),\n"
"що ми можемо перевірити за допомогою:"

#: shell-novice/_episodes/03-create.md:45
msgid ""
"Next we'll move to the `exercise-data/writing` directory and see what it contains:\n"
"~~~\n"
"$ cd exercise-data/writing/\n"
"~~~\n"
"{:  .language-bash}"
msgstr ""
"Далі ми перейдемо до каталогу `exercise-data/writing` і подивимося, що у ньому міститься:\n"
"~~~\n"
"$ cd exercise-data/writing/\n"
"~~~\n"
"{: .language-bash}"

# code block
#: shell-novice/_episodes/03-create.md:56
msgid ""
"~~~\n"
"haiku.txt  LittleWomen.txt\n"
"~~~"
msgstr ""
"~~~\n"
"haiku.txt  LittleWomen.txt\n"
"~~~"

# header
#: shell-novice/_episodes/03-create.md:61
msgid "### Create a directory"
msgstr "### Створення каталогу"

#: shell-novice/_episodes/03-create.md:63
msgid ""
"Let's create a new directory called `thesis` using the command `mkdir thesis`\n"
"(which has no output):"
msgstr ""
"Створимо новий каталог з назвою `theis` за допомогою команди `mkdir thesis`\n"
"(яка не має виводу):"

# code block
#: shell-novice/_episodes/03-create.md:66
msgid ""
"~~~\n"
"$ mkdir thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir thesis\n"
"~~~"

#: shell-novice/_episodes/03-create.md:71
msgid ""
"As you might guess from its name,\n"
"`mkdir` means 'make directory'.\n"
"Since `thesis` is a relative path\n"
"(i.e., does not have a leading slash, like `/what/ever/thesis`),\n"
"the new directory is created in the current working directory:"
msgstr ""
"Як ви можете здогадатися з її назви,\n"
"команда `mkdir` означає 'зробити каталог' (англ. 'make directory').\n"
"Оскільки `thesis` є відносним шляхом\n"
"(тобто не має початкової косої риски, як `/what/ever/thesis`),\n"
"новий каталог буде створено у поточному робочому каталозі:"

# code block
#: shell-novice/_episodes/03-create.md:82
msgid ""
"~~~\n"
"haiku.txt  LittleWomen.txt  thesis/\n"
"~~~"
msgstr ""
"~~~\n"
"haiku.txt  LittleWomen.txt  thesis/\n"
"~~~"

#: shell-novice/_episodes/03-create.md:87
msgid ""
"Since we've just created the `thesis` directory, there's nothing in it yet:"
msgstr "Оскільки ми щойно створили каталог `thesis`, у ньому ще нічого немає:"

# code block
#: shell-novice/_episodes/03-create.md:89
msgid ""
"~~~\n"
"$ ls -F thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -F thesis\n"
"~~~"

#: shell-novice/_episodes/03-create.md:94
msgid ""
"Note that `mkdir` is not limited to creating single directories one at a time.\n"
"The `-p` option allows `mkdir` to create a directory with nested subdirectories\n"
"in a single operation:"
msgstr ""
"Зауважте, що команда `mkdir` не обмежується створенням окремих каталогів по одному.\n"
"Параметр `-p` дозволяє команді `mkdir` створювати каталог із вкладеними підкаталогами\n"
"за одну операцію:"

# code block
#: shell-novice/_episodes/03-create.md:98
msgid ""
"~~~\n"
"$ mkdir -p ../project/data ../project/results\n"
"~~~"
msgstr ""
"~~~\n"
"$ mkdir -p ../project/data ../project/results\n"
"~~~"

#: shell-novice/_episodes/03-create.md:103
msgid ""
"The `-R` option to the `ls` command will list all nested subdirectories within a directory.\n"
"Let's use `ls -FR` to recursively list the new directory hierarchy we just created in the\n"
"`project` directory:"
msgstr ""
"Параметр `-R` до команди `ls` покаже усі вкладені підкаталоги у каталозі.\n"
"Давайте скористаємося `ls -FR` для рекурсивного відображення нової ієрархії каталогів, яку ми щойно створили у\n"
"каталозі `project`:"

# code block
#: shell-novice/_episodes/03-create.md:107
msgid ""
"~~~\n"
"$ ls -FR ../project\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls -FR ../project\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:112
msgid ""
"~~~\n"
"../project/:\n"
"data/  results/\n"
"\n"
"../project/data:\n"
"\n"
"../project/results:\n"
"~~~"
msgstr ""
"~~~\n"
"../project/:\n"
"data/  results/\n"
"\n"
"../project/data:\n"
"\n"
"../project/results:\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:122
msgid "> ## Two ways of doing the same thing"
msgstr "> ## Два способи зробити одне й те саме"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:123
msgid ""
"> Using the shell to create a directory is no different than using a file "
"explorer."
msgstr ""
"> Використання терміналу для створення каталогу нічим не відрізняється від "
"використання файлового провідника."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:124
msgid ""
"> If you open the current directory using your operating system's graphical "
"file explorer,"
msgstr ""
"> Якщо ви відкриваєте поточний каталог за допомогою графічного провідника "
"файлів вашої операційної системи,"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:125
msgid "> the `thesis` directory will appear there too."
msgstr "> там також з'явиться каталог `thesis`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:126
msgid ""
"> While the shell and the file explorer are two different ways of "
"interacting with the files,"
msgstr ""
"> Хоча оболонка і файловий провідник - це два різні способи взаємодії з "
"файлами,"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:127
msgid "> the files and directories themselves are the same."
msgstr "> файли та каталоги одні й ті ж самі."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:130
msgid "> ## Good names for files and directories"
msgstr "> ## Хороші імена для файлів і каталогів"

#: shell-novice/_episodes/03-create.md:131
msgid ""
">\n"
"> Complicated names of files and directories can make your life painful\n"
"> when working on the command line. Here we provide a few useful\n"
"> tips for the names of your files and directories.\n"
">\n"
"> 1. Don't use spaces.\n"
">\n"
">    Spaces can make a name more meaningful,\n"
">    but since spaces are used to separate arguments on the command line\n"
">    it is better to avoid them in names of files and directories.\n"
">    You can use `-` or `_` instead (e.g. `north-pacific-gyre/` rather than `north pacific gyre/`).\n"
">    To test this out, try typing `mkdir north pacific gyre`and see what directory (or directories!)\n"
">    are made when you check with `ls -F`.\n"
">\n"
"> 2. Don't begin the name with `-` (dash).\n"
">\n"
">    Commands treat names starting with `-` as options.\n"
">\n"
"> 3. Stick with letters, numbers, `.` (period or 'full stop'), `-` (dash) and `_` (underscore).\n"
">\n"
">    Many other characters have special meanings on the command line.\n"
">    We will learn about some of these during this lesson.\n"
">    There are special characters that can cause your command to not work as\n"
">    expected and can even result in data loss.\n"
">\n"
"> If you need to refer to names of files or directories that have spaces\n"
"> or other special characters, you should surround the name in quotes (`\"\"`)."
msgstr ""
">\n"
"> Складні назви файлів і каталогів можуть зробити ваше життя болісним\n"
"> під час роботи з командним рядком. Тут ми надаємо кілька корисних\n"
"> підказок щодо назв ваших файлів і каталогів.\n"
">\n"
"> 1. Не використовуйте пробіли.\n"
">\n"
"> Пробіли можуть зробити назву більш змістовною,\n"
"> але оскільки пробіли використовуються для відокремлення аргументів у командному рядку\n"
"> краще уникати їх у назвах файлів і каталогів.\n"
"> Ви можете використовувати `-` або `_` (наприклад, `north-pacific-gyre/` замість `north pacific gyre/`).\n"
"> Щоб перевірити це, спробуйте набрати `mkdir north pacific gyre` і подивіться, який каталог (або каталоги!)\n"
"> буде створено при перевірці за допомогою `ls -F`.\n"
">\n"
"> 2. Не починайте назву з `-` (тире).\n"
">\n"
"> Команди розглядають назви, що починаються з `-`, як опції.\n"
">\n"
"> 3. Використовуйте літери, цифри, `.` (крапка), `-` (тире) і `_` (підкреслення).\n"
">\n"
"> Багато інших символів мають особливе значення у командному рядку.\n"
"> Про деякі з них ми дізнаємося на цьому уроці.\n"
"> Існують спеціальні символи, які можуть призвести до того, що ваша команда працюватиме не так, як\n"
"> очікуваним чином і навіть призвести до втрати даних.\n"
">\n"
"> Якщо вам потрібно звернутися до назв файлів або каталогів, які містять пробіли\n"
"> або інші спеціальні символи, вам слід взяти назву у лапки (`\"\"`)."

# header
#: shell-novice/_episodes/03-create.md:160
msgid "### Create a text file"
msgstr "### Створення текстового файлу"

#: shell-novice/_episodes/03-create.md:161
msgid ""
"Let's change our working directory to `thesis` using `cd`,\n"
"then run a text editor called Nano to create a file called `draft.txt`:"
msgstr ""
"Давайте змінимо наш робочий каталог на `thesis` за допомогою `cd`,\n"
"а потім запустимо текстовий редактор Nano і створимо файл з назвою `draft.txt`:"

# code block
#: shell-novice/_episodes/03-create.md:164
msgid ""
"~~~\n"
"$ cd thesis\n"
"$ nano draft.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cd thesis\n"
"$ nano draft.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:170
msgid "> ## Which Editor?"
msgstr "> ## Який редактор?"

#: shell-novice/_episodes/03-create.md:171
msgid ""
">\n"
"> When we say, '`nano` is a text editor' we really do mean 'text': it can\n"
"> only work with plain character data, not tables, images, or any other\n"
"> human-friendly media. We use it in examples because it is one of the\n"
"> least complex text editors. However, because of this trait, it may\n"
"> not be powerful enough or flexible enough for the work you need to do\n"
"> after this workshop. On Unix systems (such as Linux and macOS),\n"
"> many programmers use [Emacs](http://www.gnu.org/software/emacs/) or\n"
"> [Vim](http://www.vim.org/) (both of which require more time to learn),\n"
"> or a graphical editor such as\n"
"> [Gedit](http://projects.gnome.org/gedit/). On Windows, you may wish to\n"
"> use [Notepad++](http://notepad-plus-plus.org/).  Windows also has a built-in\n"
"> editor called `notepad` that can be run from the command line in the same\n"
"> way as `nano` for the purposes of this lesson.\n"
">\n"
"> No matter what editor you use, you will need to know where it searches\n"
"> for and saves files. If you start it from the shell, it will (probably)\n"
"> use your current working directory as its default location. If you use\n"
"> your computer's start menu, it may want to save files in your desktop or\n"
"> documents directory instead. You can change this by navigating to\n"
"> another directory the first time you 'Save As...'"
msgstr ""
">\n"
"> Коли ми говоримо, що \"nano\" - це текстовий редактор, ми дійсно маємо на увазі \"текст\": він може\n"
"> працювати лише з простими символьними даними, а не з таблицями, зображеннями чи будь-якими іншими\n"
"> зручними для людини даними. Ми використовуємо його у прикладах, тому що це один з\n"
"> найменш складних текстових редакторів. Однак, через цю особливість він може бути\n"
"> недостатньо потужним або гнучким для роботи, яку вам потрібно буде виконати\n"
"> після завершення наших уроків. У системах Unix (таких як Linux та macOS),\n"
"> багато програмістів використовують [Emacs] (http://www.gnu.org/software/emacs/) або\n"
"> [Vim](http://www.vim.org/) (обидва вимагають більше часу на вивчення),\n"
"> або графічний редактор, такий як\n"
"> [Gedit](http://projects.gnome.org/gedit/). У Windows, можливо, ви захочете\n"
"> скористатися [Notepad++] (http://notepad-plus-plus.org/). У Windows також є вбудований\n"
"> редактор з назвою `notepad`, який можна запустити з командного рядка так само\n"
"> чином, як і `nano` для цілей цього уроку.\n"
">\n"
"> Незалежно від того, яким редактором ви користуєтеся, вам потрібно знати, де він шукає\n"
"> і зберігає файли. Якщо ви запускаєте його з командної оболонки, він (ймовірно)\n"
"> використовуватиме ваш поточний робочий каталог як місце за замовчуванням. Якщо ви використовуєте\n"
"> меню \"Пуск\" вашого комп'ютера, можливо, програма захоче зберегти файли на робочому столі або\n"
"> в каталозі документів (Documents) замість цього. Ви можете змінити це, перейшовши до\n"
"> іншого каталогу під час першого виконання команди \"Зберегти як...\"."

#: shell-novice/_episodes/03-create.md:194
msgid ""
"Let's type in a few lines of text.\n"
"Once we're happy with our text, we can press <kbd>Ctrl</kbd>+<kbd>O</kbd>\n"
"(press the <kbd>Ctrl</kbd> or <kbd>Control</kbd> key and, while\n"
"holding it down, press the <kbd>O</kbd> key) to write our data to disk\n"
"(we'll be asked what file we want to save this to:\n"
"press <kbd>Return</kbd> to accept the suggested default of `draft.txt`)."
msgstr ""
"Давайте наберемо кілька рядків тексту.\n"
"Після того, як ми будемо задоволені нашим текстом, ми можемо натиснути <kbd>Ctrl</kbd>+<kbd>O</kbd>\n"
"(натисніть клавішу <kbd>Ctrl</kbd> або <kbd>Control</kbd> і, утримуючи її,\n"
"натиснути клавішу <kbd>O</kbd>), щоб записати наші дані на диск\n"
"(нас запитають, до якого файлу ми хочемо зберегти дані:\n"
"натисніть клавішу <kbd>Return</kbd>, щоб прийняти запропоновану за замовчуванням назву `draft.txt`)."

#: shell-novice/_episodes/03-create.md:201
msgid ""
"<div style=\"width:80%; margin: auto;\"><img alt=\"screenshot of nano text editor in action\"\n"
"src=\"../fig/nano-screenshot.png\"></div>"
msgstr ""
"<div style=\"width:80%; margin: auto;\"><img alt=\"знімок екрану з "
"редактором nano\" src=\"../fig/nano-screenshot.png\"/></div>"

#: shell-novice/_episodes/03-create.md:204
msgid ""
"Once our file is saved, we can use <kbd>Ctrl</kbd>+<kbd>X</kbd> to quit the editor and\n"
"return to the shell."
msgstr ""
"Після збереження файлу ми можемо скористатися комбінацією клавіш <kbd>Ctrl</kbd>+<kbd>X</kbd>, щоб вийти з редактора і\n"
"повернутися до терміналу."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:207
msgid "> ## Control, Ctrl, or ^ Key"
msgstr "> ## Клавіша Control, Ctrl або ^"

#: shell-novice/_episodes/03-create.md:208
msgid ""
">\n"
"> The Control key is also called the 'Ctrl' key. There are various ways\n"
"> in which using the Control key may be described. For example, you may\n"
"> see an instruction to press the <kbd>Control</kbd> key and, while holding it down,\n"
"> press the <kbd>X</kbd> key, described as any of:\n"
">\n"
"> * `Control-X`\n"
"> * `Control+X`\n"
"> * `Ctrl-X`\n"
"> * `Ctrl+X`\n"
"> * `^X`\n"
"> * `C-x`\n"
">\n"
"> In nano, along the bottom of the screen you'll see `^G Get Help ^O WriteOut`.\n"
"> This means that you can use `Control-G` to get help and `Control-O` to save your\n"
"> file."
msgstr ""
">\n"
"> Клавіша Control також називається клавішею Ctrl. Існує декілька способів, в які\n"
"> можна описати використання клавіші Control. Наприклад, ви можете\n"
"> побачити вказівку натиснути клавішу <kbd>Control</kbd> і, утримуючи її натиснутою,\n"
"> натиснути клавішу <kbd>X</kbd>, описану будь-яким з наступних способом:\n"
">\n"
"> * \"Control-X\n"
"> * `Control+X`\n"
"> * \"Ctrl-X\n"
"> * `Ctrl+X`\n"
"> * `^X`\n"
"> * `C-x`\n"
">\n"
"> У nano, у нижній частині екрана ви побачите `^G Отримати довідку ^O Вивести на екран`.\n"
"> Це означає, що ви можете скористатися `Control-G` для отримання довідки і `Control-O` для збереження вашого\n"
"> файлу."

#: shell-novice/_episodes/03-create.md:226
msgid ""
"`nano` doesn't leave any output on the screen after it exits,\n"
"but `ls` now shows that we have created a file called `draft.txt`:"
msgstr ""
"Після завершення роботи команда `nano` не залишає жодних даних на екрані,\n"
"але `ls` тепер показує, що ми створили файл з назвою `draft.txt`:"

# code block
#: shell-novice/_episodes/03-create.md:234
msgid ""
"~~~\n"
"draft.txt\n"
"~~~"
msgstr ""
"~~~\n"
"draft.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:239
msgid "> ## Creating Files a Different Way"
msgstr "> ## Створення файлів іншим способом"

#: shell-novice/_episodes/03-create.md:240
msgid ""
">\n"
"> We have seen how to create text files using the `nano` editor.\n"
"> Now, try the following command:\n"
">\n"
"> ~~~\n"
"> $ touch my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1.  What did the `touch` command do?\n"
">     When you look at your current directory using the GUI file explorer,\n"
">     does the file show up?\n"
">\n"
"> 2.  Use `ls -l` to inspect the files.  How large is `my_file.txt`?\n"
">\n"
"> 3.  When might you want to create a file this way?\n"
">\n"
"> > ## Solution\n"
"> > 1.  The `touch` command generates a new file called `my_file.txt` in\n"
"> >     your current directory.  You\n"
"> >     can observe this newly generated file by typing `ls` at the\n"
"> >     command line prompt.  `my_file.txt` can also be viewed in your\n"
"> >     GUI file explorer.\n"
"> >\n"
"> > 2.  When you inspect the file with `ls -l`, note that the size of\n"
"> >     `my_file.txt` is 0 bytes.  In other words, it contains no data.\n"
"> >     If you open `my_file.txt` using your text editor it is blank.\n"
"> >\n"
"> > 3.  Some programs do not generate output files themselves, but\n"
"> >     instead require that empty files have already been generated.\n"
"> >     When the program is run, it searches for an existing file to\n"
"> >     populate with its output.  The touch command allows you to\n"
"> >     efficiently generate a blank text file to be used by such\n"
"> >     programs."
msgstr ""
">\n"
"> Ми побачили, як створювати текстові файли за допомогою редактора `nano`.\n"
"> Тепер спробуйте виконати наступну команду:\n"
">\n"
"> ~~~\n"
"> $ touch my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> 1. Що зробила команда `touch`?\n"
"> Коли ви дивитеся на ваш поточний каталог за допомогою провідника файлів у графічному інтерфейсі,\n"
"> чи відображається файл?\n"
">\n"
"> 2. Використовуйте `ls -l` для перегляду файлів. Який розмір має файл `my_file.txt`?\n"
">\n"
"> 3. Коли вам може знадобитися створити файл у такий спосіб?\n"
">\n"
"> > Розв'язання\n"
"> > 1. Команда `touch` створює новий файл з назвою `my_file.txt` у\n"
"> > вашому поточному каталозі. Ви\n"
"> > можете переглянути цей новостворений файл, набравши `ls` у\n"
"> > командному рядку. Файл `my_file.txt` також можна переглянути у вашому\n"
"> > графічному провіднику файлів.\n"
"> >\n"
"> > 2. Коли ви перевіряєте файл за допомогою `ls -l`, зверніть увагу, що розмір\n"
"> > `my_file.txt` дорівнює 0 байт. Іншими словами, він не містить жодних даних.\n"
"> > Якщо ви відкриєте `my_file.txt` за допомогою текстового редактора, він буде порожнім.\n"
"> >\n"
"> > 3. Деякі програми самі не створюють вихідні файли, а\n"
"> > натомість вимагають, щоб порожні файли вже було створено.\n"
"> > Під час запуску програма шукає існуючий файл, щоб\n"
"> > заповнити його своїми даними. За допомогою команди touch можна\n"
"> > ефективно створити порожній текстовий файл для подальшого використання такими\n"
"> > програмами."

#: shell-novice/_episodes/03-create.md:275
msgid ""
">\n"
"> To avoid confusion later on,\n"
"> we suggest removing the file you've just created before proceeding with the rest\n"
"> of the episode, otherwise future outputs may vary from those given in the lesson.\n"
"> To do this, use the following command:\n"
">\n"
"> ~~~\n"
"> $ rm my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}"
msgstr ""
">\n"
"> Щоб уникнути плутанини в подальшому,\n"
"> радимо видалити файл, який ви щойно створили, перед тим, як переходити до решти\n"
"> епізоду, інакше майбутні результати можуть відрізнятися від наведених в уроці.\n"
"> Для цього скористайтеся наступною командою:\n"
">\n"
"> ~~~\n"
"> $ rm my_file.txt\n"
"> ~~~\n"
"> {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:287
msgid "> ## What's In A Name?"
msgstr "> ## Що ховається в імені?"

#: shell-novice/_episodes/03-create.md:288
msgid ""
">\n"
"> You may have noticed that all of Nelle's files are named 'something dot\n"
"> something', and in this part of the lesson, we always used the extension\n"
"> `.txt`.  This is just a convention: we can call a file `mythesis` or\n"
"> almost anything else we want. However, most people use two-part names\n"
"> most of the time to help them (and their programs) tell different kinds\n"
"> of files apart. The second part of such a name is called the\n"
"> **filename extension** and indicates\n"
"> what type of data the file holds: `.txt` signals a plain text file, `.pdf`\n"
"> indicates a PDF document, `.cfg` is a configuration file full of parameters\n"
"> for some program or other, `.png` is a PNG image, and so on.\n"
">\n"
"> This is just a convention, albeit an important one. Files contain\n"
"> bytes: it's up to us and our programs to interpret those bytes\n"
"> according to the rules for plain text files, PDF documents, configuration\n"
"> files, images, and so on.\n"
">\n"
"> Naming a PNG image of a whale as `whale.mp3` doesn't somehow\n"
"> magically turn it into a recording of whale song, though it *might*\n"
"> cause the operating system to try to open it with a music player\n"
"> when someone double-clicks it."
msgstr ""
">\n"
"> Ви, мабуть, помітили, що всі файли Неллі називаються 'щось крапка\n"
"> щось\", і у цій частині уроку ми завжди використовували розширення\n"
"> `.txt`. Це лише умовність: ми можемо назвати файл `mythesis` або\n"
"> майже як завгодно. Однак, більшість людей використовують назви, що складаються з двох частин\n"
"> здебільшого для того, щоб допомогти їм (і їхнім програмам) розрізняти різні типи\n"
"> файлів. Друга частина такого імені називається\n"
"> **розширенням файлу** і вказує\n"
"> тип даних у файлі: `.txt` вказує на звичайний текстовий файл, `.pdf`\n"
"> вказує на PDF-документ, `.cfg` - це конфігураційний файл з параметрами\n"
"> для тієї чи іншої програми, `.png` - зображення у форматі PNG, і так далі.\n"
">\n"
"> Це лише умовність, хоча й важлива. Файли містять\n"
"> байти: ми та наші програми повинні інтерпретувати ці байти\n"
"> відповідно до правил для звичайних текстових файлів, PDF-документів, конфігураційних\n"
"> файлів, зображень тощо.\n"
">\n"
"> Якщо ви назвете зображення кита у форматі PNG як \"whale.mp3\", це не перетворить його якимось\n"
"> чарівним чином на запис пісні кита, хоча це *може*\n"
"> змусити операційну систему спробувати відкрити його за допомогою музичного плеєра.\n"
"> коли хтось двічі клікне на ньому."

# header
#: shell-novice/_episodes/03-create.md:311
msgid "## Moving files and directories"
msgstr "## Переміщення файлів і каталогів"

#: shell-novice/_episodes/03-create.md:312
msgid "Returning to the `shell-lesson-data/exercise-data/writing` directory,"
msgstr "Повернемося до каталогу `shell-lesson-data/exercise-data/writing`,"

# code block
#: shell-novice/_episodes/03-create.md:314
msgid ""
"```\n"
"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing\n"
"```"
msgstr ""
"```\n"
"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing\n"
"```"

#: shell-novice/_episodes/03-create.md:319
msgid ""
"In our `thesis` directory we have a file `draft.txt`\n"
"which isn't a particularly informative name,\n"
"so let's change the file's name using `mv`,\n"
"which is short for 'move':"
msgstr ""
"У нашому каталозі `thesis` є файл `draft.txt`.\n"
"з не надто інформативною назвою,\n"
"тому давайте змінимо назву файлу за допомогою команди `mv`,\n"
"що є скороченням від 'move' (з англ. - 'переміщати'):"

# code block
#: shell-novice/_episodes/03-create.md:324
msgid ""
"~~~\n"
"$ mv thesis/draft.txt thesis/quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ mv thesis/draft.txt thesis/quotes.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:329
msgid ""
"The first argument tells `mv` what we're 'moving',\n"
"while the second is where it's to go.\n"
"In this case,\n"
"we're moving `thesis/draft.txt` to `thesis/quotes.txt`,\n"
"which has the same effect as renaming the file.\n"
"Sure enough,\n"
"`ls` shows us that `thesis` now contains one file called `quotes.txt`:"
msgstr ""
"Перший аргумент говорить \"mv\", що ми 'переміщаємо',\n"
"а другий - куди саме.\n"
"У цьому випадку\n"
"ми переміщуємо `theis/draft.txt` до `theis/quotes.txt`,\n"
"що має той самий ефект, що і перейменування файлу.\n"
"Звісно,\n"
"`ls` показує нам, що `thesis` тепер містить один файл з назвою `quotes.txt`:"

# code block
#: shell-novice/_episodes/03-create.md:337
#: shell-novice/_episodes/03-create.md:371
msgid ""
"~~~\n"
"$ ls thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls thesis\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:342
#: shell-novice/_episodes/03-create.md:403
msgid ""
"~~~\n"
"quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"quotes.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:347
msgid ""
"One must be careful when specifying the target file name, since `mv` will\n"
"silently overwrite any existing file with the same name, which could\n"
"lead to data loss. An additional option, `mv -i` (or `mv --interactive`),\n"
"can be used to make `mv` ask you for confirmation before overwriting."
msgstr ""
"Слід бути обережним при вказівці імені цільового файлу, оскільки `mv`\n"
"приховано перезапише будь-який файл, що вже існує, з такою самою назвою, а це може призвести до\n"
"втрати даних. Додатковий параметр `mv -i` (або `mv --interactive`, з англ. - 'інтерактивно'),\n"
"може бути використано для того, щоб змусити `mv` запитувати у вас підтвердження перед перезаписом."

#: shell-novice/_episodes/03-create.md:352
msgid "Note that `mv` also works on directories."
msgstr "Зверніть увагу, що `mv` також працює з каталогами."

#: shell-novice/_episodes/03-create.md:354
msgid ""
"Let's move `quotes.txt` into the current working directory.\n"
"We use `mv` once again,\n"
"but this time we'll use just the name of a directory as the second argument\n"
"to tell `mv` that we want to keep the filename\n"
"but put the file somewhere new.\n"
"(This is why the command is called 'move'.)\n"
"In this case,\n"
"the directory name we use is the special directory name `.` that we mentioned earlier."
msgstr ""
"Перемістимо `quotes.txt` до поточного робочого каталогу.\n"
"Знову скористаємося `mv`,\n"
"але цього разу ми використаємо лише назву каталогу як другий аргумент\n"
"щоб повідомити `mv`, що ми хочемо зберегти назву файлу\n"
"але перемістити файл у нове місце.\n"
"(Ось чому команда називається 'перемістити').\n"
"У цьому випадку\n"
"ми використовуємо спеціальну назву `.` поточного каталогу, про яку ми згадували раніше."

# code block
#: shell-novice/_episodes/03-create.md:363
msgid ""
"~~~\n"
"$ mv thesis/quotes.txt .\n"
"~~~"
msgstr ""
"~~~\n"
"$ mv thesis/quotes.txt .\n"
"~~~"

#: shell-novice/_episodes/03-create.md:368
msgid ""
"The effect is to move the file from the directory it was in to the current working directory.\n"
"`ls` now shows us that `thesis` is empty:"
msgstr ""
"Наслідком цього буде переміщення файла з каталогу, у якому він знаходився, до поточного робочого каталогу.\n"
"Тепер `ls` показує нам, що `thesis` порожній:"

#: shell-novice/_episodes/03-create.md:381
msgid ""
"Alternatively, we can confirm the file `quotes.txt` is no longer present in the `thesis` directory\n"
"by explicitly trying to list it:"
msgstr ""
"Крім того, ми можемо переконатися, що файл `quotes.txt` більше не присутній у каталозі `thesis`,\n"
"явно спробувавши показати інформацію про нього:"

# code block
#: shell-novice/_episodes/03-create.md:384
msgid ""
"~~~\n"
"$ ls thesis/quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls thesis/quotes.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:389
msgid ""
"```\n"
"ls: cannot access 'thesis/quotes.txt': No such file or directory\n"
"```"
msgstr ""
"```\n"
"ls: cannot access 'thesis/quotes.txt': No such file or directory\n"
"```"

#: shell-novice/_episodes/03-create.md:394
msgid ""
"`ls` with a filename or directory as an argument only lists the requested file or directory.\n"
"If the file given as the argument doesn't exist, the shell returns an error as we saw above.\n"
"We can use this to see that `quotes.txt` is now present in our current directory:"
msgstr ""
"Команда `ls` з ім'ям файлу або каталогу в якості аргументу виводить лише список запитуваних файлів або каталогів.\n"
"Якщо файл, вказаний як аргумент, не існує, термінал поверне помилку, як ми бачили вище.\n"
"Ми можемо скористатися цим, щоб побачити, що файл `quotes.txt` знаходиться у нашому поточному каталозі:"

# code block
#: shell-novice/_episodes/03-create.md:398
#: shell-novice/_episodes/03-create.md:575
msgid ""
"~~~\n"
"$ ls quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ ls quotes.txt\n"
"~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:408
msgid "> ## Moving Files to a new folder"
msgstr "> ## Переміщення файлів до нової папки"

#: shell-novice/_episodes/03-create.md:409
msgid ""
">\n"
"> After running the following commands,\n"
"> Jamie realizes that she put the files `sucrose.dat` and `maltose.dat` into the wrong folder.\n"
"> The files should have been placed in the `raw` folder.\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
">  analyzed/ raw/\n"
"> $ ls -F analyzed\n"
"> fructose.dat glucose.dat maltose.dat sucrose.dat\n"
"> $ cd analyzed\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Fill in the blanks to move these files to the `raw/` folder\n"
"> (i.e. the one she forgot to put them in)\n"
">\n"
"> ~~~\n"
"> $ mv sucrose.dat maltose.dat ____/____\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ mv sucrose.dat maltose.dat ../raw\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Recall that `..` refers to the parent directory (i.e. one above the current directory)\n"
"> > and that `.` refers to the current directory."
msgstr ""
">\n"
"> Після виконання наступних команд\n"
"> Джеймі зрозуміла, що поклала файли `sucrose.dat` та `maltose.dat` не до того каталогу.\n"
"> Файли потрібно було покласти у каталог `raw`.\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> analyzed/ raw/\n"
"> $ ls -F analyzed\n"
"> fructose.dat glucose.dat maltose.dat sucrose.dat\n"
"> $ cd analyzed\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Заповніть пропуски, щоб перемістити ці файли до теки `raw/`.\n"
"> (тобто туди, куди вона забула їх покласти)\n"
">\n"
"> ~~~\n"
"> $ mv sucrose.dat maltose.dat ____/____\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> > ## Рішення\n"
"> > ```\n"
"> > $ mv sucrose.dat maltose.dat ../raw\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Пам'ятайте, що `..` вказує на батьківський каталог (тобто на каталог, розташований вище поточного)\n"
"> > і що `.` вказує на поточний каталог."

# header
#: shell-novice/_episodes/03-create.md:440
msgid "## Copying files and directories"
msgstr "## Копіювання файлів і каталогів"

#: shell-novice/_episodes/03-create.md:442
msgid ""
"The `cp` command works very much like `mv`,\n"
"except it copies a file instead of moving it.\n"
"We can check that it did the right thing using `ls`\n"
"with two paths as arguments --- like most Unix commands,\n"
"`ls` can be given multiple paths at once:"
msgstr ""
"Команда `cp` працює дуже схоже на команду `mv`,\n"
"за винятком того, що вона копіює файл, а не переміщує його.\n"
"Ми можемо перевірити правильність її роботи за допомогою `ls`\n"
"з двома шляхами в якості аргументів --- як і більшості команд Unix,\n"
"команді `ls` можна вказати одразу декілька шляхів:"

# code block
#: shell-novice/_episodes/03-create.md:448
msgid ""
"~~~\n"
"$ cp quotes.txt thesis/quotations.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ cp quotes.txt thesis/quotations.txt\n"
"$ ls quotes.txt thesis/quotations.txt\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:454
msgid ""
"~~~\n"
"quotes.txt   thesis/quotations.txt\n"
"~~~"
msgstr ""
"~~~\n"
"quotes.txt   thesis/quotations.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:459
msgid ""
"We can also copy a directory and all its contents by using the\n"
"[recursive](https://en.wikipedia.org/wiki/Recursion) option `-r`,\n"
"e.g. to back up a directory:"
msgstr ""
"Ми також можемо скопіювати каталог і весь його вміст за допомогою\n"
"[рекурсивної](https://uk.wikipedia.org/wiki/Рекурсія) опції `-r`,\n"
"наприклад, для створення резервної копії каталогу:"

# code block
#: shell-novice/_episodes/03-create.md:463
msgid ""
"```\n"
"$ cp -r thesis thesis_backup\n"
"```"
msgstr ""
"```\n"
"$ cp -r thesis thesis_backup\n"
"```"

#: shell-novice/_episodes/03-create.md:468
msgid ""
"We can check the result by listing the contents of both the `thesis` and "
"`thesis_backup` directory:"
msgstr ""
"Ми можемо перевірити результат, переглянувши вміст каталогів `thesis` та "
"`thesis_backup`:"

# code block
#: shell-novice/_episodes/03-create.md:470
msgid ""
"```\n"
"$ ls thesis thesis_backup\n"
"```"
msgstr ""
"```\n"
"$ ls thesis thesis_backup\n"
"```"

# code block
#: shell-novice/_episodes/03-create.md:475
msgid ""
"```\n"
"thesis:\n"
"quotations.txt\n"
"\n"
"thesis_backup:\n"
"quotations.txt\n"
"```"
msgstr ""
"```\n"
"thesis:\n"
"quotations.txt\n"
"\n"
"thesis_backup:\n"
"quotations.txt\n"
"```"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:485
msgid "> ## Renaming Files"
msgstr "> ## Перейменування файлів"

#: shell-novice/_episodes/03-create.md:486
msgid ""
">\n"
"> Suppose that you created a plain-text file in your current directory to contain a list of the\n"
"> statistical tests you will need to do to analyze your data, and named it: `statstics.txt`\n"
">\n"
"> After creating and saving this file you realize you misspelled the filename! You want to\n"
"> correct the mistake, which of the following commands could you use to do so?\n"
">\n"
"> 1. `cp statstics.txt statistics.txt`\n"
"> 2. `mv statstics.txt statistics.txt`\n"
"> 3. `mv statstics.txt .`\n"
"> 4. `cp statstics.txt .`\n"
">\n"
"> > ## Solution\n"
"> > 1. No.  While this would create a file with the correct name,\n"
"> > the incorrectly named file still exists in the directory\n"
"> > and would need to be deleted.\n"
"> > 2. Yes, this would work to rename the file.\n"
"> > 3. No, the period(.) indicates where to move the file, but does not provide a new file name;\n"
"> > identical file names\n"
"> > cannot be created.\n"
"> > 4. No, the period(.) indicates where to copy the file, but does not provide a new file name;\n"
"> > identical file names cannot be created."
msgstr ""
">\n"
"> Припустімо, що ви створили у поточному каталозі файл простого тексту, який містить список статистичних тестів, які\n"
"> вам знадобляться для аналізу ваших даних, і назвали його: `statstics.txt`.\n"
">\n"
"> Після створення і збереження цього файлу ви зрозуміли, що неправильно написали назву файлу! Ви хочете\n"
"> виправити помилку, яку з наведених нижче команд ви можете використати для цього?\n"
">\n"
"> 1. `cp statstics.txt статистика.txt\n"
"> 2. `mv statstics.txt статистика.txt\n"
"> 3. `mv statstics.txt .`\n"
"> 4. `cp statstics.txt .`\n"
">\n"
"> > ## Розв'язок\n"
"> > 1. Ні. Хоча це створить файл з правильною назвою,\n"
"> > неправильно названий файл все одно існуватиме у каталозі,\n"
"> > і його потрібно буде видалити.\n"
"> > 2. Так, це допоможе перейменувати файл.\n"
"> > 3. Ні, крапка (.) вказує, куди перемістити файл, але не надає нового імені файлу;\n"
"> > однакові назви файлів\n"
"> > не можуть бути створені.\n"
"> > 4. Ні, крапка (.) вказує, куди скопіювати файл, але не надає нового імені файлу;\n"
"> > не можна створювати однакові імена файлів."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:511
msgid "> ## Moving and Copying"
msgstr "> ## Переміщення та копіювання"

#: shell-novice/_episodes/03-create.md:512
msgid ""
">\n"
"> What is the output of the closing `ls` command in the sequence shown below?\n"
">\n"
"> ~~~\n"
"> $ pwd\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> /Users/jamie/data\n"
"> ~~~"
msgstr ""
">\n"
"> Що виводить остання команда `ls` у наведеній нижче послідовності?\n"
">\n"
"> ~~~\n"
"> $ pwd\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> /Users/jamie/data\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:523
#: shell-novice/_episodes/03-create.md:525
#: shell-novice/_episodes/03-create.md:527
#: shell-novice/_episodes/03-create.md:529
#: shell-novice/_episodes/03-create.md:531
#: shell-novice/_episodes/03-create.md:536
#: shell-novice/_episodes/03-create.md:672
#: shell-novice/_episodes/03-create.md:674
#: shell-novice/_episodes/03-create.md:881
#: shell-novice/_episodes/03-create.md:883
#: shell-novice/_episodes/03-create.md:885
#: shell-novice/_episodes/03-create.md:887
msgid "> ~~~"
msgstr "> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:524
#: shell-novice/_episodes/03-create.md:535
msgid "> $ ls"
msgstr "> $ ls"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:526
#: shell-novice/_episodes/03-create.md:537
#: shell-novice/_episodes/03-create.md:675
#: shell-novice/_episodes/03-create.md:884
msgid "> {: .language-bash}"
msgstr "> {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:528
msgid "> proteins.dat"
msgstr "> proteins.dat"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:532
msgid "> $ mkdir recombined"
msgstr "> $ mkdir recombined"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:533
msgid "> $ mv proteins.dat recombined/"
msgstr "> $ mv proteins.dat recombined/"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:534
msgid "> $ cp recombined/proteins.dat ../proteins-saved.dat"
msgstr "> $ cp recombined/proteins.dat ../proteins-saved.dat"

#: shell-novice/_episodes/03-create.md:538
msgid ""
">\n"
">\n"
"> 1.   `proteins-saved.dat recombined`\n"
"> 2.   `recombined`\n"
"> 3.   `proteins.dat recombined`\n"
"> 4.   `proteins-saved.dat`\n"
">\n"
"> > ## Solution\n"
"> > We start in the `/Users/jamie/data` directory, and create a new folder called `recombined`.\n"
"> > The second line moves (`mv`) the file `proteins.dat` to the new folder (`recombined`).\n"
"> > The third line makes a copy of the file we just moved.\n"
"> > The tricky part here is where the file was copied to.\n"
"> > Recall that `..` means 'go up a level', so the copied file is now in `/Users/jamie`.\n"
"> > Notice that `..` is interpreted with respect to the current working\n"
"> > directory, **not** with respect to the location of the file being copied.\n"
"> > So, the only thing that will show using ls (in `/Users/jamie/data`) is the recombined folder.\n"
"> >\n"
"> > 1. No, see explanation above.  `proteins-saved.dat` is located at `/Users/jamie`\n"
"> > 2. Yes\n"
"> > 3. No, see explanation above.  `proteins.dat` is located at `/Users/jamie/data/recombined`\n"
"> > 4. No, see explanation above.  `proteins-saved.dat` is located at `/Users/jamie`"
msgstr ""
">\n"
">\n"
"> 1. `proteins-saved.dat рекомбіновано\n"
"> 2. `recombined`\n"
"> 3. `proteins.dat recombined`.\n"
"> 4. `proteins-saved.dat`.\n"
">\n"
"> > ## Рішення\n"
"> > Ми розпочинаємо в каталозі `/Users/jamie/data` і створюємо нову папку з назвою `recombined`.\n"
"> > Другий рядок переміщує (`mv`) файл `proteins.dat` до нового каталогу (`recombined`).\n"
"> > Третій рядок робить копію файлу, який ми щойно перемістили.\n"
"> > Складність полягає у тому, куди саме було скопійовано файл.\n"
"> > Нагадаємо, що `..` означає \"піднятися на рівень вище\", тому скопійований файл тепер знаходиться у `/Users/jamie`.\n"
"> > Зверніть увагу, що `..` інтерпретується відносно поточного робочого\n"
"> > каталогу, а **не** відносно розташування файла, який копіюється.\n"
"> > Отже, єдине, що буде показано за допомогою команди `ls` (у `/Users/jamie/data`) - це каталог `recombined`.\n"
"> >\n"
"> > 1. Ні, див. пояснення вище. Каталог `proteins-saved.dat` розташовано у каталозі `/Users/jamie`.\n"
"> > 2. Так\n"
"> > 3. Ні, див. пояснення вище. Файл `proteins.dat` знаходиться в каталозі `/Users/jamie/data/recombined`.\n"
"> > 4. Ні, див. пояснення вище. Файл `proteins-saved.dat` знаходиться в каталозі `/Users/jamie`."

# header
#: shell-novice/_episodes/03-create.md:562
msgid "## Removing files and directories"
msgstr "## Видалення файлів і каталогів"

#: shell-novice/_episodes/03-create.md:564
msgid ""
"Returning to the `shell-lesson-data/exercise-data/writing` directory,\n"
"let's tidy up this directory by removing the `quotes.txt` file we created.\n"
"The Unix command we'll use for this is `rm` (short for 'remove'):"
msgstr ""
"Повертаючись до каталогу `shell-lesson-data/exercise-data/writing`,\n"
"давайте почистимо цей каталог, видаливши створений нами файл `quotes.txt`.\n"
"Для цього ми скористаємося командою Unix `rm` (скорочення від англ. `remove` - видаляти):"

# code block
#: shell-novice/_episodes/03-create.md:568
msgid ""
"~~~\n"
"$ rm quotes.txt\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm quotes.txt\n"
"~~~"

#: shell-novice/_episodes/03-create.md:573
msgid "We can confirm the file has gone using `ls`:"
msgstr "Ми можемо підтвердити, що файл був видалений, за допомогою `ls`:"

# code block
#: shell-novice/_episodes/03-create.md:580
msgid ""
"```\n"
"ls: cannot access 'quotes.txt': No such file or directory\n"
"```"
msgstr ""
"```\n"
"ls: cannot access 'quotes.txt': No such file or directory\n"
"```"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:585
msgid "> ## Deleting Is Forever"
msgstr "> ## Команда `ls` видаляє назавжди"

#: shell-novice/_episodes/03-create.md:586
msgid ""
">\n"
"> The Unix shell doesn't have a trash bin that we can recover deleted\n"
"> files from (though most graphical interfaces to Unix do).  Instead,\n"
"> when we delete files, they are unlinked from the file system so that\n"
"> their storage space on disk can be recycled. Tools for finding and\n"
"> recovering deleted files do exist, but there's no guarantee they'll\n"
"> work in any particular situation, since the computer may recycle the\n"
"> file's disk space right away."
msgstr ""
">\n"
"> В терміналу Unix немає кошика, з якого можна було б відновити видалені\n"
"> файли (хоча у більшості графічних інтерфейсів Unix він є). Замість цього\n"
"> коли ми видаляємо файли, вони від'єднуються від файлової системи, щоб\n"
"> їх місце на диску можна було використовувати повторно. Інструменти для пошуку та\n"
"> відновлення видалених файлів існують, але немає жодних гарантій, що вони\n"
"> працюватимуть у кожній конкретній ситуації, оскільки комп'ютер може повторно використати\n"
"> місце на диску, яке займав файл, одразу ж."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:597
msgid "> ## Using `rm` Safely"
msgstr "> ## Безпечне використання `rm`"

#: shell-novice/_episodes/03-create.md:598
msgid ""
">\n"
"> What happens when we execute `rm -i thesis_backup/quotations.txt`?\n"
"> Why would we want this protection when using `rm`?\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > rm: remove regular file 'thesis_backup/quotations.txt'? y\n"
"> > ```\n"
"> > {: .output}\n"
"> > The `-i` option will prompt before (every) removal (use <kbd>Y</kbd> to confirm deletion\n"
"> > or <kbd>N</kbd> to keep the file).\n"
"> > The Unix shell doesn't have a trash bin, so all the files removed will disappear forever.\n"
"> > By using the `-i` option, we have the chance to check that we are deleting only the files\n"
"> > that we want to remove."
msgstr ""
" >\n"
"> Що відбувається, коли ми виконуємо `rm -i thesis_backup/quotations.txt`?\n"
"> Навіщо нам потрібен цей захист при використанні `rm`?\n"
">\n"
"> > ## Рішення\n"
"> > ```\n"
"> > rm: видалити звичайний файл 'thesis_backup/quotations.txt'? y\n"
"> > ```\n"
"> > {: .output}\n"
"> > Параметр `-i` буде запитуватися перед (кожним) вилученням (використовуйте <kbd>Y</kbd> для підтвердження вилучення\n"
"> > або <kbd>N</kbd>, щоб зберегти файл).\n"
"> > У командному терміналі Unix немає кошика для сміття, тому всі вилучені файли зникнуть назавжди.\n"
"> > За допомогою опції `-i` ми можемо перевірити, що видаляємо лише ті файли,\n"
"> які ми хочемо видалити."

#: shell-novice/_episodes/03-create.md:616
msgid ""
"If we try to remove the `thesis` directory using `rm thesis`,\n"
"we get an error message:"
msgstr ""
"Якщо ми спробуємо видалити каталог `thesis` за допомогою `rm thesis`,\n"
"ми отримаємо повідомлення про помилку:"

# code block
#: shell-novice/_episodes/03-create.md:619
msgid ""
"~~~\n"
"$ rm thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm thesis\n"
"~~~"

# code block
#: shell-novice/_episodes/03-create.md:624
msgid ""
"~~~\n"
"rm: cannot remove `thesis': Is a directory\n"
"~~~"
msgstr ""
"~~~\n"
"rm: cannot remove `thesis': Is a directory\n"
"~~~"

#: shell-novice/_episodes/03-create.md:629
msgid ""
"This happens because `rm` by default only works on files, not directories."
msgstr ""
"Це відбувається тому, що команда `rm` за замовчуванням працює лише з "
"файлами, а не з каталогами."

#: shell-novice/_episodes/03-create.md:631
msgid ""
"`rm` can remove a directory *and all its contents* if we use the\n"
"recursive option `-r`, and it will do so *without any confirmation prompts*:"
msgstr ""
"Команда `rm` може видалити каталог *і весь його вміст*, якщо ми використаємо\n"
"рекурсивний параметр `-r`, і вона зробить це *без жодних запитів на підтвердження*:"

# code block
#: shell-novice/_episodes/03-create.md:634
msgid ""
"~~~\n"
"$ rm -r thesis\n"
"~~~"
msgstr ""
"~~~\n"
"$ rm -r thesis\n"
"~~~"

#: shell-novice/_episodes/03-create.md:639
msgid ""
"Given that there is no way to retrieve files deleted using the shell,\n"
"`rm -r` *should be used with great caution*\n"
"(you might consider adding the interactive option `rm -r -i`)."
msgstr ""
"Враховуючи, що немає можливості відновити файли, видалені за допомогою терміналу,\n"
"`rm -r` *слід використовувати з великою обережністю*.\n"
"(ви можете розглянути можливість додавання інтерактивного параметра `rm -r -i`)."

# header
#: shell-novice/_episodes/03-create.md:643
msgid "## Operations with multiple files and directories"
msgstr "## Операції з декількома файлами та каталогами"

#: shell-novice/_episodes/03-create.md:645
msgid ""
"Oftentimes one needs to copy or move several files at once.\n"
"This can be done by providing a list of individual filenames,\n"
"or specifying a naming pattern using wildcards."
msgstr ""
"Часто потрібно скопіювати або перемістити кілька файлів одночасно.\n"
"Це можна зробити, надавши список імен окремих файлів,\n"
"або вказати шаблон імен за допомогою підстановочних знаків."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:649
msgid "> ## Copy with Multiple Filenames"
msgstr "> ## Копіювання з кількома іменами файлів"

#: shell-novice/_episodes/03-create.md:650
msgid ""
">\n"
"> For this exercise, you can test the commands in the `shell-lesson-data/exercise-data` directory.\n"
">\n"
"> In the example below, what does `cp` do when given several filenames and a directory name?\n"
">\n"
"> ~~~\n"
"> $ mkdir backup\n"
"> $ cp creatures/minotaur.dat creatures/unicorn.dat backup/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> In the example below, what does `cp` do when given three or more file names?\n"
">\n"
"> ~~~\n"
"> $ cd creatures\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> basilisk.dat  minotaur.dat  unicorn.dat\n"
"> ~~~"
msgstr ""
">\n"
"> Для цієї вправи ви можете протестувати команди з каталогу `shell-lesson-data/exercise-data`.\n"
">\n"
"> Що робить команда `cp` у наведеному нижче прикладі, коли їй задано декілька імен файлів і назву каталогу?\n"
">\n"
"> ~~~\n"
"> $ mkdir backup\n"
"> $ cp creatures/minotaur.dat creatures/unicorn.dat backup/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Що робить команда `cp` у наведеному нижче прикладі, коли їй задано три або більше імен файлів?\n"
">\n"
"> ~~~\n"
"> $ cd creatures\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> basilisk.dat minotaur.dat unicorn.dat\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:673
msgid "> $ cp minotaur.dat unicorn.dat basilisk.dat"
msgstr "> $ cp minotaur.dat unicorn.dat basilisk.dat"

#: shell-novice/_episodes/03-create.md:676
msgid ""
">\n"
"> > ## Solution\n"
"> > If given more than one file name followed by a directory name\n"
"> > (i.e. the destination directory must be the last argument),\n"
"> > `cp` copies the files to the named directory.\n"
"> >\n"
"> > If given three file names, `cp` throws an error such as the one below,\n"
"> > because it is expecting a directory name as the last argument.\n"
"> >\n"
"> > ```\n"
"> > cp: target 'basilisk.dat' is not a directory\n"
"> > ```\n"
"> > {: .error}"
msgstr ""
">\n"
"> > ## Розв'язання\n"
"> Якщо задано більше одного імені файлу, за яким наведене ім'я каталогу,\n"
"> > (тобто, каталог призначення має бути останнім аргументом),\n"
"> > команда `cp` копіює файли до вказаного каталогу.\n"
"> >\n"
"> > Якщо задано три імені файлів, `cp` видасть помилку, подібну до наведеної нижче,\n"
"> > оскільки очікує отримати ім'я каталогу як останній аргумент.\n"
"> >\n"
"> > ```\n"
"> > cp: target 'basilisk.dat' не є каталогом\n"
"> > ```\n"
"> > {: .error}"

# header
#: shell-novice/_episodes/03-create.md:692
msgid "### Using wildcards for accessing multiple files at once"
msgstr ""
"### Використання підстановочних знаків для доступу до кількох файлів "
"одночасно"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:694
#: shell-novice/_episodes/07-find.md:279
msgid "> ## Wildcards"
msgstr "> ## Підстановочні символи"

#: shell-novice/_episodes/03-create.md:695
msgid ""
">\n"
"> `*` is a **wildcard**, which matches zero or more  characters.\n"
"> Let's consider the `shell-lesson-data/exercise-data/proteins` directory:\n"
"> `*.pdb` matches `ethane.pdb`, `propane.pdb`, and every\n"
"> file that ends with '.pdb'. On the other hand, `p*.pdb` only matches\n"
"> `pentane.pdb` and `propane.pdb`, because the 'p' at the front only\n"
"> matches filenames that begin with the letter 'p'.\n"
">\n"
"> `?` is also a wildcard, but it matches exactly one character.\n"
"> So `?ethane.pdb` would match `methane.pdb` whereas\n"
"> `*ethane.pdb` matches both `ethane.pdb`, and `methane.pdb`.\n"
">\n"
"> Wildcards can be used in combination with each other\n"
"> e.g. `???ane.pdb` matches three characters followed by `ane.pdb`,\n"
"> giving `cubane.pdb  ethane.pdb  octane.pdb`.\n"
">\n"
"> When the shell sees a wildcard, it expands the wildcard to create a\n"
"> list of matching filenames *before* running the command that was\n"
"> asked for. As an exception, if a wildcard expression does not match\n"
"> any file, Bash will pass the expression as an argument to the command\n"
"> as it is. For example, typing `ls *.pdf` in the `proteins` directory\n"
"> (which contains only files with names ending with `.pdb`) results in\n"
"> an error message that there is no file called `*.pdf`.\n"
"> However, generally commands like `wc` and `ls` see the lists of\n"
"> file names matching these expressions, but not the wildcards\n"
"> themselves. It is the shell, not the other programs, that deals with\n"
"> expanding wildcards."
msgstr ""
">\n"
"> Символ `*` - це **підстановочний символ**, який відповідає нулю або більшій кількості будь-яких символів.\n"
"> Розглянемо каталог `shell-lesson-data/exercise-data/proteins`:\n"
"> `*.pdb` відповідає `ethane.pdb`, `propane.pdb` і кожному\n"
"> файлу, який закінчується на '.pdb'. З іншого боку, `p*.pdb` співпадає лише з\n"
"> `pentane.pdb` і `propane.pdb`, оскільки \"p\" спереду лише\n"
"> співпадає з назвами файлів, які починаються з літери 'p'.\n"
">\n"
"> Символ `?` також є подстановочним символом, але він відповідає рівно одному будь-якому символу.\n"
"> Отже, `?ethane.pdb` буде відповідати `methane.pdb`, тоді як\n"
"> `*ethane.pdb` відповідає як `ethane.pdb`, так і `methane.pdb`.\n"
">\n"
"> Підставні символи можна використовувати у поєднанні один з одним\n"
"> наприклад, `???ane.pdb` відповідає трьом символам, за якими слідує `ane.pdb`,\n"
"> що дає `cubane.pdb ethane.pdb octane.pdb`.\n"
">\n"
"> Коли термінал бачить підстановочний символ, він розгортає його для створення\n"
"> списку відповідних імен файлів *до* запуску команди, яку.\n"
"> було введено. Як виняток, якщо вираз підстановки не відповідає\n"
"> жодному файлу, Bash передасть вираз як аргумент до команди,\n"
"> як є. Наприклад, введення `ls *.pdf` у каталозі `proteins`\n"
"> (який містить лише файли з іменами, що закінчуються на `.pdb`) призведе до\n"
"> повідомлення про те, що не існує файла з назвою `*.pdf`.\n"
"> Втім, зазвичай команди на кшталт `wc` і `ls` показують списки > імен файлів, які відповідають цим виразам,\n"
"> але не самим підстановочним символам.\n"
"> Саме термінал, а не інші програми, виконує\n"
"> розкриття підстановочних символів."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:724
msgid "> ## List filenames matching a pattern"
msgstr "> ## Отримання переліку імен файлів, що відповідають шаблону"

#: shell-novice/_episodes/03-create.md:725
msgid ""
">\n"
"> When run in the `proteins` directory, which `ls` command(s) will\n"
"> produce this output?\n"
">\n"
"> `ethane.pdb   methane.pdb`\n"
">\n"
"> 1. `ls *t*ane.pdb`\n"
"> 2. `ls *t?ne.*`\n"
"> 3. `ls *t??ne.pdb`\n"
"> 4. `ls ethane.*`\n"
">\n"
"> > ## Solution\n"
">>  The solution is `3.`\n"
">>\n"
">> `1.` shows all files whose names contain zero or more characters (`*`)\n"
">> followed by the letter `t`,\n"
">> then zero or more characters (`*`) followed by `ane.pdb`.\n"
">> This gives `ethane.pdb  methane.pdb  octane.pdb  pentane.pdb`.\n"
">>\n"
">> `2.` shows all files whose names start with zero or more characters (`*`) followed by\n"
">> the letter `t`,\n"
">> then a single character (`?`), then `ne.` followed by zero or more characters (`*`).\n"
">> This will give us `octane.pdb` and `pentane.pdb` but doesn't match anything\n"
">> which ends in `thane.pdb`.\n"
">>\n"
">> `3.` fixes the problems of option 2 by matching two characters (`??`) between `t` and `ne`.\n"
">> This is the solution.\n"
">>\n"
">> `4.` only shows files starting with `ethane.`."
msgstr ""
">\n"
"> При виконанні в каталозі `proteins`, яка з команд `ls` видасть\n"
"> наступний результат?\n"
">\n"
"> `ethane.pdb methane.pdb`\n"
">\n"
"> 1. `ls *t*ane.pdb`\n"
"> 2. `ls *t?ne.*`\n"
"> 3. `ls *t??ne.pdb`\n"
"> 4. `ls ethane.*`\n"
">\n"
"> Розв'язок\n"
">> Розв'язком є `3`.\n"
">>\n"
">> `1.` показує всі файли, назви яких містять нуль або більше символів (`*`)\n"
">> далі йде літера `t`,\n"
">> потім нуль або більше символів (`*`) і далі `ane.pdb`.\n"
">> Це дасть `ethane.pdb methane.pdb octane.pdb pentane.pdb`.\n"
">>\n"
">> `2.` показує всі файли, назви яких починаються з нуля або більше символів (`*`), за якими йде\n"
">> літера `t`,\n"
">> потім один будь-який символ (`?`), потім `ne.` і далі нуль або більше символів (`*`).\n"
">> Це дасть нам `octane.pdb` і `pentane.pdb`, але не збігається ні з чим,\n"
">> що закінчується на `thane.pdb`.\n"
">>\n"
">> `3.` виправляє проблеми варіанта 2, зіставляючи два символи (`??`) між `t` і `ne`.\n"
">> Це і є рішення.\n"
">>\n"
">> `4.` показує лише файли, що починаються з `ethane.`."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:757
msgid "> ## More on Wildcards"
msgstr "> ## Більше про підстановочні символи"

#: shell-novice/_episodes/03-create.md:758
msgid ""
">\n"
"> Sam has a directory containing calibration data, datasets, and descriptions of\n"
"> the datasets:\n"
">\n"
"> ~~~\n"
"> .\n"
"> ├── 2015-10-23-calibration.txt\n"
"> ├── 2015-10-23-dataset1.txt\n"
"> ├── 2015-10-23-dataset2.txt\n"
"> ├── 2015-10-23-dataset_overview.txt\n"
"> ├── 2015-10-26-calibration.txt\n"
"> ├── 2015-10-26-dataset1.txt\n"
"> ├── 2015-10-26-dataset2.txt\n"
"> ├── 2015-10-26-dataset_overview.txt\n"
"> ├── 2015-11-23-calibration.txt\n"
"> ├── 2015-11-23-dataset1.txt\n"
"> ├── 2015-11-23-dataset2.txt\n"
"> ├── 2015-11-23-dataset_overview.txt\n"
"> ├── backup\n"
"> │   ├── calibration\n"
"> │   └── datasets\n"
"> └── send_to_bob\n"
">     ├── all_datasets_created_on_a_23rd\n"
">     └── all_november_files\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Before heading off to another field trip, she wants to back up her data and\n"
"> send some datasets to her colleague Bob. Sam uses the following commands\n"
"> to get the job done:\n"
">\n"
"> ~~~\n"
"> $ cp *dataset* backup/datasets\n"
"> $ cp ____calibration____ backup/calibration\n"
"> $ cp 2015-____-____ send_to_bob/all_november_files/\n"
"> $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Help Sam by filling in the blanks.\n"
">\n"
"> The resulting directory structure should look like this\n"
"> ```\n"
"> .\n"
"> ├── 2015-10-23-calibration.txt\n"
"> ├── 2015-10-23-dataset1.txt\n"
"> ├── 2015-10-23-dataset2.txt\n"
"> ├── 2015-10-23-dataset_overview.txt\n"
"> ├── 2015-10-26-calibration.txt\n"
"> ├── 2015-10-26-dataset1.txt\n"
"> ├── 2015-10-26-dataset2.txt\n"
"> ├── 2015-10-26-dataset_overview.txt\n"
"> ├── 2015-11-23-calibration.txt\n"
"> ├── 2015-11-23-dataset1.txt\n"
"> ├── 2015-11-23-dataset2.txt\n"
"> ├── 2015-11-23-dataset_overview.txt\n"
"> ├── backup\n"
"> │   ├── calibration\n"
"> │   │   ├── 2015-10-23-calibration.txt\n"
"> │   │   ├── 2015-10-26-calibration.txt\n"
"> │   │   └── 2015-11-23-calibration.txt\n"
"> │   └── datasets\n"
"> │       ├── 2015-10-23-dataset1.txt\n"
"> │       ├── 2015-10-23-dataset2.txt\n"
"> │       ├── 2015-10-23-dataset_overview.txt\n"
"> │       ├── 2015-10-26-dataset1.txt\n"
"> │       ├── 2015-10-26-dataset2.txt\n"
"> │       ├── 2015-10-26-dataset_overview.txt\n"
"> │       ├── 2015-11-23-dataset1.txt\n"
"> │       ├── 2015-11-23-dataset2.txt\n"
"> │       └── 2015-11-23-dataset_overview.txt\n"
"> └── send_to_bob\n"
">     ├── all_datasets_created_on_a_23rd\n"
">     │   ├── 2015-10-23-dataset1.txt\n"
">     │   ├── 2015-10-23-dataset2.txt\n"
">     │   ├── 2015-10-23-dataset_overview.txt\n"
">     │   ├── 2015-11-23-dataset1.txt\n"
">     │   ├── 2015-11-23-dataset2.txt\n"
">     │   └── 2015-11-23-dataset_overview.txt\n"
">     └── all_november_files\n"
">         ├── 2015-11-23-calibration.txt\n"
">         ├── 2015-11-23-dataset1.txt\n"
">         ├── 2015-11-23-dataset2.txt\n"
">         └── 2015-11-23-dataset_overview.txt\n"
"> ```\n"
"> {: .language-bash}\n"
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > $ cp *calibration.txt backup/calibration\n"
"> > $ cp 2015-11-* send_to_bob/all_november_files/\n"
"> > $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/\n"
"> > ```\n"
"> > {: .language-bash}"
msgstr ""
">\n"
"> Сем має каталог, який містить дані калібрування, набори даних та описи\n"
"> наборів даних:\n"
">\n"
"> ~~~\n"
"> .\n"
"> ├── 2015-10-23-calibration.txt\n"
"> ├── 2015-10-23-dataset1.txt\n"
"> ├── 2015-10-23-dataset2.txt\n"
"> ├── 2015-10-23-dataset_overview.txt\n"
"> ├── 2015-10-26-calibration.txt\n"
"> ├── 2015-10-26-dataset1.txt\n"
"> ├── 2015-10-26-dataset2.txt\n"
"> ├── 2015-10-26-dataset_overview.txt\n"
"> ├── 2015-11-23-calibration.txt\n"
"> ├── 2015-11-23-dataset1.txt\n"
"> ├── 2015-11-23-dataset2.txt\n"
"> ├── 2015-11-23-dataset_overview.txt\n"
"> ├── backup\n"
"> │   ├── calibration\n"
"> │   └── datasets\n"
"> └── send_to_bob\n"
">     ├── all_datasets_created_on_a_23rd\n"
">     └── all_november_files\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Перед тим, як вирушити на чергову екскурсію, вона хоче створити резервну копію даних і\n"
"> надіслати деякі набори даних своєму колезі Бобу. Сем використовує наступні команди\n"
"> щоб виконати роботу:\n"
">\n"
"> ~~~\n"
"> $ cp *dataset* backup/datasets\n"
"> $ cp ____calibration____ backup/calibration\n"
"> $ cp 2015-____-____ send_to_bob/all_november_files/\n"
"> $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/\n"
"> ~~~\n"
"> {: .language-bash}\n"
">\n"
"> Допоможіть Сему, заповнивши пропуски.\n"
">\n"
"> Отримана структура каталогів повинна виглядати наступним чином\n"
"> ```\n"
"> .\n"
"> ├── 2015-10-23-calibration.txt\n"
"> ├── 2015-10-23-dataset1.txt\n"
"> ├── 2015-10-23-dataset2.txt\n"
"> ├── 2015-10-23-dataset_overview.txt\n"
"> ├── 2015-10-26-calibration.txt\n"
"> ├── 2015-10-26-dataset1.txt\n"
"> ├── 2015-10-26-dataset2.txt\n"
"> ├── 2015-10-26-dataset_overview.txt\n"
"> ├── 2015-11-23-calibration.txt\n"
"> ├── 2015-11-23-dataset1.txt\n"
"> ├── 2015-11-23-dataset2.txt\n"
"> ├── 2015-11-23-dataset_overview.txt\n"
"> ├── backup\n"
"> │   ├── calibration\n"
"> │   │   ├── 2015-10-23-calibration.txt\n"
"> │   │   ├── 2015-10-26-calibration.txt\n"
"> │   │   └── 2015-11-23-calibration.txt\n"
"> │   └── datasets\n"
"> │       ├── 2015-10-23-dataset1.txt\n"
"> │       ├── 2015-10-23-dataset2.txt\n"
"> │       ├── 2015-10-23-dataset_overview.txt\n"
"> │       ├── 2015-10-26-dataset1.txt\n"
"> │       ├── 2015-10-26-dataset2.txt\n"
"> │       ├── 2015-10-26-dataset_overview.txt\n"
"> │       ├── 2015-11-23-dataset1.txt\n"
"> │       ├── 2015-11-23-dataset2.txt\n"
"> │       └── 2015-11-23-dataset_overview.txt\n"
"> └── send_to_bob\n"
">     ├── all_datasets_created_on_a_23rd\n"
">     │   ├── 2015-10-23-dataset1.txt\n"
">     │   ├── 2015-10-23-dataset2.txt\n"
">     │   ├── 2015-10-23-dataset_overview.txt\n"
">     │   ├── 2015-11-23-dataset1.txt\n"
">     │   ├── 2015-11-23-dataset2.txt\n"
">     │   └── 2015-11-23-dataset_overview.txt\n"
">     └── all_november_files\n"
">         ├── 2015-11-23-calibration.txt\n"
">         ├── 2015-11-23-dataset1.txt\n"
">         ├── 2015-11-23-dataset2.txt\n"
">         └── 2015-11-23-dataset_overview.txt\n"
"> ```\n"
"> {: .language-bash}\n"
">\n"
"> > ## Розв'язання\n"
"> > ```\n"
"> > $ cp *calibration.txt backup/calibration\n"
"> > $ cp 2015-11-* send_to_bob/all_november_files/\n"
"> > $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/\n"
"> > ```\n"
"> > {: .language-bash}"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:855
msgid "> ## Organizing Directories and Files"
msgstr "> ## Упорядкування каталогів і файлів"

#: shell-novice/_episodes/03-create.md:856
msgid ""
">\n"
"> Jamie is working on a project and she sees that her files aren't very well\n"
"> organized:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/  fructose.dat    raw/   sucrose.dat\n"
"> ~~~"
msgstr ""
">\n"
"> Джеймі працює над проектом і бачить, що її файли не дуже добре\n"
"> впорядковані:\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/  fructose.dat    raw/   sucrose.dat\n"
"> ~~~"

#: shell-novice/_episodes/03-create.md:868
msgid ""
">\n"
"> The `fructose.dat` and `sucrose.dat` files contain output from her data\n"
"> analysis. What command(s) covered in this lesson does she need to run\n"
"> so that the commands below will produce the output shown?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/   raw/\n"
"> ~~~"
msgstr ""
">\n"
"> Файли `fructose.dat` та `ucrose.dat` містять результати її\n"
"> аналізу. Яку команду (команди), розглянуту (розглянуті) у цьому уроці, їй потрібно виконати,\n"
"> щоб наведені нижче команди створили показані нижче результати?\n"
">\n"
"> ~~~\n"
"> $ ls -F\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> analyzed/   raw/\n"
"> ~~~"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:882
msgid "> $ ls analyzed"
msgstr "> $ ls analyzed"

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:886
msgid "> fructose.dat    sucrose.dat"
msgstr "> fructose.dat    sucrose.dat"

#: shell-novice/_episodes/03-create.md:889
msgid ""
">\n"
"> > ## Solution\n"
"> > ```\n"
"> > mv *.dat analyzed\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Jamie needs to move her files `fructose.dat` and `sucrose.dat` to the `analyzed` directory.\n"
"> > The shell will expand *.dat to match all .dat files in the current directory.\n"
"> > The `mv` command then moves the list of .dat files to the 'analyzed' directory."
msgstr ""
">\n"
"> > Розв'язання\n"
"> > ```\n"
"> > mv *.dat analyzed\n"
"> > ```\n"
"> > {: .language-bash}\n"
"> > Джеймі потрібно перемістити файли `fructose.dat` та `ucrose.dat` до каталогу `analyzed`.\n"
"> > Термінал розширить шаблон *.dat так, щоб він відповідав усім файлам .dat у поточному каталозі.\n"
"> > Команда `mv` перемістить сформований перелік файлів .dat до каталогу 'analyzed'."

# blockquote, which can be cascaded
#: shell-novice/_episodes/03-create.md:901
msgid "> ## Reproduce a folder structure"
msgstr "> ## Відтворити структуру папок"

#: shell-novice/_episodes/03-create.md:902
msgid ""
">\n"
"> You're starting a new experiment and would like to duplicate the directory\n"
"> structure from your previous experiment so you can add new data.\n"
">\n"
"> Assume that the previous experiment is in a folder called `2016-05-18`,\n"
"> which contains a `data` folder that in turn contains folders named `raw` and\n"
"> `processed` that contain data files.  The goal is to copy the folder structure\n"
"> of the `2016-05-18` folder into a folder called `2016-05-20`\n"
"> so that your final directory structure looks like this:\n"
">\n"
"> ~~~\n"
"> 2016-05-20/\n"
"> └── data\n"
">    ├── processed\n"
">    └── raw\n"
"> ~~~"
msgstr ""
">\n"
"> Ви починаєте новий експеримент і хочете продублювати структуру каталогу\n"
"> з попереднього експерименту, щоб ви могли додати нові дані.\n"
">\n"
"> Припустимо, що попередній експеримент знаходиться у каталозі з назвою `2016-05-18`,\n"
"> який містить каталог `data`, який, у свою чергу, містить каталоги `raw` і\n"
"> `processed`, які містять файли даних. Мета полягає у копіюванні структури папок\n"
"> каталогу `2016-05-18` до каталогу з назвою `2016-05-20` \n"
"> таким чином, щоб ваша фінальна структура каталогів виглядала наступним чином:\n"
">\n"
"> ~~~\n"
"> 2016-05-20/\n"
"> └── data\n"
">    ├── processed\n"
">    └── raw\n"
"> ~~~"

#: shell-novice/_episodes/03-create.md:919
msgid ""
">\n"
"> Which of the following set of commands would achieve this objective?\n"
"> What would the other commands do?\n"
">\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ mkdir 2016-05-20/data\n"
"> $ mkdir 2016-05-20/data/processed\n"
"> $ mkdir 2016-05-20/data/raw\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ cd 2016-05-20\n"
"> $ mkdir data\n"
"> $ cd data\n"
"> $ mkdir raw processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20/data/raw\n"
"> $ mkdir 2016-05-20/data/processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir -p 2016-05-20/data/raw\n"
"> $ mkdir -p 2016-05-20/data/processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ cd 2016-05-20\n"
"> $ mkdir data\n"
"> $ mkdir raw processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> >\n"
"> > ## Solution\n"
"> > The first two sets of commands achieve this objective.\n"
"> > The first set uses relative paths to create the top-level directory before\n"
"> > the subdirectories.\n"
"> >\n"
"> > The third set of commands will give an error because the default behavior of `mkdir`\n"
"> > won't create a subdirectory of a non-existent directory:\n"
"> > the intermediate level folders must be created first.\n"
"> >\n"
"> > The fourth set of commands achieve this objective. Remember, the `-p` option,\n"
"> > followed by a path of one or more\n"
"> > directories, will cause `mkdir` to create any intermediate subdirectories as required.\n"
"> >\n"
"> > The final set of commands generates the 'raw' and 'processed' directories at the same level\n"
"> > as the 'data' directory."
msgstr ""
">\n"
"> Який з наведених нижче наборів команд досягне цієї мети?\n"
"> Що зроблять інші команди?\n"
">\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ mkdir 2016-05-20/data\n"
"> $ mkdir 2016-05-20/data/processed\n"
"> $ mkdir 2016-05-20/data/raw\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ cd 2016-05-20\n"
"> $ mkdir data\n"
"> $ cd data\n"
"> $ mkdir raw processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20/data/raw\n"
"> $ mkdir 2016-05-20/data/processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir -p 2016-05-20/data/raw\n"
"> $ mkdir -p 2016-05-20/data/processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> ~~~\n"
"> $ mkdir 2016-05-20\n"
"> $ cd 2016-05-20\n"
"> $ mkdir data\n"
"> $ mkdir raw processed\n"
"> ~~~\n"
"> {: .language-bash}\n"
"> >\n"
"> > ## Розв'язання\n"
"> > Перші два набори команд досягають цієї мети.\n"
"> > Перший набір використовує відносні шляхи для створення каталогу верхнього рівня перед\n"
"> > підкаталогами.\n"
"> >\n"
"> > Третій набір команд призведе до помилки, оскільки поведінка `mkdir` за замовчуванням\n"
"> > не створює підкаталог в каталозі, що не існує:\n"
"> > спочатку мають бути створені каталоги проміжних рівнів.\n"
"> >\n"
"> > Четвертий набір команд досягає цієї мети. Пам'ятайте, опція `-p`,\n"
"> > за яким слідує шлях до одного або декількох\n"
"> > каталогів, змусить `mkdir` створити будь-які проміжні підкаталоги за потреби.\n"
"> >\n"
"> > Останній набір команд створить каталоги 'raw' і 'processed' на тому ж рівні, \n"
"> > що і каталог 'data'."
